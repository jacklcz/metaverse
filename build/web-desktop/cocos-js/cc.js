System.register(['./instantiated-cf013a92.js', './_commonjsHelpers-364bf34e.js'], function (exports) {
    'use strict';
    var DescriptorSet, Buffer, CommandBuffer, ObjectType, Status, API, SurfaceTransform, Feature, Format, FormatType, Type$1, BufferUsageBit, BufferFlagBit, MemoryAccessBit, MemoryUsageBit, TextureType, TextureUsageBit, TextureFlagBit, FormatFeatureBit, SampleCount, VsyncMode, Filter, Address, ComparisonFunc, StencilOp, BlendFactor, BlendOp, ColorMask, ShaderStageFlagBit, LoadOp, StoreOp, AccessFlagBit, ResolveMode, PipelineBindPoint, PrimitiveMode, PolygonMode, ShadeModel, CullMode, DynamicStateFlagBit, StencilFace, DescriptorType, QueueType, QueryType, CommandBufferType, ClearFlagBit, Size, DeviceCaps, Offset, Rect, Extent, TextureSubresLayers, TextureSubresRange, TextureCopy, TextureBlit, BufferTextureCopy, Viewport, Color, BindingMappingInfo, SwapchainInfo, DeviceInfo, BufferInfo, BufferViewInfo, DrawInfo, DispatchInfo, IndirectBuffer, TextureInfo, TextureViewInfo, SamplerInfo, Uniform, UniformBlock, UniformSamplerTexture, UniformSampler, UniformTexture, UniformStorageImage, UniformStorageBuffer, UniformInputAttachment, ShaderStage, Attribute, ShaderInfo, InputAssemblerInfo, ColorAttachment, DepthStencilAttachment, SubpassInfo, SubpassDependency, RenderPassInfo, GeneralBarrierInfo, TextureBarrierInfo, FramebufferInfo, DescriptorSetLayoutBinding, DescriptorSetLayoutInfo, DescriptorSetInfo, PipelineLayoutInfo, InputState, CommandBufferInfo, QueueInfo, QueryPoolInfo, FormatInfo, MemoryStatus, DynamicStencilStates, DynamicStates, GFXObject, AttributeName, FormatInfos, DESCRIPTOR_BUFFER_TYPE, DESCRIPTOR_SAMPLER_TYPE, DESCRIPTOR_DYNAMIC_TYPE, DRAW_INFO_SIZE, IsPowerOf2, FormatSize, FormatSurfaceSize, GetTypeSize, getTypedArrayConstructor, Device, Swapchain, Framebuffer, InputAssembler, DescriptorSetLayout, PipelineLayout, RasterizerState, DepthStencilState, BlendTarget, BlendState, PipelineStateInfo, PipelineState, Queue, RenderPass, Sampler, Shader, Texture, GeneralBarrier, TextureBarrier, Pool, RecyclePool, CachedArray, Vec3, Mat4, clamp$1, Color$1, _inheritsLoose, PixelFormat, Texture2D, legacyCC, Filter$1, js, _createClass, ccclass, errorID, Rect$1, Vec2, Size$1, Asset, ImageAsset, warnID, createMap, _getClassId, _applyDecoratedDescriptor, _initializerDefineProperty, _assertThisInitialized, serializable, editable, override, string, extname, type$1, warn, mixin, Pool$1, macro, director, Director, murmurhash2_32_gc, assertIsTrue, disallowMultiple, executeInEditMode, NodeEventType, approx, EPSILON$2, _createForOfIteratorHelperLoose, AABB, help, executionOrder, menu$1, displayOrder, tooltip, visibleRect, Component, ccenum, Material, builtinResMgr, RenderableComponent, disallowAnimation, requireComponent, visible, displayName, TextureBase, multiline, Model, RenderingSubMesh, CCObject, MaterialInstance, slide, NodeEventProcessor, range, RenderTexture, _extends, Enum, Camera, view, screen, removeProperty, replaceProperty, markAsWarning, Node, RenderPriority, Layers, Pass, clampf, addon, WrapMode, logID, getError, sys, Input, EventDispatcherPriority, input, DispatcherEventType, InputEventType, assertID, UBOLocal, ModelLocalBindings, downloader, factory, readBuffer, writeBuffer, Mesh, BufferBlob, find, mapBuffer, CCFloat, property$1, TransformBit, Vec4, formerlySerializedAs, LightType, Light$1, CCBoolean, PCFType, DirectionalLight$1, Shadows, Camera$1, SphereLight$1, nt2lm, SpotLight$1, toRadian, Quat, TextureBufferPool, UBOSkinningAnimation, UBOSkinning, BatchingSchemes, ModelType, UBOSkinningTexture, UNIFORM_JOINT_TEXTURE_BINDING, INST_JOINT_ANIM_INFO, Skeleton, CCString, getDefaultFromType, _float, uniquelyReferenced, RealCurve, QuatCurve, ObjectCurve, _wrapNativeSuper, remove, instantiate, EditorExtendable, assertsArrayIndex, assertIsNonNullable, removeIf, array, easing, bezierByTime, binarySearchEpsilon, lerp, ValueType, isLerpable, EasingMethod, RealInterpolationMode, TangentWeightMode, QuatInterpolationMode, WrapMode$1, WrapModeMask, WrappedInfo, debug, System, MutableForwardIterator, clamp01, contains, Eventify, systemInfo, EventTarget, OS, BrowserType, fastRemoveAt, error, nextPow2, WECHAT, EDITOR, toDegree, CCClass, constructLegacyCurveAndConvert, AnimationCurve, repeat$2, pseudoRandom, random, randomRange, randomRangeInt, sign$1, radian, pingPong, INT_MAX, intersect, degreesToRadians, radiansToDegrees, playOnFocus, assetManager, changeBasename, _construct, CollisionMatrix, game, PhysicsGroup$1, cylinder, applyDefaultGeometryOptions, box, plane, capsule, bt, PhysicsSystem, ERigidBodyType, EColliderType, VEC3_0, absolute, absMaxComponent, absMax, Game, selector, preTransforms, TERRAIN_BLOCK_VERTEX_SIZE, TERRAIN_BLOCK_VERTEX_COMPLEXITY, TERRAIN_BLOCK_TILE_COMPLEXITY, TerrainAsset, EffectAsset, isValid, TerrainLayerInfo, PipelineEventType, TERRAIN_HEIGHT_FMAX, TERRAIN_HEIGHT_FMIN, TERRAIN_HEIGHT_BASE, TERRAIN_HEIGHT_FACTORY, TERRAIN_MAX_BLEND_LAYERS, TERRAIN_DATA_VERSION5, TERRAIN_MAX_LAYER_COUNT, engineVersion, EventHandler, rangeMin, rangeMax, contains$1, screenAdapter, KeyCode, MINIGAME, JSB, RUNTIME_BASED, EventTouch, SystemEventType, Event, Scene, editorOnly, View, log, mat4, createCommonjsModule, unwrapExports, commonjsGlobal;
    return {
        setters: [function (module) {
            DescriptorSet = module.D;
            Buffer = module.B;
            CommandBuffer = module.C;
            ObjectType = module.O;
            Status = module.S;
            API = module.A;
            SurfaceTransform = module.a;
            Feature = module.F;
            Format = module.b;
            FormatType = module.c;
            Type$1 = module.T;
            BufferUsageBit = module.d;
            BufferFlagBit = module.e;
            MemoryAccessBit = module.M;
            MemoryUsageBit = module.f;
            TextureType = module.g;
            TextureUsageBit = module.h;
            TextureFlagBit = module.i;
            FormatFeatureBit = module.j;
            SampleCount = module.k;
            VsyncMode = module.V;
            Filter = module.l;
            Address = module.m;
            ComparisonFunc = module.n;
            StencilOp = module.o;
            BlendFactor = module.p;
            BlendOp = module.q;
            ColorMask = module.r;
            ShaderStageFlagBit = module.s;
            LoadOp = module.L;
            StoreOp = module.t;
            AccessFlagBit = module.u;
            ResolveMode = module.R;
            PipelineBindPoint = module.P;
            PrimitiveMode = module.v;
            PolygonMode = module.w;
            ShadeModel = module.x;
            CullMode = module.y;
            DynamicStateFlagBit = module.z;
            StencilFace = module.E;
            DescriptorType = module.G;
            QueueType = module.Q;
            QueryType = module.H;
            CommandBufferType = module.I;
            ClearFlagBit = module.J;
            Size = module.K;
            DeviceCaps = module.N;
            Offset = module.U;
            Rect = module.W;
            Extent = module.X;
            TextureSubresLayers = module.Y;
            TextureSubresRange = module.Z;
            TextureCopy = module._;
            TextureBlit = module.$;
            BufferTextureCopy = module.a0;
            Viewport = module.a1;
            Color = module.a2;
            BindingMappingInfo = module.a3;
            SwapchainInfo = module.a4;
            DeviceInfo = module.a5;
            BufferInfo = module.a6;
            BufferViewInfo = module.a7;
            DrawInfo = module.a8;
            DispatchInfo = module.a9;
            IndirectBuffer = module.aa;
            TextureInfo = module.ab;
            TextureViewInfo = module.ac;
            SamplerInfo = module.ad;
            Uniform = module.ae;
            UniformBlock = module.af;
            UniformSamplerTexture = module.ag;
            UniformSampler = module.ah;
            UniformTexture = module.ai;
            UniformStorageImage = module.aj;
            UniformStorageBuffer = module.ak;
            UniformInputAttachment = module.al;
            ShaderStage = module.am;
            Attribute = module.an;
            ShaderInfo = module.ao;
            InputAssemblerInfo = module.ap;
            ColorAttachment = module.aq;
            DepthStencilAttachment = module.ar;
            SubpassInfo = module.as;
            SubpassDependency = module.at;
            RenderPassInfo = module.au;
            GeneralBarrierInfo = module.av;
            TextureBarrierInfo = module.aw;
            FramebufferInfo = module.ax;
            DescriptorSetLayoutBinding = module.ay;
            DescriptorSetLayoutInfo = module.az;
            DescriptorSetInfo = module.aA;
            PipelineLayoutInfo = module.aB;
            InputState = module.aC;
            CommandBufferInfo = module.aD;
            QueueInfo = module.aE;
            QueryPoolInfo = module.aF;
            FormatInfo = module.aG;
            MemoryStatus = module.aH;
            DynamicStencilStates = module.aI;
            DynamicStates = module.aJ;
            GFXObject = module.aK;
            AttributeName = module.aL;
            FormatInfos = module.aM;
            DESCRIPTOR_BUFFER_TYPE = module.aN;
            DESCRIPTOR_SAMPLER_TYPE = module.aO;
            DESCRIPTOR_DYNAMIC_TYPE = module.aP;
            DRAW_INFO_SIZE = module.aQ;
            IsPowerOf2 = module.aR;
            FormatSize = module.aS;
            FormatSurfaceSize = module.aT;
            GetTypeSize = module.aU;
            getTypedArrayConstructor = module.aV;
            Device = module.aW;
            Swapchain = module.aX;
            Framebuffer = module.aY;
            InputAssembler = module.aZ;
            DescriptorSetLayout = module.a_;
            PipelineLayout = module.a$;
            RasterizerState = module.b0;
            DepthStencilState = module.b1;
            BlendTarget = module.b2;
            BlendState = module.b3;
            PipelineStateInfo = module.b4;
            PipelineState = module.b5;
            Queue = module.b6;
            RenderPass = module.b7;
            Sampler = module.b8;
            Shader = module.b9;
            Texture = module.ba;
            GeneralBarrier = module.bb;
            TextureBarrier = module.bc;
            Pool = module.bd;
            RecyclePool = module.be;
            CachedArray = module.bf;
            Vec3 = module.bg;
            Mat4 = module.bh;
            clamp$1 = module.bi;
            Color$1 = module.bj;
            _inheritsLoose = module.bk;
            PixelFormat = module.bl;
            Texture2D = module.bm;
            legacyCC = module.bn;
            Filter$1 = module.bo;
            js = module.bp;
            _createClass = module.bq;
            ccclass = module.br;
            errorID = module.bs;
            Rect$1 = module.bt;
            Vec2 = module.bu;
            Size$1 = module.bv;
            Asset = module.bw;
            ImageAsset = module.bx;
            warnID = module.by;
            createMap = module.bz;
            _getClassId = module.bA;
            _applyDecoratedDescriptor = module.bB;
            _initializerDefineProperty = module.bC;
            _assertThisInitialized = module.bD;
            serializable = module.bE;
            editable = module.bF;
            override = module.bG;
            string = module.bH;
            extname = module.bI;
            type$1 = module.bJ;
            warn = module.bK;
            mixin = module.bL;
            Pool$1 = module.bM;
            macro = module.bN;
            director = module.bO;
            Director = module.bP;
            murmurhash2_32_gc = module.bQ;
            assertIsTrue = module.bR;
            disallowMultiple = module.bS;
            executeInEditMode = module.bT;
            NodeEventType = module.bU;
            approx = module.bV;
            EPSILON$2 = module.bW;
            _createForOfIteratorHelperLoose = module.bX;
            AABB = module.bY;
            help = module.bZ;
            executionOrder = module.b_;
            menu$1 = module.b$;
            displayOrder = module.c0;
            tooltip = module.c1;
            visibleRect = module.c2;
            Component = module.c3;
            ccenum = module.c4;
            Material = module.c5;
            builtinResMgr = module.c6;
            RenderableComponent = module.c7;
            disallowAnimation = module.c8;
            requireComponent = module.c9;
            visible = module.ca;
            displayName = module.cb;
            TextureBase = module.cc;
            multiline = module.cd;
            Model = module.ce;
            RenderingSubMesh = module.cf;
            CCObject = module.cg;
            MaterialInstance = module.ch;
            slide = module.ci;
            NodeEventProcessor = module.cj;
            range = module.ck;
            RenderTexture = module.cl;
            _extends = module.cm;
            Enum = module.cn;
            Camera = module.co;
            view = module.cp;
            screen = module.cq;
            removeProperty = module.cr;
            replaceProperty = module.cs;
            markAsWarning = module.ct;
            Node = module.cu;
            RenderPriority = module.cv;
            Layers = module.cw;
            Pass = module.cx;
            clampf = module.cy;
            addon = module.cz;
            WrapMode = module.cA;
            logID = module.cB;
            getError = module.cC;
            sys = module.cD;
            Input = module.cE;
            EventDispatcherPriority = module.cF;
            input = module.cG;
            DispatcherEventType = module.cH;
            InputEventType = module.cI;
            assertID = module.cJ;
            UBOLocal = module.cK;
            ModelLocalBindings = module.cL;
            downloader = module.cM;
            factory = module.cN;
            readBuffer = module.cO;
            writeBuffer = module.cP;
            Mesh = module.cQ;
            BufferBlob = module.cR;
            find = module.cS;
            mapBuffer = module.cT;
            CCFloat = module.cU;
            property$1 = module.cV;
            TransformBit = module.cW;
            Vec4 = module.cX;
            formerlySerializedAs = module.cY;
            LightType = module.cZ;
            Light$1 = module.c_;
            CCBoolean = module.c$;
            PCFType = module.d0;
            DirectionalLight$1 = module.d1;
            Shadows = module.d2;
            Camera$1 = module.d3;
            SphereLight$1 = module.d4;
            nt2lm = module.d5;
            SpotLight$1 = module.d6;
            toRadian = module.d7;
            Quat = module.d8;
            TextureBufferPool = module.d9;
            UBOSkinningAnimation = module.da;
            UBOSkinning = module.db;
            BatchingSchemes = module.dc;
            ModelType = module.dd;
            UBOSkinningTexture = module.de;
            UNIFORM_JOINT_TEXTURE_BINDING = module.df;
            INST_JOINT_ANIM_INFO = module.dg;
            Skeleton = module.dh;
            CCString = module.di;
            getDefaultFromType = module.dj;
            _float = module.dk;
            uniquelyReferenced = module.dl;
            RealCurve = module.dm;
            QuatCurve = module.dn;
            ObjectCurve = module.dp;
            _wrapNativeSuper = module.dq;
            remove = module.dr;
            instantiate = module.ds;
            EditorExtendable = module.dt;
            assertsArrayIndex = module.du;
            assertIsNonNullable = module.dv;
            removeIf = module.dw;
            array = module.dx;
            easing = module.dy;
            bezierByTime = module.dz;
            binarySearchEpsilon = module.dA;
            lerp = module.dB;
            ValueType = module.dC;
            isLerpable = module.dD;
            EasingMethod = module.dE;
            RealInterpolationMode = module.dF;
            TangentWeightMode = module.dG;
            QuatInterpolationMode = module.dH;
            WrapMode$1 = module.dI;
            WrapModeMask = module.dJ;
            WrappedInfo = module.dK;
            debug = module.dL;
            System = module.dM;
            MutableForwardIterator = module.dN;
            clamp01 = module.dO;
            contains = module.dP;
            Eventify = module.dQ;
            systemInfo = module.dR;
            EventTarget = module.dS;
            OS = module.dT;
            BrowserType = module.dU;
            fastRemoveAt = module.dV;
            error = module.dW;
            nextPow2 = module.dX;
            WECHAT = module.dY;
            EDITOR = module.dZ;
            toDegree = module.d_;
            CCClass = module.d$;
            constructLegacyCurveAndConvert = module.e0;
            AnimationCurve = module.e1;
            repeat$2 = module.e2;
            pseudoRandom = module.e3;
            random = module.e4;
            randomRange = module.e5;
            randomRangeInt = module.e6;
            sign$1 = module.e7;
            radian = module.e8;
            pingPong = module.e9;
            INT_MAX = module.ea;
            intersect = module.eb;
            degreesToRadians = module.ec;
            radiansToDegrees = module.ed;
            playOnFocus = module.ee;
            assetManager = module.ef;
            changeBasename = module.eg;
            _construct = module.eh;
            CollisionMatrix = module.ei;
            game = module.ej;
            PhysicsGroup$1 = module.ek;
            cylinder = module.el;
            applyDefaultGeometryOptions = module.em;
            box = module.en;
            plane = module.eo;
            capsule = module.ep;
            bt = module.eq;
            PhysicsSystem = module.er;
            ERigidBodyType = module.es;
            EColliderType = module.et;
            VEC3_0 = module.eu;
            absolute = module.ev;
            absMaxComponent = module.ew;
            absMax = module.ex;
            Game = module.ey;
            selector = module.ez;
            preTransforms = module.eA;
            TERRAIN_BLOCK_VERTEX_SIZE = module.eB;
            TERRAIN_BLOCK_VERTEX_COMPLEXITY = module.eC;
            TERRAIN_BLOCK_TILE_COMPLEXITY = module.eD;
            TerrainAsset = module.eE;
            EffectAsset = module.eF;
            isValid = module.eG;
            TerrainLayerInfo = module.eH;
            PipelineEventType = module.eI;
            TERRAIN_HEIGHT_FMAX = module.eJ;
            TERRAIN_HEIGHT_FMIN = module.eK;
            TERRAIN_HEIGHT_BASE = module.eL;
            TERRAIN_HEIGHT_FACTORY = module.eM;
            TERRAIN_MAX_BLEND_LAYERS = module.eN;
            TERRAIN_DATA_VERSION5 = module.eO;
            TERRAIN_MAX_LAYER_COUNT = module.eP;
            engineVersion = module.eQ;
            EventHandler = module.eR;
            rangeMin = module.eS;
            rangeMax = module.eT;
            contains$1 = module.eU;
            screenAdapter = module.eV;
            KeyCode = module.eW;
            MINIGAME = module.eX;
            JSB = module.eY;
            RUNTIME_BASED = module.eZ;
            EventTouch = module.e_;
            SystemEventType = module.e$;
            Event = module.f0;
            Scene = module.f1;
            editorOnly = module.f2;
            View = module.f3;
            log = module.f4;
            mat4 = module.f5;
            var _setter = {};
            _setter.Acceleration = module.gx;
            _setter.AffineTransform = module.fg;
            _setter.Asset = module.bw;
            _setter.AssetLibrary = module.gl;
            _setter.AssetManager = module.gh;
            _setter.BaseNode = module.gn;
            _setter.BitMask = module.fs;
            _setter.BloomStage = module.g9;
            _setter.BoxCollider = module.gH;
            _setter.BoxColliderComponent = module.gH;
            _setter.BufferAsset = module.fK;
            _setter.CCBoolean = module.c$;
            _setter.CCClass = module.d$;
            _setter.CCFloat = module.cU;
            _setter.CCInteger = module.fF;
            _setter.CCLoader = module.gj;
            _setter.CCObject = module.cg;
            _setter.CCString = module.di;
            _setter.CachedArray = module.bf;
            _setter.Camera = module.co;
            _setter.CameraComponent = module.co;
            _setter.CapsuleCollider = module.gJ;
            _setter.CapsuleColliderComponent = module.gJ;
            _setter.Collider = module.gG;
            _setter.ColliderComponent = module.gG;
            _setter.Color = module.bj;
            _setter.CompactValueTypeArray = module.fG;
            _setter.Component = module.c3;
            _setter.ConeCollider = module.gM;
            _setter.ConstantForce = module.gD;
            _setter.Constraint = module.gQ;
            _setter.CylinderCollider = module.gL;
            _setter.CylinderColliderComponent = module.gL;
            _setter.DebugMode = module.fW;
            _setter.DeferredPipeline = module.g5;
            _setter.Details = module.fD;
            _setter.Director = module.bP;
            _setter.EAxisDirection = module.gT;
            _setter.EPSILON = module.bW;
            _setter.ERigidBodyType = module.es;
            _setter.EffectAsset = module.eF;
            _setter.Enum = module.cn;
            _setter.Event = module.f0;
            _setter.EventAcceleration = module.gu;
            _setter.EventHandler = module.eR;
            _setter.EventKeyboard = module.gv;
            _setter.EventMouse = module.gw;
            _setter.EventTarget = module.dS;
            _setter.EventTouch = module.e_;
            _setter.Eventify = module.dQ;
            _setter.ExtrapolationMode = module.gs;
            _setter.ForwardFlow = module.g3;
            _setter.ForwardPipeline = module.g2;
            _setter.ForwardStage = module.g4;
            _setter.Game = module.ey;
            _setter.GbufferStage = module.g7;
            _setter.HingeConstraint = module.gR;
            _setter.ImageAsset = module.bx;
            _setter.Input = module.cE;
            _setter.InstancedBuffer = module.gd;
            _setter.JavaScript = module.fR;
            _setter.JsonAsset = module.fO;
            _setter.KeyCode = module.eW;
            _setter.Layers = module.cw;
            _setter.LightingStage = module.g8;
            _setter.MATH_FLOAT_ARRAY = module.fq;
            _setter.MainFlow = module.g6;
            _setter.Mat3 = module.ff;
            _setter.Mat4 = module.bh;
            _setter.Material = module.c5;
            _setter.MathBase = module.fr;
            _setter.Mesh = module.cQ;
            _setter.MeshCollider = module.gK;
            _setter.MeshColliderComponent = module.gK;
            _setter.MissingScript = module.gq;
            _setter.Node = module.cu;
            _setter.NodeActivator = module.go;
            _setter.NodePool = module.gt;
            _setter.ObjectCurve = module.dp;
            _setter.PhysicMaterial = module.gE;
            _setter.PhysicsMaterial = module.gE;
            _setter.PhysicsRayResult = module.gF;
            _setter.PhysicsSystem = module.er;
            _setter.PipelineEventProcessor = module.gf;
            _setter.PipelineEventType = module.eI;
            _setter.PipelineStateManager = module.ge;
            _setter.PlaneCollider = module.gP;
            _setter.PointToPointConstraint = module.gS;
            _setter.Pool = module.bd;
            _setter.PostProcessStage = module.ga;
            _setter.Prefab = module.fL;
            _setter.PrefabLink = module.fw;
            _setter.PrivateNode = module.gp;
            _setter.Quat = module.d8;
            _setter.QuatCurve = module.dn;
            _setter.QuatInterpolationMode = module.dH;
            _setter.RealCurve = module.dm;
            _setter.RealInterpolationMode = module.dF;
            _setter.Rect = module.bt;
            _setter.RecyclePool = module.be;
            _setter.RenderFlow = module.g0;
            _setter.RenderPipeline = module.f$;
            _setter.RenderStage = module.g1;
            _setter.RenderTexture = module.cl;
            _setter.RenderableComponent = module.c7;
            _setter.RenderingSubMesh = module.cf;
            _setter.ResolutionPolicy = module.fX;
            _setter.RigidBody = module.gC;
            _setter.RigidBodyComponent = module.gC;
            _setter.Scene = module.f1;
            _setter.SceneAsset = module.fM;
            _setter.Scheduler = module.fY;
            _setter.Script = module.fQ;
            _setter.ShadowFlow = module.gb;
            _setter.ShadowStage = module.gc;
            _setter.SimplexCollider = module.gO;
            _setter.Size = module.bv;
            _setter.Skeleton = module.dh;
            _setter.SphereCollider = module.gI;
            _setter.SphereColliderComponent = module.gI;
            _setter.System = module.dM;
            _setter.SystemEvent = module.gA;
            _setter.SystemEventType = module.e$;
            _setter.TERRAIN_BLOCK_TILE_COMPLEXITY = module.eD;
            _setter.TERRAIN_BLOCK_VERTEX_COMPLEXITY = module.eC;
            _setter.TERRAIN_BLOCK_VERTEX_SIZE = module.eB;
            _setter.TERRAIN_DATA_VERSION = module.gZ;
            _setter.TERRAIN_DATA_VERSION2 = module.g_;
            _setter.TERRAIN_DATA_VERSION3 = module.g$;
            _setter.TERRAIN_DATA_VERSION4 = module.h0;
            _setter.TERRAIN_DATA_VERSION5 = module.eO;
            _setter.TERRAIN_DATA_VERSION_DEFAULT = module.h1;
            _setter.TERRAIN_EAST_INDEX = module.gY;
            _setter.TERRAIN_HEIGHT_BASE = module.eL;
            _setter.TERRAIN_HEIGHT_FACTORY = module.eM;
            _setter.TERRAIN_HEIGHT_FMAX = module.eJ;
            _setter.TERRAIN_HEIGHT_FMIN = module.eK;
            _setter.TERRAIN_MAX_BLEND_LAYERS = module.eN;
            _setter.TERRAIN_MAX_LAYER_COUNT = module.eP;
            _setter.TERRAIN_MAX_LEVELS = module.gU;
            _setter.TERRAIN_NORTH_INDEX = module.gV;
            _setter.TERRAIN_SOUTH_INDEX = module.gW;
            _setter.TERRAIN_WEST_INDEX = module.gX;
            _setter.TangentWeightMode = module.dG;
            _setter.TerrainAsset = module.eE;
            _setter.TerrainCollider = module.gN;
            _setter.TerrainLayerBinaryInfo = module.h2;
            _setter.TerrainLayerInfo = module.eH;
            _setter.TextAsset = module.fN;
            _setter.Texture2D = module.bm;
            _setter.TextureCube = module.fP;
            _setter.Touch = module.gy;
            _setter.TypeScript = module.fS;
            _setter.VERSION = module.eQ;
            _setter.ValueType = module.dC;
            _setter.Vec2 = module.bu;
            _setter.Vec3 = module.bg;
            _setter.Vec4 = module.cX;
            _setter.View = module.f3;
            _setter.WorldNode3DToLocalNodeUI = module.fy;
            _setter.WorldNode3DToWorldNodeUI = module.fz;
            _setter._decorator = module.fB;
            _setter.absMax = module.ex;
            _setter.absMaxComponent = module.ew;
            _setter.approx = module.bV;
            _setter.assert = module.fT;
            _setter.assertID = module.cJ;
            _setter.assetManager = module.ef;
            _setter.bezier = module.f6;
            _setter.bezierByTime = module.dz;
            _setter.bits = module.fa;
            _setter.builtinResMgr = module.c6;
            _setter.ccenum = module.c4;
            _setter.cclegacy = module.bn;
            _setter.clamp = module.bi;
            _setter.clamp01 = module.dO;
            _setter.color = module.fj;
            _setter.convertUtils = module.fA;
            _setter.createDefaultPipeline = module.f_;
            _setter.debug = module.dL;
            _setter.deserialize = module.fC;
            _setter.deserializeTag = module.fI;
            _setter.director = module.bO;
            _setter.easing = module.dy;
            _setter.editorExtrasTag = module.fH;
            _setter.effects = module.gr;
            _setter.enumerableProps = module.fp;
            _setter.equals = module.fk;
            _setter.error = module.dW;
            _setter.errorID = module.bs;
            _setter.find = module.cS;
            _setter.game = module.ej;
            _setter.geometry = module.f9;
            _setter.getError = module.cC;
            _setter.getPhaseID = module.gg;
            _setter.getSerializationMetadata = module.fE;
            _setter.input = module.cG;
            _setter.instantiate = module.ds;
            _setter.inverseLerp = module.fo;
            _setter.isDisplayStats = module.fU;
            _setter.isValid = module.eG;
            _setter.js = module.ft;
            _setter.lerp = module.dB;
            _setter.loader = module.gk;
            _setter.log = module.f4;
            _setter.logID = module.cB;
            _setter.macro = module.bN;
            _setter.markAsWarning = module.ct;
            _setter.mat4 = module.f5;
            _setter.math = module.f8;
            _setter.misc = module.fu;
            _setter.murmurhash2_32_gc = module.bQ;
            _setter.nextPow2 = module.fn;
            _setter.path = module.fv;
            _setter.physics = module.gB;
            _setter.pingPong = module.e9;
            _setter.pipeline = module.fZ;
            _setter.pseudoRandom = module.e3;
            _setter.pseudoRandomRange = module.fl;
            _setter.pseudoRandomRangeInt = module.fm;
            _setter.quat = module.fe;
            _setter.random = module.e4;
            _setter.randomRange = module.e5;
            _setter.randomRangeInt = module.e6;
            _setter.rect = module.fi;
            _setter.removeProperty = module.cr;
            _setter.renderer = module.f7;
            _setter.repeat = module.e2;
            _setter.replaceProperty = module.cs;
            _setter.resources = module.gi;
            _setter.screen = module.cq;
            _setter.serializeTag = module.fJ;
            _setter.setDefaultLogTimes = module.fx;
            _setter.setDisplayStats = module.fV;
            _setter.size = module.fh;
            _setter.sys = module.cD;
            _setter.systemEvent = module.gz;
            _setter.toDegree = module.d_;
            _setter.toRadian = module.d7;
            _setter.url = module.gm;
            _setter.v2 = module.fb;
            _setter.v3 = module.fc;
            _setter.v4 = module.fd;
            _setter.view = module.cp;
            _setter.warn = module.bK;
            _setter.warnID = module.by;
            exports(_setter);
        }, function (module) {
            createCommonjsModule = module.c;
            unwrapExports = module.u;
            commonjsGlobal = module.a;
        }],
        execute: function () {

            exports({
                CacheMode: void 0,
                ECollider2DType: void 0,
                EJoint2DType: void 0,
                EPhysics2DDrawFlags: void 0,
                ERaycast2DType: void 0,
                ERigidBody2DType: void 0,
                HorizontalTextAlignment: void 0,
                InstanceMaterialType: void 0,
                Overflow: void 0,
                Physics2DManifoldType: void 0,
                PhysicsGroup: void 0,
                VerticalTextAlignment: void 0,
                computeRatioByType: computeRatioByType,
                earcut: earcut,
                fragmentText: fragmentText,
                getBaselineOffset: getBaselineOffset,
                getEnglishWordPartAtFirst: getEnglishWordPartAtFirst,
                getEnglishWordPartAtLast: getEnglishWordPartAtLast,
                getPathFromRoot: getPathFromRoot,
                getWorldTransformUntilRoot: getWorldTransformUntilRoot,
                isEnglishWordPartAtFirst: isEnglishWordPartAtFirst,
                isEnglishWordPartAtLast: isEnglishWordPartAtLast,
                isUnicodeCJK: isUnicodeCJK,
                isUnicodeSpace: isUnicodeSpace,
                safeMeasureText: safeMeasureText,
                sampleAnimationCurve: sampleAnimationCurve,
                tween: tween,
                tweenUtil: tweenUtil
            });

            var index = /*#__PURE__*/Object.freeze({
                __proto__: null,
                DescriptorSet: DescriptorSet,
                Buffer: Buffer,
                CommandBuffer: CommandBuffer,
                get ObjectType () { return ObjectType; },
                get Status () { return Status; },
                get API () { return API; },
                get SurfaceTransform () { return SurfaceTransform; },
                get Feature () { return Feature; },
                get Format () { return Format; },
                get FormatType () { return FormatType; },
                get Type () { return Type$1; },
                get BufferUsageBit () { return BufferUsageBit; },
                get BufferFlagBit () { return BufferFlagBit; },
                get MemoryAccessBit () { return MemoryAccessBit; },
                get MemoryUsageBit () { return MemoryUsageBit; },
                get TextureType () { return TextureType; },
                get TextureUsageBit () { return TextureUsageBit; },
                get TextureFlagBit () { return TextureFlagBit; },
                get FormatFeatureBit () { return FormatFeatureBit; },
                get SampleCount () { return SampleCount; },
                get VsyncMode () { return VsyncMode; },
                get Filter () { return Filter; },
                get Address () { return Address; },
                get ComparisonFunc () { return ComparisonFunc; },
                get StencilOp () { return StencilOp; },
                get BlendFactor () { return BlendFactor; },
                get BlendOp () { return BlendOp; },
                get ColorMask () { return ColorMask; },
                get ShaderStageFlagBit () { return ShaderStageFlagBit; },
                get LoadOp () { return LoadOp; },
                get StoreOp () { return StoreOp; },
                get AccessFlagBit () { return AccessFlagBit; },
                get ResolveMode () { return ResolveMode; },
                get PipelineBindPoint () { return PipelineBindPoint; },
                get PrimitiveMode () { return PrimitiveMode; },
                get PolygonMode () { return PolygonMode; },
                get ShadeModel () { return ShadeModel; },
                get CullMode () { return CullMode; },
                get DynamicStateFlagBit () { return DynamicStateFlagBit; },
                get StencilFace () { return StencilFace; },
                get DescriptorType () { return DescriptorType; },
                get QueueType () { return QueueType; },
                get QueryType () { return QueryType; },
                get CommandBufferType () { return CommandBufferType; },
                get ClearFlagBit () { return ClearFlagBit; },
                Size: Size,
                DeviceCaps: DeviceCaps,
                Offset: Offset,
                Rect: Rect,
                Extent: Extent,
                TextureSubresLayers: TextureSubresLayers,
                TextureSubresRange: TextureSubresRange,
                TextureCopy: TextureCopy,
                TextureBlit: TextureBlit,
                BufferTextureCopy: BufferTextureCopy,
                Viewport: Viewport,
                Color: Color,
                BindingMappingInfo: BindingMappingInfo,
                SwapchainInfo: SwapchainInfo,
                DeviceInfo: DeviceInfo,
                BufferInfo: BufferInfo,
                BufferViewInfo: BufferViewInfo,
                DrawInfo: DrawInfo,
                DispatchInfo: DispatchInfo,
                IndirectBuffer: IndirectBuffer,
                TextureInfo: TextureInfo,
                TextureViewInfo: TextureViewInfo,
                SamplerInfo: SamplerInfo,
                Uniform: Uniform,
                UniformBlock: UniformBlock,
                UniformSamplerTexture: UniformSamplerTexture,
                UniformSampler: UniformSampler,
                UniformTexture: UniformTexture,
                UniformStorageImage: UniformStorageImage,
                UniformStorageBuffer: UniformStorageBuffer,
                UniformInputAttachment: UniformInputAttachment,
                ShaderStage: ShaderStage,
                Attribute: Attribute,
                ShaderInfo: ShaderInfo,
                InputAssemblerInfo: InputAssemblerInfo,
                ColorAttachment: ColorAttachment,
                DepthStencilAttachment: DepthStencilAttachment,
                SubpassInfo: SubpassInfo,
                SubpassDependency: SubpassDependency,
                RenderPassInfo: RenderPassInfo,
                GeneralBarrierInfo: GeneralBarrierInfo,
                TextureBarrierInfo: TextureBarrierInfo,
                FramebufferInfo: FramebufferInfo,
                DescriptorSetLayoutBinding: DescriptorSetLayoutBinding,
                DescriptorSetLayoutInfo: DescriptorSetLayoutInfo,
                DescriptorSetInfo: DescriptorSetInfo,
                PipelineLayoutInfo: PipelineLayoutInfo,
                InputState: InputState,
                CommandBufferInfo: CommandBufferInfo,
                QueueInfo: QueueInfo,
                QueryPoolInfo: QueryPoolInfo,
                FormatInfo: FormatInfo,
                MemoryStatus: MemoryStatus,
                DynamicStencilStates: DynamicStencilStates,
                DynamicStates: DynamicStates,
                GFXObject: GFXObject,
                get AttributeName () { return AttributeName; },
                FormatInfos: FormatInfos,
                DESCRIPTOR_BUFFER_TYPE: DESCRIPTOR_BUFFER_TYPE,
                DESCRIPTOR_SAMPLER_TYPE: DESCRIPTOR_SAMPLER_TYPE,
                DESCRIPTOR_DYNAMIC_TYPE: DESCRIPTOR_DYNAMIC_TYPE,
                DRAW_INFO_SIZE: DRAW_INFO_SIZE,
                IsPowerOf2: IsPowerOf2,
                FormatSize: FormatSize,
                FormatSurfaceSize: FormatSurfaceSize,
                GetTypeSize: GetTypeSize,
                getTypedArrayConstructor: getTypedArrayConstructor,
                Device: Device,
                Swapchain: Swapchain,
                Framebuffer: Framebuffer,
                InputAssembler: InputAssembler,
                DescriptorSetLayout: DescriptorSetLayout,
                PipelineLayout: PipelineLayout,
                RasterizerState: RasterizerState,
                DepthStencilState: DepthStencilState,
                BlendTarget: BlendTarget,
                BlendState: BlendState,
                PipelineStateInfo: PipelineStateInfo,
                PipelineState: PipelineState,
                Queue: Queue,
                RenderPass: RenderPass,
                Sampler: Sampler,
                Shader: Shader,
                Texture: Texture,
                GeneralBarrier: GeneralBarrier,
                TextureBarrier: TextureBarrier
            });
            exports('gfx', index);

            var index$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                Pool: Pool,
                RecyclePool: RecyclePool,
                CachedArray: CachedArray
            });
            exports('memop', index$1);

            var vec3_temp = new Vec3();

            var _worldMatrix = new Mat4();

            function fillMeshVertices3D(node, renderer, renderData, color) {
              var chunk = renderData.chunk;
              var dataList = renderData.data;
              var vData = chunk.vb;
              var vertexCount = renderData.vertexCount;
              node.getWorldMatrix(_worldMatrix);
              var vertexOffset = 0;

              for (var i = 0; i < vertexCount; i++) {
                var vert = dataList[i];
                Vec3.set(vec3_temp, vert.x, vert.y, 0);
                Vec3.transformMat4(vec3_temp, vec3_temp, _worldMatrix);
                vData[vertexOffset++] = vec3_temp.x;
                vData[vertexOffset++] = vec3_temp.y;
                vData[vertexOffset++] = vec3_temp.z;
                Color$1.toArray(vData, color, vertexOffset + 2);
                vertexOffset += 6;
              }

              var bid = chunk.bufferId;
              var vid = chunk.vertexOffset;
              var meshBuffer = chunk.vertexAccessor.getMeshBuffer(chunk.bufferId);
              var ib = chunk.vertexAccessor.getIndexBuffer(bid);
              var indexOffset = meshBuffer.indexOffset;

              for (var _i = 0, count = vertexCount / 4; _i < count; _i++) {
                var start = vid + _i * 4;
                ib[indexOffset++] = start;
                ib[indexOffset++] = start + 1;
                ib[indexOffset++] = start + 2;
                ib[indexOffset++] = start + 1;
                ib[indexOffset++] = start + 3;
                ib[indexOffset++] = start + 2;
              }

              meshBuffer.indexOffset += renderData.indexCount;
              meshBuffer.setDirty();
            }
            function updateOpacity(renderData, opacity) {
              var vfmt = renderData.vertexFormat;
              var vb = renderData.chunk.vb;
              var attr;
              var format;
              var stride;
              var offset = 0;

              for (var i = 0; i < vfmt.length; ++i) {
                attr = vfmt[i];
                format = FormatInfos[attr.format];

                if (format.hasAlpha) {
                  stride = renderData.floatStride;

                  if (format.size / format.count === 1) {
                    var alpha = ~~clamp$1(Math.round(opacity * 255), 0, 255);

                    for (var color = offset; color < vb.length; color += stride) {
                      vb[color] = (vb[color] & 0xffffff00 | alpha) >>> 0;
                    }
                  } else if (format.size / format.count === 4) {
                    for (var _alpha = offset + 3; _alpha < vb.length; _alpha += stride) {
                      vb[_alpha] = opacity;
                    }
                  }
                }

                offset += format.size >> 2;
              }
            }

            var minigame = {};

            var space = 2;
            var Atlas = function () {
              function Atlas(width, height) {
                this._texture = void 0;
                this._width = void 0;
                this._height = void 0;
                this._x = void 0;
                this._y = void 0;
                this._nexty = void 0;
                this._innerTextureInfos = {};
                this._innerSpriteFrames = void 0;
                this._count = void 0;
                var texture = new DynamicAtlasTexture();
                texture.initWithSize(width, height);
                this._texture = texture;
                this._width = width;
                this._height = height;
                this._x = space;
                this._y = space;
                this._nexty = space;
                this._innerTextureInfos = {};
                this._innerSpriteFrames = [];
                this._count = 0;
              }

              var _proto = Atlas.prototype;

              _proto.insertSpriteFrame = function insertSpriteFrame(spriteFrame) {
                var rect = spriteFrame.rect;
                var texture = spriteFrame.texture;

                var info = this._innerTextureInfos[texture.getId()];

                var sx = rect.x;
                var sy = rect.y;

                if (info) {
                  sx += info.x;
                  sy += info.y;
                } else {
                  var width = texture.width;
                  var height = texture.height;

                  if (this._x + width + space > this._width) {
                    this._x = space;
                    this._y = this._nexty;
                  }

                  if (this._y + height + space > this._nexty) {
                    this._nexty = this._y + height + space;
                  }

                  if (this._nexty > this._height) {
                    return null;
                  }

                  if (legacyCC.internal.dynamicAtlasManager.textureBleeding) {
                    if (width <= 8 || height <= 8) {
                      this._texture.drawTextureAt(texture.image, this._x - 1, this._y - 1);

                      this._texture.drawTextureAt(texture.image, this._x - 1, this._y + 1);

                      this._texture.drawTextureAt(texture.image, this._x + 1, this._y - 1);

                      this._texture.drawTextureAt(texture.image, this._x + 1, this._y + 1);
                    }

                    this._texture.drawTextureAt(texture.image, this._x - 1, this._y);

                    this._texture.drawTextureAt(texture.image, this._x + 1, this._y);

                    this._texture.drawTextureAt(texture.image, this._x, this._y - 1);

                    this._texture.drawTextureAt(texture.image, this._x, this._y + 1);
                  }

                  this._texture.drawTextureAt(texture.image, this._x, this._y);

                  this._innerTextureInfos[texture.getId()] = {
                    x: this._x,
                    y: this._y,
                    texture: texture
                  };
                  this._count++;
                  sx += this._x;
                  sy += this._y;
                  this._x += width + space;
                }

                var frame = {
                  x: sx,
                  y: sy,
                  texture: this._texture
                };

                this._innerSpriteFrames.push(spriteFrame);

                return frame;
              };

              _proto.deleteInnerTexture = function deleteInnerTexture(texture) {
                if (texture && this._innerTextureInfos[texture.getId()]) {
                  delete this._innerTextureInfos[texture.getId()];
                  this._count--;
                }
              };

              _proto.isEmpty = function isEmpty() {
                return this._count <= 0;
              };

              _proto.reset = function reset() {
                this._x = space;
                this._y = space;
                this._nexty = space;
                var frames = this._innerSpriteFrames;

                for (var i = 0, l = frames.length; i < l; i++) {
                  var frame = frames[i];

                  if (!frame.isValid) {
                    continue;
                  }

                  frame._resetDynamicAtlasFrame();
                }

                this._innerSpriteFrames.length = 0;
                this._innerTextureInfos = {};
              };

              _proto.destroy = function destroy() {
                this.reset();

                this._texture.destroy();
              };

              return Atlas;
            }();
            var DynamicAtlasTexture = function (_Texture2D) {
              _inheritsLoose(DynamicAtlasTexture, _Texture2D);

              function DynamicAtlasTexture() {
                return _Texture2D.apply(this, arguments) || this;
              }

              var _proto2 = DynamicAtlasTexture.prototype;

              _proto2.initWithSize = function initWithSize(width, height, format) {
                if (format === void 0) {
                  format = PixelFormat.RGBA8888;
                }

                this.reset({
                  width: width,
                  height: height,
                  format: format
                });
              };

              _proto2.drawTextureAt = function drawTextureAt(image, x, y) {
                var gfxTexture = this.getGFXTexture();

                if (!image || !gfxTexture) {
                  return;
                }

                var gfxDevice = this._getGFXDevice();

                if (!gfxDevice) {
                  console.warn('Unable to get device');
                  return;
                }

                var region = new BufferTextureCopy();
                region.texOffset.x = x;
                region.texOffset.y = y;
                region.texExtent.width = image.width;
                region.texExtent.height = image.height;
                gfxDevice.copyTexImagesToTexture([image.data], gfxTexture, [region]);
              };

              return DynamicAtlasTexture;
            }(Texture2D);

            var DynamicAtlasManager = function () {
              function DynamicAtlasManager() {
                this._atlases = [];
                this._atlasIndex = -1;
                this._maxAtlasCount = 5;
                this._textureSize = 2048;
                this._maxFrameSize = 512;
                this._textureBleeding = true;
                this._enabled = false;
              }

              var _proto = DynamicAtlasManager.prototype;

              _proto.newAtlas = function newAtlas() {
                var atlas = this._atlases[++this._atlasIndex];

                if (!atlas) {
                  atlas = new Atlas(this._textureSize, this._textureSize);

                  this._atlases.push(atlas);
                }

                return atlas;
              };

              _proto.beforeSceneLoad = function beforeSceneLoad() {
                this.reset();
              };

              _proto.insertSpriteFrame = function insertSpriteFrame(spriteFrame) {
                if (!this._enabled || this._atlasIndex === this._maxAtlasCount || !spriteFrame || spriteFrame._original) return null;
                if (!spriteFrame.packable) return null;
                var sampler = spriteFrame.texture.getSamplerInfo();

                if (sampler.minFilter !== Filter$1.LINEAR || sampler.magFilter !== Filter$1.LINEAR || sampler.mipFilter !== Filter$1.NONE) {
                  return null;
                }

                var atlas = this._atlases[this._atlasIndex];

                if (!atlas) {
                  atlas = this.newAtlas();
                }

                var frame = atlas.insertSpriteFrame(spriteFrame);

                if (!frame && this._atlasIndex !== this._maxAtlasCount) {
                  atlas = this.newAtlas();
                  return atlas.insertSpriteFrame(spriteFrame);
                }

                return frame;
              };

              _proto.reset = function reset() {
                for (var i = 0, l = this._atlases.length; i < l; i++) {
                  this._atlases[i].destroy();
                }

                this._atlases.length = 0;
                this._atlasIndex = -1;
              };

              _proto.deleteAtlasSpriteFrame = function deleteAtlasSpriteFrame(spriteFrame) {
                if (!spriteFrame._original) return;
                var atlas;

                for (var i = this._atlases.length - 1; i >= 0; i--) {
                  atlas = this._atlases[i];
                  js.array.fastRemove(atlas._innerSpriteFrames, spriteFrame);
                }

                var texture = spriteFrame._original._texture;
                this.deleteAtlasTexture(texture);
              };

              _proto.deleteAtlasTexture = function deleteAtlasTexture(texture) {
                if (texture) {
                  for (var i = this._atlases.length - 1; i >= 0; i--) {
                    this._atlases[i].deleteInnerTexture(texture);

                    if (this._atlases[i].isEmpty()) {
                      this._atlases[i].destroy();

                      this._atlases.splice(i, 1);

                      this._atlasIndex--;
                    }
                  }
                }
              };

              _proto.packToDynamicAtlas = function packToDynamicAtlas(comp, frame) {

                if (frame && !frame._original && frame.packable && frame.texture && frame.texture.width > 0 && frame.texture.height > 0) {
                  var packedFrame = this.insertSpriteFrame(frame);

                  if (packedFrame) {
                    frame._setDynamicAtlasFrame(packedFrame);
                  }
                }
              };

              _createClass(DynamicAtlasManager, [{
                key: "enabled",
                get: function get() {
                  return this._enabled;
                },
                set: function set(value) {
                  if (this._enabled === value) return;

                  if (value) {
                    this.reset();
                    legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
                  } else {
                    this.reset();
                    legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
                  }

                  this._enabled = value;
                }
              }, {
                key: "maxAtlasCount",
                get: function get() {
                  return this._maxAtlasCount;
                },
                set: function set(value) {
                  this._maxAtlasCount = value;
                }
              }, {
                key: "atlasCount",
                get: function get() {
                  return this._atlases.length;
                }
              }, {
                key: "textureBleeding",
                get: function get() {
                  return this._textureBleeding;
                },
                set: function set(enable) {
                  this._textureBleeding = enable;
                }
              }, {
                key: "textureSize",
                get: function get() {
                  return this._textureSize;
                },
                set: function set(value) {
                  this._textureSize = value;
                }
              }, {
                key: "maxFrameSize",
                get: function get() {
                  return this._maxFrameSize;
                },
                set: function set(value) {
                  this._maxFrameSize = value;
                }
              }]);

              return DynamicAtlasManager;
            }();
            DynamicAtlasManager.instance = void 0;
            var dynamicAtlasManager = exports('dynamicAtlasManager', DynamicAtlasManager.instance = new DynamicAtlasManager());
            legacyCC.internal.dynamicAtlasManager = dynamicAtlasManager;

            var _dec, _class, _class2, _temp;
            var INSET_LEFT = 0;
            var INSET_TOP = 1;
            var INSET_RIGHT = 2;
            var INSET_BOTTOM = 3;
            var temp_uvs = [{
              u: 0,
              v: 0
            }, {
              u: 0,
              v: 0
            }, {
              u: 0,
              v: 0
            }, {
              u: 0,
              v: 0
            }];
            var SpriteFrame = exports('SpriteFrame', (_dec = ccclass('cc.SpriteFrame'), _dec(_class = (_temp = _class2 = function (_Asset) {
              _inheritsLoose(SpriteFrame, _Asset);

              SpriteFrame.createWithImage = function createWithImage(imageSourceOrImageAsset) {
                var img = imageSourceOrImageAsset instanceof ImageAsset ? imageSourceOrImageAsset : new ImageAsset(imageSourceOrImageAsset);
                var tex = new Texture2D();
                tex.image = img;
                var spf = new SpriteFrame();
                spf.texture = tex;
                return spf;
              };

              function SpriteFrame() {
                var _this;

                _this = _Asset.call(this) || this;
                _this.vertices = null;
                _this.uv = [];
                _this.unbiasUV = [];
                _this.uvSliced = [];
                _this._rect = new Rect$1();
                _this._offset = new Vec2();
                _this._originalSize = new Size$1();
                _this._rotated = false;
                _this._capInsets = [0, 0, 0, 0];
                _this._atlasUuid = '';
                _this._texture = void 0;
                _this._isFlipUVY = false;
                _this._isFlipUVX = false;
                _this._original = null;
                _this._packable = true;

                return _this;
              }

              var _proto = SpriteFrame.prototype;

              _proto.textureLoaded = function textureLoaded() {
                return !!this.texture;
              };

              _proto.isRotated = function isRotated() {
                return this._rotated;
              };

              _proto.setRotated = function setRotated(rotated) {
                this.rotated = rotated;
              };

              _proto.getRect = function getRect(out) {
                if (out) {
                  out.set(this._rect);
                  return out;
                }

                return this._rect.clone();
              };

              _proto.setRect = function setRect(rect) {
                this.rect = rect;
              };

              _proto.getOriginalSize = function getOriginalSize(out) {
                if (out) {
                  out.set(this._originalSize);
                  return out;
                }

                return this._originalSize.clone();
              };

              _proto.setOriginalSize = function setOriginalSize(size) {
                this.originalSize = size;
              };

              _proto.getOffset = function getOffset(out) {
                if (out) {
                  out.set(this._offset);
                  return out;
                }

                return this._offset.clone();
              };

              _proto.setOffset = function setOffset(offset) {
                this.offset = offset;
              };

              _proto.getGFXTexture = function getGFXTexture() {
                return this._texture.getGFXTexture();
              };

              _proto.getGFXSampler = function getGFXSampler() {
                return this._texture.getGFXSampler();
              };

              _proto.getHash = function getHash() {
                return this._texture.getHash();
              };

              _proto.getSamplerInfo = function getSamplerInfo() {
                return this._texture.getSamplerInfo();
              };

              _proto.reset = function reset(info, clearData) {
                if (clearData === void 0) {
                  clearData = false;
                }

                var calUV = false;

                if (clearData) {
                  this._originalSize.set(0, 0);

                  this._rect.set(0, 0, 0, 0);

                  this._offset.set(0, 0);

                  this._capInsets = [0, 0, 0, 0];
                  this._rotated = false;
                  calUV = true;
                }

                if (info) {
                  if (info.texture) {
                    this._rect.x = this._rect.y = 0;
                    this._rect.width = info.texture.width;
                    this._rect.height = info.texture.height;

                    this._refreshTexture(info.texture);

                    this.checkRect(this._texture);
                  }

                  if (info.originalSize) {
                    this._originalSize.set(info.originalSize);
                  }

                  if (info.rect) {
                    this._rect.set(info.rect);
                  }

                  if (info.offset) {
                    this._offset.set(info.offset);
                  }

                  if (info.borderTop !== undefined) {
                    this._capInsets[INSET_TOP] = info.borderTop;
                  }

                  if (info.borderBottom !== undefined) {
                    this._capInsets[INSET_BOTTOM] = info.borderBottom;
                  }

                  if (info.borderLeft !== undefined) {
                    this._capInsets[INSET_LEFT] = info.borderLeft;
                  }

                  if (info.borderRight !== undefined) {
                    this._capInsets[INSET_RIGHT] = info.borderRight;
                  }

                  if (info.isRotate !== undefined) {
                    this._rotated = !!info.isRotate;
                  }

                  if (info.isFlipUv !== undefined) {
                    this._isFlipUVY = !!info.isFlipUv;
                  }

                  calUV = true;
                }

                if (calUV && this.texture) {
                  this._calculateUV();
                }
              };

              _proto.checkRect = function checkRect(texture) {
                var rect = this._rect;
                var maxX = rect.x;
                var maxY = rect.y;

                if (this._rotated) {
                  maxX += rect.height;
                  maxY += rect.width;
                } else {
                  maxX += rect.width;
                  maxY += rect.height;
                }

                if (maxX > texture.width) {
                  errorID(3300, this.name + "/" + texture.name, maxX, texture.width);
                  return false;
                }

                if (maxY > texture.height) {
                  errorID(3301, this.name + "/" + texture.name, maxY, texture.height);
                  return false;
                }

                return true;
              };

              _proto.destroy = function destroy() {
                if (this._packable && dynamicAtlasManager) {
                  dynamicAtlasManager.deleteAtlasSpriteFrame(this);
                }

                return _Asset.prototype.destroy.call(this);
              };

              _proto._calculateSlicedUV = function _calculateSlicedUV() {
                var rect = this._rect;
                var tex = this.texture;
                var atlasWidth = tex.width;
                var atlasHeight = tex.height;
                var leftWidth = this._capInsets[INSET_LEFT];
                var rightWidth = this._capInsets[INSET_RIGHT];
                var centerWidth = rect.width - leftWidth - rightWidth;
                var topHeight = this._capInsets[INSET_TOP];
                var bottomHeight = this._capInsets[INSET_BOTTOM];
                var centerHeight = rect.height - topHeight - bottomHeight;
                var uvSliced = this.uvSliced;
                uvSliced.length = 0;

                if (this._rotated) {
                  temp_uvs[0].u = rect.x / atlasWidth;
                  temp_uvs[1].u = (rect.x + bottomHeight) / atlasWidth;
                  temp_uvs[2].u = (rect.x + bottomHeight + centerHeight) / atlasWidth;
                  temp_uvs[3].u = (rect.x + rect.height) / atlasWidth;
                  temp_uvs[3].v = rect.y / atlasHeight;
                  temp_uvs[2].v = (rect.y + leftWidth) / atlasHeight;
                  temp_uvs[1].v = (rect.y + leftWidth + centerWidth) / atlasHeight;
                  temp_uvs[0].v = (rect.y + rect.width) / atlasHeight;

                  for (var row = 0; row < 4; ++row) {
                    var rowD = temp_uvs[row];

                    for (var col = 0; col < 4; ++col) {
                      var colD = temp_uvs[3 - col];
                      uvSliced.push({
                        u: rowD.u,
                        v: colD.v
                      });
                    }
                  }
                } else {
                  temp_uvs[0].u = rect.x / atlasWidth;
                  temp_uvs[1].u = (rect.x + leftWidth) / atlasWidth;
                  temp_uvs[2].u = (rect.x + leftWidth + centerWidth) / atlasWidth;
                  temp_uvs[3].u = (rect.x + rect.width) / atlasWidth;
                  temp_uvs[3].v = rect.y / atlasHeight;
                  temp_uvs[2].v = (rect.y + topHeight) / atlasHeight;
                  temp_uvs[1].v = (rect.y + topHeight + centerHeight) / atlasHeight;
                  temp_uvs[0].v = (rect.y + rect.height) / atlasHeight;

                  for (var _row = 0; _row < 4; ++_row) {
                    var _rowD = temp_uvs[_row];

                    for (var _col = 0; _col < 4; ++_col) {
                      var _colD = temp_uvs[_col];
                      uvSliced.push({
                        u: _colD.u,
                        v: _rowD.v
                      });
                    }
                  }
                }

                this.emit(SpriteFrame.EVENT_UV_UPDATED, this);
              };

              _proto._calculateUV = function _calculateUV() {
                var rect = this._rect;
                var uv = this.uv;
                var unbiasUV = this.unbiasUV;
                var tex = this.texture;
                var texw = tex.width;
                var texh = tex.height;

                if (this._rotated) {
                  var l = texw === 0 ? 0 : rect.x / texw;
                  var r = texw === 0 ? 1 : (rect.x + rect.height) / texw;
                  var t = texh === 0 ? 0 : rect.y / texh;
                  var b = texh === 0 ? 1 : (rect.y + rect.width) / texh;

                  if (this._isFlipUVX && this._isFlipUVY) {
                    uv[0] = r;
                    uv[1] = b;
                    uv[2] = r;
                    uv[3] = t;
                    uv[4] = l;
                    uv[5] = b;
                    uv[6] = l;
                    uv[7] = t;
                  } else if (this._isFlipUVX) {
                    uv[0] = r;
                    uv[1] = t;
                    uv[2] = r;
                    uv[3] = b;
                    uv[4] = l;
                    uv[5] = t;
                    uv[6] = l;
                    uv[7] = b;
                  } else if (this._isFlipUVY) {
                    uv[0] = l;
                    uv[1] = b;
                    uv[2] = l;
                    uv[3] = t;
                    uv[4] = r;
                    uv[5] = b;
                    uv[6] = r;
                    uv[7] = t;
                  } else {
                    uv[0] = l;
                    uv[1] = t;
                    uv[2] = l;
                    uv[3] = b;
                    uv[4] = r;
                    uv[5] = t;
                    uv[6] = r;
                    uv[7] = b;
                  }

                  var ul = texw === 0 ? 0 : rect.x / texw;
                  var ur = texw === 0 ? 1 : (rect.x + rect.height) / texw;
                  var ut = texh === 0 ? 0 : rect.y / texh;
                  var ub = texh === 0 ? 1 : (rect.y + rect.width) / texh;

                  if (this._isFlipUVX && this._isFlipUVY) {
                    unbiasUV[0] = ur;
                    unbiasUV[1] = ub;
                    unbiasUV[2] = ur;
                    unbiasUV[3] = ut;
                    unbiasUV[4] = ul;
                    unbiasUV[5] = ub;
                    unbiasUV[6] = ul;
                    unbiasUV[7] = ut;
                  } else if (this._isFlipUVX) {
                    unbiasUV[0] = ur;
                    unbiasUV[1] = ut;
                    unbiasUV[2] = ur;
                    unbiasUV[3] = ub;
                    unbiasUV[4] = ul;
                    unbiasUV[5] = ut;
                    unbiasUV[6] = ul;
                    unbiasUV[7] = ub;
                  } else if (this._isFlipUVY) {
                    unbiasUV[0] = ul;
                    unbiasUV[1] = ub;
                    unbiasUV[2] = ul;
                    unbiasUV[3] = ut;
                    unbiasUV[4] = ur;
                    unbiasUV[5] = ub;
                    unbiasUV[6] = ur;
                    unbiasUV[7] = ut;
                  } else {
                    unbiasUV[0] = ul;
                    unbiasUV[1] = ut;
                    unbiasUV[2] = ul;
                    unbiasUV[3] = ub;
                    unbiasUV[4] = ur;
                    unbiasUV[5] = ut;
                    unbiasUV[6] = ur;
                    unbiasUV[7] = ub;
                  }
                } else {
                  var _l = texw === 0 ? 0 : rect.x / texw;

                  var _r = texw === 0 ? 1 : (rect.x + rect.width) / texw;

                  var _b = texh === 0 ? 1 : (rect.y + rect.height) / texh;

                  var _t = texh === 0 ? 0 : rect.y / texh;

                  if (this._isFlipUVX && this._isFlipUVY) {
                    uv[0] = _r;
                    uv[1] = _t;
                    uv[2] = _l;
                    uv[3] = _t;
                    uv[4] = _r;
                    uv[5] = _b;
                    uv[6] = _l;
                    uv[7] = _b;
                  } else if (this._isFlipUVX) {
                    uv[0] = _r;
                    uv[1] = _b;
                    uv[2] = _l;
                    uv[3] = _b;
                    uv[4] = _r;
                    uv[5] = _t;
                    uv[6] = _l;
                    uv[7] = _t;
                  } else if (this._isFlipUVY) {
                    uv[0] = _l;
                    uv[1] = _t;
                    uv[2] = _r;
                    uv[3] = _t;
                    uv[4] = _l;
                    uv[5] = _b;
                    uv[6] = _r;
                    uv[7] = _b;
                  } else {
                    uv[0] = _l;
                    uv[1] = _b;
                    uv[2] = _r;
                    uv[3] = _b;
                    uv[4] = _l;
                    uv[5] = _t;
                    uv[6] = _r;
                    uv[7] = _t;
                  }

                  var _ul = texw === 0 ? 0 : rect.x / texw;

                  var _ur = texw === 0 ? 1 : (rect.x + rect.width) / texw;

                  var _ub = texh === 0 ? 1 : (rect.y + rect.height) / texh;

                  var _ut = texh === 0 ? 0 : rect.y / texh;

                  if (this._isFlipUVX && this._isFlipUVY) {
                    unbiasUV[0] = _ur;
                    unbiasUV[1] = _ut;
                    unbiasUV[2] = _ul;
                    unbiasUV[3] = _ut;
                    unbiasUV[4] = _ur;
                    unbiasUV[5] = _ub;
                    unbiasUV[6] = _ul;
                    unbiasUV[7] = _ub;
                  } else if (this._isFlipUVX) {
                    unbiasUV[0] = _ur;
                    unbiasUV[1] = _ub;
                    unbiasUV[2] = _ul;
                    unbiasUV[3] = _ub;
                    unbiasUV[4] = _ur;
                    unbiasUV[5] = _ut;
                    unbiasUV[6] = _ul;
                    unbiasUV[7] = _ut;
                  } else if (this._isFlipUVY) {
                    unbiasUV[0] = _ul;
                    unbiasUV[1] = _ut;
                    unbiasUV[2] = _ur;
                    unbiasUV[3] = _ut;
                    unbiasUV[4] = _ul;
                    unbiasUV[5] = _ub;
                    unbiasUV[6] = _ur;
                    unbiasUV[7] = _ub;
                  } else {
                    unbiasUV[0] = _ul;
                    unbiasUV[1] = _ub;
                    unbiasUV[2] = _ur;
                    unbiasUV[3] = _ub;
                    unbiasUV[4] = _ul;
                    unbiasUV[5] = _ut;
                    unbiasUV[6] = _ur;
                    unbiasUV[7] = _ut;
                  }
                }

                var vertices = this.vertices;

                if (vertices) {
                  vertices.nu.length = 0;
                  vertices.nv.length = 0;

                  for (var i = 0; i < vertices.u.length; i++) {
                    vertices.nu[i] = vertices.u[i] / texw;
                    vertices.nv[i] = vertices.v[i] / texh;
                  }
                }

                this._calculateSlicedUV();
              };

              _proto._setDynamicAtlasFrame = function _setDynamicAtlasFrame(frame) {
                if (!frame) return;
                this._original = {
                  _texture: this._texture,
                  _x: this._rect.x,
                  _y: this._rect.y
                };
                this._texture = frame.texture;
                this._rect.x = frame.x;
                this._rect.y = frame.y;

                this._calculateUV();
              };

              _proto._resetDynamicAtlasFrame = function _resetDynamicAtlasFrame() {
                if (!this._original) return;
                this._rect.x = this._original._x;
                this._rect.y = this._original._y;
                this._texture = this._original._texture;
                this._original = null;

                this._calculateUV();
              };

              _proto._checkPackable = function _checkPackable() {
                var dynamicAtlas = dynamicAtlasManager;
                if (!dynamicAtlas) return;
                var texture = this._texture;

                if (!(texture instanceof Texture2D) || texture.isCompressed) {
                  this._packable = false;
                  return;
                }

                var w = this.width;
                var h = this.height;

                if (!texture.image || w > dynamicAtlas.maxFrameSize || h > dynamicAtlas.maxFrameSize) {
                  this._packable = false;
                  return;
                }

                if (texture.image && texture.image instanceof HTMLCanvasElement) {
                  this._packable = true;
                }
              };

              _proto._serialize = function _serialize(ctxForExporting) {

                return null;
              };

              _proto._deserialize = function _deserialize(serializeData, handle) {
                var data = serializeData;
                var rect = data.rect;

                if (rect) {
                  this._rect = new Rect$1(rect.x, rect.y, rect.width, rect.height);
                }

                var offset = data.offset;

                if (data.offset) {
                  this._offset = new Vec2(offset.x, offset.y);
                }

                var originalSize = data.originalSize;

                if (data.originalSize) {
                  this._originalSize = new Size$1(originalSize.width, originalSize.height);
                }

                this._rotated = !!data.rotated;
                this._name = data.name;
                this._packable = !!data.packable;
                var capInsets = data.capInsets;

                if (capInsets) {
                  this._capInsets[INSET_LEFT] = capInsets[INSET_LEFT];
                  this._capInsets[INSET_TOP] = capInsets[INSET_TOP];
                  this._capInsets[INSET_RIGHT] = capInsets[INSET_RIGHT];
                  this._capInsets[INSET_BOTTOM] = capInsets[INSET_BOTTOM];
                }

                this.vertices = data.vertices;

                if (this.vertices) {
                  this.vertices.nu = [];
                  this.vertices.nv = [];
                }
              };

              _proto.clone = function clone() {
                var _v$nu, _v$u, _v$nv, _v$v, _sp$uv, _sp$unbiasUV, _sp$uvSliced, _sp$_capInsets;

                var sp = new SpriteFrame();
                var v = this.vertices;
                sp.vertices = v ? {
                  x: v.x,
                  y: v.y,
                  triangles: v.triangles,
                  nu: (_v$nu = v.nu) === null || _v$nu === void 0 ? void 0 : _v$nu.slice(0),
                  u: (_v$u = v.u) === null || _v$u === void 0 ? void 0 : _v$u.slice(0),
                  nv: (_v$nv = v.nv) === null || _v$nv === void 0 ? void 0 : _v$nv.slice(0),
                  v: (_v$v = v.v) === null || _v$v === void 0 ? void 0 : _v$v.slice(0)
                } : null;

                (_sp$uv = sp.uv).splice.apply(_sp$uv, [0, sp.uv.length].concat(this.uv));

                (_sp$unbiasUV = sp.unbiasUV).splice.apply(_sp$unbiasUV, [0, sp.unbiasUV.length].concat(this.unbiasUV));

                (_sp$uvSliced = sp.uvSliced).splice.apply(_sp$uvSliced, [0, sp.uvSliced.length].concat(this.uvSliced));

                sp._rect.set(this._rect);

                sp._offset.set(this._offset);

                sp._originalSize.set(this._originalSize);

                sp._rotated = this._rotated;

                (_sp$_capInsets = sp._capInsets).splice.apply(_sp$_capInsets, [0, sp._capInsets.length].concat(this._capInsets));

                sp._atlasUuid = this._atlasUuid;
                sp._texture = this._texture;
                sp._isFlipUVX = this._isFlipUVX;
                sp._isFlipUVY = this._isFlipUVY;
                return sp;
              };

              _proto._refreshTexture = function _refreshTexture(texture) {
                this._texture = texture;
                var tex = this._texture;
                var config = {};
                var isReset = false;

                if (this._rect.width === 0 || this._rect.height === 0 || !this.checkRect(tex)) {
                  config.rect = new Rect$1(0, 0, tex.width, tex.height);
                  isReset = true;
                }

                if (this._originalSize.width === 0 || this._originalSize.height === 0 || isReset) {
                  config.originalSize = new Size$1(tex.width, tex.height);
                  isReset = true;
                }

                if (isReset) {
                  this.reset(config);
                  this.onLoaded();
                }

                this._checkPackable();
              };

              _proto.initDefault = function initDefault(uuid) {
                _Asset.prototype.initDefault.call(this, uuid);

                var texture = new Texture2D();
                texture.initDefault();

                this._refreshTexture(texture);

                this._calculateUV();
              };

              _proto.validate = function validate() {
                return this._texture && this._rect && this._rect.width !== 0 && this._rect.height !== 0;
              };

              _createClass(SpriteFrame, [{
                key: "insetTop",
                get: function get() {
                  return this._capInsets[INSET_TOP];
                },
                set: function set(value) {
                  if (this._capInsets[INSET_TOP] === value) {
                    return;
                  }

                  this._capInsets[INSET_TOP] = value;

                  if (this._texture) {
                    this._calculateSlicedUV();
                  }
                }
              }, {
                key: "insetBottom",
                get: function get() {
                  return this._capInsets[INSET_BOTTOM];
                },
                set: function set(value) {
                  if (this._capInsets[INSET_BOTTOM] === value) {
                    return;
                  }

                  this._capInsets[INSET_BOTTOM] = value;

                  if (this._texture) {
                    this._calculateSlicedUV();
                  }
                }
              }, {
                key: "insetLeft",
                get: function get() {
                  return this._capInsets[INSET_LEFT];
                },
                set: function set(value) {
                  if (this._capInsets[INSET_LEFT] === value) {
                    return;
                  }

                  this._capInsets[INSET_LEFT] = value;

                  if (this._texture) {
                    this._calculateSlicedUV();
                  }
                }
              }, {
                key: "insetRight",
                get: function get() {
                  return this._capInsets[INSET_RIGHT];
                },
                set: function set(value) {
                  if (this._capInsets[INSET_RIGHT] === value) {
                    return;
                  }

                  this._capInsets[INSET_RIGHT] = value;

                  if (this._texture) {
                    this._calculateSlicedUV();
                  }
                }
              }, {
                key: "rect",
                get: function get() {
                  return this._rect;
                },
                set: function set(value) {
                  if (this._rect.equals(value)) {
                    return;
                  }

                  this._rect.set(value);

                  if (this._texture) {
                    this._calculateUV();
                  }
                }
              }, {
                key: "originalSize",
                get: function get() {
                  return this._originalSize;
                },
                set: function set(value) {
                  if (this._originalSize.equals(value)) {
                    return;
                  }

                  this._originalSize.set(value);

                  if (this._texture) {
                    this._calculateUV();
                  }
                }
              }, {
                key: "offset",
                get: function get() {
                  return this._offset;
                },
                set: function set(value) {
                  this._offset.set(value);
                }
              }, {
                key: "rotated",
                get: function get() {
                  return this._rotated;
                },
                set: function set(rotated) {
                  if (this._rotated === rotated) {
                    return;
                  }

                  this._rotated = rotated;

                  if (this._texture) {
                    this._calculateUV();
                  }
                }
              }, {
                key: "texture",
                get: function get() {
                  return this._texture;
                },
                set: function set(value) {
                  if (!value) {
                    warnID(3122, this.name);
                    return;
                  }

                  if (value === this._texture) {
                    return;
                  }

                  this.reset({
                    texture: value
                  }, true);
                }
              }, {
                key: "atlasUuid",
                get: function get() {
                  return this._atlasUuid;
                },
                set: function set(value) {
                  this._atlasUuid = value;
                }
              }, {
                key: "width",
                get: function get() {
                  return this._texture.width;
                }
              }, {
                key: "height",
                get: function get() {
                  return this._texture.height;
                }
              }, {
                key: "_textureSource",
                set: function set(value) {
                  if (window.Build) {
                    this._texture = value;
                    return;
                  }

                  if (value) {
                    this._refreshTexture(value);

                    this._calculateUV();
                  }
                }
              }, {
                key: "flipUVX",
                get: function get() {
                  return this._isFlipUVX;
                },
                set: function set(value) {
                  this._isFlipUVX = value;

                  this._calculateUV();
                }
              }, {
                key: "flipUVY",
                get: function get() {
                  return this._isFlipUVY;
                },
                set: function set(value) {
                  this._isFlipUVY = value;

                  this._calculateUV();
                }
              }, {
                key: "packable",
                get: function get() {
                  return this._packable;
                },
                set: function set(value) {
                  this._packable = value;
                }
              }, {
                key: "original",
                get: function get() {
                  return this._original;
                }
              }]);

              return SpriteFrame;
            }(Asset), _class2.EVENT_UV_UPDATED = 'uv_updated', _temp)) || _class));
            legacyCC.SpriteFrame = SpriteFrame;

            var _dec$1, _class$1, _class2$1, _descriptor, _temp$1;
            var SpriteAtlas = exports('SpriteAtlas', (_dec$1 = ccclass('cc.SpriteAtlas'), _dec$1(_class$1 = (_class2$1 = (_temp$1 = function (_Asset) {
              _inheritsLoose(SpriteAtlas, _Asset);

              function SpriteAtlas() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "spriteFrames", _descriptor, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = SpriteAtlas.prototype;

              _proto.getTexture = function getTexture() {
                var keys = Object.keys(this.spriteFrames);

                if (keys.length > 0) {
                  var spriteFrame = this.spriteFrames[keys[0]];
                  return spriteFrame && spriteFrame.texture;
                } else {
                  return null;
                }
              };

              _proto.getSpriteFrame = function getSpriteFrame(key) {
                var sf = this.spriteFrames[key];

                if (!sf) {
                  return null;
                }

                if (!sf.name) {
                  sf.name = key;
                }

                return sf;
              };

              _proto.getSpriteFrames = function getSpriteFrames() {
                var frames = [];
                var spriteFrames = this.spriteFrames;

                for (var _i = 0, _Object$keys = Object.keys(spriteFrames); _i < _Object$keys.length; _i++) {
                  var _key2 = _Object$keys[_i];
                  frames.push(spriteFrames[_key2]);
                }

                return frames;
              };

              _proto._serialize = function _serialize(ctxForExporting) {
              };

              _proto._deserialize = function _deserialize(serializeData, handle) {
                var data = serializeData;
                this._name = data.name;
                var frames = data.spriteFrames;
                this.spriteFrames = createMap();

                for (var i = 0; i < frames.length; i += 2) {
                  handle.result.push(this.spriteFrames, frames[i], frames[i + 1], _getClassId(SpriteFrame));
                }
              };

              return SpriteAtlas;
            }(Asset), _temp$1), (_descriptor = _applyDecoratedDescriptor(_class2$1.prototype, "spriteFrames", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return createMap();
              }
            })), _class2$1)) || _class$1));
            legacyCC.SpriteAtlas = SpriteAtlas;

            var _dec$2, _class$2;
            var Font = exports('Font', (_dec$2 = ccclass('cc.Font'), _dec$2(_class$2 = function (_Asset) {
              _inheritsLoose(Font, _Asset);

              function Font() {
                return _Asset.apply(this, arguments) || this;
              }

              return Font;
            }(Asset)) || _class$2));
            legacyCC.Font = Font;

            var _dec$3, _class$3, _class2$2, _descriptor$1, _temp$2;
            var TTFFont = exports('TTFFont', (_dec$3 = ccclass('cc.TTFFont'), _dec$3(_class$3 = (_class2$2 = (_temp$2 = function (_Font) {
              _inheritsLoose(TTFFont, _Font);

              function TTFFont() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Font.call.apply(_Font, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_fontFamily", _descriptor$1, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = TTFFont.prototype;

              _proto.initDefault = function initDefault(uuid) {
                this._fontFamily = 'Arial';

                _Font.prototype.initDefault.call(this, uuid);
              };

              _createClass(TTFFont, [{
                key: "_nativeAsset",
                get: function get() {
                  return this._fontFamily;
                },
                set: function set(value) {
                  this._fontFamily = value || 'Arial';
                }
              }, {
                key: "_nativeDep",
                get: function get() {
                  return {
                    uuid: this._uuid,
                    __nativeName__: this._native,
                    ext: extname(this._native),
                    __isNative__: true
                  };
                }
              }]);

              return TTFFont;
            }(Font), _temp$2), (_descriptor$1 = _applyDecoratedDescriptor(_class2$2.prototype, "_fontFamily", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$2.prototype, "_nativeAsset", [override, string], Object.getOwnPropertyDescriptor(_class2$2.prototype, "_nativeAsset"), _class2$2.prototype), _applyDecoratedDescriptor(_class2$2.prototype, "_nativeDep", [override], Object.getOwnPropertyDescriptor(_class2$2.prototype, "_nativeDep"), _class2$2.prototype)), _class2$2)) || _class$3));
            legacyCC.TTFFont = TTFFont;

            var _dec$4, _dec2, _class$4, _class2$3, _descriptor$2, _descriptor2, _descriptor3, _descriptor4, _temp$3;
            var FontLetterDefinition = function FontLetterDefinition() {
              this.u = 0;
              this.v = 0;
              this.w = 0;
              this.h = 0;
              this.offsetX = 0;
              this.offsetY = 0;
              this.textureID = 0;
              this.valid = false;
              this.xAdvance = 0;
            };
            var FontAtlas = function () {
              function FontAtlas(texture) {
                this.letterDefinitions = {};
                this.texture = texture;
              }

              var _proto = FontAtlas.prototype;

              _proto.addLetterDefinitions = function addLetterDefinitions(letter, letterDefinition) {
                this.letterDefinitions[letter] = letterDefinition;
              };

              _proto.cloneLetterDefinition = function cloneLetterDefinition() {
                var copyLetterDefinitions = {};

                for (var _i = 0, _Object$keys = Object.keys(this.letterDefinitions); _i < _Object$keys.length; _i++) {
                  var _key = _Object$keys[_i];
                  var value = new FontLetterDefinition();
                  mixin(value, this.letterDefinitions[_key]);
                  copyLetterDefinitions[_key] = value;
                }

                return copyLetterDefinitions;
              };

              _proto.getTexture = function getTexture() {
                return this.texture;
              };

              _proto.getLetter = function getLetter(key) {
                return this.letterDefinitions[key];
              };

              _proto.getLetterDefinitionForChar = function getLetterDefinitionForChar(_char, labelInfo) {
                var key = _char.charCodeAt(0);

                var hasKey = this.letterDefinitions.hasOwnProperty(key);
                var letter;

                if (hasKey) {
                  letter = this.letterDefinitions[key];
                } else {
                  letter = null;
                }

                return letter;
              };

              _proto.clear = function clear() {
                this.letterDefinitions = {};
              };

              return FontAtlas;
            }();
            var BitmapFont = exports('BitmapFont', (_dec$4 = ccclass('cc.BitmapFont'), _dec2 = type$1(SpriteFrame), _dec$4(_class$4 = (_class2$3 = (_temp$3 = function (_Font) {
              _inheritsLoose(BitmapFont, _Font);

              function BitmapFont() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                _this = _Font.call.apply(_Font, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "fntDataStr", _descriptor$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "spriteFrame", _descriptor2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "fontSize", _descriptor3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "fntConfig", _descriptor4, _assertThisInitialized(_this));

                return _this;
              }

              var _proto2 = BitmapFont.prototype;

              _proto2.onLoaded = function onLoaded() {
                var spriteFrame = this.spriteFrame;

                if (!this.fontDefDictionary && spriteFrame) {
                  this.fontDefDictionary = new FontAtlas(spriteFrame.texture);
                }

                var fntConfig = this.fntConfig;

                if (!fntConfig) {
                  warn('The fnt config is not exists!');
                  return;
                }

                var fontDict = fntConfig.fontDefDictionary;

                for (var fontDef in fontDict) {
                  var letter = new FontLetterDefinition();
                  var rect = fontDict[fontDef].rect;
                  letter.offsetX = fontDict[fontDef].xOffset;
                  letter.offsetY = fontDict[fontDef].yOffset;
                  letter.w = rect.width;
                  letter.h = rect.height;
                  letter.u = rect.x;
                  letter.v = rect.y;
                  letter.textureID = 0;
                  letter.valid = true;
                  letter.xAdvance = fontDict[fontDef].xAdvance;
                  this.fontDefDictionary.addLetterDefinitions(fontDef, letter);
                }
              };

              return BitmapFont;
            }(Font), _temp$3), (_descriptor$2 = _applyDecoratedDescriptor(_class2$3.prototype, "fntDataStr", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor2 = _applyDecoratedDescriptor(_class2$3.prototype, "spriteFrame", [_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor3 = _applyDecoratedDescriptor(_class2$3.prototype, "fontSize", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return -1;
              }
            }), _descriptor4 = _applyDecoratedDescriptor(_class2$3.prototype, "fntConfig", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$3)) || _class$4));
            legacyCC.BitmapFont = BitmapFont;

            var _dec$5, _class$5;
            var LabelAtlas = exports('LabelAtlas', (_dec$5 = ccclass('cc.LabelAtlas'), _dec$5(_class$5 = function (_BitmapFont) {
              _inheritsLoose(LabelAtlas, _BitmapFont);

              function LabelAtlas() {
                return _BitmapFont.apply(this, arguments) || this;
              }

              return LabelAtlas;
            }(BitmapFont)) || _class$5));
            legacyCC.LabelAtlas = LabelAtlas;

            var BASELINE_RATIO = exports('BASELINE_RATIO', 0.26);
            var _BASELINE_OFFSET = 0;

            var MIDDLE_RATIO = exports('MIDDLE_RATIO', (BASELINE_RATIO + 1) / 2 - BASELINE_RATIO);
            function getBaselineOffset() {
              return _BASELINE_OFFSET;
            }
            var MAX_CACHE_SIZE = 100;
            var pool = new Pool$1(2);

            pool.get = function () {
              return this._get() || {
                key: '',
                value: 0,
                prev: null,
                next: null
              };
            };

            var LRUCache = function () {
              function LRUCache(size) {
                this.count = 0;
                this.limit = 0;
                this.datas = {};
                this.limit = size;
              }

              var _proto = LRUCache.prototype;

              _proto.moveToHead = function moveToHead(node) {
                node.next = this.head;
                node.prev = null;
                if (this.head) this.head.prev = node;
                this.head = node;
                if (!this.tail) this.tail = node;
                this.count++;
                this.datas[node.key] = node;
              };

              _proto.put = function put(key, value) {
                var node = pool.get();
                node.key = key;
                node.value = value;

                if (this.count >= this.limit) {
                  var discard = this.tail;
                  delete this.datas[discard.key];
                  this.count--;
                  this.tail = discard.prev;
                  this.tail.next = null;
                  discard.prev = null;
                  discard.next = null;
                  pool.put(discard);
                }

                this.moveToHead(node);
              };

              _proto.remove = function remove(node) {
                if (node.prev) {
                  node.prev.next = node.next;
                } else {
                  this.head = node.next;
                }

                if (node.next) {
                  node.next.prev = node.prev;
                } else {
                  this.tail = node.prev;
                }

                delete this.datas[node.key];
                this.count--;
              };

              _proto.get = function get(key) {
                var node = this.datas[key];

                if (node) {
                  this.remove(node);
                  this.moveToHead(node);
                  return node.value;
                }

                return null;
              };

              _proto.clear = function clear() {
                this.count = 0;
                this.datas = {};
                this.head = null;
                this.tail = null;
              };

              _proto.has = function has(key) {
                return !!this.datas[key];
              };

              _proto["delete"] = function _delete(key) {
                var node = this.datas[key];
                this.remove(node);
              };

              return LRUCache;
            }();

            var measureCache = new LRUCache(MAX_CACHE_SIZE);
            var WORD_REG = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/;
            var SYMBOL_REG = /^[!,.:;'}\]%\?>、‘“》？。，！]/;
            var LAST_WORD_REG = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+|\S)$/;
            var LAST_ENGLISH_REG = /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+$/;
            var FIRST_ENGLISH_REG = /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]/;
            function isUnicodeCJK(ch) {
              var __CHINESE_REG = /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/;
              var __JAPANESE_REG = /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g;
              var __KOREAN_REG = /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/;
              return __CHINESE_REG.test(ch) || __JAPANESE_REG.test(ch) || __KOREAN_REG.test(ch);
            }
            function isUnicodeSpace(ch) {
              var chCode = ch.charCodeAt(0);
              return chCode >= 9 && chCode <= 13 || chCode === 32 || chCode === 133 || chCode === 160 || chCode === 5760 || chCode >= 8192 && chCode <= 8202 || chCode === 8232 || chCode === 8233 || chCode === 8239 || chCode === 8287 || chCode === 12288;
            }
            function safeMeasureText(ctx, string, desc) {
              var font = desc || ctx.font;
              var key = font + "\uD83C\uDFAE" + string;
              var cache = measureCache.get(key);

              if (cache !== null) {
                return cache;
              }

              var metric = ctx.measureText(string);
              var width = metric && metric.width || 0;
              measureCache.put(key, width);
              return width;
            }

            function _safeSubstring(targetString, startIndex, endIndex) {
              var newStartIndex = startIndex;
              var newEndIndex = endIndex;
              var startChar = targetString[startIndex];

              if (startChar >= "\uDC00" && startChar <= "\uDFFF") {
                newStartIndex--;
              }

              if (endIndex !== undefined) {
                if (endIndex - 1 !== startIndex) {
                  var endChar = targetString[endIndex - 1];

                  if (endChar >= "\uD800" && endChar <= "\uDBFF") {
                    newEndIndex--;
                  }
                } else if (startChar >= "\uD800" && startChar <= "\uDBFF") {
                  newEndIndex++;
                }
              }

              return targetString.substring(newStartIndex, newEndIndex);
            }

            function isEnglishWordPartAtFirst(stringToken) {
              return FIRST_ENGLISH_REG.test(stringToken);
            }
            function isEnglishWordPartAtLast(stringToken) {
              return LAST_ENGLISH_REG.test(stringToken);
            }
            function getEnglishWordPartAtFirst(stringToken) {
              var result = FIRST_ENGLISH_REG.exec(stringToken);
              return result;
            }
            function getEnglishWordPartAtLast(stringToken) {
              var result = LAST_ENGLISH_REG.exec(stringToken);
              return result;
            }
            function fragmentText(stringToken, allWidth, maxWidth, measureText) {
              var wrappedWords = [];

              if (stringToken.length === 0 || maxWidth < 0) {
                wrappedWords.push('');
                return wrappedWords;
              }

              var text = stringToken;

              while (allWidth > maxWidth && text.length > 1) {
                var fuzzyLen = text.length * (maxWidth / allWidth) | 0;

                var tmpText = _safeSubstring(text, fuzzyLen);

                var width = allWidth - measureText(tmpText);
                var sLine = tmpText;
                var pushNum = 0;
                var checkWhile = 0;
                var checkCount = 100;

                while (width > maxWidth && checkWhile++ < checkCount) {
                  fuzzyLen *= maxWidth / width;
                  fuzzyLen |= 0;
                  tmpText = _safeSubstring(text, fuzzyLen);
                  width = allWidth - measureText(tmpText);
                }

                checkWhile = 0;

                while (tmpText && width <= maxWidth && checkWhile++ < checkCount) {
                  var exec = WORD_REG.exec(tmpText);
                  pushNum = exec ? exec[0].length : 1;
                  sLine = tmpText;
                  fuzzyLen += pushNum;
                  tmpText = _safeSubstring(text, fuzzyLen);
                  width = allWidth - measureText(tmpText);
                }

                fuzzyLen -= pushNum;

                if (fuzzyLen === 0) {
                  fuzzyLen = 1;
                  sLine = _safeSubstring(text, 1);
                } else if (fuzzyLen === 1 && text[0] >= "\uD800" && text[0] <= "\uDBFF") {
                  fuzzyLen = 2;
                  sLine = _safeSubstring(text, 2);
                }

                var sText = _safeSubstring(text, 0, fuzzyLen);

                var result = void 0;

                {
                  if (SYMBOL_REG.test(sLine || tmpText)) {
                    result = LAST_WORD_REG.exec(sText);
                    fuzzyLen -= result ? result[0].length : 0;

                    if (fuzzyLen === 0) {
                      fuzzyLen = 1;
                    }

                    sLine = _safeSubstring(text, fuzzyLen);
                    sText = _safeSubstring(text, 0, fuzzyLen);
                  }
                }

                if (FIRST_ENGLISH_REG.test(sLine)) {
                  result = LAST_ENGLISH_REG.exec(sText);

                  if (result && sText !== result[0]) {
                    fuzzyLen -= result[0].length;
                    sLine = _safeSubstring(text, fuzzyLen);
                    sText = _safeSubstring(text, 0, fuzzyLen);
                  }
                }

                if (wrappedWords.length === 0) {
                  wrappedWords.push(sText);
                } else {
                  sText = sText.trim();

                  if (sText.length > 0) {
                    wrappedWords.push(sText);
                  }
                }

                text = sLine || tmpText;
                allWidth = measureText(text);
              }

              if (wrappedWords.length === 0) {
                wrappedWords.push(text);
              } else {
                text = text.trim();

                if (text.length > 0) {
                  wrappedWords.push(text);
                }
              }

              return wrappedWords;
            }

            var _canvasPool;

            var CanvasPool = exports('CanvasPool', function () {
              function CanvasPool() {
                this.pool = [];
              }

              CanvasPool.getInstance = function getInstance() {
                if (!_canvasPool) {
                  _canvasPool = new CanvasPool();
                }

                return _canvasPool;
              };

              var _proto = CanvasPool.prototype;

              _proto.get = function get() {
                var data = this.pool.pop();

                if (!data) {
                  var canvas = document.createElement('canvas');
                  var context = canvas.getContext('2d');
                  data = {
                    canvas: canvas,
                    context: context
                  };
                }

                return data;
              };

              _proto.put = function put(canvas) {
                if (this.pool.length >= macro.MAX_LABEL_CANVAS_POOL_SIZE) {
                  return;
                }

                this.pool.push(canvas);
              };

              return CanvasPool;
            }());
            var WHITE = Color$1.WHITE.clone();
            var space$1 = 0;
            var bleed = 2;

            var FontLetterDefinition$1 = function FontLetterDefinition() {
              this.u = 0;
              this.v = 0;
              this.w = 0;
              this.h = 0;
              this.texture = null;
              this.offsetX = 0;
              this.offsetY = 0;
              this.valid = false;
              this.xAdvance = 0;
            };

            var _backgroundStyle = "rgba(255, 255, 255, " + (1 / 255).toFixed(3) + ")";

            var BASELINE_OFFSET = getBaselineOffset();

            var LetterTexture = function () {
              function LetterTexture(_char, labelInfo) {
                this.image = null;
                this.labelInfo = void 0;
                this["char"] = void 0;
                this.data = null;
                this.canvas = null;
                this.context = null;
                this.width = 0;
                this.height = 0;
                this.offsetY = 0;
                this.hash = void 0;
                this["char"] = _char;
                this.labelInfo = labelInfo;
                this.hash = _char.charCodeAt(0) + labelInfo.hash;
              }

              var _proto2 = LetterTexture.prototype;

              _proto2.updateRenderData = function updateRenderData() {
                this._updateProperties();

                this._updateTexture();
              };

              _proto2.destroy = function destroy() {
                this.image = null;
              };

              _proto2._updateProperties = function _updateProperties() {
                this.data = CanvasPool.getInstance().get();
                this.canvas = this.data.canvas;
                this.context = this.data.context;

                if (this.context) {
                  this.context.font = this.labelInfo.fontDesc;
                  var width = safeMeasureText(this.context, this["char"], this.labelInfo.fontDesc);
                  var blank = this.labelInfo.margin * 2 + bleed;
                  this.width = parseFloat(width.toFixed(2)) + blank;
                  this.height = (1 + BASELINE_RATIO) * this.labelInfo.fontSize + blank;
                  this.offsetY = -(this.labelInfo.fontSize * BASELINE_RATIO) / 2;
                }

                if (this.canvas.width !== this.width) {
                  this.canvas.width = this.width;
                }

                if (this.canvas.height !== this.height) {
                  this.canvas.height = this.height;
                }

                if (!this.image) {
                  this.image = new ImageAsset();
                }

                this.image.reset(this.canvas);
              };

              _proto2._updateTexture = function _updateTexture() {
                if (!this.context || !this.canvas) {
                  return;
                }

                var context = this.context;
                var labelInfo = this.labelInfo;
                var width = this.canvas.width;
                var height = this.canvas.height;
                context.textAlign = 'center';
                context.textBaseline = 'alphabetic';
                context.clearRect(0, 0, width, height);
                context.fillStyle = _backgroundStyle;
                context.fillRect(0, 0, width, height);
                context.font = labelInfo.fontDesc;
                var fontSize = labelInfo.fontSize;
                var startX = width / 2;
                var startY = height / 2 + fontSize * MIDDLE_RATIO + fontSize * BASELINE_OFFSET;
                var color = labelInfo.color;
                context.lineJoin = 'round';
                context.fillStyle = "rgba(" + color.r + ", " + color.g + ", " + color.b + ", " + 1 + ")";

                if (labelInfo.isOutlined) {
                  var strokeColor = labelInfo.out || WHITE;
                  context.strokeStyle = "rgba(" + strokeColor.r + ", " + strokeColor.g + ", " + strokeColor.b + ", " + strokeColor.a / 255 + ")";
                  context.lineWidth = labelInfo.margin * 2;
                  context.strokeText(this["char"], startX, startY);
                }

                context.fillText(this["char"], startX, startY);
              };

              return LetterTexture;
            }();

            var LetterRenderTexture = function (_Texture2D) {
              _inheritsLoose(LetterRenderTexture, _Texture2D);

              function LetterRenderTexture() {
                return _Texture2D.apply(this, arguments) || this;
              }

              var _proto3 = LetterRenderTexture.prototype;

              _proto3.initWithSize = function initWithSize(width, height, format) {
                if (format === void 0) {
                  format = PixelFormat.RGBA8888;
                }

                this.reset({
                  width: width,
                  height: height,
                  format: format
                });
              };

              _proto3.drawTextureAt = function drawTextureAt(image, x, y) {
                var gfxTexture = this.getGFXTexture();

                if (!image || !gfxTexture) {
                  return;
                }

                var gfxDevice = this._getGFXDevice();

                if (!gfxDevice) {
                  console.warn('Unable to get device');
                  return;
                }

                var region = new BufferTextureCopy();
                region.texOffset.x = x;
                region.texOffset.y = y;
                region.texExtent.width = image.width;
                region.texExtent.height = image.height;
                gfxDevice.copyTexImagesToTexture([image.data], gfxTexture, [region]);
              };

              return LetterRenderTexture;
            }(Texture2D);
            var LetterAtlas = function () {
              function LetterAtlas(width, height) {
                this._x = space$1;
                this._y = space$1;
                this._nextY = space$1;
                this._width = 0;
                this._height = 0;
                this._halfBleed = 0;
                this._dirty = false;
                var texture = new LetterRenderTexture();
                texture.initWithSize(width, height);
                this.fontDefDictionary = new FontAtlas(texture);
                this._halfBleed = bleed / 2;
                this._width = width;
                this._height = height;
                director.on(Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
              }

              var _proto4 = LetterAtlas.prototype;

              _proto4.insertLetterTexture = function insertLetterTexture(letterTexture) {
                var texture = letterTexture.image;
                var device = director.root.device;

                if (!texture || !this.fontDefDictionary || !device) {
                  return null;
                }

                var width = texture.width;
                var height = texture.height;

                if (this._x + width + space$1 > this._width) {
                  this._x = space$1;
                  this._y = this._nextY;
                }

                if (this._y + height > this._nextY) {
                  this._nextY = this._y + height + space$1;
                }

                if (this._nextY > this._height) {
                  warnID(12100);
                  return null;
                }

                this.fontDefDictionary.texture.drawTextureAt(texture, this._x, this._y);
                this._dirty = true;
                var letterDefinition = new FontLetterDefinition$1();
                letterDefinition.u = this._x + this._halfBleed;
                letterDefinition.v = this._y + this._halfBleed;
                letterDefinition.texture = this.fontDefDictionary.texture;
                letterDefinition.valid = true;
                letterDefinition.w = letterTexture.width - bleed;
                letterDefinition.h = letterTexture.height - bleed;
                letterDefinition.xAdvance = letterDefinition.w;
                letterDefinition.offsetY = letterTexture.offsetY;
                this._x += width + space$1;
                this.fontDefDictionary.addLetterDefinitions(letterTexture.hash, letterDefinition);
                return letterDefinition;
              };

              _proto4.update = function update() {
                if (!this._dirty) {
                  return;
                }

                this._dirty = false;
              };

              _proto4.reset = function reset() {
                this._x = space$1;
                this._y = space$1;
                this._nextY = space$1;
                this.fontDefDictionary.clear();
              };

              _proto4.destroy = function destroy() {
                this.reset();

                if (this.fontDefDictionary) {
                  this.fontDefDictionary.texture.destroy();
                  this.fontDefDictionary.texture = null;
                }
              };

              _proto4.getTexture = function getTexture() {
                return this.fontDefDictionary.getTexture();
              };

              _proto4.beforeSceneLoad = function beforeSceneLoad() {
                this.clearAllCache();
              };

              _proto4.clearAllCache = function clearAllCache() {
                this.destroy();
                var texture = new LetterRenderTexture();
                texture.initWithSize(this._width, this._height);
                this.fontDefDictionary.texture = texture;
              };

              _proto4.getLetter = function getLetter(key) {
                return this.fontDefDictionary.letterDefinitions[key];
              };

              _proto4.getLetterDefinitionForChar = function getLetterDefinitionForChar(_char2, labelInfo) {
                var hash = _char2.charCodeAt(0) + labelInfo.hash;
                var letter = this.fontDefDictionary.letterDefinitions[hash];

                if (!letter) {
                  var temp = new LetterTexture(_char2, labelInfo);
                  temp.updateRenderData();
                  letter = this.insertLetterTexture(temp);
                  temp.destroy();
                }

                return letter;
              };

              _createClass(LetterAtlas, [{
                key: "width",
                get: function get() {
                  return this._width;
                }
              }, {
                key: "height",
                get: function get() {
                  return this._height;
                }
              }]);

              return LetterAtlas;
            }();
            var shareLabelInfo = {
              fontAtlas: null,
              fontSize: 0,
              lineHeight: 0,
              hAlign: 0,
              vAlign: 0,
              hash: '',
              fontFamily: '',
              fontDesc: 'Arial',
              color: Color$1.WHITE.clone(),
              isOutlined: false,
              out: Color$1.WHITE.clone(),
              margin: 0
            };
            function computeHash(labelInfo) {
              var hashData = '';
              var color = labelInfo.color.toHEX();
              var out = '';

              if (labelInfo.isOutlined && labelInfo.margin > 0) {
                out = out + labelInfo.margin + labelInfo.out.toHEX();
              }

              return hashData + labelInfo.fontSize + labelInfo.fontFamily + color + out;
            }

            var vfmt = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F)];
            var vfmtPosColor = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F)];
            var vfmtPosUvColor = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F)];
            var vfmtPosUvTwoColor = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F), new Attribute(AttributeName.ATTR_COLOR2, Format.RGBA32F)];
            function getComponentPerVertex(attrs) {
              var count = 0;

              for (var i = 0; i < attrs.length; i++) {
                var attr = attrs[i];
                var info = FormatInfos[attr.format];
                count += info.count;
              }

              return count;
            }
            function getAttributeStride(attrs) {
              var count = 0;

              for (var i = 0; i < attrs.length; i++) {
                var attr = attrs[i];
                var info = FormatInfos[attr.format];
                count += info.size;
              }

              return count;
            }
            legacyCC.internal.vfmtPosUvColor = vfmtPosUvColor;
            legacyCC.internal.vfmtPosUvTwoColor = vfmtPosUvTwoColor;

            var vertexFormat = /*#__PURE__*/Object.freeze({
                __proto__: null,
                vfmt: vfmt,
                vfmtPosColor: vfmtPosColor,
                vfmtPosUvColor: vfmtPosUvColor,
                vfmtPosUvTwoColor: vfmtPosUvTwoColor,
                getComponentPerVertex: getComponentPerVertex,
                getAttributeStride: getAttributeStride
            });
            exports('UIVertexFormat', vertexFormat);

            var DEFAULT_STRIDE = getAttributeStride(vfmtPosUvColor) >> 2;

            var _dataPool = new Pool(function () {
              return {
                x: 0,
                y: 0,
                z: 0,
                u: 0,
                v: 0,
                color: Color$1.WHITE.clone()
              };
            }, 128);

            var _pool = null;
            var BaseRenderData = exports('BaseRenderData', function () {
              function BaseRenderData(vertexFormat) {
                if (vertexFormat === void 0) {
                  vertexFormat = vfmtPosUvColor;
                }

                this.material = null;
                this.chunk = null;
                this.dataHash = 0;
                this.isMeshBuffer = false;
                this._vc = 0;
                this._ic = 0;
                this._floatStride = 0;
                this._vertexFormat = vfmtPosUvColor;
                this._floatStride = vertexFormat === vfmtPosUvColor ? DEFAULT_STRIDE : getAttributeStride(vertexFormat) >> 2;
                this._vertexFormat = vertexFormat;
              }

              var _proto = BaseRenderData.prototype;

              _proto.isValid = function isValid() {
                return this._ic > 0 && this.chunk.vertexAccessor;
              };

              _createClass(BaseRenderData, [{
                key: "vertexCount",
                get: function get() {
                  return this._vc;
                }
              }, {
                key: "indexCount",
                get: function get() {
                  return this._ic;
                }
              }, {
                key: "stride",
                get: function get() {
                  return this._floatStride << 2;
                }
              }, {
                key: "floatStride",
                get: function get() {
                  return this._floatStride;
                }
              }, {
                key: "vertexFormat",
                get: function get() {
                  return this._vertexFormat;
                }
              }]);

              return BaseRenderData;
            }());
            var RenderData = exports('RenderData', function (_BaseRenderData) {
              _inheritsLoose(RenderData, _BaseRenderData);

              RenderData.add = function add(vertexFormat, accessor) {
                if (vertexFormat === void 0) {
                  vertexFormat = vfmtPosUvColor;
                }

                if (!_pool) {
                  _pool = new RecyclePool(function () {
                    return new RenderData();
                  }, 32);
                }

                var rd = _pool.add();

                rd._floatStride = vertexFormat === vfmtPosUvColor ? DEFAULT_STRIDE : getAttributeStride(vertexFormat) >> 2;
                rd._vertexFormat = vertexFormat;

                if (!accessor) {
                  var batcher = director.root.batcher2D;
                  accessor = batcher.switchBufferAccessor(rd._vertexFormat);
                }

                rd._accessor = accessor;
                return rd;
              };

              RenderData.remove = function remove(data) {
                var idx = _pool.data.indexOf(data);

                if (idx === -1) {
                  return;
                }

                data.clear();
                data._accessor = null;

                _pool.removeAt(idx);
              };

              function RenderData(vertexFormat, accessor) {
                var _this;

                if (vertexFormat === void 0) {
                  vertexFormat = vfmtPosUvColor;
                }

                _this = _BaseRenderData.call(this, vertexFormat) || this;
                _this.indices = null;
                _this.vertDirty = true;
                _this.frame = void 0;
                _this.layer = 0;
                _this.blendHash = -1;
                _this.textureHash = 0;
                _this.nodeDirty = true;
                _this.passDirty = true;
                _this.textureDirty = true;
                _this.hashDirty = true;
                _this._data = [];
                _this._pivotX = 0;
                _this._pivotY = 0;
                _this._width = 0;
                _this._height = 0;
                _this._accessor = null;

                if (!accessor) {
                  var batcher = director.root.batcher2D;
                  accessor = batcher.switchBufferAccessor(_this._vertexFormat);
                }

                _this._accessor = accessor;
                return _this;
              }

              var _proto2 = RenderData.prototype;

              _proto2.resize = function resize(vertexCount, indexCount) {
                if (vertexCount === this._vc && indexCount === this._ic && this.chunk) return;
                this._vc = vertexCount;
                this._ic = indexCount;

                if (this.chunk) {
                  this._accessor.recycleChunk(this.chunk);

                  this.chunk = null;
                }

                this.chunk = this._accessor.allocateChunk(vertexCount, indexCount);
                this.updateHash();
              };

              _proto2.resizeAndCopy = function resizeAndCopy(vertexCount, indexCount) {
                if (vertexCount === this._vc && indexCount === this._ic && this.chunk) return;
                this._vc = vertexCount;
                this._ic = indexCount;
                var oldChunk = this.chunk;
                this.chunk = this._accessor.allocateChunk(vertexCount, indexCount);

                if (oldChunk) {
                  this.chunk.vb.set(oldChunk.vb);

                  this._accessor.recycleChunk(oldChunk);
                }

                this.updateHash();
              };

              _proto2.getMeshBuffer = function getMeshBuffer() {
                if (this.chunk && this._accessor) {
                  return this._accessor.getMeshBuffer(this.chunk.bufferId);
                } else {
                  return null;
                }
              };

              _proto2.updateNode = function updateNode(comp) {
                this.layer = comp.node.layer;
                this.nodeDirty = false;
                this.hashDirty = true;
              };

              _proto2.updatePass = function updatePass(comp) {
                this.material = comp.getRenderMaterial(0);
                this.blendHash = comp.blendHash;
                this.passDirty = false;
                this.hashDirty = true;
              };

              _proto2.updateTexture = function updateTexture(frame) {
                this.frame = frame;
                this.textureHash = frame.getHash();
                this.textureDirty = false;
                this.hashDirty = true;
              };

              _proto2.updateHash = function updateHash() {
                var bid = this.chunk ? this.chunk.bufferId : -1;
                var hashString = "" + bid + this.layer + " " + this.blendHash + " " + this.textureHash;
                this.dataHash = murmurhash2_32_gc(hashString, 666);
                this.hashDirty = false;
              };

              _proto2.updateRenderData = function updateRenderData(comp, frame) {
                if (this.passDirty) {
                  this.material = comp.getRenderMaterial(0);
                  this.blendHash = comp.blendHash;
                  this.passDirty = false;
                  this.hashDirty = true;
                }

                if (this.nodeDirty) {
                  var renderScene = comp.node.scene ? comp._getRenderScene() : null;
                  this.layer = comp.node.layer;

                  if (renderScene !== null) {
                    this.nodeDirty = false;
                  }

                  this.hashDirty = true;
                }

                if (this.textureDirty) {
                  this.frame = frame;
                  this.textureHash = frame.getHash();
                  this.textureDirty = false;
                  this.hashDirty = true;
                }

                if (this.hashDirty) {
                  this.updateHash();
                }
              };

              _proto2.updateSizeNPivot = function updateSizeNPivot(width, height, pivotX, pivotY) {
                if (width !== this._width || height !== this._height || pivotX !== this._pivotX || pivotY !== this._pivotY) {
                  this._width = width;
                  this._height = height;
                  this._pivotX = pivotX;
                  this._pivotY = pivotY;
                  this.vertDirty = true;
                }
              };

              _proto2.clear = function clear() {
                this.resize(0, 0);
                this._data.length = 0;
                this._pivotX = 0;
                this._pivotY = 0;
                this._width = 0;
                this._height = 0;
                this.indices = null;
                this.vertDirty = true;
                this.material = null;
                this.nodeDirty = true;
                this.passDirty = true;
                this.textureDirty = true;
                this.hashDirty = true;
                this.layer = 0;
                this.blendHash = -1;
                this.frame = null;
                this.textureHash = 0;
                this.dataHash = 0;
              };

              _createClass(RenderData, [{
                key: "dataLength",
                get: function get() {
                  return this._data.length;
                },
                set: function set(length) {
                  var data = this._data;

                  if (data.length !== length) {
                    var value = data.length;
                    var i = 0;

                    for (i = length; i < value; i++) {
                      _dataPool.free(data[i]);
                    }

                    for (i = value; i < length; i++) {
                      data[i] = _dataPool.alloc();
                    }

                    data.length = length;
                  }
                }
              }, {
                key: "data",
                get: function get() {
                  return this._data;
                }
              }]);

              return RenderData;
            }(BaseRenderData));
            var MeshRenderData = exports('MeshRenderData', function (_BaseRenderData2) {
              _inheritsLoose(MeshRenderData, _BaseRenderData2);

              MeshRenderData.add = function add(vertexFormat) {
                if (vertexFormat === void 0) {
                  vertexFormat = vfmtPosUvColor;
                }

                var rd = _meshDataPool.add();

                rd._floatStride = vertexFormat === vfmtPosUvColor ? DEFAULT_STRIDE : getAttributeStride(vertexFormat) >> 2;
                rd._vertexFormat = vertexFormat;
                return rd;
              };

              MeshRenderData.remove = function remove(data) {
                var idx = _meshDataPool.data.indexOf(data);

                if (idx === -1) {
                  return;
                }

                _meshDataPool.data[idx].clear();

                _meshDataPool.removeAt(idx);
              };

              function MeshRenderData(vertexFormat) {
                var _this2;

                if (vertexFormat === void 0) {
                  vertexFormat = vfmtPosUvColor;
                }

                _this2 = _BaseRenderData2.call(this, vertexFormat) || this;
                _this2.isMeshBuffer = true;
                _this2.vData = void 0;
                _this2.iData = void 0;
                _this2.vertexStart = 0;
                _this2.vertexRange = 0;
                _this2.indexStart = 0;
                _this2.indexRange = 0;
                _this2.lastFilledIndex = 0;
                _this2.lastFilledVertex = 0;
                _this2._byteLength = 0;
                _this2._vertexBuffers = [];
                _this2._indexBuffer = null;
                _this2._iaPool = null;
                _this2._iaInfo = null;
                _this2.vData = new Float32Array(256 * _this2.stride);
                _this2.iData = new Uint16Array(256 * 6);
                return _this2;
              }

              var _proto3 = MeshRenderData.prototype;

              _proto3.request = function request(vertexCount, indexCount) {
                var byteOffset = this._byteLength + vertexCount * this.stride;
                var succeed = this.reserve(vertexCount, indexCount);
                if (!succeed) return false;
                this._vc += vertexCount;
                this._ic += indexCount;
                this._byteLength = byteOffset;
                this.vertexRange = this._vc;
                this.indexRange = this._ic;
                return true;
              };

              _proto3.reserve = function reserve(vertexCount, indexCount) {
                var newVBytes = this._byteLength + vertexCount * this.stride;
                var newICount = this.indexCount + indexCount;

                if (vertexCount + this.vertexCount > 65535) {
                  return false;
                }

                var byteLength = this.vData.byteLength;
                var indicesLength = this.iData.length;
                var vCount = this.vData.length;
                var iCount = this.iData.length;

                if (newVBytes > byteLength || newICount > indicesLength) {
                  while (byteLength < newVBytes || indicesLength < newICount) {
                    vCount *= 2;
                    iCount *= 2;
                    byteLength = vCount * 4;
                    indicesLength = iCount;
                  }

                  this._reallocBuffer(vCount, iCount);
                }

                return true;
              };

              _proto3.resize = function resize(vertexCount, indexCount) {
                var byteLength = vertexCount * this.stride;
                assertIsTrue(vertexCount >= 0 && indexCount >= 0 && byteLength <= this.vData.byteLength && indexCount <= this.iData.length);
                this._vc = vertexCount;
                this._ic = indexCount;
                this._byteLength = byteLength;
                this.updateRange(0, vertexCount, 0, indexCount);
              };

              _proto3.updateRange = function updateRange(vertOffset, vertexCount, indexOffset, indexCount) {
                assertIsTrue(vertexCount >= 0 && indexCount >= 0 && vertexCount <= this._vc && indexCount <= this._ic);
                this.vertexStart = vertOffset;
                this.indexStart = indexOffset;
                this.vertexRange = vertexCount;
                this.indexRange = indexCount;
              };

              _proto3.requestIA = function requestIA(device) {
                this._initIAInfo(device);

                var ia = this._iaPool.add();

                ia.firstIndex = this.indexStart;
                ia.indexCount = this.indexRange;
                return ia;
              };

              _proto3.uploadBuffers = function uploadBuffers() {
                if (this._byteLength === 0 || !this._vertexBuffers[0] || !this._indexBuffer) {
                  return;
                }

                var indexCount = this._ic;
                var verticesData = new Float32Array(this.vData.buffer, 0, this._byteLength >> 2);
                var indicesData = new Uint16Array(this.iData.buffer, 0, indexCount);
                var vertexBuffer = this._vertexBuffers[0];

                if (this._byteLength > vertexBuffer.size) {
                  vertexBuffer.resize(this._byteLength);
                }

                vertexBuffer.update(verticesData);
                var indexBytes = indexCount << 1;

                if (indexBytes > this._indexBuffer.size) {
                  this._indexBuffer.resize(indexBytes);
                }

                this._indexBuffer.update(indicesData);
              };

              _proto3.freeIAPool = function freeIAPool() {
                if (this._iaPool) {
                  this._iaPool.reset();
                }
              };

              _proto3.reset = function reset() {
                this._vc = 0;
                this._ic = 0;
                this._byteLength = 0;
                this.vertexStart = 0;
                this.vertexRange = 0;
                this.indexStart = 0;
                this.indexRange = 0;
                this.lastFilledIndex = 0;
                this.lastFilledVertex = 0;
                this.material = null;
                this.freeIAPool();
              };

              _proto3.clear = function clear() {
                this.reset();

                if (this._iaPool) {
                  this._iaPool.destroy();
                }

                if (this._vertexBuffers[0]) {
                  this._vertexBuffers[0].destroy();

                  this._vertexBuffers = [];
                }

                this._iaInfo = null;
                this.vData = new Float32Array(256 * this.stride);
                this.iData = new Uint16Array(256 * 6);
              };

              _proto3._initIAInfo = function _initIAInfo(device) {
                var _this3 = this;

                if (!this._iaInfo) {
                  var vbStride = this.stride;
                  var vbs = this._vertexBuffers;

                  if (!vbs.length) {
                    vbs.push(device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, vbStride, vbStride)));
                  }

                  var ibStride = Uint16Array.BYTES_PER_ELEMENT;

                  if (!this._indexBuffer) {
                    this._indexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, ibStride, ibStride));
                  }

                  this._iaInfo = new InputAssemblerInfo(this._vertexFormat, vbs, this._indexBuffer);
                  this._iaPool = new RecyclePool(function () {
                    return device.createInputAssembler(_this3._iaInfo);
                  }, 1, function (ia) {
                    ia.destroy();
                  });
                }
              };

              _proto3._reallocBuffer = function _reallocBuffer(vCount, iCount) {
                var oldVData = this.vData;
                this.vData = new Float32Array(vCount);

                if (oldVData) {
                  this.vData.set(oldVData, 0);
                }

                var oldIData = this.iData;
                this.iData = new Uint16Array(iCount);

                if (oldIData) {
                  this.iData.set(oldIData, 0);
                }
              };

              _createClass(MeshRenderData, [{
                key: "formatByte",
                get: function get() {
                  return this.stride;
                },
                set: function set(value) {}
              }, {
                key: "floatStride",
                get: function get() {
                  return this._floatStride;
                }
              }, {
                key: "vDataOffset",
                get: function get() {
                  return this._byteLength >>> 2;
                }
              }]);

              return MeshRenderData;
            }(BaseRenderData));

            var _meshDataPool = new RecyclePool(function () {
              return new MeshRenderData();
            }, 32);

            var _dec$6, _dec2$1, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class$6, _class2$4, _descriptor$3, _descriptor2$1, _class3, _temp$4;

            var _vec2a = new Vec2();

            var _vec2b = new Vec2();

            var _vec3a = new Vec3();

            var _mat4_temp = new Mat4();

            var _matrix = new Mat4();

            var _worldMatrix$1 = new Mat4();

            var _zeroMatrix = new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            var _rect = new Rect$1();

            var UITransform = function (v) { return exports({ UITransform: v, UITransformComponent: v }), v; }((_dec$6 = ccclass('cc.UITransform'), _dec2$1 = help(), _dec3 = executionOrder(110), _dec4 = menu$1(), _dec5 = displayOrder(), _dec6 = tooltip(), _dec7 = displayOrder(), _dec8 = tooltip(), _dec$6(_class$6 = _dec2$1(_class$6 = _dec3(_class$6 = _dec4(_class$6 = disallowMultiple(_class$6 = executeInEditMode(_class$6 = (_class2$4 = (_temp$4 = _class3 = function (_Component) {
              _inheritsLoose(UITransform, _Component);

              function UITransform() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;
                _this._priority = 0;

                _initializerDefineProperty(_this, "_contentSize", _descriptor$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_anchorPoint", _descriptor2$1, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = UITransform.prototype;

              _proto.__preload = function __preload() {
                this.node._uiProps.uiTransformComp = this;
              };

              _proto.onLoad = function onLoad() {
                if (this.node.parent) {
                  UITransform.insertChangeMap(this.node.parent);
                }
              };

              _proto.onEnable = function onEnable() {
                this.node.on(NodeEventType.PARENT_CHANGED, this._parentChanged, this);

                this._markRenderDataDirty();
              };

              _proto.onDisable = function onDisable() {
                this.node.off(NodeEventType.PARENT_CHANGED, this._parentChanged, this);
              };

              _proto.onDestroy = function onDestroy() {
                this.node._uiProps.uiTransformComp = null;
              };

              _proto.setContentSize = function setContentSize(size, height) {
                var locContentSize = this._contentSize;

                if (height === undefined) {
                  size = size;

                  if (approx(size.width, locContentSize.width, EPSILON$2) && approx(size.height, locContentSize.height, EPSILON$2)) {
                    return;
                  }

                  locContentSize.width = size.width;
                  locContentSize.height = size.height;
                } else {
                  size = size;

                  if (approx(size, locContentSize.width, EPSILON$2) && approx(height, locContentSize.height, EPSILON$2)) {
                    return;
                  }

                  locContentSize.width = size;
                  locContentSize.height = height;
                }

                {
                  this.node.emit(NodeEventType.SIZE_CHANGED);
                }

                this._markRenderDataDirty();
              };

              _proto.setAnchorPoint = function setAnchorPoint(point, y) {
                var locAnchorPoint = this._anchorPoint;

                if (y === undefined) {
                  point = point;

                  if (point.x === locAnchorPoint.x && point.y === locAnchorPoint.y) {
                    return;
                  }

                  locAnchorPoint.x = point.x;
                  locAnchorPoint.y = point.y;
                } else {
                  if (point === locAnchorPoint.x && y === locAnchorPoint.y) {
                    return;
                  }

                  locAnchorPoint.x = point;
                  locAnchorPoint.y = y;
                }

                this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

                this._markRenderDataDirty();
              };

              _proto.isHit = function isHit(uiPoint) {
                var w = this._contentSize.width;
                var h = this._contentSize.height;
                var v2WorldPt = _vec2a;
                var testPt = _vec2b;

                var cameras = this._getRenderScene().cameras;

                for (var i = 0; i < cameras.length; i++) {
                  var camera = cameras[i];
                  if (!(camera.visibility & this.node.layer)) continue;
                  camera.node.getWorldRT(_mat4_temp);
                  var m12 = _mat4_temp.m12;
                  var m13 = _mat4_temp.m13;
                  var center = visibleRect.center;
                  _mat4_temp.m12 = center.x - (_mat4_temp.m00 * m12 + _mat4_temp.m04 * m13);
                  _mat4_temp.m13 = center.y - (_mat4_temp.m01 * m12 + _mat4_temp.m05 * m13);
                  Mat4.invert(_mat4_temp, _mat4_temp);
                  Vec2.transformMat4(v2WorldPt, uiPoint, _mat4_temp);
                  this.node.getWorldMatrix(_worldMatrix$1);
                  Mat4.invert(_mat4_temp, _worldMatrix$1);

                  if (Mat4.strictEquals(_mat4_temp, _zeroMatrix)) {
                    continue;
                  }

                  Vec2.transformMat4(testPt, v2WorldPt, _mat4_temp);
                  testPt.x += this._anchorPoint.x * w;
                  testPt.y += this._anchorPoint.y * h;
                  var hit = false;

                  if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {
                    hit = this._maskTest(v2WorldPt);
                  }

                  if (hit) {
                    return true;
                  }
                }

                return false;
              };

              _proto.hitTest = function hitTest(screenPoint) {
                var w = this._contentSize.width;
                var h = this._contentSize.height;
                var v3WorldPt = _vec3a;
                var v2WorldPt = _vec2a;
                var testPt = _vec2b;

                var cameras = this._getRenderScene().cameras;

                for (var i = 0; i < cameras.length; i++) {
                  var camera = cameras[i];
                  if (!(camera.visibility & this.node.layer)) continue;
                  Vec3.set(v3WorldPt, screenPoint.x, screenPoint.y, 0);
                  camera.screenToWorld(v3WorldPt, v3WorldPt);
                  Vec2.set(v2WorldPt, v3WorldPt.x, v3WorldPt.y);
                  this.node.getWorldMatrix(_worldMatrix$1);
                  Mat4.invert(_mat4_temp, _worldMatrix$1);

                  if (Mat4.strictEquals(_mat4_temp, _zeroMatrix)) {
                    continue;
                  }

                  Vec2.transformMat4(testPt, v2WorldPt, _mat4_temp);
                  testPt.x += this._anchorPoint.x * w;
                  testPt.y += this._anchorPoint.y * h;
                  var hit = false;

                  if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {
                    hit = this._maskTest(v2WorldPt);
                  }

                  if (hit) {
                    return true;
                  }
                }

                return false;
              };

              _proto._maskTest = function _maskTest(pointInWorldSpace) {
                var _this$node, _this$node$eventProce;

                var maskList = (_this$node = this.node) === null || _this$node === void 0 ? void 0 : (_this$node$eventProce = _this$node.eventProcessor) === null || _this$node$eventProce === void 0 ? void 0 : _this$node$eventProce.maskList;

                if (maskList) {
                  var parent = this.node;
                  var length = maskList.length;

                  for (var i = 0, j = 0; parent && j < length; ++i, parent = parent.parent) {
                    var temp = maskList[j];

                    if (i === temp.index) {
                      if (parent === temp.comp.node) {
                        var comp = temp.comp;

                        if (comp && comp._enabled && !comp.isHit(pointInWorldSpace)) {
                          return false;
                        }

                        j++;
                      } else {
                        maskList.length = j;
                        break;
                      }
                    } else if (i > temp.index) {
                      maskList.length = j;
                      break;
                    }
                  }
                }

                return true;
              };

              _proto.convertToNodeSpaceAR = function convertToNodeSpaceAR(worldPoint, out) {
                this.node.getWorldMatrix(_worldMatrix$1);
                Mat4.invert(_mat4_temp, _worldMatrix$1);

                if (!out) {
                  out = new Vec3();
                }

                return Vec3.transformMat4(out, worldPoint, _mat4_temp);
              };

              _proto.convertToWorldSpaceAR = function convertToWorldSpaceAR(nodePoint, out) {
                this.node.getWorldMatrix(_worldMatrix$1);

                if (!out) {
                  out = new Vec3();
                }

                return Vec3.transformMat4(out, nodePoint, _worldMatrix$1);
              };

              _proto.getBoundingBox = function getBoundingBox() {
                Mat4.fromRTS(_matrix, this.node.getRotation(), this.node.getPosition(), this.node.getScale());
                var width = this._contentSize.width;
                var height = this._contentSize.height;
                var rect = new Rect$1(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
                rect.transformMat4(_matrix);
                return rect;
              };

              _proto.getBoundingBoxToWorld = function getBoundingBoxToWorld() {
                if (this.node.parent) {
                  this.node.parent.getWorldMatrix(_worldMatrix$1);
                  return this.getBoundingBoxTo(_worldMatrix$1);
                }

                return this.getBoundingBox();
              };

              _proto.getBoundingBoxTo = function getBoundingBoxTo(parentMat) {
                Mat4.fromRTS(_matrix, this.node.getRotation(), this.node.getPosition(), this.node.getScale());
                var width = this._contentSize.width;
                var height = this._contentSize.height;
                var rect = new Rect$1(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
                Mat4.multiply(_worldMatrix$1, parentMat, _matrix);
                rect.transformMat4(_worldMatrix$1);

                if (!this.node.children) {
                  return rect;
                }

                var locChildren = this.node.children;

                for (var _iterator = _createForOfIteratorHelperLoose(locChildren), _step; !(_step = _iterator()).done;) {
                  var child = _step.value;

                  if (child && child.active) {
                    var uiTransform = child.getComponent(UITransform);

                    if (uiTransform) {
                      var childRect = uiTransform.getBoundingBoxTo(parentMat);

                      if (childRect) {
                        Rect$1.union(rect, rect, childRect);
                      }
                    }
                  }
                }

                return rect;
              };

              _proto.getComputeAABB = function getComputeAABB(out) {
                var width = this._contentSize.width;
                var height = this._contentSize.height;

                _rect.set(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);

                _rect.transformMat4(this.node.worldMatrix);

                var px = _rect.x + _rect.width * 0.5;
                var py = _rect.y + _rect.height * 0.5;
                var pz = this.node.worldPosition.z;
                var w = _rect.width / 2;
                var h = _rect.height / 2;
                var l = 0.001;

                if (out != null) {
                  AABB.set(out, px, py, pz, w, h, l);
                  return out;
                } else {
                  return new AABB(px, py, pz, w, h, l);
                }
              };

              _proto._parentChanged = function _parentChanged(node) {
                if (this.node.getComponent('cc.RenderRoot2D')) {
                  return;
                }

                if (this.node.parent) {
                  UITransform.insertChangeMap(this.node.parent);
                }
              };

              _proto._markRenderDataDirty = function _markRenderDataDirty() {
                var uiComp = this.node._uiProps.uiComp;

                if (uiComp) {
                  uiComp.markForUpdateRenderData();

                  if (uiComp.renderData) {
                    uiComp.renderData.vertDirty = true;
                  }
                }
              };

              UITransform.insertChangeMap = function insertChangeMap(node) {
                var key = node.uuid;

                if (!UITransform.priorityChangeNodeMap.has(key)) {
                  UITransform.priorityChangeNodeMap.set(key, node);
                }
              };

              UITransform._sortChildrenSibling = function _sortChildrenSibling(node) {
                var siblings = node.children;

                if (siblings) {
                  siblings.sort(function (a, b) {
                    var aComp = a._uiProps.uiTransformComp;
                    var bComp = b._uiProps.uiTransformComp;
                    var ca = aComp ? aComp._priority : 0;
                    var cb = bComp ? bComp._priority : 0;
                    var diff = ca - cb;
                    if (diff === 0) return a.getSiblingIndex() - b.getSiblingIndex();
                    return diff;
                  });
                }
              };

              UITransform._sortSiblings = function _sortSiblings() {
                UITransform.priorityChangeNodeMap.forEach(function (node, ID) {
                  UITransform._sortChildrenSibling(node);

                  node._updateSiblingIndex();

                  node.emit('childrenSiblingOrderChanged');
                });
                UITransform.priorityChangeNodeMap.clear();
              };

              UITransform._cleanChangeMap = function _cleanChangeMap() {
                UITransform.priorityChangeNodeMap.clear();
              };

              _createClass(UITransform, [{
                key: "contentSize",
                get: function get() {
                  return this._contentSize;
                },
                set: function set(value) {
                  if (this._contentSize.equals(value)) {
                    return;
                  }

                  this._contentSize.set(value);

                  {
                    this.node.emit(NodeEventType.SIZE_CHANGED);
                  }

                  this._markRenderDataDirty();
                }
              }, {
                key: "width",
                get: function get() {
                  return this._contentSize.width;
                },
                set: function set(value) {
                  if (this._contentSize.width === value) {
                    return;
                  }

                  this._contentSize.width = value;

                  {
                    this.node.emit(NodeEventType.SIZE_CHANGED);
                  }

                  this._markRenderDataDirty();
                }
              }, {
                key: "height",
                get: function get() {
                  return this._contentSize.height;
                },
                set: function set(value) {
                  if (this.contentSize.height === value) {
                    return;
                  }

                  this._contentSize.height = value;

                  {
                    this.node.emit(NodeEventType.SIZE_CHANGED);
                  }

                  this._markRenderDataDirty();
                }
              }, {
                key: "anchorPoint",
                get: function get() {
                  return this._anchorPoint;
                },
                set: function set(value) {
                  if (this._anchorPoint.equals(value)) {
                    return;
                  }

                  this._anchorPoint.set(value);

                  this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

                  this._markRenderDataDirty();
                }
              }, {
                key: "anchorX",
                get: function get() {
                  return this._anchorPoint.x;
                },
                set: function set(value) {
                  if (this._anchorPoint.x === value) {
                    return;
                  }

                  this._anchorPoint.x = value;
                  this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

                  this._markRenderDataDirty();
                }
              }, {
                key: "anchorY",
                get: function get() {
                  return this._anchorPoint.y;
                },
                set: function set(value) {
                  if (this._anchorPoint.y === value) {
                    return;
                  }

                  this._anchorPoint.y = value;
                  this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

                  this._markRenderDataDirty();
                }
              }, {
                key: "priority",
                get: function get() {
                  return this._priority;
                },
                set: function set(value) {
                  if (this._priority === value) {
                    return;
                  }

                  if (this.node.getComponent('cc.RenderRoot2D')) {
                    warnID(6706);
                    return;
                  }

                  this._priority = value;

                  if (this.node.parent) {
                    UITransform.insertChangeMap(this.node.parent);
                  }
                }
              }, {
                key: "visibility",
                get: function get() {
                  var camera = director.root.batcher2D.getFirstRenderCamera(this.node);
                  return camera ? camera.visibility : 0;
                }
              }, {
                key: "cameraPriority",
                get: function get() {
                  var camera = director.root.batcher2D.getFirstRenderCamera(this.node);
                  return camera ? camera.priority : 0;
                }
              }]);

              return UITransform;
            }(Component), _class3.EventType = NodeEventType, _class3.priorityChangeNodeMap = new Map(), _temp$4), (_applyDecoratedDescriptor(_class2$4.prototype, "contentSize", [_dec5, _dec6], Object.getOwnPropertyDescriptor(_class2$4.prototype, "contentSize"), _class2$4.prototype), _applyDecoratedDescriptor(_class2$4.prototype, "anchorPoint", [_dec7, _dec8], Object.getOwnPropertyDescriptor(_class2$4.prototype, "anchorPoint"), _class2$4.prototype), _descriptor$3 = _applyDecoratedDescriptor(_class2$4.prototype, "_contentSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Size$1(100, 100);
              }
            }), _descriptor2$1 = _applyDecoratedDescriptor(_class2$4.prototype, "_anchorPoint", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2(0.5, 0.5);
              }
            })), _class2$4)) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6) || _class$6));
            director.on(Director.EVENT_AFTER_UPDATE, UITransform._sortSiblings);
            director.on(Director.EVENT_BEFORE_SCENE_LAUNCH, UITransform._cleanChangeMap);

            var Stage;

            (function (Stage) {
              Stage[Stage["DISABLED"] = 0] = "DISABLED";
              Stage[Stage["CLEAR"] = 1] = "CLEAR";
              Stage[Stage["ENTER_LEVEL"] = 2] = "ENTER_LEVEL";
              Stage[Stage["ENABLED"] = 3] = "ENABLED";
              Stage[Stage["EXIT_LEVEL"] = 4] = "EXIT_LEVEL";
              Stage[Stage["CLEAR_INVERTED"] = 5] = "CLEAR_INVERTED";
              Stage[Stage["ENTER_LEVEL_INVERTED"] = 6] = "ENTER_LEVEL_INVERTED";
            })(Stage || (Stage = {}));

            var StencilManager = exports('StencilManager', function () {
              function StencilManager() {
                this.stage = Stage.DISABLED;
                this._maskStack = [];
                this._stencilPattern = {
                  stencilTest: true,
                  func: ComparisonFunc.ALWAYS,
                  stencilMask: 0xffff,
                  writeMask: 0xffff,
                  failOp: StencilOp.KEEP,
                  zFailOp: StencilOp.KEEP,
                  passOp: StencilOp.KEEP,
                  ref: 1
                };
                this.stencilStateMap = new Map();
                this.stencilStateMapWithDepth = new Map();
              }

              var _proto = StencilManager.prototype;

              _proto.pushMask = function pushMask(mask) {
                this._maskStack.push(mask);
              };

              _proto.clear = function clear(comp) {
                comp.stencilStage = comp.inverted ? Stage.CLEAR_INVERTED : Stage.CLEAR;
              };

              _proto.enterLevel = function enterLevel(comp) {
                comp.graphics.stencilStage = comp.inverted ? Stage.ENTER_LEVEL_INVERTED : Stage.ENTER_LEVEL;
              };

              _proto.enableMask = function enableMask() {
                this.stage = Stage.ENABLED;
              };

              _proto.exitMask = function exitMask() {
                if (this._maskStack.length === 0) {
                  return;
                }

                this._maskStack.pop();

                if (this._maskStack.length === 0) {
                  this.stage = Stage.DISABLED;
                } else {
                  this.stage = Stage.ENABLED;
                }
              };

              _proto.getWriteMask = function getWriteMask() {
                return 1 << this._maskStack.length - 1;
              };

              _proto.getExitWriteMask = function getExitWriteMask() {
                return 1 << this._maskStack.length;
              };

              _proto.getStencilRef = function getStencilRef() {
                var result = 0;

                for (var i = 0; i < this._maskStack.length; ++i) {
                  result += 0x00000001 << i;
                }

                return result;
              };

              _proto.reset = function reset() {
                this._maskStack.length = 0;
                this.stage = Stage.DISABLED;
              };

              _proto.destroy = function destroy() {
                this.stencilStateMap.forEach(function (value, key) {
                  value.destroy();
                });
                this.stencilStateMap.clear();
              };

              _proto.getStencilStage = function getStencilStage(stage, mat) {
                var key = 0;
                var depthTest = false;
                var depthWrite = false;
                var depthFunc = ComparisonFunc.LESS;
                var cacheMap = this.stencilStateMap;

                if (mat && mat.passes[0]) {
                  var pass = mat.passes[0];
                  var dss = pass.depthStencilState;
                  var depthTestValue = 0;
                  var depthWriteValue = 0;
                  if (dss.depthTest) depthTestValue = 1;
                  if (dss.depthWrite) depthWriteValue = 1;
                  key = depthTestValue | depthWriteValue << 1 | dss.depthFunc << 2 | stage << 6 | this._maskStack.length << 9;
                  depthTest = dss.depthTest;
                  depthWrite = dss.depthWrite;
                  depthFunc = dss.depthFunc;
                  cacheMap = this.stencilStateMapWithDepth;
                } else {
                  key = stage << 16 | this._maskStack.length;
                }

                if (cacheMap && cacheMap.has(key)) {
                  return cacheMap.get(key);
                }

                this.setStateFromStage(stage);
                var depthStencilState = new DepthStencilState(depthTest, depthWrite, depthFunc, this._stencilPattern.stencilTest, this._stencilPattern.func, this._stencilPattern.stencilMask, this._stencilPattern.writeMask, this._stencilPattern.failOp, this._stencilPattern.zFailOp, this._stencilPattern.passOp, this._stencilPattern.ref, this._stencilPattern.stencilTest, this._stencilPattern.func, this._stencilPattern.stencilMask, this._stencilPattern.writeMask, this._stencilPattern.failOp, this._stencilPattern.zFailOp, this._stencilPattern.passOp, this._stencilPattern.ref);
                cacheMap.set(key, depthStencilState);
                return depthStencilState;
              };

              _proto.getStencilHash = function getStencilHash(stage) {
                return stage << 8 | this._maskStack.length;
              };

              _proto.setStateFromStage = function setStateFromStage(stage) {
                var pattern = this._stencilPattern;

                if (stage === Stage.DISABLED) {
                  pattern.stencilTest = false;
                  pattern.func = ComparisonFunc.ALWAYS;
                  pattern.failOp = StencilOp.KEEP;
                  pattern.stencilMask = pattern.writeMask = 0xffff;
                  pattern.ref = 1;
                } else {
                  pattern.stencilTest = true;

                  if (stage === Stage.ENABLED) {
                    pattern.func = ComparisonFunc.EQUAL;
                    pattern.failOp = StencilOp.KEEP;
                    pattern.stencilMask = pattern.ref = this.getStencilRef();
                    pattern.writeMask = this.getWriteMask();
                  } else if (stage === Stage.CLEAR) {
                    pattern.func = ComparisonFunc.NEVER;
                    pattern.failOp = StencilOp.ZERO;
                    pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
                  } else if (stage === Stage.CLEAR_INVERTED) {
                    pattern.func = ComparisonFunc.NEVER;
                    pattern.failOp = StencilOp.REPLACE;
                    pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
                  } else if (stage === Stage.ENTER_LEVEL) {
                    pattern.func = ComparisonFunc.NEVER;
                    pattern.failOp = StencilOp.REPLACE;
                    pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
                  } else if (stage === Stage.ENTER_LEVEL_INVERTED) {
                    pattern.func = ComparisonFunc.NEVER;
                    pattern.failOp = StencilOp.ZERO;
                    pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
                  }
                }
              };

              _createClass(StencilManager, [{
                key: "pattern",
                get: function get() {
                  return this._stencilPattern;
                }
              }]);

              return StencilManager;
            }());
            StencilManager.sharedManager = null;
            StencilManager.sharedManager = new StencilManager();

            var _dec$7, _dec2$2, _dec3$1, _dec4$1, _dec5$1, _dec6$1, _dec7$1, _dec8$1, _dec9, _dec10, _class$7, _class2$5, _descriptor$4, _descriptor2$2, _descriptor3$1, _descriptor4$1, _descriptor5, _class3$1, _temp$5;
            ccenum(BlendFactor);
            var InstanceMaterialType;

            (function (InstanceMaterialType) {
              InstanceMaterialType[InstanceMaterialType["ADD_COLOR"] = 0] = "ADD_COLOR";
              InstanceMaterialType[InstanceMaterialType["ADD_COLOR_AND_TEXTURE"] = 1] = "ADD_COLOR_AND_TEXTURE";
              InstanceMaterialType[InstanceMaterialType["GRAYSCALE"] = 2] = "GRAYSCALE";
              InstanceMaterialType[InstanceMaterialType["USE_ALPHA_SEPARATED"] = 3] = "USE_ALPHA_SEPARATED";
              InstanceMaterialType[InstanceMaterialType["USE_ALPHA_SEPARATED_AND_GRAY"] = 4] = "USE_ALPHA_SEPARATED_AND_GRAY";
            })(InstanceMaterialType || (InstanceMaterialType = exports('InstanceMaterialType', {})));

            var Renderable2D = function (v) { return exports({ Renderable2D: v, RenderComponent: v, UIRenderable: v }), v; }((_dec$7 = ccclass('cc.Renderable2D'), _dec2$2 = requireComponent(UITransform), _dec3$1 = visible(), _dec4$1 = type$1(Material), _dec5$1 = type$1(Material), _dec6$1 = displayOrder(), _dec7$1 = tooltip(), _dec8$1 = displayName(), _dec9 = displayOrder(), _dec10 = tooltip(), _dec$7(_class$7 = _dec2$2(_class$7 = disallowMultiple(_class$7 = executeInEditMode(_class$7 = (_class2$5 = (_temp$5 = _class3$1 = function (_RenderableComponent) {
              _inheritsLoose(Renderable2D, _RenderableComponent);

              function Renderable2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _RenderableComponent.call.apply(_RenderableComponent, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_materials", _descriptor$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_customMaterial", _descriptor2$2, _assertThisInitialized(_this));

                _this.stencilStage = Stage.DISABLED;

                _initializerDefineProperty(_this, "_srcBlendFactor", _descriptor3$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_dstBlendFactor", _descriptor4$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_color", _descriptor5, _assertThisInitialized(_this));

                _this._assembler = null;
                _this._postAssembler = null;
                _this._renderData = null;
                _this._renderDataFlag = true;
                _this._renderFlag = true;
                _this._delegateSrc = null;
                _this._instanceMaterialType = -1;
                _this._blendState = new BlendState();
                _this._blendHash = 0;
                _this._useVertexOpacity = false;
                _this._lastParent = null;
                return _this;
              }

              var _proto = Renderable2D.prototype;

              _proto.updateBlendHash = function updateBlendHash() {
                var dst = this._blendState.targets[0].blendDst << 4;
                this._blendHash = dst | this._blendState.targets[0].blendSrc;
              };

              _proto.__preload = function __preload() {
                this.node._uiProps.uiComp = this;

                if (this._flushAssembler) {
                  this._flushAssembler();
                }
              };

              _proto.onEnable = function onEnable() {
                this.node.on(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
                this.node.on(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);
                this.node.on(NodeEventType.PARENT_CHANGED, this._colorDirty, this);
                this.updateMaterial();
                this._renderFlag = this._canRender();

                this._colorDirty();
              };

              _proto.onRestore = function onRestore() {
                this.updateMaterial();
                this.markForUpdateRenderData();
              };

              _proto.onDisable = function onDisable() {
                this.node.off(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
                this.node.off(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);
                this.node.off(NodeEventType.PARENT_CHANGED, this._colorDirty, this);
                this._renderFlag = false;
              };

              _proto.onDestroy = function onDestroy() {
                if (this.node._uiProps.uiComp === this) {
                  this.node._uiProps.uiComp = null;
                }

                this.destroyRenderData();

                if (this._materialInstances) {
                  for (var i = 0; i < this._materialInstances.length; i++) {
                    var instance = this._materialInstances[i];

                    if (instance) {
                      instance.destroy();
                    }
                  }
                }

                if (this._blendState) {
                  this._blendState.destroy();
                }
              };

              _proto.markForUpdateRenderData = function markForUpdateRenderData(enable) {
                if (enable === void 0) {
                  enable = true;
                }

                this._renderFlag = this._canRender();

                if (enable) {
                  var renderData = this._renderData;

                  if (renderData) {
                    renderData.vertDirty = true;
                  }

                  this._renderDataFlag = enable;
                } else {
                  this._renderDataFlag = enable;
                }
              };

              _proto.requestRenderData = function requestRenderData() {
                var data = RenderData.add();
                this._renderData = data;
                return data;
              };

              _proto.destroyRenderData = function destroyRenderData() {
                if (!this._renderData) {
                  return;
                }

                RenderData.remove(this._renderData);
                this._renderData = null;
              };

              _proto.updateAssembler = function updateAssembler(render) {
                if (this._renderDataFlag) {
                  this._assembler.updateRenderData(this, render);

                  this._renderDataFlag = false;
                }

                if (this._renderFlag) {
                  this._render(render);
                }
              };

              _proto.postUpdateAssembler = function postUpdateAssembler(render) {
                if (this._postAssembler && this._renderFlag) {
                  this._postRender(render);
                }
              };

              _proto._render = function _render(render) {};

              _proto._postRender = function _postRender(render) {};

              _proto._canRender = function _canRender() {
                return this.isValid && this.getMaterial(0) !== null && this.enabled && (this._delegateSrc ? this._delegateSrc.activeInHierarchy : this.enabledInHierarchy) && this._color.a > 0;
              };

              _proto._postCanRender = function _postCanRender() {};

              _proto.updateMaterial = function updateMaterial() {
                if (this._customMaterial) {
                  this.setMaterial(this._customMaterial, 0);

                  if (this._renderData) {
                    this._renderData.material = this._customMaterial;
                    this.markForUpdateRenderData();
                    this._renderData.passDirty = true;
                  }

                  this._blendHash = -1;
                  return;
                }

                var mat = this._updateBuiltinMaterial();

                this.setMaterial(mat, 0);

                if (this._renderData) {
                  this._renderData.material = mat;
                  this.markForUpdateRenderData();
                }

                this._updateBlendFunc();
              };

              _proto._updateColor = function _updateColor() {
                this.node._uiProps.colorDirty = true;

                if (this._assembler) {
                  this._assembler.updateColor(this);

                  this._renderFlag = this._canRender();
                }
              };

              _proto._updateBlendFunc = function _updateBlendFunc() {
                var target = this._blendState.targets[0];

                if (!target) {
                  target = new BlendTarget();

                  this._blendState.setTarget(0, target);
                }

                if (target.blendDst !== this._dstBlendFactor || target.blendSrc !== this._srcBlendFactor) {
                  target.blend = true;
                  target.blendDstAlpha = BlendFactor.ONE_MINUS_SRC_ALPHA;
                  target.blendDst = this._dstBlendFactor;
                  target.blendSrc = this._srcBlendFactor;

                  if (this.renderData) {
                    this.renderData.passDirty = true;
                  }
                }

                this.updateBlendHash();
              };

              _proto.getBlendState = function getBlendState() {
                return this._blendState;
              };

              _proto._nodeStateChange = function _nodeStateChange(transformType) {
                if (this._renderData) {
                  this.markForUpdateRenderData();
                }

                for (var i = 0; i < this.node.children.length; ++i) {
                  var child = this.node.children[i];
                  var renderComp = child.getComponent(Renderable2D);

                  if (renderComp) {
                    renderComp.markForUpdateRenderData();
                  }
                }
              };

              _proto._colorDirty = function _colorDirty() {
                this.node._uiProps.colorDirty = true;
              };

              _proto._onMaterialModified = function _onMaterialModified(idx, material) {
                if (this._renderData) {
                  this.markForUpdateRenderData();
                  this._renderData.passDirty = true;
                }

                _RenderableComponent.prototype._onMaterialModified.call(this, idx, material);
              };

              _proto._updateBuiltinMaterial = function _updateBuiltinMaterial() {
                var mat;

                switch (this._instanceMaterialType) {
                  case InstanceMaterialType.ADD_COLOR:
                    mat = builtinResMgr.get("ui-base-material");
                    break;

                  case InstanceMaterialType.GRAYSCALE:
                    mat = builtinResMgr.get("ui-sprite-gray-material");
                    break;

                  case InstanceMaterialType.USE_ALPHA_SEPARATED:
                    mat = builtinResMgr.get("ui-sprite-alpha-sep-material");
                    break;

                  case InstanceMaterialType.USE_ALPHA_SEPARATED_AND_GRAY:
                    mat = builtinResMgr.get("ui-sprite-gray-alpha-sep-material");
                    break;

                  default:
                    mat = builtinResMgr.get("ui-sprite-material");
                    break;
                }

                return mat;
              };

              _proto.setNodeDirty = function setNodeDirty() {
                if (this.renderData) {
                  this.renderData.nodeDirty = true;
                }
              };

              _proto.setTextureDirty = function setTextureDirty() {
                if (this.renderData) {
                  this.renderData.textureDirty = true;
                }
              };

              _createClass(Renderable2D, [{
                key: "sharedMaterials",
                get: function get() {
                  return  this._materials;
                },
                set: function set(val) {
                  for (var i = 0; i < val.length; i++) {
                    if (val[i] !== this._materials[i]) {
                      this.setMaterial(val[i], i);
                    }
                  }

                  if (val.length < this._materials.length) {
                    for (var _i = val.length; _i < this._materials.length; _i++) {
                      this.setMaterial(null, _i);
                    }

                    this._materials.splice(val.length);
                  }
                }
              }, {
                key: "customMaterial",
                get: function get() {
                  return this._customMaterial;
                },
                set: function set(val) {
                  this._customMaterial = val;
                  this.updateMaterial();
                }
              }, {
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(value) {
                  if (this._color.equals(value)) {
                    return;
                  }

                  this._color.set(value);

                  this._updateColor();
                }
              }, {
                key: "renderData",
                get: function get() {
                  return this._renderData;
                }
              }, {
                key: "delegateSrc",
                set: function set(value) {
                  this._delegateSrc = value;
                }
              }, {
                key: "blendHash",
                get: function get() {
                  return this._blendHash;
                }
              }, {
                key: "useVertexOpacity",
                get: function get() {
                  return this._useVertexOpacity;
                }
              }]);

              return Renderable2D;
            }(RenderableComponent), _class3$1.BlendState = BlendFactor, _class3$1.Assembler = null, _class3$1.PostAssembler = null, _temp$5), (_descriptor$4 = _applyDecoratedDescriptor(_class2$5.prototype, "_materials", [override], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _applyDecoratedDescriptor(_class2$5.prototype, "sharedMaterials", [override, _dec3$1], Object.getOwnPropertyDescriptor(_class2$5.prototype, "sharedMaterials"), _class2$5.prototype), _descriptor2$2 = _applyDecoratedDescriptor(_class2$5.prototype, "_customMaterial", [_dec4$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$5.prototype, "customMaterial", [_dec5$1, _dec6$1, _dec7$1, _dec8$1, disallowAnimation], Object.getOwnPropertyDescriptor(_class2$5.prototype, "customMaterial"), _class2$5.prototype), _applyDecoratedDescriptor(_class2$5.prototype, "color", [_dec9, _dec10], Object.getOwnPropertyDescriptor(_class2$5.prototype, "color"), _class2$5.prototype), _descriptor3$1 = _applyDecoratedDescriptor(_class2$5.prototype, "_srcBlendFactor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return BlendFactor.SRC_ALPHA;
              }
            }), _descriptor4$1 = _applyDecoratedDescriptor(_class2$5.prototype, "_dstBlendFactor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return BlendFactor.ONE_MINUS_SRC_ALPHA;
              }
            }), _descriptor5 = _applyDecoratedDescriptor(_class2$5.prototype, "_color", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            })), _class2$5)) || _class$7) || _class$7) || _class$7) || _class$7));
            legacyCC.internal.Renderable2D = Renderable2D;

            var _dec$8, _dec2$3, _dec3$2, _dec4$2, _dec5$2, _dec6$2, _dec7$2, _dec8$2, _dec9$1, _dec10$1, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _class$8, _class2$6, _descriptor$5, _descriptor2$3, _descriptor3$2, _descriptor4$2, _descriptor5$1, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _class3$2, _temp$6;
            var HorizontalTextAlignment;

            (function (HorizontalTextAlignment) {
              HorizontalTextAlignment[HorizontalTextAlignment["LEFT"] = 0] = "LEFT";
              HorizontalTextAlignment[HorizontalTextAlignment["CENTER"] = 1] = "CENTER";
              HorizontalTextAlignment[HorizontalTextAlignment["RIGHT"] = 2] = "RIGHT";
            })(HorizontalTextAlignment || (HorizontalTextAlignment = exports('HorizontalTextAlignment', {})));

            ccenum(HorizontalTextAlignment);
            var VerticalTextAlignment;

            (function (VerticalTextAlignment) {
              VerticalTextAlignment[VerticalTextAlignment["TOP"] = 0] = "TOP";
              VerticalTextAlignment[VerticalTextAlignment["CENTER"] = 1] = "CENTER";
              VerticalTextAlignment[VerticalTextAlignment["BOTTOM"] = 2] = "BOTTOM";
            })(VerticalTextAlignment || (VerticalTextAlignment = exports('VerticalTextAlignment', {})));

            ccenum(VerticalTextAlignment);
            var Overflow;

            (function (Overflow) {
              Overflow[Overflow["NONE"] = 0] = "NONE";
              Overflow[Overflow["CLAMP"] = 1] = "CLAMP";
              Overflow[Overflow["SHRINK"] = 2] = "SHRINK";
              Overflow[Overflow["RESIZE_HEIGHT"] = 3] = "RESIZE_HEIGHT";
            })(Overflow || (Overflow = exports('Overflow', {})));

            ccenum(Overflow);
            var CacheMode;

            (function (CacheMode) {
              CacheMode[CacheMode["NONE"] = 0] = "NONE";
              CacheMode[CacheMode["BITMAP"] = 1] = "BITMAP";
              CacheMode[CacheMode["CHAR"] = 2] = "CHAR";
            })(CacheMode || (CacheMode = exports('CacheMode', {})));

            ccenum(CacheMode);
            var Label = function (v) { return exports({ Label: v, LabelComponent: v }), v; }((_dec$8 = ccclass('cc.Label'), _dec2$3 = help(), _dec3$2 = executionOrder(110), _dec4$2 = menu$1(), _dec5$2 = displayOrder(), _dec6$2 = tooltip(), _dec7$2 = type$1(HorizontalTextAlignment), _dec8$2 = displayOrder(), _dec9$1 = tooltip(), _dec10$1 = type$1(VerticalTextAlignment), _dec11 = displayOrder(), _dec12 = tooltip(), _dec13 = displayOrder(), _dec14 = tooltip(), _dec15 = displayOrder(), _dec16 = visible(), _dec17 = tooltip(), _dec18 = displayOrder(), _dec19 = tooltip(), _dec20 = visible(), _dec21 = displayOrder(), _dec22 = tooltip(), _dec23 = type$1(Overflow), _dec24 = displayOrder(), _dec25 = tooltip(), _dec26 = displayOrder(), _dec27 = tooltip(), _dec28 = type$1(Font), _dec29 = displayOrder(), _dec30 = visible(), _dec31 = tooltip(), _dec32 = displayOrder(), _dec33 = tooltip(), _dec34 = type$1(CacheMode), _dec35 = displayOrder(), _dec36 = tooltip(), _dec37 = displayOrder(), _dec38 = tooltip(), _dec39 = displayOrder(), _dec40 = tooltip(), _dec41 = displayOrder(), _dec42 = tooltip(), _dec43 = visible(), _dec44 = displayOrder(), _dec45 = tooltip(), _dec$8(_class$8 = _dec2$3(_class$8 = _dec3$2(_class$8 = _dec4$2(_class$8 = (_class2$6 = (_temp$6 = _class3$2 = function (_Renderable2D) {
              _inheritsLoose(Label, _Renderable2D);

              function Label() {
                var _this;

                _this = _Renderable2D.call(this) || this;

                _initializerDefineProperty(_this, "_string", _descriptor$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_horizontalAlign", _descriptor2$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_verticalAlign", _descriptor3$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_actualFontSize", _descriptor4$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fontSize", _descriptor5$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fontFamily", _descriptor6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_lineHeight", _descriptor7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_overflow", _descriptor8, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_enableWrapText", _descriptor9, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_font", _descriptor10, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isSystemFontUsed", _descriptor11, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_spacingX", _descriptor12, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isItalic", _descriptor13, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isBold", _descriptor14, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isUnderline", _descriptor15, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_underlineHeight", _descriptor16, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_cacheMode", _descriptor17, _assertThisInitialized(_this));

                _this._N$file = null;
                _this._texture = null;
                _this._ttfSpriteFrame = null;
                _this._userDefinedFont = null;
                _this._assemblerData = null;
                _this._fontAtlas = null;
                _this._letterTexture = null;

                _this._ttfSpriteFrame = null;
                return _this;
              }

              var _proto = Label.prototype;

              _proto.onEnable = function onEnable() {
                _Renderable2D.prototype.onEnable.call(this);

                if (!this._font && !this._isSystemFontUsed) {
                  this.useSystemFont = true;
                }

                if (this._isSystemFontUsed && !this._fontFamily) {
                  this.fontFamily = 'Arial';
                }

                this._applyFontTexture();
              };

              _proto.onDestroy = function onDestroy() {
                if (this._assembler && this._assembler.resetAssemblerData) {
                  this._assembler.resetAssemblerData(this._assemblerData);
                }

                this._assemblerData = null;

                if (this._ttfSpriteFrame) {
                  this._ttfSpriteFrame._resetDynamicAtlasFrame();

                  var tex = this._ttfSpriteFrame.texture;

                  this._ttfSpriteFrame.destroy();

                  if (tex) {
                    var tex2d = tex;

                    if (tex2d.image) {
                      tex2d.image.destroy();
                    }

                    tex.destroy();
                  }

                  this._ttfSpriteFrame = null;
                }

                this._letterTexture = null;

                _Renderable2D.prototype.onDestroy.call(this);
              };

              _proto.updateRenderData = function updateRenderData(force) {
                if (force === void 0) {
                  force = false;
                }

                this.markForUpdateRenderData();

                if (force) {
                  this._flushAssembler();

                  if (this.renderData) this.renderData.vertDirty = true;

                  this._applyFontTexture();

                  if (this._assembler) {
                    this._assembler.updateRenderData(this);
                  }
                }
              };

              _proto._render = function _render(render) {
                render.commitComp(this, this.renderData, this._texture, this._assembler, null);
              };

              _proto._updateColor = function _updateColor() {
                _Renderable2D.prototype._updateColor.call(this);

                this.updateRenderData(false);
              };

              _proto._canRender = function _canRender() {
                if (!_Renderable2D.prototype._canRender.call(this) || !this._string) {
                  return false;
                }

                var font = this._font;

                if (font && font instanceof BitmapFont) {
                  var spriteFrame = font.spriteFrame;

                  if (!spriteFrame || !spriteFrame.texture) {
                    return false;
                  }
                }

                return true;
              };

              _proto._flushAssembler = function _flushAssembler() {
                var assembler = Label.Assembler.getAssembler(this);

                if (this._assembler !== assembler) {
                  this.destroyRenderData();
                  this._assembler = assembler;
                }

                if (!this._renderData) {
                  if (this._assembler && this._assembler.createData) {
                    this._renderData = this._assembler.createData(this);
                    this._renderData.material = this.material;
                  }
                }
              };

              _proto._applyFontTexture = function _applyFontTexture() {
                this.markForUpdateRenderData();
                var font = this._font;

                if (font instanceof BitmapFont) {
                  var spriteFrame = font.spriteFrame;

                  if (spriteFrame && spriteFrame.texture) {
                    this._texture = spriteFrame;

                    if (this.renderData) {
                      this.renderData.textureDirty = true;
                    }

                    this.changeMaterialForDefine();

                    if (this._assembler) {
                      this._assembler.updateRenderData(this);
                    }
                  }
                } else {
                  if (this.cacheMode === CacheMode.CHAR) {
                    this._letterTexture = this._assembler.getAssemblerData();
                    this._texture = this._letterTexture;
                  } else if (!this._ttfSpriteFrame) {
                    this._ttfSpriteFrame = new SpriteFrame();
                    this._assemblerData = this._assembler.getAssemblerData();
                    var image = new ImageAsset(this._assemblerData.canvas);
                    var texture = new Texture2D();
                    texture.image = image;
                    this._ttfSpriteFrame.texture = texture;
                  }

                  if (this.cacheMode !== CacheMode.CHAR) {
                    this._texture = this._ttfSpriteFrame;
                  }

                  this.changeMaterialForDefine();
                }
              };

              _proto.changeMaterialForDefine = function changeMaterialForDefine() {
                if (!this._texture) {
                  return;
                }

                var value = false;

                if (this.cacheMode !== CacheMode.CHAR) {
                  var spriteFrame = this._texture;
                  var texture = spriteFrame.texture;

                  if (texture instanceof TextureBase) {
                    var format = texture.getPixelFormat();
                    value = format === PixelFormat.RGBA_ETC1 || format === PixelFormat.RGB_A_PVRTC_4BPPV1 || format === PixelFormat.RGB_A_PVRTC_2BPPV1;
                  }
                }

                if (value) {
                  this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED;
                } else {
                  this._instanceMaterialType = InstanceMaterialType.ADD_COLOR_AND_TEXTURE;
                }

                this.updateMaterial();
              };

              _proto._updateBlendFunc = function _updateBlendFunc() {

                _Renderable2D.prototype._updateBlendFunc.call(this);
              };

              _createClass(Label, [{
                key: "string",
                get: function get() {
                  return this._string;
                },
                set: function set(value) {
                  if (value === null || value === undefined) {
                    value = '';
                  } else {
                    value = value.toString();
                  }

                  if (this._string === value) {
                    return;
                  }

                  this._string = value;
                  this.updateRenderData();
                }
              }, {
                key: "horizontalAlign",
                get: function get() {
                  return this._horizontalAlign;
                },
                set: function set(value) {
                  if (this._horizontalAlign === value) {
                    return;
                  }

                  this._horizontalAlign = value;
                  this.updateRenderData();
                }
              }, {
                key: "verticalAlign",
                get: function get() {
                  return this._verticalAlign;
                },
                set: function set(value) {
                  if (this._verticalAlign === value) {
                    return;
                  }

                  this._verticalAlign = value;
                  this.updateRenderData();
                }
              }, {
                key: "actualFontSize",
                get: function get() {
                  return this._actualFontSize;
                },
                set: function set(value) {
                  this._actualFontSize = value;
                }
              }, {
                key: "fontSize",
                get: function get() {
                  return this._fontSize;
                },
                set: function set(value) {
                  if (this._fontSize === value) {
                    return;
                  }

                  this._fontSize = value;
                  this.updateRenderData();
                }
              }, {
                key: "fontFamily",
                get: function get() {
                  return this._fontFamily;
                },
                set: function set(value) {
                  if (this._fontFamily === value) {
                    return;
                  }

                  this._fontFamily = value;
                  this.updateRenderData();
                }
              }, {
                key: "lineHeight",
                get: function get() {
                  return this._lineHeight;
                },
                set: function set(value) {
                  if (this._lineHeight === value) {
                    return;
                  }

                  this._lineHeight = value;
                  this.updateRenderData();
                }
              }, {
                key: "spacingX",
                get: function get() {
                  return this._spacingX;
                },
                set: function set(value) {
                  if (this._spacingX === value) {
                    return;
                  }

                  this._spacingX = value;
                  this.updateRenderData();
                }
              }, {
                key: "overflow",
                get: function get() {
                  return this._overflow;
                },
                set: function set(value) {
                  if (this._overflow === value) {
                    return;
                  }

                  this._overflow = value;
                  this.updateRenderData();
                }
              }, {
                key: "enableWrapText",
                get: function get() {
                  return this._enableWrapText;
                },
                set: function set(value) {
                  if (this._enableWrapText === value) {
                    return;
                  }

                  this._enableWrapText = value;
                  this.updateRenderData();
                }
              }, {
                key: "font",
                get: function get() {
                  return this._font;
                },
                set: function set(value) {
                  if (this._font === value) {
                    return;
                  }

                  this._isSystemFontUsed = !value;

                  this._font = value;

                  if (this._renderData) {
                    this.destroyRenderData();
                    this._renderData = null;
                  }

                  this._fontAtlas = null;
                  this.updateRenderData(true);
                }
              }, {
                key: "useSystemFont",
                get: function get() {
                  return this._isSystemFontUsed;
                },
                set: function set(value) {
                  if (this._isSystemFontUsed === value) {
                    return;
                  }

                  this.destroyRenderData();
                  this._renderData = null;

                  this._isSystemFontUsed = !!value;

                  if (value) {
                    this.font = null;
                  }

                  this._flushAssembler();

                  this.updateRenderData();
                }
              }, {
                key: "cacheMode",
                get: function get() {
                  return this._cacheMode;
                },
                set: function set(value) {
                  if (this._cacheMode === value) {
                    return;
                  }

                  if (this._cacheMode === CacheMode.BITMAP && !(this._font instanceof BitmapFont) && this._ttfSpriteFrame) {
                    this._ttfSpriteFrame._resetDynamicAtlasFrame();
                  }

                  if (this._cacheMode === CacheMode.CHAR) {
                    this._ttfSpriteFrame = null;
                  }

                  this._cacheMode = value;
                  this.updateRenderData(true);
                }
              }, {
                key: "isBold",
                get: function get() {
                  return this._isBold;
                },
                set: function set(value) {
                  if (this._isBold === value) {
                    return;
                  }

                  this._isBold = value;
                  this.updateRenderData();
                }
              }, {
                key: "isItalic",
                get: function get() {
                  return this._isItalic;
                },
                set: function set(value) {
                  if (this._isItalic === value) {
                    return;
                  }

                  this._isItalic = value;
                  this.updateRenderData();
                }
              }, {
                key: "isUnderline",
                get: function get() {
                  return this._isUnderline;
                },
                set: function set(value) {
                  if (this._isUnderline === value) {
                    return;
                  }

                  this._isUnderline = value;
                  this.updateRenderData();
                }
              }, {
                key: "underlineHeight",
                get: function get() {
                  return this._underlineHeight;
                },
                set: function set(value) {
                  if (this._underlineHeight === value) return;
                  this._underlineHeight = value;
                  this.updateRenderData();
                }
              }, {
                key: "spriteFrame",
                get: function get() {
                  return this._texture;
                }
              }, {
                key: "ttfSpriteFrame",
                get: function get() {
                  return this._ttfSpriteFrame;
                }
              }, {
                key: "assemblerData",
                get: function get() {
                  return this._assemblerData;
                }
              }, {
                key: "fontAtlas",
                get: function get() {
                  return this._fontAtlas;
                },
                set: function set(value) {
                  this._fontAtlas = value;
                }
              }, {
                key: "_bmFontOriginalSize",
                get: function get() {
                  if (this._font instanceof BitmapFont) {
                    return this._font.fontSize;
                  } else {
                    return -1;
                  }
                }
              }]);

              return Label;
            }(Renderable2D), _class3$2.HorizontalAlign = HorizontalTextAlignment, _class3$2.VerticalAlign = VerticalTextAlignment, _class3$2.Overflow = Overflow, _class3$2.CacheMode = CacheMode, _class3$2._canvasPool = CanvasPool.getInstance(), _temp$6), (_applyDecoratedDescriptor(_class2$6.prototype, "string", [_dec5$2, _dec6$2, multiline], Object.getOwnPropertyDescriptor(_class2$6.prototype, "string"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "horizontalAlign", [_dec7$2, _dec8$2, _dec9$1], Object.getOwnPropertyDescriptor(_class2$6.prototype, "horizontalAlign"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "verticalAlign", [_dec10$1, _dec11, _dec12], Object.getOwnPropertyDescriptor(_class2$6.prototype, "verticalAlign"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "fontSize", [_dec13, _dec14], Object.getOwnPropertyDescriptor(_class2$6.prototype, "fontSize"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "fontFamily", [_dec15, _dec16, _dec17], Object.getOwnPropertyDescriptor(_class2$6.prototype, "fontFamily"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "lineHeight", [_dec18, _dec19], Object.getOwnPropertyDescriptor(_class2$6.prototype, "lineHeight"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "spacingX", [_dec20, _dec21, _dec22], Object.getOwnPropertyDescriptor(_class2$6.prototype, "spacingX"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "overflow", [_dec23, _dec24, _dec25], Object.getOwnPropertyDescriptor(_class2$6.prototype, "overflow"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "enableWrapText", [_dec26, _dec27], Object.getOwnPropertyDescriptor(_class2$6.prototype, "enableWrapText"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "font", [_dec28, _dec29, _dec30, _dec31], Object.getOwnPropertyDescriptor(_class2$6.prototype, "font"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "useSystemFont", [_dec32, _dec33], Object.getOwnPropertyDescriptor(_class2$6.prototype, "useSystemFont"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "cacheMode", [_dec34, _dec35, _dec36], Object.getOwnPropertyDescriptor(_class2$6.prototype, "cacheMode"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "isBold", [_dec37, _dec38], Object.getOwnPropertyDescriptor(_class2$6.prototype, "isBold"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "isItalic", [_dec39, _dec40], Object.getOwnPropertyDescriptor(_class2$6.prototype, "isItalic"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "isUnderline", [_dec41, _dec42], Object.getOwnPropertyDescriptor(_class2$6.prototype, "isUnderline"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "underlineHeight", [_dec43, editable, _dec44, _dec45], Object.getOwnPropertyDescriptor(_class2$6.prototype, "underlineHeight"), _class2$6.prototype), _descriptor$5 = _applyDecoratedDescriptor(_class2$6.prototype, "_string", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 'label';
              }
            }), _descriptor2$3 = _applyDecoratedDescriptor(_class2$6.prototype, "_horizontalAlign", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return HorizontalTextAlignment.CENTER;
              }
            }), _descriptor3$2 = _applyDecoratedDescriptor(_class2$6.prototype, "_verticalAlign", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return VerticalTextAlignment.CENTER;
              }
            }), _descriptor4$2 = _applyDecoratedDescriptor(_class2$6.prototype, "_actualFontSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor5$1 = _applyDecoratedDescriptor(_class2$6.prototype, "_fontSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 40;
              }
            }), _descriptor6 = _applyDecoratedDescriptor(_class2$6.prototype, "_fontFamily", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 'Arial';
              }
            }), _descriptor7 = _applyDecoratedDescriptor(_class2$6.prototype, "_lineHeight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 40;
              }
            }), _descriptor8 = _applyDecoratedDescriptor(_class2$6.prototype, "_overflow", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Overflow.NONE;
              }
            }), _descriptor9 = _applyDecoratedDescriptor(_class2$6.prototype, "_enableWrapText", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor10 = _applyDecoratedDescriptor(_class2$6.prototype, "_font", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor11 = _applyDecoratedDescriptor(_class2$6.prototype, "_isSystemFontUsed", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor12 = _applyDecoratedDescriptor(_class2$6.prototype, "_spacingX", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor13 = _applyDecoratedDescriptor(_class2$6.prototype, "_isItalic", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor14 = _applyDecoratedDescriptor(_class2$6.prototype, "_isBold", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor15 = _applyDecoratedDescriptor(_class2$6.prototype, "_isUnderline", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor16 = _applyDecoratedDescriptor(_class2$6.prototype, "_underlineHeight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 2;
              }
            }), _descriptor17 = _applyDecoratedDescriptor(_class2$6.prototype, "_cacheMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return CacheMode.NONE;
              }
            })), _class2$6)) || _class$8) || _class$8) || _class$8) || _class$8));
            legacyCC.Label = Label;

            var LineCap;

            (function (LineCap) {
              LineCap[LineCap["BUTT"] = 0] = "BUTT";
              LineCap[LineCap["ROUND"] = 1] = "ROUND";
              LineCap[LineCap["SQUARE"] = 2] = "SQUARE";
            })(LineCap || (LineCap = {}));

            ccenum(LineCap);
            var LineJoin;

            (function (LineJoin) {
              LineJoin[LineJoin["BEVEL"] = 0] = "BEVEL";
              LineJoin[LineJoin["ROUND"] = 1] = "ROUND";
              LineJoin[LineJoin["MITER"] = 2] = "MITER";
            })(LineJoin || (LineJoin = {}));

            ccenum(LineJoin);
            var PointFlags;

            (function (PointFlags) {
              PointFlags[PointFlags["PT_CORNER"] = 1] = "PT_CORNER";
              PointFlags[PointFlags["PT_LEFT"] = 2] = "PT_LEFT";
              PointFlags[PointFlags["PT_BEVEL"] = 4] = "PT_BEVEL";
              PointFlags[PointFlags["PT_INNERBEVEL"] = 8] = "PT_INNERBEVEL";
            })(PointFlags || (PointFlags = {}));

            ccenum(PointFlags);

            var PI = Math.PI;
            var min = Math.min;
            var max = Math.max;
            var cos = Math.cos;
            var sin = Math.sin;
            var abs = Math.abs;
            var sign = Math.sign;
            var KAPPA90 = 0.5522847493;
            function arc(ctx, cx, cy, r, startAngle, endAngle, counterclockwise) {
              counterclockwise = counterclockwise || false;
              var a = 0;
              var da = 0;
              var hda = 0;
              var kappa = 0;
              var dx = 0;
              var dy = 0;
              var x = 0;
              var y = 0;
              var tanx = 0;
              var tany = 0;
              var px = 0;
              var py = 0;
              var ptanx = 0;
              var ptany = 0;
              var i = 0;
              var ndivs = 0;
              da = endAngle - startAngle;

              if (counterclockwise) {
                if (abs(da) >= PI * 2) {
                  da = PI * 2;
                } else {
                  while (da < 0) {
                    da += PI * 2;
                  }
                }
              } else if (abs(da) >= PI * 2) {
                da = -PI * 2;
              } else {
                while (da > 0) {
                  da -= PI * 2;
                }
              }

              ndivs = max(1, min(abs(da) / (PI * 0.5) + 0.5, 5)) | 0;
              hda = da / ndivs / 2.0;
              kappa = abs(4.0 / 3.0 * (1 - cos(hda)) / sin(hda));

              if (!counterclockwise) {
                kappa = -kappa;
              }

              for (i = 0; i <= ndivs; i++) {
                a = startAngle + da * (i / ndivs);
                dx = cos(a);
                dy = sin(a);
                x = cx + dx * r;
                y = cy + dy * r;
                tanx = -dy * r * kappa;
                tany = dx * r * kappa;

                if (i === 0) {
                  ctx.moveTo(x, y);
                } else {
                  ctx.bezierCurveTo(px + ptanx, py + ptany, x - tanx, y - tany, x, y);
                }

                px = x;
                py = y;
                ptanx = tanx;
                ptany = tany;
              }
            }
            function ellipse(ctx, cx, cy, rx, ry) {
              ctx.moveTo(cx - rx, cy);
              ctx.bezierCurveTo(cx - rx, cy + ry * KAPPA90, cx - rx * KAPPA90, cy + ry, cx, cy + ry);
              ctx.bezierCurveTo(cx + rx * KAPPA90, cy + ry, cx + rx, cy + ry * KAPPA90, cx + rx, cy);
              ctx.bezierCurveTo(cx + rx, cy - ry * KAPPA90, cx + rx * KAPPA90, cy - ry, cx, cy - ry);
              ctx.bezierCurveTo(cx - rx * KAPPA90, cy - ry, cx - rx, cy - ry * KAPPA90, cx - rx, cy);
              ctx.close();
            }
            function roundRect(ctx, x, y, w, h, r) {
              if (r < 0.1) {
                ctx.rect(x, y, w, h);
              } else {
                var rx = min(r, abs(w) * 0.5) * sign(w);
                var ry = min(r, abs(h) * 0.5) * sign(h);
                ctx.moveTo(x, y + ry);
                ctx.lineTo(x, y + h - ry);
                ctx.bezierCurveTo(x, y + h - ry * (1 - KAPPA90), x + rx * (1 - KAPPA90), y + h, x + rx, y + h);
                ctx.lineTo(x + w - rx, y + h);
                ctx.bezierCurveTo(x + w - rx * (1 - KAPPA90), y + h, x + w, y + h - ry * (1 - KAPPA90), x + w, y + h - ry);
                ctx.lineTo(x + w, y + ry);
                ctx.bezierCurveTo(x + w, y + ry * (1 - KAPPA90), x + w - rx * (1 - KAPPA90), y, x + w - rx, y);
                ctx.lineTo(x + rx, y);
                ctx.bezierCurveTo(x + rx * (1 - KAPPA90), y, x, y + ry * (1 - KAPPA90), x, y + ry);
                ctx.close();
              }
            }
            function tesselateBezier(ctx, x1, y1, x2, y2, x3, y3, x4, y4, level, type) {
              var x12 = 0;
              var y12 = 0;
              var x23 = 0;
              var y23 = 0;
              var x34 = 0;
              var y34 = 0;
              var x123 = 0;
              var y123 = 0;
              var x234 = 0;
              var y234 = 0;
              var x1234 = 0;
              var y1234 = 0;
              var dx = 0;
              var dy = 0;
              var d2 = 0;
              var d3 = 0;

              if (level > 10) {
                return;
              }

              x12 = (x1 + x2) * 0.5;
              y12 = (y1 + y2) * 0.5;
              x23 = (x2 + x3) * 0.5;
              y23 = (y2 + y3) * 0.5;
              x34 = (x3 + x4) * 0.5;
              y34 = (y3 + y4) * 0.5;
              x123 = (x12 + x23) * 0.5;
              y123 = (y12 + y23) * 0.5;
              dx = x4 - x1;
              dy = y4 - y1;
              d2 = abs((x2 - x4) * dy - (y2 - y4) * dx);
              d3 = abs((x3 - x4) * dy - (y3 - y4) * dx);

              if ((d2 + d3) * (d2 + d3) < ctx.tessTol * (dx * dx + dy * dy)) {
                ctx.addPoint(x4, y4, type === 0 ? type | PointFlags.PT_BEVEL : type);
                return;
              }

              x234 = (x23 + x34) * 0.5;
              y234 = (y23 + y34) * 0.5;
              x1234 = (x123 + x234) * 0.5;
              y1234 = (y123 + y234) * 0.5;
              tesselateBezier(ctx, x1, y1, x12, y12, x123, y123, x1234, y1234, level + 1, 0);
              tesselateBezier(ctx, x1234, y1234, x234, y234, x34, y34, x4, y4, level + 1, type);
            }

            var Point = function (_Vec) {
              _inheritsLoose(Point, _Vec);

              function Point(x, y) {
                var _this;

                _this = _Vec.call(this, x, y) || this;
                _this.dx = 0;
                _this.dy = 0;
                _this.dmx = 0;
                _this.dmy = 0;
                _this.flags = 0;
                _this.len = 0;

                _this.reset();

                return _this;
              }

              var _proto = Point.prototype;

              _proto.reset = function reset() {
                this.dx = 0;
                this.dy = 0;
                this.dmx = 0;
                this.dmy = 0;
                this.flags = 0;
                this.len = 0;
              };

              return Point;
            }(Vec2);
            var Path = function () {
              function Path() {
                this.closed = false;
                this.bevel = 0;
                this.complex = true;
                this.points = [];
                this.reset();
              }

              var _proto2 = Path.prototype;

              _proto2.reset = function reset() {
                this.closed = false;
                this.bevel = 0;
                this.complex = true;

                if (this.points) {
                  this.points.length = 0;
                } else {
                  this.points = [];
                }
              };

              return Path;
            }();
            var Impl = function () {
              function Impl() {
                this.dataOffset = 0;
                this.updatePathOffset = false;
                this.pathLength = 0;
                this.pathOffset = 0;
                this.paths = [];
                this.tessTol = 0.25;
                this.distTol = 0.01;
                this.fillColor = Color$1.WHITE.clone();
                this.lineCap = LineCap.BUTT;
                this.strokeColor = Color$1.BLACK.clone();
                this.lineJoin = LineJoin.MITER;
                this.lineWidth = 0;
                this.pointsOffset = 0;
                this._commandX = 0;
                this._commandY = 0;
                this._points = [];
                this._renderDataList = [];
                this._curPath = null;
              }

              var _proto3 = Impl.prototype;

              _proto3.moveTo = function moveTo(x, y) {
                if (this.updatePathOffset) {
                  this.pathOffset = this.pathLength;
                  this.updatePathOffset = false;
                }

                this._addPath();

                this.addPoint(x, y, PointFlags.PT_CORNER);
                this._commandX = x;
                this._commandY = y;
              };

              _proto3.lineTo = function lineTo(x, y) {
                this.addPoint(x, y, PointFlags.PT_CORNER);
                this._commandX = x;
                this._commandY = y;
              };

              _proto3.bezierCurveTo = function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
                var path = this._curPath;
                var last = path.points[path.points.length - 1];

                if (!last) {
                  return;
                }

                if (last.x === c1x && last.y === c1y && c2x === x && c2y === y) {
                  this.lineTo(x, y);
                  return;
                }

                tesselateBezier(this, last.x, last.y, c1x, c1y, c2x, c2y, x, y, 0, PointFlags.PT_CORNER);
                this._commandX = x;
                this._commandY = y;
              };

              _proto3.quadraticCurveTo = function quadraticCurveTo(cx, cy, x, y) {
                var x0 = this._commandX;
                var y0 = this._commandY;
                this.bezierCurveTo(x0 + 2.0 / 3.0 * (cx - x0), y0 + 2.0 / 3.0 * (cy - y0), x + 2.0 / 3.0 * (cx - x), y + 2.0 / 3.0 * (cy - y), x, y);
              };

              _proto3.arc = function arc$1(cx, cy, r, startAngle, endAngle, counterclockwise) {
                arc(this, cx, cy, r, startAngle, endAngle, counterclockwise);
              };

              _proto3.ellipse = function ellipse$1(cx, cy, rx, ry) {
                ellipse(this, cx, cy, rx, ry);

                this._curPath.complex = false;
              };

              _proto3.circle = function circle(cx, cy, r) {
                ellipse(this, cx, cy, r, r);

                this._curPath.complex = false;
              };

              _proto3.rect = function rect(x, y, w, h) {
                this.moveTo(x, y);
                this.lineTo(x + w, y);
                this.lineTo(x + w, y + h);
                this.lineTo(x, y + h);
                this.close();
                this._curPath.complex = false;
              };

              _proto3.roundRect = function roundRect$1(x, y, w, h, r) {
                roundRect(this, x, y, w, h, r);

                this._curPath.complex = false;
              };

              _proto3.clear = function clear() {
                this.pathLength = 0;
                this.pathOffset = 0;
                this.pointsOffset = 0;
                this.dataOffset = 0;
                this._curPath = null;
                this.paths.length = 0;
                this._points.length = 0;
                var dataList = this._renderDataList;

                for (var i = 0, l = dataList.length; i < l; i++) {
                  var data = dataList[i];

                  if (!data) {
                    continue;
                  }

                  MeshRenderData.remove(data);
                }

                this._renderDataList.length = 0;
              };

              _proto3.close = function close() {
                this._curPath.closed = true;
              };

              _proto3.requestRenderData = function requestRenderData() {
                var renderData = MeshRenderData.add();

                this._renderDataList.push(renderData);

                return renderData;
              };

              _proto3.getRenderDataList = function getRenderDataList() {
                if (this._renderDataList.length === 0) {
                  this.requestRenderData();
                }

                return this._renderDataList;
              };

              _proto3.addPoint = function addPoint(x, y, flags) {
                var path = this._curPath;

                if (!path) {
                  return;
                }

                var points = this._points;
                var pathPoints = path.points;
                var offset = this.pointsOffset++;
                var pt = points[offset];

                if (!pt) {
                  pt = new Point(x, y);
                  points.push(pt);
                } else {
                  pt.x = x;
                  pt.y = y;
                }

                pt.flags = flags;
                pathPoints.push(pt);
              };

              _proto3._addPath = function _addPath() {
                var offset = this.pathLength;
                var path = this.paths[offset];

                if (!path) {
                  path = new Path();
                  this.paths.push(path);
                } else {
                  path.reset();
                }

                this.pathLength++;
                this._curPath = path;
                return path;
              };

              return Impl;
            }();

            var _dec$9, _dec2$4, _dec3$3, _dec4$3, _dec5$3, _dec6$3, _dec7$3, _dec8$3, _dec9$2, _dec10$2, _dec11$1, _dec12$1, _dec13$1, _class$9, _class2$7, _descriptor$6, _descriptor2$4, _descriptor3$3, _descriptor4$3, _descriptor5$2, _descriptor6$1, _class3$3, _temp$7;
            var attributes = vfmtPosColor.concat([new Attribute('a_dist', Format.R32F)]);
            var componentPerVertex = getComponentPerVertex(attributes);
            var stride = getAttributeStride(attributes);
            var Graphics = function (v) { return exports({ Graphics: v, GraphicsComponent: v }), v; }((_dec$9 = ccclass('cc.Graphics'), _dec2$4 = help(), _dec3$3 = executionOrder(110), _dec4$3 = menu$1(), _dec5$3 = tooltip(), _dec6$3 = type$1(LineJoin), _dec7$3 = tooltip(), _dec8$3 = type$1(LineCap), _dec9$2 = tooltip(), _dec10$2 = tooltip(), _dec11$1 = tooltip(), _dec12$1 = tooltip(), _dec13$1 = visible(), _dec$9(_class$9 = _dec2$4(_class$9 = _dec3$3(_class$9 = _dec4$3(_class$9 = (_class2$7 = (_temp$7 = _class3$3 = function (_Renderable2D) {
              _inheritsLoose(Graphics, _Renderable2D);

              function Graphics() {
                var _this;

                _this = _Renderable2D.call(this) || this;
                _this.impl = null;
                _this.model = null;

                _initializerDefineProperty(_this, "_lineWidth", _descriptor$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_strokeColor", _descriptor2$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_lineJoin", _descriptor3$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_lineCap", _descriptor4$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fillColor", _descriptor5$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_miterLimit", _descriptor6$1, _assertThisInitialized(_this));

                _this._isDrawing = false;
                _this._isNeedUploadData = true;
                _this._graphicsUseSubMeshes = [];
                _this._instanceMaterialType = InstanceMaterialType.ADD_COLOR;
                _this.impl = new Impl();
                return _this;
              }

              var _proto = Graphics.prototype;

              _proto.onRestore = function onRestore() {
                if (!this.impl) {
                  this._flushAssembler();
                }
              };

              _proto.onLoad = function onLoad() {
                this.model = director.root.createModel(Model);
                this.model.node = this.model.transform = this.node;

                this._flushAssembler();
              };

              _proto.onEnable = function onEnable() {
                _Renderable2D.prototype.onEnable.call(this);

                this._updateMtlForGraphics();
              };

              _proto.onDisable = function onDisable() {
                _Renderable2D.prototype.onDisable.call(this);
              };

              _proto.onDestroy = function onDestroy() {
                this._sceneGetter = null;

                if (this.model) {
                  director.root.destroyModel(this.model);
                  this.model = null;
                }

                var subMeshLength = this._graphicsUseSubMeshes.length;

                if (subMeshLength > 0) {
                  for (var i = 0; i < subMeshLength; ++i) {
                    this._graphicsUseSubMeshes[i].destroy();
                  }

                  this._graphicsUseSubMeshes.length = 0;
                }

                if (this.impl) {
                  this._isDrawing = false;
                  this.impl.clear();
                  this.impl = null;
                }

                _Renderable2D.prototype.onDestroy.call(this);
              };

              _proto.moveTo = function moveTo(x, y) {
                if (!this.impl) {
                  return;
                }

                this.impl.moveTo(x, y);
              };

              _proto.lineTo = function lineTo(x, y) {
                if (!this.impl) {
                  return;
                }

                this.impl.lineTo(x, y);
              };

              _proto.bezierCurveTo = function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
                if (!this.impl) {
                  return;
                }

                this.impl.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
              };

              _proto.quadraticCurveTo = function quadraticCurveTo(cx, cy, x, y) {
                if (!this.impl) {
                  return;
                }

                this.impl.quadraticCurveTo(cx, cy, x, y);
              };

              _proto.arc = function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
                if (!this.impl) {
                  return;
                }

                this.impl.arc(cx, cy, r, startAngle, endAngle, counterclockwise);
              };

              _proto.ellipse = function ellipse(cx, cy, rx, ry) {
                if (!this.impl) {
                  return;
                }

                this.impl.ellipse(cx, cy, rx, ry);
              };

              _proto.circle = function circle(cx, cy, r) {
                if (!this.impl) {
                  return;
                }

                this.impl.circle(cx, cy, r);
              };

              _proto.rect = function rect(x, y, w, h) {
                if (!this.impl) {
                  return;
                }

                this.impl.rect(x, y, w, h);
              };

              _proto.roundRect = function roundRect(x, y, w, h, r) {
                if (!this.impl) {
                  return;
                }

                this.impl.roundRect(x, y, w, h, r);
              };

              _proto.fillRect = function fillRect(x, y, w, h) {
                this.rect(x, y, w, h);
                this.fill();
              };

              _proto.clear = function clear() {
                if (!this.impl) {
                  return;
                }

                this.impl.clear();
                this._isDrawing = false;

                if (this.model) {
                  for (var i = 0; i < this.model.subModels.length; i++) {
                    var subModel = this.model.subModels[i];
                    subModel.inputAssembler.indexCount = 0;
                  }
                }

                this.markForUpdateRenderData();
              };

              _proto.close = function close() {
                if (!this.impl) {
                  return;
                }

                this.impl.close();
              };

              _proto.stroke = function stroke() {
                if (!this._assembler) {
                  this._flushAssembler();
                }

                this._isDrawing = true;
                this._isNeedUploadData = true;

                this._assembler.stroke(this);
              };

              _proto.fill = function fill() {
                if (!this._assembler) {
                  this._flushAssembler();
                }

                this._isDrawing = true;
                this._isNeedUploadData = true;

                this._assembler.fill(this);
              };

              _proto._updateMtlForGraphics = function _updateMtlForGraphics() {
                var mat;

                if (this._customMaterial) {
                  mat = this.getMaterialInstance(0);
                } else {
                  mat = builtinResMgr.get('ui-graphics-material');
                  this.setMaterial(mat, 0);
                  mat = this.getMaterialInstance(0);
                  mat.recompileShaders({
                    USE_LOCAL: true
                  });
                }
              };

              _proto.activeSubModel = function activeSubModel(idx) {
                if (!this.model) {
                  warnID(4500, this.node.name);
                  return;
                }

                if (this.model.subModels.length <= idx) {
                  var gfxDevice = legacyCC.director.root.device;
                  var vertexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 65535 * stride, stride));
                  var indexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 65535 * Uint16Array.BYTES_PER_ELEMENT * 2, Uint16Array.BYTES_PER_ELEMENT));
                  var renderMesh = new RenderingSubMesh([vertexBuffer], attributes, PrimitiveMode.TRIANGLE_LIST, indexBuffer);
                  renderMesh.subMeshIdx = 0;
                  this.model.initSubModel(idx, renderMesh, this.getMaterialInstance(0));

                  this._graphicsUseSubMeshes.push(renderMesh);
                }
              };

              _proto._uploadData = function _uploadData() {
                var impl = this.impl;

                if (!impl) {
                  return;
                }

                var renderDataList = impl && impl.getRenderDataList();

                if (renderDataList.length <= 0 || !this.model) {
                  return;
                }

                var subModelList = this.model.subModels;

                for (var i = 0; i < renderDataList.length; i++) {
                  var renderData = renderDataList[i];
                  var ia = subModelList[i].inputAssembler;

                  if (renderData.lastFilledVertex === renderData.vertexStart) {
                    continue;
                  }

                  var vb = new Float32Array(renderData.vData.buffer, 0, renderData.vertexStart * componentPerVertex);
                  ia.vertexBuffers[0].update(vb);
                  ia.vertexCount = renderData.vertexStart;
                  var ib = new Uint16Array(renderData.iData.buffer, 0, renderData.indexStart);
                  ia.indexBuffer.update(ib);
                  ia.indexCount = renderData.indexStart;
                  renderData.lastFilledVertex = renderData.vertexStart;
                  renderData.lastFilledIndex = renderData.indexStart;
                }

                this._isNeedUploadData = false;
              };

              _proto._render = function _render(render) {
                if (this._isNeedUploadData) {
                  if (this.impl) {
                    var renderDataList = this.impl.getRenderDataList();
                    var len = this.model.subModels.length;

                    if (renderDataList.length > len) {
                      for (var i = len; i < renderDataList.length; i++) {
                        this.activeSubModel(i);
                      }
                    }
                  }

                  this._uploadData();
                }

                render.commitModel(this, this.model, this.getMaterialInstance(0));
              };

              _proto._flushAssembler = function _flushAssembler() {
                var assembler = Graphics.Assembler.getAssembler(this);

                if (this._assembler !== assembler) {
                  this._assembler = assembler;
                }
              };

              _proto._canRender = function _canRender() {
                if (!_Renderable2D.prototype._canRender.call(this)) {
                  return false;
                }

                return !!this.model && this._isDrawing;
              };

              _createClass(Graphics, [{
                key: "lineWidth",
                get: function get() {
                  return this._lineWidth;
                },
                set: function set(value) {
                  this._lineWidth = value;

                  if (!this.impl) {
                    return;
                  }

                  this.impl.lineWidth = value;
                }
              }, {
                key: "lineJoin",
                get: function get() {
                  return this._lineJoin;
                },
                set: function set(value) {
                  this._lineJoin = value;

                  if (!this.impl) {
                    return;
                  }

                  this.impl.lineJoin = value;
                }
              }, {
                key: "lineCap",
                get: function get() {
                  return this._lineCap;
                },
                set: function set(value) {
                  this._lineCap = value;

                  if (!this.impl) {
                    return;
                  }

                  this.impl.lineCap = value;
                }
              }, {
                key: "strokeColor",
                get: function get() {
                  return this._strokeColor;
                },
                set: function set(value) {
                  if (!this.impl) {
                    return;
                  }

                  this._strokeColor.set(value);

                  this.impl.strokeColor = this._strokeColor;
                }
              }, {
                key: "fillColor",
                get: function get() {
                  return this._fillColor;
                },
                set: function set(value) {
                  if (!this.impl) {
                    return;
                  }

                  this._fillColor.set(value);

                  this.impl.fillColor = this._fillColor;
                }
              }, {
                key: "miterLimit",
                get: function get() {
                  return this._miterLimit;
                },
                set: function set(value) {
                  this._miterLimit = value;
                }
              }, {
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(value) {
                  if (this._color === value) {
                    return;
                  }

                  this._color.set(value);
                }
              }, {
                key: "srcBlendFactor",
                get: function get() {
                  return this._srcBlendFactor;
                },
                set: function set(value) {}
              }, {
                key: "dstBlendFactor",
                get: function get() {
                  return this._dstBlendFactor;
                },
                set: function set(value) {}
              }]);

              return Graphics;
            }(Renderable2D), _class3$3.LineJoin = LineJoin, _class3$3.LineCap = LineCap, _temp$7), (_applyDecoratedDescriptor(_class2$7.prototype, "lineWidth", [editable, _dec5$3], Object.getOwnPropertyDescriptor(_class2$7.prototype, "lineWidth"), _class2$7.prototype), _applyDecoratedDescriptor(_class2$7.prototype, "lineJoin", [_dec6$3, _dec7$3], Object.getOwnPropertyDescriptor(_class2$7.prototype, "lineJoin"), _class2$7.prototype), _applyDecoratedDescriptor(_class2$7.prototype, "lineCap", [_dec8$3, _dec9$2], Object.getOwnPropertyDescriptor(_class2$7.prototype, "lineCap"), _class2$7.prototype), _applyDecoratedDescriptor(_class2$7.prototype, "strokeColor", [_dec10$2], Object.getOwnPropertyDescriptor(_class2$7.prototype, "strokeColor"), _class2$7.prototype), _applyDecoratedDescriptor(_class2$7.prototype, "fillColor", [_dec11$1], Object.getOwnPropertyDescriptor(_class2$7.prototype, "fillColor"), _class2$7.prototype), _applyDecoratedDescriptor(_class2$7.prototype, "miterLimit", [_dec12$1], Object.getOwnPropertyDescriptor(_class2$7.prototype, "miterLimit"), _class2$7.prototype), _applyDecoratedDescriptor(_class2$7.prototype, "color", [override, _dec13$1], Object.getOwnPropertyDescriptor(_class2$7.prototype, "color"), _class2$7.prototype), _descriptor$6 = _applyDecoratedDescriptor(_class2$7.prototype, "_lineWidth", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor2$4 = _applyDecoratedDescriptor(_class2$7.prototype, "_strokeColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.BLACK.clone();
              }
            }), _descriptor3$3 = _applyDecoratedDescriptor(_class2$7.prototype, "_lineJoin", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return LineJoin.MITER;
              }
            }), _descriptor4$3 = _applyDecoratedDescriptor(_class2$7.prototype, "_lineCap", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return LineCap.BUTT;
              }
            }), _descriptor5$2 = _applyDecoratedDescriptor(_class2$7.prototype, "_fillColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            }), _descriptor6$1 = _applyDecoratedDescriptor(_class2$7.prototype, "_miterLimit", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 10;
              }
            })), _class2$7)) || _class$9) || _class$9) || _class$9) || _class$9));
            legacyCC.Graphics = Graphics;

            var _dec$a, _dec2$5, _dec3$4, _dec4$4, _dec5$4, _dec6$4, _dec7$4, _dec8$4, _dec9$3, _dec10$3, _dec11$2, _dec12$2, _dec13$2, _dec14$1, _dec15$1, _class$a, _class2$8, _descriptor$7, _descriptor2$5, _descriptor3$4, _descriptor4$4, _descriptor5$3, _class3$4, _temp$8;

            var _worldMatrix$2 = new Mat4();

            var _vec2_temp = new Vec2();

            var _mat4_temp$1 = new Mat4();

            var _circlePoints = [];

            function _calculateCircle(center, radius, segments) {
              _circlePoints.length = 0;
              var anglePerStep = Math.PI * 2 / segments;

              for (var step = 0; step < segments; ++step) {
                _circlePoints.push(new Vec3(radius.x * Math.cos(anglePerStep * step) + center.x, radius.y * Math.sin(anglePerStep * step) + center.y, 0));
              }

              return _circlePoints;
            }

            var MaskType;

            (function (MaskType) {
              MaskType[MaskType["RECT"] = 0] = "RECT";
              MaskType[MaskType["ELLIPSE"] = 1] = "ELLIPSE";
              MaskType[MaskType["GRAPHICS_STENCIL"] = 2] = "GRAPHICS_STENCIL";
              MaskType[MaskType["IMAGE_STENCIL"] = 3] = "IMAGE_STENCIL";
            })(MaskType || (MaskType = {}));

            ccenum(MaskType);
            var SEGMENTS_MIN = 3;
            var SEGMENTS_MAX = 10000;
            var Mask = function (v) { return exports({ Mask: v, MaskComponent: v }), v; }((_dec$a = ccclass('cc.Mask'), _dec2$5 = help(), _dec3$4 = executionOrder(110), _dec4$4 = menu$1(), _dec5$4 = type$1(MaskType), _dec6$4 = tooltip(), _dec7$4 = displayOrder(), _dec8$4 = tooltip(), _dec9$3 = visible(), _dec10$3 = type$1(SpriteFrame), _dec11$2 = visible(), _dec12$2 = visible(), _dec13$2 = range(), _dec14$1 = visible(), _dec15$1 = visible(), _dec$a(_class$a = _dec2$5(_class$a = _dec3$4(_class$a = _dec4$4(_class$a = (_class2$8 = (_temp$8 = _class3$4 = function (_Renderable2D) {
              _inheritsLoose(Mask, _Renderable2D);

              function Mask() {
                var _this;

                _this = _Renderable2D.call(this) || this;
                _this._clearStencilMtl = null;
                _this._clearModel = null;

                _initializerDefineProperty(_this, "_type", _descriptor$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_inverted", _descriptor2$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_segments", _descriptor3$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_spriteFrame", _descriptor4$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_alphaThreshold", _descriptor5$3, _assertThisInitialized(_this));

                _this._graphics = null;
                _this._clearModelMesh = null;
                _this._instanceMaterialType = InstanceMaterialType.ADD_COLOR;
                return _this;
              }

              var _proto = Mask.prototype;

              _proto.onLoad = function onLoad() {
                this._createClearModel();

                this._createGraphics();

                if (this._graphics) {
                  this._graphics.onLoad();
                }
              };

              _proto.onEnable = function onEnable() {
                _Renderable2D.prototype.onEnable.call(this);

                this._updateGraphics();

                this._enableGraphics();
              };

              _proto.onRestore = function onRestore() {
                this._createGraphics();

                _Renderable2D.prototype.updateMaterial.call(this);

                this._updateGraphics();

                this._renderFlag = this._canRender();
              };

              _proto.onDisable = function onDisable() {
                _Renderable2D.prototype.onDisable.call(this);

                this._disableGraphics();
              };

              _proto.onDestroy = function onDestroy() {
                if (this._clearModel && this._clearModelMesh) {
                  director.root.destroyModel(this._clearModel);

                  this._clearModelMesh.destroy();
                }

                if (this._clearStencilMtl) {
                  this._clearStencilMtl.destroy();
                }

                this._removeGraphics();

                _Renderable2D.prototype.onDestroy.call(this);
              };

              _proto.isHit = function isHit(worldPt) {
                var uiTrans = this.node._uiProps.uiTransformComp;
                var size = uiTrans.contentSize;
                var w = size.width;
                var h = size.height;
                var testPt = _vec2_temp;
                this.node.getWorldMatrix(_worldMatrix$2);
                Mat4.invert(_mat4_temp$1, _worldMatrix$2);
                Vec2.transformMat4(testPt, worldPt, _mat4_temp$1);
                var ap = uiTrans.anchorPoint;
                testPt.x += ap.x * w;
                testPt.y += ap.y * h;
                var result = false;

                if (this.type === MaskType.RECT || this.type === MaskType.GRAPHICS_STENCIL || this.type === MaskType.IMAGE_STENCIL) {
                  result = testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h;
                } else if (this.type === MaskType.ELLIPSE) {
                  var rx = w / 2;
                  var ry = h / 2;
                  var px = testPt.x - 0.5 * w;
                  var py = testPt.y - 0.5 * h;
                  result = px * px / (rx * rx) + py * py / (ry * ry) < 1;
                }

                if (this._inverted) {
                  result = !result;
                }

                return result;
              };

              _proto._render = function _render(render) {
                render.commitComp(this, this.renderData, null, this._assembler, null);
              };

              _proto._postRender = function _postRender(render) {
                if (!this._postAssembler) {
                  return;
                }

                render.commitComp(this, null, null, this._postAssembler, null);
              };

              _proto._nodeStateChange = function _nodeStateChange(type) {
                _Renderable2D.prototype._nodeStateChange.call(this, type);

                this._updateGraphics();
              };

              _proto._canRender = function _canRender() {
                if (!_Renderable2D.prototype._canRender.call(this)) {
                  return false;
                }

                return this._graphics !== null && (this._type !== MaskType.IMAGE_STENCIL || this._spriteFrame !== null);
              };

              _proto._flushAssembler = function _flushAssembler() {
                var assembler = Mask.Assembler.getAssembler(this);
                var posAssembler = Mask.PostAssembler.getAssembler(this);

                if (this._assembler !== assembler) {
                  this.destroyRenderData();
                  this._assembler = assembler;
                }

                if (this._postAssembler !== posAssembler) {
                  this._postAssembler = posAssembler;
                }

                this._useRenderData();
              };

              _proto._createGraphics = function _createGraphics() {
                if (!this._graphics) {
                  var graphics = this._graphics = new Graphics();
                  graphics._objFlags |= CCObject.Flags.IsOnLoadCalled;
                  graphics.node = this.node;
                  graphics.node.getWorldMatrix();
                  graphics.lineWidth = 0;
                  var color = Color$1.WHITE.clone();
                  color.a = 0;
                  graphics.fillColor = color;
                }

                this._updateMaterial();
              };

              _proto._updateGraphics = function _updateGraphics() {
                if (!this._graphics || this._type !== MaskType.RECT && this._type !== MaskType.ELLIPSE) {
                  return;
                }

                var uiTrans = this.node._uiProps.uiTransformComp;
                var graphics = this._graphics;
                graphics.clear();
                var size = uiTrans.contentSize;
                var width = size.width;
                var height = size.height;
                var ap = uiTrans.anchorPoint;
                var x = -width * ap.x;
                var y = -height * ap.y;

                if (this._type === MaskType.RECT) {
                  graphics.rect(x, y, width, height);
                } else if (this._type === MaskType.ELLIPSE) {
                  var center = new Vec3(x + width / 2, y + height / 2, 0);
                  var radius = new Vec3(width / 2, height / 2, 0);

                  var points = _calculateCircle(center, radius, this._segments);

                  for (var i = 0; i < points.length; ++i) {
                    var point = points[i];

                    if (i === 0) {
                      graphics.moveTo(point.x, point.y);
                    } else {
                      graphics.lineTo(point.x, point.y);
                    }
                  }

                  graphics.close();
                }

                graphics.fill();
              };

              _proto._createClearModel = function _createClearModel() {
                if (!this._clearModel) {
                  var mtl = builtinResMgr.get('default-clear-stencil');
                  this._clearStencilMtl = new MaterialInstance({
                    parent: mtl,
                    owner: this,
                    subModelIdx: 0
                  });
                  this._clearModel = director.root.createModel(Model);
                  this._clearModel.node = this._clearModel.transform = this.node;
                  var stride = getAttributeStride(vfmt);
                  var gfxDevice = legacyCC.director.root.device;
                  var vertexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 4 * stride, stride));
                  var vb = new Float32Array([-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0]);
                  vertexBuffer.update(vb);
                  var indexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 6 * Uint16Array.BYTES_PER_ELEMENT, Uint16Array.BYTES_PER_ELEMENT));
                  var ib = new Uint16Array([0, 1, 2, 2, 1, 3]);
                  indexBuffer.update(ib);
                  this._clearModelMesh = new RenderingSubMesh([vertexBuffer], vfmt, PrimitiveMode.TRIANGLE_LIST, indexBuffer);
                  this._clearModelMesh.subMeshIdx = 0;

                  this._clearModel.initSubModel(0, this._clearModelMesh, this._clearStencilMtl);
                }
              };

              _proto._updateMaterial = function _updateMaterial() {
                if (this._graphics) {
                  var target = this._graphics;
                  target.stencilStage = Stage.DISABLED;
                  var mat;

                  if (this._type === MaskType.IMAGE_STENCIL) {
                    mat = builtinResMgr.get('ui-alpha-test-material');
                    target.setMaterial(mat, 0);
                    mat = target.getMaterialInstance(0);
                    mat.setProperty('alphaThreshold', this._alphaThreshold);
                  } else {
                    mat = builtinResMgr.get('ui-graphics-material');
                    target.setMaterial(mat, 0);
                    target.getMaterialInstance(0);
                  }
                }
              };

              _proto._enableGraphics = function _enableGraphics() {
                if (this._graphics) {
                  this._graphics._renderFlag = this._graphics._canRender();
                }
              };

              _proto._disableGraphics = function _disableGraphics() {
                if (this._graphics) {
                  this._graphics.onDisable();
                }
              };

              _proto._removeGraphics = function _removeGraphics() {
                if (this._graphics) {
                  this._graphics.destroy();

                  this._graphics._destroyImmediate();

                  this._graphics = null;
                }
              };

              _proto._useRenderData = function _useRenderData() {
                if (this._type === MaskType.IMAGE_STENCIL && !this._renderData) {
                  if (this._assembler && this._assembler.createData) {
                    this._renderData = this._assembler.createData(this);
                    this.markForUpdateRenderData();
                  }
                }
              };

              _createClass(Mask, [{
                key: "type",
                get: function get() {
                  return this._type;
                },
                set: function set(value) {
                  if (this._type === value) {
                    return;
                  }

                  this._type = value;
                  this.markForUpdateRenderData(false);

                  this._updateMaterial();

                  if (this._type !== MaskType.IMAGE_STENCIL) {
                    this._spriteFrame = null;

                    this._updateGraphics();

                    if (this._renderData) {
                      this.destroyRenderData();
                      this._renderData = null;
                    }
                  } else {
                    this._useRenderData();

                    if (this._graphics) {
                      this._graphics.clear();
                    }
                  }
                }
              }, {
                key: "inverted",
                get: function get() {
                  return this._inverted;
                },
                set: function set(value) {
                  this._inverted = value;
                  this.stencilStage = Stage.DISABLED;

                  if (this._graphics) {
                    this._graphics.stencilStage = Stage.DISABLED;
                  }
                }
              }, {
                key: "segments",
                get: function get() {
                  return this._segments;
                },
                set: function set(value) {
                  if (this._segments === value) {
                    return;
                  }

                  this._segments = clamp$1(value, SEGMENTS_MIN, SEGMENTS_MAX);

                  this._updateGraphics();
                }
              }, {
                key: "spriteFrame",
                get: function get() {
                  return this._spriteFrame;
                },
                set: function set(value) {
                  if (this._spriteFrame === value) {
                    return;
                  }

                  var lastSp = this._spriteFrame;
                  this._spriteFrame = value;

                  if (this._type === MaskType.IMAGE_STENCIL) {
                    if (!lastSp && value) {
                      this.markForUpdateRenderData();
                    }
                  }
                }
              }, {
                key: "alphaThreshold",
                get: function get() {
                  return this._alphaThreshold;
                },
                set: function set(value) {
                  if (this._alphaThreshold === value) {
                    return;
                  }

                  this._alphaThreshold = value;

                  if (this.type === MaskType.IMAGE_STENCIL && this._graphics) {
                    var mat = this._graphics.getMaterialInstance(0);

                    mat.setProperty('alphaThreshold', this._alphaThreshold);
                  }
                }
              }, {
                key: "graphics",
                get: function get() {
                  return this._graphics;
                }
              }, {
                key: "dstBlendFactor",
                get: function get() {
                  return this._dstBlendFactor;
                },
                set: function set(value) {
                  if (this._dstBlendFactor === value) {
                    return;
                  }

                  this._dstBlendFactor = value;

                  this._updateBlendFunc();
                }
              }, {
                key: "srcBlendFactor",
                get: function get() {
                  return this._srcBlendFactor;
                },
                set: function set(value) {
                  if (this._srcBlendFactor === value) {
                    return;
                  }

                  this._srcBlendFactor = value;

                  this._updateBlendFunc();
                }
              }, {
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(value) {
                  if (this._color === value) {
                    return;
                  }

                  this._color.set(value);

                  this.markForUpdateRenderData();
                }
              }, {
                key: "customMaterial",
                get: function get() {
                  return this._customMaterial;
                },
                set: function set(val) {}
              }]);

              return Mask;
            }(Renderable2D), _class3$4.Type = MaskType, _temp$8), (_applyDecoratedDescriptor(_class2$8.prototype, "type", [_dec5$4, _dec6$4], Object.getOwnPropertyDescriptor(_class2$8.prototype, "type"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "inverted", [_dec7$4, _dec8$4], Object.getOwnPropertyDescriptor(_class2$8.prototype, "inverted"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "segments", [_dec9$3], Object.getOwnPropertyDescriptor(_class2$8.prototype, "segments"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "spriteFrame", [_dec10$3, _dec11$2], Object.getOwnPropertyDescriptor(_class2$8.prototype, "spriteFrame"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "alphaThreshold", [_dec12$2, _dec13$2, slide], Object.getOwnPropertyDescriptor(_class2$8.prototype, "alphaThreshold"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "color", [override, _dec14$1], Object.getOwnPropertyDescriptor(_class2$8.prototype, "color"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "customMaterial", [override, _dec15$1], Object.getOwnPropertyDescriptor(_class2$8.prototype, "customMaterial"), _class2$8.prototype), _descriptor$7 = _applyDecoratedDescriptor(_class2$8.prototype, "_type", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return MaskType.RECT;
              }
            }), _descriptor2$5 = _applyDecoratedDescriptor(_class2$8.prototype, "_inverted", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor3$4 = _applyDecoratedDescriptor(_class2$8.prototype, "_segments", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 64;
              }
            }), _descriptor4$4 = _applyDecoratedDescriptor(_class2$8.prototype, "_spriteFrame", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor5$3 = _applyDecoratedDescriptor(_class2$8.prototype, "_alphaThreshold", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.1;
              }
            })), _class2$8)) || _class$a) || _class$a) || _class$a) || _class$a));
            NodeEventProcessor._maskComp = Mask;
            legacyCC.Mask = Mask;

            var eventRegx = /^(click)(\s)*=|(param)(\s)*=/;
            var imageAttrReg = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            var HtmlTextParser = exports('HtmlTextParser', function () {
              function HtmlTextParser() {
                this._specialSymbolArray = [];
                this._stack = [];
                this._resultObjectArray = [];

                this._specialSymbolArray.push([/&lt;/g, '<']);

                this._specialSymbolArray.push([/&gt;/g, '>']);

                this._specialSymbolArray.push([/&amp;/g, '&']);

                this._specialSymbolArray.push([/&quot;/g, '"']);

                this._specialSymbolArray.push([/&apos;/g, '\'']);
              }

              var _proto = HtmlTextParser.prototype;

              _proto.parse = function parse(htmlString) {
                this._resultObjectArray.length = 0;
                this._stack.length = 0;
                var startIndex = 0;
                var length = htmlString.length;

                while (startIndex < length) {
                  var tagEndIndex = htmlString.indexOf('>', startIndex);
                  var tagBeginIndex = -1;

                  if (tagEndIndex >= 0) {
                    tagBeginIndex = htmlString.lastIndexOf('<', tagEndIndex);
                    var noTagBegin = tagBeginIndex < startIndex - 1;

                    if (noTagBegin) {
                      tagBeginIndex = htmlString.indexOf('<', tagEndIndex + 1);
                      tagEndIndex = htmlString.indexOf('>', tagBeginIndex + 1);
                    }
                  }

                  if (tagBeginIndex < 0) {
                    this._stack.pop();

                    this._processResult(htmlString.substring(startIndex));

                    startIndex = length;
                  } else {
                    var newStr = htmlString.substring(startIndex, tagBeginIndex);
                    var tagStr = htmlString.substring(tagBeginIndex + 1, tagEndIndex);
                    if (tagStr === '') newStr = htmlString.substring(startIndex, tagEndIndex + 1);

                    this._processResult(newStr);

                    if (tagEndIndex === -1) {
                      tagEndIndex = tagBeginIndex;
                    } else if (htmlString.charAt(tagBeginIndex + 1) === '/') {
                      this._stack.pop();
                    } else {
                      this._addToStack(tagStr);
                    }

                    startIndex = tagEndIndex + 1;
                  }
                }

                return this._resultObjectArray;
              };

              _proto._attributeToObject = function _attributeToObject(attribute) {
                attribute = attribute.trim();
                var obj = {};
                var header = /^(color|size)(\s)*=/.exec(attribute);
                var tagName = '';
                var nextSpace = 0;
                var eventHanlderString = '';

                if (header) {
                  tagName = header[0];
                  attribute = attribute.substring(tagName.length).trim();

                  if (attribute === '') {
                    return obj;
                  }

                  nextSpace = attribute.indexOf(' ');

                  switch (tagName[0]) {
                    case 'c':
                      if (nextSpace > -1) {
                        obj.color = attribute.substring(0, nextSpace).trim();
                      } else {
                        obj.color = attribute;
                      }

                      break;

                    case 's':
                      obj.size = parseInt(attribute);
                      break;
                  }

                  if (nextSpace > -1) {
                    eventHanlderString = attribute.substring(nextSpace + 1).trim();
                    obj.event = this._processEventHandler(eventHanlderString);
                  }

                  return obj;
                }

                header = /^(br(\s)*\/)/.exec(attribute);

                if (header && header[0].length > 0) {
                  tagName = header[0].trim();

                  if (tagName.startsWith('br') && tagName[tagName.length - 1] === '/') {
                    obj.isNewLine = true;

                    this._resultObjectArray.push({
                      text: '',
                      style: {
                        isNewLine: true
                      }
                    });

                    return obj;
                  }
                }

                header = /^(img(\s)*src(\s)*=[^>]+\/)/.exec(attribute);
                var remainingArgument = '';

                if (header && header[0].length > 0) {
                  tagName = header[0].trim();

                  if (tagName.startsWith('img') && tagName[tagName.length - 1] === '/') {
                    header = imageAttrReg.exec(attribute);
                    var tagValue;
                    var isValidImageTag = false;

                    while (header) {
                      attribute = attribute.substring(attribute.indexOf(header[0]));
                      tagName = attribute.substr(0, header[0].length);
                      remainingArgument = attribute.substring(tagName.length).trim();
                      nextSpace = remainingArgument.indexOf(' ');
                      tagValue = nextSpace > -1 ? remainingArgument.substr(0, nextSpace) : remainingArgument;
                      tagName = tagName.replace(/[^a-zA-Z]/g, '').trim();
                      tagName = tagName.toLowerCase();
                      attribute = remainingArgument.substring(nextSpace).trim();
                      if (tagValue.endsWith('/')) tagValue = tagValue.slice(0, -1);

                      if (tagName === 'src') {
                        switch (tagValue.charCodeAt(0)) {
                          case 34:
                          case 39:
                            isValidImageTag = true;
                            tagValue = tagValue.slice(1, -1);
                            break;
                        }

                        obj.isImage = true;
                        obj.src = tagValue;
                      } else if (tagName === 'height') {
                        obj.imageHeight = parseInt(tagValue);
                      } else if (tagName === 'width') {
                        obj.imageWidth = parseInt(tagValue);
                      } else if (tagName === 'align') {
                        switch (tagValue.charCodeAt(0)) {
                          case 34:
                          case 39:
                            tagValue = tagValue.slice(1, -1);
                            break;
                        }

                        obj.imageAlign = tagValue.toLowerCase();
                      } else if (tagName === 'offset') {
                        obj.imageOffset = tagValue;
                      } else if (tagName === 'click') {
                        obj.event = this._processEventHandler(tagName + "=" + tagValue);
                      }

                      if (obj.event && tagName === 'param') {
                        obj.event[tagName] = tagValue.replace(/^"|"$/g, '');
                      }

                      header = imageAttrReg.exec(attribute);
                    }

                    if (isValidImageTag && obj.isImage) {
                      this._resultObjectArray.push({
                        text: '',
                        style: obj
                      });
                    }

                    return {};
                  }
                }

                header = /^(outline(\s)*[^>]*)/.exec(attribute);

                if (header) {
                  attribute = header[0].substring('outline'.length).trim();
                  var defaultOutlineObject = {
                    color: '#ffffff',
                    width: 1
                  };

                  if (attribute) {
                    var outlineAttrReg = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
                    header = outlineAttrReg.exec(attribute);

                    var _tagValue;

                    while (header) {
                      attribute = attribute.substring(attribute.indexOf(header[0]));
                      tagName = attribute.substr(0, header[0].length);
                      remainingArgument = attribute.substring(tagName.length).trim();
                      nextSpace = remainingArgument.indexOf(' ');

                      if (nextSpace > -1) {
                        _tagValue = remainingArgument.substr(0, nextSpace);
                      } else {
                        _tagValue = remainingArgument;
                      }

                      tagName = tagName.replace(/[^a-zA-Z]/g, '').trim();
                      tagName = tagName.toLowerCase();
                      attribute = remainingArgument.substring(nextSpace).trim();

                      if (tagName === 'click') {
                        obj.event = this._processEventHandler(tagName + "=" + _tagValue);
                      } else if (tagName === 'color') {
                        defaultOutlineObject.color = _tagValue;
                      } else if (tagName === 'width') {
                        defaultOutlineObject.width = parseInt(_tagValue);
                      }

                      if (obj.event && tagName === 'param') {
                        obj.event[tagName] = _tagValue.replace(/^"|"$/g, '');
                      }

                      header = outlineAttrReg.exec(attribute);
                    }
                  }

                  obj.outline = defaultOutlineObject;
                }

                header = /^(on|u|b|i)(\s)*/.exec(attribute);

                if (header && header[0].length > 0) {
                  tagName = header[0];
                  attribute = attribute.substring(tagName.length).trim();

                  switch (tagName[0]) {
                    case 'u':
                      obj.underline = true;
                      break;

                    case 'i':
                      obj.italic = true;
                      break;

                    case 'b':
                      obj.bold = true;
                      break;
                  }

                  if (attribute === '') {
                    return obj;
                  }

                  obj.event = this._processEventHandler(attribute);
                }

                return obj;
              };

              _proto._processEventHandler = function _processEventHandler(eventString) {
                var obj = {};
                var index = 0;
                var isValidTag = false;
                var eventNames = eventRegx.exec(eventString);

                while (eventNames) {
                  var eventName = eventNames[0];
                  var eventValue = '';
                  isValidTag = false;
                  eventString = eventString.substring(eventName.length).trim();

                  if (eventString.charAt(0) === '"') {
                    index = eventString.indexOf('"', 1);

                    if (index > -1) {
                      eventValue = eventString.substring(1, index).trim();
                      isValidTag = true;
                    }

                    index++;
                  } else if (eventString.charAt(0) === '\'') {
                    index = eventString.indexOf('\'', 1);

                    if (index > -1) {
                      eventValue = eventString.substring(1, index).trim();
                      isValidTag = true;
                    }

                    index++;
                  } else {
                    var match = /(\S)+/.exec(eventString);

                    if (match) {
                      eventValue = match[0];
                    } else {
                      eventValue = '';
                    }

                    index = eventValue.length;
                  }

                  if (isValidTag) {
                    eventName = eventName.substring(0, eventName.length - 1).trim();
                    obj[eventName] = eventValue;
                  }

                  eventString = eventString.substring(index).trim();
                  eventNames = eventRegx.exec(eventString);
                }

                return obj;
              };

              _proto._addToStack = function _addToStack(attribute) {
                var obj = this._attributeToObject(attribute);

                if (this._stack.length === 0) {
                  this._stack.push(obj);
                } else {
                  if (obj.isNewLine || obj.isImage) {
                    return;
                  }

                  var previousTagObj = this._stack[this._stack.length - 1];

                  for (var key in previousTagObj) {
                    if (!obj[key]) {
                      obj[key] = previousTagObj[key];
                    }
                  }

                  this._stack.push(obj);
                }
              };

              _proto._processResult = function _processResult(value) {
                if (value.length === 0) {
                  return;
                }

                value = this._escapeSpecialSymbol(value);

                if (this._stack.length > 0) {
                  this._resultObjectArray.push({
                    text: value,
                    style: this._stack[this._stack.length - 1]
                  });
                } else {
                  this._resultObjectArray.push({
                    text: value
                  });
                }
              };

              _proto._escapeSpecialSymbol = function _escapeSpecialSymbol(str) {
                for (var _iterator = _createForOfIteratorHelperLoose(this._specialSymbolArray), _step; !(_step = _iterator()).done;) {
                  var symbolArr = _step.value;
                  var key = symbolArr[0];
                  var value = symbolArr[1];
                  str = str.replace(key, value);
                }

                return str;
              };

              return HtmlTextParser;
            }());

            var _dec$b, _dec2$6, _dec3$5, _dec4$5, _dec5$5, _dec6$5, _dec7$5, _class$b, _class2$9, _descriptor$8, _descriptor2$6, _temp$9;
            var LabelOutline = function (v) { return exports({ LabelOutline: v, LabelOutlineComponent: v }), v; }((_dec$b = ccclass('cc.LabelOutline'), _dec2$6 = help(), _dec3$5 = executionOrder(110), _dec4$5 = menu$1(), _dec5$5 = requireComponent(Label), _dec6$5 = tooltip(), _dec7$5 = tooltip(), _dec$b(_class$b = _dec2$6(_class$b = _dec3$5(_class$b = _dec4$5(_class$b = _dec5$5(_class$b = executeInEditMode(_class$b = (_class2$9 = (_temp$9 = function (_Component) {
              _inheritsLoose(LabelOutline, _Component);

              function LabelOutline() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_color", _descriptor$8, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_width", _descriptor2$6, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = LabelOutline.prototype;

              _proto.onEnable = function onEnable() {
                this._updateRenderData();
              };

              _proto.onDisable = function onDisable() {
                this._updateRenderData();
              };

              _proto._updateRenderData = function _updateRenderData() {
                var label = this.node.getComponent(Label);

                if (label) {
                  label.updateRenderData(true);
                }
              };

              _createClass(LabelOutline, [{
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(value) {
                  if (this._color === value) {
                    return;
                  }

                  this._color.set(value);

                  this._updateRenderData();
                }
              }, {
                key: "width",
                get: function get() {
                  return this._width;
                },
                set: function set(value) {
                  if (this._width === value) {
                    return;
                  }

                  this._width = value;

                  this._updateRenderData();
                }
              }]);

              return LabelOutline;
            }(Component), _temp$9), (_descriptor$8 = _applyDecoratedDescriptor(_class2$9.prototype, "_color", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(0, 0, 0, 255);
              }
            }), _descriptor2$6 = _applyDecoratedDescriptor(_class2$9.prototype, "_width", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 2;
              }
            }), _applyDecoratedDescriptor(_class2$9.prototype, "color", [_dec6$5], Object.getOwnPropertyDescriptor(_class2$9.prototype, "color"), _class2$9.prototype), _applyDecoratedDescriptor(_class2$9.prototype, "width", [_dec7$5], Object.getOwnPropertyDescriptor(_class2$9.prototype, "width"), _class2$9.prototype)), _class2$9)) || _class$b) || _class$b) || _class$b) || _class$b) || _class$b) || _class$b));
            legacyCC.LabelOutline = LabelOutline;

            var _dec$c, _dec2$7, _dec3$6, _dec4$6, _dec5$6, _dec6$6, _dec7$6, _dec8$5, _dec9$4, _dec10$4, _dec11$3, _dec12$3, _dec13$3, _dec14$2, _dec15$2, _dec16$1, _dec17$1, _dec18$1, _dec19$1, _dec20$1, _dec21$1, _dec22$1, _dec23$1, _dec24$1, _dec25$1, _dec26$1, _dec27$1, _dec28$1, _dec29$1, _dec30$1, _dec31$1, _dec32$1, _class$c, _class2$a, _descriptor$9, _descriptor2$7, _descriptor3$5, _descriptor4$5, _descriptor5$4, _descriptor6$2, _descriptor7$1, _descriptor8$1, _descriptor9$1, _descriptor10$1, _class3$5, _temp$a;
            var SpriteType;

            (function (SpriteType) {
              SpriteType[SpriteType["SIMPLE"] = 0] = "SIMPLE";
              SpriteType[SpriteType["SLICED"] = 1] = "SLICED";
              SpriteType[SpriteType["TILED"] = 2] = "TILED";
              SpriteType[SpriteType["FILLED"] = 3] = "FILLED";
            })(SpriteType || (SpriteType = {}));

            ccenum(SpriteType);
            var FillType;

            (function (FillType) {
              FillType[FillType["HORIZONTAL"] = 0] = "HORIZONTAL";
              FillType[FillType["VERTICAL"] = 1] = "VERTICAL";
              FillType[FillType["RADIAL"] = 2] = "RADIAL";
            })(FillType || (FillType = {}));

            ccenum(FillType);
            var SizeMode;

            (function (SizeMode) {
              SizeMode[SizeMode["CUSTOM"] = 0] = "CUSTOM";
              SizeMode[SizeMode["TRIMMED"] = 1] = "TRIMMED";
              SizeMode[SizeMode["RAW"] = 2] = "RAW";
            })(SizeMode || (SizeMode = {}));

            ccenum(SizeMode);
            var EventType;

            (function (EventType) {
              EventType["SPRITE_FRAME_CHANGED"] = "spriteframe-changed";
            })(EventType || (EventType = {}));

            var Sprite = function (v) { return exports({ Sprite: v, SpriteComponent: v }), v; }((_dec$c = ccclass('cc.Sprite'), _dec2$7 = help(), _dec3$6 = executionOrder(110), _dec4$6 = menu$1(), _dec5$6 = type$1(SpriteAtlas), _dec6$6 = displayOrder(), _dec7$6 = tooltip(), _dec8$5 = type$1(SpriteFrame), _dec9$4 = displayOrder(), _dec10$4 = tooltip(), _dec11$3 = type$1(SpriteType), _dec12$3 = displayOrder(), _dec13$3 = tooltip(), _dec14$2 = type$1(FillType), _dec15$2 = displayOrder(), _dec16$1 = tooltip(), _dec17$1 = displayOrder(), _dec18$1 = tooltip(), _dec19$1 = range(), _dec20$1 = displayOrder(), _dec21$1 = tooltip(), _dec22$1 = range(), _dec23$1 = displayOrder(), _dec24$1 = tooltip(), _dec25$1 = visible(), _dec26$1 = displayOrder(), _dec27$1 = tooltip(), _dec28$1 = displayOrder(), _dec29$1 = tooltip(), _dec30$1 = type$1(SizeMode), _dec31$1 = displayOrder(), _dec32$1 = tooltip(), _dec$c(_class$c = _dec2$7(_class$c = _dec3$6(_class$c = _dec4$6(_class$c = (_class2$a = (_temp$a = _class3$5 = function (_Renderable2D) {
              _inheritsLoose(Sprite, _Renderable2D);

              function Sprite() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Renderable2D.call.apply(_Renderable2D, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_spriteFrame", _descriptor$9, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_type", _descriptor2$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fillType", _descriptor3$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_sizeMode", _descriptor4$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fillCenter", _descriptor5$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fillStart", _descriptor6$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fillRange", _descriptor7$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isTrimmedMode", _descriptor8$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_useGrayscale", _descriptor9$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_atlas", _descriptor10$1, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = Sprite.prototype;

              _proto.__preload = function __preload() {
                this.changeMaterialForDefine();

                _Renderable2D.prototype.__preload.call(this);
              };

              _proto.onEnable = function onEnable() {
                _Renderable2D.prototype.onEnable.call(this);

                this._activateMaterial();

                var spriteFrame = this._spriteFrame;

                if (spriteFrame) {
                  this._updateUVs();

                  if (this._type === SpriteType.SLICED) {
                    spriteFrame.on(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
                  }
                }
              };

              _proto.onDisable = function onDisable() {
                if (this._spriteFrame && this._type === SpriteType.SLICED) {
                  this._spriteFrame.off(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
                }
              };

              _proto.onDestroy = function onDestroy() {

                _Renderable2D.prototype.onDestroy.call(this);
              };

              _proto.changeSpriteFrameFromAtlas = function changeSpriteFrameFromAtlas(name) {
                if (!this._atlas) {
                  console.warn('SpriteAtlas is null.');
                  return;
                }

                var sprite = this._atlas.getSpriteFrame(name);

                this.spriteFrame = sprite;
              };

              _proto.changeMaterialForDefine = function changeMaterialForDefine() {
                var texture;
                var lastInstanceMaterialType = this._instanceMaterialType;

                if (this._spriteFrame) {
                  texture = this._spriteFrame.texture;
                }

                var value = false;

                if (texture instanceof TextureBase) {
                  var format = texture.getPixelFormat();
                  value = format === PixelFormat.RGBA_ETC1 || format === PixelFormat.RGB_A_PVRTC_4BPPV1 || format === PixelFormat.RGB_A_PVRTC_2BPPV1;
                }

                if (value && this.grayscale) {
                  this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED_AND_GRAY;
                } else if (value) {
                  this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED;
                } else if (this.grayscale) {
                  this._instanceMaterialType = InstanceMaterialType.GRAYSCALE;
                } else {
                  this._instanceMaterialType = InstanceMaterialType.ADD_COLOR_AND_TEXTURE;
                }

                if (lastInstanceMaterialType !== this._instanceMaterialType) {
                  this.updateMaterial();
                }
              };

              _proto._updateBuiltinMaterial = function _updateBuiltinMaterial() {
                var mat = _Renderable2D.prototype._updateBuiltinMaterial.call(this);

                if (this.spriteFrame && this.spriteFrame.texture instanceof RenderTexture) {
                  var defines = _extends({
                    SAMPLE_FROM_RT: true
                  }, mat.passes[0].defines);

                  var renderMat = new Material();
                  renderMat.initialize({
                    effectAsset: mat.effectAsset,
                    defines: defines
                  });
                  mat = renderMat;
                }

                return mat;
              };

              _proto._render = function _render(render) {
                render.commitComp(this, this.renderData, this._spriteFrame, this._assembler, null);
              };

              _proto._canRender = function _canRender() {
                if (!_Renderable2D.prototype._canRender.call(this)) {
                  return false;
                }

                var spriteFrame = this._spriteFrame;

                if (!spriteFrame || !spriteFrame.texture) {
                  return false;
                }

                return true;
              };

              _proto._flushAssembler = function _flushAssembler() {
                var assembler = Sprite.Assembler.getAssembler(this);

                if (this._assembler !== assembler) {
                  this.destroyRenderData();
                  this._assembler = assembler;
                }

                if (!this._renderData) {
                  if (this._assembler && this._assembler.createData) {
                    this._renderData = this._assembler.createData(this);
                    this._renderData.material = this.getRenderMaterial(0);
                    this.markForUpdateRenderData();

                    if (this.spriteFrame) {
                      this._assembler.updateUVs(this);
                    }

                    this._updateColor();
                  }
                }

                if (this._spriteFrame) {
                  if (this._type === SpriteType.SLICED) {
                    this._spriteFrame.on(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
                  } else {
                    this._spriteFrame.off(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
                  }
                }
              };

              _proto._applySpriteSize = function _applySpriteSize() {
                if (this._spriteFrame) {
                  if (!this._spriteFrame.isDefault) {
                    if (SizeMode.RAW === this._sizeMode) {
                      var size = this._spriteFrame.originalSize;

                      this.node._uiProps.uiTransformComp.setContentSize(size);
                    } else if (SizeMode.TRIMMED === this._sizeMode) {
                      var rect = this._spriteFrame.rect;

                      this.node._uiProps.uiTransformComp.setContentSize(rect.width, rect.height);
                    }
                  }

                  this._activateMaterial();
                }
              };

              _proto._resized = function _resized() {
                {
                  return;
                }
              };

              _proto._activateMaterial = function _activateMaterial() {
                var spriteFrame = this._spriteFrame;
                var material = this.getRenderMaterial(0);

                if (spriteFrame) {
                  if (material) {
                    this.markForUpdateRenderData();
                  }
                }

                if (this._renderData) {
                  this._renderData.material = material;
                }
              };

              _proto._updateUVs = function _updateUVs() {
                if (this._assembler) {
                  this._assembler.updateUVs(this);
                }
              };

              _proto._applySpriteFrame = function _applySpriteFrame(oldFrame) {
                var spriteFrame = this._spriteFrame;

                if (oldFrame && this._type === SpriteType.SLICED) {
                  oldFrame.off(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
                }

                this._updateUVs();

                var textureChanged = false;

                if (spriteFrame) {
                  if (!oldFrame || oldFrame.texture !== spriteFrame.texture) {
                    textureChanged = true;
                  }

                  if (textureChanged) {
                    if (this._renderData) this._renderData.textureDirty = true;
                    this.changeMaterialForDefine();
                  }

                  this._applySpriteSize();

                  if (this._type === SpriteType.SLICED) {
                    spriteFrame.on(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
                  }
                }
              };

              _createClass(Sprite, [{
                key: "spriteAtlas",
                get: function get() {
                  return this._atlas;
                },
                set: function set(value) {
                  if (this._atlas === value) {
                    return;
                  }

                  this._atlas = value;
                }
              }, {
                key: "spriteFrame",
                get: function get() {
                  return this._spriteFrame;
                },
                set: function set(value) {
                  if (this._spriteFrame === value) {
                    return;
                  }

                  var lastSprite = this._spriteFrame;
                  this._spriteFrame = value;
                  this.markForUpdateRenderData(false);

                  this._applySpriteFrame(lastSprite);
                }
              }, {
                key: "type",
                get: function get() {
                  return this._type;
                },
                set: function set(value) {
                  if (this._type !== value) {
                    this._type = value;

                    this._flushAssembler();
                  }
                }
              }, {
                key: "fillType",
                get: function get() {
                  return this._fillType;
                },
                set: function set(value) {
                  if (this._fillType !== value) {
                    if (value === FillType.RADIAL || this._fillType === FillType.RADIAL) {
                      this.destroyRenderData();
                      this._renderData = null;
                    } else if (this._renderData) {
                      this.markForUpdateRenderData(true);
                    }
                  }

                  this._fillType = value;

                  this._flushAssembler();
                }
              }, {
                key: "fillCenter",
                get: function get() {
                  return this._fillCenter;
                },
                set: function set(value) {
                  this._fillCenter.x = value.x;
                  this._fillCenter.y = value.y;

                  if (this._type === SpriteType.FILLED && this._renderData) {
                    this.markForUpdateRenderData();
                  }
                }
              }, {
                key: "fillStart",
                get: function get() {
                  return this._fillStart;
                },
                set: function set(value) {
                  this._fillStart = clamp$1(value, 0, 1);

                  if (this._type === SpriteType.FILLED && this._renderData) {
                    this.markForUpdateRenderData();

                    this._updateUVs();
                  }
                }
              }, {
                key: "fillRange",
                get: function get() {
                  return this._fillRange;
                },
                set: function set(value) {
                  this._fillRange = clamp$1(value, -1, 1);

                  if (this._type === SpriteType.FILLED && this._renderData) {
                    this.markForUpdateRenderData();

                    this._updateUVs();
                  }
                }
              }, {
                key: "trim",
                get: function get() {
                  return this._isTrimmedMode;
                },
                set: function set(value) {
                  if (this._isTrimmedMode === value) {
                    return;
                  }

                  this._isTrimmedMode = value;

                  if (this._type === SpriteType.SIMPLE && this._renderData) {
                    this.markForUpdateRenderData(true);
                  }
                }
              }, {
                key: "grayscale",
                get: function get() {
                  return this._useGrayscale;
                },
                set: function set(value) {
                  if (this._useGrayscale === value) {
                    return;
                  }

                  this._useGrayscale = value;
                  this.changeMaterialForDefine();
                  this.updateMaterial();
                }
              }, {
                key: "sizeMode",
                get: function get() {
                  return this._sizeMode;
                },
                set: function set(value) {
                  if (this._sizeMode === value) {
                    return;
                  }

                  this._sizeMode = value;

                  if (value !== SizeMode.CUSTOM) {
                    this._applySpriteSize();
                  }
                }
              }]);

              return Sprite;
            }(Renderable2D), _class3$5.FillType = FillType, _class3$5.Type = SpriteType, _class3$5.SizeMode = SizeMode, _class3$5.EventType = EventType, _temp$a), (_applyDecoratedDescriptor(_class2$a.prototype, "spriteAtlas", [_dec5$6, _dec6$6, _dec7$6], Object.getOwnPropertyDescriptor(_class2$a.prototype, "spriteAtlas"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "spriteFrame", [_dec8$5, _dec9$4, _dec10$4], Object.getOwnPropertyDescriptor(_class2$a.prototype, "spriteFrame"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "type", [_dec11$3, _dec12$3, _dec13$3], Object.getOwnPropertyDescriptor(_class2$a.prototype, "type"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "fillType", [_dec14$2, _dec15$2, _dec16$1], Object.getOwnPropertyDescriptor(_class2$a.prototype, "fillType"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "fillCenter", [_dec17$1, _dec18$1], Object.getOwnPropertyDescriptor(_class2$a.prototype, "fillCenter"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "fillStart", [_dec19$1, _dec20$1, _dec21$1], Object.getOwnPropertyDescriptor(_class2$a.prototype, "fillStart"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "fillRange", [_dec22$1, _dec23$1, _dec24$1], Object.getOwnPropertyDescriptor(_class2$a.prototype, "fillRange"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "trim", [_dec25$1, _dec26$1, _dec27$1], Object.getOwnPropertyDescriptor(_class2$a.prototype, "trim"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "grayscale", [editable, _dec28$1, _dec29$1], Object.getOwnPropertyDescriptor(_class2$a.prototype, "grayscale"), _class2$a.prototype), _applyDecoratedDescriptor(_class2$a.prototype, "sizeMode", [_dec30$1, _dec31$1, _dec32$1], Object.getOwnPropertyDescriptor(_class2$a.prototype, "sizeMode"), _class2$a.prototype), _descriptor$9 = _applyDecoratedDescriptor(_class2$a.prototype, "_spriteFrame", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$7 = _applyDecoratedDescriptor(_class2$a.prototype, "_type", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return SpriteType.SIMPLE;
              }
            }), _descriptor3$5 = _applyDecoratedDescriptor(_class2$a.prototype, "_fillType", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return FillType.HORIZONTAL;
              }
            }), _descriptor4$5 = _applyDecoratedDescriptor(_class2$a.prototype, "_sizeMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return SizeMode.TRIMMED;
              }
            }), _descriptor5$4 = _applyDecoratedDescriptor(_class2$a.prototype, "_fillCenter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2(0, 0);
              }
            }), _descriptor6$2 = _applyDecoratedDescriptor(_class2$a.prototype, "_fillStart", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor7$1 = _applyDecoratedDescriptor(_class2$a.prototype, "_fillRange", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor8$1 = _applyDecoratedDescriptor(_class2$a.prototype, "_isTrimmedMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor9$1 = _applyDecoratedDescriptor(_class2$a.prototype, "_useGrayscale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor10$1 = _applyDecoratedDescriptor(_class2$a.prototype, "_atlas", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$a)) || _class$c) || _class$c) || _class$c) || _class$c));
            legacyCC.Sprite = Sprite;

            var _dec$d, _dec2$8, _dec3$7, _dec4$7, _class$d;
            var RenderRoot2D = exports('RenderRoot2D', (_dec$d = ccclass('cc.RenderRoot2D'), _dec2$8 = executionOrder(100), _dec3$7 = menu$1(), _dec4$7 = requireComponent(UITransform), _dec$d(_class$d = _dec2$8(_class$d = _dec3$7(_class$d = _dec4$7(_class$d = disallowMultiple(_class$d = executeInEditMode(_class$d = function (_Component) {
              _inheritsLoose(RenderRoot2D, _Component);

              function RenderRoot2D() {
                return _Component.apply(this, arguments) || this;
              }

              var _proto = RenderRoot2D.prototype;

              _proto.onEnable = function onEnable() {
                legacyCC.director.root.batcher2D.addScreen(this);
              };

              _proto.onDisable = function onDisable() {
                legacyCC.director.root.batcher2D.removeScreen(this);
              };

              _proto.onDestroy = function onDestroy() {
                legacyCC.director.root.batcher2D.removeScreen(this);
              };

              return RenderRoot2D;
            }(Component)) || _class$d) || _class$d) || _class$d) || _class$d) || _class$d) || _class$d));

            var _dec$e, _dec2$9, _dec3$8, _dec4$8, _dec5$7, _dec6$7, _dec7$7, _dec8$6, _class$e, _class2$b, _descriptor$a, _descriptor2$8, _temp$b;

            var _worldPos = new Vec3();

            var RenderMode = Enum({
              OVERLAY: 0,
              INTERSPERSE: 1
            });
            var Canvas = function (v) { return exports({ Canvas: v, CanvasComponent: v }), v; }((_dec$e = ccclass('cc.Canvas'), _dec2$9 = help(), _dec3$8 = executionOrder(100), _dec4$8 = menu$1(), _dec5$7 = type$1(Camera), _dec6$7 = tooltip(), _dec7$7 = tooltip(), _dec8$6 = type$1(Camera), _dec$e(_class$e = _dec2$9(_class$e = _dec3$8(_class$e = _dec4$8(_class$e = executeInEditMode(_class$e = disallowMultiple(_class$e = (_class2$b = (_temp$b = function (_RenderRoot2D) {
              _inheritsLoose(Canvas, _RenderRoot2D);

              function Canvas() {
                var _this;

                _this = _RenderRoot2D.call(this) || this;

                _initializerDefineProperty(_this, "_cameraComponent", _descriptor$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_alignCanvasWithScreen", _descriptor2$8, _assertThisInitialized(_this));

                _this._thisOnCameraResized = void 0;
                _this._fitDesignResolution = void 0;
                _this._pos = new Vec3();
                _this._renderMode = RenderMode.OVERLAY;
                _this._thisOnCameraResized = _this._onResizeCamera.bind(_assertThisInitialized(_this));

                return _this;
              }

              var _proto = Canvas.prototype;

              _proto.__preload = function __preload() {
                var widget = this.getComponent('cc.Widget');

                if (widget) {
                  widget.updateAlignment();
                }

                {
                  if (this._cameraComponent) {
                    this._cameraComponent._createCamera();

                    this._cameraComponent.node.on(Camera.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
                  }
                }

                this._onResizeCamera();

                {
                  this.node.on(NodeEventType.TRANSFORM_CHANGED, this._thisOnCameraResized);
                }
              };

              _proto.onEnable = function onEnable() {
                _RenderRoot2D.prototype.onEnable.call(this);

                if ( this._cameraComponent) {
                  this._cameraComponent.node.on(Camera.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
                }
              };

              _proto.onDisable = function onDisable() {
                _RenderRoot2D.prototype.onDisable.call(this);

                if (this._cameraComponent) {
                  this._cameraComponent.node.off(Camera.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
                }
              };

              _proto.onDestroy = function onDestroy() {
                _RenderRoot2D.prototype.onDestroy.call(this);

                {
                  this.node.off(NodeEventType.TRANSFORM_CHANGED, this._thisOnCameraResized);
                }
              };

              _proto._onResizeCamera = function _onResizeCamera() {
                if (this._cameraComponent && this._alignCanvasWithScreen) {
                  if (this._cameraComponent.targetTexture) {
                    this._cameraComponent.orthoHeight = visibleRect.height / 2;
                  } else {
                    var size = screen.windowSize;
                    this._cameraComponent.orthoHeight = size.height / view.getScaleY() / 2;
                  }

                  this.node.getWorldPosition(_worldPos);

                  this._cameraComponent.node.setWorldPosition(_worldPos.x, _worldPos.y, 1000);
                }
              };

              _proto._getViewPriority = function _getViewPriority() {
                if (this._cameraComponent) {
                  var _this$cameraComponent;

                  var priority = (_this$cameraComponent = this.cameraComponent) === null || _this$cameraComponent === void 0 ? void 0 : _this$cameraComponent.priority;
                  priority = this._renderMode === RenderMode.OVERLAY ? priority | 1 << 30 : priority & ~(1 << 30);
                  return priority;
                }

                return 0;
              };

              _createClass(Canvas, [{
                key: "renderMode",
                get: function get() {
                  return this._renderMode;
                },
                set: function set(val) {
                  this._renderMode = val;

                  if (this._cameraComponent) {
                    this._cameraComponent.priority = this._getViewPriority();
                  }
                }
              }, {
                key: "cameraComponent",
                get: function get() {
                  return this._cameraComponent;
                },
                set: function set(value) {
                  if (this._cameraComponent === value) {
                    return;
                  }

                  this._cameraComponent = value;

                  this._onResizeCamera();
                }
              }, {
                key: "alignCanvasWithScreen",
                get: function get() {
                  return this._alignCanvasWithScreen;
                },
                set: function set(value) {
                  this._alignCanvasWithScreen = value;

                  this._onResizeCamera();
                }
              }]);

              return Canvas;
            }(RenderRoot2D), _temp$b), (_applyDecoratedDescriptor(_class2$b.prototype, "cameraComponent", [_dec5$7, _dec6$7], Object.getOwnPropertyDescriptor(_class2$b.prototype, "cameraComponent"), _class2$b.prototype), _applyDecoratedDescriptor(_class2$b.prototype, "alignCanvasWithScreen", [_dec7$7], Object.getOwnPropertyDescriptor(_class2$b.prototype, "alignCanvasWithScreen"), _class2$b.prototype), _descriptor$a = _applyDecoratedDescriptor(_class2$b.prototype, "_cameraComponent", [_dec8$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$8 = _applyDecoratedDescriptor(_class2$b.prototype, "_alignCanvasWithScreen", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            })), _class2$b)) || _class$e) || _class$e) || _class$e) || _class$e) || _class$e) || _class$e));
            legacyCC.Canvas = Canvas;

            var _dec$f, _dec2$a, _dec3$9, _class$f, _temp$c;
            var UIComponent = exports('UIComponent', (_dec$f = ccclass('cc.UIComponent'), _dec2$a = requireComponent(UITransform), _dec3$9 = executionOrder(110), _dec$f(_class$f = _dec2$a(_class$f = _dec3$9(_class$f = disallowMultiple(_class$f = executeInEditMode(_class$f = (_temp$c = function (_Component) {
              _inheritsLoose(UIComponent, _Component);

              function UIComponent() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;
                _this._lastParent = null;
                _this.stencilStage = Stage.DISABLED;
                return _this;
              }

              var _proto = UIComponent.prototype;

              _proto.__preload = function __preload() {
                this.node._uiProps.uiComp = this;
              };

              _proto.onEnable = function onEnable() {};

              _proto.onDisable = function onDisable() {};

              _proto.onDestroy = function onDestroy() {
                if (this.node._uiProps.uiComp === this) {
                  this.node._uiProps.uiComp = null;
                }
              };

              _proto.updateAssembler = function updateAssembler(render) {};

              _proto.postUpdateAssembler = function postUpdateAssembler(render) {};

              _proto.markForUpdateRenderData = function markForUpdateRenderData(enable) {
              };

              _proto.setNodeDirty = function setNodeDirty() {};

              _proto.setTextureDirty = function setTextureDirty() {};

              return UIComponent;
            }(Component), _temp$c)) || _class$f) || _class$f) || _class$f) || _class$f) || _class$f));

            removeProperty(UIComponent.prototype, 'UIComponent', [{
              name: '_visibility'
            }, {
              name: 'setVisibility'
            }]);
            removeProperty(Renderable2D.prototype, 'Renderable2D.prototype', [{
              name: 'srcBlendFactor'
            }, {
              name: 'dstBlendFactor'
            }]);
            replaceProperty(Canvas.prototype, 'Canvas.prototype', [{
              name: 'camera',
              newName: 'cameraComponent.camera',
              customGetter: function customGetter() {
                return this._cameraComponent.camera;
              }
            }, {
              name: 'clearFlag',
              newName: 'cameraComponent.clearFlags',
              customGetter: function customGetter() {
                return this._cameraComponent ? this._cameraComponent.clearFlags : 0;
              },
              customSetter: function customSetter(val) {
                if (this._cameraComponent) this._cameraComponent.clearFlags = val;
              }
            }, {
              name: 'color',
              newName: 'cameraComponent.clearColor',
              customGetter: function customGetter() {
                return this._cameraComponent ? this._cameraComponent.clearColor : Color$1.BLACK;
              },
              customSetter: function customSetter(val) {
                if (this._cameraComponent) this._cameraComponent.clearColor = val;
              }
            }, {
              name: 'priority',
              newName: 'cameraComponent.priority',
              customGetter: function customGetter() {
                return this._cameraComponent ? this._cameraComponent.priority : 0;
              },
              customSetter: function customSetter(val) {
                if (this._cameraComponent) this._cameraComponent.priority = val;
              }
            }, {
              name: 'targetTexture',
              newName: 'cameraComponent.targetTexture',
              customGetter: function customGetter() {
                return this._cameraComponent ? this._cameraComponent.targetTexture : null;
              },
              customSetter: function customSetter(value) {
                if (this._cameraComponent) this._cameraComponent.targetTexture = value;
              }
            }, {
              name: 'visibility',
              newName: 'cameraComponent.visibility',
              customGetter: function customGetter() {
                return this._cameraComponent ? this._cameraComponent.visibility : 0;
              }
            }]);
            markAsWarning(UITransform.prototype, 'UITransform.prototype', [{
              name: 'priority',
              suggest: "Please use setSiblingIndex to change index of the current node in its parent's children array."
            }]);
            legacyCC.UITransformComponent = UITransform;
            js.setClassAlias(UITransform, 'cc.UITransformComponent');
            js.setClassAlias(Renderable2D, 'cc.RenderComponent');
            legacyCC.CanvasComponent = Canvas;
            js.setClassAlias(Canvas, 'cc.CanvasComponent');

            var _dec$g, _dec2$b, _dec3$a, _dec4$9, _dec5$8, _dec6$8, _dec7$8, _dec8$7, _dec9$5, _dec10$5, _dec11$4, _dec12$4, _dec13$4, _dec14$3, _dec15$3, _dec16$2, _dec17$2, _dec18$2, _dec19$2, _dec20$2, _dec21$2, _dec22$2, _class$g, _class2$c, _descriptor$b, _descriptor2$9, _descriptor3$6, _descriptor4$6, _descriptor5$5, _descriptor6$3, _descriptor7$2, _descriptor8$2, _descriptor9$2, _descriptor10$2, _descriptor11$1, _descriptor12$1, _descriptor13$1, _class3$6, _temp$d;

            var _htmlTextParser = new HtmlTextParser();

            var RichTextChildName = 'RICHTEXT_CHILD';
            var RichTextChildImageName = 'RICHTEXT_Image_CHILD';
            var labelPool = new Pool$1(function (seg) {

              if (!legacyCC.isValid(seg.node)) {
                return false;
              } else {
                var outline = seg.node.getComponent(LabelOutline);

                if (outline) {
                  outline.width = 0;
                }
              }

              return true;
            }, 20);
            var imagePool = new Pool$1(function (seg) {

              return legacyCC.isValid(seg.node);
            }, 10);

            function createSegment(type) {
              return {
                node: new Node(type),
                comp: null,
                lineCount: 0,
                styleIndex: 0,
                imageOffset: '',
                clickParam: '',
                clickHandler: '',
                type: type
              };
            }

            function getSegmentByPool(type, content) {
              var seg;

              if (type === RichTextChildName) {
                seg = labelPool._get();
              } else if (type === RichTextChildImageName) {
                seg = imagePool._get();
              }

              seg = seg || createSegment(type);
              var node = seg.node;

              if (!node) {
                node = new Node(type);
              }

              node.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;

              if (type === RichTextChildImageName) {
                seg.comp = node.getComponent(Sprite) || node.addComponent(Sprite);
                seg.comp.spriteFrame = content;
                seg.comp.type = Sprite.Type.SLICED;
                seg.comp.sizeMode = Sprite.SizeMode.CUSTOM;
              } else {
                seg.comp = node.getComponent(Label) || node.addComponent(Label);
                seg.comp.string = content;
                seg.comp.horizontalAlign = HorizontalTextAlignment.LEFT;
                seg.comp.verticalAlign = VerticalTextAlignment.TOP;
              }

              node.setPosition(0, 0, 0);
              var trans = node._uiProps.uiTransformComp;
              trans.setAnchorPoint(0.5, 0.5);
              seg.node = node;
              seg.lineCount = 0;
              seg.styleIndex = 0;
              seg.imageOffset = '';
              seg.clickParam = '';
              seg.clickHandler = '';
              return seg;
            }

            var RichText = function (v) { return exports({ RichText: v, RichTextComponent: v }), v; }((_dec$g = ccclass('cc.RichText'), _dec2$b = help(), _dec3$a = executionOrder(110), _dec4$9 = menu$1(), _dec5$8 = tooltip(), _dec6$8 = type$1(HorizontalTextAlignment), _dec7$8 = tooltip(), _dec8$7 = type$1(VerticalTextAlignment), _dec9$5 = tooltip(), _dec10$5 = tooltip(), _dec11$4 = tooltip(), _dec12$4 = type$1(Font), _dec13$4 = tooltip(), _dec14$3 = tooltip(), _dec15$3 = displayOrder(), _dec16$2 = type$1(CacheMode), _dec17$2 = tooltip(), _dec18$2 = tooltip(), _dec19$2 = tooltip(), _dec20$2 = type$1(SpriteAtlas), _dec21$2 = tooltip(), _dec22$2 = tooltip(), _dec$g(_class$g = _dec2$b(_class$g = _dec3$a(_class$g = _dec4$9(_class$g = executeInEditMode(_class$g = (_class2$c = (_temp$d = _class3$6 = function (_Component) {
              _inheritsLoose(RichText, _Component);

              function RichText() {
                var _this;

                _this = _Component.call(this) || this;

                _initializerDefineProperty(_this, "_lineHeight", _descriptor$b, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_string", _descriptor2$9, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_horizontalAlign", _descriptor3$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_verticalAlign", _descriptor4$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fontSize", _descriptor5$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_maxWidth", _descriptor6$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fontFamily", _descriptor7$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_font", _descriptor8$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isSystemFontUsed", _descriptor9$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_userDefinedFont", _descriptor10$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_cacheMode", _descriptor11$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_imageAtlas", _descriptor12$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_handleTouchEvent", _descriptor13$1, _assertThisInitialized(_this));

                _this._textArray = [];
                _this._segments = [];
                _this._labelSegmentsCache = [];
                _this._linesWidth = [];
                _this._lineCount = 1;
                _this._labelWidth = 0;
                _this._labelHeight = 0;
                _this._layoutDirty = true;
                _this._lineOffsetX = 0;
                _this._updateRichTextStatus = void 0;
                _this._labelChildrenNum = 0;

                _this._updateRichTextStatus = _this._updateRichText;
                return _this;
              }

              var _proto = RichText.prototype;

              _proto.onLoad = function onLoad() {
                this.node.on(NodeEventType.LAYER_CHANGED, this._applyLayer, this);
              };

              _proto.onEnable = function onEnable() {
                if (this.handleTouchEvent) {
                  this._addEventListeners();
                }

                this._updateRichText();

                this._activateChildren(true);
              };

              _proto.onDisable = function onDisable() {
                if (this.handleTouchEvent) {
                  this._removeEventListeners();
                }

                this._activateChildren(false);
              };

              _proto.start = function start() {
                this._onTTFLoaded();

                this.node.on(NodeEventType.ANCHOR_CHANGED, this._updateRichTextPosition, this);
              };

              _proto.onRestore = function onRestore() {
                {
                  return;
                }
              };

              _proto.onDestroy = function onDestroy() {
                for (var _iterator = _createForOfIteratorHelperLoose(this._segments), _step; !(_step = _iterator()).done;) {
                  var seg = _step.value;
                  seg.node.removeFromParent();

                  if (seg.type === RichTextChildName) {
                    labelPool.put(seg);
                  } else if (seg.type === RichTextChildImageName) {
                    imagePool.put(seg);
                  }
                }

                this.node.off(NodeEventType.ANCHOR_CHANGED, this._updateRichTextPosition, this);
                this.node.off(NodeEventType.LAYER_CHANGED, this._applyLayer, this);
              };

              _proto._addEventListeners = function _addEventListeners() {
                this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
              };

              _proto._removeEventListeners = function _removeEventListeners() {
                this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
              };

              _proto._updateLabelSegmentTextAttributes = function _updateLabelSegmentTextAttributes() {
                var _this2 = this;

                this._segments.forEach(function (item) {
                  _this2._applyTextAttribute(item);
                });
              };

              _proto._createFontLabel = function _createFontLabel(str) {
                return getSegmentByPool(RichTextChildName, str);
              };

              _proto._createImage = function _createImage(spriteFrame) {
                return getSegmentByPool(RichTextChildImageName, spriteFrame);
              };

              _proto._onTTFLoaded = function _onTTFLoaded() {
                if (this._font instanceof TTFFont) {
                  this._layoutDirty = true;

                  this._updateRichText();
                } else {
                  this._layoutDirty = true;

                  this._updateRichText();
                }
              };

              _proto.SplitLongStringApproximatelyIn2048 = function SplitLongStringApproximatelyIn2048(text, styleIndex) {
                var labelSize = this._calculateSize(styleIndex, text);

                var partStringArr = [];

                if (labelSize.x < 2048) {
                  partStringArr.push(text);
                } else {
                  var multilineTexts = text.split('\n');

                  for (var i = 0; i < multilineTexts.length; i++) {
                    var thisPartSize = this._calculateSize(styleIndex, multilineTexts[i]);

                    if (thisPartSize.x < 2048) {
                      partStringArr.push(multilineTexts[i]);
                    } else {
                      var thisPartSplitResultArr = this.splitLongStringOver2048(multilineTexts[i], styleIndex);
                      partStringArr.push.apply(partStringArr, thisPartSplitResultArr);
                    }
                  }
                }

                return partStringArr;
              };

              _proto.splitLongStringOver2048 = function splitLongStringOver2048(text, styleIndex) {
                var partStringArr = [];
                var longStr = text;
                var curStart = 0;
                var curEnd = longStr.length / 2;
                var curString = longStr.substring(curStart, curEnd);
                var leftString = longStr.substring(curEnd);

                var curStringSize = this._calculateSize(styleIndex, curString);

                var leftStringSize = this._calculateSize(styleIndex, leftString);

                var lineCountForOnePart = 1;
                var sizeForOnePart = lineCountForOnePart * this.maxWidth;

                while (curStringSize.x > sizeForOnePart) {
                  curEnd /= 2;

                  if (curEnd < 1) {
                    curEnd *= 2;
                    break;
                  }

                  curString = curString.substring(curStart, curEnd);
                  leftString = longStr.substring(curEnd);
                  curStringSize = this._calculateSize(styleIndex, curString);
                }

                var leftTryTimes = 1000;
                var curWordStep = 1;

                while (leftTryTimes && curStart < text.length) {
                  while (leftTryTimes && curStringSize.x < sizeForOnePart) {
                    var nextPartExec = getEnglishWordPartAtFirst(leftString);

                    if (nextPartExec && nextPartExec.length > 0) {
                      curWordStep = nextPartExec[0].length;
                    }

                    curEnd += curWordStep;
                    curString = longStr.substring(curStart, curEnd);
                    leftString = longStr.substring(curEnd);
                    curStringSize = this._calculateSize(styleIndex, curString);
                    leftTryTimes--;
                  }

                  while (leftTryTimes && curString.length >= 2 && curStringSize.x > sizeForOnePart) {
                    curEnd -= curWordStep;
                    curString = longStr.substring(curStart, curEnd);
                    curStringSize = this._calculateSize(styleIndex, curString);
                    curWordStep = 1;
                    leftTryTimes--;
                  }

                  if (curString.length >= 2) {
                    var lastWordExec = getEnglishWordPartAtLast(curString);

                    if (lastWordExec && lastWordExec.length > 0 && curString !== lastWordExec[0]) {
                      curEnd -= lastWordExec[0].length;
                      curString = longStr.substring(curStart, curEnd);
                    }
                  }

                  partStringArr.push(curString);
                  var partStep = curString.length;
                  curStart = curEnd;
                  curEnd += partStep;
                  curString = longStr.substring(curStart, curEnd);
                  leftString = longStr.substring(curEnd);
                  leftStringSize = this._calculateSize(styleIndex, leftString);
                  leftTryTimes--;

                  if (leftStringSize.x < 2048) {
                    curStart = text.length;
                    curEnd = text.length;
                    curString = leftString;
                    partStringArr.push(curString);
                    break;
                  } else {
                    curStringSize = this._calculateSize(styleIndex, curString);
                  }
                }

                return partStringArr;
              };

              _proto._measureText = function _measureText(styleIndex, string) {
                var _this3 = this;

                var func = function func(s) {
                  var labelSize = _this3._calculateSize(styleIndex, s);

                  return labelSize.width;
                };

                if (string) {
                  return func(string);
                } else {
                  return func;
                }
              };

              _proto._calculateSize = function _calculateSize(styleIndex, s) {
                var label;

                if (this._labelSegmentsCache.length === 0) {
                  label = this._createFontLabel(s);

                  this._labelSegmentsCache.push(label);
                } else {
                  label = this._labelSegmentsCache[0];
                  label.node.getComponent(Label).string = s;
                }

                label.styleIndex = styleIndex;

                this._applyTextAttribute(label);

                var labelSize = label.node._uiProps.uiTransformComp.contentSize;
                return labelSize;
              };

              _proto._onTouchEnded = function _onTouchEnded(event) {
                var _this4 = this;

                var components = this.node.getComponents(Component);

                var _loop = function _loop() {
                  var seg = _step2.value;
                  var clickHandler = seg.clickHandler;
                  var clickParam = seg.clickParam;

                  if (clickHandler && _this4._containsTouchLocation(seg, event.touch.getUILocation())) {
                    components.forEach(function (component) {
                      var func = component[clickHandler];

                      if (component.enabledInHierarchy && func) {
                        func.call(component, event, clickParam);
                      }
                    });
                    event.propagationStopped = true;
                  }
                };

                for (var _iterator2 = _createForOfIteratorHelperLoose(this._segments), _step2; !(_step2 = _iterator2()).done;) {
                  _loop();
                }
              };

              _proto._containsTouchLocation = function _containsTouchLocation(label, point) {
                var comp = label.node.getComponent(UITransform);

                if (!comp) {
                  return false;
                }

                var myRect = comp.getBoundingBoxToWorld();
                return myRect.contains(point);
              };

              _proto._resetState = function _resetState() {
                var children = this.node.children;

                for (var i = children.length - 1; i >= 0; i--) {
                  var child = children[i];

                  if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
                    if (child.parent === this.node) {
                      child.parent = null;
                    } else {
                      children.splice(i, 1);
                    }

                    var segment = createSegment(child.name);
                    segment.node = child;

                    if (child.name === RichTextChildName) {
                      segment.comp = child.getComponent(Label);
                      labelPool.put(segment);
                    } else {
                      segment.comp = child.getComponent(Sprite);
                      imagePool.put(segment);
                    }

                    this._labelChildrenNum--;
                  }
                }

                this._segments.length = 0;
                this._labelSegmentsCache.length = 0;
                this._linesWidth.length = 0;
                this._lineOffsetX = 0;
                this._lineCount = 1;
                this._labelWidth = 0;
                this._labelHeight = 0;
                this._layoutDirty = true;
              };

              _proto._activateChildren = function _activateChildren(active) {
                for (var i = this.node.children.length - 1; i >= 0; i--) {
                  var child = this.node.children[i];

                  if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
                    child.active = active;
                  }
                }
              };

              _proto._addLabelSegment = function _addLabelSegment(stringToken, styleIndex) {
                var labelSegment;

                if (this._labelSegmentsCache.length === 0) {
                  labelSegment = this._createFontLabel(stringToken);
                } else {
                  labelSegment = this._labelSegmentsCache.pop();
                  var label = labelSegment.node.getComponent(Label);

                  if (label) {
                    label.string = stringToken;
                  }
                }

                var labelComp = labelSegment.comp;

                if (labelComp.verticalAlign !== this._verticalAlign) {
                  labelComp.verticalAlign = this._verticalAlign;
                }

                labelSegment.styleIndex = styleIndex;
                labelSegment.lineCount = this._lineCount;

                labelSegment.node._uiProps.uiTransformComp.setAnchorPoint(0, 0);

                labelSegment.node.layer = this.node.layer;
                this.node.insertChild(labelSegment.node, this._labelChildrenNum++);

                this._applyTextAttribute(labelSegment);

                this._segments.push(labelSegment);

                return labelSegment;
              };

              _proto._updateRichTextWithMaxWidth = function _updateRichTextWithMaxWidth(labelString, labelWidth, styleIndex) {
                var fragmentWidth = labelWidth;
                var labelSegment;

                if (this._lineOffsetX > 0 && fragmentWidth + this._lineOffsetX > this._maxWidth) {
                  var checkStartIndex = 0;

                  while (this._lineOffsetX <= this._maxWidth) {
                    var checkEndIndex = this._getFirstWordLen(labelString, checkStartIndex, labelString.length);

                    var checkString = labelString.substr(checkStartIndex, checkEndIndex);

                    var checkStringWidth = this._measureText(styleIndex, checkString);

                    if (this._lineOffsetX + checkStringWidth <= this._maxWidth) {
                      this._lineOffsetX += checkStringWidth;
                      checkStartIndex += checkEndIndex;
                    } else {
                      if (checkStartIndex > 0) {
                        var remainingString = labelString.substr(0, checkStartIndex);

                        this._addLabelSegment(remainingString, styleIndex);

                        labelString = labelString.substr(checkStartIndex, labelString.length);
                        fragmentWidth = this._measureText(styleIndex, labelString);
                      }

                      this._updateLineInfo();

                      break;
                    }
                  }
                }

                if (fragmentWidth > this._maxWidth) {
                  var fragments = fragmentText(labelString, fragmentWidth, this._maxWidth, this._measureText(styleIndex));

                  for (var k = 0; k < fragments.length; ++k) {
                    var splitString = fragments[k];
                    labelSegment = this._addLabelSegment(splitString, styleIndex);
                    var labelSize = labelSegment.node._uiProps.uiTransformComp.contentSize;
                    this._lineOffsetX += labelSize.width;

                    if (fragments.length > 1 && k < fragments.length - 1) {
                      this._updateLineInfo();
                    }
                  }
                } else {
                  this._lineOffsetX += fragmentWidth;

                  this._addLabelSegment(labelString, styleIndex);
                }
              };

              _proto._isLastComponentCR = function _isLastComponentCR(stringToken) {
                return stringToken.length - 1 === stringToken.lastIndexOf('\n');
              };

              _proto._updateLineInfo = function _updateLineInfo() {
                this._linesWidth.push(this._lineOffsetX);

                this._lineOffsetX = 0;
                this._lineCount++;
              };

              _proto._needsUpdateTextLayout = function _needsUpdateTextLayout(newTextArray) {
                if (this._layoutDirty || !this._textArray || !newTextArray) {
                  return true;
                }

                if (this._textArray.length !== newTextArray.length) {
                  return true;
                }

                for (var i = 0; i < this._textArray.length; i++) {
                  var oldItem = this._textArray[i];
                  var newItem = newTextArray[i];

                  if (oldItem.text !== newItem.text) {
                    return true;
                  } else {
                    var oldStyle = oldItem.style;
                    var newStyle = newItem.style;

                    if (oldStyle) {
                      if (newStyle) {
                        if (!!newStyle.outline !== !!oldStyle.outline) {
                          return true;
                        }

                        if (oldStyle.size !== newStyle.size || oldStyle.italic !== newStyle.italic || oldStyle.isImage !== newStyle.isImage) {
                          return true;
                        }

                        if (oldStyle.src !== newStyle.src || oldStyle.imageAlign !== newStyle.imageAlign || oldStyle.imageHeight !== newStyle.imageHeight || oldStyle.imageWidth !== newStyle.imageWidth || oldStyle.imageOffset !== newStyle.imageOffset) {
                          return true;
                        }
                      } else if (oldStyle.size || oldStyle.italic || oldStyle.isImage || oldStyle.outline) {
                        return true;
                      }
                    } else if (newStyle) {
                      if (newStyle.size || newStyle.italic || newStyle.isImage || newStyle.outline) {
                        return true;
                      }
                    }
                  }
                }

                return false;
              };

              _proto._addRichTextImageElement = function _addRichTextImageElement(richTextElement) {
                if (!richTextElement.style) {
                  return;
                }

                var style = richTextElement.style;
                var spriteFrameName = style.src;

                var spriteFrame = this._imageAtlas && spriteFrameName && this._imageAtlas.getSpriteFrame(spriteFrameName);

                if (!spriteFrame) {
                  warnID(4400);
                } else {
                  var segment = this._createImage(spriteFrame);

                  var sprite = segment.comp;

                  switch (style.imageAlign) {
                    case 'top':
                      segment.node._uiProps.uiTransformComp.setAnchorPoint(0, 1);

                      break;

                    case 'center':
                      segment.node._uiProps.uiTransformComp.setAnchorPoint(0, 0.5);

                      break;

                    default:
                      segment.node._uiProps.uiTransformComp.setAnchorPoint(0, 0);

                      break;
                  }

                  if (style.imageOffset) {
                    segment.imageOffset = style.imageOffset;
                  }

                  segment.node.layer = this.node.layer;
                  this.node.insertChild(segment.node, this._labelChildrenNum++);

                  this._segments.push(segment);

                  var spriteRect = spriteFrame.rect.clone();
                  var scaleFactor = 1;
                  var spriteWidth = spriteRect.width;
                  var spriteHeight = spriteRect.height;
                  var expectWidth = style.imageWidth || 0;
                  var expectHeight = style.imageHeight || 0;

                  if (expectHeight > 0) {
                    scaleFactor = expectHeight / spriteHeight;
                    spriteWidth *= scaleFactor;
                    spriteHeight *= scaleFactor;
                  } else {
                    scaleFactor = this._lineHeight / spriteHeight;
                    spriteWidth *= scaleFactor;
                    spriteHeight *= scaleFactor;
                  }

                  if (expectWidth > 0) {
                    spriteWidth = expectWidth;
                  }

                  if (this._maxWidth > 0) {
                    if (this._lineOffsetX + spriteWidth > this._maxWidth) {
                      this._updateLineInfo();
                    }

                    this._lineOffsetX += spriteWidth;
                  } else {
                    this._lineOffsetX += spriteWidth;

                    if (this._lineOffsetX > this._labelWidth) {
                      this._labelWidth = this._lineOffsetX;
                    }
                  }

                  segment.node._uiProps.uiTransformComp.setContentSize(spriteWidth, spriteHeight);

                  segment.lineCount = this._lineCount;
                  segment.clickHandler = '';
                  segment.clickParam = '';
                  var event = style.event;

                  if (event) {
                    segment.clickHandler = event.click;
                    segment.clickParam = event.param;
                  }
                }
              };

              _proto._updateRichText = function _updateRichText() {
                if (!this.enabledInHierarchy) {
                  return;
                }

                var newTextArray = _htmlTextParser.parse(this._string);

                if (!this._needsUpdateTextLayout(newTextArray)) {
                  this._textArray = newTextArray.slice();

                  this._updateLabelSegmentTextAttributes();

                  return;
                }

                this._textArray = newTextArray.slice();

                this._resetState();

                var lastEmptyLine = false;
                var label;

                for (var i = 0; i < this._textArray.length; ++i) {
                  var richTextElement = this._textArray[i];
                  var text = richTextElement.text;

                  if (text === undefined) {
                    continue;
                  }

                  if (text === '') {
                    if (richTextElement.style && richTextElement.style.isNewLine) {
                      this._updateLineInfo();

                      continue;
                    }

                    if (richTextElement.style && richTextElement.style.isImage && this._imageAtlas) {
                      this._addRichTextImageElement(richTextElement);

                      continue;
                    }
                  }

                  var splitArr = this.SplitLongStringApproximatelyIn2048(text, i);
                  text = splitArr.join('\n');
                  var multilineTexts = text.split('\n');

                  for (var j = 0; j < multilineTexts.length; ++j) {
                    var labelString = multilineTexts[j];

                    if (labelString === '') {
                      if (this._isLastComponentCR(text) && j === multilineTexts.length - 1) {
                        continue;
                      }

                      this._updateLineInfo();

                      lastEmptyLine = true;
                      continue;
                    }

                    lastEmptyLine = false;

                    if (this._maxWidth > 0) {
                      var labelWidth = this._measureText(i, labelString);

                      this._updateRichTextWithMaxWidth(labelString, labelWidth, i);

                      if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                        this._updateLineInfo();
                      }
                    } else {
                      label = this._addLabelSegment(labelString, i);
                      this._lineOffsetX += label.node._uiProps.uiTransformComp.width;

                      if (this._lineOffsetX > this._labelWidth) {
                        this._labelWidth = this._lineOffsetX;
                      }

                      if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                        this._updateLineInfo();
                      }
                    }
                  }
                }

                if (!lastEmptyLine) {
                  this._linesWidth.push(this._lineOffsetX);
                }

                if (this._maxWidth > 0) {
                  this._labelWidth = this._maxWidth;
                }

                this._labelHeight = (this._lineCount + BASELINE_RATIO) * this._lineHeight;

                this.node._uiProps.uiTransformComp.setContentSize(this._labelWidth, this._labelHeight);

                this._updateRichTextPosition();

                this._layoutDirty = false;
              };

              _proto._getFirstWordLen = function _getFirstWordLen(text, startIndex, textLen) {
                var character = text.charAt(startIndex);

                if (isUnicodeCJK(character) || isUnicodeSpace(character)) {
                  return 1;
                }

                var len = 1;

                for (var index = startIndex + 1; index < textLen; ++index) {
                  character = text.charAt(index);

                  if (isUnicodeSpace(character) || isUnicodeCJK(character)) {
                    break;
                  }

                  len++;
                }

                return len;
              };

              _proto._updateRichTextPosition = function _updateRichTextPosition() {
                var nextTokenX = 0;
                var nextLineIndex = 1;
                var totalLineCount = this._lineCount;
                var trans = this.node._uiProps.uiTransformComp;
                var anchorX = trans.anchorX;
                var anchorY = trans.anchorY;

                for (var i = 0; i < this._segments.length; ++i) {
                  var segment = this._segments[i];
                  var lineCount = segment.lineCount;

                  if (lineCount > nextLineIndex) {
                    nextTokenX = 0;
                    nextLineIndex = lineCount;
                  }

                  var lineOffsetX = this._labelWidth * (this._horizontalAlign * 0.5 - anchorX);

                  switch (this._horizontalAlign) {
                    case HorizontalTextAlignment.LEFT:
                      break;

                    case HorizontalTextAlignment.CENTER:
                      lineOffsetX -= this._linesWidth[lineCount - 1] / 2;
                      break;

                    case HorizontalTextAlignment.RIGHT:
                      lineOffsetX -= this._linesWidth[lineCount - 1];
                      break;
                  }

                  var pos = segment.node.position;
                  segment.node.setPosition(nextTokenX + lineOffsetX, this._lineHeight * (totalLineCount - lineCount) - this._labelHeight * anchorY, pos.z);

                  if (lineCount === nextLineIndex) {
                    nextTokenX += segment.node._uiProps.uiTransformComp.width;
                  }

                  var sprite = segment.node.getComponent(Sprite);

                  if (sprite) {
                    var position = segment.node.position.clone();
                    var lineHeightSet = this._lineHeight;
                    var lineHeightReal = this._lineHeight * (1 + BASELINE_RATIO);

                    switch (segment.node._uiProps.uiTransformComp.anchorY) {
                      case 1:
                        position.y += lineHeightSet + (lineHeightReal - lineHeightSet) / 2;
                        break;

                      case 0.5:
                        position.y += lineHeightReal / 2;
                        break;

                      default:
                        position.y += (lineHeightReal - lineHeightSet) / 2;
                        break;
                    }

                    if (segment.imageOffset) {
                      var offsets = segment.imageOffset.split(',');

                      if (offsets.length === 1 && offsets[0]) {
                        var offsetY = parseFloat(offsets[0]);
                        if (Number.isInteger(offsetY)) position.y += offsetY;
                      } else if (offsets.length === 2) {
                        var offsetX = parseFloat(offsets[0]);

                        var _offsetY = parseFloat(offsets[1]);

                        if (Number.isInteger(offsetX)) position.x += offsetX;
                        if (Number.isInteger(_offsetY)) position.y += _offsetY;
                      }
                    }

                    segment.node.position = position;
                  }

                  var outline = segment.node.getComponent(LabelOutline);

                  if (outline) {
                    var _position = segment.node.position.clone();

                    _position.y -= outline.width;
                    segment.node.position = _position;
                  }
                }
              };

              _proto._convertLiteralColorValue = function _convertLiteralColorValue(color) {
                var colorValue = color.toUpperCase();

                if (Color$1[colorValue]) {
                  var colorUse = Color$1[colorValue];
                  return colorUse;
                } else {
                  var out = new Color$1();
                  return out.fromHEX(color);
                }
              };

              _proto._applyTextAttribute = function _applyTextAttribute(labelSeg) {
                var label = labelSeg.node.getComponent(Label);

                if (!label) {
                  return;
                }

                this._resetLabelState(label);

                var index = labelSeg.styleIndex;
                var textStyle;

                if (this._textArray[index]) {
                  textStyle = this._textArray[index].style;
                }

                if (textStyle) {
                  label.color = this._convertLiteralColorValue(textStyle.color || 'white');
                  label.isBold = !!textStyle.bold;
                  label.isItalic = !!textStyle.italic;
                  label.isUnderline = !!textStyle.underline;

                  if (textStyle.outline) {
                    var labelOutline = labelSeg.node.getComponent(LabelOutline);

                    if (!labelOutline) {
                      labelOutline = labelSeg.node.addComponent(LabelOutline);
                    }

                    labelOutline.color = this._convertLiteralColorValue(textStyle.outline.color);
                    labelOutline.width = textStyle.outline.width;
                  }

                  label.fontSize = textStyle.size || this._fontSize;
                  labelSeg.clickHandler = '';
                  labelSeg.clickParam = '';
                  var event = textStyle.event;

                  if (event) {
                    labelSeg.clickHandler = event.click || '';
                    labelSeg.clickParam = event.param || '';
                  }
                }

                label.cacheMode = this._cacheMode;
                var isAsset = this._font instanceof Font;

                if (isAsset && !this._isSystemFontUsed) {
                  label.font = this._font;
                } else {
                  label.fontFamily = this._fontFamily;
                }

                label.useSystemFont = this._isSystemFontUsed;
                label.lineHeight = this._lineHeight;
                label.updateRenderData(true);
                var assembler = label._assembler;

                if (assembler) {
                  assembler.updateRenderData(label);
                }
              };

              _proto._applyLayer = function _applyLayer() {
                for (var _iterator3 = _createForOfIteratorHelperLoose(this._segments), _step3; !(_step3 = _iterator3()).done;) {
                  var seg = _step3.value;
                  seg.node.layer = this.node.layer;
                }
              };

              _proto._resetLabelState = function _resetLabelState(label) {
                label.fontSize = this._fontSize;
                label.color = Color$1.WHITE;
                label.isBold = false;
                label.isItalic = false;
                label.isUnderline = false;
              };

              _createClass(RichText, [{
                key: "string",
                get: function get() {
                  return this._string;
                },
                set: function set(value) {
                  if (this._string === value) {
                    return;
                  }

                  this._string = value;

                  this._updateRichTextStatus();
                }
              }, {
                key: "horizontalAlign",
                get: function get() {
                  return this._horizontalAlign;
                },
                set: function set(value) {
                  if (this.horizontalAlign === value) {
                    return;
                  }

                  this._horizontalAlign = value;
                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "verticalAlign",
                get: function get() {
                  return this._verticalAlign;
                },
                set: function set(value) {
                  if (this._verticalAlign === value) {
                    return;
                  }

                  this._verticalAlign = value;
                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "fontSize",
                get: function get() {
                  return this._fontSize;
                },
                set: function set(value) {
                  if (this._fontSize === value) {
                    return;
                  }

                  this._fontSize = value;
                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "fontFamily",
                get: function get() {
                  return this._fontFamily;
                },
                set: function set(value) {
                  if (this._fontFamily === value) return;
                  this._fontFamily = value;
                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "font",
                get: function get() {
                  return this._font;
                },
                set: function set(value) {
                  if (this._font === value) {
                    return;
                  }

                  this._font = value;
                  this._layoutDirty = true;

                  if (this._font) {

                    this.useSystemFont = false;

                    this._onTTFLoaded();
                  } else {
                    this.useSystemFont = true;
                  }

                  this._updateRichTextStatus();
                }
              }, {
                key: "useSystemFont",
                get: function get() {
                  return this._isSystemFontUsed;
                },
                set: function set(value) {
                  if (this._isSystemFontUsed === value) {
                    return;
                  }

                  this._isSystemFontUsed = value;

                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "cacheMode",
                get: function get() {
                  return this._cacheMode;
                },
                set: function set(value) {
                  if (this._cacheMode === value) {
                    return;
                  }

                  this._cacheMode = value;

                  this._updateRichTextStatus();
                }
              }, {
                key: "maxWidth",
                get: function get() {
                  return this._maxWidth;
                },
                set: function set(value) {
                  if (this._maxWidth === value) {
                    return;
                  }

                  this._maxWidth = value;
                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "lineHeight",
                get: function get() {
                  return this._lineHeight;
                },
                set: function set(value) {
                  if (this._lineHeight === value) {
                    return;
                  }

                  this._lineHeight = value;
                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "imageAtlas",
                get: function get() {
                  return this._imageAtlas;
                },
                set: function set(value) {
                  if (this._imageAtlas === value) {
                    return;
                  }

                  this._imageAtlas = value;
                  this._layoutDirty = true;

                  this._updateRichTextStatus();
                }
              }, {
                key: "handleTouchEvent",
                get: function get() {
                  return this._handleTouchEvent;
                },
                set: function set(value) {
                  if (this._handleTouchEvent === value) {
                    return;
                  }

                  this._handleTouchEvent = value;

                  if (this.enabledInHierarchy) {
                    if (this.handleTouchEvent) {
                      this._addEventListeners();
                    } else {
                      this._removeEventListeners();
                    }
                  }
                }
              }]);

              return RichText;
            }(Component), _class3$6.HorizontalAlign = HorizontalTextAlignment, _class3$6.VerticalAlign = VerticalTextAlignment, _temp$d), (_applyDecoratedDescriptor(_class2$c.prototype, "string", [multiline, _dec5$8], Object.getOwnPropertyDescriptor(_class2$c.prototype, "string"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "horizontalAlign", [_dec6$8, _dec7$8], Object.getOwnPropertyDescriptor(_class2$c.prototype, "horizontalAlign"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "verticalAlign", [_dec8$7, _dec9$5], Object.getOwnPropertyDescriptor(_class2$c.prototype, "verticalAlign"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "fontSize", [_dec10$5], Object.getOwnPropertyDescriptor(_class2$c.prototype, "fontSize"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "fontFamily", [_dec11$4], Object.getOwnPropertyDescriptor(_class2$c.prototype, "fontFamily"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "font", [_dec12$4, _dec13$4], Object.getOwnPropertyDescriptor(_class2$c.prototype, "font"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "useSystemFont", [_dec14$3, _dec15$3], Object.getOwnPropertyDescriptor(_class2$c.prototype, "useSystemFont"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "cacheMode", [_dec16$2, _dec17$2], Object.getOwnPropertyDescriptor(_class2$c.prototype, "cacheMode"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "maxWidth", [_dec18$2], Object.getOwnPropertyDescriptor(_class2$c.prototype, "maxWidth"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "lineHeight", [_dec19$2], Object.getOwnPropertyDescriptor(_class2$c.prototype, "lineHeight"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "imageAtlas", [_dec20$2, _dec21$2], Object.getOwnPropertyDescriptor(_class2$c.prototype, "imageAtlas"), _class2$c.prototype), _applyDecoratedDescriptor(_class2$c.prototype, "handleTouchEvent", [_dec22$2], Object.getOwnPropertyDescriptor(_class2$c.prototype, "handleTouchEvent"), _class2$c.prototype), _descriptor$b = _applyDecoratedDescriptor(_class2$c.prototype, "_lineHeight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 40;
              }
            }), _descriptor2$9 = _applyDecoratedDescriptor(_class2$c.prototype, "_string", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '<color=#00ff00>Rich</color><color=#0fffff>Text</color>';
              }
            }), _descriptor3$6 = _applyDecoratedDescriptor(_class2$c.prototype, "_horizontalAlign", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return HorizontalTextAlignment.LEFT;
              }
            }), _descriptor4$6 = _applyDecoratedDescriptor(_class2$c.prototype, "_verticalAlign", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return VerticalTextAlignment.TOP;
              }
            }), _descriptor5$5 = _applyDecoratedDescriptor(_class2$c.prototype, "_fontSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 40;
              }
            }), _descriptor6$3 = _applyDecoratedDescriptor(_class2$c.prototype, "_maxWidth", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor7$2 = _applyDecoratedDescriptor(_class2$c.prototype, "_fontFamily", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 'Arial';
              }
            }), _descriptor8$2 = _applyDecoratedDescriptor(_class2$c.prototype, "_font", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor9$2 = _applyDecoratedDescriptor(_class2$c.prototype, "_isSystemFontUsed", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor10$2 = _applyDecoratedDescriptor(_class2$c.prototype, "_userDefinedFont", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor11$1 = _applyDecoratedDescriptor(_class2$c.prototype, "_cacheMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return CacheMode.NONE;
              }
            }), _descriptor12$1 = _applyDecoratedDescriptor(_class2$c.prototype, "_imageAtlas", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor13$1 = _applyDecoratedDescriptor(_class2$c.prototype, "_handleTouchEvent", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            })), _class2$c)) || _class$g) || _class$g) || _class$g) || _class$g) || _class$g));
            legacyCC.RichText = RichText;

            var _dec$h, _dec2$c, _dec3$b, _dec4$a, _class$h, _temp$e;
            var UIMeshRenderer = function (v) { return exports({ UIMeshRenderer: v, UIModelComponent: v }), v; }((_dec$h = ccclass('cc.UIMeshRenderer'), _dec2$c = help(), _dec3$b = executionOrder(110), _dec4$a = menu$1(), _dec$h(_class$h = _dec2$c(_class$h = _dec3$b(_class$h = _dec4$a(_class$h = executeInEditMode(_class$h = (_temp$e = function (_Component) {
              _inheritsLoose(UIMeshRenderer, _Component);

              function UIMeshRenderer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;
                _this._modelComponent = null;
                _this.stencilStage = Stage.DISABLED;
                return _this;
              }

              var _proto = UIMeshRenderer.prototype;

              _proto.__preload = function __preload() {
                this.node._uiProps.uiComp = this;
              };

              _proto.onLoad = function onLoad() {
                if (!this.node._uiProps.uiTransformComp) {
                  this.node.addComponent('cc.UITransform');
                }

                this._modelComponent = this.getComponent('cc.RenderableComponent');

                if (!this._modelComponent) {
                  console.warn("node '" + (this.node && this.node.name) + "' doesn't have any renderable component");
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this.node._uiProps.uiComp === this) {
                  this.node._uiProps.uiComp = null;
                }

                this._modelComponent = this.getComponent('cc.RenderableComponent');

                if (!this._modelComponent) {
                  return;
                }

                this._modelComponent._sceneGetter = null;
              };

              _proto.updateAssembler = function updateAssembler(render) {
                if (this._modelComponent) {
                  var models = this._modelComponent._collectModels();

                  this._modelComponent._detachFromScene();

                  for (var i = 0; i < models.length; i++) {
                    if (models[i].enabled) {
                      render.commitModel(this, models[i], this._modelComponent.material);
                    }
                  }

                  return true;
                }

                return false;
              };

              _proto.postUpdateAssembler = function postUpdateAssembler(render) {};

              _proto.update = function update() {
                this._fitUIRenderQueue();
              };

              _proto._fitUIRenderQueue = function _fitUIRenderQueue() {
                if (!this._modelComponent) {
                  return;
                }

                var matNum = this._modelComponent.sharedMaterials.length;

                for (var i = 0; i < matNum; i++) {
                  var material = this._modelComponent.getMaterialInstance(i);

                  if (material == null) {
                    continue;
                  }

                  var passes = material.passes;
                  var passNum = passes.length;

                  for (var j = 0; j < passNum; j++) {
                    var pass = passes[j];
                    pass._priority = RenderPriority.MAX - 11;
                    material.recompileShaders({
                      CC_FORCE_FORWARD_SHADING: true
                    }, j);
                  }
                }
              };

              _proto.markForUpdateRenderData = function markForUpdateRenderData(enable) {
              };

              _proto.setNodeDirty = function setNodeDirty() {};

              _proto.setTextureDirty = function setTextureDirty() {};

              _createClass(UIMeshRenderer, [{
                key: "modelComponent",
                get: function get() {
                  return this._modelComponent;
                }
              }]);

              return UIMeshRenderer;
            }(Component), _temp$e)) || _class$h) || _class$h) || _class$h) || _class$h) || _class$h));
            legacyCC.UIMeshRenderer = UIMeshRenderer;

            var UI_VIS_FLAG = Layers.Enum.NONE | Layers.Enum.UI_3D;
            var DrawBatch2D = exports('UIDrawBatch', function () {
              function DrawBatch2D() {
                this.bufferBatch = null;
                this.camera = null;
                this.renderScene = null;
                this.model = null;
                this.texture = null;
                this.sampler = null;
                this.useLocalData = null;
                this.isStatic = false;
                this.textureHash = 0;
                this.samplerHash = 0;
                this._passes = [];
                this._shaders = [];
                this._visFlags = UI_VIS_FLAG;
                this._inputAssembler = null;
                this._descriptorSet = null;
              }

              var _proto = DrawBatch2D.prototype;

              _proto.destroy = function destroy(ui) {
                this._passes = [];
              };

              _proto.clear = function clear() {
                this.bufferBatch = null;
                this.inputAssembler = null;
                this.descriptorSet = null;
                this.camera = null;
                this.texture = null;
                this.sampler = null;
                this.textureHash = 0;
                this.samplerHash = 0;
                this.model = null;
                this.isStatic = false;
                this.useLocalData = null;
                this.visFlags = UI_VIS_FLAG;
                this.renderScene = null;
              };

              _proto.fillPasses = function fillPasses(mat, dss, dssHash, bs, bsHash, patches, batcher) {
                if (mat) {
                  var passes = mat.passes;

                  if (!passes) {
                    return;
                  }

                  var hashFactor = 0;
                  this._shaders.length = passes.length;

                  for (var i = 0; i < passes.length; i++) {
                    if (!this._passes[i]) {
                      this._passes[i] = new Pass(legacyCC.director.root);
                    }

                    var mtlPass = passes[i];
                    var passInUse = this._passes[i];
                    mtlPass.update();

                    if (!dss) {
                      dss = mtlPass.depthStencilState;
                      dssHash = 0;
                    }

                    if (!bs) {
                      bs = mtlPass.blendState;
                      bsHash = 0;
                    }

                    if (bsHash === -1) {
                      bsHash = 0;
                    }

                    hashFactor = dssHash << 16 | bsHash;

                    passInUse._initPassFromTarget(mtlPass, dss, bs, hashFactor);

                    this._shaders[i] = passInUse.getShaderVariant(patches);
                  }
                }
              };

              _createClass(DrawBatch2D, [{
                key: "native",
                get: function get() {
                  return this._nativeObj;
                }
              }, {
                key: "inputAssembler",
                get: function get() {
                  return this._inputAssembler;
                },
                set: function set(ia) {
                  this._inputAssembler = ia;
                }
              }, {
                key: "descriptorSet",
                get: function get() {
                  return this._descriptorSet;
                },
                set: function set(ds) {
                  this._descriptorSet = ds;
                }
              }, {
                key: "visFlags",
                get: function get() {
                  return this._visFlags;
                },
                set: function set(vis) {
                  this._visFlags = vis;
                }
              }, {
                key: "passes",
                get: function get() {
                  return this._passes;
                }
              }, {
                key: "shaders",
                get: function get() {
                  return this._shaders;
                }
              }]);

              return DrawBatch2D;
            }());

            var _dec$i, _dec2$d, _dec3$c, _dec4$b, _dec5$9, _class$i, _class2$d, _temp$f;
            var UIStaticBatch = function (v) { return exports({ UIStaticBatch: v, UIStaticBatchComponent: v }), v; }((_dec$i = ccclass('cc.UIStaticBatch'), _dec2$d = help(), _dec3$c = menu$1(), _dec4$b = executionOrder(110), _dec5$9 = visible(), _dec$i(_class$i = _dec2$d(_class$i = _dec3$c(_class$i = _dec4$b(_class$i = (_class2$d = (_temp$f = function (_Renderable2D) {
              _inheritsLoose(UIStaticBatch, _Renderable2D);

              function UIStaticBatch() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Renderable2D.call.apply(_Renderable2D, [this].concat(args)) || this;
                _this._init = false;
                _this._bufferAccessor = null;
                _this._dirty = true;
                _this._uiDrawBatchList = [];
                return _this;
              }

              var _proto = UIStaticBatch.prototype;

              _proto.onLoad = function onLoad() {};

              _proto.onDestroy = function onDestroy() {};

              _proto.updateAssembler = function updateAssembler(render) {};

              _proto.postUpdateAssembler = function postUpdateAssembler(render) {};

              _proto.markAsDirty = function markAsDirty() {};

              _proto._requireDrawBatch = function _requireDrawBatch() {
                var batch = new DrawBatch2D();
                batch.isStatic = true;

                this._uiDrawBatchList.push(batch);

                return batch;
              };

              _proto._clearData = function _clearData() {
                if (this._bufferAccessor) {
                  this._bufferAccessor.reset();

                  var ui = this._getBatcher();

                  for (var i = 0; i < this._uiDrawBatchList.length; i++) {
                    var element = this._uiDrawBatchList[i];
                    element.destroy(ui);
                  }
                }

                this._uiDrawBatchList.length = 0;
                this._init = false;
              };

              _proto._getBatcher = function _getBatcher() {
                if (director.root && director.root.batcher2D) {
                  return director.root.batcher2D;
                }

                warnID(9301);
                return null;
              };

              _createClass(UIStaticBatch, [{
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(value) {
                  if (this._color === value) {
                    return;
                  }

                  this._color.set(value);
                }
              }, {
                key: "drawBatchList",
                get: function get() {
                  return this._uiDrawBatchList;
                }
              }]);

              return UIStaticBatch;
            }(Renderable2D), _temp$f), (_applyDecoratedDescriptor(_class2$d.prototype, "color", [override, _dec5$9], Object.getOwnPropertyDescriptor(_class2$d.prototype, "color"), _class2$d.prototype)), _class2$d)) || _class$i) || _class$i) || _class$i) || _class$i));

            var _dec$j, _dec2$e, _dec3$d, _dec4$c, _dec5$a, _dec6$9, _dec7$9, _dec8$8, _class$j, _class2$e, _descriptor$c, _descriptor2$a, _descriptor3$7, _temp$g;
            var LabelShadow = exports('LabelShadow', (_dec$j = ccclass('cc.LabelShadow'), _dec2$e = help(), _dec3$d = executionOrder(110), _dec4$c = menu$1(), _dec5$a = requireComponent(Label), _dec6$9 = tooltip(), _dec7$9 = tooltip(), _dec8$8 = tooltip(), _dec$j(_class$j = _dec2$e(_class$j = _dec3$d(_class$j = _dec4$c(_class$j = _dec5$a(_class$j = executeInEditMode(_class$j = (_class2$e = (_temp$g = function (_Component) {
              _inheritsLoose(LabelShadow, _Component);

              function LabelShadow() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_color", _descriptor$c, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_offset", _descriptor2$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_blur", _descriptor3$7, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = LabelShadow.prototype;

              _proto.onEnable = function onEnable() {
                this._updateRenderData();
              };

              _proto.onDisable = function onDisable() {
                this._updateRenderData();
              };

              _proto._updateRenderData = function _updateRenderData() {
                var label = this.node.getComponent(Label);

                if (label) {
                  label.updateRenderData(true);
                }
              };

              _createClass(LabelShadow, [{
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(value) {
                  if (this._color === value) {
                    return;
                  }

                  this._color.set(value);

                  this._updateRenderData();
                }
              }, {
                key: "offset",
                get: function get() {
                  return this._offset;
                },
                set: function set(value) {
                  this._offset = value;

                  this._updateRenderData();
                }
              }, {
                key: "blur",
                get: function get() {
                  return this._blur;
                },
                set: function set(value) {
                  this._blur = value;

                  this._updateRenderData();
                }
              }]);

              return LabelShadow;
            }(Component), _temp$g), (_descriptor$c = _applyDecoratedDescriptor(_class2$e.prototype, "_color", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(0, 0, 0, 255);
              }
            }), _descriptor2$a = _applyDecoratedDescriptor(_class2$e.prototype, "_offset", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2(2, 2);
              }
            }), _descriptor3$7 = _applyDecoratedDescriptor(_class2$e.prototype, "_blur", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 2;
              }
            }), _applyDecoratedDescriptor(_class2$e.prototype, "color", [_dec6$9], Object.getOwnPropertyDescriptor(_class2$e.prototype, "color"), _class2$e.prototype), _applyDecoratedDescriptor(_class2$e.prototype, "offset", [_dec7$9], Object.getOwnPropertyDescriptor(_class2$e.prototype, "offset"), _class2$e.prototype), _applyDecoratedDescriptor(_class2$e.prototype, "blur", [_dec8$8], Object.getOwnPropertyDescriptor(_class2$e.prototype, "blur"), _class2$e.prototype)), _class2$e)) || _class$j) || _class$j) || _class$j) || _class$j) || _class$j) || _class$j));

            var _dec$k, _dec2$f, _dec3$e, _dec4$d, _dec5$b, _class$k, _class2$f, _descriptor$d, _temp$h;
            var UIOpacity = function (v) { return exports({ UIOpacity: v, UIOpacityComponent: v }), v; }((_dec$k = ccclass('cc.UIOpacity'), _dec2$f = help(), _dec3$e = executionOrder(110), _dec4$d = menu$1(), _dec5$b = tooltip(), _dec$k(_class$k = _dec2$f(_class$k = _dec3$e(_class$k = _dec4$d(_class$k = executeInEditMode(_class$k = disallowMultiple(_class$k = (_class2$f = (_temp$h = function (_Component) {
              _inheritsLoose(UIOpacity, _Component);

              function UIOpacity() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_opacity", _descriptor$d, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = UIOpacity.prototype;

              _proto.onEnable = function onEnable() {
                this.node._uiProps.localOpacity = this._opacity / 255;
              };

              _proto.onDisable = function onDisable() {
                this.node._uiProps.localOpacity = 1;
              };

              _createClass(UIOpacity, [{
                key: "opacity",
                get: function get() {
                  return this._opacity;
                },
                set: function set(value) {
                  if (this._opacity === value) {
                    return;
                  }

                  value = clampf(value, 0, 255);
                  this._opacity = value;
                  this.node._uiProps.localOpacity = value / 255;
                }
              }]);

              return UIOpacity;
            }(Component), _temp$h), (_applyDecoratedDescriptor(_class2$f.prototype, "opacity", [editable, _dec5$b], Object.getOwnPropertyDescriptor(_class2$f.prototype, "opacity"), _class2$f.prototype), _descriptor$d = _applyDecoratedDescriptor(_class2$f.prototype, "_opacity", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 255;
              }
            })), _class2$f)) || _class$k) || _class$k) || _class$k) || _class$k) || _class$k) || _class$k));

            legacyCC.MaskComponent = Mask;
            js.setClassAlias(Mask, 'cc.MaskComponent');
            legacyCC.LabelComponent = Label;
            js.setClassAlias(Label, 'cc.LabelComponent');
            legacyCC.LabelOutlineComponent = LabelOutline;
            js.setClassAlias(LabelOutline, 'cc.LabelOutlineComponent');
            legacyCC.RichTextComponent = RichText;
            js.setClassAlias(RichText, 'cc.RichTextComponent');
            legacyCC.SpriteComponent = Sprite;
            js.setClassAlias(Sprite, 'cc.SpriteComponent');
            legacyCC.UIModelComponent = UIMeshRenderer;
            js.setClassAlias(UIMeshRenderer, 'cc.UIModelComponent');
            legacyCC.GraphicsComponent = Graphics;
            js.setClassAlias(Graphics, 'cc.GraphicsComponent');
            js.setClassAlias(UIStaticBatch, 'cc.UIStaticBatchComponent');
            js.setClassAlias(UIOpacity, 'cc.UIOpacityComponent');

            var Aim = function Aim(i, x, y) {
              this.i = void 0;
              this.x = void 0;
              this.y = void 0;
              this.prev = null;
              this.next = null;
              this.z = 0;
              this.prevZ = null;
              this.nextZ = null;
              this.steiner = false;
              this.i = i;
              this.x = x;
              this.y = y;
            };

            function linkedList(datas, start, end, dim, clockwise) {
              var i = 0;
              var last = null;

              if (clockwise === signedArea(datas, start, end, dim) > 0) {
                for (i = start; i < end; i += dim) {
                  last = insertNode(i, datas[i], datas[i + 1], last);
                }
              } else {
                for (i = end - dim; i >= start; i -= dim) {
                  last = insertNode(i, datas[i], datas[i + 1], last);
                }
              }

              if (last && equals(last, last.next)) {
                removeNode(last);
                last = last.next;
              }

              return last;
            }

            function filterPoints(start, end) {
              if (end === void 0) {
                end = null;
              }

              if (!start) {
                return start;
              }

              if (!end) {
                end = start;
              }

              var p = start;
              var again = false;

              do {
                again = false;

                if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
                  removeNode(p);
                  p = end = p.prev;

                  if (p === p.next) {
                    return null;
                  }

                  again = true;
                } else {
                  p = p.next;
                }
              } while (again || p !== end);

              return end;
            }

            function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
              if (pass === void 0) {
                pass = 0;
              }

              if (!ear) {
                return;
              }

              if (!pass && size) {
                indexCurve(ear, minX, minY, size);
              }

              var stop = ear;
              var prev = null;
              var next = null;

              while (ear.prev !== ear.next) {
                prev = ear.prev;
                next = ear.next;

                if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
                  triangles.push(prev.i / dim);
                  triangles.push(ear.i / dim);
                  triangles.push(next.i / dim);
                  removeNode(ear);
                  ear = next.next;
                  stop = next.next;
                  continue;
                }

                ear = next;

                if (ear === stop) {
                  if (!pass) {
                    earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);
                  } else if (pass === 1) {
                    ear = cureLocalIntersections(ear, triangles, dim);
                    earcutLinked(ear, triangles, dim, minX, minY, size, 2);
                  } else if (pass === 2) {
                    splitEarcut(ear, triangles, dim, minX, minY, size);
                  }

                  break;
                }
              }
            }

            function isEar(ear) {
              var a = ear.prev;
              var b = ear;
              var c = ear.next;

              if (area(a, b, c) >= 0) {
                return false;
              }

              var p = ear.next.next;

              while (p !== ear.prev) {
                if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
                  return false;
                }

                p = p.next;
              }

              return true;
            }

            function isEarHashed(ear, minX, minY, size) {
              var a = ear.prev;
              var b = ear;
              var c = ear.next;

              if (area(a, b, c) >= 0) {
                return false;
              }

              var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
              var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
              var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
              var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
              var minZ = zOrder(minTX, minTY, minX, minY, size);
              var maxZ = zOrder(maxTX, maxTY, minX, minY, size);
              var p = ear.nextZ;

              while (p && p.z <= maxZ) {
                if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
                  return false;
                }

                p = p.nextZ;
              }

              p = ear.prevZ;

              while (p && p.z >= minZ) {
                if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
                  return false;
                }

                p = p.prevZ;
              }

              return true;
            }

            function cureLocalIntersections(start, triangles, dim) {
              var p = start;

              do {
                var a = p.prev;
                var b = p.next.next;

                if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
                  triangles.push(a.i / dim);
                  triangles.push(p.i / dim);
                  triangles.push(b.i / dim);
                  removeNode(p);
                  removeNode(p.next);
                  p = start = b;
                }

                p = p.next;
              } while (p !== start);

              return p;
            }

            function splitEarcut(start, triangles, dim, minX, minY, size) {
              var a = start;

              do {
                var b = a.next.next;

                while (b !== a.prev) {
                  if (a.i !== b.i && isValidDiagonal(a, b)) {
                    var c = splitPolygon(a, b);
                    a = filterPoints(a, a.next);
                    c = filterPoints(c, c.next);
                    earcutLinked(a, triangles, dim, minX, minY, size);
                    earcutLinked(c, triangles, dim, minX, minY, size);
                    return;
                  }

                  b = b.next;
                }

                a = a.next;
              } while (a !== start);
            }

            function eliminateHoles(datas, holeIndices, outerNode, dim) {
              var queue = [];
              var i = 0;
              var len = 0;
              var start = 0;
              var end = 0;
              var list = null;

              for (i = 0, len = holeIndices.length; i < len; i++) {
                start = holeIndices[i] * dim;
                end = i < len - 1 ? holeIndices[i + 1] * dim : datas.length;
                list = linkedList(datas, start, end, dim, false);

                if (!list) {
                  continue;
                }

                if (list === list.next) {
                  list.steiner = true;
                }

                queue.push(getLeftmost(list));
              }

              queue.sort(compareX);

              if (!outerNode) {
                return outerNode;
              }

              for (i = 0; i < queue.length; i++) {
                eliminateHole(queue[i], outerNode);
                outerNode = filterPoints(outerNode, outerNode.next);
              }

              return outerNode;
            }

            function compareX(a, b) {
              return a.x - b.x;
            }

            function eliminateHole(hole, outerNode) {
              outerNode = findHoleBridge(hole, outerNode);

              if (outerNode) {
                var b = splitPolygon(outerNode, hole);
                filterPoints(b, b.next);
              }
            }

            function findHoleBridge(hole, outerNode) {
              var p = outerNode;
              var hx = hole.x;
              var hy = hole.y;
              var qx = -Infinity;
              var m = null;

              do {
                if (hy <= p.y && hy >= p.next.y) {
                  var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

                  if (x <= hx && x > qx) {
                    qx = x;

                    if (x === hx) {
                      if (hy === p.y) {
                        return p;
                      }

                      if (hy === p.next.y) {
                        return p.next;
                      }
                    }

                    m = p.x < p.next.x ? p : p.next;
                  }
                }

                p = p.next;
              } while (p !== outerNode);

              if (!m) {
                return null;
              }

              if (hx === qx) {
                return m.prev;
              }

              var stop = m;
              var mx = m.x;
              var my = m.y;
              var tanMin = Infinity;
              var tan;
              p = m.next;

              while (p !== stop) {
                if (hx >= p.x && p.x >= mx && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
                  tan = Math.abs(hy - p.y) / (hx - p.x);

                  if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {
                    m = p;
                    tanMin = tan;
                  }
                }

                p = p.next;
              }

              return m;
            }

            function indexCurve(start, minX, minY, size) {
              var p = start;

              do {
                if (p.z === null) {
                  p.z = zOrder(p.x, p.y, minX, minY, size);
                }

                p.prevZ = p.prev;
                p.nextZ = p.next;
                p = p.next;
              } while (p !== start);

              p.prevZ.nextZ = null;
              p.prevZ = null;
              sortLinked(p);
            }

            function sortLinked(list) {
              var i = 0;
              var p = null;
              var q = null;
              var e = null;
              var tail = null;
              var numMerges = 0;
              var pSize = 0;
              var qSize = 0;
              var inSize = 1;

              do {
                p = list;
                list = null;
                tail = null;
                numMerges = 0;

                while (p) {
                  numMerges++;
                  q = p;
                  pSize = 0;

                  for (i = 0; i < inSize; i++) {
                    pSize++;
                    q = q.nextZ;

                    if (!q) {
                      break;
                    }
                  }

                  qSize = inSize;

                  while (pSize > 0 || qSize > 0 && q) {
                    if (pSize === 0) {
                      e = q;
                      q = q.nextZ;
                      qSize--;
                    } else if (qSize === 0 || !q) {
                      e = p;
                      p = p.nextZ;
                      pSize--;
                    } else if (p.z <= q.z) {
                      e = p;
                      p = p.nextZ;
                      pSize--;
                    } else {
                      e = q;
                      q = q.nextZ;
                      qSize--;
                    }

                    if (tail) {
                      tail.nextZ = e;
                    } else {
                      list = e;
                    }

                    e.prevZ = tail;
                    tail = e;
                  }

                  p = q;
                }

                tail.nextZ = null;
                inSize *= 2;
              } while (numMerges > 1);

              return list;
            }

            function zOrder(x, y, minX, minY, size) {
              x = 32767 * (x - minX) / size;
              y = 32767 * (y - minY) / size;
              x = (x | x << 8) & 0x00FF00FF;
              x = (x | x << 4) & 0x0F0F0F0F;
              x = (x | x << 2) & 0x33333333;
              x = (x | x << 1) & 0x55555555;
              y = (y | y << 8) & 0x00FF00FF;
              y = (y | y << 4) & 0x0F0F0F0F;
              y = (y | y << 2) & 0x33333333;
              y = (y | y << 1) & 0x55555555;
              return x | y << 1;
            }

            function getLeftmost(start) {
              var p = start;
              var leftmost = start;

              do {
                if (p.x < leftmost.x) {
                  leftmost = p;
                }

                p = p.next;
              } while (p !== start);

              return leftmost;
            }

            function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
              return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
            }

            function isValidDiagonal(a, b) {
              return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
            }

            function area(p, q, r) {
              return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
            }

            function equals(p1, p2) {
              return p1.x === p2.x && p1.y === p2.y;
            }

            function intersects(p1, q1, p2, q2) {
              if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) {
                return true;
              }

              return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
            }

            function intersectsPolygon(a, b) {
              var p = a;

              do {
                if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) {
                  return true;
                }

                p = p.next;
              } while (p !== a);

              return false;
            }

            function locallyInside(a, b) {
              return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
            }

            function middleInside(a, b) {
              var p = a;
              var inside = false;
              var px = (a.x + b.x) / 2;
              var py = (a.y + b.y) / 2;

              do {
                if (p.y > py !== p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
                  inside = !inside;
                }

                p = p.next;
              } while (p !== a);

              return inside;
            }

            function splitPolygon(a, b) {
              var a2 = new Aim(a.i, a.x, a.y);
              var b2 = new Aim(b.i, b.x, b.y);
              var an = a.next;
              var bp = b.prev;
              a.next = b;
              b.prev = a;
              a2.next = an;
              an.prev = a2;
              b2.next = a2;
              a2.prev = b2;
              bp.next = b2;
              b2.prev = bp;
              return b2;
            }

            function insertNode(i, x, y, last) {
              var p = new Aim(i, x, y);

              if (!last) {
                p.prev = p;
                p.next = p;
              } else {
                p.next = last.next;
                p.prev = last;
                last.next.prev = p;
                last.next = p;
              }

              return p;
            }

            function removeNode(p) {
              p.next.prev = p.prev;
              p.prev.next = p.next;

              if (p.prevZ) {
                p.prevZ.nextZ = p.nextZ;
              }

              if (p.nextZ) {
                p.nextZ.prevZ = p.prevZ;
              }
            }

            function signedArea(datas, start, end, dim) {
              var sum = 0;

              for (var i = start, j = end - dim; i < end; i += dim) {
                sum += (datas[j] - datas[i]) * (datas[i + 1] + datas[j + 1]);
                j = i;
              }

              return sum;
            }

            function earcut(datas, holeIndices, dim) {
              dim = dim || 3;
              var hasHoles = holeIndices ? holeIndices.length : 0;
              var outerLen = hasHoles ? holeIndices[0] * dim : datas.length;
              var outerNode = linkedList(datas, 0, outerLen, dim, true);
              var triangles = [];

              if (!outerNode) {
                return triangles;
              }

              var minX = 0;
              var minY = 0;
              var maxX = 0;
              var maxY = 0;
              var x = 0;
              var y = 0;
              var size = 0;

              if (hasHoles) {
                outerNode = eliminateHoles(datas, holeIndices, outerNode, dim);
              }

              if (datas.length > 80 * dim) {
                minX = maxX = datas[0];
                minY = maxY = datas[1];

                for (var i = dim; i < outerLen; i += dim) {
                  x = datas[i];
                  y = datas[i + 1];

                  if (x < minX) {
                    minX = x;
                  }

                  if (y < minY) {
                    minY = y;
                  }

                  if (x > maxX) {
                    maxX = x;
                  }

                  if (y > maxY) {
                    maxY = y;
                  }
                }

                size = Math.max(maxX - minX, maxY - minY);
              }

              earcutLinked(outerNode, triangles, dim, minX, minY, size);
              return triangles;
            }

            var MAX_VERTEX = 65535;
            var MAX_INDICES = MAX_VERTEX * 2;
            var PI$1 = Math.PI;
            var min$1 = Math.min;
            var max$1 = Math.max;
            var ceil = Math.ceil;
            var acos = Math.acos;
            var cos$1 = Math.cos;
            var sin$1 = Math.sin;
            var atan2 = Math.atan2;
            var attrBytes = 8;
            var _renderData = null;
            var _impl = null;

            var _curColor = new Color$1();

            var vec3_temps = [];

            for (var i = 0; i < 4; i++) {
              vec3_temps.push(new Vec3());
            }

            function curveDivs(r, arc, tol) {
              var da = acos(r / (r + tol)) * 2.0;
              return max$1(2, ceil(arc / da));
            }

            function clamp(v, minNum, maxNum) {
              if (v < minNum) {
                return minNum;
              } else if (v > maxNum) {
                return maxNum;
              }

              return v;
            }

            var graphicsAssembler = {
              useModel: true,
              updateRenderData: function updateRenderData(graphics) {},
              fillBuffers: function fillBuffers(graphics, renderer) {},
              renderIA: function renderIA(graphics, renderer) {},
              getRenderData: function getRenderData(graphics, vertexCount) {
                if (!_impl) {
                  return null;
                }

                var renderDataList = _impl.getRenderDataList();

                var renderData = renderDataList[_impl.dataOffset];

                if (!renderData) {
                  return null;
                }

                var meshBuffer = renderData;
                var maxVertexCount = meshBuffer ? meshBuffer.vertexStart + vertexCount : 0;

                if (maxVertexCount > MAX_VERTEX || maxVertexCount * 3 > MAX_INDICES) {
                  ++_impl.dataOffset;

                  if (_impl.dataOffset < renderDataList.length) {
                    renderData = renderDataList[_impl.dataOffset];
                  } else {
                    renderData = _impl.requestRenderData();
                    renderDataList[_impl.dataOffset] = renderData;
                  }

                  meshBuffer = renderData;
                }

                if (meshBuffer && meshBuffer.vertexCount < maxVertexCount) {
                  meshBuffer.request(vertexCount, vertexCount * 3);
                }

                return renderData;
              },
              stroke: function stroke(graphics) {
                Color$1.copy(_curColor, graphics.strokeColor);

                if (!graphics.impl) {
                  return;
                }

                this._flattenPaths(graphics.impl);

                this._expandStroke(graphics);

                graphics.impl.updatePathOffset = true;
                this.end(graphics);
              },
              fill: function fill(graphics) {
                Color$1.copy(_curColor, graphics.fillColor);

                this._expandFill(graphics);

                if (graphics.impl) {
                  graphics.impl.updatePathOffset = true;
                }

                this.end(graphics);
              },
              end: function end(graphics) {
                graphics.markForUpdateRenderData();
              },
              _expandStroke: function _expandStroke(graphics) {
                var w = graphics.lineWidth * 0.5;
                var lineCap = graphics.lineCap;
                var lineJoin = graphics.lineJoin;
                var miterLimit = graphics.miterLimit;
                _impl = graphics.impl;

                if (!_impl) {
                  return;
                }

                var nCap = curveDivs(w, PI$1, _impl.tessTol);

                this._calculateJoins(_impl, w, lineJoin, miterLimit);

                var paths = _impl.paths;
                var vertexCount = 0;

                for (var _i = _impl.pathOffset, l = _impl.pathLength; _i < l; _i++) {
                  var path = paths[_i];
                  var pointsLength = path.points.length;

                  if (lineJoin === LineJoin.ROUND) {
                    vertexCount += (pointsLength + path.bevel * (nCap + 2) + 1) * 2;
                  } else {
                    vertexCount += (pointsLength + path.bevel * 5 + 1) * 2;
                  }

                  if (!path.closed) {
                    if (lineCap === LineCap.ROUND) {
                      vertexCount += (nCap * 2 + 2) * 2;
                    } else {
                      vertexCount += (3 + 3) * 2;
                    }
                  }
                }

                var meshBuffer = _renderData = this.getRenderData(graphics, vertexCount);

                if (!meshBuffer) {
                  return;
                }

                var vData = meshBuffer.vData;
                var iData = meshBuffer.iData;

                for (var _i2 = _impl.pathOffset, _l = _impl.pathLength; _i2 < _l; _i2++) {
                  var _path = paths[_i2];
                  var pts = _path.points;
                  var _pointsLength = pts.length;
                  var offset = meshBuffer.vertexStart;
                  var p0 = void 0;
                  var p1 = void 0;
                  var start = 0;
                  var end = 0;
                  var loop = _path.closed;

                  if (loop) {
                    p0 = pts[_pointsLength - 1];
                    p1 = pts[0];
                    start = 0;
                    end = _pointsLength;
                  } else {
                    p0 = pts[0];
                    p1 = pts[1];
                    start = 1;
                    end = _pointsLength - 1;
                  }

                  p1 = p1 || p0;

                  if (!loop) {
                    var dPos = new Point(p1.x, p1.y);
                    dPos.subtract(p0);
                    dPos.normalize();
                    var dx = dPos.x;
                    var dy = dPos.y;

                    if (lineCap === LineCap.BUTT) {
                      this._buttCapStart(p0, dx, dy, w, 0);
                    } else if (lineCap === LineCap.SQUARE) {
                      this._buttCapStart(p0, dx, dy, w, w);
                    } else if (lineCap === LineCap.ROUND) {
                      this._roundCapStart(p0, dx, dy, w, nCap);
                    }
                  }

                  for (var j = start; j < end; ++j) {
                    if (lineJoin === LineJoin.ROUND) {
                      this._roundJoin(p0, p1, w, w, nCap);
                    } else if ((p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL)) !== 0) {
                      this._bevelJoin(p0, p1, w, w);
                    } else {
                      this._vSet(p1.x + p1.dmx * w, p1.y + p1.dmy * w, 1);

                      this._vSet(p1.x - p1.dmx * w, p1.y - p1.dmy * w, -1);
                    }

                    p0 = p1;
                    p1 = pts[j + 1];
                  }

                  if (loop) {
                    var vDataOffset = offset * attrBytes;

                    this._vSet(vData[vDataOffset], vData[vDataOffset + 1], 1);

                    this._vSet(vData[vDataOffset + attrBytes], vData[vDataOffset + attrBytes + 1], -1);
                  } else {
                    var _dPos = new Point(p1.x, p1.y);

                    _dPos.subtract(p0);

                    _dPos.normalize();

                    var _dx = _dPos.x;
                    var _dy = _dPos.y;

                    if (lineCap === LineCap.BUTT) {
                      this._buttCapEnd(p1, _dx, _dy, w, 0);
                    } else if (lineCap === LineCap.SQUARE) {
                      this._buttCapEnd(p1, _dx, _dy, w, w);
                    } else if (lineCap === LineCap.ROUND) {
                      this._roundCapEnd(p1, _dx, _dy, w, nCap);
                    }
                  }

                  var indicesOffset = meshBuffer.indexStart;

                  for (var begin = offset + 2, over = meshBuffer.vertexStart; begin < over; begin++) {
                    iData[indicesOffset++] = begin - 2;
                    iData[indicesOffset++] = begin - 1;
                    iData[indicesOffset++] = begin;
                  }

                  meshBuffer.indexStart = indicesOffset;
                }

                _renderData = null;
                _impl = null;
              },
              _expandFill: function _expandFill(graphics) {
                _impl = graphics.impl;

                if (!_impl) {
                  return;
                }

                var paths = _impl.paths;
                var vertexCount = 0;

                for (var _i3 = _impl.pathOffset, l = _impl.pathLength; _i3 < l; _i3++) {
                  var path = paths[_i3];
                  var pointsLength = path.points.length;
                  vertexCount += pointsLength;
                }

                var renderData = _renderData = this.getRenderData(graphics, vertexCount);

                if (!renderData) {
                  return;
                }

                var meshBuffer = renderData;
                var vData = meshBuffer.vData;
                var iData = meshBuffer.iData;

                for (var _i4 = _impl.pathOffset, _l2 = _impl.pathLength; _i4 < _l2; _i4++) {
                  var _path2 = paths[_i4];
                  var pts = _path2.points;
                  var _pointsLength2 = pts.length;

                  if (_pointsLength2 === 0) {
                    continue;
                  }

                  var vertexOffset = renderData.vertexStart;

                  for (var j = 0; j < _pointsLength2; ++j) {
                    this._vSet(pts[j].x, pts[j].y);
                  }

                  var indicesOffset = renderData.indexStart;

                  if (_path2.complex) {
                    var earcutData = [];

                    for (var _j = vertexOffset, end = renderData.vertexStart; _j < end; _j++) {
                      var vDataOffset = _j * attrBytes;
                      earcutData.push(vData[vDataOffset++]);
                      earcutData.push(vData[vDataOffset++]);
                      earcutData.push(vData[vDataOffset++]);
                    }

                    var newIndices = earcut(earcutData, null, 3);

                    if (!newIndices || newIndices.length === 0) {
                      continue;
                    }

                    for (var _j2 = 0, nIndices = newIndices.length; _j2 < nIndices; _j2++) {
                      iData[indicesOffset++] = newIndices[_j2] + vertexOffset;
                    }
                  } else {
                    var first = vertexOffset;

                    for (var start = vertexOffset + 2, _end = meshBuffer.vertexStart; start < _end; start++) {
                      iData[indicesOffset++] = first;
                      iData[indicesOffset++] = start - 1;
                      iData[indicesOffset++] = start;
                    }
                  }

                  meshBuffer.indexStart = indicesOffset;
                }

                _renderData = null;
                _impl = null;
              },
              _calculateJoins: function _calculateJoins(impl, w, lineJoin, miterLimit) {
                var iw = 0.0;

                if (w > 0.0) {
                  iw = 1 / w;
                }

                var paths = impl.paths;

                for (var _i5 = impl.pathOffset, l = impl.pathLength; _i5 < l; _i5++) {
                  var path = paths[_i5];
                  var pts = path.points;
                  var ptsLength = pts.length;
                  var p0 = pts[ptsLength - 1];
                  var p1 = pts[0];
                  path.bevel = 0;

                  for (var j = 0; j < ptsLength; j++) {
                    var dmr2 = 0;
                    var cross = 0;
                    var limit = 0;
                    var dlx0 = p0.dy;
                    var dly0 = -p0.dx;
                    var dlx1 = p1.dy;
                    var dly1 = -p1.dx;
                    p1.dmx = (dlx0 + dlx1) * 0.5;
                    p1.dmy = (dly0 + dly1) * 0.5;
                    dmr2 = p1.dmx * p1.dmx + p1.dmy * p1.dmy;

                    if (dmr2 > 0.000001) {
                      var scale = 1 / dmr2;

                      if (scale > 600) {
                        scale = 600;
                      }

                      p1.dmx *= scale;
                      p1.dmy *= scale;
                    }

                    cross = p1.dx * p0.dy - p0.dx * p1.dy;

                    if (cross > 0) {
                      p1.flags |= PointFlags.PT_LEFT;
                    }

                    limit = max$1(11, min$1(p0.len, p1.len) * iw);

                    if (dmr2 * limit * limit < 1) {
                      p1.flags |= PointFlags.PT_INNERBEVEL;
                    }

                    if (p1.flags & PointFlags.PT_CORNER) {
                      if (dmr2 * miterLimit * miterLimit < 1 || lineJoin === LineJoin.BEVEL || lineJoin === LineJoin.ROUND) {
                        p1.flags |= PointFlags.PT_BEVEL;
                      }
                    }

                    if ((p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL)) !== 0) {
                      path.bevel++;
                    }

                    p0 = p1;
                    p1 = pts[j + 1];
                  }
                }
              },
              _flattenPaths: function _flattenPaths(impl) {
                var paths = impl.paths;

                for (var _i6 = impl.pathOffset, l = impl.pathLength; _i6 < l; _i6++) {
                  var path = paths[_i6];
                  var pts = path.points;
                  var p0 = pts[pts.length - 1];
                  var p1 = pts[0];

                  if (pts.length > 2 && p0.equals(p1)) {
                    path.closed = true;
                    pts.pop();
                    p0 = pts[pts.length - 1];
                  }

                  for (var j = 0, size = pts.length; j < size; j++) {
                    var dPos = new Point(p1.x, p1.y);
                    dPos.subtract(p0);
                    p0.len = dPos.length();

                    if (dPos.x || dPos.y) {
                      dPos.normalize();
                    }

                    p0.dx = dPos.x;
                    p0.dy = dPos.y;
                    p0 = p1;
                    p1 = pts[j + 1];
                  }
                }
              },
              _chooseBevel: function _chooseBevel(bevel, p0, p1, w) {
                var x = p1.x;
                var y = p1.y;
                var x0 = 0;
                var y0 = 0;
                var x1 = 0;
                var y1 = 0;

                if (bevel !== 0) {
                  x0 = x + p0.dy * w;
                  y0 = y - p0.dx * w;
                  x1 = x + p1.dy * w;
                  y1 = y - p1.dx * w;
                } else {
                  x0 = x1 = x + p1.dmx * w;
                  y0 = y1 = y + p1.dmy * w;
                }

                return [x0, y0, x1, y1];
              },
              _buttCapStart: function _buttCapStart(p, dx, dy, w, d) {
                var px = p.x - dx * d;
                var py = p.y - dy * d;
                var dlx = dy;
                var dly = -dx;

                this._vSet(px + dlx * w, py + dly * w, 1);

                this._vSet(px - dlx * w, py - dly * w, -1);
              },
              _buttCapEnd: function _buttCapEnd(p, dx, dy, w, d) {
                var px = p.x + dx * d;
                var py = p.y + dy * d;
                var dlx = dy;
                var dly = -dx;

                this._vSet(px + dlx * w, py + dly * w, 1);

                this._vSet(px - dlx * w, py - dly * w, -1);
              },
              _roundCapStart: function _roundCapStart(p, dx, dy, w, nCap) {
                var px = p.x;
                var py = p.y;
                var dlx = dy;
                var dly = -dx;

                for (var _i7 = 0; _i7 < nCap; _i7++) {
                  var a = _i7 / (nCap - 1) * PI$1;
                  var ax = cos$1(a) * w;
                  var ay = sin$1(a) * w;

                  this._vSet(px - dlx * ax - dx * ay, py - dly * ax - dy * ay, 1);

                  this._vSet(px, py, 0);
                }

                this._vSet(px + dlx * w, py + dly * w, 1);

                this._vSet(px - dlx * w, py - dly * w, -1);
              },
              _roundCapEnd: function _roundCapEnd(p, dx, dy, w, nCap) {
                var px = p.x;
                var py = p.y;
                var dlx = dy;
                var dly = -dx;

                this._vSet(px + dlx * w, py + dly * w, 1);

                this._vSet(px - dlx * w, py - dly * w, -1);

                for (var _i8 = 0; _i8 < nCap; _i8++) {
                  var a = _i8 / (nCap - 1) * PI$1;
                  var ax = cos$1(a) * w;
                  var ay = sin$1(a) * w;

                  this._vSet(px, py, 0);

                  this._vSet(px - dlx * ax + dx * ay, py - dly * ax + dy * ay, 1);
                }
              },
              _roundJoin: function _roundJoin(p0, p1, lw, rw, nCap) {
                var dlx0 = p0.dy;
                var dly0 = -p0.dx;
                var dlx1 = p1.dy;
                var dly1 = -p1.dx;
                var p1x = p1.x;
                var p1y = p1.y;

                if ((p1.flags & PointFlags.PT_LEFT) !== 0) {
                  var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);

                  var lx0 = out[0];
                  var ly0 = out[1];
                  var lx1 = out[2];
                  var ly1 = out[3];
                  var a0 = atan2(-dly0, -dlx0);
                  var a1 = atan2(-dly1, -dlx1);

                  if (a1 > a0) {
                    a1 -= PI$1 * 2;
                  }

                  this._vSet(lx0, ly0, 1);

                  this._vSet(p1x - dlx0 * rw, p1.y - dly0 * rw, -1);

                  var n = clamp(ceil((a0 - a1) / PI$1) * nCap, 2, nCap);

                  for (var _i9 = 0; _i9 < n; _i9++) {
                    var u = _i9 / (n - 1);
                    var a = a0 + u * (a1 - a0);
                    var rx = p1x + cos$1(a) * rw;
                    var ry = p1y + sin$1(a) * rw;

                    this._vSet(p1x, p1y, 0);

                    this._vSet(rx, ry, -1);
                  }

                  this._vSet(lx1, ly1, 1);

                  this._vSet(p1x - dlx1 * rw, p1y - dly1 * rw, -1);
                } else {
                  var _out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);

                  var rx0 = _out[0];
                  var ry0 = _out[1];
                  var rx1 = _out[2];
                  var ry1 = _out[3];

                  var _a = atan2(dly0, dlx0);

                  var _a2 = atan2(dly1, dlx1);

                  if (_a2 < _a) {
                    _a2 += PI$1 * 2;
                  }

                  this._vSet(p1x + dlx0 * rw, p1y + dly0 * rw, 1);

                  this._vSet(rx0, ry0, -1);

                  var _n = clamp(ceil((_a2 - _a) / PI$1) * nCap, 2, nCap);

                  for (var _i10 = 0; _i10 < _n; _i10++) {
                    var _u = _i10 / (_n - 1);

                    var _a3 = _a + _u * (_a2 - _a);

                    var lx = p1x + cos$1(_a3) * lw;
                    var ly = p1y + sin$1(_a3) * lw;

                    this._vSet(lx, ly, 1);

                    this._vSet(p1x, p1y, 0);
                  }

                  this._vSet(p1x + dlx1 * rw, p1y + dly1 * rw, 1);

                  this._vSet(rx1, ry1, -1);
                }
              },
              _bevelJoin: function _bevelJoin(p0, p1, lw, rw) {
                var rx0 = 0;
                var ry0 = 0;
                var rx1 = 0;
                var ry1 = 0;
                var lx0 = 0;
                var ly0 = 0;
                var lx1 = 0;
                var ly1 = 0;
                var dlx0 = p0.dy;
                var dly0 = -p0.dx;
                var dlx1 = p1.dy;
                var dly1 = -p1.dx;

                if (p1.flags & PointFlags.PT_LEFT) {
                  var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);

                  lx0 = out[0];
                  ly0 = out[1];
                  lx1 = out[2];
                  ly1 = out[3];

                  this._vSet(lx0, ly0, 1);

                  this._vSet(p1.x - dlx0 * rw, p1.y - dly0 * rw, -1);

                  this._vSet(lx1, ly1, 1);

                  this._vSet(p1.x - dlx1 * rw, p1.y - dly1 * rw, -1);
                } else {
                  var _out2 = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);

                  rx0 = _out2[0];
                  ry0 = _out2[1];
                  rx1 = _out2[2];
                  ry1 = _out2[3];

                  this._vSet(p1.x + dlx0 * lw, p1.y + dly0 * lw, 1);

                  this._vSet(rx0, ry0, -1);

                  this._vSet(p1.x + dlx1 * lw, p1.y + dly1 * lw, 1);

                  this._vSet(rx1, ry1, -1);
                }
              },
              _vSet: function _vSet(x, y, distance) {
                if (distance === void 0) {
                  distance = 0;
                }

                if (!_renderData) {
                  return;
                }

                var meshBuffer = _renderData;
                var dataOffset = meshBuffer.vertexStart * attrBytes;
                var vData = meshBuffer.vData;
                vData[dataOffset++] = x;
                vData[dataOffset++] = y;
                vData[dataOffset++] = 0;
                Color$1.toArray(vData, _curColor, dataOffset);
                dataOffset += 4;
                vData[dataOffset++] = distance;
                meshBuffer.vertexStart++;
              }
            };

            var graphicsAssemblerManager = exports('graphicsAssembler', {
              getAssembler: function getAssembler(sprite) {
                return graphicsAssembler;
              }
            });
            Graphics.Assembler = graphicsAssemblerManager;

            var LetterInfo = function LetterInfo() {
              this["char"] = '';
              this.valid = true;
              this.x = 0;
              this.y = 0;
              this.line = 0;
              this.hash = '';
            };

            var _tmpRect = new Rect$1();

            var _comp = null;
            var _uiTrans = null;
            var _horizontalKerning = [];
            var _lettersInfo = [];
            var _linesWidth = [];
            var _linesOffsetX = [];

            var _labelDimensions = new Size$1();

            var _contentSize = new Size$1();

            var letterPosition = new Vec2();
            var _lineSpacing = 0;
            var _fntConfig = null;
            var _numberOfLines = 0;
            var _textDesiredHeight = 0;
            var _letterOffsetY = 0;
            var _tailoredTopY = 0;
            var _tailoredBottomY = 0;
            var _bmfontScale = 1.0;
            var _spriteFrame = null;
            var _string = '';
            var _fontSize = 0;
            var _originFontSize = 0;
            var _hAlign = 0;
            var _vAlign = 0;
            var _spacingX = 0;
            var _lineHeight = 0;
            var _overflow = 0;
            var _isWrapText = false;
            var _labelWidth = 0;
            var _labelHeight = 0;
            var _maxLineWidth = 0;
            var bmfontUtils = {
              updateRenderData: function updateRenderData(comp) {
                if (!comp.renderData) {
                  return;
                }

                if (_comp === comp) {
                  return;
                }

                if (comp.renderData.vertDirty) {
                  _comp = comp;
                  _uiTrans = _comp.node._uiProps.uiTransformComp;

                  this._updateFontFamily(comp);

                  this._updateProperties(comp);

                  this._updateLabelInfo(comp);

                  this._updateContent();

                  _comp.actualFontSize = _fontSize;

                  _uiTrans.setContentSize(_contentSize);

                  this.updateUVs(comp);
                  _comp.renderData.vertDirty = false;

                  _comp.markForUpdateRenderData(false);

                  _comp = null;

                  this._resetProperties();
                }

                if (comp.spriteFrame) {
                  var renderData = comp.renderData;
                  renderData.updateRenderData(comp, comp.spriteFrame);
                }
              },
              updateUVs: function updateUVs(label) {
                var renderData = label.renderData;
                var vData = renderData.chunk.vb;
                var vertexCount = renderData.vertexCount;
                var dataList = renderData.data;
                var vertexOffset = 3;

                for (var i = 0; i < vertexCount; i++) {
                  var vert = dataList[i];
                  vData[vertexOffset] = vert.u;
                  vData[vertexOffset + 1] = vert.v;
                  vertexOffset += 9;
                }
              },
              _updateFontScale: function _updateFontScale() {
                _bmfontScale = _fontSize / _originFontSize;
              },
              _updateFontFamily: function _updateFontFamily(comp) {
                var fontAsset = comp.font;
                _spriteFrame = fontAsset.spriteFrame;
                _fntConfig = fontAsset.fntConfig;
                shareLabelInfo.fontAtlas = fontAsset.fontDefDictionary;
                dynamicAtlasManager.packToDynamicAtlas(comp, _spriteFrame);
              },
              _updateLabelInfo: function _updateLabelInfo(comp) {
                shareLabelInfo.hash = '';
                shareLabelInfo.margin = 0;
              },
              _updateProperties: function _updateProperties(comp) {
                _string = comp.string.toString();
                _fontSize = comp.fontSize;
                _originFontSize = _fntConfig ? _fntConfig.fontSize : comp.fontSize;
                _hAlign = comp.horizontalAlign;
                _vAlign = comp.verticalAlign;
                _spacingX = comp.spacingX;
                _overflow = comp.overflow;
                _lineHeight = comp._lineHeight;
                var contentSize = _uiTrans.contentSize;
                _contentSize.width = contentSize.width;
                _contentSize.height = contentSize.height;

                if (_overflow === Overflow.NONE) {
                  _isWrapText = false;
                  _contentSize.width += shareLabelInfo.margin * 2;
                  _contentSize.height += shareLabelInfo.margin * 2;
                } else if (_overflow === Overflow.RESIZE_HEIGHT) {
                  _isWrapText = true;
                  _contentSize.height += shareLabelInfo.margin * 2;
                } else {
                  _isWrapText = comp.enableWrapText;
                }

                shareLabelInfo.lineHeight = _lineHeight;
                shareLabelInfo.fontSize = _fontSize;

                this._setupBMFontOverflowMetrics();
              },
              _resetProperties: function _resetProperties() {
                _fntConfig = null;
                _spriteFrame = null;
                shareLabelInfo.hash = '';
                shareLabelInfo.margin = 0;
              },
              _updateContent: function _updateContent() {
                this._updateFontScale();

                this._computeHorizontalKerningForText();

                this._alignText();
              },
              _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {
                var string = _string;
                var stringLen = string.length;
                var kerningDict = _fntConfig.kerningDict;
                var horizontalKerning = _horizontalKerning;
                var prev = -1;

                for (var i = 0; i < stringLen; ++i) {
                  var key = string.charCodeAt(i);
                  var kerningAmount = kerningDict[prev << 16 | key & 0xffff] || 0;

                  if (i < stringLen - 1) {
                    horizontalKerning[i] = kerningAmount;
                  } else {
                    horizontalKerning[i] = 0;
                  }

                  prev = key;
                }
              },
              _multilineTextWrap: function _multilineTextWrap(nextTokenFunc) {
                var textLen = _string.length;
                var lineIndex = 0;
                var nextTokenX = 0;
                var nextTokenY = 0;
                var longestLine = 0;
                var letterRight = 0;
                var highestY = 0;
                var lowestY = 0;
                var letterDef = null;

                for (var index = 0; index < textLen;) {
                  var character = _string.charAt(index);

                  if (character === '\n') {
                    _linesWidth.push(letterRight);

                    letterRight = 0;
                    lineIndex++;
                    nextTokenX = 0;
                    nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;

                    this._recordPlaceholderInfo(index, character);

                    index++;
                    continue;
                  }

                  var tokenLen = nextTokenFunc(_string, index, textLen);
                  var tokenHighestY = highestY;
                  var tokenLowestY = lowestY;
                  var tokenRight = letterRight;
                  var nextLetterX = nextTokenX;
                  var newLine = false;

                  for (var tmp = 0; tmp < tokenLen; ++tmp) {
                    var letterIndex = index + tmp;
                    character = _string.charAt(letterIndex);

                    if (character === '\r') {
                      this._recordPlaceholderInfo(letterIndex, character);

                      continue;
                    }

                    letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);

                    if (!letterDef) {
                      this._recordPlaceholderInfo(letterIndex, character);

                      console.log("Can't find letter definition in texture atlas " + _fntConfig.atlasName + " for letter:" + character);
                      continue;
                    }

                    var letterX = nextLetterX + letterDef.offsetX * _bmfontScale - shareLabelInfo.margin;

                    if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.w * _bmfontScale > _maxLineWidth && !isUnicodeSpace(character)) {
                      _linesWidth.push(letterRight);

                      letterRight = 0;
                      lineIndex++;
                      nextTokenX = 0;
                      nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;
                      newLine = true;
                      break;
                    } else {
                      letterPosition.x = letterX;
                    }

                    letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale;

                    this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);

                    if (letterIndex + 1 < _horizontalKerning.length && letterIndex < textLen - 1) {
                      nextLetterX += _horizontalKerning[letterIndex + 1];
                    }

                    nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
                    tokenRight = letterPosition.x + letterDef.w * _bmfontScale;

                    if (tokenHighestY < letterPosition.y) {
                      tokenHighestY = letterPosition.y;
                    }

                    if (tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale) {
                      tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale;
                    }
                  }

                  if (newLine) {
                    continue;
                  }

                  nextTokenX = nextLetterX;
                  letterRight = tokenRight;

                  if (highestY < tokenHighestY) {
                    highestY = tokenHighestY;
                  }

                  if (lowestY > tokenLowestY) {
                    lowestY = tokenLowestY;
                  }

                  if (longestLine < letterRight) {
                    longestLine = letterRight;
                  }

                  index += tokenLen;
                }

                _linesWidth.push(letterRight);

                _numberOfLines = lineIndex + 1;
                _textDesiredHeight = _numberOfLines * _lineHeight * this._getFontScale();

                if (_numberOfLines > 1) {
                  _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
                }

                _contentSize.width = _labelWidth;
                _contentSize.height = _labelHeight;

                if (_labelWidth <= 0) {
                  _contentSize.width = parseFloat(longestLine.toFixed(2)) + shareLabelInfo.margin * 2;
                }

                if (_labelHeight <= 0) {
                  _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2)) + shareLabelInfo.margin * 2;
                }

                _tailoredTopY = _contentSize.height;
                _tailoredBottomY = 0;

                if (highestY > 0) {
                  _tailoredTopY = _contentSize.height + highestY;
                }

                if (lowestY < -_textDesiredHeight) {
                  _tailoredBottomY = _textDesiredHeight + lowestY;
                }

                return true;
              },
              _getFirstCharLen: function _getFirstCharLen() {
                return 1;
              },
              _getFontScale: function _getFontScale() {
                return _overflow === Overflow.SHRINK ? _bmfontScale : 1;
              },
              _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
                var character = text.charAt(startIndex);

                if (isUnicodeCJK(character) || character === '\n' || isUnicodeSpace(character)) {
                  return 1;
                }

                var len = 1;
                var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);

                if (!letterDef) {
                  return len;
                }

                var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
                var letterX = 0;

                for (var index = startIndex + 1; index < textLen; ++index) {
                  character = text.charAt(index);
                  letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);

                  if (!letterDef) {
                    break;
                  }

                  letterX = nextLetterX + letterDef.offsetX * _bmfontScale;

                  if (letterX + letterDef.w * _bmfontScale > _maxLineWidth && !isUnicodeSpace(character) && _maxLineWidth > 0) {
                    return len;
                  }

                  nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;

                  if (character === '\n' || isUnicodeSpace(character) || isUnicodeCJK(character)) {
                    break;
                  }

                  len++;
                }

                return len;
              },
              _multilineTextWrapByWord: function _multilineTextWrapByWord() {
                return this._multilineTextWrap(this._getFirstWordLen);
              },
              _multilineTextWrapByChar: function _multilineTextWrapByChar() {
                return this._multilineTextWrap(this._getFirstCharLen);
              },
              _recordPlaceholderInfo: function _recordPlaceholderInfo(letterIndex, _char) {
                if (letterIndex >= _lettersInfo.length) {
                  var tmpInfo = new LetterInfo();

                  _lettersInfo.push(tmpInfo);
                }

                _lettersInfo[letterIndex]["char"] = _char;
                _lettersInfo[letterIndex].hash = "" + _char.charCodeAt(0) + shareLabelInfo.hash;
                _lettersInfo[letterIndex].valid = false;
              },
              _recordLetterInfo: function _recordLetterInfo(letterPosition, character, letterIndex, lineIndex) {
                if (letterIndex >= _lettersInfo.length) {
                  var tmpInfo = new LetterInfo();

                  _lettersInfo.push(tmpInfo);
                }

                var _char2 = character.charCodeAt(0);

                var key = "" + _char2 + shareLabelInfo.hash;
                _lettersInfo[letterIndex].line = lineIndex;
                _lettersInfo[letterIndex]["char"] = character;
                _lettersInfo[letterIndex].hash = key;
                _lettersInfo[letterIndex].valid = shareLabelInfo.fontAtlas.getLetter(key).valid;
                _lettersInfo[letterIndex].x = letterPosition.x;
                _lettersInfo[letterIndex].y = letterPosition.y;
              },
              _alignText: function _alignText() {
                _textDesiredHeight = 0;
                _linesWidth.length = 0;

                {
                  this._multilineTextWrapByWord();
                }

                this._computeAlignmentOffset();

                if (_overflow === Overflow.SHRINK) {
                  if (_fontSize > 0 && this._isVerticalClamp()) {
                    this._shrinkLabelToContentSize(this._isVerticalClamp);
                  }
                }

                if (!this._updateQuads()) {
                  if (_overflow === Overflow.SHRINK) {
                    this._shrinkLabelToContentSize(this._isHorizontalClamp);
                  }
                }
              },
              _scaleFontSizeDown: function _scaleFontSizeDown(fontSize) {
                var shouldUpdateContent = true;

                if (!fontSize) {
                  fontSize = 0.1;
                  shouldUpdateContent = false;
                }

                _fontSize = fontSize;

                if (shouldUpdateContent) {
                  this._updateContent();
                }
              },
              _shrinkLabelToContentSize: function _shrinkLabelToContentSize(lambda) {
                var fontSize = _fontSize;
                var left = 0;
                var right = fontSize | 0;
                var mid = 0;

                while (left < right) {
                  mid = left + right + 1 >> 1;
                  var newFontSize = mid;

                  if (newFontSize <= 0) {
                    break;
                  }

                  _bmfontScale = newFontSize / _originFontSize;

                  {
                    this._multilineTextWrapByWord();
                  }

                  this._computeAlignmentOffset();

                  if (lambda()) {
                    right = mid - 1;
                  } else {
                    left = mid;
                  }
                }

                if (left >= 0) {
                  this._scaleFontSizeDown(left);
                }
              },
              _isVerticalClamp: function _isVerticalClamp() {
                if (_textDesiredHeight > _contentSize.height) {
                  return true;
                } else {
                  return false;
                }
              },
              _isHorizontalClamp: function _isHorizontalClamp() {
                var letterClamp = false;

                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                  var letterInfo = _lettersInfo[ctr];

                  if (letterInfo.valid) {
                    var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(letterInfo["char"], shareLabelInfo);

                    if (!letterDef) {
                      continue;
                    }

                    var px = letterInfo.x + letterDef.w * _bmfontScale;
                    var lineIndex = letterInfo.line;

                    if (_labelWidth > 0) {
                      if (!_isWrapText) {
                        if (px > _contentSize.width) {
                          letterClamp = true;
                          break;
                        }
                      } else {
                        var wordWidth = _linesWidth[lineIndex];

                        if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                          letterClamp = true;
                          break;
                        }
                      }
                    }
                  }
                }

                return letterClamp;
              },
              _isHorizontalClamped: function _isHorizontalClamped(px, lineIndex) {
                var wordWidth = _linesWidth[lineIndex];
                var letterOverClamp = px > _contentSize.width || px < 0;

                if (!_isWrapText) {
                  return letterOverClamp;
                } else {
                  return wordWidth > _contentSize.width && letterOverClamp;
                }
              },
              _updateQuads: function _updateQuads() {
                if (!_comp) {
                  return false;
                }

                var texture = _spriteFrame ? _spriteFrame.texture : shareLabelInfo.fontAtlas.getTexture();
                var renderData = _comp.renderData;
                renderData.dataLength = 0;
                renderData.resize(0, 0);
                var anchorPoint = _uiTrans.anchorPoint;
                var contentSize = _contentSize;
                var appX = anchorPoint.x * contentSize.width;
                var appY = anchorPoint.y * contentSize.height;
                var ret = true;

                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                  var letterInfo = _lettersInfo[ctr];

                  if (!letterInfo.valid) {
                    continue;
                  }

                  var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);

                  if (!letterDef) {
                    console.warn('Can\'t find letter in this bitmap-font');
                    continue;
                  }

                  _tmpRect.height = letterDef.h;
                  _tmpRect.width = letterDef.w;
                  _tmpRect.x = letterDef.u;
                  _tmpRect.y = letterDef.v;
                  var py = letterInfo.y + _letterOffsetY;

                  if (_labelHeight > 0) {
                    if (py > _tailoredTopY) {
                      var clipTop = py - _tailoredTopY;
                      _tmpRect.y += clipTop;
                      _tmpRect.height -= clipTop;
                      py -= clipTop;
                    }

                    if (py - letterDef.h * _bmfontScale < _tailoredBottomY && _overflow === Overflow.CLAMP) {
                      _tmpRect.height = py < _tailoredBottomY ? 0 : (py - _tailoredBottomY) / _bmfontScale;
                    }
                  }

                  var lineIndex = letterInfo.line;
                  var px = letterInfo.x + letterDef.w / 2 * _bmfontScale + _linesOffsetX[lineIndex];

                  if (_labelWidth > 0) {
                    if (this._isHorizontalClamped(px, lineIndex)) {
                      if (_overflow === Overflow.CLAMP) {
                        _tmpRect.width = 0;
                      } else if (_overflow === Overflow.SHRINK) {
                        if (_contentSize.width > letterDef.w) {
                          ret = false;
                          break;
                        } else {
                          _tmpRect.width = 0;
                        }
                      }
                    }
                  }

                  if (_tmpRect.height > 0 && _tmpRect.width > 0) {
                    var isRotated = this._determineRect();

                    var letterPositionX = letterInfo.x + _linesOffsetX[letterInfo.line];
                    this.appendQuad(_comp, texture, _tmpRect, isRotated, letterPositionX - appX, py - appY, _bmfontScale);
                  }
                }

                return ret;
              },
              appendQuad: function appendQuad(comp, texture, rect, rotated, x, y, scale) {},
              _determineRect: function _determineRect() {
                var isRotated = _spriteFrame.isRotated();

                var originalSize = _spriteFrame.getOriginalSize();

                var rect = _spriteFrame.getRect();

                var offset = _spriteFrame.getOffset();

                var trimmedLeft = offset.x + (originalSize.width - rect.width) / 2;
                var trimmedTop = offset.y - (originalSize.height - rect.height) / 2;

                if (!isRotated) {
                  _tmpRect.x += rect.x - trimmedLeft;
                  _tmpRect.y += rect.y + trimmedTop;
                } else {
                  var originalX = _tmpRect.x;
                  _tmpRect.x = rect.x + rect.height - _tmpRect.y - _tmpRect.height - trimmedTop;
                  _tmpRect.y = originalX + rect.y - trimmedLeft;

                  if (_tmpRect.y < 0) {
                    _tmpRect.height += trimmedTop;
                  }
                }

                return isRotated;
              },
              _computeAlignmentOffset: function _computeAlignmentOffset() {
                _linesOffsetX.length = 0;

                switch (_hAlign) {
                  case HorizontalTextAlignment.LEFT:
                    for (var i = 0; i < _numberOfLines; ++i) {
                      _linesOffsetX.push(0);
                    }

                    break;

                  case HorizontalTextAlignment.CENTER:
                    for (var _i = 0, l = _linesWidth.length; _i < l; _i++) {
                      _linesOffsetX.push((_contentSize.width - _linesWidth[_i]) / 2);
                    }

                    break;

                  case HorizontalTextAlignment.RIGHT:
                    for (var _i2 = 0, _l = _linesWidth.length; _i2 < _l; _i2++) {
                      _linesOffsetX.push(_contentSize.width - _linesWidth[_i2]);
                    }

                    break;
                }

                _letterOffsetY = _contentSize.height;

                if (_vAlign !== VerticalTextAlignment.TOP) {
                  var blank = _contentSize.height - _textDesiredHeight + _lineHeight * this._getFontScale() - _originFontSize * _bmfontScale;

                  if (_vAlign === VerticalTextAlignment.BOTTOM) {
                    _letterOffsetY -= blank;
                  } else {
                    _letterOffsetY -= blank / 2;
                  }
                }
              },
              _setupBMFontOverflowMetrics: function _setupBMFontOverflowMetrics() {
                var newWidth = _contentSize.width;
                var newHeight = _contentSize.height;

                if (_overflow === Overflow.RESIZE_HEIGHT) {
                  newHeight = 0;
                }

                if (_overflow === Overflow.NONE) {
                  newWidth = 0;
                  newHeight = 0;
                }

                _labelWidth = newWidth;
                _labelHeight = newHeight;
                _labelDimensions.width = newWidth;
                _labelDimensions.height = newHeight;
                _maxLineWidth = newWidth;
              }
            };

            var tempColor = new Color$1(255, 255, 255, 255);
            var bmfont = {
              createData: function createData(comp) {
                return comp.requestRenderData();
              },
              fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                tempColor.set(comp.color);
                tempColor.a = node._uiProps.opacity * 255;
                fillMeshVertices3D(node, renderer, comp.renderData, tempColor);
              },
              appendQuad: function appendQuad(comp, spriteFrame, rect, rotated, x, y, scale) {
                var renderData = comp.renderData;

                if (!renderData) {
                  return;
                }

                var dataOffset = renderData.dataLength;
                renderData.dataLength += 4;
                renderData.resize(renderData.dataLength, renderData.dataLength / 2 * 3);
                var dataList = renderData.data;
                var texW = spriteFrame.width;
                var texH = spriteFrame.height;
                var rectWidth = rect.width;
                var rectHeight = rect.height;
                var l = 0;
                var b = 0;
                var t = 0;
                var r = 0;

                if (!rotated) {
                  l = rect.x / texW;
                  r = (rect.x + rectWidth) / texW;
                  b = (rect.y + rectHeight) / texH;
                  t = rect.y / texH;
                  dataList[dataOffset].u = l;
                  dataList[dataOffset].v = b;
                  dataList[dataOffset + 1].u = r;
                  dataList[dataOffset + 1].v = b;
                  dataList[dataOffset + 2].u = l;
                  dataList[dataOffset + 2].v = t;
                  dataList[dataOffset + 3].u = r;
                  dataList[dataOffset + 3].v = t;
                } else {
                  l = rect.x / texW;
                  r = (rect.x + rectHeight) / texW;
                  b = (rect.y + rectWidth) / texH;
                  t = rect.y / texH;
                  dataList[dataOffset].u = l;
                  dataList[dataOffset].v = t;
                  dataList[dataOffset + 1].u = l;
                  dataList[dataOffset + 1].v = b;
                  dataList[dataOffset + 2].u = r;
                  dataList[dataOffset + 2].v = t;
                  dataList[dataOffset + 3].u = r;
                  dataList[dataOffset + 3].v = b;
                }

                dataList[dataOffset].x = x;
                dataList[dataOffset].y = y - rectHeight * scale;
                dataList[dataOffset + 1].x = x + rectWidth * scale;
                dataList[dataOffset + 1].y = y - rectHeight * scale;
                dataList[dataOffset + 2].x = x;
                dataList[dataOffset + 2].y = y;
                dataList[dataOffset + 3].x = x + rectWidth * scale;
                dataList[dataOffset + 3].y = y;
              },
              updateColor: function updateColor(comp) {}
            };
            addon(bmfont, bmfontUtils);

            var _atlasWidth = 1024;
            var _atlasHeight = 1024;
            var _shareAtlas = null;
            var letterFont = mixin(bmfontUtils, {
              getAssemblerData: function getAssemblerData() {
                if (!_shareAtlas) {
                  _shareAtlas = new LetterAtlas(_atlasWidth, _atlasHeight);
                }

                return _shareAtlas.getTexture();
              },
              _updateFontFamily: function _updateFontFamily(comp) {
                shareLabelInfo.fontAtlas = _shareAtlas;
                shareLabelInfo.fontFamily = this._getFontFamily(comp);
                var outline = comp.getComponent(LabelOutline);

                if (outline && outline.enabled) {
                  shareLabelInfo.isOutlined = true;
                  shareLabelInfo.margin = outline.width;
                  shareLabelInfo.out = outline.color.clone();
                  shareLabelInfo.out.a = outline.color.a * comp.color.a / 255.0;
                } else {
                  shareLabelInfo.isOutlined = false;
                  shareLabelInfo.margin = 0;
                }
              },
              _getFontFamily: function _getFontFamily(comp) {
                var fontFamily = 'Arial';

                if (!comp.useSystemFont) {
                  if (comp.font) {
                    fontFamily = comp.font._nativeAsset || 'Arial';
                  }
                } else {
                  fontFamily = comp.fontFamily || 'Arial';
                }

                return fontFamily;
              },
              _updateLabelInfo: function _updateLabelInfo(comp) {
                shareLabelInfo.fontDesc = this._getFontDesc();
                shareLabelInfo.color = comp.color;
                shareLabelInfo.hash = computeHash(shareLabelInfo);
              },
              _getFontDesc: function _getFontDesc() {
                var fontDesc = shareLabelInfo.fontSize.toString() + "px ";
                fontDesc += shareLabelInfo.fontFamily;

                return fontDesc;
              },
              _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {},
              _determineRect: function _determineRect(tempRect) {
                return false;
              }
            });

            var tempColor$1 = new Color$1(255, 255, 255, 255);
            var letter = {
              createData: function createData(comp) {
                return comp.requestRenderData();
              },
              fillBuffers: function fillBuffers(comp, renderer) {
                if (!comp.renderData) {
                  return;
                }

                var node = comp.node;
                tempColor$1.a = node._uiProps.opacity * 255;
                fillMeshVertices3D(node, renderer, comp.renderData, tempColor$1);
              },
              updateColor: function updateColor(comp) {},
              appendQuad: bmfont.appendQuad
            };
            addon(letter, letterFont);

            var Overflow$1 = Label.Overflow;
            var MAX_SIZE = 2048;

            var _BASELINE_OFFSET$1 = getBaselineOffset();

            var _invisibleAlpha = (1 / 255).toFixed(3);

            var _context = null;
            var _canvas = null;
            var _texture = null;
            var _fontDesc = '';
            var _string$1 = '';
            var _fontSize$1 = 0;
            var _drawFontsize = 0;
            var _splitStrings = [];

            var _canvasSize = new Size$1();

            var _lineHeight$1 = 0;
            var _hAlign$1 = 0;
            var _vAlign$1 = 0;

            var _color = new Color$1();

            var _alpha = 1;
            var _fontFamily = '';
            var _overflow$1 = Overflow$1.NONE;
            var _isWrapText$1 = false;
            var _outlineComp = null;

            var _outlineColor = Color$1.BLACK.clone();

            var _shadowComp = null;

            var _shadowColor = Color$1.BLACK.clone();

            var _canvasPadding = new Rect$1();

            var _contentSizeExtend = Size$1.ZERO.clone();

            var _nodeContentSize = Size$1.ZERO.clone();

            var _startPosition = Vec2.ZERO.clone();

            var _drawUnderlinePos = Vec2.ZERO.clone();

            var _drawUnderlineWidth = 0;
            var _underlineThickness = 0;
            var _isBold = false;
            var _isItalic = false;
            var _isUnderline = false;
            var Alignment = ['left', 'center', 'right'];
            var ttfUtils = {
              getAssemblerData: function getAssemblerData() {
                var sharedLabelData = Label._canvasPool.get();

                return sharedLabelData;
              },
              resetAssemblerData: function resetAssemblerData(assemblerData) {
                if (assemblerData) {
                  Label._canvasPool.put(assemblerData);
                }
              },
              updateRenderData: function updateRenderData(comp) {
                if (!comp.renderData) {
                  return;
                }

                if (comp.renderData.vertDirty) {
                  var trans = comp.node._uiProps.uiTransformComp;

                  this._updateFontFamily(comp);

                  this._updateProperties(comp, trans);

                  this._calculateLabelFont();

                  this._updateLabelDimensions();

                  this._updateTexture(comp);

                  this._calDynamicAtlas(comp);

                  comp.actualFontSize = _fontSize$1;
                  trans.setContentSize(_canvasSize);
                  this.updateVertexData(comp);
                  this.updateUVs(comp);
                  comp.markForUpdateRenderData(false);
                  _context = null;
                  _canvas = null;
                  _texture = null;
                }

                if (comp.spriteFrame) {
                  var renderData = comp.renderData;
                  renderData.updateRenderData(comp, comp.spriteFrame);
                }
              },
              updateVertexData: function updateVertexData(comp) {},
              updateUVs: function updateUVs(comp) {},
              _updateFontFamily: function _updateFontFamily(comp) {
                if (!comp.useSystemFont) {
                  if (comp.font) {
                    _fontFamily = comp.font._nativeAsset || 'Arial';
                  } else {
                    _fontFamily = 'Arial';
                  }
                } else {
                  _fontFamily = comp.fontFamily || 'Arial';
                }
              },
              _updateProperties: function _updateProperties(comp, trans) {
                var assemblerData = comp.assemblerData;

                if (!assemblerData) {
                  return;
                }

                _context = assemblerData.context;
                _canvas = assemblerData.canvas;
                _texture = comp.spriteFrame;
                _string$1 = comp.string.toString();
                _fontSize$1 = comp.fontSize;
                _drawFontsize = _fontSize$1;
                _overflow$1 = comp.overflow;
                _nodeContentSize.width = _canvasSize.width = trans.width;
                _nodeContentSize.height = _canvasSize.height = trans.height;
                _underlineThickness = comp.underlineHeight;
                _lineHeight$1 = comp.lineHeight;
                _hAlign$1 = comp.horizontalAlign;
                _vAlign$1 = comp.verticalAlign;
                _color = comp.color;
                _alpha = comp.node._uiProps.opacity;
                _isBold = comp.isBold;
                _isItalic = comp.isItalic;
                _isUnderline = comp.isUnderline;

                if (_overflow$1 === Overflow$1.NONE) {
                  _isWrapText$1 = false;
                } else if (_overflow$1 === Overflow$1.RESIZE_HEIGHT) {
                  _isWrapText$1 = true;
                } else {
                  _isWrapText$1 = comp.enableWrapText;
                }

                _outlineComp = LabelOutline && comp.getComponent(LabelOutline);
                _outlineComp = _outlineComp && _outlineComp.enabled && _outlineComp.width > 0 ? _outlineComp : null;

                if (_outlineComp) {
                  _outlineColor.set(_outlineComp.color);
                }

                _shadowComp = LabelShadow && comp.getComponent(LabelShadow);
                _shadowComp = _shadowComp && _shadowComp.enabled ? _shadowComp : null;

                if (_shadowComp) {
                  _shadowColor.set(_shadowComp.color);
                }

                this._updatePaddingRect();
              },
              _updatePaddingRect: function _updatePaddingRect() {
                var top = 0;
                var bottom = 0;
                var left = 0;
                var right = 0;
                var outlineWidth = 0;
                _contentSizeExtend.width = _contentSizeExtend.height = 0;

                if (_outlineComp) {
                  outlineWidth = _outlineComp.width;
                  top = bottom = left = right = outlineWidth;
                  _contentSizeExtend.width = _contentSizeExtend.height = outlineWidth * 2;
                }

                if (_shadowComp) {
                  var shadowWidth = _shadowComp.blur + outlineWidth;
                  var offsetX = _shadowComp.offset.x;
                  var offsetY = _shadowComp.offset.y;
                  left = Math.max(left, -offsetX + shadowWidth);
                  right = Math.max(right, offsetX + shadowWidth);
                  top = Math.max(top, offsetY + shadowWidth);
                  bottom = Math.max(bottom, -offsetY + shadowWidth);
                }

                if (_isItalic) {
                  var offset = _drawFontsize * Math.tan(12 * 0.0174532925);

                  right += offset;
                  _contentSizeExtend.width += offset;
                }

                _canvasPadding.x = left;
                _canvasPadding.y = top;
                _canvasPadding.width = left + right;
                _canvasPadding.height = top + bottom;
              },
              _calculateFillTextStartPosition: function _calculateFillTextStartPosition() {
                var labelX = 0;

                if (_hAlign$1 === HorizontalTextAlignment.RIGHT) {
                  labelX = _canvasSize.width - _canvasPadding.width;
                } else if (_hAlign$1 === HorizontalTextAlignment.CENTER) {
                  labelX = (_canvasSize.width - _canvasPadding.width) / 2;
                }

                var lineHeight = this._getLineHeight();

                var drawStartY = lineHeight * (_splitStrings.length - 1);
                var firstLinelabelY = _fontSize$1 * (1 - BASELINE_RATIO / 2);

                if (_vAlign$1 !== VerticalTextAlignment.TOP) {
                  var blank = drawStartY + _canvasPadding.height + _fontSize$1 - _canvasSize.height;

                  if (_vAlign$1 === VerticalTextAlignment.BOTTOM) {
                    blank += BASELINE_RATIO / 2 * _fontSize$1;
                    firstLinelabelY -= blank;
                  } else {
                    firstLinelabelY -= blank / 2;
                  }
                }

                firstLinelabelY += _BASELINE_OFFSET$1 * _fontSize$1;

                _startPosition.set(labelX + _canvasPadding.x, firstLinelabelY + _canvasPadding.y);
              },
              _updateTexture: function _updateTexture(comp) {
                if (!_context || !_canvas) {
                  return;
                }

                _context.clearRect(0, 0, _canvas.width, _canvas.height);

                _context.font = _fontDesc;

                this._calculateFillTextStartPosition();

                var lineHeight = this._getLineHeight();

                _context.lineJoin = 'round';

                if (_outlineComp) {
                  _context.fillStyle = "rgba(" + _outlineColor.r + ", " + _outlineColor.g + ", " + _outlineColor.b + ", " + _invisibleAlpha + ")";

                  _context.fillRect(0, 0, _canvas.width, _canvas.height);
                } else if (comp._srcBlendFactor === BlendFactor.SRC_ALPHA) {
                  _context.fillStyle = "rgba(" + _color.r + ", " + _color.g + ", " + _color.b + ", " + _invisibleAlpha + ")";

                  _context.fillRect(0, 0, _canvas.width, _canvas.height);
                }

                _context.fillStyle = "rgb(" + _color.r + ", " + _color.g + ", " + _color.b + ")";
                var drawTextPosX = _startPosition.x;
                var drawTextPosY = 0;

                this._drawTextEffect(_startPosition, lineHeight);

                for (var i = 0; i < _splitStrings.length; ++i) {
                  drawTextPosY = _startPosition.y + i * lineHeight;

                  if (_outlineComp) {
                    _context.strokeText(_splitStrings[i], drawTextPosX, drawTextPosY);
                  }

                  _context.fillText(_splitStrings[i], drawTextPosX, drawTextPosY);
                }

                if (_shadowComp) {
                  _context.shadowColor = 'transparent';
                }

                this._uploadTexture(comp);
              },
              _uploadTexture: function _uploadTexture(comp) {
                if (comp.cacheMode === Label.CacheMode.BITMAP) {
                  var frame = comp.ttfSpriteFrame;
                  dynamicAtlasManager.deleteAtlasSpriteFrame(frame);

                  frame._resetDynamicAtlasFrame();
                }

                if (_texture && _canvas) {
                  var tex;

                  if (_texture instanceof SpriteFrame) {
                    tex = _texture.texture;
                  } else {
                    tex = _texture;
                  }

                  var uploadAgain = _canvas.width !== 0 && _canvas.height !== 0;

                  if (uploadAgain) {
                    tex.reset({
                      width: _canvas.width,
                      height: _canvas.height,
                      mipmapLevel: 1
                    });
                    tex.uploadData(_canvas);
                    tex.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);

                    if (_texture instanceof SpriteFrame) {
                      _texture.rect = new Rect$1(0, 0, _canvas.width, _canvas.height);

                      _texture._calculateUV();
                    }

                    if (comp.renderData) {
                      comp.renderData.textureDirty = true;
                    }

                    if (legacyCC.director.root && legacyCC.director.root.batcher2D) {
                      legacyCC.director.root.batcher2D._releaseDescriptorSetCache(tex.getHash());
                    }
                  }
                }
              },
              _calDynamicAtlas: function _calDynamicAtlas(comp) {
                if (comp.cacheMode !== Label.CacheMode.BITMAP || !_canvas || _canvas.width <= 0 || _canvas.height <= 0) return;
                var frame = comp.ttfSpriteFrame;
                dynamicAtlasManager.packToDynamicAtlas(comp, frame);
              },
              _setupOutline: function _setupOutline() {
                _context.strokeStyle = "rgba(" + _outlineColor.r + ", " + _outlineColor.g + ", " + _outlineColor.b + ", " + _outlineColor.a / 255 + ")";
                _context.lineWidth = _outlineComp.width * 2;
              },
              _setupShadow: function _setupShadow() {
                _context.shadowColor = "rgba(" + _shadowColor.r + ", " + _shadowColor.g + ", " + _shadowColor.b + ", " + _shadowColor.a / 255 + ")";
                _context.shadowBlur = _shadowComp.blur;
                _context.shadowOffsetX = _shadowComp.offset.x;
                _context.shadowOffsetY = -_shadowComp.offset.y;
              },
              _drawTextEffect: function _drawTextEffect(startPosition, lineHeight) {
                if (!_shadowComp && !_outlineComp && !_isUnderline) return;
                var isMultiple = _splitStrings.length > 1 && _shadowComp;

                var measureText = this._measureText(_context, _fontDesc);

                var drawTextPosX = 0;
                var drawTextPosY = 0;

                if (_shadowComp) {
                  this._setupShadow();
                }

                if (_outlineComp) {
                  this._setupOutline();
                }

                for (var i = 0; i < _splitStrings.length; ++i) {
                  drawTextPosX = startPosition.x;
                  drawTextPosY = startPosition.y + i * lineHeight;

                  if (isMultiple) {
                    if (_outlineComp) {
                      _context.strokeText(_splitStrings[i], drawTextPosX, drawTextPosY);
                    }

                    _context.fillText(_splitStrings[i], drawTextPosX, drawTextPosY);
                  }

                  if (_isUnderline) {
                    _drawUnderlineWidth = measureText(_splitStrings[i]);

                    if (_hAlign$1 === HorizontalTextAlignment.RIGHT) {
                      _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth;
                    } else if (_hAlign$1 === HorizontalTextAlignment.CENTER) {
                      _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth / 2;
                    } else {
                      _drawUnderlinePos.x = startPosition.x;
                    }

                    _drawUnderlinePos.y = drawTextPosY + _drawFontsize / 8;

                    _context.fillRect(_drawUnderlinePos.x, _drawUnderlinePos.y, _drawUnderlineWidth, _underlineThickness);
                  }
                }

                if (isMultiple) {
                  _context.shadowColor = 'transparent';
                }
              },
              _updateLabelDimensions: function _updateLabelDimensions() {
                _canvasSize.width = Math.min(_canvasSize.width, MAX_SIZE);
                _canvasSize.height = Math.min(_canvasSize.height, MAX_SIZE);
                var recreate = false;

                if (_canvas.width !== _canvasSize.width) {
                  _canvas.width = _canvasSize.width;
                  recreate = true;
                }

                if (_canvas.height !== _canvasSize.height) {
                  _canvas.height = _canvasSize.height;
                  recreate = true;
                }

                if (recreate) _context.font = _fontDesc;
                _context.textAlign = Alignment[_hAlign$1];
                _context.textBaseline = 'alphabetic';
              },
              _getFontDesc: function _getFontDesc() {
                var fontDesc = _fontSize$1.toString() + "px ";
                fontDesc += _fontFamily;

                if (_isBold) {
                  fontDesc = "bold " + fontDesc;
                }

                if (_isItalic) {
                  fontDesc = "italic " + fontDesc;
                }

                return fontDesc;
              },
              _getLineHeight: function _getLineHeight() {
                var nodeSpacingY = _lineHeight$1;

                if (nodeSpacingY === 0) {
                  nodeSpacingY = _fontSize$1;
                } else {
                  nodeSpacingY = nodeSpacingY * _fontSize$1 / _drawFontsize;
                }

                return nodeSpacingY | 0;
              },
              _calculateParagraphLength: function _calculateParagraphLength(paragraphedStrings, ctx) {
                var paragraphLength = [];

                for (var _iterator = _createForOfIteratorHelperLoose(paragraphedStrings), _step; !(_step = _iterator()).done;) {
                  var para = _step.value;
                  var width = safeMeasureText(ctx, para, _fontDesc);
                  paragraphLength.push(width);
                }

                return paragraphLength;
              },
              _measureText: function _measureText(ctx, fontDesc) {
                return function (string) {
                  return safeMeasureText(ctx, string, fontDesc);
                };
              },
              _calculateShrinkFont: function _calculateShrinkFont(paragraphedStrings) {
                if (!_context) return;

                var paragraphLength = this._calculateParagraphLength(paragraphedStrings, _context);

                var i = 0;
                var totalHeight = 0;
                var maxLength = 0;

                if (_isWrapText$1) {
                  var canvasWidthNoMargin = _nodeContentSize.width;
                  var canvasHeightNoMargin = _nodeContentSize.height;

                  if (canvasWidthNoMargin < 0 || canvasHeightNoMargin < 0) {
                    return;
                  }

                  totalHeight = canvasHeightNoMargin + 1;
                  var actualFontSize = _fontSize$1 + 1;
                  var textFragment = [];
                  var left = 0;
                  var right = actualFontSize | 0;
                  var mid = 0;

                  while (left < right) {
                    mid = left + right + 1 >> 1;

                    if (mid <= 0) {
                      logID(4003);
                      break;
                    }

                    _fontSize$1 = mid;
                    _fontDesc = this._getFontDesc();
                    _context.font = _fontDesc;

                    var lineHeight = this._getLineHeight();

                    totalHeight = 0;

                    for (i = 0; i < paragraphedStrings.length; ++i) {
                      var allWidth = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
                      textFragment = fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context, _fontDesc));
                      totalHeight += textFragment.length * lineHeight;
                    }

                    if (totalHeight > canvasHeightNoMargin) {
                      right = mid - 1;
                    } else {
                      left = mid;
                    }
                  }

                  if (left === 0) {
                    logID(4003);
                  } else {
                    _fontSize$1 = left;
                    _fontDesc = this._getFontDesc();
                    _context.font = _fontDesc;
                  }
                } else {
                  totalHeight = paragraphedStrings.length * this._getLineHeight();

                  for (i = 0; i < paragraphedStrings.length; ++i) {
                    if (maxLength < paragraphLength[i]) {
                      maxLength = paragraphLength[i];
                    }
                  }

                  var scaleX = (_canvasSize.width - _canvasPadding.width) / maxLength;
                  var scaleY = _canvasSize.height / totalHeight;
                  _fontSize$1 = _drawFontsize * Math.min(1, scaleX, scaleY) | 0;
                  _fontDesc = this._getFontDesc();
                  _context.font = _fontDesc;
                }
              },
              _calculateWrapText: function _calculateWrapText(paragraphedStrings) {
                if (!_isWrapText$1 || !_context) return;
                _splitStrings = [];
                var canvasWidthNoMargin = _nodeContentSize.width;

                for (var i = 0; i < paragraphedStrings.length; ++i) {
                  var allWidth = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
                  var textFragment = fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context, _fontDesc));
                  _splitStrings = _splitStrings.concat(textFragment);
                }
              },
              _calculateLabelFont: function _calculateLabelFont() {
                if (!_context) {
                  return;
                }

                var paragraphedStrings = _string$1.split('\n');

                _splitStrings = paragraphedStrings;
                _fontDesc = this._getFontDesc();
                _context.font = _fontDesc;

                switch (_overflow$1) {
                  case Overflow$1.NONE:
                    {
                      var canvasSizeX = 0;
                      var canvasSizeY = 0;

                      for (var i = 0; i < paragraphedStrings.length; ++i) {
                        var paraLength = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
                        canvasSizeX = canvasSizeX > paraLength ? canvasSizeX : paraLength;
                      }

                      canvasSizeY = (_splitStrings.length + BASELINE_RATIO) * this._getLineHeight();
                      var rawWidth = parseFloat(canvasSizeX.toFixed(2));
                      var rawHeight = parseFloat(canvasSizeY.toFixed(2));
                      _canvasSize.width = rawWidth + _canvasPadding.width;
                      _canvasSize.height = rawHeight + _canvasPadding.height;
                      _nodeContentSize.width = rawWidth + _contentSizeExtend.width;
                      _nodeContentSize.height = rawHeight + _contentSizeExtend.height;
                      break;
                    }

                  case Overflow$1.SHRINK:
                    {
                      this._calculateShrinkFont(paragraphedStrings);

                      this._calculateWrapText(paragraphedStrings);

                      break;
                    }

                  case Overflow$1.CLAMP:
                    {
                      this._calculateWrapText(paragraphedStrings);

                      break;
                    }

                  case Overflow$1.RESIZE_HEIGHT:
                    {
                      this._calculateWrapText(paragraphedStrings);

                      var _rawHeight = (_splitStrings.length + BASELINE_RATIO) * this._getLineHeight();

                      _canvasSize.height = _rawHeight + _canvasPadding.height;
                      _nodeContentSize.height = _rawHeight + _contentSizeExtend.height;
                      break;
                    }
                }
              }
            };

            var WHITE$1 = Color$1.WHITE.clone();
            var ttf = {
              createData: function createData(comp) {
                var renderData = comp.requestRenderData();
                renderData.dataLength = 2;
                renderData.resize(4, 6);
                var vData = renderData.chunk.vb;
                vData[3] = vData[21] = vData[22] = vData[31] = 0;
                vData[4] = vData[12] = vData[13] = vData[30] = 1;
                var offset = 5;

                for (var i = 0; i < 4; i++) {
                  Color$1.toArray(vData, WHITE$1, offset);
                  offset += 9;
                }

                return renderData;
              },
              fillBuffers: function fillBuffers(comp, renderer) {
                var chunk = comp.renderData.chunk;
                var dataList = comp.renderData.data;
                var node = comp.node;
                var vData = chunk.vb;
                var data0 = dataList[0];
                var data3 = dataList[1];
                node.updateWorldTransform();
                var pos = node._pos;
                var rot = node._rot;
                var scale = node._scale;
                var ax = data0.x * scale.x;
                var bx = data3.x * scale.x;
                var ay = data0.y * scale.y;
                var by = data3.y * scale.y;
                var qx = rot.x;
                var qy = rot.y;
                var qz = rot.z;
                var qw = rot.w;
                var qxy = qx * qy;
                var qzw = qz * qw;
                var qxy2 = qx * qx - qy * qy;
                var qzw2 = qw * qw - qz * qz;
                var cx1 = qzw2 + qxy2;
                var cx2 = (qxy - qzw) * 2;
                var cy1 = qzw2 - qxy2;
                var cy2 = (qxy + qzw) * 2;
                var x = pos.x;
                var y = pos.y;
                vData[0] = cx1 * ax + cx2 * ay + x;
                vData[1] = cy1 * ay + cy2 * ax + y;
                vData[9] = cx1 * bx + cx2 * ay + x;
                vData[10] = cy1 * ay + cy2 * bx + y;
                vData[18] = cx1 * ax + cx2 * by + x;
                vData[19] = cy1 * by + cy2 * ax + y;
                vData[27] = cx1 * bx + cx2 * by + x;
                vData[28] = cy1 * by + cy2 * bx + y;
                var bid = chunk.bufferId;
                var vid = chunk.vertexOffset;
                var meshBuffer = chunk.vertexAccessor.getMeshBuffer(chunk.bufferId);
                var ib = chunk.vertexAccessor.getIndexBuffer(bid);
                var indexOffset = meshBuffer.indexOffset;
                ib[indexOffset++] = vid;
                ib[indexOffset++] = vid + 1;
                ib[indexOffset++] = vid + 2;
                ib[indexOffset++] = vid + 2;
                ib[indexOffset++] = vid + 1;
                ib[indexOffset++] = vid + 3;
                meshBuffer.indexOffset += 6;
              },
              updateVertexData: function updateVertexData(comp) {
                var renderData = comp.renderData;

                if (!renderData) {
                  return;
                }

                var uiTrans = comp.node._uiProps.uiTransformComp;
                var width = uiTrans.width;
                var height = uiTrans.height;
                var appX = uiTrans.anchorX * width;
                var appY = uiTrans.anchorY * height;
                var data = renderData.data;
                data[0].x = -appX;
                data[0].y = -appY;
                data[1].x = width - appX;
                data[1].y = height - appY;
              },
              updateUVs: function updateUVs(comp) {
                var renderData = comp.renderData;

                if (!renderData || !comp.ttfSpriteFrame) {
                  return;
                }

                var vData = renderData.chunk.vb;
                var uv = comp.ttfSpriteFrame.uv;
                vData[3] = uv[0];
                vData[4] = uv[1];
                vData[12] = uv[2];
                vData[13] = uv[3];
                vData[21] = uv[4];
                vData[22] = uv[5];
                vData[30] = uv[6];
                vData[31] = uv[7];
              },
              updateColor: function updateColor(comp) {}
            };
            addon(ttf, ttfUtils);

            var labelAssembler = exports('labelAssembler', {
              getAssembler: function getAssembler(comp) {
                var assembler = ttf;

                if (comp.font instanceof BitmapFont) {
                  assembler = bmfont;
                } else if (comp.cacheMode === Label.CacheMode.CHAR) {
                  assembler = letter;
                }

                return assembler;
              }
            });
            Label.Assembler = labelAssembler;

            var FillType$1 = Sprite.FillType;
            var matrix = new Mat4();
            var vec3_temp$1 = new Vec3();
            var barFilled = {
              updateRenderData: function updateRenderData(sprite) {
                var frame = sprite.spriteFrame;
                dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
                var renderData = sprite.renderData;

                if (renderData && frame) {
                  renderData.updateRenderData(sprite, frame);
                  var vertDirty = renderData.vertDirty;

                  if (!vertDirty) {
                    return;
                  }

                  var fillStart = sprite.fillStart;
                  var fillRange = sprite.fillRange;

                  if (fillRange < 0) {
                    fillStart += fillRange;
                    fillRange = -fillRange;
                  }

                  fillRange = fillStart + fillRange;
                  fillStart = fillStart > 1.0 ? 1.0 : fillStart;
                  fillStart = fillStart < 0.0 ? 0.0 : fillStart;
                  fillRange = fillRange > 1.0 ? 1.0 : fillRange;
                  fillRange = fillRange < 0.0 ? 0.0 : fillRange;
                  fillRange -= fillStart;
                  fillRange = fillRange < 0 ? 0 : fillRange;
                  var fillEnd = fillStart + fillRange;
                  fillEnd = fillEnd > 1 ? 1 : fillEnd;
                  this.updateUVs(sprite, fillStart, fillEnd);
                  this.updateVertexData(sprite, fillStart, fillEnd);
                }
              },
              updateUVs: function updateUVs(sprite, fillStart, fillEnd) {
                var spriteFrame = sprite.spriteFrame;
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var atlasWidth = spriteFrame.width;
                var atlasHeight = spriteFrame.height;
                var textureRect = spriteFrame.rect;
                var ul = 0;
                var vb = 0;
                var ur = 0;
                var vt = 0;
                var quadUV0 = 0;
                var quadUV1 = 0;
                var quadUV2 = 0;
                var quadUV3 = 0;
                var quadUV4 = 0;
                var quadUV5 = 0;
                var quadUV6 = 0;
                var quadUV7 = 0;

                if (spriteFrame.isRotated()) {
                  ul = textureRect.x / atlasWidth;
                  vb = (textureRect.y + textureRect.width) / atlasHeight;
                  ur = (textureRect.x + textureRect.height) / atlasWidth;
                  vt = textureRect.y / atlasHeight;
                  quadUV0 = quadUV2 = ul;
                  quadUV4 = quadUV6 = ur;
                  quadUV3 = quadUV7 = vb;
                  quadUV1 = quadUV5 = vt;
                } else {
                  ul = textureRect.x / atlasWidth;
                  vb = (textureRect.y + textureRect.height) / atlasHeight;
                  ur = (textureRect.x + textureRect.width) / atlasWidth;
                  vt = textureRect.y / atlasHeight;
                  quadUV0 = quadUV4 = ul;
                  quadUV2 = quadUV6 = ur;
                  quadUV1 = quadUV3 = vb;
                  quadUV5 = quadUV7 = vt;
                }

                switch (sprite.fillType) {
                  case FillType$1.HORIZONTAL:
                    vData[3] = quadUV0 + (quadUV2 - quadUV0) * fillStart;
                    vData[4] = quadUV1 + (quadUV3 - quadUV1) * fillStart;
                    vData[12] = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
                    vData[13] = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
                    vData[21] = quadUV4 + (quadUV6 - quadUV4) * fillStart;
                    vData[22] = quadUV5 + (quadUV7 - quadUV5) * fillStart;
                    vData[30] = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
                    vData[31] = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
                    break;

                  case FillType$1.VERTICAL:
                    vData[3] = quadUV0 + (quadUV4 - quadUV0) * fillStart;
                    vData[4] = quadUV1 + (quadUV5 - quadUV1) * fillStart;
                    vData[12] = quadUV2 + (quadUV6 - quadUV2) * fillStart;
                    vData[13] = quadUV3 + (quadUV7 - quadUV3) * fillStart;
                    vData[21] = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
                    vData[22] = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
                    vData[30] = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
                    vData[31] = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
                    break;

                  default:
                    errorID(2626);
                    break;
                }
              },
              updateVertexData: function updateVertexData(sprite, fillStart, fillEnd) {
                var renderData = sprite.renderData;
                var dataList = renderData.data;
                var uiTrans = sprite.node._uiProps.uiTransformComp;
                var width = uiTrans.width;
                var height = uiTrans.height;
                var appX = uiTrans.anchorX * width;
                var appY = uiTrans.anchorY * height;
                var l = -appX;
                var b = -appY;
                var r = width - appX;
                var t = height - appY;
                var progressStart = 0;
                var progressEnd = 0;

                switch (sprite.fillType) {
                  case FillType$1.HORIZONTAL:
                    progressStart = l + (r - l) * fillStart;
                    progressEnd = l + (r - l) * fillEnd;
                    l = progressStart;
                    r = progressEnd;
                    break;

                  case FillType$1.VERTICAL:
                    progressStart = b + (t - b) * fillStart;
                    progressEnd = b + (t - b) * fillEnd;
                    b = progressStart;
                    t = progressEnd;
                    break;

                  default:
                    errorID(2626);
                    break;
                }

                dataList[0].x = l;
                dataList[0].y = b;
                dataList[1].x = r;
                dataList[1].y = b;
                dataList[2].x = l;
                dataList[2].y = t;
                dataList[3].x = r;
                dataList[3].y = t;
              },
              createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 4;
                renderData.resize(4, 6);
                var dataList = renderData.data;

                for (var _iterator = _createForOfIteratorHelperLoose(dataList), _step; !(_step = _iterator()).done;) {
                  var data = _step.value;
                  data.z = 0;
                }

                return renderData;
              },
              updateWorldVertexData: function updateWorldVertexData(sprite, chunk) {
                var node = sprite.node;
                node.getWorldMatrix(matrix);
                var renderData = sprite.renderData;
                var stride = renderData.floatStride;
                var dataList = sprite.renderData.data;
                var vData = chunk.vb;
                var offset = 0;

                for (var i = 0; i < 4; i++) {
                  var local = dataList[i];
                  Vec3.transformMat4(vec3_temp$1, local, matrix);
                  offset = i * stride;
                  vData[offset] = vec3_temp$1.x;
                  vData[offset + 1] = vec3_temp$1.y;
                  vData[offset + 2] = vec3_temp$1.z;
                }
              },
              fillBuffers: function fillBuffers(sprite, renderer) {
                var renderData = sprite.renderData;
                var chunk = renderData.chunk;

                if (sprite.node.hasChangedFlags || renderData.vertDirty) {
                  this.updateWorldVertexData(sprite, chunk);
                  renderData.vertDirty = false;
                }

                var bid = chunk.bufferId;
                var vid = chunk.vertexOffset;
                var meshBuffer = chunk.vertexAccessor.getMeshBuffer(chunk.bufferId);
                var ib = chunk.vertexAccessor.getIndexBuffer(bid);
                var indexOffset = meshBuffer.indexOffset;
                ib[indexOffset++] = vid;
                ib[indexOffset++] = vid + 1;
                ib[indexOffset++] = vid + 2;
                ib[indexOffset++] = vid + 2;
                ib[indexOffset++] = vid + 1;
                ib[indexOffset++] = vid + 3;
                meshBuffer.indexOffset += 6;
              },
              updateColor: function updateColor(sprite) {
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var stride = renderData.floatStride;
                var colorOffset = 5;
                var color = sprite.color;
                var colorR = color.r / 255;
                var colorG = color.g / 255;
                var colorB = color.b / 255;
                var colorA = sprite.node._uiProps.opacity;

                for (var i = 0; i < 4; i++) {
                  vData[colorOffset] = colorR;
                  vData[colorOffset + 1] = colorG;
                  vData[colorOffset + 2] = colorB;
                  vData[colorOffset + 3] = colorA;
                  colorOffset += stride;
                }
              }
            };

            var PI_2 = Math.PI * 2;
            var EPSILON = 1e-6;
            var matrix$1 = new Mat4();
            var vec3_temp$2 = new Vec3();
            var _vertPos = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];

            var _vertices = new Array(4);

            var _uvs = new Array(8);

            var _intersectPoint_1 = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];
            var _intersectPoint_2 = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];

            var _center = new Vec2();

            var _triangles = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];

            function _calcIntersectedPoints(left, right, bottom, top, center, angle, intersectPoints) {
              var sinAngle = Math.sin(angle);
              sinAngle = Math.abs(sinAngle) > EPSILON ? sinAngle : 0;
              var cosAngle = Math.cos(angle);
              cosAngle = Math.abs(cosAngle) > EPSILON ? cosAngle : 0;
              var tanAngle = 0;
              var cotAngle = 0;

              if (cosAngle !== 0) {
                tanAngle = sinAngle / cosAngle;

                if ((left - center.x) * cosAngle > 0) {
                  var yLeft = center.y + tanAngle * (left - center.x);
                  intersectPoints[0].x = left;
                  intersectPoints[0].y = yLeft;
                }

                if ((right - center.x) * cosAngle > 0) {
                  var yRight = center.y + tanAngle * (right - center.x);
                  intersectPoints[2].x = right;
                  intersectPoints[2].y = yRight;
                }
              }

              if (sinAngle !== 0) {
                cotAngle = cosAngle / sinAngle;

                if ((top - center.y) * sinAngle > 0) {
                  var xTop = center.x + cotAngle * (top - center.y);
                  intersectPoints[3].x = xTop;
                  intersectPoints[3].y = top;
                }

                if ((bottom - center.y) * sinAngle > 0) {
                  var xBottom = center.x + cotAngle * (bottom - center.y);
                  intersectPoints[1].x = xBottom;
                  intersectPoints[1].y = bottom;
                }
              }
            }

            function _calculateVertices(sprite) {
              var uiTrans = sprite.node._uiProps.uiTransformComp;
              var width = uiTrans.width;
              var height = uiTrans.height;
              var appX = uiTrans.anchorX * width;
              var appY = uiTrans.anchorY * height;
              var l = -appX;
              var b = -appY;
              var r = width - appX;
              var t = height - appY;
              var vertices = _vertices;
              vertices[0] = l;
              vertices[1] = b;
              vertices[2] = r;
              vertices[3] = t;
              var fillCenter = sprite.fillCenter;
              var cx = _center.x = Math.min(Math.max(0, fillCenter.x), 1) * (r - l) + l;
              var cy = _center.y = Math.min(Math.max(0, fillCenter.y), 1) * (t - b) + b;
              _vertPos[0].x = _vertPos[3].x = l;
              _vertPos[1].x = _vertPos[2].x = r;
              _vertPos[0].y = _vertPos[1].y = b;
              _vertPos[2].y = _vertPos[3].y = t;

              for (var _iterator = _createForOfIteratorHelperLoose(_triangles), _step; !(_step = _iterator()).done;) {
                var num = _step.value;
                Vec2.set(num, 0, 0);
              }

              if (cx !== vertices[0]) {
                Vec2.set(_triangles[0], 3, 0);
              }

              if (cx !== vertices[2]) {
                Vec2.set(_triangles[2], 1, 2);
              }

              if (cy !== vertices[1]) {
                Vec2.set(_triangles[1], 0, 1);
              }

              if (cy !== vertices[3]) {
                Vec2.set(_triangles[3], 2, 3);
              }
            }

            function _calculateUVs(spriteFrame) {
              var atlasWidth = spriteFrame.width;
              var atlasHeight = spriteFrame.height;
              var textureRect = spriteFrame.getRect();
              var u0 = 0;
              var u1 = 0;
              var v0 = 0;
              var v1 = 0;
              var uvs = _uvs;

              if (spriteFrame.isRotated()) {
                u0 = textureRect.x / atlasWidth;
                u1 = (textureRect.x + textureRect.height) / atlasWidth;
                v0 = textureRect.y / atlasHeight;
                v1 = (textureRect.y + textureRect.width) / atlasHeight;
                uvs[0] = uvs[2] = u0;
                uvs[4] = uvs[6] = u1;
                uvs[3] = uvs[7] = v1;
                uvs[1] = uvs[5] = v0;
              } else {
                u0 = textureRect.x / atlasWidth;
                u1 = (textureRect.x + textureRect.width) / atlasWidth;
                v0 = textureRect.y / atlasHeight;
                v1 = (textureRect.y + textureRect.height) / atlasHeight;
                uvs[0] = uvs[4] = u0;
                uvs[2] = uvs[6] = u1;
                uvs[1] = uvs[3] = v1;
                uvs[5] = uvs[7] = v0;
              }
            }

            function _getVertAngle(start, end) {
              var placementX = end.x - start.x;
              var placementY = end.y - start.y;

              if (placementX === 0 && placementY === 0) {
                return 0;
              } else if (placementX === 0) {
                if (placementY > 0) {
                  return Math.PI * 0.5;
                } else {
                  return Math.PI * 1.5;
                }
              } else {
                var angle = Math.atan(placementY / placementX);

                if (placementX < 0) {
                  angle += Math.PI;
                }

                return angle;
              }
            }

            function _generateTriangle(dataList, offset, vert0, vert1, vert2) {
              var vertices = _vertices;
              var v0x = vertices[0];
              var v0y = vertices[1];
              var v1x = vertices[2];
              var v1y = vertices[3];
              dataList[offset].x = vert0.x;
              dataList[offset].y = vert0.y;
              dataList[offset + 1].x = vert1.x;
              dataList[offset + 1].y = vert1.y;
              dataList[offset + 2].x = vert2.x;
              dataList[offset + 2].y = vert2.y;
              var progressX = 0;
              var progressY = 0;
              progressX = (vert0.x - v0x) / (v1x - v0x);
              progressY = (vert0.y - v0y) / (v1y - v0y);

              _generateUV(progressX, progressY, dataList, offset);

              progressX = (vert1.x - v0x) / (v1x - v0x);
              progressY = (vert1.y - v0y) / (v1y - v0y);

              _generateUV(progressX, progressY, dataList, offset + 1);

              progressX = (vert2.x - v0x) / (v1x - v0x);
              progressY = (vert2.y - v0y) / (v1y - v0y);

              _generateUV(progressX, progressY, dataList, offset + 2);
            }

            function _generateUV(progressX, progressY, data, offset) {
              var uvs = _uvs;
              var px1 = uvs[0] + (uvs[2] - uvs[0]) * progressX;
              var px2 = uvs[4] + (uvs[6] - uvs[4]) * progressX;
              var py1 = uvs[1] + (uvs[3] - uvs[1]) * progressX;
              var py2 = uvs[5] + (uvs[7] - uvs[5]) * progressX;
              var uv = data[offset];
              uv.u = px1 + (px2 - px1) * progressY;
              uv.v = py1 + (py2 - py1) * progressY;
            }

            var radialFilled = {
              useModel: false,
              createData: function createData(sprite) {
                return sprite.requestRenderData();
              },
              updateRenderData: function updateRenderData(sprite) {
                var frame = sprite.spriteFrame;
                dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
                this.updateUVs(sprite);
                var renderData = sprite.renderData;

                if (renderData && frame) {
                  if (!renderData.vertDirty) {
                    return;
                  }

                  var dataList = renderData.data;
                  var fillStart = sprite.fillStart;
                  var fillRange = sprite.fillRange;

                  if (fillRange < 0) {
                    fillStart += fillRange;
                    fillRange = -fillRange;
                  }

                  while (fillStart >= 1.0) {
                    fillStart -= 1.0;
                  }

                  while (fillStart < 0.0) {
                    fillStart += 1.0;
                  }

                  fillStart *= PI_2;
                  fillRange *= PI_2;
                  var fillEnd = fillStart + fillRange;

                  _calculateVertices(sprite);

                  _calculateUVs(frame);

                  _calcIntersectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart, _intersectPoint_1);

                  _calcIntersectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart + fillRange, _intersectPoint_2);

                  var offset = 0;

                  for (var triangleIndex = 0; triangleIndex < 4; ++triangleIndex) {
                    var triangle = _triangles[triangleIndex];

                    if (!triangle) {
                      continue;
                    }

                    if (fillRange >= PI_2) {
                      renderData.dataLength = offset + 3;

                      _generateTriangle(dataList, offset, _center, _vertPos[triangle.x], _vertPos[triangle.y]);

                      offset += 3;
                      continue;
                    }

                    var startAngle = _getVertAngle(_center, _vertPos[triangle.x]);

                    var endAngle = _getVertAngle(_center, _vertPos[triangle.y]);

                    if (endAngle < startAngle) {
                      endAngle += PI_2;
                    }

                    startAngle -= PI_2;
                    endAngle -= PI_2;

                    for (var testIndex = 0; testIndex < 3; ++testIndex) {
                      if (startAngle >= fillEnd) ; else if (startAngle >= fillStart) {
                        renderData.dataLength = offset + 3;

                        if (endAngle >= fillEnd) {
                          _generateTriangle(dataList, offset, _center, _vertPos[triangle.x], _intersectPoint_2[triangleIndex]);
                        } else {
                          _generateTriangle(dataList, offset, _center, _vertPos[triangle.x], _vertPos[triangle.y]);
                        }

                        offset += 3;
                      } else if (endAngle > fillStart) {
                        if (endAngle <= fillEnd) {
                          renderData.dataLength = offset + 3;

                          _generateTriangle(dataList, offset, _center, _intersectPoint_1[triangleIndex], _vertPos[triangle.y]);

                          offset += 3;
                        } else {
                          renderData.dataLength = offset + 3;

                          _generateTriangle(dataList, offset, _center, _intersectPoint_1[triangleIndex], _intersectPoint_2[triangleIndex]);

                          offset += 3;
                        }
                      }

                      startAngle += PI_2;
                      endAngle += PI_2;
                    }
                  }

                  renderData.resize(offset, offset);
                  renderData.updateRenderData(sprite, frame);
                }
              },
              fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                var renderData = comp.renderData;
                var chunk = renderData.chunk;

                if (node.hasChangedFlags || renderData.vertDirty) {
                  this.updateWorldVertexAndUVData(comp, chunk);
                  renderData.vertDirty = false;
                }

                this.updataColorLate(comp);
                var bid = chunk.bufferId;
                var vid = chunk.vertexOffset;
                var meshBuffer = chunk.vertexAccessor.getMeshBuffer(chunk.bufferId);
                var ib = chunk.vertexAccessor.getIndexBuffer(bid);
                var indexOffset = meshBuffer.indexOffset;

                for (var i = 0; i < renderData.indexCount; i++) {
                  ib[indexOffset + i] = vid + i;
                }

                meshBuffer.indexOffset += renderData.indexCount;
                meshBuffer.setDirty();
              },
              updateWorldVertexAndUVData: function updateWorldVertexAndUVData(sprite, chunk) {
                var node = sprite.node;
                node.getWorldMatrix(matrix$1);
                var renderData = sprite.renderData;
                var stride = renderData.floatStride;
                var dataList = sprite.renderData.data;
                var vData = chunk.vb;
                var vertexCount = renderData.vertexCount;
                var vertexOffset = 0;

                for (var i = 0; i < vertexCount; i++) {
                  var vert = dataList[i];
                  Vec3.set(vec3_temp$2, vert.x, vert.y, 0);
                  Vec3.transformMat4(vec3_temp$2, vec3_temp$2, matrix$1);
                  vData[vertexOffset + 0] = vec3_temp$2.x;
                  vData[vertexOffset + 1] = vec3_temp$2.y;
                  vData[vertexOffset + 2] = vec3_temp$2.z;
                  vData[vertexOffset + 3] = vert.u;
                  vData[vertexOffset + 4] = vert.v;
                  vertexOffset += stride;
                }
              },
              updateUVs: function updateUVs(sprite) {
                var renderData = sprite.renderData;
                renderData.vertDirty = true;
                sprite.markForUpdateRenderData();
              },
              updataColorLate: function updataColorLate(sprite) {
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var stride = renderData.floatStride;
                var vertexCount = renderData.vertexCount;
                var colorOffset = 5;
                var color = sprite.color;
                var colorR = color.r / 255;
                var colorG = color.g / 255;
                var colorB = color.b / 255;
                var colorA = sprite.node._uiProps.opacity;

                for (var i = 0; i < vertexCount; i++) {
                  vData[colorOffset] = colorR;
                  vData[colorOffset + 1] = colorG;
                  vData[colorOffset + 2] = colorB;
                  vData[colorOffset + 3] = colorA;
                  colorOffset += stride;
                }
              },
              updateColor: function updateColor(sprite) {}
            };

            var vec3_temps$1 = [];

            for (var i$1 = 0; i$1 < 4; i$1++) {
              vec3_temps$1.push(new Vec3());
            }

            var simple = {
              createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 2;
                renderData.resize(4, 6);
                return renderData;
              },
              updateRenderData: function updateRenderData(sprite) {
                var frame = sprite.spriteFrame;
                dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
                this.updateUVs(sprite);
                var renderData = sprite.renderData;

                if (renderData && frame) {
                  if (renderData.vertDirty) {
                    this.updateVertexData(sprite);
                  }

                  renderData.updateRenderData(sprite, frame);
                }
              },
              updateWorldVerts: function updateWorldVerts(sprite, chunk) {
                var renderData = sprite.renderData;
                var vData = chunk.vb;
                var dataList = renderData.data;
                var node = sprite.node;
                var data0 = dataList[0];
                var data3 = dataList[1];
                var matrix = node.worldMatrix;
                var a = matrix.m00;
                var b = matrix.m01;
                var c = matrix.m04;
                var d = matrix.m05;
                var justTranslate = a === 1 && b === 0 && c === 0 && d === 1;
                var tx = matrix.m12;
                var ty = matrix.m13;
                var vl = data0.x;
                var vr = data3.x;
                var vb = data0.y;
                var vt = data3.y;

                if (justTranslate) {
                  var vltx = vl + tx;
                  var vrtx = vr + tx;
                  var vbty = vb + ty;
                  var vtty = vt + ty;
                  vData[0] = vltx;
                  vData[1] = vbty;
                  vData[9] = vrtx;
                  vData[10] = vbty;
                  vData[18] = vltx;
                  vData[19] = vtty;
                  vData[27] = vrtx;
                  vData[28] = vtty;
                } else {
                  var al = a * vl;
                  var ar = a * vr;
                  var bl = b * vl;
                  var br = b * vr;
                  var cb = c * vb;
                  var ct = c * vt;
                  var db = d * vb;
                  var dt = d * vt;
                  var cbtx = cb + tx;
                  var cttx = ct + tx;
                  var dbty = db + ty;
                  var dtty = dt + ty;
                  vData[0] = al + cbtx;
                  vData[1] = bl + dbty;
                  vData[9] = ar + cbtx;
                  vData[10] = br + dbty;
                  vData[18] = al + cttx;
                  vData[19] = bl + dtty;
                  vData[27] = ar + cttx;
                  vData[28] = br + dtty;
                }
              },
              fillBuffers: function fillBuffers(sprite, renderer) {
                if (sprite === null) {
                  return;
                }

                var renderData = sprite.renderData;
                var chunk = renderData.chunk;

                if (sprite.node.hasChangedFlags || renderData.vertDirty) {
                  this.updateWorldVerts(sprite, chunk);
                  renderData.vertDirty = false;
                }

                var bid = chunk.bufferId;
                var vid = chunk.vertexOffset;
                var meshBuffer = chunk.vertexAccessor.getMeshBuffer(bid);
                var ib = chunk.vertexAccessor.getIndexBuffer(bid);
                var indexOffset = meshBuffer.indexOffset;
                ib[indexOffset++] = vid;
                ib[indexOffset++] = vid + 1;
                ib[indexOffset++] = vid + 2;
                ib[indexOffset++] = vid + 2;
                ib[indexOffset++] = vid + 1;
                ib[indexOffset++] = vid + 3;
                meshBuffer.indexOffset += 6;
              },
              updateVertexData: function updateVertexData(sprite) {
                var renderData = sprite.renderData;

                if (!renderData) {
                  return;
                }

                var uiTrans = sprite.node._uiProps.uiTransformComp;
                var dataList = renderData.data;
                var cw = uiTrans.width;
                var ch = uiTrans.height;
                var appX = uiTrans.anchorX * cw;
                var appY = uiTrans.anchorY * ch;
                var l = 0;
                var b = 0;
                var r = 0;
                var t = 0;

                if (sprite.trim) {
                  l = -appX;
                  b = -appY;
                  r = cw - appX;
                  t = ch - appY;
                } else {
                  var frame = sprite.spriteFrame;
                  var originSize = frame.getOriginalSize();
                  var rect = frame.getRect();
                  var ow = originSize.width;
                  var oh = originSize.height;
                  var rw = rect.width;
                  var rh = rect.height;
                  var offset = frame.getOffset();
                  var scaleX = cw / ow;
                  var scaleY = ch / oh;
                  var trimLeft = offset.x + (ow - rw) / 2;
                  var trimRight = offset.x - (ow - rw) / 2;
                  var trimBottom = offset.y + (oh - rh) / 2;
                  var trimTop = offset.y - (oh - rh) / 2;
                  l = trimLeft * scaleX - appX;
                  b = trimBottom * scaleY - appY;
                  r = cw + trimRight * scaleX - appX;
                  t = ch + trimTop * scaleY - appY;
                }

                dataList[0].x = l;
                dataList[0].y = b;
                dataList[1].x = r;
                dataList[1].y = t;
                renderData.vertDirty = true;
              },
              updateUVs: function updateUVs(sprite) {
                if (!sprite.spriteFrame) return;
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var uv = sprite.spriteFrame.uv;
                vData[3] = uv[0];
                vData[4] = uv[1];
                vData[12] = uv[2];
                vData[13] = uv[3];
                vData[21] = uv[4];
                vData[22] = uv[5];
                vData[30] = uv[6];
                vData[31] = uv[7];
              },
              updateColor: function updateColor(sprite) {
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var colorOffset = 5;
                var color = sprite.color;
                var colorR = color.r / 255;
                var colorG = color.g / 255;
                var colorB = color.b / 255;
                var colorA = color.a / 255;

                for (var _i = 0; _i < 4; _i++, colorOffset += renderData.floatStride) {
                  vData[colorOffset] = colorR;
                  vData[colorOffset + 1] = colorG;
                  vData[colorOffset + 2] = colorB;
                  vData[colorOffset + 3] = colorA;
                }
              }
            };

            var vec3_temp$3 = new Vec3();
            var matrix$2 = new Mat4();
            var sliced = {
              createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 4;
                renderData.resize(16, 54);
                return renderData;
              },
              updateRenderData: function updateRenderData(sprite) {
                var frame = sprite.spriteFrame;
                dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
                this.updateUVs(sprite);
                var renderData = sprite.renderData;

                if (renderData && frame) {
                  var vertDirty = renderData.vertDirty;

                  if (vertDirty) {
                    this.updateVertexData(sprite);
                  }

                  renderData.updateRenderData(sprite, frame);
                }
              },
              updateVertexData: function updateVertexData(sprite) {
                var renderData = sprite.renderData;
                var dataList = renderData.data;
                var uiTrans = sprite.node._uiProps.uiTransformComp;
                var width = uiTrans.width;
                var height = uiTrans.height;
                var appX = uiTrans.anchorX * width;
                var appY = uiTrans.anchorY * height;
                var frame = sprite.spriteFrame;
                var leftWidth = frame.insetLeft;
                var rightWidth = frame.insetRight;
                var topHeight = frame.insetTop;
                var bottomHeight = frame.insetBottom;
                var sizableWidth = width - leftWidth - rightWidth;
                var sizableHeight = height - topHeight - bottomHeight;
                var xScale = width / (leftWidth + rightWidth);
                var yScale = height / (topHeight + bottomHeight);
                xScale = Number.isNaN(xScale) || xScale > 1 ? 1 : xScale;
                yScale = Number.isNaN(yScale) || yScale > 1 ? 1 : yScale;
                sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
                sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;
                dataList[0].x = -appX;
                dataList[0].y = -appY;
                dataList[1].x = leftWidth * xScale - appX;
                dataList[1].y = bottomHeight * yScale - appY;
                dataList[2].x = dataList[1].x + sizableWidth;
                dataList[2].y = dataList[1].y + sizableHeight;
                dataList[3].x = width - appX;
                dataList[3].y = height - appY;
              },
              fillBuffers: function fillBuffers(sprite, renderer) {
                var renderData = sprite.renderData;
                var chunk = renderData.chunk;

                if (sprite.node.hasChangedFlags || renderData.vertDirty) {
                  this.updateWorldVertexData(sprite, chunk);
                  renderData.vertDirty = false;
                }

                var bid = chunk.bufferId;
                var vid = chunk.vertexOffset;
                var meshBuffer = chunk.vertexAccessor.getMeshBuffer(chunk.bufferId);
                var ib = chunk.vertexAccessor.getIndexBuffer(bid);
                var indexOffset = meshBuffer.indexOffset;

                for (var r = 0; r < 3; ++r) {
                  for (var c = 0; c < 3; ++c) {
                    var start = vid + r * 4 + c;
                    ib[indexOffset++] = start;
                    ib[indexOffset++] = start + 1;
                    ib[indexOffset++] = start + 4;
                    ib[indexOffset++] = start + 1;
                    ib[indexOffset++] = start + 5;
                    ib[indexOffset++] = start + 4;
                  }
                }

                meshBuffer.indexOffset = indexOffset;
              },
              updateWorldVertexData: function updateWorldVertexData(sprite, chunk) {
                var node = sprite.node;
                node.getWorldMatrix(matrix$2);
                var renderData = sprite.renderData;
                var stride = renderData.floatStride;
                var dataList = renderData.data;
                var vData = chunk.vb;
                var offset = 0;

                for (var row = 0; row < 4; ++row) {
                  var rowD = dataList[row];

                  for (var col = 0; col < 4; ++col) {
                    var colD = dataList[col];
                    Vec3.set(vec3_temp$3, colD.x, rowD.y, 0);
                    Vec3.transformMat4(vec3_temp$3, vec3_temp$3, matrix$2);
                    offset = (row * 4 + col) * stride;
                    vData[offset++] = vec3_temp$3.x;
                    vData[offset++] = vec3_temp$3.y;
                    vData[offset++] = vec3_temp$3.z;
                  }
                }
              },
              updateUVs: function updateUVs(sprite) {
                if (!sprite.spriteFrame) return;
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var stride = renderData.floatStride;
                var uv = sprite.spriteFrame.uvSliced;
                var uvOffset = 3;

                for (var i = 0; i < 16; i++) {
                  vData[uvOffset] = uv[i].u;
                  vData[uvOffset + 1] = uv[i].v;
                  uvOffset += stride;
                }
              },
              updateColor: function updateColor(sprite) {
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var stride = renderData.floatStride;
                var colorOffset = 5;
                var color = sprite.color;
                var colorR = color.r / 255;
                var colorG = color.g / 255;
                var colorB = color.b / 255;
                var colorA = sprite.node._uiProps.opacity;

                for (var i = 0; i < 16; i++) {
                  vData[colorOffset] = colorR;
                  vData[colorOffset + 1] = colorG;
                  vData[colorOffset + 2] = colorB;
                  vData[colorOffset + 3] = colorA;
                  colorOffset += stride;
                }
              }
            };

            var vec3_temps$2 = [];

            for (var i$2 = 0; i$2 < 4; i$2++) {
              vec3_temps$2.push(new Vec3());
            }

            var matrix$3 = new Mat4();
            var tiled = {
              createData: function createData(sprite) {
                return sprite.requestRenderData();
              },
              updateRenderData: function updateRenderData(sprite) {
                var renderData = sprite.renderData;
                var frame = sprite.spriteFrame;

                if (!frame || !renderData) {
                  return;
                }

                renderData.updateRenderData(sprite, frame);

                if (!renderData.vertDirty) {
                  return;
                }

                var uiTrans = sprite.node._uiProps.uiTransformComp;
                var contentWidth = Math.abs(uiTrans.width);
                var contentHeight = Math.abs(uiTrans.height);
                var rect = frame.getRect();
                var leftWidth = frame.insetLeft;
                var rightWidth = frame.insetRight;
                var centerWidth = rect.width - leftWidth - rightWidth;
                var topHeight = frame.insetTop;
                var bottomHeight = frame.insetBottom;
                var centerHeight = rect.height - topHeight - bottomHeight;
                var sizableWidth = contentWidth - leftWidth - rightWidth;
                var sizableHeight = contentHeight - topHeight - bottomHeight;
                sizableWidth = sizableWidth > 0 ? sizableWidth : 0;
                sizableHeight = sizableHeight > 0 ? sizableHeight : 0;
                var hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
                var vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
                var row = Math.ceil(vRepeat + 2);
                var col = Math.ceil(hRepeat + 2);
                renderData.dataLength = Math.max(8, row + 1, col + 1);
                this.updateVerts(sprite, sizableWidth, sizableHeight, row, col);
                renderData.resize(row * col * 4, row * col * 6);
              },
              updateUVs: function updateUVs(sprite) {
                var renderData = sprite.renderData;
                renderData.vertDirty = true;
                sprite.markForUpdateRenderData();
              },
              fillBuffers: function fillBuffers(sprite, renderer) {
                var node = sprite.node;
                var renderData = sprite.renderData;
                var chunk = renderData.chunk;

                if (node.hasChangedFlags || renderData.vertDirty) {
                  this.updateWorldVertexAndUVData(sprite, chunk);
                  renderData.vertDirty = false;
                }

                this.updataColorLate(sprite);
                var bid = chunk.bufferId;
                var vid = chunk.vertexOffset;
                var meshBuffer = chunk.vertexAccessor.getMeshBuffer(chunk.bufferId);
                var ib = chunk.vertexAccessor.getIndexBuffer(bid);
                var indexOffset = meshBuffer.indexOffset;

                for (var _i = 0; _i < renderData.indexCount; _i += 6) {
                  ib[indexOffset++] = vid;
                  ib[indexOffset++] = vid + 1;
                  ib[indexOffset++] = vid + 2;
                  ib[indexOffset++] = vid + 1;
                  ib[indexOffset++] = vid + 3;
                  ib[indexOffset++] = vid + 2;
                  vid += 4;
                  meshBuffer.indexOffset += 6;
                }

                meshBuffer.setDirty();
              },
              updateWorldVertexAndUVData: function updateWorldVertexAndUVData(sprite, chunk) {
                var node = sprite.node;
                node.getWorldMatrix(matrix$3);
                var renderData = sprite.renderData;
                var stride = renderData.floatStride;
                var dataList = renderData.data;
                var vData = chunk.vb;
                var uiTrans = node._uiProps.uiTransformComp;
                var contentWidth = Math.abs(uiTrans.width);
                var contentHeight = Math.abs(uiTrans.height);
                var frame = sprite.spriteFrame;
                var rotated = frame.rotated;
                var uv = frame.uv;
                var uvSliced = frame.uvSliced;
                var rect = frame.rect;
                var leftWidth = frame.insetLeft;
                var rightWidth = frame.insetRight;
                var centerWidth = rect.width - leftWidth - rightWidth;
                var topHeight = frame.insetTop;
                var bottomHeight = frame.insetBottom;
                var centerHeight = rect.height - topHeight - bottomHeight;
                var sizableWidth = contentWidth - leftWidth - rightWidth;
                var sizableHeight = contentHeight - topHeight - bottomHeight;
                sizableWidth = sizableWidth > 0 ? sizableWidth : 0;
                sizableHeight = sizableHeight > 0 ? sizableHeight : 0;
                var hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
                var vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
                var row = Math.ceil(vRepeat + 2);
                var col = Math.ceil(hRepeat + 2);
                var vertexOffset = 0;
                var x = 0;
                var x1 = 0;
                var y = 0;
                var y1 = 0;

                for (var yIndex = 0, yLength = row; yIndex < yLength; ++yIndex) {
                  y = dataList[yIndex].y;
                  y1 = dataList[yIndex + 1].y;

                  for (var xIndex = 0, xLength = col; xIndex < xLength; ++xIndex) {
                    x = dataList[xIndex].x;
                    x1 = dataList[xIndex + 1].x;
                    Vec3.set(vec3_temps$2[0], x, y, 0);
                    Vec3.set(vec3_temps$2[1], x1, y, 0);
                    Vec3.set(vec3_temps$2[2], x, y1, 0);
                    Vec3.set(vec3_temps$2[3], x1, y1, 0);

                    for (var _i2 = 0; _i2 < 4; _i2++) {
                      var vec3_temp = vec3_temps$2[_i2];
                      Vec3.transformMat4(vec3_temp, vec3_temp, matrix$3);

                      var _offset = _i2 * stride;

                      vData[vertexOffset + _offset] = vec3_temp.x;
                      vData[vertexOffset + _offset + 1] = vec3_temp.y;
                      vData[vertexOffset + _offset + 2] = vec3_temp.z;
                    }

                    vertexOffset += 4 * stride;
                  }
                }

                vertexOffset = 0;
                var offset = stride;
                var offset1 = offset;
                var offset2 = offset * 2;
                var offset3 = offset * 3;
                var offset4 = offset * 4;
                var coefU = 0;
                var coefV = 0;
                var tempXVerts = [];
                var tempYVerts = [];

                for (var _yIndex = 0, _yLength = row; _yIndex < _yLength; ++_yIndex) {
                  if (sizableHeight > centerHeight) {
                    if (sizableHeight >= _yIndex * centerHeight) {
                      coefV = 1;
                    } else {
                      coefV = vRepeat % 1;
                    }
                  } else {
                    coefV = vRepeat;
                  }

                  for (var _xIndex = 0, _xLength = col; _xIndex < _xLength; ++_xIndex) {
                    if (sizableWidth > centerWidth) {
                      if (sizableWidth >= _xIndex * centerWidth) {
                        coefU = 1;
                      } else {
                        coefU = hRepeat % 1;
                      }
                    } else {
                      coefU = hRepeat;
                    }

                    var vertexOffsetU = vertexOffset + 3;
                    var vertexOffsetV = vertexOffsetU + 1;

                    if (rotated) {
                      if (_yIndex === 0) {
                        tempXVerts[0] = uvSliced[0].u;
                        tempXVerts[1] = uvSliced[0].u;
                        tempXVerts[2] = uvSliced[4].u + (uvSliced[8].u - uvSliced[4].u) * coefV;
                      } else if (_yIndex < row - 1) {
                        tempXVerts[0] = uvSliced[4].u;
                        tempXVerts[1] = uvSliced[4].u;
                        tempXVerts[2] = uvSliced[4].u + (uvSliced[8].u - uvSliced[4].u) * coefV;
                      } else if (_yIndex === row - 1) {
                        tempXVerts[0] = uvSliced[8].u;
                        tempXVerts[1] = uvSliced[8].u;
                        tempXVerts[2] = uvSliced[12].u;
                      }

                      if (_xIndex === 0) {
                        tempYVerts[0] = uvSliced[0].v;
                        tempYVerts[1] = uvSliced[1].v + (uvSliced[2].v - uvSliced[1].v) * coefU;
                        tempYVerts[2] = uvSliced[0].v;
                      } else if (_xIndex < col - 1) {
                        tempYVerts[0] = uvSliced[1].v;
                        tempYVerts[1] = uvSliced[1].v + (uvSliced[2].v - uvSliced[1].v) * coefU;
                        tempYVerts[2] = uvSliced[1].v;
                      } else if (_xIndex === col - 1) {
                        tempYVerts[0] = uvSliced[2].v;
                        tempYVerts[1] = uvSliced[3].v;
                        tempYVerts[2] = uvSliced[2].v;
                      }

                      tempXVerts[3] = tempXVerts[2];
                      tempYVerts[3] = tempYVerts[1];
                    } else {
                      if (_xIndex === 0) {
                        tempXVerts[0] = uvSliced[0].u;
                        tempXVerts[1] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefU;
                        tempXVerts[2] = uv[0];
                      } else if (_xIndex < col - 1) {
                        tempXVerts[0] = uvSliced[1].u;
                        tempXVerts[1] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefU;
                        tempXVerts[2] = uvSliced[1].u;
                      } else if (_xIndex === col - 1) {
                        tempXVerts[0] = uvSliced[2].u;
                        tempXVerts[1] = uvSliced[3].u;
                        tempXVerts[2] = uvSliced[2].u;
                      }

                      if (_yIndex === 0) {
                        tempYVerts[0] = uvSliced[0].v;
                        tempYVerts[1] = uvSliced[0].v;
                        tempYVerts[2] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefV;
                      } else if (_yIndex < row - 1) {
                        tempYVerts[0] = uvSliced[4].v;
                        tempYVerts[1] = uvSliced[4].v;
                        tempYVerts[2] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefV;
                      } else if (_yIndex === row - 1) {
                        tempYVerts[0] = uvSliced[8].v;
                        tempYVerts[1] = uvSliced[8].v;
                        tempYVerts[2] = uvSliced[12].v;
                      }

                      tempXVerts[3] = tempXVerts[1];
                      tempYVerts[3] = tempYVerts[2];
                    }

                    vData[vertexOffsetU] = tempXVerts[0];
                    vData[vertexOffsetV] = tempYVerts[0];
                    vData[vertexOffsetU + offset1] = tempXVerts[1];
                    vData[vertexOffsetV + offset1] = tempYVerts[1];
                    vData[vertexOffsetU + offset2] = tempXVerts[2];
                    vData[vertexOffsetV + offset2] = tempYVerts[2];
                    vData[vertexOffsetU + offset3] = tempXVerts[3];
                    vData[vertexOffsetV + offset3] = tempYVerts[3];
                    vertexOffset += offset4;
                  }
                }
              },
              updateVerts: function updateVerts(sprite, sizableWidth, sizableHeight, row, col) {
                var uiTrans = sprite.node._uiProps.uiTransformComp;
                var renderData = sprite.renderData;
                var data = renderData.data;
                var frame = sprite.spriteFrame;
                var rect = frame.rect;
                var contentWidth = Math.abs(uiTrans.width);
                var contentHeight = Math.abs(uiTrans.height);
                var appx = uiTrans.anchorX * contentWidth;
                var appy = uiTrans.anchorY * contentHeight;
                var leftWidth = frame.insetLeft;
                var rightWidth = frame.insetRight;
                var centerWidth = rect.width - leftWidth - rightWidth;
                var topHeight = frame.insetTop;
                var bottomHeight = frame.insetBottom;
                var centerHeight = rect.height - topHeight - bottomHeight;
                var xScale = uiTrans.width / (leftWidth + rightWidth) > 1 ? 1 : uiTrans.width / (leftWidth + rightWidth);
                var yScale = uiTrans.height / (topHeight + bottomHeight) > 1 ? 1 : uiTrans.height / (topHeight + bottomHeight);
                var offsetWidth = 0;
                var offsetHeight = 0;

                if (centerWidth > 0) {
                  offsetWidth = Math.floor(sizableWidth * 1000) / 1000 % centerWidth === 0 ? centerWidth : sizableWidth % centerWidth;
                } else {
                  offsetWidth = sizableWidth;
                }

                if (centerHeight > 0) {
                  offsetHeight = Math.floor(sizableHeight * 1000) / 1000 % centerHeight === 0 ? centerHeight : sizableHeight % centerHeight;
                } else {
                  offsetHeight = sizableHeight;
                }

                for (var _i3 = 0; _i3 <= col; _i3++) {
                  if (_i3 === 0) {
                    data[_i3].x = -appx;
                  } else if (_i3 > 0 && _i3 < col) {
                    if (_i3 === 1) {
                      data[_i3].x = leftWidth * xScale + Math.min(centerWidth, sizableWidth) - appx;
                    } else if (centerWidth > 0) {
                      if (_i3 === col - 1) {
                        data[_i3].x = leftWidth + offsetWidth + centerWidth * (_i3 - 2) - appx;
                      } else {
                        data[_i3].x = leftWidth + Math.min(centerWidth, sizableWidth) + centerWidth * (_i3 - 2) - appx;
                      }
                    } else {
                      data[_i3].x = leftWidth + sizableWidth - appx;
                    }
                  } else if (_i3 === col) {
                    data[_i3].x = Math.min(leftWidth + sizableWidth + rightWidth, contentWidth) - appx;
                  }
                }

                for (var _i4 = 0; _i4 <= row; _i4++) {
                  if (_i4 === 0) {
                    data[_i4].y = -appy;
                  } else if (_i4 > 0 && _i4 < row) {
                    if (_i4 === 1) {
                      data[_i4].y = bottomHeight * yScale + Math.min(centerHeight, sizableHeight) - appy;
                    } else if (centerHeight > 0) {
                      if (_i4 === row - 1) {
                        data[_i4].y = bottomHeight + offsetHeight + (_i4 - 2) * centerHeight - appy;
                      } else {
                        data[_i4].y = bottomHeight + Math.min(centerHeight, sizableHeight) + (_i4 - 2) * centerHeight - appy;
                      }
                    } else {
                      data[_i4].y = bottomHeight + sizableHeight - appy;
                    }
                  } else if (_i4 === row) {
                    data[_i4].y = Math.min(bottomHeight + sizableHeight + topHeight, contentHeight) - appy;
                  }
                }
              },
              updataColorLate: function updataColorLate(sprite) {
                var renderData = sprite.renderData;
                var vData = renderData.chunk.vb;
                var stride = renderData.floatStride;
                var vertexCount = renderData.vertexCount;
                var colorOffset = 5;
                var color = sprite.color;
                var colorR = color.r / 255;
                var colorG = color.g / 255;
                var colorB = color.b / 255;
                var colorA = sprite.node._uiProps.opacity;

                for (var _i5 = 0; _i5 < vertexCount; _i5++) {
                  vData[colorOffset] = colorR;
                  vData[colorOffset + 1] = colorG;
                  vData[colorOffset + 2] = colorB;
                  vData[colorOffset + 3] = colorA;
                  colorOffset += stride;
                }
              },
              updateColor: function updateColor(sprite) {}
            };

            var SpriteType$1 = Sprite.Type;
            var FillType$2 = Sprite.FillType;
            var spriteAssembler = exports('spriteAssembler', {
              getAssembler: function getAssembler(spriteComp) {
                var util = simple;
                var comp = spriteComp;

                switch (comp.type) {
                  case SpriteType$1.SLICED:
                    util = sliced;
                    break;

                  case SpriteType$1.TILED:
                    util = tiled;
                    break;

                  case SpriteType$1.FILLED:
                    if (comp.fillType === FillType$2.RADIAL) {
                      util = radialFilled;
                    } else {
                      util = barFilled;
                    }

                    break;
                }

                return util;
              }
            });
            Sprite.Assembler = spriteAssembler;

            var _stencilManager = StencilManager.sharedManager;

            function applyClearMask(mask, renderer) {
              _stencilManager.clear(mask);

              renderer.commitModel(mask, mask._clearModel, mask._clearStencilMtl);
            }

            function applyAreaMask(mask, renderer) {
              _stencilManager.enterLevel(mask);

              if (mask.type === MaskType.IMAGE_STENCIL) {
                simple.fillBuffers(mask, renderer);
                var mat = mask.graphics.getMaterialInstance(0);
                renderer.forceMergeBatches(mat, mask.spriteFrame, mask.graphics);
              } else {
                mask.graphics.updateAssembler(renderer);
              }
            }

            var maskAssembler = {
              createData: function createData(mask) {
                var renderData = mask.requestRenderData();
                renderData.dataLength = 2;
                renderData.resize(4, 6);
                return renderData;
              },
              updateRenderData: function updateRenderData(mask) {
                if (mask.type === MaskType.IMAGE_STENCIL) {
                  simple.updateRenderData(mask);
                  simple.updateColor(mask);
                }
              },
              fillBuffers: function fillBuffers(mask, renderer) {
                if (mask.type !== MaskType.IMAGE_STENCIL || mask.spriteFrame) {
                  _stencilManager.pushMask(mask);

                  renderer.finishMergeBatches();
                  applyClearMask(mask, renderer);
                  applyAreaMask(mask, renderer);

                  _stencilManager.enableMask();
                }
              }
            };
            var maskEndAssembler = {
              fillBuffers: function fillBuffers(mask, ui) {
                _stencilManager.exitMask();
              }
            };
            var StartAssembler = {
              getAssembler: function getAssembler() {
                return maskAssembler;
              }
            };
            var PostAssembler = {
              getAssembler: function getAssembler() {
                return maskEndAssembler;
              }
            };
            Mask.Assembler = StartAssembler;
            Mask.PostAssembler = PostAssembler;

            var MeshBuffer = exports('MeshBuffer', function () {
              function MeshBuffer() {
                this.byteOffset = 0;
                this.vertexOffset = 0;
                this.indexOffset = 0;
                this.vData = null;
                this.iData = null;
                this._dirty = false;
                this._vertexFormatBytes = 0;
                this._floatsPerVertex = 0;
                this._initVDataCount = 0;
                this._initIDataCount = 0;
                this._attributes = null;
                this._iaPool = [];
                this._iaInfo = null;
                this._nextFreeIAHandle = 0;
              }

              var _proto = MeshBuffer.prototype;

              _proto.initialize = function initialize(device, attrs, vFloatCount, iCount) {
                this._initVDataCount = vFloatCount;
                this._initIDataCount = iCount;
                this._attributes = attrs;
                this._floatsPerVertex = getComponentPerVertex(attrs);
                assertIsTrue(this._initVDataCount / this._floatsPerVertex < 65536, getError(9005));

                if (!this.vData || !this.iData) {
                  this.vData = new Float32Array(this._initVDataCount);
                  this.iData = new Uint16Array(this._initIDataCount);
                }

                this._iaPool.push(this.createNewIA(device));
              };

              _proto.reset = function reset() {
                this._nextFreeIAHandle = 0;
                this._dirty = false;
              };

              _proto.destroy = function destroy() {
                this.reset();
                this._attributes = null;
                this._iaInfo = null;
                this.vData = null;
                this.iData = null;

                for (var i = 0; i < this._iaPool.length; ++i) {
                  var iaRef = this._iaPool[i];

                  if (iaRef.vertexBuffers[0]) {
                    iaRef.vertexBuffers[0].destroy();
                  }

                  if (iaRef.indexBuffer) {
                    iaRef.indexBuffer.destroy();
                  }

                  iaRef.ia.destroy();
                }

                this._iaPool.length = 0;
              };

              _proto.setDirty = function setDirty() {
                this._dirty = true;
              };

              _proto.request = function request(vertexCount, indexCount) {
                warnID(9002);
                return false;
              };

              _proto.requireFreeIA = function requireFreeIA(device) {
                if (this._iaPool.length <= this._nextFreeIAHandle) {
                  this._iaPool.push(this.createNewIA(device));
                }

                var ia = this._iaPool[this._nextFreeIAHandle++].ia;
                return ia;
              };

              _proto.recycleIA = function recycleIA(ia) {
                var pool = this._iaPool;

                for (var i = 0; i < this._nextFreeIAHandle; ++i) {
                  if (ia === pool[i].ia) {
                    var iaRef = pool[i];
                    pool[i] = pool[--this._nextFreeIAHandle];
                    pool[this._nextFreeIAHandle] = iaRef;
                    return;
                  }
                }
              };

              _proto.checkCapacity = function checkCapacity(vertexCount, indexCount) {
                var maxVertex = this.vertexOffset + vertexCount;
                var maxIndex = this.indexOffset + indexCount;

                if (maxVertex > this._initVDataCount || maxIndex > this._initIDataCount) {
                  return false;
                }

                return true;
              };

              _proto.uploadBuffers = function uploadBuffers() {
                if (this.byteOffset === 0 || !this._dirty) {
                  return;
                }

                var iOS14 = sys.__isWebIOS14OrIPadOS14Env;
                var submitCount = iOS14 ? this._nextFreeIAHandle : 1;
                var byteCount = this.byteOffset;
                var indexCount = this.indexOffset;

                for (var i = 0; i < submitCount; ++i) {
                  var iaRef = this._iaPool[i];
                  var verticesData = new Float32Array(this.vData.buffer, 0, byteCount >> 2);
                  var indicesData = new Uint16Array(this.iData.buffer, 0, indexCount);
                  var vertexBuffer = iaRef.vertexBuffers[0];

                  if (byteCount > vertexBuffer.size) {
                    vertexBuffer.resize(byteCount);
                  }

                  vertexBuffer.update(verticesData);

                  if (indexCount * 2 > iaRef.indexBuffer.size) {
                    iaRef.indexBuffer.resize(indexCount * 2);
                  }

                  iaRef.indexBuffer.update(indicesData);
                }

                this._dirty = false;
              };

              _proto.createNewIA = function createNewIA(device) {
                var ia;
                var vertexBuffers;
                var indexBuffer;

                if (sys.__isWebIOS14OrIPadOS14Env || !this._iaPool[0]) {
                  var vbStride = this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT;
                  var ibStride = Uint16Array.BYTES_PER_ELEMENT;
                  var vertexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, vbStride, vbStride));
                  indexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, ibStride, ibStride));
                  vertexBuffers = [vertexBuffer];
                  this._iaInfo = new InputAssemblerInfo(this._attributes, vertexBuffers, indexBuffer);
                  ia = device.createInputAssembler(this._iaInfo);
                } else {
                  ia = device.createInputAssembler(this._iaInfo);
                  vertexBuffers = this._iaInfo.vertexBuffers;
                  indexBuffer = this._iaInfo.indexBuffer;
                }

                return {
                  ia: ia,
                  vertexBuffers: vertexBuffers,
                  indexBuffer: indexBuffer
                };
              };

              _createClass(MeshBuffer, [{
                key: "attributes",
                get: function get() {
                  return this._attributes;
                }
              }, {
                key: "vertexFormatBytes",
                get: function get() {
                  return this._vertexFormatBytes;
                }
              }]);

              return MeshBuffer;
            }());

            var mouseEvents = [Input.EventType.MOUSE_DOWN, Input.EventType.MOUSE_MOVE, Input.EventType.MOUSE_UP, Input.EventType.MOUSE_WHEEL];
            var touchEvents = [Input.EventType.TOUCH_START, Input.EventType.TOUCH_MOVE, Input.EventType.TOUCH_END, Input.EventType.TOUCH_CANCEL];

            var PointerEventDispatcher = function () {
              function PointerEventDispatcher() {
                this.priority = EventDispatcherPriority.UI;
                this._isListDirty = false;
                this._inDispatchCount = 0;
                this._pointerEventProcessorList = [];
                this._processorListToAdd = [];
                this._processorListToRemove = [];

                input._registerEventDispatcher(this);

                NodeEventProcessor.callbacksInvoker.on(DispatcherEventType.ADD_POINTER_EVENT_PROCESSOR, this.addPointerEventProcessor, this);
                NodeEventProcessor.callbacksInvoker.on(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this.removePointerEventProcessor, this);
                NodeEventProcessor.callbacksInvoker.on(DispatcherEventType.MARK_LIST_DIRTY, this._markListDirty, this);
              }

              var _proto = PointerEventDispatcher.prototype;

              _proto.dispatchEvent = function dispatchEvent(event) {
                var eventType = event.type;

                if (touchEvents.includes(eventType)) {
                  return this.dispatchEventTouch(event);
                } else if (mouseEvents.includes(eventType)) {
                  return this.dispatchEventMouse(event);
                }

                return true;
              };

              _proto.addPointerEventProcessor = function addPointerEventProcessor(pointerEventProcessor) {
                if (this._inDispatchCount === 0) {
                  if (!this._pointerEventProcessorList.includes(pointerEventProcessor)) {
                    this._pointerEventProcessorList.push(pointerEventProcessor);

                    this._isListDirty = true;
                  }
                } else if (!this._processorListToAdd.includes(pointerEventProcessor)) {
                  this._processorListToAdd.push(pointerEventProcessor);
                }

                js.array.remove(this._processorListToRemove, pointerEventProcessor);
              };

              _proto.removePointerEventProcessor = function removePointerEventProcessor(pointerEventProcessor) {
                if (this._inDispatchCount === 0) {
                  js.array.remove(this._pointerEventProcessorList, pointerEventProcessor);
                  this._isListDirty = true;
                } else if (!this._processorListToRemove.includes(pointerEventProcessor)) {
                  this._processorListToRemove.push(pointerEventProcessor);
                }

                js.array.remove(this._processorListToAdd, pointerEventProcessor);
              };

              _proto.dispatchEventMouse = function dispatchEventMouse(eventMouse) {
                this._inDispatchCount++;

                this._sortPointerEventProcessorList();

                var pointerEventProcessorList = this._pointerEventProcessorList;
                var length = pointerEventProcessorList.length;
                var dispatchToNextEventDispatcher = true;

                for (var i = 0; i < length; ++i) {
                  var pointerEventProcessor = pointerEventProcessorList[i];

                  if (pointerEventProcessor.isEnabled && pointerEventProcessor.shouldHandleEventMouse && pointerEventProcessor._handleEventMouse(eventMouse)) {
                    dispatchToNextEventDispatcher = false;

                    if (!eventMouse.preventSwallow) {
                      break;
                    } else {
                      eventMouse.preventSwallow = false;
                    }
                  }
                }

                if (--this._inDispatchCount <= 0) {
                  this._updatePointerEventProcessorList();
                }

                return dispatchToNextEventDispatcher;
              };

              _proto.dispatchEventTouch = function dispatchEventTouch(eventTouch) {
                this._inDispatchCount++;

                this._sortPointerEventProcessorList();

                var pointerEventProcessorList = this._pointerEventProcessorList;
                var length = pointerEventProcessorList.length;
                var touch = eventTouch.touch;
                var dispatchToNextEventDispatcher = true;

                for (var i = 0; i < length; ++i) {
                  var pointerEventProcessor = pointerEventProcessorList[i];

                  if (pointerEventProcessor.isEnabled && pointerEventProcessor.shouldHandleEventTouch) {
                    if (eventTouch.type === InputEventType.TOUCH_START) {
                      if (pointerEventProcessor._handleEventTouch(eventTouch)) {
                        pointerEventProcessor.claimedTouchIdList.push(touch.getID());
                        dispatchToNextEventDispatcher = false;

                        if (!eventTouch.preventSwallow) {
                          break;
                        } else {
                          eventTouch.preventSwallow = false;
                        }
                      }
                    } else if (pointerEventProcessor.claimedTouchIdList.length > 0) {
                      var index = pointerEventProcessor.claimedTouchIdList.indexOf(touch.getID());

                      if (index !== -1) {
                        pointerEventProcessor._handleEventTouch(eventTouch);

                        if (eventTouch.type === InputEventType.TOUCH_END || eventTouch.type === InputEventType.TOUCH_CANCEL) {
                          js.array.removeAt(pointerEventProcessor.claimedTouchIdList, index);
                        }

                        dispatchToNextEventDispatcher = false;

                        if (!eventTouch.preventSwallow) {
                          break;
                        } else {
                          eventTouch.preventSwallow = false;
                        }
                      }
                    }
                  }
                }

                if (--this._inDispatchCount <= 0) {
                  this._updatePointerEventProcessorList();
                }

                return dispatchToNextEventDispatcher;
              };

              _proto._updatePointerEventProcessorList = function _updatePointerEventProcessorList() {
                var listToAdd = this._processorListToAdd;
                var addLength = listToAdd.length;

                for (var i = 0; i < addLength; ++i) {
                  this.addPointerEventProcessor(listToAdd[i]);
                }

                listToAdd.length = 0;
                var listToRemove = this._processorListToRemove;
                var removeLength = listToRemove.length;

                for (var _i = 0; _i < removeLength; ++_i) {
                  this.removePointerEventProcessor(listToRemove[_i]);
                }

                listToRemove.length = 0;
              };

              _proto._sortPointerEventProcessorList = function _sortPointerEventProcessorList() {
                if (!this._isListDirty) {
                  return;
                }

                var pointerEventProcessorList = this._pointerEventProcessorList;
                var length = pointerEventProcessorList.length;

                for (var i = 0; i < length; ++i) {
                  var pointerEventProcessor = pointerEventProcessorList[i];
                  var node = pointerEventProcessor.node;

                  if (node._uiProps) {
                    var trans = node._uiProps.uiTransformComp;
                    pointerEventProcessor.cachedCameraPriority = trans.cameraPriority;
                  }
                }

                pointerEventProcessorList.sort(this._sortByPriority);
                this._isListDirty = false;
              };

              _proto._sortByPriority = function _sortByPriority(p1, p2) {
                var node1 = p1.node;
                var node2 = p2.node;

                if (!p2 || !node2 || !node2.activeInHierarchy || !node2._uiProps.uiTransformComp) {
                  return -1;
                } else if (!p1 || !node1 || !node1.activeInHierarchy || !node1._uiProps.uiTransformComp) {
                  return 1;
                }

                if (p1.cachedCameraPriority !== p2.cachedCameraPriority) {
                  return p2.cachedCameraPriority - p1.cachedCameraPriority;
                }

                var n1 = node1;
                var n2 = node2;
                var ex = false;

                while (((_n1$parent = n1.parent) === null || _n1$parent === void 0 ? void 0 : _n1$parent._id) !== ((_n2$parent = n2.parent) === null || _n2$parent === void 0 ? void 0 : _n2$parent._id)) {
                  var _n1$parent, _n2$parent, _n, _n$parent, _n2, _n2$parent2;

                  n1 = ((_n = n1) === null || _n === void 0 ? void 0 : (_n$parent = _n.parent) === null || _n$parent === void 0 ? void 0 : _n$parent.parent) === null ? (ex = true) && node2 : n1 && n1.parent;
                  n2 = ((_n2 = n2) === null || _n2 === void 0 ? void 0 : (_n2$parent2 = _n2.parent) === null || _n2$parent2 === void 0 ? void 0 : _n2$parent2.parent) === null ? (ex = true) && node1 : n2 && n2.parent;
                }

                if (n1._id === n2._id) {
                  if (n1._id === node2._id) {
                    return -1;
                  }

                  if (n1._id === node1._id) {
                    return 1;
                  }
                }

                var priority1 = n1 ? n1.getSiblingIndex() : 0;
                var priority2 = n2 ? n2.getSiblingIndex() : 0;
                return ex ? priority1 - priority2 : priority2 - priority1;
              };

              _proto._markListDirty = function _markListDirty() {
                this._isListDirty = true;
              };

              return PointerEventDispatcher;
            }();

            var pointerEventDispatcher = new PointerEventDispatcher();

            var BufferAccessor = function () {
              function BufferAccessor(device, attributes) {
                this._device = null;
                this._attributes = null;
                this._vertexFormatBytes = void 0;
                this._floatsPerVertex = void 0;
                this._buffers = [];
                this._device = device;
                this._attributes = attributes;
                this._floatsPerVertex = getComponentPerVertex(attributes);
                this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT;
              }

              var _proto = BufferAccessor.prototype;

              _proto.initialize = function initialize() {};

              _proto.reset = function reset() {};

              _proto.request = function request(vertexCount, indexCount) {
              };

              _proto.appendBuffers = function appendBuffers(vertices, indices) {};

              _proto.uploadBuffers = function uploadBuffers() {};

              _proto.destroy = function destroy() {
                this._attributes.length = 0;
              };

              _createClass(BufferAccessor, [{
                key: "attributes",
                get: function get() {
                  return this._attributes;
                }
              }, {
                key: "vertexFormatBytes",
                get: function get() {
                  return this._vertexFormatBytes;
                }
              }, {
                key: "floatsPerVertex",
                get: function get() {
                  return this._floatsPerVertex;
                }
              }]);

              return BufferAccessor;
            }();

            var _entryPool = new Pool(function () {
              return {
                offset: 0,
                length: 0
              };
            }, 32);

            var StaticVBChunk = function StaticVBChunk(vertexAccessor, bufferId, vertexOffset, vb, indexCount) {
              this.vertexAccessor = vertexAccessor;
              this.bufferId = bufferId;
              this.vertexOffset = vertexOffset;
              this.vb = vb;
            };
            var StaticVBAccessor = function (_BufferAccessor) {
              _inheritsLoose(StaticVBAccessor, _BufferAccessor);

              function StaticVBAccessor(device, attributes, vCount, iCount) {
                var _this;

                _this = _BufferAccessor.call(this, device, attributes) || this;
                _this._freeLists = [];
                _this._vCount = 0;
                _this._iCount = 0;
                _this._vCount = vCount || Math.floor(macro.BATCHER2D_MEM_INCREMENT * 1024 / _this._vertexFormatBytes);
                _this._iCount = iCount || _this._vCount * StaticVBAccessor.IB_SCALE;

                _this._allocateBuffer();

                return _this;
              }

              var _proto = StaticVBAccessor.prototype;

              _proto.destroy = function destroy() {
                for (var i = 0; i < this._buffers.length; ++i) {
                  this._buffers[i].destroy();

                  var freeList = this._freeLists[i];

                  for (var j = 0; j < freeList.length; ++j) {
                    _entryPool.free(freeList[j]);
                  }
                }

                this._buffers.length = 0;
                this._freeLists.length = 0;

                _BufferAccessor.prototype.destroy.call(this);
              };

              _proto.reset = function reset() {
                for (var i = 0; i < this._buffers.length; ++i) {
                  var buffer = this._buffers[i];
                  buffer.indexOffset = 0;
                  buffer.reset();
                }
              };

              _proto.getVertexBuffer = function getVertexBuffer(bid) {
                return this._buffers[bid].vData;
              };

              _proto.getIndexBuffer = function getIndexBuffer(bid) {
                return this._buffers[bid].iData;
              };

              _proto.getMeshBuffer = function getMeshBuffer(bid) {
                return this._buffers[bid];
              };

              _proto.uploadBuffers = function uploadBuffers() {
                for (var i = 0; i < this._buffers.length; ++i) {
                  var firstEntry = this._freeLists[i][0];
                  var buffer = this._buffers[i];

                  if (!firstEntry || firstEntry.length < buffer.vData.byteLength) {
                    buffer.uploadBuffers();
                  }
                }
              };

              _proto.appendIndices = function appendIndices(bufferId, indices) {
                var buf = this._buffers[bufferId];
                var iCount = indices.length;

                if (iCount) {
                  buf.iData.set(indices, buf.indexOffset);
                  buf.indexOffset += indices.length;
                }
              };

              _proto.allocateChunk = function allocateChunk(vertexCount, indexCount) {
                var byteLength = vertexCount * this.vertexFormatBytes;
                var buf = null;
                var freeList;
                var bid = 0;
                var eid = -1;
                var entry = null;

                for (var i = 0; i < this._buffers.length; ++i) {
                  buf = this._buffers[i];
                  freeList = this._freeLists[i];

                  for (var e = 0; e < freeList.length; ++e) {
                    if (freeList[e].length >= byteLength) {
                      entry = freeList[e];
                      bid = i;
                      eid = e;
                      break;
                    }
                  }

                  if (entry) break;
                }

                if (!entry) {
                  bid = this._allocateBuffer();
                  buf = this._buffers[bid];

                  if (buf && buf.checkCapacity(vertexCount, indexCount)) {
                    eid = 0;
                    entry = this._freeLists[bid][eid];
                  }
                }

                if (entry) {
                  var _vertexOffset = entry.offset / this.vertexFormatBytes;

                  assertIsTrue(Number.isInteger(_vertexOffset));

                  var _vb = new Float32Array(buf.vData.buffer, entry.offset, byteLength >> 2).fill(0);

                  this._allocateChunkFromEntry(bid, eid, entry, byteLength);

                  return new StaticVBChunk(this, bid, _vertexOffset, _vb, indexCount);
                } else {
                  warnID(9004, byteLength);
                  return null;
                }
              };

              _proto.recycleChunk = function recycleChunk(chunk) {
                var freeList = this._freeLists[chunk.bufferId];
                var buf = this._buffers[chunk.bufferId];
                var offset = chunk.vertexOffset * this.vertexFormatBytes;
                var bytes = chunk.vb.byteLength;
                if (bytes === 0) return;
                var recycled = false;
                var i = 0;
                var prevEntry = null;
                var nextEntry = freeList[i];

                while (nextEntry && nextEntry.offset < offset) {
                  prevEntry = nextEntry;
                  nextEntry = freeList[++i];
                }

                if (prevEntry) {
                  var distance = offset - (prevEntry.offset + prevEntry.length);
                  assertIsTrue(distance >= 0);

                  if (distance === 0) {
                    prevEntry.length += bytes;
                    offset = prevEntry.offset;
                    bytes = prevEntry.length;

                    if (nextEntry && nextEntry.offset - (offset + bytes) === 0) {
                      prevEntry.length += nextEntry.length;
                      freeList.splice(i, 1);

                      _entryPool.free(nextEntry);

                      nextEntry = null;
                    }

                    recycled = true;
                  }
                }

                if (!recycled && nextEntry) {
                  var _distance = nextEntry.offset - (offset + bytes);

                  assertIsTrue(_distance >= 0);

                  if (_distance === 0) {
                    nextEntry.offset = offset;
                    nextEntry.length += bytes;
                  } else {
                    var newEntry = _entryPool.alloc();

                    newEntry.offset = offset;
                    newEntry.length = bytes;
                    freeList.splice(i, 0, newEntry);
                  }

                  recycled = true;
                }

                if (recycled) {
                  if (offset + bytes === buf.byteOffset) {
                    buf.byteOffset = offset;
                  }
                } else {
                  var _newEntry = _entryPool.alloc();

                  _newEntry.offset = offset;
                  _newEntry.length = bytes;
                  freeList.push(_newEntry);
                }
              };

              _proto._allocateChunkFromEntry = function _allocateChunkFromEntry(bid, eid, entry, bytes) {
                var remaining = entry.length - bytes;
                var offset = entry.offset + bytes;
                var buf = this._buffers[bid];

                if (buf.byteOffset < offset) {
                  buf.byteOffset = offset;
                }

                assertID(remaining >= 0, 9004, bid, entry.offset, entry.length);

                if (remaining === 0) {
                  this._freeLists[bid].splice(eid, 1);

                  _entryPool.free(entry);
                } else {
                  entry.offset += bytes;
                  entry.length = remaining;
                }
              };

              _proto._allocateBuffer = function _allocateBuffer() {
                assertID(this._buffers.length === this._freeLists.length, 9003);
                var buffer = new MeshBuffer();
                var vFloatCount = this._vCount * this._floatsPerVertex;
                buffer.initialize(this._device, this._attributes, vFloatCount, this._iCount);

                this._buffers.push(buffer);

                var entry = _entryPool.alloc();

                entry.offset = 0;
                entry.length = buffer.vData.byteLength;
                var freeList = [entry];

                this._freeLists.push(freeList);

                return this._buffers.length - 1;
              };

              return StaticVBAccessor;
            }(BufferAccessor);
            StaticVBAccessor.IB_SCALE = 4;

            var _dsInfo = new DescriptorSetInfo(null);

            var m4_1 = new Mat4();
            var Batcher2D = exports('UI', function () {
              function Batcher2D(_root) {
                var _this = this;

                this.device = void 0;
                this._screens = [];
                this._staticVBBuffer = null;
                this._bufferAccessors = new Map();
                this._drawBatchPool = void 0;
                this._batches = void 0;
                this._currBID = -1;
                this._indexStart = 0;
                this._emptyMaterial = new Material();
                this._currRenderData = null;
                this._currMaterial = this._emptyMaterial;
                this._currTexture = null;
                this._currSampler = null;
                this._currStaticRoot = null;
                this._currComponent = null;
                this._currTransform = null;
                this._currTextureHash = 0;
                this._currSamplerHash = 0;
                this._currLayer = 0;
                this._currDepthStencilStateStage = null;
                this._currIsStatic = false;
                this._currHash = 0;
                this._pOpacity = 1;
                this._opacityDirty = 0;
                this._descriptorSetCache = new DescriptorSetCache();
                this._meshDataArray = [];
                this._root = _root;
                this.device = _root.device;
                this._batches = new CachedArray(64);
                this._drawBatchPool = new Pool(function () {
                  return new DrawBatch2D();
                }, 128, function (obj) {
                  return obj.destroy(_this);
                });
              }

              var _proto = Batcher2D.prototype;

              _proto.initialize = function initialize() {
                return true;
              };

              _proto.destroy = function destroy() {
                for (var i = 0; i < this._batches.length; i++) {
                  if (this._batches.array[i]) {
                    this._batches.array[i].destroy(this);
                  }
                }

                this._batches.destroy();

                this._bufferAccessors.forEach(function (accessor) {
                  accessor.destroy();
                });

                this._bufferAccessors.clear();

                if (this._drawBatchPool) {
                  this._drawBatchPool.destroy();
                }

                this._descriptorSetCache.destroy();

                StencilManager.sharedManager.destroy();
              };

              _proto.addScreen = function addScreen(comp) {
                this._screens.push(comp);

                this._screens.sort(this._screenSort);
              };

              _proto.removeScreen = function removeScreen(comp) {
                var idx = this._screens.indexOf(comp);

                if (idx === -1) {
                  return;
                }

                this._screens.splice(idx, 1);
              };

              _proto.sortScreens = function sortScreens() {
                this._screens.sort(this._screenSort);
              };

              _proto.getFirstRenderCamera = function getFirstRenderCamera(node) {
                if (node.scene && node.scene.renderScene) {
                  var cameras = node.scene.renderScene.cameras;

                  for (var i = 0; i < cameras.length; i++) {
                    var camera = cameras[i];

                    if (camera.visibility & node.layer) {
                      return camera;
                    }
                  }
                }

                return null;
              };

              _proto.update = function update() {
                var screens = this._screens;
                var offset = 0;

                for (var i = 0; i < screens.length; ++i) {
                  var screen = screens[i];

                  var scene = screen._getRenderScene();

                  if (!screen.enabledInHierarchy || !scene) {
                    continue;
                  }

                  this._opacityDirty = 0;
                  this._pOpacity = 1;
                  this.walk(screen.node);
                  this.autoMergeBatches(this._currComponent);
                  this.resetRenderStates();
                  var batchPriority = 0;

                  if (this._batches.length > offset) {
                    for (; offset < this._batches.length; ++offset) {
                      var batch = this._batches.array[offset];

                      if (batch.model) {
                        var subModels = batch.model.subModels;

                        for (var j = 0; j < subModels.length; j++) {
                          subModels[j].priority = batchPriority++;
                        }
                      } else {
                        batch.descriptorSet = this._descriptorSetCache.getDescriptorSet(batch);
                      }

                      scene.addBatch(batch);
                    }
                  }
                }
              };

              _proto.uploadBuffers = function uploadBuffers() {
                if (this._batches.length > 0) {
                  this._meshDataArray.forEach(function (rd) {
                    rd.uploadBuffers();
                  });

                  this._bufferAccessors.forEach(function (accessor) {
                    accessor.uploadBuffers();
                    accessor.reset();
                  });

                  this._descriptorSetCache.update();
                }
              };

              _proto.reset = function reset() {
                for (var i = 0; i < this._batches.length; ++i) {
                  var batch = this._batches.array[i];

                  if (batch.isStatic) {
                    continue;
                  }

                  batch.clear();

                  this._drawBatchPool.free(batch);
                }

                this._bufferAccessors.forEach(function (accessor) {
                  accessor.reset();
                });

                this._meshDataArray.forEach(function (rd) {
                  rd.freeIAPool();
                });

                this._meshDataArray.length = 0;
                this._staticVBBuffer = null;
                this._currBID = -1;
                this._indexStart = 0;
                this._currHash = 0;
                this._currLayer = 0;
                this._currRenderData = null;
                this._currMaterial = this._emptyMaterial;
                this._currTexture = null;
                this._currSampler = null;
                this._currComponent = null;
                this._currTransform = null;

                this._batches.clear();

                StencilManager.sharedManager.reset();
              };

              _proto.switchBufferAccessor = function switchBufferAccessor(attributes) {
                if (attributes === void 0) {
                  attributes = vfmtPosUvColor;
                }

                var strideBytes = attributes === vfmtPosUvColor ? 36 : getAttributeStride(attributes);

                if (!this._staticVBBuffer || this._staticVBBuffer.vertexFormatBytes !== strideBytes) {
                  var accessor = this._bufferAccessors.get(strideBytes);

                  if (!accessor) {
                    accessor = new StaticVBAccessor(this.device, attributes);

                    this._bufferAccessors.set(strideBytes, accessor);
                  }

                  this._staticVBBuffer = accessor;
                  this._currBID = -1;
                }

                return this._staticVBBuffer;
              };

              _proto.registerBufferAccessor = function registerBufferAccessor(key, accessor) {
                this._bufferAccessors.set(key, accessor);
              };

              _proto.updateBuffer = function updateBuffer(attributes, bid) {
                var accessor = this.switchBufferAccessor(attributes);

                if (this._currBID !== bid) {
                  this._currBID = bid;
                  this._indexStart = accessor.getMeshBuffer(bid).indexOffset;
                }
              };

              _proto.commitComp = function commitComp(comp, renderData, frame, assembler, transform) {
                var dataHash = 0;
                var mat;
                var bufferID = -1;

                if (renderData && renderData.chunk) {
                  if (!renderData.isValid()) return;
                  dataHash = renderData.dataHash;
                  mat = renderData.material;
                  bufferID = renderData.chunk.bufferId;
                }

                comp.stencilStage = StencilManager.sharedManager.stage;
                var depthStencilStateStage = comp.stencilStage;

                if (this._currHash !== dataHash || dataHash === 0 || this._currMaterial !== mat || this._currDepthStencilStateStage !== depthStencilStateStage) {
                  this.autoMergeBatches(this._currComponent);

                  if (renderData && !renderData.isMeshBuffer) {
                    this.updateBuffer(renderData.vertexFormat, bufferID);
                  }

                  this._currRenderData = renderData;
                  this._currHash = renderData ? renderData.dataHash : 0;
                  this._currComponent = comp;
                  this._currTransform = transform;
                  this._currMaterial = comp.getRenderMaterial(0);
                  this._currDepthStencilStateStage = depthStencilStateStage;
                  this._currLayer = comp.node.layer;

                  if (frame) {
                    this._currTexture = frame.getGFXTexture();
                    this._currSampler = frame.getGFXSampler();
                    this._currTextureHash = frame.getHash();
                    this._currSamplerHash = this._currSampler.hash;
                  } else {
                    this._currTexture = null;
                    this._currSampler = null;
                    this._currTextureHash = 0;
                    this._currSamplerHash = 0;
                  }
                }

                assembler.fillBuffers(comp, this);
              };

              _proto.commitIA = function commitIA(renderComp, ia, tex, mat, transform) {
                if (this._currMaterial !== this._emptyMaterial) {
                  this.autoMergeBatches(this._currComponent);
                  this.resetRenderStates();
                }

                var blendState;
                var depthStencil;
                var dssHash = 0;
                var bsHash = 0;

                if (renderComp) {
                  blendState = renderComp.blendHash === -1 ? null : renderComp.getBlendState();
                  bsHash = renderComp.blendHash;
                  renderComp.stencilStage = StencilManager.sharedManager.stage;

                  if (renderComp.customMaterial !== null) {
                    depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage, mat);
                  } else {
                    depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage);
                  }

                  dssHash = StencilManager.sharedManager.getStencilHash(renderComp.stencilStage);
                }

                var curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
                curDrawBatch.visFlags = renderComp.node.layer;
                curDrawBatch.inputAssembler = ia;
                curDrawBatch.useLocalData = transform || null;

                if (tex) {
                  curDrawBatch.texture = tex.getGFXTexture();
                  curDrawBatch.sampler = tex.getGFXSampler();
                  curDrawBatch.textureHash = tex.getHash();
                  curDrawBatch.samplerHash = curDrawBatch.sampler.hash;
                }

                curDrawBatch.fillPasses(mat || null, depthStencil, dssHash, blendState, bsHash, null, this);

                this._batches.push(curDrawBatch);
              };

              _proto.commitModel = function commitModel(comp, model, mat) {
                if (this._currMaterial !== this._emptyMaterial) {
                  this.autoMergeBatches(this._currComponent);
                  this.resetRenderStates();
                }

                var depthStencil;
                var dssHash = 0;

                if (mat) {
                  if (comp.stencilStage === Stage.ENABLED || comp.stencilStage === Stage.DISABLED) {
                    comp.stencilStage = StencilManager.sharedManager.stage;
                  }

                  depthStencil = StencilManager.sharedManager.getStencilStage(comp.stencilStage, mat);
                  dssHash = StencilManager.sharedManager.getStencilHash(comp.stencilStage);
                }

                var stamp = legacyCC.director.getTotalFrames();

                if (model) {
                  model.updateTransform(stamp);
                  model.updateUBOs(stamp);
                }

                for (var i = 0; i < model.subModels.length; i++) {
                  var curDrawBatch = this._drawBatchPool.alloc();

                  var subModel = model.subModels[i];
                  curDrawBatch.visFlags = comp.node.layer;
                  curDrawBatch.model = model;
                  curDrawBatch.texture = null;
                  curDrawBatch.sampler = null;
                  curDrawBatch.useLocalData = null;

                  if (!depthStencil) {
                    depthStencil = null;
                  }

                  curDrawBatch.fillPasses(mat, depthStencil, dssHash, null, 0, subModel.patches, this);
                  curDrawBatch.inputAssembler = subModel.inputAssembler;
                  curDrawBatch.model.visFlags = curDrawBatch.visFlags;
                  curDrawBatch.descriptorSet = subModel.descriptorSet;

                  this._batches.push(curDrawBatch);
                }
              };

              _proto.setupStaticBatch = function setupStaticBatch(staticComp, bufferAccessor) {
                this.finishMergeBatches();
                this._staticVBBuffer = bufferAccessor;
                this.currStaticRoot = staticComp;
              };

              _proto.endStaticBatch = function endStaticBatch() {
                this.finishMergeBatches();
                this.currStaticRoot = null;
                this._staticVBBuffer = null;
                this.switchBufferAccessor();
              };

              _proto.commitStaticBatch = function commitStaticBatch(comp) {
                this._batches.concat(comp.drawBatchList);

                this.finishMergeBatches();
              };

              _proto.autoMergeBatches = function autoMergeBatches(renderComp) {
                var mat = this._currMaterial;

                if (!mat) {
                  return;
                }

                var ia;
                var rd = this._currRenderData;
                var accessor = this._staticVBBuffer;

                if (rd && rd.isMeshBuffer) {
                  ia = rd.requestIA(this.device);

                  if (this._meshDataArray.indexOf(rd) === -1) {
                    this._meshDataArray.push(rd);
                  }
                } else if (accessor) {
                  var bid = this._currBID;
                  var buf = accessor.getMeshBuffer(bid);

                  if (!buf) {
                    return;
                  }

                  var indexCount = buf.indexOffset - this._indexStart;
                  if (indexCount <= 0) return;
                  assertIsTrue(this._indexStart < buf.indexOffset);
                  buf.setDirty();
                  ia = buf.requireFreeIA(this.device);
                  ia.firstIndex = this._indexStart;
                  ia.indexCount = indexCount;
                  this._indexStart = buf.indexOffset;
                }

                this._currBID = -1;

                if (!ia) {
                  return;
                }

                var blendState;
                var depthStencil;
                var dssHash = 0;
                var bsHash = 0;

                if (renderComp) {
                  blendState = renderComp.blendHash === -1 ? null : renderComp.getBlendState();
                  bsHash = renderComp.blendHash;

                  if (renderComp.customMaterial !== null) {
                    depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage, mat);
                  } else {
                    depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage);
                  }

                  dssHash = StencilManager.sharedManager.getStencilHash(renderComp.stencilStage);
                }

                var curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
                curDrawBatch.visFlags = this._currLayer;
                curDrawBatch.texture = this._currTexture;
                curDrawBatch.sampler = this._currSampler;
                curDrawBatch.inputAssembler = ia;
                curDrawBatch.useLocalData = this._currTransform;
                curDrawBatch.textureHash = this._currTextureHash;
                curDrawBatch.samplerHash = this._currSamplerHash;
                curDrawBatch.fillPasses(mat, depthStencil, dssHash, blendState, bsHash, null, this);

                this._batches.push(curDrawBatch);
              };

              _proto.forceMergeBatches = function forceMergeBatches(material, frame, renderComp) {
                this._currMaterial = material;

                if (frame) {
                  this._currTexture = frame.getGFXTexture();
                  this._currSampler = frame.getGFXSampler();
                  this._currTextureHash = frame.getHash();
                  this._currSamplerHash = this._currSampler.hash;
                } else {
                  this._currTexture = this._currSampler = null;
                  this._currTextureHash = this._currSamplerHash = 0;
                }

                this._currLayer = renderComp.node.layer;
                this.autoMergeBatches(renderComp);
              };

              _proto.resetRenderStates = function resetRenderStates() {
                this._currMaterial = this._emptyMaterial;
                this._currRenderData = null;
                this._currTexture = null;
                this._currComponent = null;
                this._currTransform = null;
                this._currTextureHash = 0;
                this._currSamplerHash = 0;
                this._currLayer = 0;
              };

              _proto.finishMergeBatches = function finishMergeBatches() {
                this.autoMergeBatches();
                this.resetRenderStates();
              };

              _proto.flushMaterial = function flushMaterial(mat) {
                this._currMaterial = mat;
              };

              _proto.walk = function walk(node, level) {
                if (level === void 0) {
                  level = 0;
                }

                if (!node.activeInHierarchy) {
                  return;
                }

                var children = node.children;
                var uiProps = node._uiProps;
                var render = uiProps.uiComp;
                var parentOpacity = this._pOpacity;
                var opacity = parentOpacity;
                var selfOpacity = render && render.color ? render.color.a / 255 : 1;
                this._pOpacity = opacity *= selfOpacity * uiProps.localOpacity;
                uiProps._opacity = opacity;

                if (uiProps.colorDirty) {
                  this._opacityDirty++;
                }

                if (render && render.enabledInHierarchy) {
                  render.updateAssembler(this);
                }

                if (this._opacityDirty && render && !render.useVertexOpacity && render.renderData && render.renderData.vertexCount > 0) {
                  updateOpacity(render.renderData, opacity);
                  var buffer = render.renderData.getMeshBuffer();

                  if (buffer) {
                    buffer.setDirty();
                  }
                }

                if (children.length > 0 && !node._static) {
                  for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    this.walk(child, level);
                  }
                }

                if (uiProps.colorDirty) {
                  this._opacityDirty--;
                  uiProps.colorDirty = false;
                }

                this._pOpacity = parentOpacity;

                if (render && render.enabledInHierarchy) {
                  render.postUpdateAssembler(this);
                }

                level += 1;
              };

              _proto._screenSort = function _screenSort(a, b) {
                return a.node.getSiblingIndex() - b.node.getSiblingIndex();
              };

              _proto._releaseDescriptorSetCache = function _releaseDescriptorSetCache(textureHash) {
                this._descriptorSetCache.releaseDescriptorSetCache(textureHash);
              };

              _createClass(Batcher2D, [{
                key: "currBufferAccessor",
                get: function get() {
                  if (this._staticVBBuffer) return this._staticVBBuffer;
                  this._staticVBBuffer = this.switchBufferAccessor();
                  return this._staticVBBuffer;
                }
              }, {
                key: "batches",
                get: function get() {
                  return this._batches;
                }
              }, {
                key: "currStaticRoot",
                set: function set(value) {
                  this._currStaticRoot = value;
                }
              }, {
                key: "currIsStatic",
                set: function set(value) {
                  this._currIsStatic = value;
                }
              }]);

              return Batcher2D;
            }());

            var LocalDescriptorSet = function () {
              function LocalDescriptorSet() {
                this._descriptorSet = null;
                this._transform = null;
                this._textureHash = 0;
                this._samplerHash = 0;
                this._localBuffer = null;
                this._transformUpdate = true;
                var device = legacyCC.director.root.device;
                this._localData = new Float32Array(UBOLocal.COUNT);
                this._localBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOLocal.SIZE, UBOLocal.SIZE));
              }

              var _proto2 = LocalDescriptorSet.prototype;

              _proto2.initialize = function initialize(batch) {
                var device = legacyCC.director.root.device;
                this._transform = batch.useLocalData;
                this._textureHash = batch.textureHash;
                this._samplerHash = batch.samplerHash;
                _dsInfo.layout = batch.passes[0].localSetLayout;
                this._descriptorSet = device.createDescriptorSet(_dsInfo);

                this._descriptorSet.bindBuffer(UBOLocal.BINDING, this._localBuffer);

                var binding = ModelLocalBindings.SAMPLER_SPRITE;

                this._descriptorSet.bindTexture(binding, batch.texture);

                this._descriptorSet.bindSampler(binding, batch.sampler);

                this._descriptorSet.update();

                this._transformUpdate = true;
              };

              _proto2.updateTransform = function updateTransform(transform) {
                if (transform === this._transform) return;
                this._transform = transform;
                this._transformUpdate = true;
                this.uploadLocalData();
              };

              _proto2.equals = function equals(transform, textureHash, samplerHash) {
                return this._transform === transform && this._textureHash === textureHash && this._samplerHash === samplerHash;
              };

              _proto2.reset = function reset() {
                this._transform = null;
                this._textureHash = 0;
                this._samplerHash = 0;
              };

              _proto2.destroy = function destroy() {
                if (this._localBuffer) {
                  this._localBuffer.destroy();

                  this._localBuffer = null;
                }

                if (this._descriptorSet) {
                  this._descriptorSet.destroy();

                  this._descriptorSet = null;
                }

                this._localData = null;
              };

              _proto2.isValid = function isValid() {
                return this._transform && this._transform.isValid;
              };

              _proto2.uploadLocalData = function uploadLocalData() {
                var node = this._transform;

                if (node.hasChangedFlags || node._dirtyFlags) {
                  node.updateWorldTransform();
                  this._transformUpdate = true;
                }

                if (this._transformUpdate) {
                  var worldMatrix = node.worldMatrix;
                  Mat4.toArray(this._localData, worldMatrix, UBOLocal.MAT_WORLD_OFFSET);
                  Mat4.inverseTranspose(m4_1, worldMatrix);

                  {
                    var det = Mat4.determinant(m4_1);
                    var factor = 1.0 / Math.sqrt(det);
                    Mat4.multiplyScalar(m4_1, m4_1, factor);
                  }

                  Mat4.toArray(this._localData, m4_1, UBOLocal.MAT_WORLD_IT_OFFSET);

                  this._localBuffer.update(this._localData);

                  this._transformUpdate = false;
                }
              };

              _createClass(LocalDescriptorSet, [{
                key: "descriptorSet",
                get: function get() {
                  return this._descriptorSet;
                }
              }]);

              return LocalDescriptorSet;
            }();

            var DescriptorSetCache = function () {
              function DescriptorSetCache() {
                this._descriptorSetCache = new Map();
                this._dsCacheHashByTexture = new Map();
                this._localDescriptorSetCache = [];
                this._localCachePool = void 0;
                this._localCachePool = new Pool(function () {
                  return new LocalDescriptorSet();
                }, 16, function (obj) {
                  return obj.destroy();
                });
              }

              var _proto3 = DescriptorSetCache.prototype;

              _proto3.getDescriptorSet = function getDescriptorSet(batch) {
                var root = legacyCC.director.root;
                var hash;

                if (batch.useLocalData) {
                  var caches = this._localDescriptorSetCache;

                  for (var i = 0, len = caches.length; i < len; i++) {
                    var cache = caches[i];

                    if (cache.equals(batch.useLocalData, batch.textureHash, batch.samplerHash)) {
                      return cache.descriptorSet;
                    }
                  }

                  var localDs = this._localCachePool.alloc();

                  localDs.initialize(batch);

                  this._localDescriptorSetCache.push(localDs);

                  return localDs.descriptorSet;
                } else {
                  hash = batch.textureHash ^ batch.samplerHash;

                  if (this._descriptorSetCache.has(hash)) {
                    return this._descriptorSetCache.get(hash);
                  } else {
                    _dsInfo.layout = batch.passes[0].localSetLayout;
                    var descriptorSet = root.device.createDescriptorSet(_dsInfo);
                    var binding = ModelLocalBindings.SAMPLER_SPRITE;
                    descriptorSet.bindTexture(binding, batch.texture);
                    descriptorSet.bindSampler(binding, batch.sampler);
                    descriptorSet.update();

                    this._descriptorSetCache.set(hash, descriptorSet);

                    this._dsCacheHashByTexture.set(batch.textureHash, hash);

                    return descriptorSet;
                  }
                }
              };

              _proto3.update = function update() {
                var caches = this._localDescriptorSetCache;
                var uselessArray = [];
                caches.forEach(function (value) {
                  if (value.isValid()) {
                    value.uploadLocalData();
                  } else {
                    value.reset();
                    var pos = caches.indexOf(value);
                    uselessArray.push(pos);
                  }
                });

                for (var i = uselessArray.length - 1; i >= 0; i--) {
                  caches.splice(uselessArray[i], 1);
                }
              };

              _proto3.reset = function reset() {
                var _this2 = this;

                var caches = this._localDescriptorSetCache;
                caches.forEach(function (value) {
                  _this2._localCachePool.free(value);
                });
                this._localDescriptorSetCache.length = 0;
              };

              _proto3.releaseDescriptorSetCache = function releaseDescriptorSetCache(textureHash) {
                var key = this._dsCacheHashByTexture.get(textureHash);

                if (key && this._descriptorSetCache.has(key)) {
                  this._descriptorSetCache.get(key).destroy();

                  this._descriptorSetCache["delete"](key);

                  this._dsCacheHashByTexture["delete"](textureHash);
                }
              };

              _proto3.destroy = function destroy() {
                this._descriptorSetCache.forEach(function (value, key, map) {
                  value.destroy();
                });

                this._descriptorSetCache.clear();

                this._dsCacheHashByTexture.clear();

                this._localDescriptorSetCache.length = 0;

                this._localCachePool.destroy();
              };

              return DescriptorSetCache;
            }();

            legacyCC.internal.Batcher2D = Batcher2D;

            markAsWarning(MeshBuffer.prototype, 'MeshBuffer', ['byteStart', 'vertexStart', 'indicesStart', 'request'].map(function (item) {
              return {
                name: item,
                suggest: "please use meshBuffer.accessor." + item + " instead"
              };
            }));
            replaceProperty(MeshBuffer.prototype, 'MeshBuffer', [{
              name: 'indicesOffset',
              newName: 'indexOffset'
            }]);
            removeProperty(MeshBuffer.prototype, 'MeshBuffer', [{
              name: 'vertexBuffers'
            }, {
              name: 'indexBuffer'
            }]);
            replaceProperty(Batcher2D.prototype, 'Batcher2D', [{
              name: 'currBufferBatch',
              newName: 'currBufferAccessor'
            }, {
              name: 'acquireBufferBatch',
              newName: 'switchBufferAccessor'
            }]);
            removeProperty(MeshRenderData.prototype, 'MeshRenderData', [{
              name: 'formatByte'
            }, {
              name: 'byteStart'
            }, {
              name: 'byteCount'
            }]);
            replaceProperty(MeshRenderData.prototype, 'MeshRenderData', [{
              name: 'indicesStart',
              newName: 'indexStart'
            }]);
            var QuadRenderData = exports('QuadRenderData', function (_MeshRenderData) {
              _inheritsLoose(QuadRenderData, _MeshRenderData);

              function QuadRenderData(vertexFormat) {
                var _this;

                _this = _MeshRenderData.call(this, vertexFormat) || this;
                warnID(9006);
                return _this;
              }

              return QuadRenderData;
            }(MeshRenderData));

            var _canvasContext = null;

            var _intervalId = -1;

            var _testString = "BES bswy:->@123\u4E01\u3041\u1101";

            var _fontFaces = Object.create(null);

            var _loadingFonts = [];
            var _timeout = 3000;

            var useNativeCheck = function () {
              var nativeCheck;
              return function () {
                if (nativeCheck === undefined) {
                  if ('FontFace' in window) {
                    var match = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
                    var safari10Match = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);

                    if (match) {
                      nativeCheck = parseInt(match[1], 10) > 42;
                    } else if (safari10Match) {
                      nativeCheck = false;
                    } else {
                      nativeCheck = true;
                    }
                  } else {
                    nativeCheck = false;
                  }
                }

                return nativeCheck;
              };
            }();

            function checkFontLoaded() {
              var allFontsLoaded = true;
              var now = Date.now();

              for (var i = _loadingFonts.length - 1; i >= 0; i--) {
                var fontLoadHandle = _loadingFonts[i];
                var fontFamily = fontLoadHandle.fontFamilyName;

                if (now - fontLoadHandle.startTime > _timeout) {
                  warnID(4933, fontFamily);
                  fontLoadHandle.onComplete(null, fontFamily);

                  _loadingFonts.splice(i, 1);

                  continue;
                }

                var oldWidth = fontLoadHandle.refWidth;
                var fontDesc = "40px " + fontFamily;
                _canvasContext.font = fontDesc;
                var newWidth = safeMeasureText(_canvasContext, _testString, fontDesc);

                if (oldWidth !== newWidth) {
                  _loadingFonts.splice(i, 1);

                  fontLoadHandle.onComplete(null, fontFamily);
                } else {
                  allFontsLoaded = false;
                }
              }

              if (allFontsLoaded) {
                clearInterval(_intervalId);
                _intervalId = -1;
              }
            }

            function nativeCheckFontLoaded(start, font, callback) {
              var loader = new Promise(function (resolve, reject) {
                var check = function check() {
                  var now = Date.now();

                  if (now - start >= _timeout) {
                    reject();
                  } else {
                    document.fonts.load("40px " + font).then(function (fonts) {
                      if (fonts.length >= 1) {
                        resolve();
                      } else {
                        setTimeout(check, 100);
                      }
                    }, function () {
                      reject();
                    });
                  }
                };

                check();
              });
              var timeoutId = null;
              var timer = new Promise(function (resolve, reject) {
                timeoutId = setTimeout(reject, _timeout);
              });
              Promise.race([timer, loader]).then(function () {
                if (timeoutId) {
                  clearTimeout(timeoutId);
                  timeoutId = null;
                }

                callback(null, font);
              }, function () {
                warnID(4933, font);
                callback(null, font);
              });
            }

            function loadFont(url, options, onComplete) {
              var fontFamilyName = getFontFamily(url);

              if (_fontFaces[fontFamilyName]) {
                onComplete(null, fontFamilyName);
                return;
              }

              if (!_canvasContext) {
                var labelCanvas = document.createElement('canvas');
                labelCanvas.width = 100;
                labelCanvas.height = 100;
                _canvasContext = labelCanvas.getContext('2d');
              }

              var fontDesc = "40px " + fontFamilyName;
              var refWidth = safeMeasureText(_canvasContext, _testString, fontDesc);
              var fontStyle = document.createElement('style');
              fontStyle.type = 'text/css';
              var fontStr = '';

              if (Number.isNaN(fontFamilyName)) {
                fontStr += "@font-face { font-family:" + fontFamilyName + "; src:";
              } else {
                fontStr += "@font-face { font-family:\"" + fontFamilyName + "\"; src:";
              }

              fontStr += "url(\"" + url + "\");";
              fontStyle.textContent = fontStr + "}";
              document.body.appendChild(fontStyle);
              var preloadDiv = document.createElement('div');
              var divStyle = preloadDiv.style;
              divStyle.fontFamily = fontFamilyName;
              preloadDiv.innerHTML = '.';
              divStyle.position = 'absolute';
              divStyle.left = '-100px';
              divStyle.top = '-100px';
              document.body.appendChild(preloadDiv);

              if (useNativeCheck()) {
                nativeCheckFontLoaded(Date.now(), fontFamilyName, onComplete);
              } else {
                var fontLoadHandle = {
                  fontFamilyName: fontFamilyName,
                  refWidth: refWidth,
                  onComplete: onComplete,
                  startTime: Date.now()
                };

                _loadingFonts.push(fontLoadHandle);

                if (_intervalId === -1) {
                  _intervalId = setInterval(checkFontLoaded, 100);
                }
              }

              _fontFaces[fontFamilyName] = fontStyle;
            }
            function getFontFamily(fontHandle) {
              var ttfIndex = fontHandle.lastIndexOf('.ttf');

              if (ttfIndex === -1) {
                return fontHandle;
              }

              var slashPos = fontHandle.lastIndexOf('/');
              var fontFamilyName;

              if (slashPos === -1) {
                fontFamilyName = fontHandle.substring(0, ttfIndex) + "_LABEL";
              } else {
                fontFamilyName = fontHandle.substring(slashPos + 1, ttfIndex) + "_LABEL";
              }

              if (fontFamilyName.indexOf(' ') !== -1) {
                fontFamilyName = "\"" + fontFamilyName + "\"";
              }

              return fontFamilyName;
            }

            function createFont(id, data, options, onComplete) {
              var out = new TTFFont();
              out._nativeUrl = id;
              out._nativeAsset = data;
              onComplete(null, out);
            }

            downloader.register({
              '.font': loadFont,
              '.eot': loadFont,
              '.ttf': loadFont,
              '.woff': loadFont,
              '.svg': loadFont,
              '.ttc': loadFont
            });
            factory.register({
              '.font': createFont,
              '.eot': createFont,
              '.ttf': createFont,
              '.woff': createFont,
              '.svg': createFont,
              '.ttc': createFont
            });

            legacyCC.UI = {
              MeshBuffer: MeshBuffer,
              spriteAssembler: spriteAssembler,
              graphicsAssembler: graphicsAssemblerManager,
              labelAssembler: labelAssembler,
              RenderData: RenderData,
              MeshRenderData: MeshRenderData
            };

            function toPPM(buffer, w, h) {
              return "P3 " + w + " " + h + " 255\n" + buffer.filter(function (e, i) {
                return i % 4 < 3;
              }).toString() + "\n";
            }

            var _keyMap;

            (function (_keyMap) {
              _keyMap[_keyMap["positions"] = AttributeName.ATTR_POSITION] = "positions";
              _keyMap[_keyMap["normals"] = AttributeName.ATTR_NORMAL] = "normals";
              _keyMap[_keyMap["uvs"] = AttributeName.ATTR_TEX_COORD] = "uvs";
              _keyMap[_keyMap["colors"] = AttributeName.ATTR_COLOR] = "colors";
            })(_keyMap || (_keyMap = {}));

            function readMesh(mesh, iPrimitive) {
              if (iPrimitive === void 0) {
                iPrimitive = 0;
              }

              var out = {
                positions: []
              };
              var dataView = new DataView(mesh.data.buffer, mesh.data.byteOffset, mesh.data.byteLength);
              var struct = mesh.struct;
              var primitive = struct.primitives[iPrimitive];

              for (var _iterator = _createForOfIteratorHelperLoose(primitive.vertexBundelIndices), _step; !(_step = _iterator()).done;) {
                var idx = _step.value;
                var bundle = struct.vertexBundles[idx];
                var offset = bundle.view.offset;
                var _bundle$view = bundle.view,
                    length = _bundle$view.length,
                    stride = _bundle$view.stride;

                for (var _iterator2 = _createForOfIteratorHelperLoose(bundle.attributes), _step2; !(_step2 = _iterator2()).done;) {
                  var attr = _step2.value;
                  var name = _keyMap[attr.name];

                  if (name) {
                    out[name] = (out[name] || []).concat(readBuffer(dataView, attr.format, offset, length, stride));
                  }

                  offset += FormatInfos[attr.format].size;
                }
              }

              var view = primitive.indexView;
              out.indices = readBuffer(dataView, Format["R" + view.stride * 8 + "UI"], view.offset, view.length);
              return out;
            }

            var _defAttrs = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_TANGENT, Format.RGBA32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F)];
            var v3_1 = new Vec3();
            function createMesh(geometry, out, options) {
              options = options || {};
              var attributes = [];
              var stride = 0;
              var channels = [];
              var vertCount = 0;
              var attr;
              var positions = geometry.positions.slice();

              if (positions.length > 0) {
                attr = null;

                if (geometry.attributes) {
                  for (var _iterator = _createForOfIteratorHelperLoose(geometry.attributes), _step; !(_step = _iterator()).done;) {
                    var att = _step.value;

                    if (att.name === AttributeName.ATTR_POSITION) {
                      attr = att;
                      break;
                    }
                  }
                }

                if (!attr) {
                  attr = _defAttrs[0];
                }

                attributes.push(attr);
                var info = FormatInfos[attr.format];
                vertCount = Math.max(vertCount, Math.floor(positions.length / info.count));
                channels.push({
                  offset: stride,
                  data: positions,
                  attribute: attr
                });
                stride += info.size;
              }

              if (geometry.normals && geometry.normals.length > 0) {
                attr = null;

                if (geometry.attributes) {
                  for (var _iterator2 = _createForOfIteratorHelperLoose(geometry.attributes), _step2; !(_step2 = _iterator2()).done;) {
                    var _att = _step2.value;

                    if (_att.name === AttributeName.ATTR_NORMAL) {
                      attr = _att;
                      break;
                    }
                  }
                }

                if (!attr) {
                  attr = _defAttrs[1];
                }

                var _info = FormatInfos[attr.format];
                attributes.push(attr);
                vertCount = Math.max(vertCount, Math.floor(geometry.normals.length / _info.count));
                channels.push({
                  offset: stride,
                  data: geometry.normals,
                  attribute: attr
                });
                stride += _info.size;
              }

              if (geometry.uvs && geometry.uvs.length > 0) {
                attr = null;

                if (geometry.attributes) {
                  for (var _iterator3 = _createForOfIteratorHelperLoose(geometry.attributes), _step3; !(_step3 = _iterator3()).done;) {
                    var _att2 = _step3.value;

                    if (_att2.name === AttributeName.ATTR_TEX_COORD) {
                      attr = _att2;
                      break;
                    }
                  }
                }

                if (!attr) {
                  attr = _defAttrs[2];
                }

                var _info2 = FormatInfos[attr.format];
                attributes.push(attr);
                vertCount = Math.max(vertCount, Math.floor(geometry.uvs.length / _info2.count));
                channels.push({
                  offset: stride,
                  data: geometry.uvs,
                  attribute: attr
                });
                stride += _info2.size;
              }

              if (geometry.tangents && geometry.tangents.length > 0) {
                attr = null;

                if (geometry.attributes) {
                  for (var _iterator4 = _createForOfIteratorHelperLoose(geometry.attributes), _step4; !(_step4 = _iterator4()).done;) {
                    var _att3 = _step4.value;

                    if (_att3.name === AttributeName.ATTR_TANGENT) {
                      attr = _att3;
                      break;
                    }
                  }
                }

                if (!attr) {
                  attr = _defAttrs[3];
                }

                var _info3 = FormatInfos[attr.format];
                attributes.push(attr);
                vertCount = Math.max(vertCount, Math.floor(geometry.tangents.length / _info3.count));
                channels.push({
                  offset: stride,
                  data: geometry.tangents,
                  attribute: attr
                });
                stride += _info3.size;
              }

              if (geometry.colors && geometry.colors.length > 0) {
                attr = null;

                if (geometry.attributes) {
                  for (var _iterator5 = _createForOfIteratorHelperLoose(geometry.attributes), _step5; !(_step5 = _iterator5()).done;) {
                    var _att4 = _step5.value;

                    if (_att4.name === AttributeName.ATTR_COLOR) {
                      attr = _att4;
                      break;
                    }
                  }
                }

                if (!attr) {
                  attr = _defAttrs[4];
                }

                var _info4 = FormatInfos[attr.format];
                attributes.push(attr);
                vertCount = Math.max(vertCount, Math.floor(geometry.colors.length / _info4.count));
                channels.push({
                  offset: stride,
                  data: geometry.colors,
                  attribute: attr
                });
                stride += _info4.size;
              }

              if (geometry.customAttributes) {
                for (var _iterator6 = _createForOfIteratorHelperLoose(geometry.customAttributes), _step6; !(_step6 = _iterator6()).done;) {
                  var ca = _step6.value;
                  var _info5 = FormatInfos[ca.attr.format];
                  attributes.push(ca.attr);
                  vertCount = Math.max(vertCount, Math.floor(ca.values.length / _info5.count));
                  channels.push({
                    offset: stride,
                    data: ca.values,
                    attribute: ca.attr
                  });
                  stride += _info5.size;
                }
              }

              var bufferBlob = new BufferBlob();
              var vertexBuffer = new ArrayBuffer(vertCount * stride);
              var vertexBufferView = new DataView(vertexBuffer);

              for (var _i = 0, _channels = channels; _i < _channels.length; _i++) {
                var channel = _channels[_i];
                writeBuffer(vertexBufferView, channel.data, channel.attribute.format, channel.offset, stride);
              }

              bufferBlob.setNextAlignment(0);
              var vertexBundle = {
                attributes: attributes,
                view: {
                  offset: bufferBlob.getLength(),
                  length: vertexBuffer.byteLength,
                  count: vertCount,
                  stride: stride
                }
              };
              bufferBlob.addBuffer(vertexBuffer);
              var indexBuffer = null;
              var idxCount = 0;
              var idxStride = 2;

              if (geometry.indices) {
                var indices = geometry.indices;
                idxCount = indices.length;
                indexBuffer = new ArrayBuffer(idxStride * idxCount);
                var indexBufferView = new DataView(indexBuffer);
                writeBuffer(indexBufferView, indices, Format.R16UI);
              }

              var primitive = {
                primitiveMode: geometry.primitiveMode || PrimitiveMode.TRIANGLE_LIST,
                vertexBundelIndices: [0]
              };

              if (indexBuffer) {
                bufferBlob.setNextAlignment(idxStride);
                primitive.indexView = {
                  offset: bufferBlob.getLength(),
                  length: indexBuffer.byteLength,
                  count: idxCount,
                  stride: idxStride
                };
                bufferBlob.addBuffer(indexBuffer);
              }

              var minPosition = geometry.minPos;

              if (!minPosition && options.calculateBounds) {
                minPosition = Vec3.set(new Vec3(), Infinity, Infinity, Infinity);

                for (var iVertex = 0; iVertex < vertCount; ++iVertex) {
                  Vec3.set(v3_1, positions[iVertex * 3 + 0], positions[iVertex * 3 + 1], positions[iVertex * 3 + 2]);
                  Vec3.min(minPosition, minPosition, v3_1);
                }
              }

              var maxPosition = geometry.maxPos;

              if (!maxPosition && options.calculateBounds) {
                maxPosition = Vec3.set(new Vec3(), -Infinity, -Infinity, -Infinity);

                for (var _iVertex = 0; _iVertex < vertCount; ++_iVertex) {
                  Vec3.set(v3_1, positions[_iVertex * 3 + 0], positions[_iVertex * 3 + 1], positions[_iVertex * 3 + 2]);
                  Vec3.max(maxPosition, maxPosition, v3_1);
                }
              }

              var meshStruct = {
                vertexBundles: [vertexBundle],
                primitives: [primitive]
              };

              if (minPosition) {
                meshStruct.minPosition = new Vec3(minPosition.x, minPosition.y, minPosition.z);
              }

              if (maxPosition) {
                meshStruct.maxPosition = new Vec3(maxPosition.x, maxPosition.y, maxPosition.z);
              }

              if (!out) {
                out = new Mesh();
              }

              out.reset({
                struct: meshStruct,
                data: new Uint8Array(bufferBlob.getCombined())
              });
              return out;
            }

            var utils = /*#__PURE__*/Object.freeze({
                __proto__: null,
                find: find,
                toPPM: toPPM,
                readMesh: readMesh,
                createMesh: createMesh,
                readBuffer: readBuffer,
                writeBuffer: writeBuffer,
                mapBuffer: mapBuffer
            });
            exports('utils', utils);

            var MorphModel = function (_Model) {
              _inheritsLoose(MorphModel, _Model);

              function MorphModel() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Model.call.apply(_Model, [this].concat(args)) || this;
                _this._morphRenderingInstance = null;
                _this._usedMaterials = new Set();
                return _this;
              }

              var _proto = MorphModel.prototype;

              _proto.getMacroPatches = function getMacroPatches(subModelIndex) {
                var superMacroPatches = _Model.prototype.getMacroPatches.call(this, subModelIndex);

                if (this._morphRenderingInstance) {
                  var morphInstanceMacroPatches = this._morphRenderingInstance.requiredPatches(subModelIndex);

                  if (morphInstanceMacroPatches) {
                    return morphInstanceMacroPatches.concat(superMacroPatches !== null && superMacroPatches !== void 0 ? superMacroPatches : []);
                  }
                }

                return superMacroPatches;
              };

              _proto.initSubModel = function initSubModel(subModelIndex, subMeshData, material) {
                return _Model.prototype.initSubModel.call(this, subModelIndex, subMeshData, this._launderMaterial(material));
              };

              _proto.destroy = function destroy() {
                _Model.prototype.destroy.call(this);

                this._morphRenderingInstance = null;
              };

              _proto.setSubModelMaterial = function setSubModelMaterial(subModelIndex, material) {
                return _Model.prototype.setSubModelMaterial.call(this, subModelIndex, this._launderMaterial(material));
              };

              _proto._updateLocalDescriptors = function _updateLocalDescriptors(submodelIdx, descriptorSet) {
                _Model.prototype._updateLocalDescriptors.call(this, submodelIdx, descriptorSet);

                if (this._morphRenderingInstance) {
                  this._morphRenderingInstance.adaptPipelineState(submodelIdx, descriptorSet);
                }
              };

              _proto._launderMaterial = function _launderMaterial(material) {
                return material;
              };

              _proto.setMorphRendering = function setMorphRendering(morphRendering) {
                this._morphRenderingInstance = morphRendering;
              };

              return MorphModel;
            }(Model);

            var _dec$l, _dec2$g, _class$l, _class2$g, _descriptor$e, _descriptor2$b, _descriptor3$8, _descriptor4$7, _descriptor5$6, _descriptor6$4, _temp$i, _dec3$f, _dec4$e, _dec5$c, _dec6$a, _dec7$a, _dec8$9, _dec9$6, _dec10$6, _dec11$5, _dec12$5, _dec13$5, _dec14$4, _dec15$4, _dec16$3, _dec17$3, _dec18$3, _dec19$3, _dec20$3, _dec21$3, _class4, _class5, _descriptor7$3, _descriptor8$3, _descriptor9$3, _descriptor10$3, _descriptor11$2, _descriptor12$2, _descriptor13$2, _class6, _temp2;
            var ModelShadowCastingMode = Enum({
              OFF: 0,
              ON: 1
            });
            var ModelShadowReceivingMode = Enum({
              OFF: 0,
              ON: 1
            });
            var ModelLightmapSettings = (_dec$l = ccclass('cc.ModelLightmapSettings'), _dec2$g = formerlySerializedAs('_recieveShadow'), _dec$l(_class$l = (_class2$g = (_temp$i = function () {
              function ModelLightmapSettings() {
                _initializerDefineProperty(this, "texture", _descriptor$e, this);

                _initializerDefineProperty(this, "uvParam", _descriptor2$b, this);

                _initializerDefineProperty(this, "_bakeable", _descriptor3$8, this);

                _initializerDefineProperty(this, "_castShadow", _descriptor4$7, this);

                _initializerDefineProperty(this, "_receiveShadow", _descriptor5$6, this);

                _initializerDefineProperty(this, "_lightmapSize", _descriptor6$4, this);
              }

              _createClass(ModelLightmapSettings, [{
                key: "bakeable",
                get: function get() {
                  return this._bakeable;
                },
                set: function set(val) {
                  this._bakeable = val;
                }
              }, {
                key: "castShadow",
                get: function get() {
                  return this._castShadow;
                },
                set: function set(val) {
                  this._castShadow = val;
                }
              }, {
                key: "receiveShadow",
                get: function get() {
                  return this._receiveShadow;
                },
                set: function set(val) {
                  this._receiveShadow = val;
                }
              }, {
                key: "lightmapSize",
                get: function get() {
                  return this._lightmapSize;
                },
                set: function set(val) {
                  this._lightmapSize = val;
                }
              }]);

              return ModelLightmapSettings;
            }(), _temp$i), (_descriptor$e = _applyDecoratedDescriptor(_class2$g.prototype, "texture", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$b = _applyDecoratedDescriptor(_class2$g.prototype, "uvParam", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec4();
              }
            }), _descriptor3$8 = _applyDecoratedDescriptor(_class2$g.prototype, "_bakeable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor4$7 = _applyDecoratedDescriptor(_class2$g.prototype, "_castShadow", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor5$6 = _applyDecoratedDescriptor(_class2$g.prototype, "_receiveShadow", [_dec2$g], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor6$4 = _applyDecoratedDescriptor(_class2$g.prototype, "_lightmapSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 64;
              }
            }), _applyDecoratedDescriptor(_class2$g.prototype, "bakeable", [editable], Object.getOwnPropertyDescriptor(_class2$g.prototype, "bakeable"), _class2$g.prototype), _applyDecoratedDescriptor(_class2$g.prototype, "castShadow", [editable], Object.getOwnPropertyDescriptor(_class2$g.prototype, "castShadow"), _class2$g.prototype), _applyDecoratedDescriptor(_class2$g.prototype, "receiveShadow", [editable], Object.getOwnPropertyDescriptor(_class2$g.prototype, "receiveShadow"), _class2$g.prototype), _applyDecoratedDescriptor(_class2$g.prototype, "lightmapSize", [editable], Object.getOwnPropertyDescriptor(_class2$g.prototype, "lightmapSize"), _class2$g.prototype)), _class2$g)) || _class$l);
            var MeshRenderer = function (v) { return exports({ MeshRenderer: v, ModelComponent: v }), v; }((_dec3$f = ccclass('cc.MeshRenderer'), _dec4$e = help(), _dec5$c = executionOrder(100), _dec6$a = menu$1(), _dec7$a = type$1(CCFloat), _dec8$9 = tooltip(), _dec9$6 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 0
              }
            }), _dec10$6 = type$1(CCFloat), _dec11$5 = tooltip(), _dec12$5 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 1
              }
            }), _dec13$5 = type$1(ModelShadowCastingMode), _dec14$4 = tooltip(), _dec15$4 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 2
              }
            }), _dec16$3 = type$1(ModelShadowReceivingMode), _dec17$3 = tooltip(), _dec18$3 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 3
              }
            }), _dec19$3 = type$1(Mesh), _dec20$3 = tooltip(), _dec21$3 = visible(), _dec3$f(_class4 = _dec4$e(_class4 = _dec5$c(_class4 = _dec6$a(_class4 = executeInEditMode(_class4 = (_class5 = (_temp2 = _class6 = function (_RenderableComponent) {
              _inheritsLoose(MeshRenderer, _RenderableComponent);

              function MeshRenderer() {
                var _this;

                _this = _RenderableComponent.call(this) || this;

                _initializerDefineProperty(_this, "lightmapSettings", _descriptor7$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_mesh", _descriptor8$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowCastingMode", _descriptor9$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowReceivingMode", _descriptor10$3, _assertThisInitialized(_this));

                _this._subMeshShapesWeights = [];

                _initializerDefineProperty(_this, "_shadowBias", _descriptor11$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowNormalBias", _descriptor12$2, _assertThisInitialized(_this));

                _this._modelType = void 0;
                _this._model = null;
                _this._morphInstance = null;

                _initializerDefineProperty(_this, "_enableMorph", _descriptor13$2, _assertThisInitialized(_this));

                _this._modelType = Model;
                return _this;
              }

              var _proto = MeshRenderer.prototype;

              _proto.onLoad = function onLoad() {
                if (this._mesh) {
                  this._mesh.initialize();
                }

                if (!this._validateShapeWeights()) {
                  this._initSubMeshShapesWeights();
                }

                this._watchMorphInMesh();

                this._updateModels();

                this._updateCastShadow();

                this._updateReceiveShadow();

                this._updateShadowBias();

                this._updateShadowNormalBias();
              };

              _proto.onRestore = function onRestore() {
                this._updateModels();

                if (this.enabledInHierarchy) {
                  this._attachToScene();
                }

                this._updateCastShadow();

                this._updateReceiveShadow();

                this._updateShadowBias();

                this._updateShadowNormalBias();
              };

              _proto.onEnable = function onEnable() {
                if (!this._model) {
                  this._updateModels();
                }

                this._updateCastShadow();

                this._updateReceiveShadow();

                this._updateShadowBias();

                this._updateShadowNormalBias();

                this._onUpdateLocalShadowBias();

                this._attachToScene();
              };

              _proto.onDisable = function onDisable() {
                if (this._model) {
                  this._detachFromScene();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this._model) {
                  legacyCC.director.root.destroyModel(this._model);
                  this._model = null;
                  this._models.length = 0;
                }

                if (this._morphInstance) {
                  this._morphInstance.destroy();
                }
              };

              _proto.getWeight = function getWeight(subMeshIndex, shapeIndex) {
                var subMeshShapesWeights = this._subMeshShapesWeights;
                assertIsTrue(subMeshIndex < subMeshShapesWeights.length);
                var shapeWeights = this._subMeshShapesWeights[subMeshIndex];
                assertIsTrue(shapeIndex < shapeWeights.length);
                return shapeWeights[shapeIndex];
              };

              _proto.setWeights = function setWeights(weights, subMeshIndex) {
                var subMeshShapesWeights = this._subMeshShapesWeights;

                if (subMeshIndex >= subMeshShapesWeights.length) {
                  return;
                }

                var shapeWeights = subMeshShapesWeights[subMeshIndex];

                if (shapeWeights.length !== weights.length) {
                  return;
                }

                subMeshShapesWeights[subMeshIndex] = weights.slice(0);

                this._uploadSubMeshShapesWeights(subMeshIndex);
              };

              _proto.setWeight = function setWeight(weight, subMeshIndex, shapeIndex) {
                var subMeshShapesWeights = this._subMeshShapesWeights;

                if (subMeshIndex >= subMeshShapesWeights.length) {
                  return;
                }

                var shapeWeights = subMeshShapesWeights[subMeshIndex];

                if (shapeIndex >= shapeWeights.length) {
                  return;
                }

                shapeWeights[shapeIndex] = weight;

                this._uploadSubMeshShapesWeights(subMeshIndex);
              };

              _proto.setInstancedAttribute = function setInstancedAttribute(name, value) {
                if (!this.model) {
                  return;
                }

                var _this$model$instanced = this.model.instancedAttributes,
                    attributes = _this$model$instanced.attributes,
                    views = _this$model$instanced.views;

                for (var i = 0; i < attributes.length; i++) {
                  if (attributes[i].name === name) {
                    views[i].set(value);
                    break;
                  }
                }
              };

              _proto._updateLightmap = function _updateLightmap(lightmap, uOff, vOff, scale, lum) {
                this.lightmapSettings.texture = lightmap;
                this.lightmapSettings.uvParam.x = uOff;
                this.lightmapSettings.uvParam.y = vOff;
                this.lightmapSettings.uvParam.z = scale;
                this.lightmapSettings.uvParam.w = lum;

                this._onUpdateLightingmap();
              };

              _proto._updateModels = function _updateModels() {
                if (!this.enabledInHierarchy) {
                  return;
                }

                var model = this._model;

                if (model) {
                  model.destroy();
                  model.initialize();
                  model.node = model.transform = this.node;
                } else {
                  this._createModel();
                }

                if (this._model) {
                  if (this._mesh) {
                    this._model.createBoundingShape(this._mesh.struct.minPosition, this._mesh.struct.maxPosition);
                  }

                  this._updateModelParams();

                  this._onUpdateLightingmap();

                  this._onUpdateLocalShadowBias();
                }
              };

              _proto._createModel = function _createModel() {
                var preferMorphOverPlain = !!this._morphInstance;
                var modelType = preferMorphOverPlain && this._modelType === Model ? MorphModel : this._modelType;
                var model = this._model = legacyCC.director.root.createModel(modelType);
                model.visFlags = this.visibility;
                model.node = model.transform = this.node;
                this._models.length = 0;

                this._models.push(this._model);

                if (this._morphInstance && model instanceof MorphModel) {
                  model.setMorphRendering(this._morphInstance);
                }
              };

              _proto._attachToScene = function _attachToScene() {
                if (!this.node.scene || !this._model) {
                  return;
                }

                var renderScene = this._getRenderScene();

                if (this._model.scene !== null) {
                  this._detachFromScene();
                }

                renderScene.addModel(this._model);
              };

              _proto._detachFromScene = function _detachFromScene() {
                if (this._model && this._model.scene) {
                  this._model.scene.removeModel(this._model);
                }
              };

              _proto._updateModelParams = function _updateModelParams() {
                if (!this._mesh || !this._model) {
                  return;
                }

                this.node.hasChangedFlags |= TransformBit.POSITION;
                this._model.transform.hasChangedFlags |= TransformBit.POSITION;
                this._model.isDynamicBatching = this._isBatchingEnabled();
                var meshCount = this._mesh ? this._mesh.renderingSubMeshes.length : 0;
                var renderingMesh = this._mesh.renderingSubMeshes;

                if (renderingMesh) {
                  for (var i = 0; i < meshCount; ++i) {
                    var material = this.getRenderMaterial(i);

                    if (material && !material.isValid) {
                      material = null;
                    }

                    var subMeshData = renderingMesh[i];

                    if (subMeshData) {
                      this._model.initSubModel(i, subMeshData, material || this._getBuiltinMaterial());
                    }
                  }
                }

                this._model.enabled = true;
              };

              _proto._onUpdateLightingmap = function _onUpdateLightingmap() {
                if (this.model !== null) {
                  this.model.updateLightingmap(this.lightmapSettings.texture, this.lightmapSettings.uvParam);
                }

                this.setInstancedAttribute('a_lightingMapUVParam', [this.lightmapSettings.uvParam.x, this.lightmapSettings.uvParam.y, this.lightmapSettings.uvParam.z, this.lightmapSettings.uvParam.w]);
              };

              _proto._onUpdateLocalShadowBias = function _onUpdateLocalShadowBias() {
                if (this.model !== null) {
                  this.model.updateLocalShadowBias();
                }

                this.setInstancedAttribute('a_localShadowBias', [this._shadowBias, this._shadowNormalBias]);
              };

              _proto._onMaterialModified = function _onMaterialModified(idx, material) {
                if (!this._model || !this._model.inited) {
                  return;
                }

                this._onRebuildPSO(idx, material || this._getBuiltinMaterial());
              };

              _proto._onRebuildPSO = function _onRebuildPSO(idx, material) {
                if (!this._model || !this._model.inited) {
                  return;
                }

                this._model.isDynamicBatching = this._isBatchingEnabled();

                this._model.setSubModelMaterial(idx, material);

                this._onUpdateLightingmap();

                this._onUpdateLocalShadowBias();
              };

              _proto._onMeshChanged = function _onMeshChanged(old) {};

              _proto._clearMaterials = function _clearMaterials() {
                if (!this._model) {
                  return;
                }

                var subModels = this._model.subModels;

                for (var i = 0; i < subModels.length; ++i) {
                  this._onMaterialModified(i, null);
                }
              };

              _proto._getBuiltinMaterial = function _getBuiltinMaterial() {
                return builtinResMgr.get('missing-material');
              };

              _proto._onVisibilityChange = function _onVisibilityChange(val) {
                if (!this._model) {
                  return;
                }

                this._model.visFlags = val;
              };

              _proto._updateShadowBias = function _updateShadowBias() {
                if (!this._model) {
                  return;
                }

                this._model.shadowBias = this._shadowBias;
              };

              _proto._updateShadowNormalBias = function _updateShadowNormalBias() {
                if (!this._model) {
                  return;
                }

                this._model.shadowNormalBias = this._shadowNormalBias;
              };

              _proto._updateCastShadow = function _updateCastShadow() {
                if (!this._model) {
                  return;
                }

                if (this._shadowCastingMode === ModelShadowCastingMode.OFF) {
                  this._model.castShadow = false;
                } else {
                  assertIsTrue(this._shadowCastingMode === ModelShadowCastingMode.ON, "ShadowCastingMode " + this._shadowCastingMode + " is not supported.");
                  this._model.castShadow = true;
                }
              };

              _proto._updateReceiveShadow = function _updateReceiveShadow() {
                if (!this._model) {
                  return;
                }

                if (this._shadowReceivingMode === ModelShadowReceivingMode.OFF) {
                  this._model.receiveShadow = false;
                } else {
                  this._model.receiveShadow = true;
                }
              };

              _proto._isBatchingEnabled = function _isBatchingEnabled() {
                for (var i = 0; i < this._materials.length; ++i) {
                  var mat = this._materials[i];

                  if (!mat) {
                    continue;
                  }

                  for (var p = 0; p < mat.passes.length; ++p) {
                    var pass = mat.passes[p];

                    if (pass.batchingScheme) {
                      return true;
                    }
                  }
                }

                return false;
              };

              _proto._watchMorphInMesh = function _watchMorphInMesh() {
                if (this._morphInstance) {
                  this._morphInstance.destroy();

                  this._morphInstance = null;
                }

                if (!this._enableMorph) {
                  return;
                }

                if (!this._mesh || !this._mesh.struct.morph || !this._mesh.morphRendering) {
                  return;
                }

                this._morphInstance = this._mesh.morphRendering.createInstance();
                var nSubMeshes = this._mesh.struct.primitives.length;

                for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
                  this._uploadSubMeshShapesWeights(iSubMesh);
                }

                if (this._model && this._model instanceof MorphModel) {
                  this._model.setMorphRendering(this._morphInstance);
                }
              };

              _proto._initSubMeshShapesWeights = function _initSubMeshShapesWeights() {
                var mesh = this._mesh;
                this._subMeshShapesWeights.length = 0;

                if (!mesh) {
                  return;
                }

                var morph = mesh.struct.morph;

                if (!morph) {
                  return;
                }

                var commonWeights = morph.weights;
                this._subMeshShapesWeights = morph.subMeshMorphs.map(function (subMeshMorph) {
                  if (!subMeshMorph) {
                    return [];
                  } else if (subMeshMorph.weights) {
                    return subMeshMorph.weights.slice(0);
                  } else if (commonWeights) {
                    assertIsTrue(commonWeights.length === subMeshMorph.targets.length);
                    return commonWeights.slice(0);
                  } else {
                    return new Array(subMeshMorph.targets.length).fill(0.0);
                  }
                });
              };

              _proto._validateShapeWeights = function _validateShapeWeights() {
                var mesh = this._mesh,
                    subMeshShapesWeights = this._subMeshShapesWeights;

                if (!mesh || !mesh.struct.morph) {
                  return subMeshShapesWeights.length === 0;
                }

                var morph = mesh.struct.morph;

                if (morph.subMeshMorphs.length !== subMeshShapesWeights.length) {
                  return false;
                }

                return subMeshShapesWeights.every(function (_ref, subMeshIndex) {
                  var _morph$subMeshMorphs$, _morph$subMeshMorphs$2;

                  var shapeCount = _ref.length;
                  return ((_morph$subMeshMorphs$ = (_morph$subMeshMorphs$2 = morph.subMeshMorphs[subMeshIndex]) === null || _morph$subMeshMorphs$2 === void 0 ? void 0 : _morph$subMeshMorphs$2.targets.length) !== null && _morph$subMeshMorphs$ !== void 0 ? _morph$subMeshMorphs$ : 0) === shapeCount;
                });
              };

              _proto._uploadSubMeshShapesWeights = function _uploadSubMeshShapesWeights(subMeshIndex) {
                var _this$_morphInstance;

                (_this$_morphInstance = this._morphInstance) === null || _this$_morphInstance === void 0 ? void 0 : _this$_morphInstance.setWeights(subMeshIndex, this._subMeshShapesWeights[subMeshIndex]);
              };

              _createClass(MeshRenderer, [{
                key: "shadowBias",
                get: function get() {
                  return this._shadowBias;
                },
                set: function set(val) {
                  this._shadowBias = val;

                  this._updateShadowBias();

                  this._onUpdateLocalShadowBias();
                }
              }, {
                key: "shadowNormalBias",
                get: function get() {
                  return this._shadowNormalBias;
                },
                set: function set(val) {
                  this._shadowNormalBias = val;

                  this._updateShadowNormalBias();

                  this._onUpdateLocalShadowBias();
                }
              }, {
                key: "shadowCastingMode",
                get: function get() {
                  return this._shadowCastingMode;
                },
                set: function set(val) {
                  this._shadowCastingMode = val;

                  this._updateCastShadow();
                }
              }, {
                key: "receiveShadow",
                get: function get() {
                  return this._shadowReceivingMode;
                },
                set: function set(val) {
                  this._shadowReceivingMode = val;

                  this._updateReceiveShadow();
                }
              }, {
                key: "mesh",
                get: function get() {
                  return this._mesh;
                },
                set: function set(val) {
                  var old = this._mesh;
                  var mesh = this._mesh = val;
                  mesh === null || mesh === void 0 ? void 0 : mesh.initialize();

                  this._initSubMeshShapesWeights();

                  this._watchMorphInMesh();

                  this._onMeshChanged(old);

                  this._updateModels();

                  if (this.enabledInHierarchy) {
                    this._attachToScene();
                  }

                  this._updateCastShadow();

                  this._updateReceiveShadow();
                }
              }, {
                key: "model",
                get: function get() {
                  return this._model;
                }
              }, {
                key: "enableMorph",
                get: function get() {
                  return this._enableMorph;
                },
                set: function set(value) {
                  this._enableMorph = value;
                }
              }]);

              return MeshRenderer;
            }(RenderableComponent), _class6.ShadowCastingMode = ModelShadowCastingMode, _class6.ShadowReceivingMode = ModelShadowReceivingMode, _temp2), (_descriptor7$3 = _applyDecoratedDescriptor(_class5.prototype, "lightmapSettings", [serializable, editable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new ModelLightmapSettings();
              }
            }), _descriptor8$3 = _applyDecoratedDescriptor(_class5.prototype, "_mesh", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor9$3 = _applyDecoratedDescriptor(_class5.prototype, "_shadowCastingMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return ModelShadowCastingMode.OFF;
              }
            }), _descriptor10$3 = _applyDecoratedDescriptor(_class5.prototype, "_shadowReceivingMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return ModelShadowReceivingMode.ON;
              }
            }), _descriptor11$2 = _applyDecoratedDescriptor(_class5.prototype, "_shadowBias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor12$2 = _applyDecoratedDescriptor(_class5.prototype, "_shadowNormalBias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class5.prototype, "shadowBias", [_dec7$a, _dec8$9, _dec9$6, disallowAnimation], Object.getOwnPropertyDescriptor(_class5.prototype, "shadowBias"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "shadowNormalBias", [_dec10$6, _dec11$5, _dec12$5, disallowAnimation], Object.getOwnPropertyDescriptor(_class5.prototype, "shadowNormalBias"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "shadowCastingMode", [_dec13$5, _dec14$4, _dec15$4, disallowAnimation], Object.getOwnPropertyDescriptor(_class5.prototype, "shadowCastingMode"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "receiveShadow", [_dec16$3, _dec17$3, _dec18$3, disallowAnimation], Object.getOwnPropertyDescriptor(_class5.prototype, "receiveShadow"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "mesh", [_dec19$3, _dec20$3], Object.getOwnPropertyDescriptor(_class5.prototype, "mesh"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "enableMorph", [_dec21$3, disallowAnimation], Object.getOwnPropertyDescriptor(_class5.prototype, "enableMorph"), _class5.prototype), _descriptor13$2 = _applyDecoratedDescriptor(_class5.prototype, "_enableMorph", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            })), _class5)) || _class4) || _class4) || _class4) || _class4) || _class4));

            function checkMaterialisSame(comp1, comp2) {
              var matNum = comp1.sharedMaterials.length;

              if (matNum !== comp2.sharedMaterials.length) {
                return false;
              }

              for (var i = 0; i < matNum; i++) {
                if (comp1.getRenderMaterial(i) !== comp2.getRenderMaterial(i)) {
                  return false;
                }
              }

              return true;
            }

            var BatchingUtility = exports('BatchingUtility', function () {
              function BatchingUtility() {}

              BatchingUtility.batchStaticModel = function batchStaticModel(staticModelRoot, batchedRoot) {
                var models = staticModelRoot.getComponentsInChildren(MeshRenderer);

                if (models.length < 2) {
                  console.error('the number of static models to batch is less than 2,it needn\'t batch.');
                  return false;
                }

                for (var i = 1; i < models.length; i++) {
                  if (!models[0].mesh.validateMergingMesh(models[i].mesh)) {
                    console.error("the meshes of " + models[0].node.name + " and " + models[i].node.name + " can't be merged");
                    return false;
                  }

                  if (!checkMaterialisSame(models[0], models[i])) {
                    console.error("the materials of " + models[0].node.name + " and " + models[i].node.name + " can't be merged");
                    return false;
                  }
                }

                var batchedMesh = new Mesh();
                var worldMat = new Mat4();
                var rootWorldMatInv = new Mat4();
                staticModelRoot.getWorldMatrix(rootWorldMatInv);
                Mat4.invert(rootWorldMatInv, rootWorldMatInv);

                for (var _i = 0; _i < models.length; _i++) {
                  var comp = models[_i];
                  comp.node.getWorldMatrix(worldMat);
                  Mat4.multiply(worldMat, rootWorldMatInv, worldMat);
                  batchedMesh.merge(models[_i].mesh, worldMat);
                  comp.enabled = false;
                }

                var batchedModel = batchedRoot.addComponent(MeshRenderer);
                batchedModel.mesh = batchedMesh;
                batchedModel.sharedMaterials = models[0].sharedMaterials;
                return true;
              };

              BatchingUtility.unbatchStaticModel = function unbatchStaticModel(staticModelRoot, batchedRoot) {
                var models = staticModelRoot.getComponentsInChildren(MeshRenderer);

                for (var i = 0; i < models.length; i++) {
                  var comp = models[i];
                  comp.enabled = true;
                }

                var batchedModel = batchedRoot.getComponent(MeshRenderer);

                if (batchedModel) {
                  if (batchedModel.mesh) {
                    batchedModel.mesh.destroyRenderingMesh();
                  }

                  batchedModel.destroy();
                }

                return true;
              };

              return BatchingUtility;
            }());

            removeProperty(MeshRenderer.prototype, 'MeshRenderer.prototype', [{
              name: 'enableDynamicBatching'
            }, {
              name: 'recieveShadows'
            }]);
            legacyCC.ModelComponent = MeshRenderer;
            js.setClassAlias(MeshRenderer, 'cc.ModelComponent');

            var _dec$m, _class$m, _class2$h, _descriptor$f, _descriptor2$c, _descriptor3$9, _descriptor4$8, _temp$j, _dec2$h, _dec3$g, _dec4$f, _dec5$d, _dec6$b, _dec7$b, _dec8$a, _class4$1, _class5$1, _descriptor5$7, _descriptor6$5, _descriptor7$4, _descriptor8$4, _class6$1, _temp2$1;
            var PhotometricTerm = Enum({
              LUMINOUS_FLUX: 0,
              LUMINANCE: 1
            });

            var _color_tmp = new Vec3();

            var StaticLightSettings = (_dec$m = ccclass('cc.StaticLightSettings'), _dec$m(_class$m = (_class2$h = (_temp$j = function () {
              function StaticLightSettings() {
                _initializerDefineProperty(this, "_baked", _descriptor$f, this);

                _initializerDefineProperty(this, "_editorOnly", _descriptor2$c, this);

                _initializerDefineProperty(this, "_bakeable", _descriptor3$9, this);

                _initializerDefineProperty(this, "_castShadow", _descriptor4$8, this);
              }

              _createClass(StaticLightSettings, [{
                key: "editorOnly",
                get: function get() {
                  return this._editorOnly;
                },
                set: function set(val) {
                  this._editorOnly = val;
                }
              }, {
                key: "baked",
                get: function get() {
                  return this._baked;
                },
                set: function set(val) {
                  this._baked = val;
                }
              }, {
                key: "bakeable",
                get: function get() {
                  return this._bakeable;
                },
                set: function set(val) {
                  this._bakeable = val;
                }
              }, {
                key: "castShadow",
                get: function get() {
                  return this._castShadow;
                },
                set: function set(val) {
                  this._castShadow = val;
                }
              }]);

              return StaticLightSettings;
            }(), _temp$j), (_descriptor$f = _applyDecoratedDescriptor(_class2$h.prototype, "_baked", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$c = _applyDecoratedDescriptor(_class2$h.prototype, "_editorOnly", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor3$9 = _applyDecoratedDescriptor(_class2$h.prototype, "_bakeable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor4$8 = _applyDecoratedDescriptor(_class2$h.prototype, "_castShadow", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$h.prototype, "editorOnly", [editable], Object.getOwnPropertyDescriptor(_class2$h.prototype, "editorOnly"), _class2$h.prototype), _applyDecoratedDescriptor(_class2$h.prototype, "bakeable", [editable], Object.getOwnPropertyDescriptor(_class2$h.prototype, "bakeable"), _class2$h.prototype), _applyDecoratedDescriptor(_class2$h.prototype, "castShadow", [editable], Object.getOwnPropertyDescriptor(_class2$h.prototype, "castShadow"), _class2$h.prototype)), _class2$h)) || _class$m);
            var Light = function (v) { return exports({ Light: v, LightComponent: v }), v; }((_dec2$h = ccclass('cc.Light'), _dec3$g = tooltip(), _dec4$f = tooltip(), _dec5$d = range(), _dec6$b = tooltip(), _dec7$b = type$1(StaticLightSettings), _dec8$a = displayOrder(), _dec2$h(_class4$1 = (_class5$1 = (_temp2$1 = _class6$1 = function (_Component) {
              _inheritsLoose(Light, _Component);

              function Light() {
                var _this;

                _this = _Component.call(this) || this;

                _initializerDefineProperty(_this, "_color", _descriptor5$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_useColorTemperature", _descriptor6$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_colorTemperature", _descriptor7$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_staticSettings", _descriptor8$4, _assertThisInitialized(_this));

                _this._type = LightType.UNKNOWN;
                _this._lightType = void 0;
                _this._light = null;
                _this._lightType = Light$1;
                return _this;
              }

              var _proto = Light.prototype;

              _proto.onLoad = function onLoad() {
                this._createLight();
              };

              _proto.onEnable = function onEnable() {
                this._attachToScene();
              };

              _proto.onDisable = function onDisable() {
                this._detachFromScene();
              };

              _proto.onDestroy = function onDestroy() {
                this._destroyLight();
              };

              _proto._createLight = function _createLight() {
                if (!this._light) {
                  this._light = legacyCC.director.root.createLight(this._lightType);
                }

                this.color = this._color;
                this.useColorTemperature = this._useColorTemperature;
                this.colorTemperature = this._colorTemperature;
                this._light.node = this.node;
                this._light.baked = this.baked;
              };

              _proto._destroyLight = function _destroyLight() {
                if (this._light) {
                  legacyCC.director.root.destroyLight(this);
                  this._light = null;
                }
              };

              _proto._attachToScene = function _attachToScene() {
                this._detachFromScene();

                if (this._light && !this._light.scene && this.node.scene) {
                  var renderScene = this._getRenderScene();

                  switch (this._type) {
                    case LightType.DIRECTIONAL:
                      renderScene.addDirectionalLight(this._light);
                      renderScene.setMainLight(this._light);
                      break;

                    case LightType.SPHERE:
                      renderScene.addSphereLight(this._light);
                      break;

                    case LightType.SPOT:
                      renderScene.addSpotLight(this._light);
                      break;
                  }
                }
              };

              _proto._detachFromScene = function _detachFromScene() {
                if (this._light && this._light.scene) {
                  var renderScene = this._light.scene;

                  switch (this._type) {
                    case LightType.DIRECTIONAL:
                      renderScene.removeDirectionalLight(this._light);
                      renderScene.unsetMainLight(this._light);
                      break;

                    case LightType.SPHERE:
                      renderScene.removeSphereLight(this._light);
                      break;

                    case LightType.SPOT:
                      renderScene.removeSpotLight(this._light);
                      break;
                  }
                }
              };

              _createClass(Light, [{
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(val) {
                  this._color = val;

                  if (this._light) {
                    _color_tmp.x = val.r / 255.0;
                    _color_tmp.y = val.g / 255.0;
                    _color_tmp.z = val.b / 255.0;
                    this._light.color = _color_tmp;
                  }
                }
              }, {
                key: "useColorTemperature",
                get: function get() {
                  return this._useColorTemperature;
                },
                set: function set(enable) {
                  this._useColorTemperature = enable;

                  if (this._light) {
                    this._light.useColorTemperature = enable;
                  }
                }
              }, {
                key: "colorTemperature",
                get: function get() {
                  return this._colorTemperature;
                },
                set: function set(val) {
                  this._colorTemperature = val;

                  if (this._light) {
                    this._light.colorTemperature = val;
                  }
                }
              }, {
                key: "staticSettings",
                get: function get() {
                  return this._staticSettings;
                },
                set: function set(val) {
                  this._staticSettings = val;
                }
              }, {
                key: "type",
                get: function get() {
                  return this._type;
                }
              }, {
                key: "baked",
                get: function get() {
                  return this.staticSettings.baked;
                },
                set: function set(val) {
                  this.staticSettings.baked = val;

                  if (this._light !== null) {
                    this._light.baked = val;
                  }
                }
              }]);

              return Light;
            }(Component), _class6$1.Type = LightType, _class6$1.PhotometricTerm = PhotometricTerm, _temp2$1), (_descriptor5$7 = _applyDecoratedDescriptor(_class5$1.prototype, "_color", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            }), _descriptor6$5 = _applyDecoratedDescriptor(_class5$1.prototype, "_useColorTemperature", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor7$4 = _applyDecoratedDescriptor(_class5$1.prototype, "_colorTemperature", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 6550;
              }
            }), _descriptor8$4 = _applyDecoratedDescriptor(_class5$1.prototype, "_staticSettings", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new StaticLightSettings();
              }
            }), _applyDecoratedDescriptor(_class5$1.prototype, "color", [_dec3$g], Object.getOwnPropertyDescriptor(_class5$1.prototype, "color"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "useColorTemperature", [_dec4$f], Object.getOwnPropertyDescriptor(_class5$1.prototype, "useColorTemperature"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "colorTemperature", [slide, _dec5$d, _dec6$b], Object.getOwnPropertyDescriptor(_class5$1.prototype, "colorTemperature"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "staticSettings", [_dec7$b, _dec8$a], Object.getOwnPropertyDescriptor(_class5$1.prototype, "staticSettings"), _class5$1.prototype)), _class5$1)) || _class4$1));

            var _dec$n, _dec2$i, _dec3$h, _dec4$g, _dec5$e, _dec6$c, _dec7$c, _dec8$b, _dec9$7, _dec10$7, _dec11$6, _dec12$6, _dec13$6, _dec14$5, _dec15$5, _dec16$4, _dec17$4, _dec18$4, _dec19$4, _dec20$4, _dec21$4, _dec22$3, _dec23$2, _dec24$2, _dec25$2, _dec26$2, _dec27$2, _dec28$2, _dec29$2, _dec30$2, _dec31$2, _dec32$2, _dec33$1, _dec34$1, _dec35$1, _dec36$1, _dec37$1, _dec38$1, _dec39$1, _dec40$1, _dec41$1, _dec42$1, _dec43$1, _class$n, _class2$i, _descriptor$g, _descriptor2$d, _descriptor3$a, _descriptor4$9, _descriptor5$8, _descriptor6$6, _descriptor7$5, _descriptor8$5, _descriptor9$4, _descriptor10$4, _descriptor11$3, _descriptor12$3, _descriptor13$3, _temp$k;
            var DirectionalLight = function (v) { return exports({ DirectionalLight: v, DirectionalLightComponent: v }), v; }((_dec$n = ccclass('cc.DirectionalLight'), _dec2$i = help(), _dec3$h = menu$1(), _dec4$g = formerlySerializedAs('_illuminance'), _dec5$e = tooltip(), _dec6$c = visible(), _dec7$c = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 1
              }
            }), _dec8$b = type$1(CCBoolean), _dec9$7 = visible(), _dec10$7 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 5
              }
            }), _dec11$6 = type$1(PCFType), _dec12$6 = visible(), _dec13$6 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 6
              }
            }), _dec14$5 = type$1(CCFloat), _dec15$5 = visible(), _dec16$4 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 7
              }
            }), _dec17$4 = type$1(CCFloat), _dec18$4 = visible(), _dec19$4 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 8
              }
            }), _dec20$4 = range(), _dec21$4 = type$1(CCFloat), _dec22$3 = visible(), _dec23$2 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 9
              }
            }), _dec24$2 = tooltip(), _dec25$2 = range(), _dec26$2 = type$1(CCFloat), _dec27$2 = visible(), _dec28$2 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 10
              }
            }), _dec29$2 = tooltip(), _dec30$2 = range(), _dec31$2 = type$1(CCFloat), _dec32$2 = visible(), _dec33$1 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 11
              }
            }), _dec34$1 = type$1(CCBoolean), _dec35$1 = visible(), _dec36$1 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 12
              }
            }), _dec37$1 = type$1(CCFloat), _dec38$1 = visible(), _dec39$1 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 13
              }
            }), _dec40$1 = type$1(CCFloat), _dec41$1 = visible(), _dec42$1 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 14
              }
            }), _dec43$1 = type$1(CCFloat), _dec$n(_class$n = _dec2$i(_class$n = _dec3$h(_class$n = executeInEditMode(_class$n = (_class2$i = (_temp$k = function (_Light) {
              _inheritsLoose(DirectionalLight, _Light);

              function DirectionalLight() {
                var _this;

                _this = _Light.call(this) || this;

                _initializerDefineProperty(_this, "_illuminanceHDR", _descriptor$g, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_illuminanceLDR", _descriptor2$d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowEnabled", _descriptor3$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowPcf", _descriptor4$9, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowBias", _descriptor5$8, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowNormalBias", _descriptor6$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowSaturation", _descriptor7$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowDistance", _descriptor8$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowInvisibleOcclusionRange", _descriptor9$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowFixedArea", _descriptor10$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowNear", _descriptor11$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowFar", _descriptor12$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowOrthoSize", _descriptor13$3, _assertThisInitialized(_this));

                _this._type = LightType.DIRECTIONAL;
                _this._light = null;
                _this._lightType = DirectionalLight$1;
                return _this;
              }

              var _proto = DirectionalLight.prototype;

              _proto._createLight = function _createLight() {
                _Light.prototype._createLight.call(this);

                if (this._light) {
                  this._light.illuminanceHDR = this._illuminanceHDR;
                  this._light.illuminanceLDR = this._illuminanceLDR;
                  this._light.shadowEnabled = this._shadowEnabled;
                  this._light.shadowPcf = this._shadowPcf;
                  this._light.shadowBias = this._shadowBias;
                  this._light.shadowNormalBias = this._shadowNormalBias;
                  this._light.shadowSaturation = this._shadowSaturation;
                  this._light.shadowDistance = this._shadowDistance;
                  this._light.shadowInvisibleOcclusionRange = this._shadowInvisibleOcclusionRange;
                  this._light.shadowFixedArea = this._shadowFixedArea;
                  this._light.shadowNear = this._shadowNear;
                  this._light.shadowFar = this._shadowFar;
                  this._light.shadowOrthoSize = this._shadowOrthoSize;
                }
              };

              _createClass(DirectionalLight, [{
                key: "illuminance",
                get: function get() {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    return this._illuminanceHDR;
                  } else {
                    return this._illuminanceLDR;
                  }
                },
                set: function set(val) {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    this._illuminanceHDR = val;
                    this._light && (this._light.illuminanceHDR = this._illuminanceHDR);
                  } else {
                    this._illuminanceLDR = val;
                    this._light && (this._light.illuminanceLDR = this._illuminanceLDR);
                  }
                }
              }, {
                key: "shadowEnabled",
                get: function get() {
                  return this._shadowEnabled;
                },
                set: function set(val) {
                  this._shadowEnabled = val;

                  if (this._light) {
                    this._light.shadowEnabled = this._shadowEnabled;
                  }
                }
              }, {
                key: "shadowPcf",
                get: function get() {
                  return this._shadowPcf;
                },
                set: function set(val) {
                  this._shadowPcf = val;

                  if (this._light) {
                    this._light.shadowPcf = this._shadowPcf;
                  }
                }
              }, {
                key: "shadowBias",
                get: function get() {
                  return this._shadowBias;
                },
                set: function set(val) {
                  this._shadowBias = val;

                  if (this._light) {
                    this._light.shadowBias = this._shadowBias;
                  }
                }
              }, {
                key: "shadowNormalBias",
                get: function get() {
                  return this._shadowNormalBias;
                },
                set: function set(val) {
                  this._shadowNormalBias = val;

                  if (this._light) {
                    this._light.shadowNormalBias = this._shadowNormalBias;
                  }
                }
              }, {
                key: "shadowSaturation",
                get: function get() {
                  return this._shadowSaturation;
                },
                set: function set(val) {
                  this._shadowSaturation = clamp$1(val, 0.0, 1.0);

                  if (this._light) {
                    this._light.shadowSaturation = this._shadowSaturation;
                  }
                }
              }, {
                key: "shadowDistance",
                get: function get() {
                  return this._shadowDistance;
                },
                set: function set(val) {
                  this._shadowDistance = Math.min(val, Shadows.MAX_FAR);

                  if (this._light) {
                    this._light.shadowDistance = this._shadowDistance;
                  }
                }
              }, {
                key: "shadowInvisibleOcclusionRange",
                get: function get() {
                  return this._shadowInvisibleOcclusionRange;
                },
                set: function set(val) {
                  this._shadowInvisibleOcclusionRange = Math.min(val, Shadows.MAX_FAR);

                  if (this._light) {
                    this._light.shadowInvisibleOcclusionRange = this._shadowInvisibleOcclusionRange;
                  }
                }
              }, {
                key: "shadowFixedArea",
                get: function get() {
                  return this._shadowFixedArea;
                },
                set: function set(val) {
                  this._shadowFixedArea = val;

                  if (this._light) {
                    this._light.shadowFixedArea = this._shadowFixedArea;
                  }
                }
              }, {
                key: "shadowNear",
                get: function get() {
                  return this._shadowNear;
                },
                set: function set(val) {
                  this._shadowNear = val;

                  if (this._light) {
                    this._light.shadowNear = this._shadowNear;
                  }
                }
              }, {
                key: "shadowFar",
                get: function get() {
                  return this._shadowFar;
                },
                set: function set(val) {
                  this._shadowFar = Math.min(val, Shadows.MAX_FAR);

                  if (this._light) {
                    this._light.shadowFar = this._shadowFar;
                  }
                }
              }, {
                key: "shadowOrthoSize",
                get: function get() {
                  return this._shadowOrthoSize;
                },
                set: function set(val) {
                  this._shadowOrthoSize = val;

                  if (this._light) {
                    this._light.shadowOrthoSize = this._shadowOrthoSize;
                  }
                }
              }]);

              return DirectionalLight;
            }(Light), _temp$k), (_descriptor$g = _applyDecoratedDescriptor(_class2$i.prototype, "_illuminanceHDR", [property$1, _dec4$g], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 65000;
              }
            }), _descriptor2$d = _applyDecoratedDescriptor(_class2$i.prototype, "_illuminanceLDR", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 65000 * Camera$1.standardExposureValue;
              }
            }), _descriptor3$a = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowEnabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor4$9 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowPcf", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PCFType.HARD;
              }
            }), _descriptor5$8 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowBias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.00001;
              }
            }), _descriptor6$6 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowNormalBias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.0;
              }
            }), _descriptor7$5 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowSaturation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            }), _descriptor8$5 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowDistance", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 100;
              }
            }), _descriptor9$4 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowInvisibleOcclusionRange", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 200;
              }
            }), _descriptor10$4 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowFixedArea", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor11$3 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowNear", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.1;
              }
            }), _descriptor12$3 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowFar", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 10.0;
              }
            }), _descriptor13$3 = _applyDecoratedDescriptor(_class2$i.prototype, "_shadowOrthoSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5;
              }
            }), _applyDecoratedDescriptor(_class2$i.prototype, "illuminance", [_dec5$e], Object.getOwnPropertyDescriptor(_class2$i.prototype, "illuminance"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowEnabled", [_dec6$c, _dec7$c, editable, _dec8$b], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowEnabled"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowPcf", [_dec9$7, _dec10$7, editable, _dec11$6], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowPcf"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowBias", [_dec12$6, _dec13$6, editable, _dec14$5], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowBias"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowNormalBias", [_dec15$5, _dec16$4, editable, _dec17$4], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowNormalBias"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowSaturation", [_dec18$4, _dec19$4, editable, _dec20$4, slide, _dec21$4], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowSaturation"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowDistance", [_dec22$3, _dec23$2, editable, _dec24$2, _dec25$2, slide, _dec26$2], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowDistance"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowInvisibleOcclusionRange", [_dec27$2, _dec28$2, editable, _dec29$2, _dec30$2, slide, _dec31$2], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowInvisibleOcclusionRange"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowFixedArea", [_dec32$2, _dec33$1, editable, _dec34$1], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowFixedArea"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowNear", [_dec35$1, _dec36$1, editable, _dec37$1], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowNear"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowFar", [_dec38$1, _dec39$1, editable, _dec40$1], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowFar"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "shadowOrthoSize", [_dec41$1, _dec42$1, _dec43$1], Object.getOwnPropertyDescriptor(_class2$i.prototype, "shadowOrthoSize"), _class2$i.prototype)), _class2$i)) || _class$n) || _class$n) || _class$n) || _class$n));

            var _dec$o, _dec2$j, _dec3$i, _dec4$h, _dec5$f, _dec6$d, _dec7$d, _dec8$c, _dec9$8, _dec10$8, _dec11$7, _dec12$7, _dec13$7, _class$o, _class2$j, _descriptor$h, _descriptor2$e, _descriptor3$b, _descriptor4$a, _descriptor5$9, _temp$l;
            var SphereLight = function (v) { return exports({ SphereLight: v, SphereLightComponent: v }), v; }((_dec$o = ccclass('cc.SphereLight'), _dec2$j = help(), _dec3$i = menu$1(), _dec4$h = formerlySerializedAs('_luminance'), _dec5$f = displayOrder(), _dec6$d = tooltip(), _dec7$d = displayOrder(), _dec8$c = tooltip(), _dec9$8 = type$1(PhotometricTerm), _dec10$8 = displayOrder(), _dec11$7 = tooltip(), _dec12$7 = tooltip(), _dec13$7 = tooltip(), _dec$o(_class$o = _dec2$j(_class$o = _dec3$i(_class$o = executeInEditMode(_class$o = (_class2$j = (_temp$l = function (_Light) {
              _inheritsLoose(SphereLight, _Light);

              function SphereLight() {
                var _this;

                _this = _Light.call(this) || this;

                _initializerDefineProperty(_this, "_size", _descriptor$h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_luminanceHDR", _descriptor2$e, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_luminanceLDR", _descriptor3$b, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_term", _descriptor4$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_range", _descriptor5$9, _assertThisInitialized(_this));

                _this._type = LightType.SPHERE;
                _this._light = null;
                _this._lightType = SphereLight$1;
                return _this;
              }

              var _proto = SphereLight.prototype;

              _proto._createLight = function _createLight() {
                _Light.prototype._createLight.call(this);

                this.size = this._size;
                this.range = this._range;

                if (this._light) {
                  this._light.luminanceHDR = this._luminanceHDR;
                  this._light.luminanceLDR = this._luminanceLDR;
                }
              };

              _createClass(SphereLight, [{
                key: "luminousFlux",
                get: function get() {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    return this._luminanceHDR * nt2lm(this._size);
                  } else {
                    return this._luminanceLDR;
                  }
                },
                set: function set(val) {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;
                  var result = 0;

                  if (isHDR) {
                    this._luminanceHDR = val / nt2lm(this._size);
                    result = this._luminanceHDR;
                  } else {
                    this._luminanceLDR = val;
                    result = this._luminanceLDR;
                  }

                  this._light && (this._light.luminance = result);
                }
              }, {
                key: "luminance",
                get: function get() {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    return this._luminanceHDR;
                  } else {
                    return this._luminanceLDR;
                  }
                },
                set: function set(val) {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    this._luminanceHDR = val;
                    this._light && (this._light.luminanceHDR = this._luminanceHDR);
                  } else {
                    this._luminanceLDR = val;
                    this._light && (this._light.luminanceLDR = this._luminanceLDR);
                  }
                }
              }, {
                key: "term",
                get: function get() {
                  return this._term;
                },
                set: function set(val) {
                  this._term = val;
                }
              }, {
                key: "size",
                get: function get() {
                  return this._size;
                },
                set: function set(val) {
                  this._size = val;

                  if (this._light) {
                    this._light.size = val;
                  }
                }
              }, {
                key: "range",
                get: function get() {
                  return this._range;
                },
                set: function set(val) {
                  this._range = val;

                  if (this._light) {
                    this._light.range = val;
                  }
                }
              }]);

              return SphereLight;
            }(Light), _temp$l), (_descriptor$h = _applyDecoratedDescriptor(_class2$j.prototype, "_size", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.15;
              }
            }), _descriptor2$e = _applyDecoratedDescriptor(_class2$j.prototype, "_luminanceHDR", [serializable, _dec4$h], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1700 / nt2lm(0.15);
              }
            }), _descriptor3$b = _applyDecoratedDescriptor(_class2$j.prototype, "_luminanceLDR", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1700 / nt2lm(0.15) * Camera$1.standardExposureValue * Camera$1.standardLightMeterScale;
              }
            }), _descriptor4$a = _applyDecoratedDescriptor(_class2$j.prototype, "_term", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PhotometricTerm.LUMINOUS_FLUX;
              }
            }), _descriptor5$9 = _applyDecoratedDescriptor(_class2$j.prototype, "_range", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _applyDecoratedDescriptor(_class2$j.prototype, "luminousFlux", [_dec5$f, _dec6$d], Object.getOwnPropertyDescriptor(_class2$j.prototype, "luminousFlux"), _class2$j.prototype), _applyDecoratedDescriptor(_class2$j.prototype, "luminance", [_dec7$d, _dec8$c], Object.getOwnPropertyDescriptor(_class2$j.prototype, "luminance"), _class2$j.prototype), _applyDecoratedDescriptor(_class2$j.prototype, "term", [_dec9$8, _dec10$8, _dec11$7], Object.getOwnPropertyDescriptor(_class2$j.prototype, "term"), _class2$j.prototype), _applyDecoratedDescriptor(_class2$j.prototype, "size", [_dec12$7], Object.getOwnPropertyDescriptor(_class2$j.prototype, "size"), _class2$j.prototype), _applyDecoratedDescriptor(_class2$j.prototype, "range", [_dec13$7], Object.getOwnPropertyDescriptor(_class2$j.prototype, "range"), _class2$j.prototype)), _class2$j)) || _class$o) || _class$o) || _class$o) || _class$o));

            var _dec$p, _dec2$k, _dec3$j, _dec4$i, _dec5$g, _dec6$e, _dec7$e, _dec8$d, _dec9$9, _dec10$9, _dec11$8, _dec12$8, _dec13$8, _dec14$6, _dec15$6, _dec16$5, _dec17$5, _dec18$5, _dec19$5, _dec20$5, _dec21$5, _dec22$4, _dec23$3, _dec24$3, _dec25$3, _dec26$3, _dec27$3, _class$p, _class2$k, _descriptor$i, _descriptor2$f, _descriptor3$c, _descriptor4$b, _descriptor5$a, _descriptor6$7, _descriptor7$6, _descriptor8$6, _descriptor9$5, _descriptor10$5, _temp$m;
            var SpotLight = function (v) { return exports({ SpotLight: v, SpotLightComponent: v }), v; }((_dec$p = ccclass('cc.SpotLight'), _dec2$k = help(), _dec3$j = menu$1(), _dec4$i = formerlySerializedAs('_luminance'), _dec5$g = tooltip(), _dec6$e = displayOrder(), _dec7$e = tooltip(), _dec8$d = displayOrder(), _dec9$9 = type$1(PhotometricTerm), _dec10$9 = displayOrder(), _dec11$8 = tooltip(), _dec12$8 = tooltip(), _dec13$8 = tooltip(), _dec14$6 = range(), _dec15$6 = tooltip(), _dec16$5 = visible(), _dec17$5 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 1
              }
            }), _dec18$5 = type$1(CCBoolean), _dec19$5 = visible(), _dec20$5 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 2
              }
            }), _dec21$5 = type$1(PCFType), _dec22$4 = visible(), _dec23$3 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 3
              }
            }), _dec24$3 = type$1(CCFloat), _dec25$3 = visible(), _dec26$3 = property$1({
              group: {
                name: 'DynamicShadowSettings',
                displayOrder: 4
              }
            }), _dec27$3 = type$1(CCFloat), _dec$p(_class$p = _dec2$k(_class$p = _dec3$j(_class$p = executeInEditMode(_class$p = (_class2$k = (_temp$m = function (_Light) {
              _inheritsLoose(SpotLight, _Light);

              function SpotLight() {
                var _this;

                _this = _Light.call(this) || this;

                _initializerDefineProperty(_this, "_size", _descriptor$i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_luminanceHDR", _descriptor2$f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_luminanceLDR", _descriptor3$c, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_term", _descriptor4$b, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_range", _descriptor5$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_spotAngle", _descriptor6$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowEnabled", _descriptor7$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowPcf", _descriptor8$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowBias", _descriptor9$5, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shadowNormalBias", _descriptor10$5, _assertThisInitialized(_this));

                _this._type = LightType.SPOT;
                _this._light = null;
                _this._lightType = SpotLight$1;
                return _this;
              }

              var _proto = SpotLight.prototype;

              _proto._createLight = function _createLight() {
                _Light.prototype._createLight.call(this);

                this.size = this._size;
                this.range = this._range;
                this.spotAngle = this._spotAngle;

                if (this._light) {
                  this._light.luminanceHDR = this._luminanceHDR;
                  this._light.luminanceLDR = this._luminanceLDR;
                  this._light.shadowEnabled = this._shadowEnabled;
                  this._light.shadowPcf = this._shadowPcf;
                  this._light.shadowBias = this._shadowBias;
                  this._light.shadowNormalBias = this._shadowNormalBias;
                }
              };

              _createClass(SpotLight, [{
                key: "luminousFlux",
                get: function get() {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    return this._luminanceHDR * nt2lm(this._size);
                  } else {
                    return this._luminanceLDR;
                  }
                },
                set: function set(val) {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;
                  var result = 0;

                  if (isHDR) {
                    this._luminanceHDR = val / nt2lm(this._size);
                    result = this._luminanceHDR;
                  } else {
                    this._luminanceLDR = val;
                    result = this._luminanceLDR;
                  }

                  this._light && (this._light.luminance = result);
                }
              }, {
                key: "luminance",
                get: function get() {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    return this._luminanceHDR;
                  } else {
                    return this._luminanceLDR;
                  }
                },
                set: function set(val) {
                  var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

                  if (isHDR) {
                    this._luminanceHDR = val;
                    this._light && (this._light.luminanceHDR = this._luminanceHDR);
                  } else {
                    this._luminanceLDR = val;
                    this._light && (this._light.luminanceLDR = this._luminanceLDR);
                  }
                }
              }, {
                key: "term",
                get: function get() {
                  return this._term;
                },
                set: function set(val) {
                  this._term = val;
                }
              }, {
                key: "size",
                get: function get() {
                  return this._size;
                },
                set: function set(val) {
                  this._size = val;

                  if (this._light) {
                    this._light.size = val;
                  }
                }
              }, {
                key: "range",
                get: function get() {
                  return this._range;
                },
                set: function set(val) {
                  this._range = val;

                  if (this._light) {
                    this._light.range = val;
                  }
                }
              }, {
                key: "spotAngle",
                get: function get() {
                  return this._spotAngle;
                },
                set: function set(val) {
                  this._spotAngle = val;

                  if (this._light) {
                    this._light.spotAngle = toRadian(val);
                  }
                }
              }, {
                key: "shadowEnabled",
                get: function get() {
                  return this._shadowEnabled;
                },
                set: function set(val) {
                  this._shadowEnabled = val;

                  if (this._light) {
                    this._light.shadowEnabled = val;
                  }
                }
              }, {
                key: "shadowPcf",
                get: function get() {
                  return this._shadowPcf;
                },
                set: function set(val) {
                  this._shadowPcf = val;

                  if (this._light) {
                    this._light.shadowPcf = val;
                  }
                }
              }, {
                key: "shadowBias",
                get: function get() {
                  return this._shadowBias;
                },
                set: function set(val) {
                  this._shadowBias = val;

                  if (this._light) {
                    this._light.shadowBias = val;
                  }
                }
              }, {
                key: "shadowNormalBias",
                get: function get() {
                  return this._shadowNormalBias;
                },
                set: function set(val) {
                  this._shadowNormalBias = val;

                  if (this._light) {
                    this._light.shadowNormalBias = val;
                  }
                }
              }]);

              return SpotLight;
            }(Light), _temp$m), (_descriptor$i = _applyDecoratedDescriptor(_class2$k.prototype, "_size", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.15;
              }
            }), _descriptor2$f = _applyDecoratedDescriptor(_class2$k.prototype, "_luminanceHDR", [serializable, _dec4$i], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1700 / nt2lm(0.15);
              }
            }), _descriptor3$c = _applyDecoratedDescriptor(_class2$k.prototype, "_luminanceLDR", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1700 / nt2lm(0.15) * Camera$1.standardExposureValue * Camera$1.standardLightMeterScale;
              }
            }), _descriptor4$b = _applyDecoratedDescriptor(_class2$k.prototype, "_term", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PhotometricTerm.LUMINOUS_FLUX;
              }
            }), _descriptor5$a = _applyDecoratedDescriptor(_class2$k.prototype, "_range", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor6$7 = _applyDecoratedDescriptor(_class2$k.prototype, "_spotAngle", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 60;
              }
            }), _descriptor7$6 = _applyDecoratedDescriptor(_class2$k.prototype, "_shadowEnabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor8$6 = _applyDecoratedDescriptor(_class2$k.prototype, "_shadowPcf", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PCFType.HARD;
              }
            }), _descriptor9$5 = _applyDecoratedDescriptor(_class2$k.prototype, "_shadowBias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.00001;
              }
            }), _descriptor10$5 = _applyDecoratedDescriptor(_class2$k.prototype, "_shadowNormalBias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.0;
              }
            }), _applyDecoratedDescriptor(_class2$k.prototype, "luminousFlux", [_dec5$g, _dec6$e], Object.getOwnPropertyDescriptor(_class2$k.prototype, "luminousFlux"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "luminance", [_dec7$e, _dec8$d], Object.getOwnPropertyDescriptor(_class2$k.prototype, "luminance"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "term", [_dec9$9, _dec10$9, _dec11$8], Object.getOwnPropertyDescriptor(_class2$k.prototype, "term"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "size", [_dec12$8], Object.getOwnPropertyDescriptor(_class2$k.prototype, "size"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "range", [_dec13$8], Object.getOwnPropertyDescriptor(_class2$k.prototype, "range"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "spotAngle", [slide, _dec14$6, _dec15$6], Object.getOwnPropertyDescriptor(_class2$k.prototype, "spotAngle"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "shadowEnabled", [_dec16$5, _dec17$5, editable, _dec18$5], Object.getOwnPropertyDescriptor(_class2$k.prototype, "shadowEnabled"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "shadowPcf", [_dec19$5, _dec20$5, editable, _dec21$5], Object.getOwnPropertyDescriptor(_class2$k.prototype, "shadowPcf"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "shadowBias", [_dec22$4, _dec23$3, editable, _dec24$3], Object.getOwnPropertyDescriptor(_class2$k.prototype, "shadowBias"), _class2$k.prototype), _applyDecoratedDescriptor(_class2$k.prototype, "shadowNormalBias", [_dec25$3, _dec26$3, editable, _dec27$3], Object.getOwnPropertyDescriptor(_class2$k.prototype, "shadowNormalBias"), _class2$k.prototype)), _class2$k)) || _class$p) || _class$p) || _class$p) || _class$p));

            legacyCC.LightComponent = Light;
            js.setClassAlias(Light, 'cc.LightComponent');
            legacyCC.DirectionalLightComponent = DirectionalLight;
            js.setClassAlias(DirectionalLight, 'cc.DirectionalLightComponent');
            legacyCC.SphereLightComponent = SphereLight;
            js.setClassAlias(SphereLight, 'cc.SphereLightComponent');
            legacyCC.SpotLightComponent = SpotLight;
            js.setClassAlias(SpotLight, 'cc.SpotLightComponent');
            replaceProperty(SpotLight.prototype, 'SpotLight.prototype', [{
              name: 'luminousPower',
              newName: 'luminousFlux',
              customGetter: function customGetter() {
                return this.luminousFlux;
              },
              customSetter: function customSetter(value) {
                this.luminousFlux = value;
              }
            }]);
            replaceProperty(SphereLight.prototype, 'SphereLight.prototype', [{
              name: 'luminousPower',
              newName: 'luminousFlux',
              customGetter: function customGetter() {
                return this.luminousFlux;
              },
              customSetter: function customSetter(value) {
                this.luminousFlux = value;
              }
            }]);
            replaceProperty(Light.PhotometricTerm, 'Light.PhotometricTerm', [{
              name: 'LUMINOUS_POWER',
              newName: 'LUMINOUS_FLUX'
            }]);

            var BAKE_SKELETON_CURVE_SYMBOL = Symbol('BakeNodeCurves');

            var SkelAnimDataHub = exports('SkelAnimDataHub', function () {
              function SkelAnimDataHub() {}

              SkelAnimDataHub.getOrExtract = function getOrExtract(clip) {
                var data = SkelAnimDataHub.pool.get(clip);

                if (!data || data.samples !== clip.sample) {
                  if (data) {
                    legacyCC.director.root.dataPoolManager.releaseAnimationClip(clip);
                  }

                  var frames = Math.ceil(clip.sample * clip.duration) + 1;
                  var step = clip.sample;
                  data = clip[BAKE_SKELETON_CURVE_SYMBOL](0, step, frames);
                  SkelAnimDataHub.pool.set(clip, data);
                }

                return data;
              };

              SkelAnimDataHub.destroy = function destroy(clip) {
                SkelAnimDataHub.pool["delete"](clip);
              };

              return SkelAnimDataHub;
            }());
            SkelAnimDataHub.pool = new Map();

            var m4_1$1 = new Mat4();
            function getPathFromRoot(target, root) {
              var node = target;
              var path = '';

              while (node !== null && node !== root) {
                path = node.name + "/" + path;
                node = node.parent;
              }

              return path.slice(0, -1);
            }
            function getWorldTransformUntilRoot(target, root, outMatrix) {
              Mat4.identity(outMatrix);

              while (target !== root) {
                Mat4.fromRTS(m4_1$1, target.rotation, target.position, target.scale);
                Mat4.multiply(outMatrix, m4_1$1, outMatrix);
                target = target.parent;
              }

              return outMatrix;
            }

            var jointTextureSamplerInfo = new SamplerInfo(Filter.POINT, Filter.POINT, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP);

            var uploadJointData = uploadJointDataLBS;
            var MINIMUM_JOINT_TEXTURE_SIZE =  480;
            function selectJointsMediumFormat(device) {
              if (device.getFormatFeatures(Format.RGBA32F) & FormatFeatureBit.SAMPLED_TEXTURE) {
                return Format.RGBA32F;
              }

              return Format.RGBA8;
            }

            function uploadJointDataLBS(out, base, mat, firstBone) {
              out[base + 0] = mat.m00;
              out[base + 1] = mat.m01;
              out[base + 2] = mat.m02;
              out[base + 3] = mat.m12;
              out[base + 4] = mat.m04;
              out[base + 5] = mat.m05;
              out[base + 6] = mat.m06;
              out[base + 7] = mat.m13;
              out[base + 8] = mat.m08;
              out[base + 9] = mat.m09;
              out[base + 10] = mat.m10;
              out[base + 11] = mat.m14;
            }

            var dq_0 = new Quat();
            var dq_1 = new Quat();
            var v3_1$1 = new Vec3();
            var qt_1 = new Quat();
            var v3_2 = new Vec3();

            function roundUpTextureSize(targetLength, formatSize) {
              var formatScale = 4 / Math.sqrt(formatSize);
              return Math.ceil(Math.max(MINIMUM_JOINT_TEXTURE_SIZE * formatScale, targetLength) / 12) * 12;
            }
            var v3_3 = new Vec3();
            var v3_4 = new Vec3();
            var v3_min = new Vec3();
            var v3_max = new Vec3();
            var m4_1$2 = new Mat4();
            var m4_2 = new Mat4();
            var ab_1 = new AABB();
            var Inf = Number.MAX_SAFE_INTEGER;
            var JointTexturePool = function () {
              function JointTexturePool(device) {
                this._device = void 0;
                this._pool = void 0;
                this._textureBuffers = new Map();
                this._formatSize = void 0;
                this._pixelsPerJoint = void 0;
                this._customPool = void 0;
                this._chunkIdxMap = new Map();
                this._device = device;
                var format = selectJointsMediumFormat(this._device);
                this._formatSize = FormatInfos[format].size;
                this._pixelsPerJoint = 48 / this._formatSize;
                this._pool = new TextureBufferPool(device);

                this._pool.initialize({
                  format: format,
                  roundUpFn: roundUpTextureSize
                });

                this._customPool = new TextureBufferPool(device);

                this._customPool.initialize({
                  format: format,
                  roundUpFn: roundUpTextureSize
                });
              }

              var _proto = JointTexturePool.prototype;

              _proto.clear = function clear() {
                this._pool.destroy();

                this._textureBuffers.clear();
              };

              _proto.registerCustomTextureLayouts = function registerCustomTextureLayouts(layouts) {
                for (var i = 0; i < layouts.length; i++) {
                  var layout = layouts[i];

                  var chunkIdx = this._customPool.createChunk(layout.textureLength);

                  for (var j = 0; j < layout.contents.length; j++) {
                    var content = layout.contents[j];
                    var skeleton = content.skeleton;

                    this._chunkIdxMap.set(skeleton, chunkIdx);

                    for (var k = 0; k < content.clips.length; k++) {
                      var clip = content.clips[k];

                      this._chunkIdxMap.set(skeleton ^ clip, chunkIdx);
                    }
                  }
                }
              };

              _proto.getDefaultPoseTexture = function getDefaultPoseTexture(skeleton, mesh, skinningRoot) {
                var hash = skeleton.hash ^ 0;
                var texture = this._textureBuffers.get(hash) || null;

                if (texture && texture.bounds.has(mesh.hash)) {
                  texture.refCount++;
                  return texture;
                }

                var joints = skeleton.joints,
                    bindposes = skeleton.bindposes;
                var textureBuffer = null;
                var buildTexture = false;
                var jointCount = joints.length;

                if (!texture) {
                  var bufSize = jointCount * 12;

                  var customChunkIdx = this._chunkIdxMap.get(hash);

                  var handle = customChunkIdx !== undefined ? this._customPool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT, customChunkIdx) : this._pool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT);

                  if (!handle) {
                    return texture;
                  }

                  texture = {
                    pixelOffset: handle.start / this._formatSize,
                    refCount: 1,
                    bounds: new Map(),
                    skeletonHash: skeleton.hash,
                    clipHash: 0,
                    readyToBeDeleted: false,
                    handle: handle
                  };
                  textureBuffer = new Float32Array(bufSize);
                  buildTexture = true;
                } else {
                  texture.refCount++;
                }

                Vec3.set(v3_min, Inf, Inf, Inf);
                Vec3.set(v3_max, -Inf, -Inf, -Inf);
                var boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);

                for (var j = 0, offset = 0; j < jointCount; j++, offset += 12) {
                  var node = skinningRoot.getChildByPath(joints[j]);
                  var mat = node ? getWorldTransformUntilRoot(node, skinningRoot, m4_1$2) : skeleton.inverseBindposes[j];
                  var bound = boneSpaceBounds[j];

                  if (bound) {
                    AABB.transform(ab_1, bound, mat);
                    ab_1.getBoundary(v3_3, v3_4);
                    Vec3.min(v3_min, v3_min, v3_3);
                    Vec3.max(v3_max, v3_max, v3_4);
                  }

                  if (buildTexture) {
                    if (node) {
                      Mat4.multiply(mat, mat, bindposes[j]);
                    }

                    uploadJointData(textureBuffer, offset, node ? mat : Mat4.IDENTITY);
                  }
                }

                var bounds = [new AABB()];
                texture.bounds.set(mesh.hash, bounds);
                AABB.fromPoints(bounds[0], v3_min, v3_max);

                if (buildTexture) {
                  this._pool.update(texture.handle, textureBuffer.buffer);

                  this._textureBuffers.set(hash, texture);
                }

                return texture;
              };

              _proto.getSequencePoseTexture = function getSequencePoseTexture(skeleton, clip, mesh, skinningRoot) {
                var hash = skeleton.hash ^ clip.hash;
                var texture = this._textureBuffers.get(hash) || null;

                if (texture && texture.bounds.has(mesh.hash)) {
                  texture.refCount++;
                  return texture;
                }

                var joints = skeleton.joints,
                    bindposes = skeleton.bindposes;
                var clipData = SkelAnimDataHub.getOrExtract(clip);
                var frames = clipData.frames;
                var textureBuffer = null;
                var buildTexture = false;
                var jointCount = joints.length;

                if (!texture) {
                  var bufSize = jointCount * 12 * frames;

                  var customChunkIdx = this._chunkIdxMap.get(hash);

                  var handle = customChunkIdx !== undefined ? this._customPool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT, customChunkIdx) : this._pool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT);

                  if (!handle) {
                    return null;
                  }

                  var animInfos = this._createAnimInfos(skeleton, clip, skinningRoot);

                  texture = {
                    pixelOffset: handle.start / this._formatSize,
                    refCount: 1,
                    bounds: new Map(),
                    skeletonHash: skeleton.hash,
                    clipHash: clip.hash,
                    readyToBeDeleted: false,
                    handle: handle,
                    animInfos: animInfos
                  };
                  textureBuffer = new Float32Array(bufSize);
                  buildTexture = true;
                } else {
                  texture.refCount++;
                }

                var boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);
                var bounds = [];
                texture.bounds.set(mesh.hash, bounds);

                for (var f = 0; f < frames; f++) {
                  bounds.push(new AABB(Inf, Inf, Inf, -Inf, -Inf, -Inf));
                }

                for (var _f = 0, offset = 0; _f < frames; _f++) {
                  var bound = bounds[_f];

                  for (var j = 0; j < jointCount; j++, offset += 12) {
                    var _j = texture.animInfos[j],
                        curveData = _j.curveData,
                        downstream = _j.downstream,
                        bindposeIdx = _j.bindposeIdx,
                        bindposeCorrection = _j.bindposeCorrection;
                    var mat = void 0;
                    var transformValid = true;

                    if (curveData && downstream) {
                      mat = Mat4.multiply(m4_1$2, curveData[_f], downstream);
                    } else if (curveData) {
                      mat = curveData[_f];
                    } else if (downstream) {
                      mat = downstream;
                    } else {
                      mat = skeleton.inverseBindposes[bindposeIdx];
                      transformValid = false;
                    }

                    var boneSpaceBound = boneSpaceBounds[j];

                    if (boneSpaceBound) {
                      var transform = bindposeCorrection ? Mat4.multiply(m4_2, mat, bindposeCorrection) : mat;
                      AABB.transform(ab_1, boneSpaceBound, transform);
                      ab_1.getBoundary(v3_3, v3_4);
                      Vec3.min(bound.center, bound.center, v3_3);
                      Vec3.max(bound.halfExtents, bound.halfExtents, v3_4);
                    }

                    if (buildTexture) {
                      if (transformValid) {
                        Mat4.multiply(m4_1$2, mat, bindposes[bindposeIdx]);
                      }

                      uploadJointData(textureBuffer, offset, transformValid ? m4_1$2 : Mat4.IDENTITY);
                    }
                  }

                  AABB.fromPoints(bound, bound.center, bound.halfExtents);
                }

                if (buildTexture) {
                  this._pool.update(texture.handle, textureBuffer.buffer);

                  this._textureBuffers.set(hash, texture);
                }

                return texture;
              };

              _proto.releaseHandle = function releaseHandle(handle) {
                if (handle.refCount > 0) {
                  handle.refCount--;
                }

                if (!handle.refCount && handle.readyToBeDeleted) {
                  var hash = handle.skeletonHash ^ handle.clipHash;

                  var customChunkIdx = this._chunkIdxMap.get(hash);

                  (customChunkIdx !== undefined ? this._customPool : this._pool).free(handle.handle);

                  if (this._textureBuffers.get(hash) === handle) {
                    this._textureBuffers["delete"](hash);
                  }
                }
              };

              _proto.releaseSkeleton = function releaseSkeleton(skeleton) {
                var it = this._textureBuffers.values();

                var res = it.next();

                while (!res.done) {
                  var handle = res.value;

                  if (handle.skeletonHash === skeleton.hash) {
                    handle.readyToBeDeleted = true;

                    if (handle.refCount) {
                      this._textureBuffers["delete"](handle.skeletonHash ^ handle.clipHash);
                    } else {
                      this.releaseHandle(handle);
                    }
                  }

                  res = it.next();
                }
              };

              _proto.releaseAnimationClip = function releaseAnimationClip(clip) {
                var it = this._textureBuffers.values();

                var res = it.next();

                while (!res.done) {
                  var handle = res.value;

                  if (handle.clipHash === clip.hash) {
                    handle.readyToBeDeleted = true;

                    if (handle.refCount) {
                      this._textureBuffers["delete"](handle.skeletonHash ^ handle.clipHash);
                    } else {
                      this.releaseHandle(handle);
                    }
                  }

                  res = it.next();
                }
              };

              _proto._createAnimInfos = function _createAnimInfos(skeleton, clip, skinningRoot) {
                var animInfos = [];
                var joints = skeleton.joints,
                    bindposes = skeleton.bindposes;
                var jointCount = joints.length;
                var clipData = SkelAnimDataHub.getOrExtract(clip);

                for (var j = 0; j < jointCount; j++) {
                  var animPath = joints[j];
                  var source = clipData.joints[animPath];
                  var animNode = skinningRoot.getChildByPath(animPath);
                  var downstream = void 0;
                  var correctionPath = void 0;

                  while (!source) {
                    var idx = animPath.lastIndexOf('/');
                    animPath = animPath.substring(0, idx);
                    source = clipData.joints[animPath];

                    if (animNode) {
                      if (!downstream) {
                        downstream = new Mat4();
                      }

                      Mat4.fromRTS(m4_1$2, animNode.rotation, animNode.position, animNode.scale);
                      Mat4.multiply(downstream, m4_1$2, downstream);
                      animNode = animNode.parent;
                    } else {
                      correctionPath = animPath;
                    }

                    if (idx < 0) {
                      break;
                    }
                  }

                  var bindposeIdx = j;
                  var bindposeCorrection = void 0;

                  if (correctionPath !== undefined && source) {
                    bindposeIdx = j - 1;

                    for (var t = 0; t < jointCount; t++) {
                      if (joints[t] === correctionPath) {
                        bindposeIdx = t;
                        bindposeCorrection = new Mat4();
                        Mat4.multiply(bindposeCorrection, bindposes[t], skeleton.inverseBindposes[j]);
                        break;
                      }
                    }
                  }

                  animInfos.push({
                    curveData: source && source.transforms,
                    downstream: downstream,
                    bindposeIdx: bindposeIdx,
                    bindposeCorrection: bindposeCorrection
                  });
                }

                return animInfos;
              };

              _createClass(JointTexturePool, [{
                key: "pixelsPerJoint",
                get: function get() {
                  return this._pixelsPerJoint;
                }
              }]);

              return JointTexturePool;
            }();
            var JointAnimationInfo = function () {
              function JointAnimationInfo(device) {
                this._pool = new Map();
                this._device = void 0;
                this._device = device;
              }

              var _proto2 = JointAnimationInfo.prototype;

              _proto2.getData = function getData(nodeID) {
                if (nodeID === void 0) {
                  nodeID = '-1';
                }

                var res = this._pool.get(nodeID);

                if (res) {
                  return res;
                }

                var buffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOSkinningAnimation.SIZE, UBOSkinningAnimation.SIZE));

                var data = new Float32Array([0, 0, 0, 0]);
                buffer.update(data);
                var info = {
                  buffer: buffer,
                  data: data,
                  dirty: false,
                  currentClip: null
                };

                this._setAnimInfoDirty(info, false);

                this._pool.set(nodeID, info);

                return info;
              };

              _proto2.destroy = function destroy(nodeID) {
                var info = this._pool.get(nodeID);

                if (!info) {
                  return;
                }

                info.buffer.destroy();

                this._pool["delete"](nodeID);
              };

              _proto2._setAnimInfoDirty = function _setAnimInfoDirty(info, value) {
                info.dirty = value;
              };

              _proto2.switchClip = function switchClip(info, clip) {
                info.currentClip = clip;
                info.data[0] = -1;
                info.buffer.update(info.data);

                this._setAnimInfoDirty(info, false);

                return info;
              };

              _proto2.clear = function clear() {
                for (var _iterator = _createForOfIteratorHelperLoose(this._pool.values()), _step; !(_step = _iterator()).done;) {
                  var info = _step.value;
                  info.buffer.destroy();
                }

                this._pool.clear();
              };

              return JointAnimationInfo;
            }();

            var stack = [];
            var pool$1 = new Map();
            function getWorldMatrix(transform, stamp) {
              var i = 0;
              var res = Mat4.IDENTITY;

              while (transform) {
                if (transform.stamp === stamp || transform.stamp + 1 === stamp && !transform.node.hasChangedFlags) {
                  res = transform.world;
                  transform.stamp = stamp;
                  break;
                }

                transform.stamp = stamp;
                stack[i++] = transform;
                transform = transform.parent;
              }

              while (i > 0) {
                transform = stack[--i];
                stack[i] = null;
                var node = transform.node;
                Mat4.fromRTS(transform.local, node.rotation, node.position, node.scale);
                res = Mat4.multiply(transform.world, res, transform.local);
              }

              return res;
            }
            function getTransform(node, root) {
              var joint = null;
              var i = 0;

              while (node !== root) {
                var id = node.uuid;

                if (pool$1.has(id)) {
                  joint = pool$1.get(id);
                  break;
                } else {
                  joint = {
                    node: node,
                    local: new Mat4(),
                    world: new Mat4(),
                    stamp: -1,
                    parent: null
                  };
                  pool$1.set(id, joint);
                }

                stack[i++] = joint;
                node = node.parent;
                joint = null;
              }

              var child;

              while (i > 0) {
                child = stack[--i];
                stack[i] = null;
                child.parent = joint;
                joint = child;
              }

              return joint;
            }
            function deleteTransform(node) {
              var transform = pool$1.get(node.uuid) || null;

              while (transform) {
                pool$1["delete"](transform.node.uuid);
                transform = transform.parent;
              }
            }

            var myPatches = [{
              name: 'CC_USE_SKINNING',
              value: true
            }];

            function getRelevantBuffers(outIndices, outBuffers, jointMaps, targetJoint) {
              for (var i = 0; i < jointMaps.length; i++) {
                var idxMap = jointMaps[i];
                var index = -1;

                for (var j = 0; j < idxMap.length; j++) {
                  if (idxMap[j] === targetJoint) {
                    index = j;
                    break;
                  }
                }

                if (index >= 0) {
                  outBuffers.push(i);
                  outIndices.push(index);
                }
              }
            }

            var v3_min$1 = new Vec3();
            var v3_max$1 = new Vec3();
            var v3_1$2 = new Vec3();
            var v3_2$1 = new Vec3();
            var m4_1$3 = new Mat4();
            var ab_1$1 = new AABB();
            var SkinningModel = function (_MorphModel) {
              _inheritsLoose(SkinningModel, _MorphModel);

              function SkinningModel() {
                var _this;

                _this = _MorphModel.call(this) || this;
                _this.uploadAnimation = null;
                _this._buffers = [];
                _this._dataArray = [];
                _this._joints = [];
                _this._bufferIndices = null;
                _this.type = ModelType.SKINNING;
                return _this;
              }

              var _proto = SkinningModel.prototype;

              _proto._init = function _init() {
              };

              _proto.destroy = function destroy() {
                this.bindSkeleton();

                if (this._buffers.length) {
                  for (var i = 0; i < this._buffers.length; i++) {
                    this._buffers[i].destroy();
                  }

                  this._buffers.length = 0;
                }

                _MorphModel.prototype.destroy.call(this);
              };

              _proto.bindSkeleton = function bindSkeleton(skeleton, skinningRoot, mesh) {
                if (skeleton === void 0) {
                  skeleton = null;
                }

                if (skinningRoot === void 0) {
                  skinningRoot = null;
                }

                if (mesh === void 0) {
                  mesh = null;
                }

                for (var i = 0; i < this._joints.length; i++) {
                  deleteTransform(this._joints[i].target);
                }

                this._bufferIndices = null;
                this._joints.length = 0;

                if (!skeleton || !skinningRoot || !mesh) {
                  return;
                }

                this.transform = skinningRoot;
                var boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);
                var jointMaps = mesh.struct.jointMaps;

                this._ensureEnoughBuffers(jointMaps && jointMaps.length || 1);

                this._bufferIndices = mesh.jointBufferIndices;

                for (var index = 0; index < skeleton.joints.length; index++) {
                  var bound = boneSpaceBounds[index];
                  var target = skinningRoot.getChildByPath(skeleton.joints[index]);

                  if (!bound || !target) {
                    continue;
                  }

                  var transform = getTransform(target, skinningRoot);
                  var bindpose = skeleton.bindposes[index];
                  var indices = [];
                  var buffers = [];

                  if (!jointMaps) {
                    indices.push(index);
                    buffers.push(0);
                  } else {
                    getRelevantBuffers(indices, buffers, jointMaps, index);
                  }

                  this._joints.push({
                    indices: indices,
                    buffers: buffers,
                    bound: bound,
                    target: target,
                    bindpose: bindpose,
                    transform: transform
                  });
                }
              };

              _proto.updateTransform = function updateTransform(stamp) {
                var root = this.transform;

                if (root.hasChangedFlags || root._dirtyFlags) {
                  root.updateWorldTransform();
                  this._localDataUpdated = true;
                }

                Vec3.set(v3_min$1, Infinity, Infinity, Infinity);
                Vec3.set(v3_max$1, -Infinity, -Infinity, -Infinity);

                for (var i = 0; i < this._joints.length; i++) {
                  var _this$_joints$i = this._joints[i],
                      bound = _this$_joints$i.bound,
                      transform = _this$_joints$i.transform;
                  var worldMatrix = getWorldMatrix(transform, stamp);
                  AABB.transform(ab_1$1, bound, worldMatrix);
                  ab_1$1.getBoundary(v3_1$2, v3_2$1);
                  Vec3.min(v3_min$1, v3_min$1, v3_1$2);
                  Vec3.max(v3_max$1, v3_max$1, v3_2$1);
                }

                var worldBounds = this._worldBounds;

                if (this._modelBounds && worldBounds) {
                  AABB.fromPoints(this._modelBounds, v3_min$1, v3_max$1);

                  this._modelBounds.transform(root._mat, root._pos, root._rot, root._scale, this._worldBounds);

                  this._updateNativeBounds();
                }
              };

              _proto.updateUBOs = function updateUBOs(stamp) {
                _MorphModel.prototype.updateUBOs.call(this, stamp);

                for (var i = 0; i < this._joints.length; i++) {
                  var _this$_joints$i2 = this._joints[i],
                      indices = _this$_joints$i2.indices,
                      buffers = _this$_joints$i2.buffers,
                      transform = _this$_joints$i2.transform,
                      bindpose = _this$_joints$i2.bindpose;
                  Mat4.multiply(m4_1$3, transform.world, bindpose);

                  for (var b = 0; b < buffers.length; b++) {
                    uploadJointData(this._dataArray[buffers[b]], indices[b] * 12, m4_1$3);
                  }
                }

                for (var _b = 0; _b < this._buffers.length; _b++) {
                  this._buffers[_b].update(this._dataArray[_b]);
                }

                return true;
              };

              _proto.initSubModel = function initSubModel(idx, subMeshData, mat) {
                var original = subMeshData.vertexBuffers;
                var iaInfo = subMeshData.iaInfo;
                iaInfo.vertexBuffers = subMeshData.jointMappedBuffers;

                _MorphModel.prototype.initSubModel.call(this, idx, subMeshData, mat);

                iaInfo.vertexBuffers = original;
              };

              _proto.getMacroPatches = function getMacroPatches(subModelIndex) {
                var superMacroPatches = _MorphModel.prototype.getMacroPatches.call(this, subModelIndex);

                if (superMacroPatches) {
                  return myPatches.concat(superMacroPatches);
                }

                return myPatches;
              };

              _proto._updateLocalDescriptors = function _updateLocalDescriptors(submodelIdx, descriptorSet) {
                _MorphModel.prototype._updateLocalDescriptors.call(this, submodelIdx, descriptorSet);

                var buffer = this._buffers[this._bufferIndices[submodelIdx]];

                if (buffer) {
                  descriptorSet.bindBuffer(UBOSkinning.BINDING, buffer);
                }
              };

              _proto._updateInstancedAttributes = function _updateInstancedAttributes(attributes, pass) {
                if (pass.batchingScheme !== BatchingSchemes.NONE) {
                  warnID(3936, this.node.getPathInHierarchy());
                }

                _MorphModel.prototype._updateInstancedAttributes.call(this, attributes, pass);
              };

              _proto._ensureEnoughBuffers = function _ensureEnoughBuffers(count) {
                for (var i = 0; i < count; i++) {
                  if (!this._buffers[i]) {
                    this._buffers[i] = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOSkinning.SIZE, UBOSkinning.SIZE));
                  }

                  if (!this._dataArray[i]) {
                    this._dataArray[i] = new Float32Array(UBOSkinning.COUNT);
                  }
                }
              };

              return SkinningModel;
            }(MorphModel);

            var myPatches$1 = [{
              name: 'CC_USE_SKINNING',
              value: true
            }, {
              name: 'CC_USE_BAKED_ANIMATION',
              value: true
            }];
            var BakedSkinningModel = function (_MorphModel) {
              _inheritsLoose(BakedSkinningModel, _MorphModel);

              function BakedSkinningModel() {
                var _this;

                _this = _MorphModel.call(this) || this;
                _this.uploadedAnim = undefined;
                _this._jointsMedium = void 0;
                _this._skeleton = null;
                _this._mesh = null;
                _this._dataPoolManager = void 0;
                _this._instAnimInfoIdx = -1;
                _this.type = ModelType.BAKED_SKINNING;
                _this._dataPoolManager = legacyCC.director.root.dataPoolManager;
                var jointTextureInfo = new Float32Array(4);

                var animInfo = _this._dataPoolManager.jointAnimationInfo.getData();

                _this._jointsMedium = {
                  buffer: null,
                  jointTextureInfo: jointTextureInfo,
                  animInfo: animInfo,
                  texture: null,
                  boundsInfo: null
                };
                return _this;
              }

              var _proto = BakedSkinningModel.prototype;

              _proto._init = function _init() {
              };

              _proto.destroy = function destroy() {
                this.uploadedAnim = undefined;
                this._jointsMedium.boundsInfo = null;

                if (this._jointsMedium.buffer) {
                  this._jointsMedium.buffer.destroy();

                  this._jointsMedium.buffer = null;
                }

                this._applyJointTexture();

                this._applyNativeJointMedium();

                _MorphModel.prototype.destroy.call(this);
              };

              _proto.bindSkeleton = function bindSkeleton(skeleton, skinningRoot, mesh) {
                if (skeleton === void 0) {
                  skeleton = null;
                }

                if (skinningRoot === void 0) {
                  skinningRoot = null;
                }

                if (mesh === void 0) {
                  mesh = null;
                }

                this._skeleton = skeleton;
                this._mesh = mesh;

                if (!skeleton || !skinningRoot || !mesh) {
                  return;
                }

                this.transform = skinningRoot;
                var resMgr = this._dataPoolManager;
                this._jointsMedium.animInfo = resMgr.jointAnimationInfo.getData(skinningRoot.uuid);

                if (!this._jointsMedium.buffer) {
                  this._jointsMedium.buffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, UBOSkinningTexture.SIZE, UBOSkinningTexture.SIZE));
                }
              };

              _proto.updateTransform = function updateTransform(stamp) {
                _MorphModel.prototype.updateTransform.call(this, stamp);

                if (!this.uploadedAnim) {
                  return;
                }

                var _this$_jointsMedium = this._jointsMedium,
                    animInfo = _this$_jointsMedium.animInfo,
                    boundsInfo = _this$_jointsMedium.boundsInfo;
                var skelBound = boundsInfo[animInfo.data[0]];
                var worldBounds = this._worldBounds;

                if (worldBounds && skelBound) {
                  var node = this.transform;
                  skelBound.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);
                }
              };

              _proto.updateUBOs = function updateUBOs(stamp) {
                _MorphModel.prototype.updateUBOs.call(this, stamp);

                var info = this._jointsMedium.animInfo;
                var idx = this._instAnimInfoIdx;

                if (idx >= 0) {
                  var view = this.instancedAttributes.views[idx];
                  view[0] = info.data[0];
                } else if (info.dirty) {
                  info.buffer.update(info.data);
                  info.dirty = false;
                }

                return true;
              };

              _proto._applyNativeJointMedium = function _applyNativeJointMedium() {
              };

              _proto._updateModelBounds = function _updateModelBounds(aabb) {
                this._modelBounds = aabb;
              };

              _proto.uploadAnimation = function uploadAnimation(anim) {
                if (!this._skeleton || !this._mesh || this.uploadedAnim === anim) {
                  return;
                }

                this.uploadedAnim = anim;
                var resMgr = this._dataPoolManager;
                var texture = null;

                if (anim) {
                  texture = resMgr.jointTexturePool.getSequencePoseTexture(this._skeleton, anim, this._mesh, this.transform);
                  this._jointsMedium.boundsInfo = texture && texture.bounds.get(this._mesh.hash);

                  this._updateModelBounds(null);
                } else {
                  texture = resMgr.jointTexturePool.getDefaultPoseTexture(this._skeleton, this._mesh, this.transform);
                  this._jointsMedium.boundsInfo = null;

                  this._updateModelBounds(texture && texture.bounds.get(this._mesh.hash)[0]);
                }

                this._applyJointTexture(texture);

                this._applyNativeJointMedium();
              };

              _proto._applyJointTexture = function _applyJointTexture(texture) {
                if (texture === void 0) {
                  texture = null;
                }

                var oldTex = this._jointsMedium.texture;

                if (oldTex && oldTex !== texture) {
                  this._dataPoolManager.jointTexturePool.releaseHandle(oldTex);
                }

                this._jointsMedium.texture = texture;

                if (!texture) {
                  return;
                }

                var _this$_jointsMedium2 = this._jointsMedium,
                    buffer = _this$_jointsMedium2.buffer,
                    jointTextureInfo = _this$_jointsMedium2.jointTextureInfo;
                jointTextureInfo[0] = texture.handle.texture.width;
                jointTextureInfo[1] = this._skeleton.joints.length;
                jointTextureInfo[2] = texture.pixelOffset + 0.1;
                jointTextureInfo[3] = 1 / jointTextureInfo[0];
                this.updateInstancedJointTextureInfo();

                if (buffer) {
                  buffer.update(jointTextureInfo);
                }

                var tex = texture.handle.texture;

                for (var i = 0; i < this._subModels.length; ++i) {
                  var descriptorSet = this._subModels[i].descriptorSet;
                  descriptorSet.bindTexture(UNIFORM_JOINT_TEXTURE_BINDING, tex);
                }
              };

              _proto.getMacroPatches = function getMacroPatches(subModelIndex) {
                var patches = _MorphModel.prototype.getMacroPatches.call(this, subModelIndex);

                return patches ? patches.concat(myPatches$1) : myPatches$1;
              };

              _proto._updateLocalDescriptors = function _updateLocalDescriptors(submodelIdx, descriptorSet) {
                _MorphModel.prototype._updateLocalDescriptors.call(this, submodelIdx, descriptorSet);

                var _this$_jointsMedium3 = this._jointsMedium,
                    buffer = _this$_jointsMedium3.buffer,
                    texture = _this$_jointsMedium3.texture,
                    animInfo = _this$_jointsMedium3.animInfo;
                descriptorSet.bindBuffer(UBOSkinningTexture.BINDING, buffer);
                descriptorSet.bindBuffer(UBOSkinningAnimation.BINDING, animInfo.buffer);

                if (texture) {
                  var sampler = this._device.getSampler(jointTextureSamplerInfo);

                  descriptorSet.bindTexture(UNIFORM_JOINT_TEXTURE_BINDING, texture.handle.texture);
                  descriptorSet.bindSampler(UNIFORM_JOINT_TEXTURE_BINDING, sampler);
                }
              };

              _proto._setInstAnimInfoIdx = function _setInstAnimInfoIdx(idx) {
                this._instAnimInfoIdx = idx;
              };

              _proto._updateInstancedAttributes = function _updateInstancedAttributes(attributes, pass) {
                _MorphModel.prototype._updateInstancedAttributes.call(this, attributes, pass);

                this._setInstAnimInfoIdx(this._getInstancedAttributeIndex(INST_JOINT_ANIM_INFO));

                this.updateInstancedJointTextureInfo();
              };

              _proto.updateInstancedJointTextureInfo = function updateInstancedJointTextureInfo() {
                var _this$_jointsMedium4 = this._jointsMedium,
                    jointTextureInfo = _this$_jointsMedium4.jointTextureInfo,
                    animInfo = _this$_jointsMedium4.animInfo;
                var idx = this._instAnimInfoIdx;

                if (idx >= 0) {
                  var view = this.instancedAttributes.views[idx];
                  view[0] = animInfo.data[0];
                  view[1] = jointTextureInfo[1];
                  view[2] = jointTextureInfo[2];
                }
              };

              return BakedSkinningModel;
            }(MorphModel);

            var _dec$q, _dec2$l, _dec3$k, _dec4$j, _dec5$h, _dec6$f, _dec7$f, _dec8$e, _dec9$a, _class$q, _class2$l, _descriptor$j, _descriptor2$g, _temp$n;
            var SkinnedMeshRenderer = function (v) { return exports({ SkinnedMeshRenderer: v, SkinningModelComponent: v }), v; }((_dec$q = ccclass('cc.SkinnedMeshRenderer'), _dec2$l = help(), _dec3$k = executionOrder(100), _dec4$j = menu$1(), _dec5$h = type$1(Skeleton), _dec6$f = type$1(Node), _dec7$f = type$1(Skeleton), _dec8$e = type$1(Node), _dec9$a = tooltip(), _dec$q(_class$q = _dec2$l(_class$q = _dec3$k(_class$q = executeInEditMode(_class$q = _dec4$j(_class$q = (_class2$l = (_temp$n = function (_MeshRenderer) {
              _inheritsLoose(SkinnedMeshRenderer, _MeshRenderer);

              function SkinnedMeshRenderer() {
                var _this;

                _this = _MeshRenderer.call(this) || this;

                _initializerDefineProperty(_this, "_skeleton", _descriptor$j, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_skinningRoot", _descriptor2$g, _assertThisInitialized(_this));

                _this._clip = null;
                _this.associatedAnimation = null;
                _this._modelType = BakedSkinningModel;
                return _this;
              }

              var _proto = SkinnedMeshRenderer.prototype;

              _proto.onLoad = function onLoad() {
                _MeshRenderer.prototype.onLoad.call(this);

                this._tryBindAnimation();
              };

              _proto.onDestroy = function onDestroy() {
                if (this.associatedAnimation) {
                  this.associatedAnimation.notifySkinnedMeshRemoved(this);
                  assertIsTrue(this.associatedAnimation === null);
                }

                _MeshRenderer.prototype.onDestroy.call(this);
              };

              _proto.uploadAnimation = function uploadAnimation(clip) {
                this._clip = clip;

                if (this.model && this.model.uploadAnimation) {
                  this.model.uploadAnimation(clip);
                }
              };

              _proto.setUseBakedAnimation = function setUseBakedAnimation(val, force) {
                if (val === void 0) {
                  val = true;
                }

                if (force === void 0) {
                  force = false;
                }

                var modelType = val ? BakedSkinningModel : SkinningModel;

                if (!force && this._modelType === modelType) {
                  return;
                }

                this._modelType = modelType;

                if (this._model) {
                  legacyCC.director.root.destroyModel(this._model);
                  this._model = null;
                  this._models.length = 0;

                  this._updateModels();

                  this._updateCastShadow();

                  if (this.enabledInHierarchy) {
                    this._attachToScene();
                  }
                }
              };

              _proto.setMaterial = function setMaterial(material, index) {
                _MeshRenderer.prototype.setMaterial.call(this, material, index);

                if (this._modelType === SkinningModel) {
                  this.getMaterialInstance(index);
                }
              };

              _proto._updateModelParams = function _updateModelParams() {
                this._update();

                _MeshRenderer.prototype._updateModelParams.call(this);
              };

              _proto._tryBindAnimation = function _tryBindAnimation() {
                var skinningRoot = this._skinningRoot;

                if (!skinningRoot) {
                  return;
                }

                var skinningRootIsParent = false;

                for (var current = this.node; current; current = current.parent) {
                  if (current === skinningRoot) {
                    skinningRootIsParent = true;
                    break;
                  }
                }

                if (!skinningRootIsParent) {
                  return;
                }

                var animation = skinningRoot.getComponent('cc.SkeletalAnimation');

                if (animation) {
                  animation.notifySkinnedMeshAdded(this);
                } else {
                  this.setUseBakedAnimation(false);
                }
              };

              _proto._update = function _update() {
                if (this.model) {
                  this.model.bindSkeleton(this._skeleton, this._skinningRoot, this._mesh);

                  if (this.model.uploadAnimation) {
                    this.model.uploadAnimation(this._clip);
                  }
                }
              };

              _createClass(SkinnedMeshRenderer, [{
                key: "skeleton",
                get: function get() {
                  return this._skeleton;
                },
                set: function set(val) {
                  if (val === this._skeleton) {
                    return;
                  }

                  this._skeleton = val;

                  this._update();
                }
              }, {
                key: "skinningRoot",
                get: function get() {
                  return this._skinningRoot;
                },
                set: function set(value) {
                  this._skinningRoot = value;

                  this._tryBindAnimation();

                  if (value === this._skinningRoot) {
                    return;
                  }

                  this._update();
                }
              }, {
                key: "model",
                get: function get() {
                  return this._model;
                }
              }]);

              return SkinnedMeshRenderer;
            }(MeshRenderer), _temp$n), (_descriptor$j = _applyDecoratedDescriptor(_class2$l.prototype, "_skeleton", [_dec5$h], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$g = _applyDecoratedDescriptor(_class2$l.prototype, "_skinningRoot", [_dec6$f], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$l.prototype, "skeleton", [_dec7$f], Object.getOwnPropertyDescriptor(_class2$l.prototype, "skeleton"), _class2$l.prototype), _applyDecoratedDescriptor(_class2$l.prototype, "skinningRoot", [_dec8$e, _dec9$a], Object.getOwnPropertyDescriptor(_class2$l.prototype, "skinningRoot"), _class2$l.prototype)), _class2$l)) || _class$q) || _class$q) || _class$q) || _class$q) || _class$q));

            var _dec$r, _dec2$m, _dec3$l, _dec4$k, _dec5$i, _class$r, _class2$m, _descriptor$k, _descriptor2$h, _descriptor3$d, _descriptor4$c, _descriptor5$b, _descriptor6$8, _temp$o, _dec6$g, _dec7$g, _dec8$f, _dec9$b, _dec10$a, _dec11$9, _dec12$9, _dec13$9, _dec14$7, _dec15$7, _dec16$6, _class4$2, _class5$2, _descriptor7$7, _descriptor8$7, _descriptor9$6, _temp2$2;

            var repeat = function repeat(n) {
              return n - Math.floor(n);
            };

            var batch_id = new Attribute(AttributeName.ATTR_BATCH_ID, Format.R32F);
            var batch_uv = new Attribute(AttributeName.ATTR_BATCH_UV, Format.RG32F);
            var batch_extras_size = FormatInfos[batch_id.format].size + FormatInfos[batch_uv.format].size;
            var SkinnedMeshUnit = function (v) { return exports({ SkinnedMeshUnit: v, SkinningModelUnit: v }), v; }((_dec$r = ccclass('cc.SkinnedMeshUnit'), _dec2$m = type$1(Mesh), _dec3$l = type$1(Skeleton), _dec4$k = type$1(Material), _dec5$i = type$1(SkinnedMeshRenderer), _dec$r(_class$r = (_class2$m = (_temp$o = function () {
              function SkinnedMeshUnit() {
                _initializerDefineProperty(this, "mesh", _descriptor$k, this);

                _initializerDefineProperty(this, "skeleton", _descriptor2$h, this);

                _initializerDefineProperty(this, "material", _descriptor3$d, this);

                _initializerDefineProperty(this, "_localTransform", _descriptor4$c, this);

                _initializerDefineProperty(this, "_offset", _descriptor5$b, this);

                _initializerDefineProperty(this, "_size", _descriptor6$8, this);
              }

              _createClass(SkinnedMeshUnit, [{
                key: "offset",
                get: function get() {
                  return this._offset;
                },
                set: function set(offset) {
                  Vec2.copy(this._offset, offset);
                }
              }, {
                key: "size",
                get: function get() {
                  return this._size;
                },
                set: function set(size) {
                  Vec2.copy(this._size, size);
                }
              }, {
                key: "copyFrom",
                get: function get() {
                  return null;
                },
                set: function set(comp) {
                  if (!comp) {
                    return;
                  }

                  this.mesh = comp.mesh;
                  this.skeleton = comp.skeleton;
                  this.material = comp.getMaterial(0);

                  if (comp.skinningRoot) {
                    getWorldTransformUntilRoot(comp.node, comp.skinningRoot, this._localTransform);
                  }
                }
              }]);

              return SkinnedMeshUnit;
            }(), _temp$o), (_descriptor$k = _applyDecoratedDescriptor(_class2$m.prototype, "mesh", [_dec2$m], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$h = _applyDecoratedDescriptor(_class2$m.prototype, "skeleton", [_dec3$l], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor3$d = _applyDecoratedDescriptor(_class2$m.prototype, "material", [_dec4$k], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor4$c = _applyDecoratedDescriptor(_class2$m.prototype, "_localTransform", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Mat4();
              }
            }), _descriptor5$b = _applyDecoratedDescriptor(_class2$m.prototype, "_offset", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2(0, 0);
              }
            }), _descriptor6$8 = _applyDecoratedDescriptor(_class2$m.prototype, "_size", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2(1, 1);
              }
            }), _applyDecoratedDescriptor(_class2$m.prototype, "offset", [editable], Object.getOwnPropertyDescriptor(_class2$m.prototype, "offset"), _class2$m.prototype), _applyDecoratedDescriptor(_class2$m.prototype, "size", [editable], Object.getOwnPropertyDescriptor(_class2$m.prototype, "size"), _class2$m.prototype), _applyDecoratedDescriptor(_class2$m.prototype, "copyFrom", [_dec5$i], Object.getOwnPropertyDescriptor(_class2$m.prototype, "copyFrom"), _class2$m.prototype)), _class2$m)) || _class$r));
            var m4_local = new Mat4();
            var m4_1$4 = new Mat4();
            var v3_1$3 = new Vec3();
            var SkinnedMeshBatchRenderer = function (v) { return exports({ SkinnedMeshBatchRenderer: v, BatchedSkinningModelComponent: v }), v; }((_dec6$g = ccclass('cc.SkinnedMeshBatchRenderer'), _dec7$g = help(), _dec8$f = executionOrder(100), _dec9$b = menu$1(), _dec10$a = tooltip(), _dec11$9 = type$1([CCString]), _dec12$9 = tooltip(), _dec13$9 = type$1([SkinnedMeshUnit]), _dec14$7 = tooltip(), _dec15$7 = visible(), _dec16$6 = visible(), _dec6$g(_class4$2 = _dec7$g(_class4$2 = _dec8$f(_class4$2 = executeInEditMode(_class4$2 = _dec9$b(_class4$2 = (_class5$2 = (_temp2$2 = function (_SkinnedMeshRenderer) {
              _inheritsLoose(SkinnedMeshBatchRenderer, _SkinnedMeshRenderer);

              function SkinnedMeshBatchRenderer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _SkinnedMeshRenderer.call.apply(_SkinnedMeshRenderer, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "atlasSize", _descriptor7$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "batchableTextureNames", _descriptor8$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "units", _descriptor9$6, _assertThisInitialized(_this));

                _this._textures = {};
                _this._batchMaterial = null;
                return _this;
              }

              var _proto = SkinnedMeshBatchRenderer.prototype;

              _proto.onLoad = function onLoad() {
                _SkinnedMeshRenderer.prototype.onLoad.call(this);

                this.cook();
              };

              _proto.onDestroy = function onDestroy() {
                for (var tex in this._textures) {
                  this._textures[tex].destroy();
                }

                this._textures = {};

                if (this._mesh) {
                  this._mesh.destroy();

                  this._mesh = null;
                }

                _SkinnedMeshRenderer.prototype.onDestroy.call(this);
              };

              _proto._onMaterialModified = function _onMaterialModified(idx, material) {
                this.cookMaterials();

                _SkinnedMeshRenderer.prototype._onMaterialModified.call(this, idx, this.getMaterialInstance(idx));
              };

              _proto.cook = function cook() {
                this.cookMaterials();
                this.cookSkeletons();
                this.cookMeshes();
              };

              _proto.cookMaterials = function cookMaterials() {
                var _this2 = this;

                if (!this._batchMaterial) {
                  this._batchMaterial = this.getMaterial(0);
                }

                var mat = this.getMaterialInstance(0);

                if (!mat || !this._batchMaterial || !this._batchMaterial.effectAsset) {
                  console.warn('incomplete batch material!');
                  return;
                }

                mat.copy(this._batchMaterial);
                this.resizeAtlases();
                var tech = mat.effectAsset.techniques[mat.technique];

                var _loop = function _loop(i) {
                  var pass = tech.passes[i];

                  if (!pass.properties) {
                    return "continue";
                  }

                  var _loop2 = function _loop2(prop) {
                    if (pass.properties[prop].type >= Type$1.SAMPLER1D) {
                      var tex = null;

                      if (_this2.batchableTextureNames.find(function (n) {
                        return n === prop;
                      })) {
                        tex = _this2._textures[prop];

                        if (!tex) {
                          tex = _this2.createTexture(prop);
                        }

                        _this2.cookTextures(tex, prop, i);
                      } else {
                        _this2.units.some(function (u) {
                          return tex = u.material && u.material.getProperty(prop, i);
                        });
                      }

                      if (tex) {
                        mat.setProperty(prop, tex, i);
                      }
                    } else {
                      var value = [];

                      for (var u = 0; u < _this2.units.length; u++) {
                        var unit = _this2.units[u];

                        if (!unit.material) {
                          continue;
                        }

                        value.push(unit.material.getProperty(prop.slice(0, -3), i));
                      }

                      mat.setProperty(prop, value, i);
                    }
                  };

                  for (var prop in pass.properties) {
                    _loop2(prop);
                  }
                };

                for (var i = 0; i < tech.passes.length; i++) {
                  var _ret = _loop(i);

                  if (_ret === "continue") continue;
                }
              };

              _proto.cookSkeletons = function cookSkeletons() {

                if (!this._skinningRoot) {
                  console.warn('no skinning root specified!');
                  return;
                }

                var joints = [];
                var bindposes = [];

                for (var u = 0; u < this.units.length; u++) {
                  var unit = this.units[u];

                  if (!unit || !unit.skeleton) {
                    continue;
                  }

                  var partial = unit.skeleton;
                  Mat4.invert(m4_local, unit._localTransform);

                  var _loop3 = function _loop3(i) {
                    var path = partial.joints[i];
                    var idx = joints.findIndex(function (p) {
                      return p === path;
                    });

                    if (idx >= 0) {

                      return "continue";
                    }

                    joints.push(path);
                    bindposes.push(Mat4.multiply(new Mat4(), partial.bindposes[i] || Mat4.IDENTITY, m4_local));
                  };

                  for (var i = 0; i < partial.joints.length; i++) {
                    var _ret2 = _loop3(i);

                    if (_ret2 === "continue") continue;
                  }
                }

                var idxMap = Array.from(Array(joints.length).keys()).sort(function (a, b) {
                  if (joints[a] > joints[b]) {
                    return 1;
                  }

                  if (joints[a] < joints[b]) {
                    return -1;
                  }

                  return 0;
                });
                var skeleton = new Skeleton();
                skeleton.joints = joints.map(function (_, idx, arr) {
                  return arr[idxMap[idx]];
                });
                skeleton.bindposes = bindposes.map(function (_, idx, arr) {
                  return arr[idxMap[idx]];
                });

                if (this._skeleton) {
                  this._skeleton.destroy();
                }

                this.skeleton = skeleton;
              };

              _proto.cookMeshes = function cookMeshes() {
                var _this4 = this;

                var isValid = false;

                for (var u = 0; u < this.units.length; u++) {
                  var unit = this.units[u];

                  if (unit.mesh) {
                    isValid = true;
                    break;
                  }
                }

                if (!isValid || !this._skinningRoot) {
                  return;
                }

                if (this._mesh) {
                  this._mesh.destroyRenderingMesh();
                } else {
                  this._mesh = new Mesh();
                }

                var posOffset = 0;
                var posFormat = Format.UNKNOWN;
                var normalOffset = 0;
                var normalFormat = Format.UNKNOWN;
                var tangentOffset = 0;
                var tangentFormat = Format.UNKNOWN;
                var uvOffset = 0;
                var uvFormat = Format.UNKNOWN;
                var jointOffset = 0;
                var jointFormat = Format.UNKNOWN;
                var jointIndexMap = new Array(this.units.length);
                var unitLen = this.units.length;

                for (var i = 0; i < unitLen; i++) {
                  var _unit = this.units[i];

                  if (!_unit || !_unit.skeleton) {
                    continue;
                  }

                  jointIndexMap[i] = _unit.skeleton.joints.map(function (j) {
                    return _this4._skeleton.joints.findIndex(function (ref) {
                      return j === ref;
                    });
                  });
                }

                var _loop4 = function _loop4(_i) {
                  var unit = _this4.units[_i];

                  if (!unit || !unit.mesh || !unit.mesh.data) {
                    return "continue";
                  }

                  var newMesh = _this4._createUnitMesh(_i, unit.mesh);

                  var dataView = new DataView(newMesh.data.buffer);
                  Mat4.inverseTranspose(m4_local, unit._localTransform);
                  var offset = unit.offset;
                  var size = unit.size;

                  var _loop5 = function _loop5(b) {
                    var bundle = newMesh.struct.vertexBundles[b];
                    posOffset = bundle.view.offset;
                    posFormat = Format.UNKNOWN;

                    for (var a = 0; a < bundle.attributes.length; a++) {
                      var attr = bundle.attributes[a];

                      if (attr.name === AttributeName.ATTR_POSITION) {
                        posFormat = attr.format;
                        break;
                      }

                      posOffset += FormatInfos[attr.format].size;
                    }

                    if (posFormat) {
                      var pos = readBuffer(dataView, posFormat, posOffset, bundle.view.length, bundle.view.stride);

                      for (var j = 0; j < pos.length; j += 3) {
                        Vec3.fromArray(v3_1$3, pos, j);
                        Vec3.transformMat4(v3_1$3, v3_1$3, unit._localTransform);
                        Vec3.toArray(pos, v3_1$3, j);
                      }

                      writeBuffer(dataView, pos, posFormat, posOffset, bundle.view.stride);
                    }

                    normalOffset = bundle.view.offset;
                    normalFormat = Format.UNKNOWN;

                    for (var _a = 0; _a < bundle.attributes.length; _a++) {
                      var _attr = bundle.attributes[_a];

                      if (_attr.name === AttributeName.ATTR_NORMAL) {
                        normalFormat = _attr.format;
                        break;
                      }

                      normalOffset += FormatInfos[_attr.format].size;
                    }

                    if (normalFormat) {
                      var normal = readBuffer(dataView, normalFormat, normalOffset, bundle.view.length, bundle.view.stride);

                      for (var _j = 0; _j < normal.length; _j += 3) {
                        Vec3.fromArray(v3_1$3, normal, _j);
                        Vec3.transformMat4Normal(v3_1$3, v3_1$3, m4_local);
                        Vec3.toArray(normal, v3_1$3, _j);
                      }

                      writeBuffer(dataView, normal, normalFormat, normalOffset, bundle.view.stride);
                    }

                    tangentOffset = bundle.view.offset;
                    tangentFormat = Format.UNKNOWN;

                    for (var _a2 = 0; _a2 < bundle.attributes.length; _a2++) {
                      var _attr2 = bundle.attributes[_a2];

                      if (_attr2.name === AttributeName.ATTR_TANGENT) {
                        tangentFormat = _attr2.format;
                        break;
                      }

                      tangentOffset += FormatInfos[_attr2.format].size;
                    }

                    if (tangentFormat) {
                      var tangent = readBuffer(dataView, tangentFormat, tangentOffset, bundle.view.length, bundle.view.stride);

                      for (var _j2 = 0; _j2 < tangent.length; _j2 += 3) {
                        Vec3.fromArray(v3_1$3, tangent, _j2);
                        Vec3.transformMat4Normal(v3_1$3, v3_1$3, m4_local);
                        Vec3.toArray(tangent, v3_1$3, _j2);
                      }

                      writeBuffer(dataView, tangent, tangentFormat, tangentOffset, bundle.view.stride);
                    }

                    uvOffset = bundle.view.offset;
                    uvFormat = Format.UNKNOWN;

                    for (var _a3 = 0; _a3 < bundle.attributes.length; _a3++) {
                      var _attr3 = bundle.attributes[_a3];

                      if (_attr3.name === AttributeName.ATTR_BATCH_UV) {
                        uvFormat = _attr3.format;
                        break;
                      }

                      uvOffset += FormatInfos[_attr3.format].size;
                    }

                    if (uvFormat) {
                      mapBuffer(dataView, function (cur, idx) {
                        cur = repeat(cur);
                        var comp = idx === 0 ? 'x' : 'y';
                        return cur * size[comp] + offset[comp];
                      }, uvFormat, uvOffset, bundle.view.length, bundle.view.stride, dataView);
                    }

                    var idxMap = jointIndexMap[_i];

                    if (!idxMap) {
                      return "continue";
                    }

                    jointOffset = bundle.view.offset;
                    jointFormat = Format.UNKNOWN;

                    for (var _a4 = 0; _a4 < bundle.attributes.length; _a4++) {
                      var _attr4 = bundle.attributes[_a4];

                      if (_attr4.name === AttributeName.ATTR_JOINTS) {
                        jointFormat = _attr4.format;
                        break;
                      }

                      jointOffset += FormatInfos[_attr4.format].size;
                    }

                    if (jointFormat) {
                      mapBuffer(dataView, function (cur) {
                        return idxMap[cur];
                      }, jointFormat, jointOffset, bundle.view.length, bundle.view.stride, dataView);
                    }
                  };

                  for (var b = 0; b < newMesh.struct.vertexBundles.length; b++) {
                    var _ret4 = _loop5(b);

                    if (_ret4 === "continue") continue;
                  }

                  _this4._mesh.merge(newMesh);
                };

                for (var _i = 0; _i < unitLen; _i++) {
                  var _ret3 = _loop4(_i);

                  if (_ret3 === "continue") continue;
                }

                this._onMeshChanged(this._mesh);

                this._updateModels();
              };

              _proto.cookTextures = function cookTextures(target, prop, passIdx) {
                var texImages = [];
                var texImageRegions = [];
                var texBuffers = [];
                var texBufferRegions = [];

                for (var u = 0; u < this.units.length; u++) {
                  var unit = this.units[u];

                  if (!unit.material) {
                    continue;
                  }

                  var partial = unit.material.getProperty(prop, passIdx);

                  if (partial && partial.image && partial.image.data) {
                    var region = new BufferTextureCopy();
                    region.texOffset.x = unit.offset.x * this.atlasSize;
                    region.texOffset.y = unit.offset.y * this.atlasSize;
                    region.texExtent.width = unit.size.x * this.atlasSize;
                    region.texExtent.height = unit.size.y * this.atlasSize;
                    var data = partial.image.data;

                    if (!ArrayBuffer.isView(data)) {
                      texImages.push(data);
                      texImageRegions.push(region);
                    } else {
                      texBuffers.push(data);
                      texBufferRegions.push(region);
                    }
                  }
                }

                var gfxTex = target.getGFXTexture();
                var _ref = legacyCC.director.root,
                    device = _ref.device;

                if (texBuffers.length > 0) {
                  device.copyBuffersToTexture(texBuffers, gfxTex, texBufferRegions);
                }

                if (texImages.length > 0) {
                  device.copyTexImagesToTexture(texImages, gfxTex, texImageRegions);
                }
              };

              _proto.createTexture = function createTexture(prop) {
                var tex = new Texture2D();
                tex.setFilters(Filter$1.LINEAR, Filter$1.LINEAR);
                tex.setMipFilter(Filter$1.NEAREST);
                tex.reset({
                  width: this.atlasSize,
                  height: this.atlasSize,
                  format: PixelFormat.RGBA8888
                });
                this._textures[prop] = tex;
                return tex;
              };

              _proto.resizeAtlases = function resizeAtlases() {
                for (var prop in this._textures) {
                  var tex = this._textures[prop];
                  tex.reset({
                    width: this.atlasSize,
                    height: this.atlasSize,
                    format: PixelFormat.RGBA8888
                  });
                }
              };

              _proto._createUnitMesh = function _createUnitMesh(unitIdx, mesh) {
                var newMeshStruct = JSON.parse(JSON.stringify(mesh.struct));
                var modifiedBundles = {};

                for (var p = 0; p < mesh.struct.primitives.length; p++) {
                  var primitive = mesh.struct.primitives[p];
                  var uvOffset = 0;
                  var uvFormat = Format.UNKNOWN;
                  var bundleIdx = 0;

                  for (; bundleIdx < primitive.vertexBundelIndices.length; bundleIdx++) {
                    var bundle = mesh.struct.vertexBundles[primitive.vertexBundelIndices[bundleIdx]];
                    uvOffset = bundle.view.offset;
                    uvFormat = Format.UNKNOWN;

                    for (var a = 0; a < bundle.attributes.length; a++) {
                      var attr = bundle.attributes[a];

                      if (attr.name === AttributeName.ATTR_TEX_COORD) {
                        uvFormat = attr.format;
                        break;
                      }

                      uvOffset += FormatInfos[attr.format].size;
                    }

                    if (uvFormat) {
                      break;
                    }
                  }

                  if (modifiedBundles[bundleIdx] !== undefined) {
                    continue;
                  }

                  modifiedBundles[bundleIdx] = [uvFormat, uvOffset];
                  var newBundle = newMeshStruct.vertexBundles[bundleIdx];
                  newBundle.attributes.push(batch_id);
                  newBundle.attributes.push(batch_uv);
                  newBundle.view.offset = 0;
                  newBundle.view.length += newBundle.view.count * batch_extras_size;
                  newBundle.view.stride += batch_extras_size;
                }

                var totalLength = 0;

                for (var b = 0; b < newMeshStruct.vertexBundles.length; b++) {
                  totalLength += newMeshStruct.vertexBundles[b].view.length;
                }

                for (var _p = 0; _p < newMeshStruct.primitives.length; _p++) {
                  var pm = newMeshStruct.primitives[_p];

                  if (pm.indexView) {
                    pm.indexView.offset = totalLength;
                    totalLength += pm.indexView.length;
                  }
                }

                var newMeshData = new Uint8Array(totalLength);
                var oldMeshData = mesh.data;
                var newDataView = new DataView(newMeshData.buffer);
                var oldDataView = new DataView(oldMeshData.buffer);
                var isLittleEndian = legacyCC.sys.isLittleEndian;

                for (var _b in modifiedBundles) {
                  var _newBundle = newMeshStruct.vertexBundles[_b];
                  var oldBundle = mesh.struct.vertexBundles[_b];
                  var _modifiedBundles$_b = modifiedBundles[_b],
                      _uvFormat = _modifiedBundles$_b[0],
                      _uvOffset = _modifiedBundles$_b[1];
                  var uvs = readBuffer(oldDataView, _uvFormat, _uvOffset, oldBundle.view.length, oldBundle.view.stride);
                  var oldView = oldBundle.view;
                  var newView = _newBundle.view;
                  var oldStride = oldView.stride;
                  var newStride = newView.stride;
                  var oldOffset = oldView.offset;
                  var newOffset = newView.offset;

                  for (var j = 0; j < newView.count; j++) {
                    var srcVertex = oldMeshData.subarray(oldOffset, oldOffset + oldStride);
                    newMeshData.set(srcVertex, newOffset);
                    newDataView.setFloat32(newOffset + oldStride, unitIdx);
                    newDataView.setFloat32(newOffset + oldStride + 4, uvs[j * 2], isLittleEndian);
                    newDataView.setFloat32(newOffset + oldStride + 8, uvs[j * 2 + 1], isLittleEndian);
                    newOffset += newStride;
                    oldOffset += oldStride;
                  }
                }

                for (var k = 0; k < newMeshStruct.primitives.length; k++) {
                  var oldPrimitive = mesh.struct.primitives[k];
                  var newPrimitive = newMeshStruct.primitives[k];

                  if (oldPrimitive.indexView && newPrimitive.indexView) {
                    var _oldStride = oldPrimitive.indexView.stride;
                    var _newStride = newPrimitive.indexView.stride;
                    var _oldOffset = oldPrimitive.indexView.offset;
                    var _newOffset = newPrimitive.indexView.offset;

                    for (var _j3 = 0; _j3 < newPrimitive.indexView.count; _j3++) {
                      var srcIndices = oldMeshData.subarray(_oldOffset, _oldOffset + _oldStride);
                      newMeshData.set(srcIndices, _newOffset);
                      _newOffset += _newStride;
                      _oldOffset += _oldStride;
                    }
                  }
                }

                var newMesh = new Mesh();
                newMesh.reset({
                  struct: newMeshStruct,
                  data: newMeshData
                });
                return newMesh;
              };

              _createClass(SkinnedMeshBatchRenderer, [{
                key: "mesh",
                get: function get() {
                  return _SkinnedMeshRenderer.prototype.mesh;
                },
                set: function set(val) {
                  this.mesh = val;
                }
              }, {
                key: "skeleton",
                get: function get() {
                  return _SkinnedMeshRenderer.prototype.skeleton;
                },
                set: function set(val) {
                  this.skeleton = val;
                }
              }]);

              return SkinnedMeshBatchRenderer;
            }(SkinnedMeshRenderer), _temp2$2), (_descriptor7$7 = _applyDecoratedDescriptor(_class5$2.prototype, "atlasSize", [serializable, _dec10$a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1024;
              }
            }), _descriptor8$7 = _applyDecoratedDescriptor(_class5$2.prototype, "batchableTextureNames", [_dec11$9, serializable, _dec12$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor9$6 = _applyDecoratedDescriptor(_class5$2.prototype, "units", [_dec13$9, serializable, _dec14$7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _applyDecoratedDescriptor(_class5$2.prototype, "mesh", [override, _dec15$7], Object.getOwnPropertyDescriptor(_class5$2.prototype, "mesh"), _class5$2.prototype), _applyDecoratedDescriptor(_class5$2.prototype, "skeleton", [override, _dec16$6], Object.getOwnPropertyDescriptor(_class5$2.prototype, "skeleton"), _class5$2.prototype)), _class5$2)) || _class4$2) || _class4$2) || _class4$2) || _class4$2) || _class4$2));

            legacyCC.SkinningModelComponent = SkinnedMeshRenderer;
            js.setClassAlias(SkinnedMeshRenderer, 'cc.SkinningModelComponent');
            legacyCC.SkinningModelUnit = SkinnedMeshUnit;
            js.setClassAlias(SkinnedMeshUnit, 'cc.SkinningModelUnit');
            legacyCC.BatchedSkinningModelComponent = SkinnedMeshBatchRenderer;
            js.setClassAlias(SkinnedMeshBatchRenderer, 'cc.BatchedSkinningModelComponent');

            legacyCC.utils = utils;

            var _dec$s, _class$s, _class2$n, _descriptor$l, _temp$p, _dec2$n, _class4$3, _class5$3, _descriptor2$i, _temp2$3;
            function isPropertyPath(path) {
              return typeof path === 'string' || typeof path === 'number';
            }
            function isCustomPath(path, constructor) {
              return path instanceof constructor;
            }
            var HierarchyPath = (_dec$s = ccclass('cc.animation.HierarchyPath'), _dec$s(_class$s = (_class2$n = (_temp$p = function () {
              function HierarchyPath(path) {
                _initializerDefineProperty(this, "path", _descriptor$l, this);

                this.path = path || '';
              }

              var _proto = HierarchyPath.prototype;

              _proto.get = function get(target) {
                if (!(target instanceof Node)) {
                  warnID(3925);
                  return null;
                }

                var result = target.getChildByPath(this.path);

                if (!result) {
                  warnID(3926, target.name, this.path);
                  return null;
                }

                return result;
              };

              return HierarchyPath;
            }(), _temp$p), (_descriptor$l = _applyDecoratedDescriptor(_class2$n.prototype, "path", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            })), _class2$n)) || _class$s);
            var ComponentPath = (_dec2$n = ccclass('cc.animation.ComponentPath'), _dec2$n(_class4$3 = (_class5$3 = (_temp2$3 = function () {
              function ComponentPath(component) {
                _initializerDefineProperty(this, "component", _descriptor2$i, this);

                this.component = component || '';
              }

              var _proto2 = ComponentPath.prototype;

              _proto2.get = function get(target) {
                if (!(target instanceof Node)) {
                  warnID(3927);
                  return null;
                }

                var result = target.getComponent(this.component);

                if (!result) {
                  warnID(3928, target.name, this.component);
                  return null;
                }

                return result;
              };

              return ComponentPath;
            }(), _temp2$3), (_descriptor2$i = _applyDecoratedDescriptor(_class5$3.prototype, "component", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            })), _class5$3)) || _class4$3);

            var _dec$t, _class$t, _class2$o, _descriptor$m, _descriptor2$j, _descriptor3$e, _temp$q;
            var UniformProxyFactory = (_dec$t = ccclass('cc.animation.UniformProxyFactory'), _dec$t(_class$t = (_class2$o = (_temp$q = function () {
              function UniformProxyFactory(uniformName, passIndex) {
                _initializerDefineProperty(this, "passIndex", _descriptor$m, this);

                _initializerDefineProperty(this, "uniformName", _descriptor2$j, this);

                _initializerDefineProperty(this, "channelIndex", _descriptor3$e, this);

                this.passIndex = passIndex || 0;
                this.uniformName = uniformName || '';
              }

              var _proto = UniformProxyFactory.prototype;

              _proto.forTarget = function forTarget(target) {
                var pass = target.passes[this.passIndex];
                var handle = pass.getHandle(this.uniformName);

                if (!handle) {
                  throw new Error("Material \"" + target.name + "\" has no uniform \"" + this.uniformName + "\"");
                }

                var type = Pass.getTypeFromHandle(handle);

                if (type < Type$1.SAMPLER1D) {
                  var realHandle = this.channelIndex === undefined ? handle : pass.getHandle(this.uniformName, this.channelIndex, Type$1.FLOAT);

                  if (!realHandle) {
                    throw new Error("Uniform \"" + this.uniformName + " (in material " + target.name + ") has no channel " + this.channelIndex + "\"");
                  }

                  if (isUniformArray(pass, this.uniformName)) {
                    return {
                      set: function set(value) {
                        pass.setUniformArray(realHandle, value);
                      }
                    };
                  }

                  return {
                    set: function set(value) {
                      pass.setUniform(realHandle, value);
                    }
                  };
                } else {
                  var binding = Pass.getBindingFromHandle(handle);
                  var prop = pass.properties[this.uniformName];
                  var texName = prop && prop.value ? prop.value + "-texture" : getDefaultFromType(prop.type);
                  var dftTex = builtinResMgr.get(texName);

                  if (!dftTex) {
                    warn("Illegal texture default value: " + texName + ".");
                    dftTex = builtinResMgr.get('default-texture');
                  }

                  return {
                    set: function set(value) {
                      if (!value) {
                        value = dftTex;
                      }

                      var texture = value.getGFXTexture();

                      if (!texture || !texture.width || !texture.height) {
                        return;
                      }

                      pass.bindTexture(binding, texture);

                      if (value instanceof TextureBase) {
                        pass.bindSampler(binding, legacyCC.game._gfxDevice.getSampler(value.getSamplerInfo()));
                      }
                    }
                  };
                }
              };

              return UniformProxyFactory;
            }(), _temp$q), (_descriptor$m = _applyDecoratedDescriptor(_class2$o.prototype, "passIndex", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor2$j = _applyDecoratedDescriptor(_class2$o.prototype, "uniformName", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor3$e = _applyDecoratedDescriptor(_class2$o.prototype, "channelIndex", [_float], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return undefined;
              }
            })), _class2$o)) || _class$t);

            function isUniformArray(pass, name) {
              for (var _iterator = _createForOfIteratorHelperLoose(pass.shaderInfo.blocks), _step; !(_step = _iterator()).done;) {
                var block = _step.value;

                for (var _iterator2 = _createForOfIteratorHelperLoose(block.members), _step2; !(_step2 = _iterator2()).done;) {
                  var uniform = _step2.value;

                  if (uniform.name === name) {
                    return uniform.count > 1;
                  }
                }
              }

              return false;
            }

            var _dec$u, _class$u, _class2$p, _descriptor$n, _descriptor2$k, _temp$r, _dec2$o, _class4$4, _class5$4, _descriptor3$f, _temp2$4, _dec3$m, _class7;
            var MorphWeightValueProxy = (_dec$u = ccclass('cc.animation.MorphWeightValueProxy'), _dec$u(_class$u = (_class2$p = (_temp$r = function () {
              function MorphWeightValueProxy() {
                _initializerDefineProperty(this, "subMeshIndex", _descriptor$n, this);

                _initializerDefineProperty(this, "shapeIndex", _descriptor2$k, this);
              }

              var _proto = MorphWeightValueProxy.prototype;

              _proto.forTarget = function forTarget(target) {
                var _this = this;

                return {
                  set: function set(value) {
                    target.setWeight(value, _this.subMeshIndex, _this.shapeIndex);
                  }
                };
              };

              return MorphWeightValueProxy;
            }(), _temp$r), (_descriptor$n = _applyDecoratedDescriptor(_class2$p.prototype, "subMeshIndex", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor2$k = _applyDecoratedDescriptor(_class2$p.prototype, "shapeIndex", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class2$p)) || _class$u);
            var MorphWeightsValueProxy = (_dec2$o = ccclass('cc.animation.MorphWeightsValueProxy'), _dec2$o(_class4$4 = (_class5$4 = (_temp2$4 = function () {
              function MorphWeightsValueProxy() {
                _initializerDefineProperty(this, "subMeshIndex", _descriptor3$f, this);
              }

              var _proto2 = MorphWeightsValueProxy.prototype;

              _proto2.forTarget = function forTarget(target) {
                var _this2 = this;

                return {
                  set: function set(value) {
                    target.setWeights(value, _this2.subMeshIndex);
                  }
                };
              };

              return MorphWeightsValueProxy;
            }(), _temp2$4), (_descriptor3$f = _applyDecoratedDescriptor(_class5$4.prototype, "subMeshIndex", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class5$4)) || _class4$4);
            var MorphWeightsAllValueProxy = (_dec3$m = ccclass('cc.animation.MorphWeightsAllValueProxy'), _dec3$m(_class7 = function () {
              function MorphWeightsAllValueProxy() {}

              var _proto3 = MorphWeightsAllValueProxy.prototype;

              _proto3.forTarget = function forTarget(target) {
                return {
                  set: function set(value) {
                    var _target$mesh$struct$p, _target$mesh;

                    var nSubMeshes = (_target$mesh$struct$p = (_target$mesh = target.mesh) === null || _target$mesh === void 0 ? void 0 : _target$mesh.struct.primitives.length) !== null && _target$mesh$struct$p !== void 0 ? _target$mesh$struct$p : 0;

                    for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
                      target.setWeights(value, iSubMesh);
                    }
                  }
                };
              };

              return MorphWeightsAllValueProxy;
            }()) || _class7);

            var _dec2$p, _class4$5, _class5$5, _descriptor4$d, _descriptor5$c, _descriptor6$9, _temp2$5;

            function makeCubicSplineValueConstructor(name, constructorX, scaleFx, scaleAndAdd) {
              var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

              var tempValue = new constructorX();
              var m0 = new constructorX();
              var m1 = new constructorX();
              var CubicSplineValueClass = (_dec = ccclass(name), _dec(_class = (_class2 = (_temp = function () {
                function CubicSplineValueClass(dataPoint, inTangent, outTangent) {
                  _initializerDefineProperty(this, "dataPoint", _descriptor, this);

                  _initializerDefineProperty(this, "inTangent", _descriptor2, this);

                  _initializerDefineProperty(this, "outTangent", _descriptor3, this);

                  this.dataPoint = dataPoint || new constructorX();
                  this.inTangent = inTangent || new constructorX();
                  this.outTangent = outTangent || new constructorX();
                }

                var _proto = CubicSplineValueClass.prototype;

                _proto.lerp = function lerp(to, t, dt) {
                  var p0 = this.dataPoint;
                  var p1 = to.dataPoint;
                  m0 = scaleFx(m0, this.inTangent, dt);
                  m1 = scaleFx(m1, to.outTangent, dt);
                  var t_3 = t * t * t;
                  var t_2 = t * t;
                  var f_0 = 2 * t_3 - 3 * t_2 + 1;
                  var f_1 = t_3 - 2 * t_2 + t;
                  var f_2 = -2 * t_3 + 3 * t_2;
                  var f_3 = t_3 - t_2;
                  tempValue = scaleFx(tempValue, p0, f_0);
                  tempValue = scaleAndAdd(tempValue, tempValue, m0, f_1);
                  tempValue = scaleAndAdd(tempValue, tempValue, p1, f_2);
                  tempValue = scaleAndAdd(tempValue, tempValue, m1, f_3);
                  return tempValue;
                };

                _proto.getNoLerp = function getNoLerp() {
                  return this.dataPoint;
                };

                return CubicSplineValueClass;
              }(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dataPoint", [serializable], {
                configurable: true,
                enumerable: true,
                writable: true,
                initializer: function initializer() {
                  return new constructorX();
                }
              }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "inTangent", [serializable], {
                configurable: true,
                enumerable: true,
                writable: true,
                initializer: function initializer() {
                  return new constructorX();
                }
              }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "outTangent", [serializable], {
                configurable: true,
                enumerable: true,
                writable: true,
                initializer: function initializer() {
                  return new constructorX();
                }
              })), _class2)) || _class);

              if (constructorX === Quat) {
                var _lerp = CubicSplineValueClass.prototype.lerp;

                CubicSplineValueClass.prototype.lerp = function (to, t, dt) {
                  var result = _lerp.call(this, to, t, dt);

                  Quat.normalize(result, result);
                  return result;
                };
              }

              return CubicSplineValueClass;
            }

            var CubicSplineVec2Value = makeCubicSplineValueConstructor('cc.CubicSplineVec2Value', Vec2, Vec2.multiplyScalar, Vec2.scaleAndAdd);
            var CubicSplineVec3Value = makeCubicSplineValueConstructor('cc.CubicSplineVec3Value', Vec3, Vec3.multiplyScalar, Vec3.scaleAndAdd);
            var CubicSplineVec4Value = makeCubicSplineValueConstructor('cc.CubicSplineVec4Value', Vec4, Vec4.multiplyScalar, Vec4.scaleAndAdd);
            var CubicSplineQuatValue = makeCubicSplineValueConstructor('cc.CubicSplineQuatValue', Quat, Quat.multiplyScalar, Quat.scaleAndAdd);
            var CubicSplineNumberValue = (_dec2$p = ccclass('cc.CubicSplineNumberValue'), _dec2$p(_class4$5 = (_class5$5 = (_temp2$5 = function () {
              function CubicSplineNumberValue(dataPoint, inTangent, outTangent) {
                _initializerDefineProperty(this, "dataPoint", _descriptor4$d, this);

                _initializerDefineProperty(this, "inTangent", _descriptor5$c, this);

                _initializerDefineProperty(this, "outTangent", _descriptor6$9, this);

                this.dataPoint = dataPoint;
                this.inTangent = inTangent;
                this.outTangent = outTangent;
              }

              var _proto2 = CubicSplineNumberValue.prototype;

              _proto2.lerp = function lerp(to, t, dt) {
                var p0 = this.dataPoint;
                var p1 = to.dataPoint;
                var m0 = this.outTangent * dt;
                var m1 = to.inTangent * dt;
                var t_3 = t * t * t;
                var t_2 = t * t;
                var f_0 = 2 * t_3 - 3 * t_2 + 1;
                var f_1 = t_3 - 2 * t_2 + t;
                var f_2 = -2 * t_3 + 3 * t_2;
                var f_3 = t_3 - t_2;
                return p0 * f_0 + m0 * f_1 + p1 * f_2 + m1 * f_3;
              };

              _proto2.getNoLerp = function getNoLerp() {
                return this.dataPoint;
              };

              return CubicSplineNumberValue;
            }(), _temp2$5), (_descriptor4$d = _applyDecoratedDescriptor(_class5$5.prototype, "dataPoint", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor5$c = _applyDecoratedDescriptor(_class5$5.prototype, "inTangent", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor6$9 = _applyDecoratedDescriptor(_class5$5.prototype, "outTangent", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class5$5)) || _class4$5);

            var CLASS_NAME_PREFIX_ANIM = 'cc.animation.';
            var createEvalSymbol = Symbol('CreateEval');

            var _dec$v, _class$v, _class2$q, _descriptor$o, _temp$s, _dec2$q, _class4$6, _class5$6, _descriptor2$l, _descriptor3$g, _temp2$6, _dec3$n, _class7$1, _class8, _descriptor4$e, _temp3, _dec4$l, _class10, _class11, _descriptor5$d, _temp4, _dec5$j, _class13, _class14, _descriptor6$a, _temp5;
            var normalizedFollowTag = Symbol('NormalizedFollow');
            var parseTrsPathTag = Symbol('ConvertAsTrsPath');
            var trackBindingTag = Symbol('TrackBinding');
            var TrackPath = (_dec$v = ccclass(CLASS_NAME_PREFIX_ANIM + "TrackPath"), _dec$v(_class$v = (_class2$q = (_temp$s = function () {
              function TrackPath() {
                _initializerDefineProperty(this, "_paths", _descriptor$o, this);
              }

              var _proto = TrackPath.prototype;

              _proto.toProperty = function toProperty(name) {
                this._paths.push(name);

                return this;
              };

              _proto.toElement = function toElement(index) {
                this._paths.push(index);

                return this;
              };

              _proto.toHierarchy = function toHierarchy(nodePath) {
                this._paths.push(new HierarchyPath(nodePath));

                return this;
              };

              _proto.toComponent = function toComponent(constructor) {
                var path = new ComponentPath(typeof constructor === 'string' ? constructor : js.getClassName(constructor));

                this._paths.push(path);

                return this;
              };

              _proto.toCustomized = function toCustomized(resolver) {
                this._paths.push(resolver);

                return this;
              };

              _proto.append = function append() {
                var _this$_paths;

                for (var _len = arguments.length, trackPaths = new Array(_len), _key = 0; _key < _len; _key++) {
                  trackPaths[_key] = arguments[_key];
                }

                var paths = (_this$_paths = this._paths).concat.apply(_this$_paths, trackPaths.map(function (trackPath) {
                  return trackPath._paths;
                }));

                this._paths = paths;
                return this;
              };

              _proto.isPropertyAt = function isPropertyAt(index) {
                return typeof this._paths[index] === 'string';
              };

              _proto.parsePropertyAt = function parsePropertyAt(index) {
                return this._paths[index];
              };

              _proto.isElementAt = function isElementAt(index) {
                return typeof this._paths[index] === 'number';
              };

              _proto.parseElementAt = function parseElementAt(index) {
                return this._paths[index];
              };

              _proto.isHierarchyAt = function isHierarchyAt(index) {
                return this._paths[index] instanceof HierarchyPath;
              };

              _proto.parseHierarchyAt = function parseHierarchyAt(index) {
                assertIsTrue(this.isHierarchyAt(index));
                return this._paths[index].path;
              };

              _proto.isComponentAt = function isComponentAt(index) {
                return this._paths[index] instanceof ComponentPath;
              };

              _proto.parseComponentAt = function parseComponentAt(index) {
                assertIsTrue(this.isComponentAt(index));
                return this._paths[index].component;
              };

              _proto.slice = function slice(beginIndex, endIndex) {
                var trackPath = new TrackPath();
                trackPath._paths = this._paths.slice(beginIndex, endIndex);
                return trackPath;
              };

              _proto.trace = function trace(object, beginIndex, endIndex) {
                var _beginIndex, _endIndex;

                (_beginIndex = beginIndex) !== null && _beginIndex !== void 0 ? _beginIndex : beginIndex = 0;
                (_endIndex = endIndex) !== null && _endIndex !== void 0 ? _endIndex : endIndex = this._paths.length;
                return this[normalizedFollowTag](object, beginIndex, endIndex);
              };

              _proto[parseTrsPathTag] = function () {
                var paths = this._paths;
                var nPaths = paths.length;
                var iPath = 0;
                var nodePath = '';

                for (; iPath < nPaths; ++iPath) {
                  var path = paths[iPath];

                  if (!(path instanceof HierarchyPath)) {
                    break;
                  } else if (!path.path) {
                    continue;
                  } else if (nodePath) {
                    nodePath += "/" + path.path;
                  } else {
                    nodePath = path.path;
                  }
                }

                if (iPath === nPaths) {
                  return null;
                }

                var prs;

                if (iPath !== nPaths - 1) {
                  return null;
                }

                switch (paths[iPath]) {
                  case 'position':
                  case 'scale':
                  case 'rotation':
                  case 'eulerAngles':
                    prs = paths[iPath];
                    break;

                  default:
                    return null;
                }

                return {
                  node: nodePath,
                  property: prs
                };
              };

              _proto[normalizedFollowTag] = function (root, beginIndex, endIndex) {
                var paths = this._paths;
                var result = root;

                for (var iPath = beginIndex; iPath < endIndex; ++iPath) {
                  var path = paths[iPath];

                  if (isPropertyPath(path)) {
                    if (!(path in result)) {
                      warnID(3929, path);
                      return null;
                    } else {
                      result = result[path];
                    }
                  } else {
                    result = path.get(result);
                  }

                  if (result === null) {
                    break;
                  }
                }

                return result;
              };

              _createClass(TrackPath, [{
                key: "length",
                get: function get() {
                  return this._paths.length;
                }
              }]);

              return TrackPath;
            }(), _temp$s), (_descriptor$o = _applyDecoratedDescriptor(_class2$q.prototype, "_paths", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class2$q)) || _class$v);
            var TrackBinding = (_dec2$q = ccclass(CLASS_NAME_PREFIX_ANIM + "TrackBinding"), _dec2$q(_class4$6 = uniquelyReferenced(_class4$6 = (_class5$6 = (_temp2$6 = function () {
              function TrackBinding() {
                _initializerDefineProperty(this, "path", _descriptor2$l, this);

                _initializerDefineProperty(this, "proxy", _descriptor3$g, this);
              }

              var _proto2 = TrackBinding.prototype;

              _proto2.parseTrsPath = function parseTrsPath() {
                if (this.proxy) {
                  return null;
                } else {
                  return this.path[parseTrsPathTag]();
                }
              };

              _proto2.createRuntimeBinding = function createRuntimeBinding(target, poseOutput, isConstant) {
                var path = this.path,
                    proxy = this.proxy;
                var nPaths = path.length;
                var iLastPath = nPaths - 1;

                if (nPaths !== 0 && (path.isPropertyAt(iLastPath) || path.isElementAt(iLastPath)) && !proxy) {
                  var lastPropertyKey = path.isPropertyAt(iLastPath) ? path.parsePropertyAt(iLastPath) : path.parseElementAt(iLastPath);
                  var resultTarget = path[normalizedFollowTag](target, 0, nPaths - 1);

                  if (resultTarget === null) {
                    return null;
                  }

                  if (poseOutput && resultTarget instanceof Node && isTrsPropertyName(lastPropertyKey)) {
                    var blendStateWriter = poseOutput.createPoseWriter(resultTarget, lastPropertyKey, isConstant);
                    return blendStateWriter;
                  }

                  return {
                    setValue: function setValue(value) {
                      resultTarget[lastPropertyKey] = value;
                    },
                    getValue: function getValue() {
                      return resultTarget[lastPropertyKey];
                    }
                  };
                } else if (!proxy) {
                  errorID(3921);
                  return null;
                } else {
                  var _resultTarget = path[normalizedFollowTag](target, 0, nPaths);

                  if (_resultTarget === null) {
                    return null;
                  }

                  var runtimeProxy = proxy.forTarget(_resultTarget);
                  var _binding = {
                    setValue: function setValue(value) {
                      runtimeProxy.set(value);
                    }
                  };
                  var proxyGet = runtimeProxy.get;

                  if (proxyGet) {
                    _binding.getValue = function () {
                      return proxyGet.call(runtimeProxy);
                    };
                  }

                  return _binding;
                }
              };

              _proto2.isMaskedOff = function isMaskedOff(mask) {
                var trsPath = this.parseTrsPath();

                if (!trsPath) {
                  return false;
                }

                var joints = mask.joints[Symbol.iterator]();

                for (var jointMaskInfoIter = joints.next(); !jointMaskInfoIter.done; jointMaskInfoIter = joints.next()) {
                  var _jointMaskInfoIter = jointMaskInfoIter,
                      jointMaskInfo = _jointMaskInfoIter.value;

                  if (jointMaskInfo.path !== trsPath.node) {
                    continue;
                  }

                  return !jointMaskInfo.enabled;
                }

                return false;
              };

              return TrackBinding;
            }(), _temp2$6), (_descriptor2$l = _applyDecoratedDescriptor(_class5$6.prototype, "path", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new TrackPath();
              }
            }), _descriptor3$g = _applyDecoratedDescriptor(_class5$6.prototype, "proxy", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class5$6)) || _class4$6) || _class4$6);

            function isTrsPropertyName(name) {
              return name === 'position' || name === 'rotation' || name === 'scale' || name === 'eulerAngles';
            }
            var Track = (_dec3$n = ccclass(CLASS_NAME_PREFIX_ANIM + "Track"), _dec3$n(_class7$1 = (_class8 = (_temp3 = function () {
              function Track() {
                _initializerDefineProperty(this, "_binding", _descriptor4$e, this);
              }

              var _proto3 = Track.prototype;

              _proto3.channels = function channels() {
                return [];
              };

              _proto3.range = function range() {
                var range = {
                  min: Infinity,
                  max: -Infinity
                };

                for (var _iterator = _createForOfIteratorHelperLoose(this.channels()), _step; !(_step = _iterator()).done;) {
                  var channel = _step.value;
                  range.min = Math.min(range.min, channel.curve.rangeMin);
                  range.max = Math.max(range.max, channel.curve.rangeMax);
                }

                return range;
              };

              _createClass(Track, [{
                key: "path",
                get: function get() {
                  return this._binding.path;
                },
                set: function set(value) {
                  this._binding.path = value;
                }
              }, {
                key: "proxy",
                get: function get() {
                  return this._binding.proxy;
                },
                set: function set(value) {
                  this._binding.proxy = value;
                }
              }, {
                key: trackBindingTag,
                get: function get() {
                  return this._binding;
                }
              }]);

              return Track;
            }(), _temp3), (_descriptor4$e = _applyDecoratedDescriptor(_class8.prototype, "_binding", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new TrackBinding();
              }
            })), _class8)) || _class7$1);
            var Channel = (_dec4$l = ccclass(CLASS_NAME_PREFIX_ANIM + "Channel"), _dec4$l(_class10 = (_class11 = (_temp4 = function () {
              function Channel(curve) {
                this.name = '';

                _initializerDefineProperty(this, "_curve", _descriptor5$d, this);

                this._curve = curve;
              }

              _createClass(Channel, [{
                key: "curve",
                get: function get() {
                  return this._curve;
                }
              }]);

              return Channel;
            }(), _temp4), (_descriptor5$d = _applyDecoratedDescriptor(_class11.prototype, "_curve", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class11)) || _class10);
            var SingleChannelTrack = (_dec5$j = ccclass(CLASS_NAME_PREFIX_ANIM + "SingleChannelTrack"), _dec5$j(_class13 = (_class14 = (_temp5 = function (_Track) {
              _inheritsLoose(SingleChannelTrack, _Track);

              function SingleChannelTrack() {
                var _this;

                _this = _Track.call(this) || this;

                _initializerDefineProperty(_this, "_channel", _descriptor6$a, _assertThisInitialized(_this));

                _this._channel = new Channel(_this.createCurve());
                return _this;
              }

              var _proto4 = SingleChannelTrack.prototype;

              _proto4.channels = function channels() {
                return [this._channel];
              };

              _proto4.createCurve = function createCurve() {
                throw new Error("Not impl");
              };

              _proto4[createEvalSymbol] = function (_runtimeBinding) {
                var curve = this._channel.curve;
                return new SingleChannelTrackEval(curve);
              };

              _createClass(SingleChannelTrack, [{
                key: "channel",
                get: function get() {
                  return this._channel;
                }
              }]);

              return SingleChannelTrack;
            }(Track), _temp5), (_descriptor6$a = _applyDecoratedDescriptor(_class14.prototype, "_channel", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class14)) || _class13);

            var SingleChannelTrackEval = function () {
              function SingleChannelTrackEval(_curve) {
                this._curve = _curve;
              }

              var _proto5 = SingleChannelTrackEval.prototype;

              _proto5.evaluate = function evaluate(time) {
                return this._curve.evaluate(time);
              };

              return SingleChannelTrackEval;
            }();

            var _dec$w, _class$w;
            var RealTrack = (_dec$w = ccclass(CLASS_NAME_PREFIX_ANIM + "RealTrack"), _dec$w(_class$w = function (_SingleChannelTrack) {
              _inheritsLoose(RealTrack, _SingleChannelTrack);

              function RealTrack() {
                return _SingleChannelTrack.apply(this, arguments) || this;
              }

              var _proto = RealTrack.prototype;

              _proto.createCurve = function createCurve() {
                return new RealCurve();
              };

              return RealTrack;
            }(SingleChannelTrack)) || _class$w);

            function maskIfEmpty(curve) {
              return curve.keyFramesCount === 0 ? undefined : curve;
            }

            var _dec$x, _class$x, _class2$r, _descriptor$p, _descriptor2$m, _temp$t;
            var CHANNEL_NAMES = ['X', 'Y', 'Z', 'W'];
            var VectorTrack = (_dec$x = ccclass(CLASS_NAME_PREFIX_ANIM + "VectorTrack"), _dec$x(_class$x = (_class2$r = (_temp$t = function (_Track) {
              _inheritsLoose(VectorTrack, _Track);

              function VectorTrack() {
                var _this;

                _this = _Track.call(this) || this;

                _initializerDefineProperty(_this, "_channels", _descriptor$p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_nComponents", _descriptor2$m, _assertThisInitialized(_this));

                _this._channels = new Array(4);

                for (var i = 0; i < _this._channels.length; ++i) {
                  var channel = new Channel(new RealCurve());
                  channel.name = CHANNEL_NAMES[i];
                  _this._channels[i] = channel;
                }

                return _this;
              }

              var _proto = VectorTrack.prototype;

              _proto.channels = function channels() {
                return this._channels;
              };

              _proto[createEvalSymbol] = function () {
                switch (this._nComponents) {
                  default:
                  case 2:
                    return new Vec2TrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve));

                  case 3:
                    return new Vec3TrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve), maskIfEmpty(this._channels[2].curve));

                  case 4:
                    return new Vec4TrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve), maskIfEmpty(this._channels[2].curve), maskIfEmpty(this._channels[3].curve));
                }
              };

              _createClass(VectorTrack, [{
                key: "componentsCount",
                get: function get() {
                  return this._nComponents;
                },
                set: function set(value) {
                  this._nComponents = value;
                }
              }]);

              return VectorTrack;
            }(Track), _temp$t), (_descriptor$p = _applyDecoratedDescriptor(_class2$r.prototype, "_channels", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor2$m = _applyDecoratedDescriptor(_class2$r.prototype, "_nComponents", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 4;
              }
            })), _class2$r)) || _class$x);
            var Vec2TrackEval = function () {
              function Vec2TrackEval(_x, _y) {
                this._result = new Vec2();
                this._x = _x;
                this._y = _y;
              }

              var _proto2 = Vec2TrackEval.prototype;

              _proto2.evaluate = function evaluate(time, runtimeBinding) {
                if ((!this._x || !this._y) && runtimeBinding.getValue) {
                  Vec2.copy(this._result, runtimeBinding.getValue());
                }

                if (this._x) {
                  this._result.x = this._x.evaluate(time);
                }

                if (this._y) {
                  this._result.y = this._y.evaluate(time);
                }

                return this._result;
              };

              return Vec2TrackEval;
            }();
            var Vec3TrackEval = function () {
              function Vec3TrackEval(_x, _y, _z) {
                this._result = new Vec3();
                this._x = _x;
                this._y = _y;
                this._z = _z;
              }

              var _proto3 = Vec3TrackEval.prototype;

              _proto3.evaluate = function evaluate(time, runtimeBinding) {
                if ((!this._x || !this._y || !this._z) && runtimeBinding.getValue) {
                  Vec3.copy(this._result, runtimeBinding.getValue());
                }

                if (this._x) {
                  this._result.x = this._x.evaluate(time);
                }

                if (this._y) {
                  this._result.y = this._y.evaluate(time);
                }

                if (this._z) {
                  this._result.z = this._z.evaluate(time);
                }

                return this._result;
              };

              return Vec3TrackEval;
            }();
            var Vec4TrackEval = function () {
              function Vec4TrackEval(_x, _y, _z, _w) {
                this._result = new Vec4();
                this._x = _x;
                this._y = _y;
                this._z = _z;
                this._w = _w;
              }

              var _proto4 = Vec4TrackEval.prototype;

              _proto4.evaluate = function evaluate(time, runtimeBinding) {
                if ((!this._x || !this._y || !this._z || !this._w) && runtimeBinding.getValue) {
                  Vec4.copy(this._result, runtimeBinding.getValue());
                }

                if (this._x) {
                  this._result.x = this._x.evaluate(time);
                }

                if (this._y) {
                  this._result.y = this._y.evaluate(time);
                }

                if (this._z) {
                  this._result.z = this._z.evaluate(time);
                }

                if (this._w) {
                  this._result.w = this._w.evaluate(time);
                }

                return this._result;
              };

              return Vec4TrackEval;
            }();

            var _dec$y, _class$y;
            var QuatTrack = (_dec$y = ccclass(CLASS_NAME_PREFIX_ANIM + "QuatTrack"), _dec$y(_class$y = function (_SingleChannelTrack) {
              _inheritsLoose(QuatTrack, _SingleChannelTrack);

              function QuatTrack() {
                return _SingleChannelTrack.apply(this, arguments) || this;
              }

              var _proto = QuatTrack.prototype;

              _proto.createCurve = function createCurve() {
                return new QuatCurve();
              };

              _proto[createEvalSymbol] = function () {
                return new QuatTrackEval(this.channels()[0].curve);
              };

              return QuatTrack;
            }(SingleChannelTrack)) || _class$y);
            var QuatTrackEval = function () {
              function QuatTrackEval(_curve) {
                this._result = new Quat();
                this._curve = _curve;
              }

              var _proto2 = QuatTrackEval.prototype;

              _proto2.evaluate = function evaluate(time) {
                this._curve.evaluate(time, this._result);

                return this._result;
              };

              return QuatTrackEval;
            }();

            var _dec$z, _class$z, _class2$s, _descriptor$q, _temp$u;
            var CHANNEL_NAMES$1 = ['Red', 'Green', 'Blue', 'Alpha'];
            var ColorTrack = (_dec$z = ccclass(CLASS_NAME_PREFIX_ANIM + "ColorTrack"), _dec$z(_class$z = (_class2$s = (_temp$u = function (_Track) {
              _inheritsLoose(ColorTrack, _Track);

              function ColorTrack() {
                var _this;

                _this = _Track.call(this) || this;

                _initializerDefineProperty(_this, "_channels", _descriptor$q, _assertThisInitialized(_this));

                _this._channels = new Array(4);

                for (var i = 0; i < _this._channels.length; ++i) {
                  var channel = new Channel(new RealCurve());
                  channel.name = CHANNEL_NAMES$1[i];
                  _this._channels[i] = channel;
                }

                return _this;
              }

              var _proto = ColorTrack.prototype;

              _proto.channels = function channels() {
                return this._channels;
              };

              _proto[createEvalSymbol] = function () {
                return new ColorTrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve), maskIfEmpty(this._channels[2].curve), maskIfEmpty(this._channels[3].curve));
              };

              return ColorTrack;
            }(Track), _temp$u), (_descriptor$q = _applyDecoratedDescriptor(_class2$s.prototype, "_channels", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class2$s)) || _class$z);
            var ColorTrackEval = function () {
              function ColorTrackEval(_x, _y, _z, _w) {
                this._result = new Color$1();
                this._x = _x;
                this._y = _y;
                this._z = _z;
                this._w = _w;
              }

              var _proto2 = ColorTrackEval.prototype;

              _proto2.evaluate = function evaluate(time, runtimeBinding) {
                if ((!this._x || !this._y || !this._z || !this._w) && runtimeBinding.getValue) {
                  Color$1.copy(this._result, runtimeBinding.getValue());
                }

                if (this._x) {
                  this._result.r = this._x.evaluate(time);
                }

                if (this._y) {
                  this._result.g = this._y.evaluate(time);
                }

                if (this._z) {
                  this._result.b = this._z.evaluate(time);
                }

                if (this._w) {
                  this._result.a = this._w.evaluate(time);
                }

                return this._result;
              };

              return ColorTrackEval;
            }();

            var _dec$A, _class$A, _class2$t, _descriptor$r, _temp$v;
            var CHANNEL_NAMES$2 = ['Width', 'Height'];
            var SizeTrack = (_dec$A = ccclass(CLASS_NAME_PREFIX_ANIM + "SizeTrack"), _dec$A(_class$A = (_class2$t = (_temp$v = function (_Track) {
              _inheritsLoose(SizeTrack, _Track);

              function SizeTrack() {
                var _this;

                _this = _Track.call(this) || this;

                _initializerDefineProperty(_this, "_channels", _descriptor$r, _assertThisInitialized(_this));

                _this._channels = new Array(2);

                for (var i = 0; i < _this._channels.length; ++i) {
                  var channel = new Channel(new RealCurve());
                  channel.name = CHANNEL_NAMES$2[i];
                  _this._channels[i] = channel;
                }

                return _this;
              }

              var _proto = SizeTrack.prototype;

              _proto.channels = function channels() {
                return this._channels;
              };

              _proto[createEvalSymbol] = function () {
                return new SizeTrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve));
              };

              return SizeTrack;
            }(Track), _temp$v), (_descriptor$r = _applyDecoratedDescriptor(_class2$t.prototype, "_channels", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class2$t)) || _class$A);
            var SizeTrackEval = function () {
              function SizeTrackEval(_width, _height) {
                this._result = new Size$1();
                this._width = _width;
                this._height = _height;
              }

              var _proto2 = SizeTrackEval.prototype;

              _proto2.evaluate = function evaluate(time, runtimeBinding) {
                if ((!this._width || !this._height) && runtimeBinding.getValue) {
                  var size = runtimeBinding.getValue();
                  this._result.x = size.x;
                  this._result.y = size.y;
                }

                if (this._width) {
                  this._result.width = this._width.evaluate(time);
                }

                if (this._height) {
                  this._result.height = this._height.evaluate(time);
                }

                return this._result;
              };

              return SizeTrackEval;
            }();

            var _dec$B, _class$B;
            var ObjectTrack = (_dec$B = ccclass(CLASS_NAME_PREFIX_ANIM + "ObjectTrack"), _dec$B(_class$B = function (_SingleChannelTrack) {
              _inheritsLoose(ObjectTrack, _SingleChannelTrack);

              function ObjectTrack() {
                return _SingleChannelTrack.apply(this, arguments) || this;
              }

              var _proto = ObjectTrack.prototype;

              _proto.createCurve = function createCurve() {
                return new ObjectCurve();
              };

              return ObjectTrack;
            }(SingleChannelTrack)) || _class$B);

            var ownerSymbol = Symbol('[[Owner]]');
            function assertsOwnedBy(mastered, owner) {
              assertIsTrue(mastered[ownerSymbol] === owner);
            }
            function own(mastered, owner) {
              {
                mastered[ownerSymbol] = owner;
              }
            }
            function markAsDangling(mastered) {
              {
                mastered[ownerSymbol] = undefined;
              }
            }

            var VariableType;

            (function (VariableType) {
              VariableType[VariableType["FLOAT"] = 0] = "FLOAT";
              VariableType[VariableType["BOOLEAN"] = 1] = "BOOLEAN";
              VariableType[VariableType["TRIGGER"] = 2] = "TRIGGER";
              VariableType[VariableType["INTEGER"] = 3] = "INTEGER";
            })(VariableType || (VariableType = {}));

            var TriggerResetMode;

            (function (TriggerResetMode) {
              TriggerResetMode[TriggerResetMode["AFTER_CONSUMED"] = 0] = "AFTER_CONSUMED";
              TriggerResetMode[TriggerResetMode["NEXT_FRAME_OR_AFTER_CONSUMED"] = 1] = "NEXT_FRAME_OR_AFTER_CONSUMED";
            })(TriggerResetMode || (TriggerResetMode = {}));

            var VarInstance = function () {
              function VarInstance(type, value) {
                this.type = void 0;
                this.resetMode = TriggerResetMode.AFTER_CONSUMED;
                this._value = void 0;
                this._refs = [];
                this.type = type;
                this._value = value;
              }

              var _proto = VarInstance.prototype;

              _proto.bind = function bind(fn, thisArg) {
                for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                  args[_key - 2] = arguments[_key];
                }

                this._refs.push({
                  fn: fn,
                  thisArg: thisArg,
                  args: args
                });

                return this._value;
              };

              _createClass(VarInstance, [{
                key: "value",
                get: function get() {
                  return this._value;
                },
                set: function set(value) {
                  this._value = value;

                  for (var _iterator = _createForOfIteratorHelperLoose(this._refs), _step; !(_step = _iterator()).done;) {
                    var _step$value = _step.value,
                        fn = _step$value.fn,
                        thisArg = _step$value.thisArg,
                        args = _step$value.args;
                    fn.call.apply(fn, [thisArg, value].concat(args));
                  }
                }
              }]);

              return VarInstance;
            }();

            var InvalidTransitionError = function (_Error) {
              _inheritsLoose(InvalidTransitionError, _Error);

              function InvalidTransitionError(type) {
                var _this;

                _this = _Error.call(this, type + " transition is invalid") || this;
                _this.name = 'TransitionRejectError';
                return _this;
              }

              return InvalidTransitionError;
            }(_wrapNativeSuper(Error));
            var VariableNotDefinedError = function (_Error2) {
              _inheritsLoose(VariableNotDefinedError, _Error2);

              function VariableNotDefinedError(name) {
                return _Error2.call(this, "Graph variable " + name + " is not defined") || this;
              }

              return VariableNotDefinedError;
            }(_wrapNativeSuper(Error));
            var VariableTypeMismatchedError = function (_Error3) {
              _inheritsLoose(VariableTypeMismatchedError, _Error3);

              function VariableTypeMismatchedError(name, expected, received) {
                return _Error3.call(this, "Expect graph variable " + name + " to have type '" + expected + "' instead of received '" + (received !== null && received !== void 0 ? received : typeof received) + "'") || this;
              }

              return VariableTypeMismatchedError;
            }(_wrapNativeSuper(Error));

            var createEval = Symbol('[[createEval]]');

            var _dec$C, _class$C, _class2$u, _descriptor$s, _temp$w, _dec2$r, _class4$7, _class5$7, _descriptor2$n, _temp2$7;
            var outgoingsSymbol = Symbol('[[Outgoing transitions]]');
            var incomingsSymbol = Symbol('[[Incoming transitions]]');
            var State = (_dec$C = ccclass('cc.animation.State'), _dec$C(_class$C = (_class2$u = (_temp$w = function (_EditorExtendable) {
              _inheritsLoose(State, _EditorExtendable);

              function State() {
                var _this;

                _this = _EditorExtendable.call(this) || this;

                _initializerDefineProperty(_this, "name", _descriptor$s, _assertThisInitialized(_this));

                _this[outgoingsSymbol] = [];
                _this[incomingsSymbol] = [];
                return _this;
              }

              return State;
            }(EditorExtendable), _temp$w), (_descriptor$s = _applyDecoratedDescriptor(_class2$u.prototype, "name", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            })), _class2$u)) || _class$C);
            var InteractiveState = (_dec2$r = ccclass(CLASS_NAME_PREFIX_ANIM + "InteractiveState"), _dec2$r(_class4$7 = (_class5$7 = (_temp2$7 = function (_State) {
              _inheritsLoose(InteractiveState, _State);

              function InteractiveState() {
                var _this2;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this2 = _State.call.apply(_State, [this].concat(args)) || this;

                _initializerDefineProperty(_this2, "_components", _descriptor2$n, _assertThisInitialized(_this2));

                return _this2;
              }

              var _proto = InteractiveState.prototype;

              _proto.addComponent = function addComponent(constructor) {
                var component = new constructor();

                this._components.push(component);

                return component;
              };

              _proto.removeComponent = function removeComponent(component) {
                remove(this._components, component);
              };

              _proto.instantiateComponents = function instantiateComponents() {
                var instantiatedComponents = this._components.map(function (component) {
                  var instantiated = instantiate(component);
                  return instantiated;
                });

                return instantiatedComponents;
              };

              _createClass(InteractiveState, [{
                key: "components",
                get: function get() {
                  return this._components;
                }
              }]);

              return InteractiveState;
            }(State), _temp2$7), (_descriptor2$n = _applyDecoratedDescriptor(_class5$7.prototype, "_components", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class5$7)) || _class4$7);

            var _dec$D, _class$D, _class2$v, _descriptor$t, _descriptor2$o, _descriptor3$h, _descriptor4$f, _temp$x;
            var MotionState = (_dec$D = ccclass('cc.animation.Motion'), _dec$D(_class$D = (_class2$v = (_temp$x = function (_InteractiveState) {
              _inheritsLoose(MotionState, _InteractiveState);

              function MotionState() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _InteractiveState.call.apply(_InteractiveState, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "motion", _descriptor$t, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "speed", _descriptor2$o, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "speedMultiplier", _descriptor3$h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "speedMultiplierEnabled", _descriptor4$f, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = MotionState.prototype;

              _proto.clone = function clone() {
                var _this$motion$clone, _this$motion;

                var that = new MotionState();
                that.motion = (_this$motion$clone = (_this$motion = this.motion) === null || _this$motion === void 0 ? void 0 : _this$motion.clone()) !== null && _this$motion$clone !== void 0 ? _this$motion$clone : null;
                that.speed = this.speed;
                that.speedMultiplier = this.speedMultiplier;
                that.speedMultiplierEnabled = this.speedMultiplierEnabled;
                return that;
              };

              return MotionState;
            }(InteractiveState), _temp$x), (_descriptor$t = _applyDecoratedDescriptor(_class2$v.prototype, "motion", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$o = _applyDecoratedDescriptor(_class2$v.prototype, "speed", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            }), _descriptor3$h = _applyDecoratedDescriptor(_class2$v.prototype, "speedMultiplier", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor4$f = _applyDecoratedDescriptor(_class2$v.prototype, "speedMultiplierEnabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            })), _class2$v)) || _class$D);

            function move(array, index, newIndex) {
              assertsArrayIndex(array, index);
              assertsArrayIndex(array, newIndex);

              if (index === newIndex) {
                return array;
              }

              var element = array[index];

              if (index < newIndex) {
                for (var iElement = index + 1; iElement <= newIndex; ++iElement) {
                  array[iElement - 1] = array[iElement];
                }
              } else {
                for (var _iElement = index; _iElement !== newIndex; --_iElement) {
                  array[_iElement] = array[_iElement - 1];
                }
              }

              array[newIndex] = element;
              return array;
            }

            var onAfterDeserializedTag = Symbol('[[OnAfterDeserialized]]');

            var _dec$E, _class$E, _class2$w, _descriptor$u, _descriptor2$p, _descriptor3$i, _temp$y, _dec2$s, _class4$8, _class5$8, _descriptor4$g, _descriptor5$e, _descriptor6$b, _descriptor7$8, _temp2$8, _dec3$o, _class7$2, _dec4$m, _class8$1, _class9, _descriptor8$8, _temp3$1, _dec5$k, _class11$1, _class12, _descriptor9$7, _descriptor10$6, _descriptor11$4, _descriptor12$4, _descriptor13$4, _temp4$1, _dec6$h, _class14$1, _class15, _descriptor14$1, _temp5$1, _dec7$h, _class17, _class18, _descriptor15$1, _descriptor16$1, _descriptor17$1, _descriptor18, _temp6, _dec8$g, _class20, _class21, _descriptor19, _descriptor20, _temp7, _dec9$c, _class23, _class24, _descriptor21, _temp8, _dec10$b, _class26, _class27, _descriptor22, _descriptor23, _temp9;
            var Transition = (_dec$E = ccclass(CLASS_NAME_PREFIX_ANIM + "Transition"), _dec$E(_class$E = (_class2$w = (_temp$y = function (_EditorExtendable) {
              _inheritsLoose(Transition, _EditorExtendable);

              function Transition(from, to, conditions) {
                var _this;

                _this = _EditorExtendable.call(this) || this;

                _initializerDefineProperty(_this, "from", _descriptor$u, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "to", _descriptor2$p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "conditions", _descriptor3$i, _assertThisInitialized(_this));

                _this[ownerSymbol] = void 0;
                _this.from = from;
                _this.to = to;

                if (conditions) {
                  _this.conditions = conditions;
                }

                return _this;
              }

              return Transition;
            }(EditorExtendable), _temp$y), (_descriptor$u = _applyDecoratedDescriptor(_class2$w.prototype, "from", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor2$p = _applyDecoratedDescriptor(_class2$w.prototype, "to", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor3$i = _applyDecoratedDescriptor(_class2$w.prototype, "conditions", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class2$w)) || _class$E);
            var AnimationTransition = (_dec2$s = ccclass(CLASS_NAME_PREFIX_ANIM + "AnimationTransition"), _dec2$s(_class4$8 = (_class5$8 = (_temp2$8 = function (_Transition) {
              _inheritsLoose(AnimationTransition, _Transition);

              function AnimationTransition() {
                var _this2;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this2 = _Transition.call.apply(_Transition, [this].concat(args)) || this;

                _initializerDefineProperty(_this2, "duration", _descriptor4$g, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "relativeDuration", _descriptor5$e, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "exitConditionEnabled", _descriptor6$b, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_exitCondition", _descriptor7$8, _assertThisInitialized(_this2));

                return _this2;
              }

              _createClass(AnimationTransition, [{
                key: "exitCondition",
                get: function get() {
                  return this._exitCondition;
                },
                set: function set(value) {
                  assertIsTrue(value >= 0.0);
                  this._exitCondition = value;
                }
              }]);

              return AnimationTransition;
            }(Transition), _temp2$8), (_descriptor4$g = _applyDecoratedDescriptor(_class5$8.prototype, "duration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.3;
              }
            }), _descriptor5$e = _applyDecoratedDescriptor(_class5$8.prototype, "relativeDuration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor6$b = _applyDecoratedDescriptor(_class5$8.prototype, "exitConditionEnabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor7$8 = _applyDecoratedDescriptor(_class5$8.prototype, "_exitCondition", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            })), _class5$8)) || _class4$8);
            function isAnimationTransition(transition) {
              return transition instanceof AnimationTransition;
            }
            var EmptyState = (_dec3$o = ccclass(CLASS_NAME_PREFIX_ANIM + "EmptyState"), _dec3$o(_class7$2 = function (_State) {
              _inheritsLoose(EmptyState, _State);

              function EmptyState() {
                return _State.apply(this, arguments) || this;
              }

              return EmptyState;
            }(State)) || _class7$2);
            var EmptyStateTransition = (_dec4$m = ccclass(CLASS_NAME_PREFIX_ANIM + "EmptyStateTransition"), _dec4$m(_class8$1 = (_class9 = (_temp3$1 = function (_Transition2) {
              _inheritsLoose(EmptyStateTransition, _Transition2);

              function EmptyStateTransition() {
                var _this3;

                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                _this3 = _Transition2.call.apply(_Transition2, [this].concat(args)) || this;

                _initializerDefineProperty(_this3, "duration", _descriptor8$8, _assertThisInitialized(_this3));

                return _this3;
              }

              return EmptyStateTransition;
            }(Transition), _temp3$1), (_descriptor8$8 = _applyDecoratedDescriptor(_class9.prototype, "duration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.3;
              }
            })), _class9)) || _class8$1);
            var StateMachine = (_dec5$k = ccclass('cc.animation.StateMachine'), _dec5$k(_class11$1 = (_class12 = (_temp4$1 = function (_EditorExtendable2) {
              _inheritsLoose(StateMachine, _EditorExtendable2);

              var _proto = StateMachine.prototype;

              _proto.__callOnAfterDeserializeRecursive = function __callOnAfterDeserializeRecursive() {
                this[onAfterDeserializedTag]();
                var nStates = this._states.length;

                for (var iState = 0; iState < nStates; ++iState) {
                  var state = this._states[iState];

                  if (state instanceof SubStateMachine) {
                    state.stateMachine.__callOnAfterDeserializeRecursive();
                  }
                }
              };

              function StateMachine() {
                var _this4;

                _this4 = _EditorExtendable2.call(this) || this;

                _initializerDefineProperty(_this4, "_states", _descriptor9$7, _assertThisInitialized(_this4));

                _initializerDefineProperty(_this4, "_transitions", _descriptor10$6, _assertThisInitialized(_this4));

                _initializerDefineProperty(_this4, "_entryState", _descriptor11$4, _assertThisInitialized(_this4));

                _initializerDefineProperty(_this4, "_exitState", _descriptor12$4, _assertThisInitialized(_this4));

                _initializerDefineProperty(_this4, "_anyState", _descriptor13$4, _assertThisInitialized(_this4));

                _this4._entryState = _this4._addState(new State());
                _this4._entryState.name = 'Entry';
                _this4._exitState = _this4._addState(new State());
                _this4._exitState.name = 'Exit';
                _this4._anyState = _this4._addState(new State());
                _this4._anyState.name = 'Any';
                return _this4;
              }

              _proto[onAfterDeserializedTag] = function () {
                var _this5 = this;

                this._states.forEach(function (state) {
                  return own(state, _this5);
                });

                this._transitions.forEach(function (transition) {
                  transition.from[outgoingsSymbol].push(transition);
                  transition.to[incomingsSymbol].push(transition);
                });
              };

              _proto[createEval] = function (context) {
                throw new Error('Method not implemented.');
              };

              _proto.states = function states() {
                return this._states;
              };

              _proto.transitions = function transitions() {
                return this._transitions;
              };

              _proto.getTransitionsBetween = function getTransitionsBetween(from, to) {
                assertsOwnedBy(from, this);
                assertsOwnedBy(to, this);
                return from[outgoingsSymbol].filter(function (transition) {
                  return transition.to === to;
                });
              };

              _proto.getOutgoings = function getOutgoings(from) {
                assertsOwnedBy(from, this);
                return from[outgoingsSymbol];
              };

              _proto.getIncomings = function getIncomings(to) {
                assertsOwnedBy(to, this);
                return to[incomingsSymbol];
              };

              _proto.addMotion = function addMotion() {
                return this._addState(new MotionState());
              };

              _proto.addSubStateMachine = function addSubStateMachine() {
                return this._addState(new SubStateMachine());
              };

              _proto.addEmpty = function addEmpty() {
                return this._addState(new EmptyState());
              };

              _proto.remove = function remove$1(state) {
                assertsOwnedBy(state, this);

                if (state === this.entryState || state === this.exitState || state === this.anyState) {
                  return;
                }

                this.eraseTransitionsIncludes(state);

                remove(this._states, state);

                markAsDangling(state);
              };

              _proto.connect = function connect(from, to, conditions) {
                assertsOwnedBy(from, this);
                assertsOwnedBy(to, this);

                if (to === this.entryState) {
                  throw new InvalidTransitionError('to-entry');
                }

                if (to === this.anyState) {
                  throw new InvalidTransitionError('to-any');
                }

                if (from === this.exitState) {
                  throw new InvalidTransitionError('from-exit');
                }

                var transition = from instanceof MotionState || from === this._anyState ? new AnimationTransition(from, to, conditions) : from instanceof EmptyState ? new EmptyStateTransition(from, to, conditions) : new Transition(from, to, conditions);
                own(transition, this);

                this._transitions.push(transition);

                from[outgoingsSymbol].push(transition);
                to[incomingsSymbol].push(transition);
                return transition;
              };

              _proto.disconnect = function disconnect(from, to) {
                assertsOwnedBy(from, this);
                assertsOwnedBy(to, this);
                var oTransitions = from[outgoingsSymbol];
                var iTransitions = to[incomingsSymbol];
                var transitions = this._transitions;
                var oTransitionsToRemove = oTransitions.filter(function (oTransition) {
                  return oTransition.to === to;
                });
                var nOTransitionToRemove = oTransitionsToRemove.length;

                var _loop = function _loop(iOTransitionToRemove) {
                  var oTransition = oTransitionsToRemove[iOTransitionToRemove];

                  remove(oTransitions, oTransition);

                  assertIsTrue(remove(transitions, oTransition));
                  assertIsNonNullable(removeIf(iTransitions, function (transition) {
                    return transition === oTransition;
                  }));
                  markAsDangling(oTransition);
                };

                for (var iOTransitionToRemove = 0; iOTransitionToRemove < nOTransitionToRemove; ++iOTransitionToRemove) {
                  _loop(iOTransitionToRemove);
                }
              };

              _proto.removeTransition = function removeTransition(removal) {
                assertIsTrue(remove(this._transitions, removal));
                assertIsNonNullable(removeIf(removal.from[outgoingsSymbol], function (transition) {
                  return transition === removal;
                }));
                assertIsNonNullable(removeIf(removal.to[incomingsSymbol], function (transition) {
                  return transition === removal;
                }));
                markAsDangling(removal);
              };

              _proto.eraseOutgoings = function eraseOutgoings(from) {
                var _this6 = this;

                assertsOwnedBy(from, this);
                var oTransitions = from[outgoingsSymbol];

                var _loop2 = function _loop2(iOTransition) {
                  var oTransition = oTransitions[iOTransition];
                  var to = oTransition.to;
                  assertIsTrue(remove(_this6._transitions, oTransition));
                  assertIsNonNullable(removeIf(to[incomingsSymbol], function (transition) {
                    return transition === oTransition;
                  }));
                  markAsDangling(oTransition);
                };

                for (var iOTransition = 0; iOTransition < oTransitions.length; ++iOTransition) {
                  _loop2(iOTransition);
                }

                oTransitions.length = 0;
              };

              _proto.eraseIncomings = function eraseIncomings(to) {
                var _this7 = this;

                assertsOwnedBy(to, this);
                var iTransitions = to[incomingsSymbol];

                var _loop3 = function _loop3(iITransition) {
                  var iTransition = iTransitions[iITransition];
                  var from = iTransition.from;
                  assertIsTrue(remove(_this7._transitions, iTransition));
                  assertIsNonNullable(removeIf(from[outgoingsSymbol], function (transition) {
                    return transition === iTransition;
                  }));
                  markAsDangling(iTransition);
                };

                for (var iITransition = 0; iITransition < iTransitions.length; ++iITransition) {
                  _loop3(iITransition);
                }

                iTransitions.length = 0;
              };

              _proto.eraseTransitionsIncludes = function eraseTransitionsIncludes(state) {
                this.eraseIncomings(state);
                this.eraseOutgoings(state);
              };

              _proto.clone = function clone() {
                var that = new StateMachine();
                var stateMap = new Map();

                for (var _iterator = _createForOfIteratorHelperLoose(this._states), _step; !(_step = _iterator()).done;) {
                  var state = _step.value;

                  switch (state) {
                    case this._entryState:
                      stateMap.set(state, that._entryState);
                      break;

                    case this._exitState:
                      stateMap.set(state, that._exitState);
                      break;

                    case this._anyState:
                      stateMap.set(state, that._anyState);
                      break;

                    default:
                      if (state instanceof MotionState || state instanceof SubStateMachine) {
                        var thatState = state.clone();

                        that._addState(thatState);

                        stateMap.set(state, thatState);
                      } else {
                        assertIsTrue(false);
                      }

                      break;
                  }
                }

                for (var _iterator2 = _createForOfIteratorHelperLoose(this._transitions), _step2; !(_step2 = _iterator2()).done;) {
                  var transition = _step2.value;
                  var thatFrom = stateMap.get(transition.from);
                  var thatTo = stateMap.get(transition.to);
                  assertIsTrue(thatFrom && thatTo);
                  var thatTransition = that.connect(thatFrom, thatTo);
                  thatTransition.conditions = transition.conditions.map(function (condition) {
                    return condition.clone();
                  });

                  if (thatTransition instanceof AnimationTransition) {
                    assertIsTrue(transition instanceof AnimationTransition);
                    thatTransition.duration = transition.duration;
                    thatTransition.exitConditionEnabled = transition.exitConditionEnabled;
                    thatTransition.exitCondition = transition.exitCondition;
                  }
                }

                return that;
              };

              _proto._addState = function _addState(state) {
                own(state, this);

                this._states.push(state);

                return state;
              };

              _createClass(StateMachine, [{
                key: "entryState",
                get: function get() {
                  return this._entryState;
                }
              }, {
                key: "exitState",
                get: function get() {
                  return this._exitState;
                }
              }, {
                key: "anyState",
                get: function get() {
                  return this._anyState;
                }
              }]);

              return StateMachine;
            }(EditorExtendable), _temp4$1), (_descriptor9$7 = _applyDecoratedDescriptor(_class12.prototype, "_states", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor10$6 = _applyDecoratedDescriptor(_class12.prototype, "_transitions", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor11$4 = _applyDecoratedDescriptor(_class12.prototype, "_entryState", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor12$4 = _applyDecoratedDescriptor(_class12.prototype, "_exitState", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor13$4 = _applyDecoratedDescriptor(_class12.prototype, "_anyState", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class12)) || _class11$1);
            var SubStateMachine = (_dec6$h = ccclass('cc.animation.SubStateMachine'), _dec6$h(_class14$1 = (_class15 = (_temp5$1 = function (_InteractiveState) {
              _inheritsLoose(SubStateMachine, _InteractiveState);

              function SubStateMachine() {
                var _this8;

                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                  args[_key5] = arguments[_key5];
                }

                _this8 = _InteractiveState.call.apply(_InteractiveState, [this].concat(args)) || this;

                _initializerDefineProperty(_this8, "_stateMachine", _descriptor14$1, _assertThisInitialized(_this8));

                return _this8;
              }

              var _proto2 = SubStateMachine.prototype;

              _proto2.clone = function clone() {
                var that = new SubStateMachine();
                that._stateMachine = this._stateMachine.clone();
                return that;
              };

              _createClass(SubStateMachine, [{
                key: "stateMachine",
                get: function get() {
                  return this._stateMachine;
                }
              }]);

              return SubStateMachine;
            }(InteractiveState), _temp5$1), (_descriptor14$1 = _applyDecoratedDescriptor(_class15.prototype, "_stateMachine", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new StateMachine();
              }
            })), _class15)) || _class14$1);
            var Layer = (_dec7$h = ccclass('cc.animation.Layer'), _dec7$h(_class17 = (_class18 = (_temp6 = function () {
              function Layer() {
                this[ownerSymbol] = void 0;

                _initializerDefineProperty(this, "_stateMachine", _descriptor15$1, this);

                _initializerDefineProperty(this, "name", _descriptor16$1, this);

                _initializerDefineProperty(this, "weight", _descriptor17$1, this);

                _initializerDefineProperty(this, "mask", _descriptor18, this);

                this._stateMachine = new StateMachine();
              }

              _createClass(Layer, [{
                key: "stateMachine",
                get: function get() {
                  return this._stateMachine;
                }
              }]);

              return Layer;
            }(), _temp6), (_descriptor15$1 = _applyDecoratedDescriptor(_class18.prototype, "_stateMachine", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor16$1 = _applyDecoratedDescriptor(_class18.prototype, "name", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor17$1 = _applyDecoratedDescriptor(_class18.prototype, "weight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            }), _descriptor18 = _applyDecoratedDescriptor(_class18.prototype, "mask", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class18)) || _class17);
            var LayerBlending;

            (function (LayerBlending) {
              LayerBlending[LayerBlending["override"] = 0] = "override";
              LayerBlending[LayerBlending["additive"] = 1] = "additive";
            })(LayerBlending || (LayerBlending = {}));

            var TRIGGER_VARIABLE_FLAG_VALUE_START = 0;
            var TRIGGER_VARIABLE_FLAG_VALUE_MASK = 1;
            var TRIGGER_VARIABLE_FLAG_RESET_MODE_START = 1;
            var TRIGGER_VARIABLE_FLAG_RESET_MODE_MASK = 6;
            var TRIGGER_VARIABLE_DEFAULT_FLAGS = 0;
            assertIsTrue((0 << TRIGGER_VARIABLE_FLAG_VALUE_START | TriggerResetMode.AFTER_CONSUMED << TRIGGER_VARIABLE_FLAG_RESET_MODE_START) === TRIGGER_VARIABLE_DEFAULT_FLAGS);
            var PlainVariable = (_dec8$g = ccclass('cc.animation.PlainVariable'), _dec8$g(_class20 = (_class21 = (_temp7 = function () {
              function PlainVariable(type) {
                _initializerDefineProperty(this, "_type", _descriptor19, this);

                _initializerDefineProperty(this, "_value", _descriptor20, this);

                if (typeof type === 'undefined') {
                  return;
                }

                this._type = type;

                switch (type) {
                  default:
                    break;

                  case VariableType.FLOAT:
                    this._value = 0;
                    break;

                  case VariableType.INTEGER:
                    this._value = 0.0;
                    break;

                  case VariableType.BOOLEAN:
                    this._value = false;
                    break;
                }
              }

              _createClass(PlainVariable, [{
                key: "type",
                get: function get() {
                  return this._type;
                }
              }, {
                key: "value",
                get: function get() {
                  return this._value;
                },
                set: function set(value) {
                  {
                    switch (this._type) {
                      default:
                        break;

                      case VariableType.FLOAT:
                        assertIsTrue(typeof value === 'number');
                        break;

                      case VariableType.INTEGER:
                        assertIsTrue(Number.isInteger(value));
                        break;

                      case VariableType.BOOLEAN:
                        assertIsTrue(typeof value === 'boolean');
                        break;
                    }
                  }

                  this._value = value;
                }
              }]);

              return PlainVariable;
            }(), _temp7), (_descriptor19 = _applyDecoratedDescriptor(_class21.prototype, "_type", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return VariableType.FLOAT;
              }
            }), _descriptor20 = _applyDecoratedDescriptor(_class21.prototype, "_value", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.0;
              }
            })), _class21)) || _class20);
            var TriggerVariable = (_dec9$c = ccclass('cc.animation.TriggerVariable'), _dec9$c(_class23 = (_class24 = (_temp8 = function () {
              function TriggerVariable() {
                _initializerDefineProperty(this, "_flags", _descriptor21, this);
              }

              _createClass(TriggerVariable, [{
                key: "type",
                get: function get() {
                  return VariableType.TRIGGER;
                }
              }, {
                key: "value",
                get: function get() {
                  return !!((this._flags & TRIGGER_VARIABLE_FLAG_VALUE_MASK) >> TRIGGER_VARIABLE_FLAG_VALUE_START);
                },
                set: function set(value) {
                  if (value) {
                    this._flags |= 1 << TRIGGER_VARIABLE_FLAG_VALUE_START;
                  } else {
                    this._flags &= ~(1 << TRIGGER_VARIABLE_FLAG_VALUE_START);
                  }
                }
              }, {
                key: "resetMode",
                get: function get() {
                  return (this._flags & TRIGGER_VARIABLE_FLAG_RESET_MODE_MASK) >> TRIGGER_VARIABLE_FLAG_RESET_MODE_START;
                },
                set: function set(value) {
                  this._flags &= ~TRIGGER_VARIABLE_FLAG_RESET_MODE_MASK;
                  this._flags |= value << TRIGGER_VARIABLE_FLAG_RESET_MODE_START;
                }
              }]);

              return TriggerVariable;
            }(), _temp8), (_descriptor21 = _applyDecoratedDescriptor(_class24.prototype, "_flags", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return TRIGGER_VARIABLE_DEFAULT_FLAGS;
              }
            })), _class24)) || _class23);
            var AnimationGraph = (_dec10$b = ccclass('cc.animation.AnimationGraph'), _dec10$b(_class26 = (_class27 = (_temp9 = function (_Asset) {
              _inheritsLoose(AnimationGraph, _Asset);

              function AnimationGraph() {
                var _this9;

                _this9 = _Asset.call(this) || this;

                _initializerDefineProperty(_this9, "_layers", _descriptor22, _assertThisInitialized(_this9));

                _initializerDefineProperty(_this9, "_variables", _descriptor23, _assertThisInitialized(_this9));

                return _this9;
              }

              var _proto3 = AnimationGraph.prototype;

              _proto3.onLoaded = function onLoaded() {
                var layers = this._layers;
                var nLayers = layers.length;

                for (var iLayer = 0; iLayer < nLayers; ++iLayer) {
                  var layer = layers[iLayer];

                  layer.stateMachine.__callOnAfterDeserializeRecursive();
                }
              };

              _proto3.addLayer = function addLayer() {
                var layer = new Layer();

                this._layers.push(layer);

                return layer;
              };

              _proto3.removeLayer = function removeLayer(index) {
                array.removeAt(this._layers, index);
              };

              _proto3.moveLayer = function moveLayer(index, newIndex) {
                move(this._layers, index, newIndex);
              };

              _proto3.addBoolean = function addBoolean(name, value) {
                if (value === void 0) {
                  value = false;
                }

                var variable = new PlainVariable(VariableType.BOOLEAN);
                variable.value = value;
                this._variables[name] = variable;
              };

              _proto3.addFloat = function addFloat(name, value) {
                if (value === void 0) {
                  value = 0.0;
                }

                var variable = new PlainVariable(VariableType.FLOAT);
                variable.value = value;
                this._variables[name] = variable;
              };

              _proto3.addInteger = function addInteger(name, value) {
                if (value === void 0) {
                  value = 0;
                }

                var variable = new PlainVariable(VariableType.INTEGER);
                variable.value = value;
                this._variables[name] = variable;
              };

              _proto3.addTrigger = function addTrigger(name, value, resetMode) {
                if (value === void 0) {
                  value = false;
                }

                if (resetMode === void 0) {
                  resetMode = TriggerResetMode.AFTER_CONSUMED;
                }

                var variable = new TriggerVariable();
                variable.resetMode = resetMode;
                variable.value = value;
                this._variables[name] = variable;
              };

              _proto3.removeVariable = function removeVariable(name) {
                delete this._variables[name];
              };

              _proto3.getVariable = function getVariable(name) {
                return this._variables[name];
              };

              _createClass(AnimationGraph, [{
                key: "layers",
                get: function get() {
                  return this._layers;
                }
              }, {
                key: "variables",
                get: function get() {
                  return Object.entries(this._variables);
                }
              }]);

              return AnimationGraph;
            }(Asset), _temp9), (_descriptor22 = _applyDecoratedDescriptor(_class27.prototype, "_layers", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor23 = _applyDecoratedDescriptor(_class27.prototype, "_variables", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return {};
              }
            })), _class27)) || _class26);

            var RatioSampler = exports('RatioSampler', function () {
              function RatioSampler(ratios) {
                this.ratios = void 0;
                this._findRatio = void 0;
                this.ratios = ratios;
                var currRatioDif;
                var lastRatioDif;
                var canOptimize = true;
                var EPSILON = 1e-6;

                for (var i = 1, l = ratios.length; i < l; i++) {
                  currRatioDif = ratios[i] - ratios[i - 1];

                  if (i === 1) {
                    lastRatioDif = currRatioDif;
                  } else if (Math.abs(currRatioDif - lastRatioDif) > EPSILON) {
                    canOptimize = false;
                    break;
                  }
                }

                this._findRatio = canOptimize ? quickFindIndex : binarySearchEpsilon;
              }

              var _proto = RatioSampler.prototype;

              _proto.sample = function sample(ratio) {
                return this._findRatio(this.ratios, ratio);
              };

              return RatioSampler;
            }());
            legacyCC.RatioSampler = RatioSampler;
            var AnimCurve = exports('AnimCurve', function () {
              AnimCurve.Bezier = function Bezier(controlPoints) {
                return controlPoints;
              };

              function AnimCurve(propertyCurveData, duration) {
                this.types = undefined;
                this.type = null;
                this._values = [];
                this._lerp = undefined;
                this._duration = void 0;
                this._array = void 0;
                this._duration = duration;
                this._values = propertyCurveData.values;

                var getCurveType = function getCurveType(easingMethod) {
                  if (typeof easingMethod === 'string') {
                    return easingMethod;
                  } else if (Array.isArray(easingMethod)) {
                    if (easingMethod[0] === easingMethod[1] && easingMethod[2] === easingMethod[3]) {
                      return AnimCurve.Linear;
                    } else {
                      return AnimCurve.Bezier(easingMethod);
                    }
                  } else {
                    return AnimCurve.Linear;
                  }
                };

                if (propertyCurveData.easingMethod !== undefined) {
                  this.type = getCurveType(propertyCurveData.easingMethod);
                } else if (Array.isArray(propertyCurveData.easingMethods)) {
                  this.types = propertyCurveData.easingMethods.map(getCurveType);
                } else if (propertyCurveData.easingMethods !== undefined) {
                  this.types = new Array(this._values.length).fill(null);

                  for (var _i = 0, _Object$keys = Object.keys(propertyCurveData.easingMethods); _i < _Object$keys.length; _i++) {
                    var index = _Object$keys[_i];
                    this.types[index] = getCurveType(propertyCurveData.easingMethods[index]);
                  }
                } else {
                  this.type = null;
                }

                var firstValue = propertyCurveData.values[0];
                var interpolate = propertyCurveData.interpolate === undefined ? true : propertyCurveData.interpolate;

                if (interpolate) {
                  this._lerp = selectLerpFx(firstValue);
                }

                if (propertyCurveData._arrayLength !== undefined) {
                  this._array = new Array(propertyCurveData._arrayLength);
                }
              }

              var _proto2 = AnimCurve.prototype;

              _proto2.hasLerp = function hasLerp() {
                return !!this._lerp;
              };

              _proto2.valueAt = function valueAt(index) {
                if (this._array === undefined) {
                  var value = this._values[index];

                  if (value && value.getNoLerp) {
                    return value.getNoLerp();
                  } else {
                    return value;
                  }
                } else {
                  for (var i = 0; i < this._array.length; ++i) {
                    this._array[i] = this._values[this._array.length * index + i];
                  }

                  return this._array;
                }
              };

              _proto2.valueBetween = function valueBetween(ratio, from, fromRatio, to, toRatio) {
                if (this._lerp) {
                  var type = this.types ? this.types[from] : this.type;
                  var dRatio = toRatio - fromRatio;
                  var ratioBetweenFrames = (ratio - fromRatio) / dRatio;

                  if (type) {
                    ratioBetweenFrames = computeRatioByType(ratioBetweenFrames, type);
                  }

                  if (this._array === undefined) {
                    var fromVal = this._values[from];
                    var toVal = this._values[to];

                    var value = this._lerp(fromVal, toVal, ratioBetweenFrames, dRatio * this._duration);

                    return value;
                  } else {
                    for (var i = 0; i < this._array.length; ++i) {
                      var _fromVal = this._values[this._array.length * from + i];
                      var _toVal = this._values[this._array.length * to + i];
                      this._array[i] = this._lerp(_fromVal, _toVal, ratioBetweenFrames, dRatio * this._duration);
                    }

                    return this._array;
                  }
                } else if (this._array === undefined) {
                  return this.valueAt(from);
                } else {
                  for (var _i2 = 0; _i2 < this._array.length; ++_i2) {
                    this._array[_i2] = this._values[this._array.length * from + _i2];
                  }

                  return this._array;
                }
              };

              _proto2.empty = function empty() {
                return this._values.length === 0;
              };

              _proto2.constant = function constant() {
                return this._values.length === 1;
              };

              return AnimCurve;
            }());
            AnimCurve.Linear = null;
            legacyCC.AnimCurve = AnimCurve;
            var EventInfo = exports('EventInfo', function () {
              function EventInfo() {
                this.events = [];
              }

              var _proto3 = EventInfo.prototype;

              _proto3.add = function add(func, params) {
                this.events.push({
                  func: func || '',
                  params: params || []
                });
              };

              return EventInfo;
            }());
            function sampleAnimationCurve(curve, sampler, ratio) {
              var index = sampler.sample(ratio);

              if (index < 0) {
                index = ~index;

                if (index <= 0) {
                  index = 0;
                } else if (index >= sampler.ratios.length) {
                  index = sampler.ratios.length - 1;
                } else {
                  return curve.valueBetween(ratio, index - 1, sampler.ratios[index - 1], index, sampler.ratios[index]);
                }
              }

              return curve.valueAt(index);
            }
            legacyCC.sampleAnimationCurve = sampleAnimationCurve;
            function computeRatioByType(ratio, type) {
              if (typeof type === 'string') {
                var func = easing[type];

                if (func) {
                  ratio = func(ratio);
                } else {
                  errorID(3906, type);
                }
              } else if (Array.isArray(type)) {
                ratio = bezierByTime(type, ratio);
              }

              return ratio;
            }

            function quickFindIndex(ratios, ratio) {
              var length = ratios.length - 1;

              if (length === 0) {
                return 0;
              }

              var start = ratios[0];

              if (ratio < start) {
                return 0;
              }

              var end = ratios[length];

              if (ratio > end) {
                return length;
              }

              ratio = (ratio - start) / (end - start);
              var eachLength = 1 / length;
              var index = ratio / eachLength;
              var floorIndex = index | 0;
              var EPSILON = 1e-6;

              if (index - floorIndex < EPSILON) {
                return floorIndex;
              } else if (floorIndex + 1 - index < EPSILON) {
                return floorIndex + 1;
              }

              return ~(floorIndex + 1);
            }

            var selectLerpFx = function () {
              function makeValueTypeLerpFx(constructor) {
                var tempValue = new constructor();
                return function (from, to, ratio) {
                  constructor.lerp(tempValue, from, to, ratio);
                  return tempValue;
                };
              }

              function callLerpable(from, to, t, dt) {
                return from.lerp(to, t, dt);
              }

              function makeQuatSlerpFx() {
                var tempValue = new Quat();
                return function (from, to, t, dt) {
                  return Quat.slerp(tempValue, from, to, t);
                };
              }

              return function (value) {
                if (value === null) {
                  return undefined;
                }

                if (typeof value === 'number') {
                  return lerp;
                } else if (typeof value === 'object' && value.constructor) {
                  if (value instanceof Quat) {
                    return makeQuatSlerpFx();
                  } else if (value instanceof ValueType) {
                    return makeValueTypeLerpFx(value.constructor);
                  } else if (value.constructor === Number) {
                    return lerp;
                  } else if (isLerpable(value)) {
                    return callLerpable;
                  }
                }

                return undefined;
              };
            }();

            var _dec$F, _class$F, _class2$x, _descriptor$v, _temp$z, _dec2$t, _class4$9, _class5$9, _descriptor2$q, _temp2$9;
            var UntypedTrackChannel = (_dec$F = ccclass(CLASS_NAME_PREFIX_ANIM + "UntypedTrackChannel"), _dec$F(_class$F = (_class2$x = (_temp$z = function (_Channel) {
              _inheritsLoose(UntypedTrackChannel, _Channel);

              function UntypedTrackChannel() {
                var _this;

                _this = _Channel.call(this, new RealCurve()) || this;

                _initializerDefineProperty(_this, "property", _descriptor$v, _assertThisInitialized(_this));

                return _this;
              }

              return UntypedTrackChannel;
            }(Channel), _temp$z), (_descriptor$v = _applyDecoratedDescriptor(_class2$x.prototype, "property", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            })), _class2$x)) || _class$F);
            var UntypedTrack = (_dec2$t = ccclass(CLASS_NAME_PREFIX_ANIM + "UntypedTrack"), _dec2$t(_class4$9 = (_class5$9 = (_temp2$9 = function (_Track) {
              _inheritsLoose(UntypedTrack, _Track);

              function UntypedTrack() {
                var _this2;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this2 = _Track.call.apply(_Track, [this].concat(args)) || this;

                _initializerDefineProperty(_this2, "_channels", _descriptor2$q, _assertThisInitialized(_this2));

                return _this2;
              }

              var _proto = UntypedTrack.prototype;

              _proto.channels = function channels() {
                return this._channels;
              };

              _proto[createEvalSymbol] = function (runtimeBinding) {
                var _this3 = this;

                if (!runtimeBinding.getValue) {
                  throw new Error(getError(3930));
                }

                var trySearchCurve = function trySearchCurve(property) {
                  var _this3$_channels$find;

                  return (_this3$_channels$find = _this3._channels.find(function (channel) {
                    return channel.property === property;
                  })) === null || _this3$_channels$find === void 0 ? void 0 : _this3$_channels$find.curve;
                };

                var value = runtimeBinding.getValue();

                switch (true) {
                  default:
                    throw new Error(getError(3931));

                  case value instanceof Vec2:
                    return new Vec2TrackEval(trySearchCurve('x'), trySearchCurve('y'));

                  case value instanceof Vec3:
                    return new Vec3TrackEval(trySearchCurve('x'), trySearchCurve('y'), trySearchCurve('z'));

                  case value instanceof Vec4:
                    return new Vec4TrackEval(trySearchCurve('x'), trySearchCurve('y'), trySearchCurve('z'), trySearchCurve('w'));

                  case value instanceof Color$1:
                    return new ColorTrackEval(trySearchCurve('r'), trySearchCurve('g'), trySearchCurve('b'), trySearchCurve('a'));

                  case value instanceof Size$1:
                    return new SizeTrackEval(trySearchCurve('width'), trySearchCurve('height'));
                }
              };

              _proto.addChannel = function addChannel(property) {
                var channel = new UntypedTrackChannel();
                channel.property = property;

                this._channels.push(channel);

                return channel;
              };

              _proto.upgrade = function upgrade(refine) {
                var _this4 = this;

                var trySearchChannel = function trySearchChannel(property, outChannel) {
                  var untypedChannel = _this4.channels().find(function (channel) {
                    return channel.property === property;
                  });

                  if (untypedChannel) {
                    outChannel.name = untypedChannel.name;
                    outChannel.curve.assignSorted(Array.from(untypedChannel.curve.times()), Array.from(untypedChannel.curve.values()));
                  }
                };

                var kind = refine(this.path, this.proxy);

                switch (kind) {
                  default:
                    break;

                  case 'vec2':
                  case 'vec3':
                  case 'vec4':
                    {
                      var track = new VectorTrack();
                      track.path = this.path;
                      track.proxy = this.proxy;
                      track.componentsCount = kind === 'vec2' ? 2 : kind === 'vec3' ? 3 : 4;

                      var _track$channels = track.channels(),
                          x = _track$channels[0],
                          y = _track$channels[1],
                          z = _track$channels[2],
                          w = _track$channels[3];

                      switch (kind) {
                        case 'vec4':
                          trySearchChannel('w', w);

                        case 'vec3':
                          trySearchChannel('z', z);

                        default:
                        case 'vec2':
                          trySearchChannel('x', x);
                          trySearchChannel('y', y);
                      }

                      return track;
                    }

                  case 'color':
                    {
                      var _track = new ColorTrack();

                      var _track$channels2 = _track.channels(),
                          r = _track$channels2[0],
                          g = _track$channels2[1],
                          b = _track$channels2[2],
                          a = _track$channels2[3];

                      trySearchChannel('r', r);
                      trySearchChannel('g', g);
                      trySearchChannel('b', b);
                      trySearchChannel('a', a);
                      trySearchChannel('x', r);
                      trySearchChannel('y', g);
                      trySearchChannel('z', b);
                      trySearchChannel('w', a);
                      return _track;
                    }

                  case 'size':
                    break;
                }

                return null;
              };

              return UntypedTrack;
            }(Track), _temp2$9), (_descriptor2$q = _applyDecoratedDescriptor(_class5$9.prototype, "_channels", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class5$9)) || _class4$9);

            var AnimationClipLegacyData = function () {
              function AnimationClipLegacyData(duration) {
                this._keys = [];
                this._curves = [];
                this._commonTargets = [];
                this._ratioSamplers = [];
                this._runtimeCurves = void 0;
                this._data = null;
                this._duration = void 0;
                this._duration = duration;
              }

              var _proto = AnimationClipLegacyData.prototype;

              _proto.getPropertyCurves = function getPropertyCurves() {
                if (!this._runtimeCurves) {
                  this._createPropertyCurves();
                }

                return this._runtimeCurves;
              };

              _proto.toTracks = function toTracks() {
                var newTracks = [];
                var legacyKeys = this.keys,
                    legacyCurves = this.curves,
                    legacyCommonTargets = this.commonTargets;

                var convertTrackPath = function convertTrackPath(track, modifiers, valueAdapter) {
                  var trackPath = new TrackPath();

                  for (var _iterator = _createForOfIteratorHelperLoose(modifiers), _step; !(_step = _iterator()).done;) {
                    var modifier = _step.value;

                    if (typeof modifier === 'string') {
                      trackPath.toProperty(modifier);
                    } else if (typeof modifier === 'number') {
                      trackPath.toElement(modifier);
                    } else if (modifier instanceof HierarchyPath) {
                      trackPath.toHierarchy(modifier.path);
                    } else if (modifier instanceof ComponentPath) {
                      trackPath.toComponent(modifier.component);
                    } else {
                      trackPath.toCustomized(modifier);
                    }
                  }

                  track.path = trackPath;
                  track.proxy = valueAdapter;
                };

                var untypedTracks = legacyCommonTargets.map(function (legacyCommonTarget) {
                  var track = new UntypedTrack();
                  convertTrackPath(track, legacyCommonTarget.modifiers, legacyCommonTarget.valueAdapter);
                  newTracks.push(track);
                  return track;
                });

                var _loop = function _loop() {
                  var _legacyCurveData$inte;

                  var legacyCurve = _step2.value;
                  var legacyCurveData = legacyCurve.data;
                  var legacyValues = legacyCurveData.values;

                  if (legacyValues.length === 0) {
                    return "continue";
                  }

                  var legacyKeysIndex = legacyCurveData.keys;
                  var times = legacyKeysIndex < 0 ? [0.0] : legacyKeys[legacyCurveData.keys];
                  var firstValue = legacyValues[0];
                  var interpolate = (_legacyCurveData$inte = legacyCurveData.interpolate) !== null && _legacyCurveData$inte !== void 0 ? _legacyCurveData$inte : true;
                  assertIsTrue(typeof legacyCurveData._arrayLength !== 'number' || typeof firstValue === 'number');
                  var legacyEasingMethodConverter = new LegacyEasingMethodConverter(legacyCurveData, times.length);

                  var installPathAndSetter = function installPathAndSetter(track) {
                    convertTrackPath(track, legacyCurve.modifiers, legacyCurve.valueAdapter);
                  };

                  var legacyCommonTargetCurve = void 0;

                  if (typeof legacyCurve.commonTarget === 'number') {
                    if (!legacyValues.every(function (value) {
                      return typeof value === 'number';
                    })) {
                      warnID(3932);
                      return "continue";
                    }

                    if (legacyCurve.valueAdapter || legacyCurve.modifiers.length !== 1 || typeof legacyCurve.modifiers[0] !== 'string') {
                      warnID(3933);
                      return "continue";
                    }

                    var _propertyName = legacyCurve.modifiers[0];
                    var untypedTrack = untypedTracks[legacyCurve.commonTarget];

                    var _untypedTrack$addChan = untypedTrack.addChannel(_propertyName),
                        curve = _untypedTrack$addChan.curve;

                    legacyCommonTargetCurve = curve;
                  }

                  var convertCurve = function convertCurve() {
                    if (typeof firstValue === 'number') {
                      if (!legacyValues.every(function (value) {
                        return typeof value === 'number';
                      })) {
                        warnID(3934);
                        return;
                      }

                      var realCurve;

                      if (legacyCommonTargetCurve) {
                        realCurve = legacyCommonTargetCurve;
                      } else {
                        var track = new RealTrack();
                        installPathAndSetter(track);
                        newTracks.push(track);
                        realCurve = track.channel.curve;
                      }

                      var interpolationMethod = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;
                      realCurve.assignSorted(times, legacyValues.map(function (value) {
                        return {
                          value: value,
                          interpolationMode: interpolationMethod
                        };
                      }));
                      legacyEasingMethodConverter.convert(realCurve);
                      return;
                    } else if (typeof firstValue === 'object') {
                      switch (true) {
                        default:
                          break;

                        case everyInstanceOf(legacyValues, Vec2):
                        case everyInstanceOf(legacyValues, Vec3):
                        case everyInstanceOf(legacyValues, Vec4):
                          {
                            var components = firstValue instanceof Vec2 ? 2 : firstValue instanceof Vec3 ? 3 : 4;

                            var _track = new VectorTrack();

                            installPathAndSetter(_track);
                            _track.componentsCount = components;

                            var _track$channels = _track.channels(),
                                x = _track$channels[0].curve,
                                y = _track$channels[1].curve,
                                z = _track$channels[2].curve,
                                w = _track$channels[3].curve;

                            var interpolationMode = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                            var valueToFrame = function valueToFrame(value) {
                              return {
                                value: value,
                                interpolationMode: interpolationMode
                              };
                            };

                            switch (components) {
                              case 4:
                                w.assignSorted(times, legacyValues.map(function (value) {
                                  return valueToFrame(value.w);
                                }));
                                legacyEasingMethodConverter.convert(w);

                              case 3:
                                z.assignSorted(times, legacyValues.map(function (value) {
                                  return valueToFrame(value.z);
                                }));
                                legacyEasingMethodConverter.convert(z);

                              default:
                                x.assignSorted(times, legacyValues.map(function (value) {
                                  return valueToFrame(value.x);
                                }));
                                legacyEasingMethodConverter.convert(x);
                                y.assignSorted(times, legacyValues.map(function (value) {
                                  return valueToFrame(value.y);
                                }));
                                legacyEasingMethodConverter.convert(y);
                                break;
                            }

                            newTracks.push(_track);
                            return;
                          }

                        case everyInstanceOf(legacyValues, Quat):
                          {
                            var _track2 = new QuatTrack();

                            installPathAndSetter(_track2);

                            var _interpolationMode = interpolate ? QuatInterpolationMode.SLERP : QuatInterpolationMode.CONSTANT;

                            _track2.channel.curve.assignSorted(times, legacyValues.map(function (value) {
                              return {
                                value: Quat.clone(value),
                                interpolationMode: _interpolationMode
                              };
                            }));

                            legacyEasingMethodConverter.convertQuatCurve(_track2.channel.curve);
                            newTracks.push(_track2);
                            return;
                          }

                        case everyInstanceOf(legacyValues, Color$1):
                          {
                            var _track3 = new ColorTrack();

                            installPathAndSetter(_track3);

                            var _track3$channels = _track3.channels(),
                                r = _track3$channels[0].curve,
                                g = _track3$channels[1].curve,
                                b = _track3$channels[2].curve,
                                a = _track3$channels[3].curve;

                            var _interpolationMode2 = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                            var _valueToFrame = function _valueToFrame(value) {
                              return {
                                value: value,
                                interpolationMode: _interpolationMode2
                              };
                            };

                            r.assignSorted(times, legacyValues.map(function (value) {
                              return _valueToFrame(value.r);
                            }));
                            legacyEasingMethodConverter.convert(r);
                            g.assignSorted(times, legacyValues.map(function (value) {
                              return _valueToFrame(value.g);
                            }));
                            legacyEasingMethodConverter.convert(g);
                            b.assignSorted(times, legacyValues.map(function (value) {
                              return _valueToFrame(value.b);
                            }));
                            legacyEasingMethodConverter.convert(b);
                            a.assignSorted(times, legacyValues.map(function (value) {
                              return _valueToFrame(value.a);
                            }));
                            legacyEasingMethodConverter.convert(a);
                            newTracks.push(_track3);
                            return;
                          }

                        case everyInstanceOf(legacyValues, Size$1):
                          {
                            var _track4 = new SizeTrack();

                            installPathAndSetter(_track4);

                            var _track4$channels = _track4.channels(),
                                width = _track4$channels[0].curve,
                                height = _track4$channels[1].curve;

                            var _interpolationMode3 = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                            var _valueToFrame2 = function _valueToFrame2(value) {
                              return {
                                value: value,
                                interpolationMode: _interpolationMode3
                              };
                            };

                            width.assignSorted(times, legacyValues.map(function (value) {
                              return _valueToFrame2(value.width);
                            }));
                            legacyEasingMethodConverter.convert(width);
                            height.assignSorted(times, legacyValues.map(function (value) {
                              return _valueToFrame2(value.height);
                            }));
                            legacyEasingMethodConverter.convert(height);
                            newTracks.push(_track4);
                            return;
                          }

                        case everyInstanceOf(legacyValues, CubicSplineNumberValue):
                          {
                            assertIsTrue(legacyEasingMethodConverter.nil);

                            var _track5 = new RealTrack();

                            installPathAndSetter(_track5);

                            var _interpolationMode4 = interpolate ? RealInterpolationMode.CUBIC : RealInterpolationMode.CONSTANT;

                            _track5.channel.curve.assignSorted(times, legacyValues.map(function (value) {
                              return {
                                value: value.dataPoint,
                                leftTangent: value.inTangent,
                                rightTangent: value.outTangent,
                                interpolationMode: _interpolationMode4
                              };
                            }));

                            newTracks.push(_track5);
                            return;
                          }

                        case everyInstanceOf(legacyValues, CubicSplineVec2Value):
                        case everyInstanceOf(legacyValues, CubicSplineVec3Value):
                        case everyInstanceOf(legacyValues, CubicSplineVec4Value):
                          {
                            assertIsTrue(legacyEasingMethodConverter.nil);

                            var _components = firstValue instanceof CubicSplineVec2Value ? 2 : firstValue instanceof CubicSplineVec3Value ? 3 : 4;

                            var _track6 = new VectorTrack();

                            installPathAndSetter(_track6);
                            _track6.componentsCount = _components;

                            var _track6$channels = _track6.channels(),
                                _x = _track6$channels[0],
                                _y = _track6$channels[1],
                                _z = _track6$channels[2],
                                _w = _track6$channels[3];

                            var _interpolationMode5 = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                            var _valueToFrame3 = function _valueToFrame3(value, inTangent, outTangent) {
                              return {
                                value: value,
                                leftTangent: inTangent,
                                rightTangent: outTangent,
                                interpolationMode: _interpolationMode5
                              };
                            };

                            switch (_components) {
                              case 4:
                                _w.curve.assignSorted(times, legacyValues.map(function (value) {
                                  return _valueToFrame3(value.dataPoint.w, value.inTangent.w, value.outTangent.w);
                                }));

                              case 3:
                                _z.curve.assignSorted(times, legacyValues.map(function (value) {
                                  return _valueToFrame3(value.dataPoint.z, value.inTangent.z, value.outTangent.z);
                                }));

                              default:
                                _x.curve.assignSorted(times, legacyValues.map(function (value) {
                                  return _valueToFrame3(value.dataPoint.y, value.inTangent.y, value.outTangent.y);
                                }));

                                _y.curve.assignSorted(times, legacyValues.map(function (value) {
                                  return _valueToFrame3(value.dataPoint.x, value.inTangent.x, value.outTangent.x);
                                }));

                                break;
                            }

                            newTracks.push(_track6);
                            return;
                          }

                        case legacyValues.every(function (value) {
                          return value instanceof CubicSplineQuatValue;
                        }):
                          {
                            warnID(3935);
                            break;
                          }
                      }
                    }

                    var objectTrack = new ObjectTrack();
                    installPathAndSetter(objectTrack);
                    objectTrack.channel.curve.assignSorted(times, legacyValues);
                    newTracks.push(objectTrack);
                  };

                  convertCurve();
                };

                for (var _iterator2 = _createForOfIteratorHelperLoose(legacyCurves), _step2; !(_step2 = _iterator2()).done;) {
                  var _ret = _loop();

                  if (_ret === "continue") continue;
                }

                return newTracks;
              };

              _proto._createPropertyCurves = function _createPropertyCurves() {
                var _this = this;

                this._ratioSamplers = this._keys.map(function (keys) {
                  return new RatioSampler(keys.map(function (key) {
                    return key / _this._duration;
                  }));
                });
                this._runtimeCurves = this._curves.map(function (targetCurve) {
                  return {
                    curve: new AnimCurve(targetCurve.data, _this._duration),
                    modifiers: targetCurve.modifiers,
                    valueAdapter: targetCurve.valueAdapter,
                    sampler: _this._ratioSamplers[targetCurve.data.keys],
                    commonTarget: targetCurve.commonTarget
                  };
                });
              };

              _createClass(AnimationClipLegacyData, [{
                key: "keys",
                get: function get() {
                  return this._keys;
                },
                set: function set(value) {
                  this._keys = value;
                }
              }, {
                key: "curves",
                get: function get() {
                  return this._curves;
                },
                set: function set(value) {
                  this._curves = value;
                  delete this._runtimeCurves;
                }
              }, {
                key: "commonTargets",
                get: function get() {
                  return this._commonTargets;
                },
                set: function set(value) {
                  this._commonTargets = value;
                }
              }, {
                key: "data",
                get: function get() {
                  return this._data;
                }
              }]);

              return AnimationClipLegacyData;
            }();

            function everyInstanceOf(array, constructor) {
              return array.every(function (element) {
                return element instanceof constructor;
              });
            }

            var LegacyEasingMethodConverter = function () {
              function LegacyEasingMethodConverter(legacyCurveData, keyframesCount) {
                this._easingMethods = void 0;
                var easingMethods = legacyCurveData.easingMethods;

                if (Array.isArray(easingMethods)) {
                  if (easingMethods.length === 0 && keyframesCount !== 0) {
                    this._easingMethods = new Array(keyframesCount).fill(null);
                  } else {
                    this._easingMethods = easingMethods;
                  }
                } else if (easingMethods === undefined) {
                  this._easingMethods = new Array(keyframesCount).fill(legacyCurveData.easingMethod);
                } else {
                  this._easingMethods = Array.from({
                    length: keyframesCount
                  }, function (_, index) {
                    var _easingMethods$index;

                    return (_easingMethods$index = easingMethods[index]) !== null && _easingMethods$index !== void 0 ? _easingMethods$index : null;
                  });
                }
              }

              var _proto2 = LegacyEasingMethodConverter.prototype;

              _proto2.convert = function convert(curve) {
                var easingMethods = this._easingMethods;

                if (!easingMethods) {
                  return;
                }

                var nKeyframes = curve.keyFramesCount;

                if (curve.keyFramesCount < 2) {
                  return;
                }

                if (Array.isArray(easingMethods)) {
                  assertIsTrue(nKeyframes === easingMethods.length);
                }

                var iLastKeyframe = nKeyframes - 1;

                for (var iKeyframe = 0; iKeyframe < iLastKeyframe; ++iKeyframe) {
                  var easingMethod = easingMethods[iKeyframe];

                  if (!easingMethod) {
                    continue;
                  }

                  if (Array.isArray(easingMethod)) {
                    timeBezierToTangents(easingMethod, curve.getKeyframeTime(iKeyframe), curve.getKeyframeValue(iKeyframe), curve.getKeyframeTime(iKeyframe + 1), curve.getKeyframeValue(iKeyframe + 1));
                  } else {
                    applyLegacyEasingMethodName(easingMethod, curve, iKeyframe);
                  }
                }
              };

              _proto2.convertQuatCurve = function convertQuatCurve(curve) {
                var easingMethods = this._easingMethods;

                if (!easingMethods) {
                  return;
                }

                var nKeyframes = curve.keyFramesCount;

                if (curve.keyFramesCount < 2) {
                  return;
                }

                if (Array.isArray(easingMethods)) {
                  assertIsTrue(nKeyframes === easingMethods.length);
                }

                var iLastKeyframe = nKeyframes - 1;

                for (var iKeyframe = 0; iKeyframe < iLastKeyframe; ++iKeyframe) {
                  var easingMethod = easingMethods[iKeyframe];

                  if (!easingMethod) {
                    continue;
                  }

                  if (Array.isArray(easingMethod)) {
                    curve.getKeyframeValue(iKeyframe).easingMethod = easingMethod.slice();
                  } else {
                    applyLegacyEasingMethodNameIntoQuatCurve(easingMethod, curve, iKeyframe);
                  }
                }
              };

              _createClass(LegacyEasingMethodConverter, [{
                key: "nil",
                get: function get() {
                  return !this._easingMethods || this._easingMethods.every(function (easingMethod) {
                    return easingMethod === null || easingMethod === undefined;
                  });
                }
              }]);

              return LegacyEasingMethodConverter;
            }();

            function applyLegacyEasingMethodName(easingMethodName, curve, keyframeIndex) {
              assertIsTrue(keyframeIndex !== curve.keyFramesCount - 1);
              assertIsTrue(easingMethodName in easingMethodNameMap);
              var keyframeValue = curve.getKeyframeValue(keyframeIndex);
              var easingMethod = easingMethodNameMap[easingMethodName];

              if (easingMethod === EasingMethod.CONSTANT) {
                keyframeValue.interpolationMode = RealInterpolationMode.CONSTANT;
              } else {
                keyframeValue.interpolationMode = RealInterpolationMode.LINEAR;
                keyframeValue.easingMethod = easingMethod;
              }
            }

            function applyLegacyEasingMethodNameIntoQuatCurve(easingMethodName, curve, keyframeIndex) {
              assertIsTrue(keyframeIndex !== curve.keyFramesCount - 1);
              assertIsTrue(easingMethodName in easingMethodNameMap);
              var keyframeValue = curve.getKeyframeValue(keyframeIndex);
              var easingMethod = easingMethodNameMap[easingMethodName];
              keyframeValue.easingMethod = easingMethod;
            }

            var easingMethodNameMap = {
              constant: EasingMethod.CONSTANT,
              linear: EasingMethod.LINEAR,
              quadIn: EasingMethod.QUAD_IN,
              quadOut: EasingMethod.QUAD_OUT,
              quadInOut: EasingMethod.QUAD_IN_OUT,
              quadOutIn: EasingMethod.QUAD_OUT_IN,
              cubicIn: EasingMethod.CUBIC_IN,
              cubicOut: EasingMethod.CUBIC_OUT,
              cubicInOut: EasingMethod.CUBIC_IN_OUT,
              cubicOutIn: EasingMethod.CUBIC_OUT_IN,
              quartIn: EasingMethod.QUART_IN,
              quartOut: EasingMethod.QUART_OUT,
              quartInOut: EasingMethod.QUART_IN_OUT,
              quartOutIn: EasingMethod.QUART_OUT_IN,
              quintIn: EasingMethod.QUINT_IN,
              quintOut: EasingMethod.QUINT_OUT,
              quintInOut: EasingMethod.QUINT_IN_OUT,
              quintOutIn: EasingMethod.QUINT_OUT_IN,
              sineIn: EasingMethod.SINE_IN,
              sineOut: EasingMethod.SINE_OUT,
              sineInOut: EasingMethod.SINE_IN_OUT,
              sineOutIn: EasingMethod.SINE_OUT_IN,
              expoIn: EasingMethod.EXPO_IN,
              expoOut: EasingMethod.EXPO_OUT,
              expoInOut: EasingMethod.EXPO_IN_OUT,
              expoOutIn: EasingMethod.EXPO_OUT_IN,
              circIn: EasingMethod.CIRC_IN,
              circOut: EasingMethod.CIRC_OUT,
              circInOut: EasingMethod.CIRC_IN_OUT,
              circOutIn: EasingMethod.CIRC_OUT_IN,
              elasticIn: EasingMethod.ELASTIC_IN,
              elasticOut: EasingMethod.ELASTIC_OUT,
              elasticInOut: EasingMethod.ELASTIC_IN_OUT,
              elasticOutIn: EasingMethod.ELASTIC_OUT_IN,
              backIn: EasingMethod.BACK_IN,
              backOut: EasingMethod.BACK_OUT,
              backInOut: EasingMethod.BACK_IN_OUT,
              backOutIn: EasingMethod.BACK_OUT_IN,
              bounceIn: EasingMethod.BOUNCE_IN,
              bounceOut: EasingMethod.BOUNCE_OUT,
              bounceInOut: EasingMethod.BOUNCE_IN_OUT,
              bounceOutIn: EasingMethod.BOUNCE_OUT_IN,
              smooth: EasingMethod.SMOOTH,
              fade: EasingMethod.FADE
            };
            function timeBezierToTangents(timeBezierPoints, previousTime, previousKeyframe, nextTime, nextKeyframe) {
              var p1X = timeBezierPoints[0],
                  p1Y = timeBezierPoints[1],
                  p2X = timeBezierPoints[2],
                  p2Y = timeBezierPoints[3];
              var previousValue = previousKeyframe.value;
              var nextValue = nextKeyframe.value;
              var dValue = nextValue - previousValue;
              var dTime = nextTime - previousTime;
              var fx = 3 * dTime;
              var fy = 3 * dValue;
              var t1x = p1X * fx;
              var t1y = p1Y * fy;
              var t2x = (1.0 - p2X) * fx;
              var t2y = (1.0 - p2Y) * fy;
              var ONE_THIRD = 1.0 / 3.0;
              var previousTangent = t1y / t1x;
              var previousTangentWeight = Math.sqrt(t1x * t1x + t1y * t1y) * ONE_THIRD;
              var nextTangent = t2y / t2x;
              var nextTangentWeight = Math.sqrt(t2x * t2x + t2y * t2y) * ONE_THIRD;
              previousKeyframe.interpolationMode = RealInterpolationMode.CUBIC;
              previousKeyframe.tangentWeightMode = ensureRightTangentWeightMode(previousKeyframe.tangentWeightMode);
              previousKeyframe.rightTangent = previousTangent;
              previousKeyframe.rightTangentWeight = previousTangentWeight;
              nextKeyframe.tangentWeightMode = ensureLeftTangentWeightMode(nextKeyframe.tangentWeightMode);
              nextKeyframe.leftTangent = nextTangent;
              nextKeyframe.leftTangentWeight = nextTangentWeight;
            }

            function ensureLeftTangentWeightMode(tangentWeightMode) {
              if (tangentWeightMode === TangentWeightMode.NONE) {
                return TangentWeightMode.LEFT;
              } else if (tangentWeightMode === TangentWeightMode.RIGHT) {
                return TangentWeightMode.BOTH;
              } else {
                return tangentWeightMode;
              }
            }

            function ensureRightTangentWeightMode(tangentWeightMode) {
              if (tangentWeightMode === TangentWeightMode.NONE) {
                return TangentWeightMode.RIGHT;
              } else if (tangentWeightMode === TangentWeightMode.LEFT) {
                return TangentWeightMode.BOTH;
              } else {
                return tangentWeightMode;
              }
            }

            var _dec$G, _class$G, _class2$y, _descriptor$w, _temp$A, _dec2$u, _class4$a, _class5$a, _descriptor2$r, _descriptor3$j, _descriptor4$h, _descriptor5$f, _temp2$a, _dec3$p, _class7$3, _class8$2, _descriptor6$c, _descriptor7$9, _temp3$2, _dec4$n, _class10$1, _dec5$l, _class11$2, _dec6$i, _class12$1, _class13$1, _descriptor8$9, _descriptor9$8, _temp4$2, _dec7$i, _class15$1, _class16, _descriptor10$7, _descriptor11$5, _descriptor12$5, _descriptor13$5, _temp5$2;

            function throwIfSplitMethodIsNotValid() {
              throw new Error("split() only valid in Editor.");
            }

            var ExoticAnimation = (_dec$G = ccclass(CLASS_NAME_PREFIX_ANIM + "ExoticAnimation"), _dec$G(_class$G = (_class2$y = (_temp$A = function () {
              function ExoticAnimation() {
                _initializerDefineProperty(this, "_nodeAnimations", _descriptor$w, this);
              }

              var _proto = ExoticAnimation.prototype;

              _proto.createEvaluator = function createEvaluator(binder) {
                return new ExoticTrsAnimationEvaluator(this._nodeAnimations, binder);
              };

              _proto.addNodeAnimation = function addNodeAnimation(path) {
                var nodeAnimation = new ExoticNodeAnimation(path);

                this._nodeAnimations.push(nodeAnimation);

                return nodeAnimation;
              };

              _proto.collectAnimatedJoints = function collectAnimatedJoints() {
                return Array.from(new Set(this._nodeAnimations.map(function (_ref) {
                  var path = _ref.path;
                  return path;
                })));
              };

              _proto.split = function split(from, to) {
                {
                  return throwIfSplitMethodIsNotValid();
                }
              };

              _proto.toHashString = function toHashString() {
                return this._nodeAnimations.map(function (nodeAnimation) {
                  return nodeAnimation.toHashString();
                }).join('\n');
              };

              return ExoticAnimation;
            }(), _temp$A), (_descriptor$w = _applyDecoratedDescriptor(_class2$y.prototype, "_nodeAnimations", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class2$y)) || _class$G);
            var ExoticNodeAnimation = (_dec2$u = ccclass(CLASS_NAME_PREFIX_ANIM + "ExoticNodeAnimation"), _dec2$u(_class4$a = (_class5$a = (_temp2$a = function () {
              function ExoticNodeAnimation(path) {
                _initializerDefineProperty(this, "_path", _descriptor2$r, this);

                _initializerDefineProperty(this, "_position", _descriptor3$j, this);

                _initializerDefineProperty(this, "_rotation", _descriptor4$h, this);

                _initializerDefineProperty(this, "_scale", _descriptor5$f, this);

                this._path = path;
              }

              var _proto2 = ExoticNodeAnimation.prototype;

              _proto2.createPosition = function createPosition(times, values) {
                this._position = new ExoticTrack(times, new ExoticVec3TrackValues(values));
              };

              _proto2.createRotation = function createRotation(times, values) {
                this._rotation = new ExoticTrack(times, new ExoticQuatTrackValues(values));
              };

              _proto2.createScale = function createScale(times, values) {
                this._scale = new ExoticTrack(times, new ExoticVec3TrackValues(values));
              };

              _proto2.createEvaluator = function createEvaluator(binder) {
                return new ExoticNodeAnimationEvaluator(this._path, this._position, this._rotation, this._scale, binder);
              };

              _proto2.split = function split(from, to, splitInfoCache) {
                {
                  return throwIfSplitMethodIsNotValid();
                }
              };

              _proto2.toHashString = function toHashString() {
                var _this$_position$toHas, _this$_position, _this$_scale$toHashSt, _this$_scale, _this$_rotation$toHas, _this$_rotation;

                return this._path + "\n" + ((_this$_position$toHas = (_this$_position = this._position) === null || _this$_position === void 0 ? void 0 : _this$_position.toHashString()) !== null && _this$_position$toHas !== void 0 ? _this$_position$toHas : '') + ((_this$_scale$toHashSt = (_this$_scale = this._scale) === null || _this$_scale === void 0 ? void 0 : _this$_scale.toHashString()) !== null && _this$_scale$toHashSt !== void 0 ? _this$_scale$toHashSt : '') + ((_this$_rotation$toHas = (_this$_rotation = this._rotation) === null || _this$_rotation === void 0 ? void 0 : _this$_rotation.toHashString()) !== null && _this$_rotation$toHas !== void 0 ? _this$_rotation$toHas : '');
              };

              _createClass(ExoticNodeAnimation, [{
                key: "path",
                get: function get() {
                  return this._path;
                }
              }]);

              return ExoticNodeAnimation;
            }(), _temp2$a), (_descriptor2$r = _applyDecoratedDescriptor(_class5$a.prototype, "_path", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor3$j = _applyDecoratedDescriptor(_class5$a.prototype, "_position", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor4$h = _applyDecoratedDescriptor(_class5$a.prototype, "_rotation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor5$f = _applyDecoratedDescriptor(_class5$a.prototype, "_scale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class5$a)) || _class4$a);

            function floatToHashString(value) {
              return value.toPrecision(2);
            }

            function floatArrayToHashString(values) {
              return values.map(floatToHashString).join(' ');
            }

            var ExoticVectorLikeTrackValues = (_dec3$p = ccclass(CLASS_NAME_PREFIX_ANIM + "ExoticVectorLikeTrackValues"), _dec3$p(_class7$3 = (_class8$2 = (_temp3$2 = function () {
              function ExoticVectorLikeTrackValues(values) {
                _initializerDefineProperty(this, "_values", _descriptor6$c, this);

                _initializerDefineProperty(this, "_isQuantized", _descriptor7$9, this);

                this._values = values;
                this._isQuantized = false;
              }

              var _proto3 = ExoticVectorLikeTrackValues.prototype;

              _proto3.quantize = function quantize(type) {
                assertIsTrue(!this._isQuantized);
                this._values = _quantize(this._values, type);
                this._isQuantized = true;
              };

              _proto3.toHashString = function toHashString() {
                var isQuantized = this._isQuantized,
                    values = this._values;
                return isQuantized + " " + (isQuantized ? values.toHashString() : floatArrayToHashString(values));
              };

              _createClass(ExoticVectorLikeTrackValues, [{
                key: "precision",
                get: function get() {
                  return this._isQuantized ? this._values.originalPrecision : getFloatArrayPrecision(this._values);
                }
              }]);

              return ExoticVectorLikeTrackValues;
            }(), _temp3$2), (_descriptor6$c = _applyDecoratedDescriptor(_class8$2.prototype, "_values", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor7$9 = _applyDecoratedDescriptor(_class8$2.prototype, "_isQuantized", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class8$2)) || _class7$3);
            var ExoticVec3TrackValues = (_dec4$n = ccclass(CLASS_NAME_PREFIX_ANIM + "ExoticVec3TrackValues"), _dec4$n(_class10$1 = function (_ExoticVectorLikeTrac) {
              _inheritsLoose(ExoticVec3TrackValues, _ExoticVectorLikeTrac);

              function ExoticVec3TrackValues() {
                return _ExoticVectorLikeTrac.apply(this, arguments) || this;
              }

              ExoticVec3TrackValues.imitate = function imitate(values, model) {
                var trackValues = new ExoticVec3TrackValues(values);

                if (model._isQuantized) {
                  trackValues.quantize(model._values.quantizationType);
                }

                return trackValues;
              };

              var _proto4 = ExoticVec3TrackValues.prototype;

              _proto4.get = function get(index, resultValue) {
                var values = this._values,
                    isQuantized = this._isQuantized;

                if (isQuantized) {
                  loadVec3FromQuantized(values, index, resultValue);
                } else {
                  Vec3.fromArray(resultValue, values, index * 3);
                }
              };

              _proto4.lerp = function lerp(prevIndex, nextIndex, ratio, prevValue, nextValue, resultValue) {
                var values = this._values,
                    isQuantized = this._isQuantized;

                if (isQuantized) {
                  loadVec3FromQuantized(values, prevIndex, prevValue);
                  loadVec3FromQuantized(values, nextIndex, nextValue);
                } else {
                  Vec3.fromArray(prevValue, values, prevIndex * 3);
                  Vec3.fromArray(nextValue, values, nextIndex * 3);
                }

                Vec3.lerp(resultValue, prevValue, nextValue, ratio);
              };

              return ExoticVec3TrackValues;
            }(ExoticVectorLikeTrackValues)) || _class10$1);
            var ExoticQuatTrackValues = (_dec5$l = ccclass(CLASS_NAME_PREFIX_ANIM + "ExoticQuatTrackValues"), _dec5$l(_class11$2 = function (_ExoticVectorLikeTrac2) {
              _inheritsLoose(ExoticQuatTrackValues, _ExoticVectorLikeTrac2);

              function ExoticQuatTrackValues() {
                return _ExoticVectorLikeTrac2.apply(this, arguments) || this;
              }

              ExoticQuatTrackValues.imitate = function imitate(values, model) {
                var trackValues = new ExoticQuatTrackValues(values);

                if (model._isQuantized) {
                  trackValues.quantize(model._values.quantizationType);
                }

                return trackValues;
              };

              var _proto5 = ExoticQuatTrackValues.prototype;

              _proto5.get = function get(index, resultValue) {
                var values = this._values,
                    isQuantized = this._isQuantized;

                if (isQuantized) {
                  loadQuatFromQuantized(values, index, resultValue);
                } else {
                  Quat.fromArray(resultValue, values, index * 4);
                }
              };

              _proto5.lerp = function lerp(prevIndex, nextIndex, ratio, prevValue, nextValue, resultValue) {
                var values = this._values,
                    isQuantized = this._isQuantized;

                if (isQuantized) {
                  loadQuatFromQuantized(values, prevIndex, prevValue);
                  loadQuatFromQuantized(values, nextIndex, nextValue);
                } else {
                  Quat.fromArray(prevValue, values, prevIndex * 4);
                  Quat.fromArray(nextValue, values, nextIndex * 4);
                }

                Quat.slerp(resultValue, prevValue, nextValue, ratio);
              };

              return ExoticQuatTrackValues;
            }(ExoticVectorLikeTrackValues)) || _class11$2);
            var ExoticTrack = (_dec6$i = ccclass(CLASS_NAME_PREFIX_ANIM + "ExoticTrack"), _dec6$i(_class12$1 = (_class13$1 = (_temp4$2 = function () {
              function ExoticTrack(times, values) {
                _initializerDefineProperty(this, "times", _descriptor8$9, this);

                _initializerDefineProperty(this, "values", _descriptor9$8, this);

                this.times = times;
                this.values = values;
              }

              var _proto6 = ExoticTrack.prototype;

              _proto6.toHashString = function toHashString() {
                var times = this.times,
                    values = this.values;
                return "times: " + floatArrayToHashString(times) + "; values: " + values.toHashString();
              };

              return ExoticTrack;
            }(), _temp4$2), (_descriptor8$9 = _applyDecoratedDescriptor(_class13$1.prototype, "times", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor9$8 = _applyDecoratedDescriptor(_class13$1.prototype, "values", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class13$1)) || _class12$1);

            var SplitInfo = function () {
              function SplitInfo() {
                this._reset();
              }

              var _proto7 = SplitInfo.prototype;

              _proto7.transformTime = function transformTime(input) {
                return input - this._timeOffset;
              };

              _proto7.calculate = function calculate(times, from, to) {
                this._reset();

                var nKeyframes = times.length;

                if (!nKeyframes) {
                  return;
                }

                var firstTime = times[0];
                var lastTime = times[nKeyframes - 1];
                var fromClamped = clamp$1(from, firstTime, lastTime);
                var toClamped = clamp$1(to, firstTime, lastTime);
                this._timeOffset = fromClamped;

                var _searchRange = searchRange(times, fromClamped, toClamped),
                    fromIndex = _searchRange.fromIndex,
                    fromRatio = _searchRange.fromRatio,
                    toIndex = _searchRange.toIndex,
                    toRatio = _searchRange.toRatio;

                assertIsTrue(toIndex >= fromIndex);
                var fromJust = !fromRatio;
                var toJust = !toRatio;

                if (fromIndex === toIndex && fromRatio === toRatio) {
                  if (!fromJust) {
                    this.preLerpIndex = fromIndex;
                    this.preLerpRatio = fromRatio;
                  } else {
                    this.directKeyframesBegin = fromIndex;
                    this.directKeyframesEnd = fromIndex + 1;
                  }

                  return;
                }

                if (!fromJust) {
                  this.preLerpIndex = fromIndex;
                  this.preLerpRatio = fromRatio;
                }

                this.directKeyframesBegin = fromJust ? fromIndex : fromIndex + 1;
                this.directKeyframesEnd = toIndex + 1;

                if (!toJust) {
                  this.postLerpIndex = toIndex;
                  this.postLerpRatio = toRatio;
                }
              };

              _proto7._reset = function _reset() {
                this.preLerpIndex = -1;
                this.preLerpRatio = 0.0;
                this.directKeyframesBegin = 0;
                this.directKeyframesEnd = 0;
                this.postLerpIndex = -1;
                this.postLerpRatio = 0.0;
                this._timeOffset = 0.0;
              };

              _createClass(SplitInfo, [{
                key: "keyframesCount",
                get: function get() {
                  var preLerpIndex = this.preLerpIndex,
                      directKeyframesBegin = this.directKeyframesBegin,
                      directKeyframesEnd = this.directKeyframesEnd,
                      postLerpIndex = this.postLerpIndex;
                  return 0 + (preLerpIndex < 0 ? 0 : 1) + (directKeyframesEnd - directKeyframesBegin) + (postLerpIndex < 0 ? 0 : 1);
                }
              }]);

              return SplitInfo;
            }();

            function searchRange(values, from, to) {
              var nValues = values.length;
              assertIsTrue(nValues !== 0);
              assertIsTrue(to >= from && from >= values[0] && to <= values[nValues - 1]);

              var _binarySearchRatio = binarySearchRatio(values, from),
                  fromIndex = _binarySearchRatio.index,
                  fromRatio = _binarySearchRatio.ratio;

              var _binarySearchRatio2 = binarySearchRatio(values, to),
                  toIndex = _binarySearchRatio2.index,
                  toRatio = _binarySearchRatio2.ratio;

              return {
                fromIndex: fromIndex,
                fromRatio: fromRatio,
                toIndex: toIndex,
                toRatio: toRatio
              };
            }

            function binarySearchRatio(values, value) {
              var nValues = values.length;
              assertIsTrue(values.length !== 0);
              var resultIndex = 0;
              var resultRatio = 0.0;
              var index0 = binarySearchEpsilon(values, value);

              if (index0 >= 0) {
                resultIndex = index0;
              } else {
                var iNext = ~index0;
                assertIsTrue(iNext !== 0 && iNext !== nValues && nValues > 1);
                var iPrev = iNext - 1;
                resultIndex = iPrev;
                var next = values[iNext];
                var prev = values[iPrev];
                resultRatio = (value - prev) / (next - prev);
              }

              return {
                index: resultIndex,
                ratio: resultRatio
              };
            }

            var ExoticTrsAnimationEvaluator = function () {
              function ExoticTrsAnimationEvaluator(nodeAnimations, binder) {
                this._nodeEvaluations = void 0;
                this._nodeEvaluations = nodeAnimations.map(function (nodeAnimation) {
                  return nodeAnimation.createEvaluator(binder);
                });
              }

              var _proto8 = ExoticTrsAnimationEvaluator.prototype;

              _proto8.evaluate = function evaluate(time) {
                this._nodeEvaluations.forEach(function (nodeEvaluator) {
                  nodeEvaluator.evaluate(time);
                });
              };

              return ExoticTrsAnimationEvaluator;
            }();

            var ExoticNodeAnimationEvaluator = function () {
              function ExoticNodeAnimationEvaluator(path, position, rotation, scale, binder) {
                this._position = null;
                this._rotation = null;
                this._scale = null;

                if (position) {
                  this._position = createExoticTrackEvaluationRecord(position.times, position.values, Vec3, path, 'position', binder);
                }

                if (rotation) {
                  this._rotation = createExoticTrackEvaluationRecord(rotation.times, rotation.values, Quat, path, 'rotation', binder);
                }

                if (scale) {
                  this._scale = createExoticTrackEvaluationRecord(scale.times, scale.values, Vec3, path, 'scale', binder);
                }
              }

              var _proto9 = ExoticNodeAnimationEvaluator.prototype;

              _proto9.evaluate = function evaluate(time) {
                if (this._position) {
                  var _value = this._position.evaluator.evaluate(time);

                  this._position.runtimeBinding.setValue(_value);
                }

                if (this._rotation) {
                  var _value2 = this._rotation.evaluator.evaluate(time);

                  this._rotation.runtimeBinding.setValue(_value2);
                }

                if (this._scale) {
                  var _value3 = this._scale.evaluator.evaluate(time);

                  this._scale.runtimeBinding.setValue(_value3);
                }
              };

              return ExoticNodeAnimationEvaluator;
            }();

            var ExoticTrackEvaluator = function () {
              function ExoticTrackEvaluator(times, values, ValueConstructor) {
                this._times = void 0;
                this._inputSampleResultCache = {
                  just: false,
                  index: -1,
                  nextIndex: -1,
                  ratio: 0.0
                };
                this._values = void 0;
                this._prevValue = void 0;
                this._nextValue = void 0;
                this._resultValue = void 0;
                this._times = times;
                this._values = values;
                this._prevValue = new ValueConstructor();
                this._nextValue = new ValueConstructor();
                this._resultValue = new ValueConstructor();
              }

              var _proto10 = ExoticTrackEvaluator.prototype;

              _proto10.evaluate = function evaluate(time) {
                var times = this._times,
                    values = this._values,
                    resultValue = this._resultValue;
                var nFrames = times.length;

                if (nFrames === 0) {
                  return resultValue;
                }

                var inputSampleResult = sampleInput(times, time, this._inputSampleResultCache);

                if (inputSampleResult.just) {
                  values.get(inputSampleResult.index, resultValue);
                } else {
                  values.lerp(inputSampleResult.index, inputSampleResult.nextIndex, inputSampleResult.ratio, this._prevValue, this._nextValue, resultValue);
                }

                return resultValue;
              };

              return ExoticTrackEvaluator;
            }();

            function sampleInput(values, time, result) {
              var nFrames = values.length;
              assertIsTrue(nFrames !== 0);
              var firstTime = values[0];
              var lastTime = values[nFrames - 1];

              if (time < firstTime) {
                result.just = true;
                result.index = 0;
              } else if (time > lastTime) {
                result.just = true;
                result.index = nFrames - 1;
              } else {
                var _index2 = binarySearchEpsilon(values, time);

                if (_index2 >= 0) {
                  result.just = true;
                  result.index = _index2;
                } else {
                  var _nextIndex = ~_index2;

                  assertIsTrue(_nextIndex !== 0 && _nextIndex !== nFrames && nFrames > 1);

                  var _prevIndex = _nextIndex - 1;

                  var prevTime = values[_prevIndex];
                  var nextTime = values[_nextIndex];

                  var _ratio = (time - values[_prevIndex]) / (nextTime - prevTime);

                  result.just = false;
                  result.index = _prevIndex;
                  result.nextIndex = _nextIndex;
                  result.ratio = _ratio;
                }
              }

              return result;
            }

            var QUANTIZATION_TYPE_TO_ARRAY_VIEW_CONSTRUCTOR_MAP = {
              uint8: Uint8Array,
              uint16: Uint16Array
            };
            var FloatPrecision;

            (function (FloatPrecision) {
              FloatPrecision[FloatPrecision["FLOAT_32"] = 0] = "FLOAT_32";
              FloatPrecision[FloatPrecision["FLOAT_64"] = 1] = "FLOAT_64";
            })(FloatPrecision || (FloatPrecision = {}));

            function getFloatArrayPrecision(array) {
              switch (array.BYTES_PER_ELEMENT) {
                default:
                  assertIsTrue(false);

                case 4:
                  return FloatPrecision.FLOAT_32;

                case 8:
                  return FloatPrecision.FLOAT_64;
              }
            }

            var QuantizedFloatArray = (_dec7$i = ccclass(CLASS_NAME_PREFIX_ANIM + "QuantizedFloatArray"), _dec7$i(_class15$1 = (_class16 = (_temp5$2 = function () {
              function QuantizedFloatArray(originalPrecision, values, extent, min) {
                if (min === void 0) {
                  min = 0.0;
                }

                _initializerDefineProperty(this, "originalPrecision", _descriptor10$7, this);

                _initializerDefineProperty(this, "min", _descriptor11$5, this);

                _initializerDefineProperty(this, "extent", _descriptor12$5, this);

                _initializerDefineProperty(this, "values", _descriptor13$5, this);

                this.originalPrecision = originalPrecision;
                this.values = values;
                this.extent = extent;
                this.min = min;
              }

              var _proto11 = QuantizedFloatArray.prototype;

              _proto11.toHashString = function toHashString() {
                var originalPrecision = this.originalPrecision,
                    min = this.min,
                    extent = this.extent,
                    values = this.values;
                return originalPrecision + " " + floatToHashString(min) + " " + floatToHashString(extent) + " " + values.join(' ');
              };

              _createClass(QuantizedFloatArray, [{
                key: "quantizationType",
                get: function get() {
                  switch (this.values.BYTES_PER_ELEMENT) {
                    default:
                    case 1:
                      return 'uint8';

                    case 2:
                      return 'uint16';
                  }
                }
              }]);

              return QuantizedFloatArray;
            }(), _temp5$2), (_descriptor10$7 = _applyDecoratedDescriptor(_class16.prototype, "originalPrecision", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor11$5 = _applyDecoratedDescriptor(_class16.prototype, "min", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor12$5 = _applyDecoratedDescriptor(_class16.prototype, "extent", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor13$5 = _applyDecoratedDescriptor(_class16.prototype, "values", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class16)) || _class15$1);

            function _quantize(values, type) {
              var TypedArrayViewConstructor = QUANTIZATION_TYPE_TO_ARRAY_VIEW_CONSTRUCTOR_MAP[type];
              var MAX = 1 << TypedArrayViewConstructor.BYTES_PER_ELEMENT;
              var min = Number.POSITIVE_INFINITY;
              var max = Number.NEGATIVE_INFINITY;
              values.forEach(function (value) {
                min = Math.min(value, min);
                max = Math.max(value, max);
              });
              var extent = max - min;
              var normalized = TypedArrayViewConstructor.from(values, function (value) {
                return (value - min) / extent * MAX;
              });
              return new QuantizedFloatArray(getFloatArrayPrecision(values), normalized, extent, min);
            }

            function indexQuantized(quantized, index) {
              var quantizedValue = quantized.values[index];
              var MAX_VALUE = 1 << quantized.values.BYTES_PER_ELEMENT;
              return quantizedValue / MAX_VALUE * quantized.extent + quantized.min;
            }

            function createExoticTrackEvaluationRecord(times, values, ValueConstructor, path, property, binder) {
              var trackBinding = new TrackBinding();
              trackBinding.path = new TrackPath().toHierarchy(path).toProperty(property);
              var runtimeBinding = binder(trackBinding);

              if (!runtimeBinding) {
                return null;
              }

              var evaluator = new ExoticTrackEvaluator(times, values, ValueConstructor);
              return {
                runtimeBinding: runtimeBinding,
                evaluator: evaluator
              };
            }

            function loadVec3FromQuantized(values, index, out) {
              Vec3.set(out, indexQuantized(values, 3 * index + 0), indexQuantized(values, 3 * index + 1), indexQuantized(values, 3 * index + 2));
            }

            function loadQuatFromQuantized(values, index, out) {
              Quat.set(out, indexQuantized(values, 4 * index + 0), indexQuantized(values, 4 * index + 1), indexQuantized(values, 4 * index + 2), indexQuantized(values, 4 * index + 3));
            }

            function getGlobalAnimationManager() {
              var animationManager = legacyCC.director.getAnimationManager();
              return animationManager;
            }

            var _dec$H, _class$H, _class2$z, _descriptor$x, _descriptor2$s, _descriptor3$k, _descriptor4$i, _descriptor5$g, _descriptor6$d, _descriptor7$a, _descriptor8$a, _descriptor9$9, _class3$7, _temp$B;
            var searchForRootBonePathSymbol = Symbol('SearchForRootBonePath');
            var exoticAnimationTag = Symbol('ExoticAnimation');
            var AnimationClip = exports('AnimationClip', (_dec$H = ccclass('cc.AnimationClip'), _dec$H(_class$H = (_class2$z = (_temp$B = _class3$7 = function (_Asset) {
              _inheritsLoose(AnimationClip, _Asset);

              function AnimationClip() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "sample", _descriptor$x, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "speed", _descriptor2$s, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "wrapMode", _descriptor3$k, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "enableTrsBlending", _descriptor4$i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_duration", _descriptor5$g, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_hash", _descriptor6$d, _assertThisInitialized(_this));

                _this.frameRate = 0;

                _initializerDefineProperty(_this, "_tracks", _descriptor7$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_exoticAnimation", _descriptor8$a, _assertThisInitialized(_this));

                _this._legacyData = undefined;
                _this._legacyDataDirty = false;

                _initializerDefineProperty(_this, "_events", _descriptor9$9, _assertThisInitialized(_this));

                _this._runtimeEvents = {
                  ratios: [],
                  eventGroups: []
                };
                return _this;
              }

              AnimationClip.createWithSpriteFrames = function createWithSpriteFrames(spriteFrames, sample) {
                var clip = new AnimationClip();
                clip.sample = sample || clip.sample;
                clip.duration = spriteFrames.length / clip.sample;
                var step = 1 / clip.sample;
                var track = new ObjectTrack();
                track.path = new TrackPath().toComponent('cc.Sprite').toProperty('spriteFrame');
                var curve = track.channels()[0].curve;
                curve.assignSorted(spriteFrames.map(function (spriteFrame, index) {
                  return [step * index, spriteFrame];
                }));
                clip.addTrack(track);
                return clip;
              };

              var _proto = AnimationClip.prototype;

              _proto.onLoaded = function onLoaded() {
                this.frameRate = this.sample;
                this.events = this._events;
              };

              _proto.range = function range() {
                var range = {
                  min: Infinity,
                  max: -Infinity
                };
                var tracks = this._tracks;
                var nTracks = tracks.length;

                for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
                  var track = tracks[iTrack];
                  var trackRange = track.range();
                  range.min = Math.min(range.min, trackRange.min);
                  range.max = Math.max(range.max, trackRange.max);
                }

                return range;
              };

              _proto.getTrack = function getTrack(index) {
                return this._tracks[index];
              };

              _proto.addTrack = function addTrack(track) {
                var index = this._tracks.length;

                this._tracks.push(track);

                return index;
              };

              _proto.removeTrack = function removeTrack(index) {
                this._tracks.splice(index, 1);
              };

              _proto.clearTracks = function clearTracks() {
                this._tracks.length = 0;
              };

              _proto.createEventEvaluator = function createEventEvaluator(targetNode) {
                return new EventEvaluator(targetNode, this._runtimeEvents.ratios, this._runtimeEvents.eventGroups, this.wrapMode);
              };

              _proto.createEvaluator = function createEvaluator(context) {
                var _this2 = this;

                var target = context.target;

                var binder = function binder(binding) {
                  if (context.mask && binding.isMaskedOff(context.mask)) {
                    return undefined;
                  }

                  var trackTarget = binding.createRuntimeBinding(target, _this2.enableTrsBlending ? context.pose : undefined, false);
                  return trackTarget !== null && trackTarget !== void 0 ? trackTarget : undefined;
                };

                return this._createEvalWithBinder(target, binder, context.rootMotion);
              };

              _proto.destroy = function destroy() {
                var _legacyCC$director$ro;

                if ((_legacyCC$director$ro = legacyCC.director.root) === null || _legacyCC$director$ro === void 0 ? void 0 : _legacyCC$director$ro.dataPoolManager) {
                  legacyCC.director.root.dataPoolManager.releaseAnimationClip(this);
                }

                SkelAnimDataHub.destroy(this);
                return _Asset.prototype.destroy.call(this);
              };

              _proto[BAKE_SKELETON_CURVE_SYMBOL] = function (start, samples, frames) {
                var step = 1.0 / samples;

                var animatedJoints = this._collectAnimatedJoints();

                var nAnimatedJoints = animatedJoints.length;
                var jointsBakeInfo = {};

                for (var iAnimatedJoint = 0; iAnimatedJoint < nAnimatedJoints; ++iAnimatedJoint) {
                  var joint = animatedJoints[iAnimatedJoint];
                  jointsBakeInfo[joint] = {
                    transforms: Array.from({
                      length: frames
                    }, function () {
                      return new Mat4();
                    })
                  };
                }

                var skeletonFrames = animatedJoints.reduce(function (result, joint) {
                  result[joint] = new BoneGlobalTransform();
                  return result;
                }, {});

                for (var _joint in skeletonFrames) {
                  var skeletonFrame = skeletonFrames[_joint];

                  var parentJoint = _joint.lastIndexOf('/');

                  if (parentJoint >= 0) {
                    var parentJointName = _joint.substring(0, parentJoint);

                    var parentJointFrame = skeletonFrames[parentJointName];

                    if (parentJointFrame) {
                      skeletonFrame.parent = parentJointFrame;
                    }
                  }
                }

                var binder = function binder(binding) {
                  var trsPath = binding.parseTrsPath();

                  if (!trsPath) {
                    return undefined;
                  }

                  var jointFrame = skeletonFrames[trsPath.node];

                  if (!jointFrame) {
                    return undefined;
                  }

                  return createBoneTransformBinding(jointFrame, trsPath.property);
                };

                var evaluator = this._createEvalWithBinder(undefined, binder, undefined);

                for (var iFrame = 0; iFrame < frames; ++iFrame) {
                  var time = start + step * iFrame;
                  evaluator.evaluate(time);

                  for (var _iAnimatedJoint = 0; _iAnimatedJoint < nAnimatedJoints; ++_iAnimatedJoint) {
                    var _joint2 = animatedJoints[_iAnimatedJoint];
                    Mat4.copy(jointsBakeInfo[_joint2].transforms[iFrame], skeletonFrames[_joint2].globalTransform);
                  }

                  for (var _iAnimatedJoint2 = 0; _iAnimatedJoint2 < nAnimatedJoints; ++_iAnimatedJoint2) {
                    var _joint3 = animatedJoints[_iAnimatedJoint2];

                    skeletonFrames[_joint3].invalidate();
                  }
                }

                return {
                  samples: samples,
                  frames: frames,
                  joints: jointsBakeInfo
                };
              };

              _proto.upgradeUntypedTracks = function upgradeUntypedTracks(refine) {
                var newTracks = [];
                var removals = [];
                var tracks = this._tracks;
                var nTracks = tracks.length;

                for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
                  var track = tracks[iTrack];

                  if (!(track instanceof UntypedTrack)) {
                    continue;
                  }

                  var newTrack = track.upgrade(refine);

                  if (newTrack) {
                    newTracks.push(newTrack);
                    removals.push(track);
                  }
                }

                var nRemovalTracks = removals.length;

                for (var iRemovalTrack = 0; iRemovalTrack < nRemovalTracks; ++iRemovalTrack) {
                  array.remove(tracks, removals[iRemovalTrack]);
                }

                tracks.push.apply(tracks, newTracks);
              };

              _proto[searchForRootBonePathSymbol] = function () {
                return this._searchForRootBonePath();
              };

              _proto.getPropertyCurves = function getPropertyCurves() {
                return this._getLegacyData().getPropertyCurves();
              };

              _proto.updateEventDatas = function updateEventDatas() {
                this.events = this._events;
              };

              _proto.hasEvents = function hasEvents() {
                return this.events.length !== 0;
              };

              _proto.syncLegacyData = function syncLegacyData() {
                if (this._legacyData) {
                  this._fromLegacy(this._legacyData);

                  this._legacyData = undefined;
                }
              };

              _proto._createEvalWithBinder = function _createEvalWithBinder(target, binder, rootMotionOptions) {
                if (this._legacyDataDirty) {
                  this._legacyDataDirty = false;
                  this.syncLegacyData();
                }

                var rootMotionTrackExcludes = [];
                var rootMotionEvaluation;

                if (rootMotionOptions) {
                  rootMotionEvaluation = this._createRootMotionEvaluation(target, rootMotionOptions, rootMotionTrackExcludes);
                }

                var trackEvalStatues = [];
                var exoticAnimationEvaluator;
                var tracks = this._tracks;
                var nTracks = tracks.length;

                for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
                  var track = tracks[iTrack];

                  if (rootMotionTrackExcludes.includes(track)) {
                    continue;
                  }

                  if (Array.from(track.channels()).every(function (_ref) {
                    var curve = _ref.curve;
                    return curve.keyFramesCount === 0;
                  })) {
                    continue;
                  }

                  var trackTarget = binder(track[trackBindingTag]);

                  if (!trackTarget) {
                    continue;
                  }

                  var trackEval = track[createEvalSymbol](trackTarget);
                  trackEvalStatues.push({
                    binding: trackTarget,
                    trackEval: trackEval
                  });
                }

                if (this._exoticAnimation) {
                  exoticAnimationEvaluator = this._exoticAnimation.createEvaluator(binder);
                }

                var evaluation = new AnimationClipEvaluation(trackEvalStatues, exoticAnimationEvaluator, rootMotionEvaluation);
                return evaluation;
              };

              _proto._createRootMotionEvaluation = function _createRootMotionEvaluation(target, rootMotionOptions, rootMotionTrackExcludes) {
                if (!(target instanceof Node)) {
                  errorID(3920);
                  return undefined;
                }

                var rootBonePath = this._searchForRootBonePath();

                if (!rootBonePath) {
                  warnID(3923);
                  return undefined;
                }

                var rootBone = target.getChildByPath(rootBonePath);

                if (!rootBone) {
                  warnID(3924);
                  return undefined;
                }

                var boneTransform = new BoneTransform();
                var rootMotionsTrackEvaluations = [];
                var tracks = this._tracks;
                var nTracks = tracks.length;

                for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
                  var track = tracks[iTrack];
                  var trackBinding = track[trackBindingTag];
                  var trsPath = trackBinding.parseTrsPath();

                  if (!trsPath) {
                    continue;
                  }

                  var bonePath = trsPath.node;

                  if (bonePath !== rootBonePath) {
                    continue;
                  }

                  rootMotionTrackExcludes.push(track);
                  var property = trsPath.property;
                  var trackTarget = createBoneTransformBinding(boneTransform, property);

                  if (!trackTarget) {
                    continue;
                  }

                  var trackEval = track[createEvalSymbol](trackTarget);
                  rootMotionsTrackEvaluations.push({
                    binding: trackTarget,
                    trackEval: trackEval
                  });
                }

                var rootMotionEvaluation = new RootMotionEvaluation(rootBone, this._duration, boneTransform, rootMotionsTrackEvaluations);
                return rootMotionEvaluation;
              };

              _proto._searchForRootBonePath = function _searchForRootBonePath() {
                var paths = this._tracks.map(function (track) {
                  var trsPath = track[trackBindingTag].parseTrsPath();

                  if (trsPath) {
                    var nodePath = trsPath.node;
                    return {
                      path: nodePath,
                      rank: nodePath.split('/').length
                    };
                  } else {
                    return {
                      path: '',
                      rank: 0
                    };
                  }
                });

                paths.sort(function (a, b) {
                  return a.rank - b.rank;
                });
                var iNonEmptyPath = paths.findIndex(function (p) {
                  return p.rank !== 0;
                });

                if (iNonEmptyPath < 0) {
                  return '';
                }

                var nPaths = paths.length;
                var firstPath = paths[iNonEmptyPath];
                var highestPathsAreSame = true;

                for (var iPath = iNonEmptyPath + 1; iPath < nPaths; ++iPath) {
                  var path = paths[iPath];

                  if (path.rank !== firstPath.rank) {
                    break;
                  }

                  if (path.path !== firstPath.path) {
                    highestPathsAreSame = false;
                    break;
                  }
                }

                return highestPathsAreSame ? firstPath.path : '';
              };

              _proto._getLegacyData = function _getLegacyData() {
                if (!this._legacyData) {
                  this._legacyData = this._toLegacy();
                }

                return this._legacyData;
              };

              _proto._toLegacy = function _toLegacy() {
                var keys = [];
                var legacyCurves = [];
                var commonTargets = [];
                var legacyClipData = new AnimationClipLegacyData(this._duration);
                legacyClipData.keys = keys;
                legacyClipData.curves = legacyCurves;
                legacyClipData.commonTargets = commonTargets;
                return legacyClipData;
              };

              _proto._fromLegacy = function _fromLegacy(legacyData) {
                var newTracks = legacyData.toTracks();
                var nNewTracks = newTracks.length;

                for (var iNewTrack = 0; iNewTrack < nNewTracks; ++iNewTrack) {
                  this.addTrack(newTracks[iNewTrack]);
                }
              };

              _proto._collectAnimatedJoints = function _collectAnimatedJoints() {
                var joints = new Set();
                var tracks = this._tracks;
                var nTracks = tracks.length;

                for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
                  var track = tracks[iTrack];
                  var trsPath = track[trackBindingTag].parseTrsPath();

                  if (trsPath) {
                    joints.add(trsPath.node);
                  }
                }

                if (this._exoticAnimation) {
                  var animatedJoints = this._exoticAnimation.collectAnimatedJoints();

                  var nAnimatedJoints = animatedJoints.length;

                  for (var iAnimatedJoint = 0; iAnimatedJoint < nAnimatedJoints; ++iAnimatedJoint) {
                    joints.add(animatedJoints[iAnimatedJoint]);
                  }
                }

                return Array.from(joints);
              };

              _createClass(AnimationClip, [{
                key: "duration",
                get: function get() {
                  return this._duration;
                },
                set: function set(value) {
                  this._duration = value;
                }
              }, {
                key: "tracksCount",
                get: function get() {
                  return this._tracks.length;
                }
              }, {
                key: "tracks",
                get: function get() {
                  return this._tracks;
                }
              }, {
                key: "hash",
                get: function get() {
                  var _this$_exoticAnimatio, _this$_exoticAnimatio2;

                  if (this._hash) {
                    return this._hash;
                  }

                  var hashString = "Exotic:" + ((_this$_exoticAnimatio = (_this$_exoticAnimatio2 = this._exoticAnimation) === null || _this$_exoticAnimatio2 === void 0 ? void 0 : _this$_exoticAnimatio2.toHashString()) !== null && _this$_exoticAnimatio !== void 0 ? _this$_exoticAnimatio : '');
                  return this._hash = murmurhash2_32_gc(hashString, 666);
                }
              }, {
                key: "events",
                get: function get() {
                  return this._events;
                },
                set: function set(value) {
                  var _this3 = this;

                  this._events = value;
                  var ratios = [];
                  var eventGroups = [];
                  var events = this.events.sort(function (a, b) {
                    return a.frame - b.frame;
                  });
                  var nEvents = events.length;

                  var _loop = function _loop(iEvent) {
                    var eventData = events[iEvent];
                    var ratio = eventData.frame / _this3._duration;
                    var i = ratios.findIndex(function (r) {
                      return r === ratio;
                    });

                    if (i < 0) {
                      i = ratios.length;
                      ratios.push(ratio);
                      eventGroups.push({
                        events: []
                      });
                    }

                    eventGroups[i].events.push({
                      functionName: eventData.func,
                      parameters: eventData.params
                    });
                  };

                  for (var iEvent = 0; iEvent < nEvents; ++iEvent) {
                    _loop(iEvent);
                  }

                  this._runtimeEvents = {
                    ratios: ratios,
                    eventGroups: eventGroups
                  };
                }
              }, {
                key: exoticAnimationTag,
                get: function get() {
                  return this._exoticAnimation;
                }
              }, {
                key: exoticAnimationTag,
                set: function set(value) {
                  this._exoticAnimation = value;
                }
              }, {
                key: "keys",
                get: function get() {
                  return this._getLegacyData().keys;
                }
              }, {
                key: "keys",
                set: function set(value) {
                  this._legacyDataDirty = true;
                  this._getLegacyData().keys = value;
                }
              }, {
                key: "curves",
                get: function get() {
                  this._legacyDataDirty = true;
                  return this._getLegacyData().curves;
                }
              }, {
                key: "curves",
                set: function set(value) {
                  this._getLegacyData().curves = value;
                }
              }, {
                key: "commonTargets",
                get: function get() {
                  return this._getLegacyData().commonTargets;
                }
              }, {
                key: "commonTargets",
                set: function set(value) {
                  this._legacyDataDirty = true;
                  this._getLegacyData().commonTargets = value;
                }
              }, {
                key: "data",
                get: function get() {
                  return this._getLegacyData().data;
                }
              }, {
                key: "eventGroups",
                get: function get() {
                  return this._runtimeEvents.eventGroups;
                }
              }]);

              return AnimationClip;
            }(Asset), _class3$7.WrapMode = WrapMode$1, _temp$B), (_descriptor$x = _applyDecoratedDescriptor(_class2$z.prototype, "sample", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 60;
              }
            }), _descriptor2$s = _applyDecoratedDescriptor(_class2$z.prototype, "speed", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor3$k = _applyDecoratedDescriptor(_class2$z.prototype, "wrapMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return WrapMode$1.Normal;
              }
            }), _descriptor4$i = _applyDecoratedDescriptor(_class2$z.prototype, "enableTrsBlending", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor5$g = _applyDecoratedDescriptor(_class2$z.prototype, "_duration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor6$d = _applyDecoratedDescriptor(_class2$z.prototype, "_hash", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor7$a = _applyDecoratedDescriptor(_class2$z.prototype, "_tracks", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor8$a = _applyDecoratedDescriptor(_class2$z.prototype, "_exoticAnimation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor9$9 = _applyDecoratedDescriptor(_class2$z.prototype, "_events", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class2$z)) || _class$H));
            legacyCC.AnimationClip = AnimationClip;

            var AnimationClipEvaluation = function () {
              function AnimationClipEvaluation(trackEvalStatuses, exoticAnimationEvaluator, rootMotionEvaluation) {
                this._exoticAnimationEvaluator = void 0;
                this._trackEvalStatues = [];
                this._rootMotionEvaluation = undefined;
                this._trackEvalStatues = trackEvalStatuses;
                this._exoticAnimationEvaluator = exoticAnimationEvaluator;
                this._rootMotionEvaluation = rootMotionEvaluation;
              }

              var _proto2 = AnimationClipEvaluation.prototype;

              _proto2.evaluate = function evaluate(time) {
                var trackEvalStatuses = this._trackEvalStatues,
                    exoticAnimationEvaluator = this._exoticAnimationEvaluator;
                var nTrackEvalStatuses = trackEvalStatuses.length;

                for (var iTrackEvalStatus = 0; iTrackEvalStatus < nTrackEvalStatuses; ++iTrackEvalStatus) {
                  var _trackEvalStatuses$iT = trackEvalStatuses[iTrackEvalStatus],
                      trackEval = _trackEvalStatuses$iT.trackEval,
                      binding = _trackEvalStatuses$iT.binding;
                  var value = trackEval.evaluate(time, binding);
                  binding.setValue(value);
                }

                if (exoticAnimationEvaluator) {
                  exoticAnimationEvaluator.evaluate(time);
                }
              };

              _proto2.evaluateRootMotion = function evaluateRootMotion(time, motionLength) {
                var rootMotionEvaluation = this._rootMotionEvaluation;

                if (rootMotionEvaluation) {
                  rootMotionEvaluation.evaluate(time, motionLength);
                }
              };

              return AnimationClipEvaluation;
            }();

            var BoneTransform = function () {
              function BoneTransform() {
                this.position = new Vec3();
                this.scale = new Vec3(1.0, 1.0, 1.0);
                this.rotation = new Quat();
                this.eulerAngles = new Vec3();
              }

              var _proto3 = BoneTransform.prototype;

              _proto3.getTransform = function getTransform(out) {
                Mat4.fromRTS(out, this.rotation, this.position, this.scale);
              };

              return BoneTransform;
            }();

            var BoneGlobalTransform = function (_BoneTransform) {
              _inheritsLoose(BoneGlobalTransform, _BoneTransform);

              function BoneGlobalTransform() {
                var _this4;

                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                _this4 = _BoneTransform.call.apply(_BoneTransform, [this].concat(args)) || this;
                _this4.parent = null;
                _this4._dirty = true;
                _this4._transform = new Mat4();
                return _this4;
              }

              var _proto4 = BoneGlobalTransform.prototype;

              _proto4.invalidate = function invalidate() {
                this._dirty = true;
              };

              _createClass(BoneGlobalTransform, [{
                key: "globalTransform",
                get: function get() {
                  var transform = this._transform;

                  if (this._dirty) {
                    this._dirty = false;
                    Mat4.fromRTS(transform, this.rotation, this.position, this.scale);

                    if (this.parent) {
                      Mat4.multiply(transform, this.parent.globalTransform, transform);
                    }
                  }

                  return this._transform;
                }
              }]);

              return BoneGlobalTransform;
            }(BoneTransform);

            var motionTransformCache = new Mat4();

            var RootMotionEvaluation = function () {
              function RootMotionEvaluation(_rootBone, _duration, _boneTransform, _trackEvalStatuses) {
                this._initialTransformCache = new Mat4();
                this._clipEndTransformCache = new Mat4();
                this._startTransformCache = new Mat4();
                this._endTransformCache = new Mat4();
                this._motionTransformCache = new Mat4();
                this._translationMotionCache = new Vec3();
                this._rotationMotionCache = new Quat();
                this._scaleMotionCache = new Vec3();
                this._rootBone = _rootBone;
                this._duration = _duration;
                this._boneTransform = _boneTransform;
                this._trackEvalStatuses = _trackEvalStatuses;
              }

              var _proto5 = RootMotionEvaluation.prototype;

              _proto5.evaluate = function evaluate(time, motionLength) {
                var motionTransform = this._calcMotionTransform(time, motionLength, this._motionTransformCache);

                var translationMotion = this._translationMotionCache,
                    rotationMotion = this._rotationMotionCache,
                    scaleMotion = this._scaleMotionCache,
                    rootBone = this._rootBone;
                Mat4.toRTS(motionTransform, rotationMotion, translationMotion, scaleMotion);
                Vec3.add(translationMotion, translationMotion, rootBone.position);
                rootBone.setPosition(translationMotion);
                Quat.multiply(rotationMotion, rotationMotion, rootBone.rotation);
                rootBone.setRotation(rotationMotion);
                Vec3.multiply(scaleMotion, scaleMotion, rootBone.scale);
                rootBone.setScale(scaleMotion);
              };

              _proto5._calcMotionTransform = function _calcMotionTransform(time, motionLength, outTransform) {
                var duration = this._duration;
                var remainLength = duration - time;
                assertIsTrue(remainLength >= 0);

                var startTransform = this._evaluateAt(time, this._startTransformCache);

                if (motionLength < remainLength) {
                  var endTransform = this._evaluateAt(time + motionLength, this._endTransformCache);

                  relativeTransform(outTransform, startTransform, endTransform);
                } else {
                  Mat4.identity(outTransform);

                  var accumulateMotionTransform = function accumulateMotionTransform(from, to) {
                    relativeTransform(motionTransformCache, from, to);
                    Mat4.multiply(outTransform, outTransform, motionTransformCache);
                  };

                  var diff = motionLength - remainLength;
                  var repeatCount = Math.floor(diff / duration);
                  var lastRemainTime = diff - repeatCount * duration;

                  var clipStartTransform = this._evaluateAt(0, this._initialTransformCache);

                  var clipEndTransform = this._evaluateAt(duration, this._clipEndTransformCache);

                  var _endTransform = this._evaluateAt(lastRemainTime, this._endTransformCache);

                  accumulateMotionTransform(startTransform, clipEndTransform);
                  relativeTransform(motionTransformCache, clipStartTransform, clipEndTransform);

                  for (var i = 0; i < repeatCount; ++i) {
                    Mat4.multiply(outTransform, outTransform, motionTransformCache);
                  }

                  accumulateMotionTransform(clipStartTransform, _endTransform);
                }

                return outTransform;
              };

              _proto5._evaluateAt = function _evaluateAt(time, outTransform) {
                var trackEvalStatuses = this._trackEvalStatuses;
                var nTrackEvalStatuses = trackEvalStatuses.length;

                for (var iTrackEvalStatus = 0; iTrackEvalStatus < nTrackEvalStatuses; ++iTrackEvalStatus) {
                  var _trackEvalStatuses$iT2 = trackEvalStatuses[iTrackEvalStatus],
                      trackEval = _trackEvalStatuses$iT2.trackEval,
                      binding = _trackEvalStatuses$iT2.binding;
                  var value = trackEval.evaluate(time, binding);
                  binding.setValue(value);
                }

                this._boneTransform.getTransform(outTransform);

                return outTransform;
              };

              return RootMotionEvaluation;
            }();

            function relativeTransform(out, from, to) {
              Mat4.invert(out, from);
              Mat4.multiply(out, to, out);
            }

            function createBoneTransformBinding(boneTransform, property) {
              switch (property) {
                default:
                  return undefined;

                case 'position':
                  return {
                    setValue: function setValue(value) {
                      Vec3.copy(boneTransform.position, value);
                    }
                  };

                case 'rotation':
                  return {
                    setValue: function setValue(value) {
                      Quat.copy(boneTransform.rotation, value);
                    }
                  };

                case 'scale':
                  return {
                    setValue: function setValue(value) {
                      Vec3.copy(boneTransform.scale, value);
                    }
                  };

                case 'eulerAngles':
                  return {
                    setValue: function setValue(value) {
                      Vec3.copy(boneTransform.eulerAngles, value);
                    }
                  };
              }
            }

            var InvalidIndex = -1;

            var EventEvaluator = function () {
              function EventEvaluator(_targetNode, _ratios, _eventGroups, _wrapMode) {
                this._lastFrameIndex = -1;
                this._lastIterations = 0.0;
                this._lastDirection = 0;
                this._ignoreIndex = InvalidIndex;
                this._sampled = false;
                this._targetNode = _targetNode;
                this._ratios = _ratios;
                this._eventGroups = _eventGroups;
                this._wrapMode = _wrapMode;
              }

              var _proto6 = EventEvaluator.prototype;

              _proto6.setWrapMode = function setWrapMode(wrapMode) {
                this._wrapMode = wrapMode;
              };

              _proto6.ignore = function ignore(ratio, direction) {
                this._ignoreIndex = InvalidIndex;
                this._sampled = false;
                var frameIndex = getEventGroupIndexAtRatio(ratio, this._ratios);

                if (frameIndex < 0) {
                  frameIndex = ~frameIndex - 1;

                  if (direction < 0) {
                    frameIndex += 1;
                  }

                  this._ignoreIndex = frameIndex;
                }
              };

              _proto6.sample = function sample(ratio, direction, iterations) {
                var length = this._eventGroups.length;
                var eventIndex = getEventGroupIndexAtRatio(ratio, this._ratios);

                if (eventIndex < 0) {
                  eventIndex = ~eventIndex - 1;

                  if (direction < 0) {
                    eventIndex += 1;
                  }
                }

                if (this._ignoreIndex !== eventIndex) {
                  this._ignoreIndex = InvalidIndex;
                }

                if (!this._sampled) {
                  this._sampled = true;

                  this._doFire(eventIndex, false);

                  this._lastFrameIndex = eventIndex;
                  this._lastIterations = iterations;
                  this._lastDirection = direction;
                  return;
                }

                var wrapMode = this._wrapMode;
                var currentIterations = wrapIterations(iterations);
                var lastIterations = wrapIterations(this._lastIterations);
                var lastIndex = this._lastFrameIndex;
                var lastDirection = this._lastDirection;
                var iterationsChanged = lastIterations !== -1 && currentIterations !== lastIterations;

                if (lastIndex === eventIndex && iterationsChanged && length === 1) {
                  this._doFire(0, false);
                } else if (lastIndex !== eventIndex || iterationsChanged) {
                  direction = lastDirection;

                  do {
                    if (lastIndex !== eventIndex) {
                      if (direction === -1 && lastIndex === 0 && eventIndex > 0) {
                        if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                          direction *= -1;
                        } else {
                          lastIndex = length;
                        }

                        lastIterations++;
                      } else if (direction === 1 && lastIndex === length - 1 && eventIndex < length - 1) {
                        if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                          direction *= -1;
                        } else {
                          lastIndex = -1;
                        }

                        lastIterations++;
                      }

                      if (lastIndex === eventIndex) {
                        break;
                      }

                      if (lastIterations > currentIterations) {
                        break;
                      }
                    }

                    lastIndex += direction;

                    this._doFire(lastIndex, true);
                  } while (lastIndex !== eventIndex && lastIndex > -1 && lastIndex < length);
                }

                this._lastFrameIndex = eventIndex;
                this._lastIterations = iterations;
                this._lastDirection = direction;
              };

              _proto6._doFire = function _doFire(eventIndex, delay) {
                if (delay) {
                  getGlobalAnimationManager().pushDelayEvent(this._checkAndFire, this, [eventIndex]);
                } else {
                  this._checkAndFire(eventIndex);
                }
              };

              _proto6._checkAndFire = function _checkAndFire(eventIndex) {
                if (!this._targetNode || !this._targetNode.isValid) {
                  return;
                }

                var eventGroups = this._eventGroups;

                if (eventIndex < 0 || eventIndex >= eventGroups.length || this._ignoreIndex === eventIndex) {
                  return;
                }

                var eventGroup = eventGroups[eventIndex];
                var components = this._targetNode.components;
                var nEvents = eventGroup.events.length;

                for (var iEvent = 0; iEvent < nEvents; ++iEvent) {
                  var event = eventGroup.events[iEvent];
                  var functionName = event.functionName;
                  var nComponents = components.length;

                  for (var iComponent = 0; iComponent < nComponents; ++iComponent) {
                    var component = components[iComponent];
                    var fx = component[functionName];

                    if (typeof fx === 'function') {
                      fx.apply(component, event.parameters);
                    }
                  }
                }
              };

              return EventEvaluator;
            }();

            function wrapIterations(iterations) {
              if (iterations - (iterations | 0) === 0) {
                iterations -= 1;
              }

              return iterations | 0;
            }

            function getEventGroupIndexAtRatio(ratio, ratios) {
              var result = binarySearchEpsilon(ratios, ratio);
              return result;
            }

            var Playable = function () {
              function Playable() {
                this._isPlaying = false;
                this._isPaused = false;
                this._stepOnce = false;
              }

              var _proto = Playable.prototype;

              _proto.play = function play() {
                if (this._isPlaying) {
                  if (this._isPaused) {
                    this._isPaused = false;
                    this.onResume();
                  } else {
                    this.onError(getError(3912));
                  }
                } else {
                  this._isPlaying = true;
                  this.onPlay();
                }
              };

              _proto.stop = function stop() {
                if (this._isPlaying) {
                  this._isPlaying = false;
                  this.onStop();
                  this._isPaused = false;
                }
              };

              _proto.pause = function pause() {
                if (this._isPlaying && !this._isPaused) {
                  this._isPaused = true;
                  this.onPause();
                }
              };

              _proto.resume = function resume() {
                if (this._isPlaying && this._isPaused) {
                  this._isPaused = false;
                  this.onResume();
                }
              };

              _proto.step = function step() {
                this.pause();
                this._stepOnce = true;

                if (!this._isPlaying) {
                  this.play();
                }
              };

              _proto.update = function update(deltaTime) {};

              _proto.onPlay = function onPlay() {};

              _proto.onPause = function onPause() {};

              _proto.onResume = function onResume() {};

              _proto.onStop = function onStop() {};

              _proto.onError = function onError(message) {};

              _createClass(Playable, [{
                key: "isPlaying",
                get: function get() {
                  return this._isPlaying;
                }
              }, {
                key: "isPaused",
                get: function get() {
                  return this._isPaused;
                }
              }, {
                key: "isMotionless",
                get: function get() {
                  return !this.isPlaying || this.isPaused;
                }
              }]);

              return Playable;
            }();

            var PoseOutput = function () {
              function PoseOutput(pose) {
                this.weight = 0.0;
                this._pose = void 0;
                this._blendStateWriters = [];
                this._pose = pose;
              }

              var _proto = PoseOutput.prototype;

              _proto.destroy = function destroy() {
                for (var iBlendStateWriter = 0; iBlendStateWriter < this._blendStateWriters.length; ++iBlendStateWriter) {
                  this._pose.destroyWriter(this._blendStateWriters[iBlendStateWriter]);
                }

                this._blendStateWriters.length = 0;
              };

              _proto.createPoseWriter = function createPoseWriter(node, property, constants) {
                var writer = this._pose.createWriter(node, property, this, constants);

                this._blendStateWriters.push(writer);

                return writer;
              };

              return PoseOutput;
            }();

            var EventType$1;

            (function (EventType) {
              EventType["PLAY"] = "play";
              EventType["STOP"] = "stop";
              EventType["PAUSE"] = "pause";
              EventType["RESUME"] = "resume";
              EventType["LASTFRAME"] = "lastframe";
              EventType["FINISHED"] = "finished";
            })(EventType$1 || (EventType$1 = {}));

            ccenum(EventType$1);
            var AnimationState = exports('AnimationState', function (_Playable) {
              _inheritsLoose(AnimationState, _Playable);

              function AnimationState(clip, name) {
                var _this;

                if (name === void 0) {
                  name = '';
                }

                _this = _Playable.call(this) || this;
                _this.duration = 1.0;
                _this.speed = 1.0;
                _this.time = 0.0;
                _this.frameRate = 0;
                _this._targetNode = null;
                _this._curveLoaded = false;
                _this._clip = void 0;
                _this._useSimpleProcess = false;
                _this._target = null;
                _this._wrapMode = WrapMode$1.Normal;
                _this._repeatCount = 1;
                _this._delay = 0.0;
                _this._delayTime = 0.0;
                _this._currentFramePlayed = false;
                _this._name = void 0;
                _this._lastIterations = NaN;
                _this._lastWrapInfo = null;
                _this._wrappedInfo = new WrappedInfo();
                _this._allowLastFrame = false;
                _this._blendStateWriterHost = {
                  weight: 0.0
                };
                _this._playbackDuration = 0.0;
                _this._invDuration = 1.0;
                _this._poseOutput = null;
                _this._weight = 1.0;
                _this._clipEval = void 0;
                _this._clipEventEval = void 0;
                _this._doNotCreateEval = false;
                _this._clip = clip;
                _this._name = name || clip && clip.name;
                _this._playbackRange = {
                  min: 0.0,
                  max: clip.duration
                };
                _this._playbackDuration = clip.duration;

                if (!clip.duration) {
                  debug("Clip " + clip.name + " has zero duration.");
                }

                return _this;
              }

              var _proto = AnimationState.prototype;

              _proto.initialize = function initialize(root, blendStateBuffer, mask) {
                if (this._curveLoaded) {
                  return;
                }

                this._curveLoaded = true;

                if (this._poseOutput) {
                  this._poseOutput.destroy();

                  this._poseOutput = null;
                }

                if (this._clipEval) {
                  this._clipEval = undefined;
                }

                this._targetNode = root;
                var clip = this._clip;
                this.duration = clip.duration;
                this._invDuration = 1.0 / this.duration;
                this.speed = clip.speed;
                this.wrapMode = clip.wrapMode;
                this.frameRate = clip.sample;
                this._playbackRange.min = 0.0;
                this._playbackRange.max = clip.duration;
                this._playbackDuration = clip.duration;

                if ((this.wrapMode & WrapModeMask.Loop) === WrapModeMask.Loop) {
                  this.repeatCount = Infinity;
                } else {
                  this.repeatCount = 1;
                }

                if (!this._doNotCreateEval) {
                  var _ref, _getGlobalAnimationMa, _this$_poseOutput;

                  var pose = (_ref = blendStateBuffer !== null && blendStateBuffer !== void 0 ? blendStateBuffer : (_getGlobalAnimationMa = getGlobalAnimationManager()) === null || _getGlobalAnimationMa === void 0 ? void 0 : _getGlobalAnimationMa.blendState) !== null && _ref !== void 0 ? _ref : null;

                  if (pose) {
                    this._poseOutput = new PoseOutput(pose);
                  }

                  this._clipEval = clip.createEvaluator({
                    target: root,
                    pose: (_this$_poseOutput = this._poseOutput) !== null && _this$_poseOutput !== void 0 ? _this$_poseOutput : undefined,
                    mask: mask
                  });
                }

                {
                  this._clipEventEval = clip.createEventEvaluator(this._targetNode);
                }
              };

              _proto.destroy = function destroy() {
                if (!this.isMotionless) {
                  getGlobalAnimationManager().removeAnimation(this);
                }

                if (this._poseOutput) {
                  this._poseOutput.destroy();

                  this._poseOutput = null;
                }

                this._clipEval = undefined;
              };

              _proto.emit = function emit() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                getGlobalAnimationManager().pushDelayEvent(this._emit, this, args);
              };

              _proto.on = function on(type, callback, target) {
                if (this._target && this._target.isValid) {
                  return this._target.on(type, callback, target);
                } else {
                  return null;
                }
              };

              _proto.once = function once(type, callback, target) {
                if (this._target && this._target.isValid) {
                  return this._target.once(type, callback, target);
                } else {
                  return null;
                }
              };

              _proto.off = function off(type, callback, target) {
                if (this._target && this._target.isValid) {
                  this._target.off(type, callback, target);
                }
              };

              _proto.allowLastFrameEvent = function allowLastFrameEvent(allowed) {
                this._allowLastFrame = allowed;
              };

              _proto._setEventTarget = function _setEventTarget(target) {
                this._target = target;
              };

              _proto.setTime = function setTime(time) {
                this._currentFramePlayed = false;
                this.time = time || 0.0;

                {
                  var _this$_clipEventEval;

                  var info = this.getWrappedInfo(time, this._wrappedInfo);
                  (_this$_clipEventEval = this._clipEventEval) === null || _this$_clipEventEval === void 0 ? void 0 : _this$_clipEventEval.ignore(info.ratio, info.direction);
                }
              };

              _proto.update = function update(delta) {
                if (this._delayTime > 0.0) {
                  this._delayTime -= delta;

                  if (this._delayTime > 0.0) {
                    return;
                  }
                }

                if (this._currentFramePlayed) {
                  this.time += delta * this.speed;
                } else {
                  this._currentFramePlayed = true;
                }

                this._process();
              };

              _proto.sample = function sample() {
                var info = this.getWrappedInfo(this.time, this._wrappedInfo);

                this._sampleCurves(info.time);

                {
                  this._sampleEvents(info);
                }

                return info;
              };

              _proto.onPlay = function onPlay() {
                this.setTime(this._getPlaybackStart());
                this._delayTime = this._delay;

                this._onReplayOrResume();

                this.emit(EventType$1.PLAY, this);
              };

              _proto.onStop = function onStop() {
                if (!this.isPaused) {
                  this._onPauseOrStop();
                }

                this.emit(EventType$1.STOP, this);
              };

              _proto.onResume = function onResume() {
                this._onReplayOrResume();

                this.emit(EventType$1.RESUME, this);
              };

              _proto.onPause = function onPause() {
                this._onPauseOrStop();

                this.emit(EventType$1.PAUSE, this);
              };

              _proto._sampleCurves = function _sampleCurves(time) {
                var poseOutput = this._poseOutput,
                    clipEval = this._clipEval;

                if (poseOutput) {
                  poseOutput.weight = this.weight;
                }

                if (clipEval) {
                  clipEval.evaluate(time);
                }
              };

              _proto._process = function _process() {
                if (this._useSimpleProcess) {
                  this.simpleProcess();
                } else {
                  this.process();
                }
              };

              _proto.process = function process() {
                var info = this.sample();

                if (this._allowLastFrame) {
                  var lastInfo;

                  if (!this._lastWrapInfo) {
                    lastInfo = this._lastWrapInfo = new WrappedInfo(info);
                  } else {
                    lastInfo = this._lastWrapInfo;
                  }

                  if (this.repeatCount > 1 && (info.iterations | 0) > (lastInfo.iterations | 0)) {
                    this.emit(EventType$1.LASTFRAME, this);
                  }

                  lastInfo.set(info);
                }

                if (info.stopped) {
                  this.stop();
                  this.emit(EventType$1.FINISHED, this);
                }
              };

              _proto.simpleProcess = function simpleProcess() {
                var playbackStart = this._playbackRange.min;
                var playbackDuration = this._playbackDuration;
                var time = this.time % playbackDuration;

                if (time < 0.0) {
                  time += playbackDuration;
                }

                var realTime = playbackStart + time;
                var ratio = realTime * this._invDuration;

                this._sampleCurves(playbackStart + time);

                {
                  this._sampleEvents(this.getWrappedInfo(this.time, this._wrappedInfo));
                }

                if (this._allowLastFrame) {
                  if (Number.isNaN(this._lastIterations)) {
                    this._lastIterations = ratio;
                  }

                  if (this.time > 0 && this._lastIterations > ratio || this.time < 0 && this._lastIterations < ratio) {
                    this.emit(EventType$1.LASTFRAME, this);
                  }

                  this._lastIterations = ratio;
                }
              };

              _proto._needReverse = function _needReverse(currentIterations) {
                var wrapMode = this.wrapMode;
                var needReverse = false;

                if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                  var isEnd = currentIterations - (currentIterations | 0) === 0;

                  if (isEnd && currentIterations > 0) {
                    currentIterations -= 1;
                  }

                  var isOddIteration = currentIterations & 1;

                  if (isOddIteration) {
                    needReverse = !needReverse;
                  }
                }

                if ((wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse) {
                  needReverse = !needReverse;
                }

                return needReverse;
              };

              _proto.getWrappedInfo = function getWrappedInfo(time, info) {
                info = info || new WrappedInfo();

                var playbackStart = this._getPlaybackStart();

                var playbackEnd = this._getPlaybackEnd();

                var playbackDuration = playbackEnd - playbackStart;
                var stopped = false;
                var repeatCount = this.repeatCount;
                time -= playbackStart;
                var currentIterations = time > 0 ? time / playbackDuration : -(time / playbackDuration);

                if (currentIterations >= repeatCount) {
                  currentIterations = repeatCount;
                  stopped = true;
                  var tempRatio = repeatCount - (repeatCount | 0);

                  if (tempRatio === 0) {
                    tempRatio = 1;
                  }

                  time = tempRatio * playbackDuration * (time > 0 ? 1 : -1);
                }

                if (time > playbackDuration) {
                  var tempTime = time % playbackDuration;
                  time = tempTime === 0 ? playbackDuration : tempTime;
                } else if (time < 0) {
                  time %= playbackDuration;

                  if (time !== 0) {
                    time += playbackDuration;
                  }
                }

                var needReverse = false;
                var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;

                if (shouldWrap) {
                  needReverse = this._needReverse(currentIterations);
                }

                var direction = needReverse ? -1 : 1;

                if (this.speed < 0) {
                  direction *= -1;
                }

                if (shouldWrap && needReverse) {
                  time = playbackDuration - time;
                }

                info.time = playbackStart + time;
                info.ratio = info.time / this.duration;
                info.direction = direction;
                info.stopped = stopped;
                info.iterations = currentIterations;
                return info;
              };

              _proto._getPlaybackStart = function _getPlaybackStart() {
                return this._playbackRange.min;
              };

              _proto._getPlaybackEnd = function _getPlaybackEnd() {
                return this._playbackRange.max;
              };

              _proto._sampleEvents = function _sampleEvents(wrapInfo) {
                var _this$_clipEventEval2;

                (_this$_clipEventEval2 = this._clipEventEval) === null || _this$_clipEventEval2 === void 0 ? void 0 : _this$_clipEventEval2.sample(wrapInfo.ratio, wrapInfo.direction, wrapInfo.iterations);
              };

              _proto._emit = function _emit(type, state) {
                if (this._target && this._target.isValid) {
                  this._target.emit(type, type, state);
                }
              };

              _proto._onReplayOrResume = function _onReplayOrResume() {
                getGlobalAnimationManager().addAnimation(this);
              };

              _proto._onPauseOrStop = function _onPauseOrStop() {
                getGlobalAnimationManager().removeAnimation(this);
              };

              _createClass(AnimationState, [{
                key: "clip",
                get: function get() {
                  return this._clip;
                }
              }, {
                key: "name",
                get: function get() {
                  return this._name;
                }
              }, {
                key: "length",
                get: function get() {
                  return this.duration;
                }
              }, {
                key: "wrapMode",
                get: function get() {
                  return this._wrapMode;
                },
                set: function set(value) {
                  var _this$_clipEventEval3;

                  this._wrapMode = value;
                  this.time = 0;

                  if (value & WrapModeMask.Loop) {
                    this.repeatCount = Infinity;
                  } else {
                    this.repeatCount = 1;
                  }

                  (_this$_clipEventEval3 = this._clipEventEval) === null || _this$_clipEventEval3 === void 0 ? void 0 : _this$_clipEventEval3.setWrapMode(value);
                }
              }, {
                key: "repeatCount",
                get: function get() {
                  return this._repeatCount;
                },
                set: function set(value) {
                  this._repeatCount = value;
                  var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
                  var reverse = (this.wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse;

                  if (value === Infinity && !shouldWrap && !reverse) {
                    this._useSimpleProcess = true;
                  } else {
                    this._useSimpleProcess = false;
                  }
                }
              }, {
                key: "delay",
                get: function get() {
                  return this._delay;
                },
                set: function set(value) {
                  this._delayTime = this._delay = value;
                }
              }, {
                key: "playbackRange",
                get: function get() {
                  return this._playbackRange;
                },
                set: function set(value) {
                  assertIsTrue(value.max > value.min);
                  this._playbackRange.min = Math.max(value.min, 0);
                  this._playbackRange.max = Math.min(value.max, this.duration);
                  this._playbackDuration = this._playbackRange.max - this._playbackRange.min;
                  this.setTime(0.0);
                }
              }, {
                key: "current",
                get: function get() {
                  return this.getWrappedInfo(this.time).time;
                }
              }, {
                key: "ratio",
                get: function get() {
                  return this.current / this.duration;
                }
              }, {
                key: "weight",
                get: function get() {
                  return this._weight;
                },
                set: function set(value) {
                  this._weight = value;

                  if (this._poseOutput) {
                    this._poseOutput.weight = value;
                  }
                }
              }, {
                key: "curveLoaded",
                get: function get() {
                  return this._curveLoaded;
                }
              }]);

              return AnimationState;
            }(Playable));
            legacyCC.AnimationState = AnimationState;

            var graphDebug =  EMPTY;
            var graphDebugGroup =  EMPTY;

            function EMPTY() {}
            function pushWeight(name, weight) {
            }

            var _dec$I, _dec2$v, _class$I, _class2$A, _descriptor$y, _temp$C;
            var ClipMotion = (_dec$I = ccclass('cc.animation.ClipMotion'), _dec2$v = type$1(AnimationClip), _dec$I(_class$I = (_class2$A = (_temp$C = function (_EditorExtendable) {
              _inheritsLoose(ClipMotion, _EditorExtendable);

              function ClipMotion() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _EditorExtendable.call.apply(_EditorExtendable, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "clip", _descriptor$y, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = ClipMotion.prototype;

              _proto[createEval] = function (context) {
                if (!this.clip) {
                  return null;
                }

                var clipMotionEval = new ClipMotionEval(context, this.clip);

                return clipMotionEval;
              };

              _proto.clone = function clone() {
                var that = new ClipMotion();
                that.clip = this.clip;
                return that;
              };

              return ClipMotion;
            }(EditorExtendable), _temp$C), (_descriptor$y = _applyDecoratedDescriptor(_class2$A.prototype, "clip", [_dec2$v], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$A)) || _class$I);

            var ClipMotionEval = function () {
              function ClipMotionEval(context, clip) {
                this.duration = clip.duration / clip.speed;
                this._state = new AnimationState(clip);

                this._state.initialize(context.node, context.blendBuffer, context.mask);
              }

              var _proto2 = ClipMotionEval.prototype;

              _proto2.getClipStatuses = function getClipStatuses(baseWeight) {
                var _this2 = this;

                var got = false;
                return {
                  next: function next() {
                    if (got) {
                      return {
                        done: true,
                        value: undefined
                      };
                    } else {
                      got = true;
                      return {
                        done: false,
                        value: {
                          __DEBUG_ID__: _this2.__DEBUG__ID__,
                          clip: _this2._state.clip,
                          weight: baseWeight
                        }
                      };
                    }
                  }
                };
              };

              _proto2.sample = function sample(progress, weight) {
                if (weight === 0.0) {
                  return;
                }

                pushWeight(this._state.name);
                var time = this._state.duration * progress;
                this._state.time = time;
                this._state.weight = weight;

                this._state.sample();

                this._state.weight = 0.0;
              };

              _createClass(ClipMotionEval, [{
                key: "progress",
                get: function get() {
                  return this._state.time / this.duration;
                }
              }]);

              return ClipMotionEval;
            }();

            var _dec$J, _class$J, _class2$B, _descriptor$z, _descriptor2$t, _temp$D, _dec2$w, _class4$b, _class5$b, _descriptor3$l, _descriptor4$j, _temp2$b;
            var BindableNumber = (_dec$J = ccclass(CLASS_NAME_PREFIX_ANIM + "BindableNumber"), _dec$J(_class$J = (_class2$B = (_temp$D = function () {
              function BindableNumber(value) {
                if (value === void 0) {
                  value = 0.0;
                }

                _initializerDefineProperty(this, "variable", _descriptor$z, this);

                _initializerDefineProperty(this, "value", _descriptor2$t, this);

                this.value = value;
              }

              var _proto = BindableNumber.prototype;

              _proto.clone = function clone() {
                var that = new BindableNumber();
                that.value = this.value;
                that.variable = this.variable;
                return that;
              };

              return BindableNumber;
            }(), _temp$D), (_descriptor$z = _applyDecoratedDescriptor(_class2$B.prototype, "variable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor2$t = _applyDecoratedDescriptor(_class2$B.prototype, "value", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.0;
              }
            })), _class2$B)) || _class$J);
            var BindableBoolean = (_dec2$w = ccclass(CLASS_NAME_PREFIX_ANIM + "BindableBoolean"), _dec2$w(_class4$b = (_class5$b = (_temp2$b = function () {
              function BindableBoolean(value) {
                if (value === void 0) {
                  value = false;
                }

                _initializerDefineProperty(this, "variable", _descriptor3$l, this);

                _initializerDefineProperty(this, "value", _descriptor4$j, this);

                this.value = value;
              }

              var _proto2 = BindableBoolean.prototype;

              _proto2.clone = function clone() {
                var that = new BindableBoolean();
                that.value = this.value;
                that.variable = this.variable;
                return that;
              };

              return BindableBoolean;
            }(), _temp2$b), (_descriptor3$l = _applyDecoratedDescriptor(_class5$b.prototype, "variable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor4$j = _applyDecoratedDescriptor(_class5$b.prototype, "value", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            })), _class5$b)) || _class4$b);
            function bindOr(context, bindable, type, callback, thisArg) {
              var variable = bindable.variable,
                  value = bindable.value;

              if (!variable) {
                return value;
              }

              var varInstance = context.getVar(variable);

              if (!validateVariableExistence(varInstance, variable)) {
                return value;
              }

              if (varInstance.type !== type) {
                throw new VariableTypeMismatchedError(variable, 'number');
              }

              for (var _len = arguments.length, args = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
                args[_key - 5] = arguments[_key];
              }

              var initialValue = varInstance.bind.apply(varInstance, [callback, thisArg].concat(args));
              return initialValue;
            }
            function bindNumericOr(context, bindable, type, callback, thisArg) {
              var variable = bindable.variable,
                  value = bindable.value;

              if (!variable) {
                return value;
              }

              var varInstance = context.getVar(variable);

              if (!validateVariableExistence(varInstance, variable)) {
                return value;
              }

              if (type !== VariableType.FLOAT && type !== VariableType.INTEGER) {
                throw new VariableTypeMismatchedError(variable, 'number or integer');
              }

              for (var _len2 = arguments.length, args = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
                args[_key2 - 5] = arguments[_key2];
              }

              var initialValue = varInstance.bind.apply(varInstance, [callback, thisArg].concat(args));
              return initialValue;
            }
            function validateVariableExistence(varInstance, name) {
              if (!varInstance) {
                throw new VariableNotDefinedError(name);
              } else {
                return true;
              }
            }
            function validateVariableType(type, expected, name) {
              if (type !== expected) {
                throw new VariableTypeMismatchedError(name, 'number');
              }
            }
            function validateVariableTypeTriggerLike(type, name) {
              if (type !== VariableType.TRIGGER) {
                throw new VariableTypeMismatchedError(name, 'trigger');
              }
            }

            var _dec$K, _class$K, _class2$C, _descriptor$A, _temp$E, _dec2$x, _class4$c, _class5$c, _descriptor2$u, _temp2$c;
            var AnimationBlendItem = (_dec$K = ccclass(CLASS_NAME_PREFIX_ANIM + "AnimationBlendItem"), _dec$K(_class$K = (_class2$C = (_temp$E = function () {
              function AnimationBlendItem() {
                _initializerDefineProperty(this, "motion", _descriptor$A, this);
              }

              var _proto = AnimationBlendItem.prototype;

              _proto.clone = function clone() {
                var that = new AnimationBlendItem();

                this._assign(that);

                return that;
              };

              _proto._assign = function _assign(that) {
                var _this$motion$clone, _this$motion;

                that.motion = (_this$motion$clone = (_this$motion = this.motion) === null || _this$motion === void 0 ? void 0 : _this$motion.clone()) !== null && _this$motion$clone !== void 0 ? _this$motion$clone : null;
                return that;
              };

              return AnimationBlendItem;
            }(), _temp$E), (_descriptor$A = _applyDecoratedDescriptor(_class2$C.prototype, "motion", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$C)) || _class$K);
            var AnimationBlend = (_dec2$x = ccclass(CLASS_NAME_PREFIX_ANIM + "AnimationBlend"), _dec2$x(_class4$c = (_class5$c = (_temp2$c = function (_EditorExtendable) {
              _inheritsLoose(AnimationBlend, _EditorExtendable);

              function AnimationBlend() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _EditorExtendable.call.apply(_EditorExtendable, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "name", _descriptor2$u, _assertThisInitialized(_this));

                return _this;
              }

              return AnimationBlend;
            }(EditorExtendable), _temp2$c), (_descriptor2$u = _applyDecoratedDescriptor(_class5$c.prototype, "name", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            })), _class5$c)) || _class4$c);
            var AnimationBlendEval = function () {
              function AnimationBlendEval(context, base, children, inputs) {
                this._childEvaluators = children.map(function (child) {
                  var _child$motion$createE, _child$motion;

                  return (_child$motion$createE = (_child$motion = child.motion) === null || _child$motion === void 0 ? void 0 : _child$motion[createEval](context)) !== null && _child$motion$createE !== void 0 ? _child$motion$createE : null;
                });
                this._weights = new Array(this._childEvaluators.length).fill(0);
                this._inputs = [].concat(inputs);
              }

              var _proto2 = AnimationBlendEval.prototype;

              _proto2.getChildWeight = function getChildWeight(childIndex) {
                return this._weights[childIndex];
              };

              _proto2.getChildMotionEval = function getChildMotionEval(childIndex) {
                return this._childEvaluators[childIndex];
              };

              _proto2.getClipStatuses = function getClipStatuses(baseWeight) {
                var children = this._childEvaluators,
                    weights = this._weights;
                var nChildren = children.length;
                var iChild = 0;
                var currentChildIterator;
                return {
                  next: function next() {
                    while (true) {
                      if (currentChildIterator) {
                        var result = currentChildIterator.next();

                        if (!result.done) {
                          return result;
                        }
                      }

                      if (iChild >= nChildren) {
                        return {
                          done: true,
                          value: undefined
                        };
                      } else {
                        var child = children[iChild];
                        currentChildIterator = child === null || child === void 0 ? void 0 : child.getClipStatuses(baseWeight * weights[iChild]);
                        ++iChild;
                      }
                    }
                  }
                };
              };

              _proto2.sample = function sample(progress, weight) {
                for (var iChild = 0; iChild < this._childEvaluators.length; ++iChild) {
                  var _this$_childEvaluator;

                  (_this$_childEvaluator = this._childEvaluators[iChild]) === null || _this$_childEvaluator === void 0 ? void 0 : _this$_childEvaluator.sample(progress, weight * this._weights[iChild]);
                }
              };

              _proto2.setInput = function setInput(value, index) {
                this._inputs[index] = value;
                this.doEval();
              };

              _proto2.doEval = function doEval() {
                this.eval(this._weights, this._inputs);
              };

              _proto2.eval = function _eval(_weights, _inputs) {};

              _createClass(AnimationBlendEval, [{
                key: "childCount",
                get: function get() {
                  return this._weights.length;
                }
              }, {
                key: "duration",
                get: function get() {
                  var uniformDuration = 0.0;

                  for (var iChild = 0; iChild < this._childEvaluators.length; ++iChild) {
                    var _this$_childEvaluator2, _this$_childEvaluator3;

                    uniformDuration += ((_this$_childEvaluator2 = (_this$_childEvaluator3 = this._childEvaluators[iChild]) === null || _this$_childEvaluator3 === void 0 ? void 0 : _this$_childEvaluator3.duration) !== null && _this$_childEvaluator2 !== void 0 ? _this$_childEvaluator2 : 0.0) * this._weights[iChild];
                  }

                  return uniformDuration;
                }
              }]);

              return AnimationBlendEval;
            }();

            function blend1D(weights, thresholds, value) {
              weights.fill(0.0);

              if (thresholds.length === 0) ; else if (value <= thresholds[0]) {
                weights[0] = 1;
              } else if (value >= thresholds[thresholds.length - 1]) {
                weights[weights.length - 1] = 1;
              } else {
                var iUpper = 0;

                for (var iThresholds = 1; iThresholds < thresholds.length; ++iThresholds) {
                  if (thresholds[iThresholds] > value) {
                    iUpper = iThresholds;
                    break;
                  }
                }

                var lower = thresholds[iUpper - 1];
                var upper = thresholds[iUpper];
                var dVal = upper - lower;
                weights[iUpper - 1] = (upper - value) / dVal;
                weights[iUpper] = (value - lower) / dVal;
              }
            }

            var _dec$L, _class$L, _class2$D, _descriptor$B, _temp$F, _dec2$y, _class4$d, _class5$d, _descriptor2$v, _descriptor3$m, _class6$2, _temp2$d;
            var AnimationBlend1DItem = (_dec$L = ccclass(CLASS_NAME_PREFIX_ANIM + "AnimationBlend1DItem"), _dec$L(_class$L = (_class2$D = (_temp$F = function (_AnimationBlendItem) {
              _inheritsLoose(AnimationBlend1DItem, _AnimationBlendItem);

              function AnimationBlend1DItem() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _AnimationBlendItem.call.apply(_AnimationBlendItem, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "threshold", _descriptor$B, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = AnimationBlend1DItem.prototype;

              _proto.clone = function clone() {
                var that = new AnimationBlend1DItem();

                this._assign(that);

                return that;
              };

              _proto._assign = function _assign(that) {
                _AnimationBlendItem.prototype._assign.call(this, that);

                that.threshold = this.threshold;
                return that;
              };

              return AnimationBlend1DItem;
            }(AnimationBlendItem), _temp$F), (_descriptor$B = _applyDecoratedDescriptor(_class2$D.prototype, "threshold", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.0;
              }
            })), _class2$D)) || _class$L);
            var AnimationBlend1D = (_dec2$y = ccclass('cc.animation.AnimationBlend1D'), _dec2$y(_class4$d = (_class5$d = (_temp2$d = _class6$2 = function (_AnimationBlend) {
              _inheritsLoose(AnimationBlend1D, _AnimationBlend);

              function AnimationBlend1D() {
                var _this2;

                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                _this2 = _AnimationBlend.call.apply(_AnimationBlend, [this].concat(args)) || this;

                _initializerDefineProperty(_this2, "_items", _descriptor2$v, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "param", _descriptor3$m, _assertThisInitialized(_this2));

                return _this2;
              }

              var _proto2 = AnimationBlend1D.prototype;

              _proto2.clone = function clone() {
                var that = new AnimationBlend1D();
                that._items = this._items.map(function (item) {
                  return item.clone();
                });
                that.param = this.param.clone();
                return that;
              };

              _proto2[createEval] = function (context) {
                var evaluation = new AnimationBlend1DEval(context, this, this._items, this._items.map(function (_ref) {
                  var threshold = _ref.threshold;
                  return threshold;
                }), 0.0);
                var initialValue = bindOr(context, this.param, VariableType.FLOAT, evaluation.setInput, evaluation, 0);
                evaluation.setInput(initialValue, 0);
                return evaluation;
              };

              _createClass(AnimationBlend1D, [{
                key: "items",
                get: function get() {
                  return this._items;
                },
                set: function set(value) {
                  this._items = Array.from(value).sort(function (_ref2, _ref3) {
                    var lhs = _ref2.threshold;
                    var rhs = _ref3.threshold;
                    return lhs - rhs;
                  });
                }
              }]);

              return AnimationBlend1D;
            }(AnimationBlend), _class6$2.Item = AnimationBlend1DItem, _temp2$d), (_descriptor2$v = _applyDecoratedDescriptor(_class5$d.prototype, "_items", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor3$m = _applyDecoratedDescriptor(_class5$d.prototype, "param", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new BindableNumber();
              }
            })), _class5$d)) || _class4$d);

            var AnimationBlend1DEval = function (_AnimationBlendEval) {
              _inheritsLoose(AnimationBlend1DEval, _AnimationBlendEval);

              function AnimationBlend1DEval(context, base, items, thresholds, input) {
                var _this3;

                _this3 = _AnimationBlendEval.call(this, context, base, items, [input]) || this;
                _this3._thresholds = thresholds;

                _this3.doEval();

                return _this3;
              }

              var _proto3 = AnimationBlend1DEval.prototype;

              _proto3.eval = function _eval(weights, _ref4) {
                var value = _ref4[0];
                blend1D(weights, this._thresholds, value);
              };

              return AnimationBlend1DEval;
            }(AnimationBlendEval);

            var blendSimpleDirectional = function () {
              var CACHE_NORMALIZED_SAMPLE = new Vec2();
              var CACHE_BARYCENTRIC_SOLUTIONS = {
                wA: 0,
                wB: 0
              };
              return function blendSimpleDirectional(weights, samples, input) {
                assertIsTrue(weights.length === samples.length);

                if (samples.length === 0) {
                  return;
                }

                if (samples.length === 1) {
                  weights[0] = 1.0;
                  return;
                }

                if (Vec2.strictEquals(input, Vec2.ZERO)) {
                  var _iCenter = samples.findIndex(function (sample) {
                    return Vec2.strictEquals(sample, Vec2.ZERO);
                  });

                  if (_iCenter >= 0) {
                    weights[_iCenter] = 1.0;
                  } else {
                    weights.fill(1.0 / samples.length);
                  }

                  return;
                }

                var iSectorStart = -1;
                var iSectorEnd = -1;
                var iCenter = -1;
                var lhsCosAngle = Number.NEGATIVE_INFINITY;
                var rhsCosAngle = Number.NEGATIVE_INFINITY;
                var inputX = input.x,
                    inputY = input.y;

                for (var iSample = 0; iSample < samples.length; ++iSample) {
                  var sample = samples[iSample];

                  if (Vec2.equals(sample, Vec2.ZERO)) {
                    iCenter = iSample;
                    continue;
                  }

                  var sampleNormalized = Vec2.normalize(CACHE_NORMALIZED_SAMPLE, sample);
                  var cosAngle = Vec2.dot(sampleNormalized, input);
                  var sign = sampleNormalized.x * inputY - sampleNormalized.y * inputX;

                  if (sign > 0) {
                    if (cosAngle >= rhsCosAngle) {
                      rhsCosAngle = cosAngle;
                      iSectorStart = iSample;
                    }
                  } else if (cosAngle >= lhsCosAngle) {
                    lhsCosAngle = cosAngle;
                    iSectorEnd = iSample;
                  }
                }

                var centerWeight = 0.0;

                if (iSectorStart < 0 || iSectorEnd < 0) {
                  centerWeight = 1.0;
                } else {
                  var _solveBarycentric = solveBarycentric(samples[iSectorStart], samples[iSectorEnd], input, CACHE_BARYCENTRIC_SOLUTIONS),
                      wA = _solveBarycentric.wA,
                      wB = _solveBarycentric.wB;

                  var w1 = 0.0;
                  var w2 = 0.0;
                  var sum = wA + wB;

                  if (sum > 1) {
                    w1 = wA / sum;
                    w2 = wB / sum;
                  } else if (sum < 0) {
                    w1 = 0.0;
                    w2 = 0.0;
                    centerWeight = 1.0;
                  } else {
                    w1 = wA;
                    w2 = wB;
                    centerWeight = 1.0 - sum;
                  }

                  weights[iSectorStart] = w1;
                  weights[iSectorEnd] = w2;
                }

                if (centerWeight > 0.0) {
                  if (iCenter >= 0) {
                    weights[iCenter] = centerWeight;
                  } else {
                    var average = centerWeight / weights.length;

                    for (var i = 0; i < weights.length; ++i) {
                      weights[i] += average;
                    }
                  }
                }
              };
            }();
            function sampleFreeformCartesian(weights, thresholds, value) {
              sampleFreeform(weights, thresholds, value, getGradientBandCartesianCoords);
            }
            function sampleFreeformDirectional(weights, thresholds, value) {
              sampleFreeform(weights, thresholds, value, getGradientBandPolarCoords);
            }

            function sampleFreeform(weights, samples, value, getGradientBandCoords) {
              weights.fill(0.0);
              var pIpInput = new Vec2(0, 0);
              var pIJ = new Vec2(0, 0);
              var sumInfluence = 0.0;
              var nSamples = samples.length;

              for (var iSample = 0; iSample < nSamples; ++iSample) {
                var influence = Number.MAX_VALUE;
                var outsideHull = false;

                for (var jSample = 0; jSample < nSamples; ++jSample) {
                  if (iSample === jSample) {
                    continue;
                  }

                  getGradientBandCoords(samples[iSample], samples[jSample], value, pIpInput, pIJ);
                  var t = 1 - Vec2.dot(pIpInput, pIJ) / Vec2.lengthSqr(pIJ);

                  if (t < 0) {
                    outsideHull = true;
                    break;
                  }

                  influence = Math.min(influence, t);
                }

                if (!outsideHull) {
                  weights[iSample] = influence;
                  sumInfluence += influence;
                }
              }

              if (sumInfluence > 0) {
                weights.forEach(function (influence, index) {
                  return weights[index] = influence / sumInfluence;
                });
              }
            }

            function solveBarycentric(a, b, p, resolutions) {
              var det = Vec2.cross(a, b);

              if (!det) {
                resolutions.wA = 0.0;
                resolutions.wB = 0.0;
              } else {
                resolutions.wA = Vec2.cross(p, b) / det;
                resolutions.wB = Vec2.cross(p, a) / -det;
              }

              return resolutions;
            }

            var getGradientBandCartesianCoords = function getGradientBandCartesianCoords(pI, pJ, input, pIpInput, pIpJ) {
              Vec2.subtract(pIpInput, input, pI);
              Vec2.subtract(pIpJ, pJ, pI);
            };

            var getGradientBandPolarCoords = function () {
              var axis = new Vec3(0, 0, 0);
              var tmpV3 = new Vec3(0, 0, 0);
              var pQueriedProjected = new Vec3(0, 0, 0);
              var pi3 = new Vec3(0, 0, 0);
              var pj3 = new Vec3(0, 0, 0);
              var pQueried3 = new Vec3(0, 0, 0);
              return function (pI, pJ, input, pIpInput, pIpJ) {
                var aIJ = 0.0;
                var aIQ = 0.0;
                var angleMultiplier = 2.0;
                Vec3.set(pQueriedProjected, input.x, input.y, 0.0);

                if (Vec2.equals(pI, Vec2.ZERO)) {
                  aIJ = Vec2.angle(input, pJ);
                  aIQ = 0.0;
                  angleMultiplier = 1.0;
                } else if (Vec2.equals(pJ, Vec2.ZERO)) {
                  aIJ = Vec2.angle(input, pI);
                  aIQ = aIJ;
                  angleMultiplier = 1.0;
                } else {
                  aIJ = Vec2.angle(pI, pJ);

                  if (aIJ <= 0.0) {
                    aIQ = 0.0;
                  } else if (Vec2.equals(input, Vec2.ZERO)) {
                    aIQ = aIJ;
                  } else {
                    Vec3.set(pi3, pI.x, pI.y, 0);
                    Vec3.set(pj3, pJ.x, pJ.y, 0);
                    Vec3.set(pQueried3, input.x, input.y, 0);
                    Vec3.cross(axis, pi3, pj3);
                    Vec3.projectOnPlane(pQueriedProjected, pQueried3, axis);
                    aIQ = Vec3.angle(pi3, pQueriedProjected);

                    if (aIJ < Math.PI * 0.99) {
                      if (Vec3.dot(Vec3.cross(tmpV3, pi3, pQueriedProjected), axis) < 0) {
                        aIQ = -aIQ;
                      }
                    }
                  }
                }

                var lenPI = Vec2.len(pI);
                var lenPJ = Vec2.len(pJ);
                var deno = (lenPJ + lenPI) / 2;
                Vec2.set(pIpJ, (lenPJ - lenPI) / deno, aIJ * angleMultiplier);
                Vec2.set(pIpInput, (Vec3.len(pQueriedProjected) - lenPI) / deno, aIQ * angleMultiplier);
              };
            }();

            var _dec$M, _class$M, _class2$E, _descriptor$C, _temp$G, _dec2$z, _class4$e, _class5$e, _descriptor2$w, _descriptor3$n, _descriptor4$k, _descriptor5$h, _class6$3, _temp2$e;
            var Algorithm;

            (function (Algorithm) {
              Algorithm[Algorithm["SIMPLE_DIRECTIONAL"] = 0] = "SIMPLE_DIRECTIONAL";
              Algorithm[Algorithm["FREEFORM_CARTESIAN"] = 1] = "FREEFORM_CARTESIAN";
              Algorithm[Algorithm["FREEFORM_DIRECTIONAL"] = 2] = "FREEFORM_DIRECTIONAL";
            })(Algorithm || (Algorithm = {}));

            ccenum(Algorithm);
            var AnimationBlend2DItem = (_dec$M = ccclass(CLASS_NAME_PREFIX_ANIM + "AnimationBlend2DItem"), _dec$M(_class$M = (_class2$E = (_temp$G = function (_AnimationBlendItem) {
              _inheritsLoose(AnimationBlend2DItem, _AnimationBlendItem);

              function AnimationBlend2DItem() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _AnimationBlendItem.call.apply(_AnimationBlendItem, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "threshold", _descriptor$C, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = AnimationBlend2DItem.prototype;

              _proto.clone = function clone() {
                var that = new AnimationBlend2DItem();

                this._assign(that);

                return that;
              };

              _proto._assign = function _assign(that) {
                _AnimationBlendItem.prototype._assign.call(this, that);

                Vec2.copy(that.threshold, this.threshold);
                return that;
              };

              return AnimationBlend2DItem;
            }(AnimationBlendItem), _temp$G), (_descriptor$C = _applyDecoratedDescriptor(_class2$E.prototype, "threshold", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2();
              }
            })), _class2$E)) || _class$M);
            var AnimationBlend2D = (_dec2$z = ccclass('cc.animation.AnimationBlend2D'), _dec2$z(_class4$e = (_class5$e = (_temp2$e = _class6$3 = function (_AnimationBlend) {
              _inheritsLoose(AnimationBlend2D, _AnimationBlend);

              function AnimationBlend2D() {
                var _this2;

                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                _this2 = _AnimationBlend.call.apply(_AnimationBlend, [this].concat(args)) || this;

                _initializerDefineProperty(_this2, "algorithm", _descriptor2$w, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_items", _descriptor3$n, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "paramX", _descriptor4$k, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "paramY", _descriptor5$h, _assertThisInitialized(_this2));

                return _this2;
              }

              var _proto2 = AnimationBlend2D.prototype;

              _proto2.clone = function clone() {
                var that = new AnimationBlend2D();
                that._items = this._items.map(function (item) {
                  var _item$clone;

                  return (_item$clone = item === null || item === void 0 ? void 0 : item.clone()) !== null && _item$clone !== void 0 ? _item$clone : null;
                });
                that.paramX = this.paramX.clone();
                that.paramY = this.paramY.clone();
                return that;
              };

              _proto2[createEval] = function (context) {
                var evaluation = new AnimationBlend2DEval(context, this, this._items, this._items.map(function (_ref) {
                  var threshold = _ref.threshold;
                  return threshold;
                }), this.algorithm, [0.0, 0.0]);
                var initialValueX = bindOr(context, this.paramX, VariableType.FLOAT, evaluation.setInput, evaluation, 0);
                var initialValueY = bindOr(context, this.paramY, VariableType.FLOAT, evaluation.setInput, evaluation, 1);
                evaluation.setInput(initialValueX, 0);
                evaluation.setInput(initialValueY, 1);
                return evaluation;
              };

              _createClass(AnimationBlend2D, [{
                key: "items",
                get: function get() {
                  return this._items;
                },
                set: function set(items) {
                  this._items = Array.from(items);
                }
              }]);

              return AnimationBlend2D;
            }(AnimationBlend), _class6$3.Algorithm = Algorithm, _class6$3.Item = AnimationBlend2DItem, _temp2$e), (_descriptor2$w = _applyDecoratedDescriptor(_class5$e.prototype, "algorithm", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Algorithm.SIMPLE_DIRECTIONAL;
              }
            }), _descriptor3$n = _applyDecoratedDescriptor(_class5$e.prototype, "_items", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor4$k = _applyDecoratedDescriptor(_class5$e.prototype, "paramX", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new BindableNumber();
              }
            }), _descriptor5$h = _applyDecoratedDescriptor(_class5$e.prototype, "paramY", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new BindableNumber();
              }
            })), _class5$e)) || _class4$e);

            var AnimationBlend2DEval = function (_AnimationBlendEval) {
              _inheritsLoose(AnimationBlend2DEval, _AnimationBlendEval);

              function AnimationBlend2DEval(context, base, items, thresholds, algorithm, inputs) {
                var _this3;

                _this3 = _AnimationBlendEval.call(this, context, base, items, inputs) || this;
                _this3._thresholds = void 0;
                _this3._algorithm = void 0;
                _this3._value = new Vec2();
                _this3._thresholds = thresholds;
                _this3._algorithm = algorithm;

                _this3.doEval();

                return _this3;
              }

              var _proto3 = AnimationBlend2DEval.prototype;

              _proto3.eval = function _eval(weights, _ref2) {
                var x = _ref2[0],
                    y = _ref2[1];
                Vec2.set(this._value, x, y);
                weights.fill(0);

                switch (this._algorithm) {
                  case Algorithm.SIMPLE_DIRECTIONAL:
                    blendSimpleDirectional(weights, this._thresholds, this._value);
                    break;

                  case Algorithm.FREEFORM_CARTESIAN:
                    sampleFreeformCartesian(weights, this._thresholds, this._value);
                    break;

                  case Algorithm.FREEFORM_DIRECTIONAL:
                    sampleFreeformDirectional(weights, this._thresholds, this._value);
                    break;
                }
              };

              return AnimationBlend2DEval;
            }(AnimationBlendEval);

            var _dec$N, _class$N, _class2$F, _descriptor$D, _temp$H, _dec2$A, _class4$f, _class5$f, _descriptor2$x, _class6$4, _temp2$f;
            var AnimationBlendDirectItem = (_dec$N = ccclass(CLASS_NAME_PREFIX_ANIM + "AnimationBlendDirectItem"), _dec$N(_class$N = (_class2$F = (_temp$H = function (_AnimationBlendItem) {
              _inheritsLoose(AnimationBlendDirectItem, _AnimationBlendItem);

              function AnimationBlendDirectItem() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _AnimationBlendItem.call.apply(_AnimationBlendItem, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "weight", _descriptor$D, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = AnimationBlendDirectItem.prototype;

              _proto.clone = function clone() {
                var that = new AnimationBlendDirectItem();

                this._assign(that);

                return that;
              };

              _proto._assign = function _assign(that) {
                _AnimationBlendItem.prototype._assign.call(this, that);

                that.weight = this.weight;
                return that;
              };

              return AnimationBlendDirectItem;
            }(AnimationBlendItem), _temp$H), (_descriptor$D = _applyDecoratedDescriptor(_class2$F.prototype, "weight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.0;
              }
            })), _class2$F)) || _class$N);
            var AnimationBlendDirect = (_dec2$A = ccclass('cc.animation.AnimationBlendDirect'), _dec2$A(_class4$f = (_class5$f = (_temp2$f = _class6$4 = function (_AnimationBlend) {
              _inheritsLoose(AnimationBlendDirect, _AnimationBlend);

              function AnimationBlendDirect() {
                var _this2;

                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                _this2 = _AnimationBlend.call.apply(_AnimationBlend, [this].concat(args)) || this;

                _initializerDefineProperty(_this2, "_items", _descriptor2$x, _assertThisInitialized(_this2));

                return _this2;
              }

              var _proto2 = AnimationBlendDirect.prototype;

              _proto2.clone = function clone() {
                var that = new AnimationBlendDirect();
                that._items = this._items.map(function (item) {
                  var _item$clone;

                  return (_item$clone = item === null || item === void 0 ? void 0 : item.clone()) !== null && _item$clone !== void 0 ? _item$clone : null;
                });
                return that;
              };

              _proto2[createEval] = function (context) {
                var myEval = new AnimationBlendDirectEval(context, this, this._items, this._items.map(function (_ref) {
                  var weight = _ref.weight;
                  return weight;
                }));
                return myEval;
              };

              _createClass(AnimationBlendDirect, [{
                key: "items",
                get: function get() {
                  return this._items;
                },
                set: function set(value) {
                  this._items = Array.from(value);
                }
              }]);

              return AnimationBlendDirect;
            }(AnimationBlend), _class6$4.Item = AnimationBlendDirectItem, _temp2$f), (_descriptor2$x = _applyDecoratedDescriptor(_class5$f.prototype, "_items", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class5$f)) || _class4$f);

            var AnimationBlendDirectEval = function (_AnimationBlendEval) {
              _inheritsLoose(AnimationBlendDirectEval, _AnimationBlendEval);

              function AnimationBlendDirectEval() {
                var _this3;

                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                  args[_key5] = arguments[_key5];
                }

                _this3 = _AnimationBlendEval.call.apply(_AnimationBlendEval, [this].concat(args)) || this;

                _this3.doEval();

                return _this3;
              }

              var _proto3 = AnimationBlendDirectEval.prototype;

              _proto3.eval = function _eval(weights, inputs) {
                var nChildren = weights.length;

                for (var iChild = 0; iChild < nChildren; ++iChild) {
                  weights[iChild] = inputs[iChild];
                }
              };

              return AnimationBlendDirectEval;
            }(AnimationBlendEval);

            var _dec$O, _class$O, _class2$G, _descriptor$E, _temp$I, _dec2$B, _class4$g, _class5$g, _descriptor2$y, _descriptor3$o, _temp2$g;
            var AnimationMask = (_dec$O = ccclass(CLASS_NAME_PREFIX_ANIM + "AnimationMask"), _dec$O(_class$O = (_class2$G = (_temp$I = function (_Asset) {
              _inheritsLoose(AnimationMask, _Asset);

              function AnimationMask() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_jointMasks", _descriptor$E, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = AnimationMask.prototype;

              _proto.addJoint = function addJoint(path, enabled) {
                var info = new JointMask();
                info.path = path;
                info.enabled = enabled;

                this._jointMasks.push(info);
              };

              _proto.removeJoint = function removeJoint(removal) {
                removeIf(this._jointMasks, function (_ref) {
                  var path = _ref.path;
                  return path === removal;
                });
              };

              _proto.clear = function clear() {
                this._jointMasks.length = 0;
              };

              _proto.filterDisabledNodes = function filterDisabledNodes(root) {
                var jointMasks = this._jointMasks;
                var nJointMasks = jointMasks.length;
                var disabledNodes = new Set();

                for (var iJointMask = 0; iJointMask < nJointMasks; ++iJointMask) {
                  var _jointMasks$iJointMas = jointMasks[iJointMask],
                      path = _jointMasks$iJointMas.path,
                      enabled = _jointMasks$iJointMas.enabled;

                  if (enabled) {
                    continue;
                  }

                  var node = root.getChildByPath(path);

                  if (node) {
                    disabledNodes.add(node);
                  }
                }

                return disabledNodes;
              };

              _createClass(AnimationMask, [{
                key: "joints",
                get: function get() {
                  return this._jointMasks;
                },
                set: function set(value) {
                  this.clear();

                  for (var _iterator = _createForOfIteratorHelperLoose(value), _step; !(_step = _iterator()).done;) {
                    var joint = _step.value;
                    this.addJoint(joint.path, joint.enabled);
                  }
                }
              }]);

              return AnimationMask;
            }(Asset), _temp$I), (_descriptor$E = _applyDecoratedDescriptor(_class2$G.prototype, "_jointMasks", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _applyDecoratedDescriptor(_class2$G.prototype, "joints", [editable], Object.getOwnPropertyDescriptor(_class2$G.prototype, "joints"), _class2$G.prototype)), _class2$G)) || _class$O);
            var JointMask = (_dec2$B = ccclass('cc.JointMask'), _dec2$B(_class4$g = (_class5$g = (_temp2$g = function JointMask() {
              _initializerDefineProperty(this, "path", _descriptor2$y, this);

              _initializerDefineProperty(this, "enabled", _descriptor3$o, this);
            }, _temp2$g), (_descriptor2$y = _applyDecoratedDescriptor(_class5$g.prototype, "path", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor3$o = _applyDecoratedDescriptor(_class5$g.prototype, "enabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            })), _class5$g)) || _class4$g);

            var _dec$P, _class$P, _class2$H, _descriptor$F, _descriptor2$z, _descriptor3$p, _class3$8, _temp$J, _dec2$C, _class4$h, _class5$h, _descriptor4$l, _descriptor5$i, _class6$5, _temp2$h, _dec3$q, _class7$4, _class8$3, _descriptor6$e, _temp3$3;
            var BinaryOperator;

            (function (BinaryOperator) {
              BinaryOperator[BinaryOperator["EQUAL_TO"] = 0] = "EQUAL_TO";
              BinaryOperator[BinaryOperator["NOT_EQUAL_TO"] = 1] = "NOT_EQUAL_TO";
              BinaryOperator[BinaryOperator["LESS_THAN"] = 2] = "LESS_THAN";
              BinaryOperator[BinaryOperator["LESS_THAN_OR_EQUAL_TO"] = 3] = "LESS_THAN_OR_EQUAL_TO";
              BinaryOperator[BinaryOperator["GREATER_THAN"] = 4] = "GREATER_THAN";
              BinaryOperator[BinaryOperator["GREATER_THAN_OR_EQUAL_TO"] = 5] = "GREATER_THAN_OR_EQUAL_TO";
            })(BinaryOperator || (BinaryOperator = {}));

            var BinaryCondition = (_dec$P = ccclass(CLASS_NAME_PREFIX_ANIM + "BinaryCondition"), _dec$P(_class$P = (_class2$H = (_temp$J = _class3$8 = function () {
              function BinaryCondition() {
                _initializerDefineProperty(this, "operator", _descriptor$F, this);

                _initializerDefineProperty(this, "lhs", _descriptor2$z, this);

                _initializerDefineProperty(this, "rhs", _descriptor3$p, this);
              }

              var _proto = BinaryCondition.prototype;

              _proto.clone = function clone() {
                var that = new BinaryCondition();
                that.operator = this.operator;
                that.lhs = this.lhs.clone();
                that.rhs = this.rhs.clone();
                return that;
              };

              _proto[createEval] = function (context) {
                var operator = this.operator,
                    lhs = this.lhs,
                    rhs = this.rhs;
                var evaluation = new BinaryConditionEval(operator, 0.0, 0.0);
                var lhsValue = bindNumericOr(context, lhs, VariableType.FLOAT, evaluation.setLhs, evaluation);
                var rhsValue = bindNumericOr(context, rhs, VariableType.FLOAT, evaluation.setRhs, evaluation);
                evaluation.reset(lhsValue, rhsValue);
                return evaluation;
              };

              return BinaryCondition;
            }(), _class3$8.Operator = BinaryOperator, _temp$J), (_descriptor$F = _applyDecoratedDescriptor(_class2$H.prototype, "operator", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return BinaryOperator.EQUAL_TO;
              }
            }), _descriptor2$z = _applyDecoratedDescriptor(_class2$H.prototype, "lhs", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new BindableNumber();
              }
            }), _descriptor3$p = _applyDecoratedDescriptor(_class2$H.prototype, "rhs", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new BindableNumber();
              }
            })), _class2$H)) || _class$P);

            var BinaryConditionEval = function () {
              function BinaryConditionEval(operator, lhs, rhs) {
                this._operator = operator;
                this._lhs = lhs;
                this._rhs = rhs;

                this._eval();
              }

              var _proto2 = BinaryConditionEval.prototype;

              _proto2.reset = function reset(lhs, rhs) {
                this._lhs = lhs;
                this._rhs = rhs;

                this._eval();
              };

              _proto2.setLhs = function setLhs(value) {
                this._lhs = value;

                this._eval();
              };

              _proto2.setRhs = function setRhs(value) {
                this._rhs = value;

                this._eval();
              };

              _proto2.eval = function _eval() {
                return this._result;
              };

              _proto2._eval = function _eval() {
                var lhs = this._lhs,
                    rhs = this._rhs;

                switch (this._operator) {
                  default:
                  case BinaryOperator.EQUAL_TO:
                    this._result = lhs === rhs;
                    break;

                  case BinaryOperator.NOT_EQUAL_TO:
                    this._result = lhs !== rhs;
                    break;

                  case BinaryOperator.LESS_THAN:
                    this._result = lhs < rhs;
                    break;

                  case BinaryOperator.LESS_THAN_OR_EQUAL_TO:
                    this._result = lhs <= rhs;
                    break;

                  case BinaryOperator.GREATER_THAN:
                    this._result = lhs > rhs;
                    break;

                  case BinaryOperator.GREATER_THAN_OR_EQUAL_TO:
                    this._result = lhs >= rhs;
                    break;
                }
              };

              return BinaryConditionEval;
            }();

            var UnaryOperator;

            (function (UnaryOperator) {
              UnaryOperator[UnaryOperator["TRUTHY"] = 0] = "TRUTHY";
              UnaryOperator[UnaryOperator["FALSY"] = 1] = "FALSY";
            })(UnaryOperator || (UnaryOperator = {}));

            var UnaryCondition = (_dec2$C = ccclass(CLASS_NAME_PREFIX_ANIM + "UnaryCondition"), _dec2$C(_class4$h = (_class5$h = (_temp2$h = _class6$5 = function () {
              function UnaryCondition() {
                _initializerDefineProperty(this, "operator", _descriptor4$l, this);

                _initializerDefineProperty(this, "operand", _descriptor5$i, this);
              }

              var _proto3 = UnaryCondition.prototype;

              _proto3.clone = function clone() {
                var that = new UnaryCondition();
                that.operator = this.operator;
                that.operand = this.operand.clone();
                return that;
              };

              _proto3[createEval] = function (context) {
                var operator = this.operator,
                    operand = this.operand;
                var evaluation = new UnaryConditionEval(operator, false);
                var value = bindOr(context, operand, VariableType.BOOLEAN, evaluation.setOperand, evaluation);
                evaluation.reset(value);
                return evaluation;
              };

              return UnaryCondition;
            }(), _class6$5.Operator = UnaryOperator, _temp2$h), (_descriptor4$l = _applyDecoratedDescriptor(_class5$h.prototype, "operator", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return UnaryOperator.TRUTHY;
              }
            }), _descriptor5$i = _applyDecoratedDescriptor(_class5$h.prototype, "operand", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new BindableBoolean();
              }
            })), _class5$h)) || _class4$h);

            var UnaryConditionEval = function () {
              function UnaryConditionEval(operator, operand) {
                this._operator = operator;
                this._operand = operand;

                this._eval();
              }

              var _proto4 = UnaryConditionEval.prototype;

              _proto4.reset = function reset(value) {
                this.setOperand(value);
              };

              _proto4.setOperand = function setOperand(value) {
                this._operand = value;

                this._eval();
              };

              _proto4.eval = function _eval() {
                return this._result;
              };

              _proto4._eval = function _eval() {
                var operand = this._operand;

                switch (this._operator) {
                  default:
                  case UnaryOperator.TRUTHY:
                    this._result = !!operand;
                    break;

                  case UnaryOperator.FALSY:
                    this._result = !operand;
                    break;
                }
              };

              return UnaryConditionEval;
            }();

            var TriggerCondition = (_dec3$q = ccclass(CLASS_NAME_PREFIX_ANIM + "TriggerCondition"), _dec3$q(_class7$4 = (_class8$3 = (_temp3$3 = function () {
              function TriggerCondition() {
                _initializerDefineProperty(this, "trigger", _descriptor6$e, this);
              }

              var _proto5 = TriggerCondition.prototype;

              _proto5.clone = function clone() {
                var that = new TriggerCondition();
                that.trigger = this.trigger;
                return that;
              };

              _proto5[createEval] = function (context) {
                var evaluation = new TriggerConditionEval(false);
                var triggerInstance = context.getVar(this.trigger);

                if (validateVariableExistence(triggerInstance, this.trigger)) {
                  validateVariableTypeTriggerLike(triggerInstance.type, this.trigger);
                  evaluation.setTrigger(triggerInstance.bind(evaluation.setTrigger, evaluation));
                }

                return evaluation;
              };

              return TriggerCondition;
            }(), _temp3$3), (_descriptor6$e = _applyDecoratedDescriptor(_class8$3.prototype, "trigger", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            })), _class8$3)) || _class7$4);

            var TriggerConditionEval = function () {
              function TriggerConditionEval(triggered) {
                this._triggered = false;
                this._triggered = triggered;
              }

              var _proto6 = TriggerConditionEval.prototype;

              _proto6.setTrigger = function setTrigger(trigger) {
                this._triggered = trigger;
              };

              _proto6.eval = function _eval() {
                return this._triggered;
              };

              return TriggerConditionEval;
            }();

            var MAX_ANIMATION_LAYER = 32;

            var BlendStateBuffer = function () {
              function BlendStateBuffer() {
                this._nodeBlendStates = new Map();
              }

              var _proto = BlendStateBuffer.prototype;

              _proto.createWriter = function createWriter(node, property, host, constants) {
                var propertyBlendState = this.ref(node, property);
                return new BlendStateWriterInternal(node, property, propertyBlendState, host, constants);
              };

              _proto.destroyWriter = function destroyWriter(writer) {
                var internal = writer;
                this.deRef(internal.node, internal.property);
              };

              _proto.ref = function ref(node, property) {
                var nodeBlendState = this._nodeBlendStates.get(node);

                if (!nodeBlendState) {
                  nodeBlendState = this.createNodeBlendState();

                  this._nodeBlendStates.set(node, nodeBlendState);
                }

                var propertyBlendState = nodeBlendState.refProperty(node, property);
                return propertyBlendState;
              };

              _proto.deRef = function deRef(node, property) {
                var nodeBlendState = this._nodeBlendStates.get(node);

                if (!nodeBlendState) {
                  return;
                }

                nodeBlendState.deRefProperty(property);

                if (nodeBlendState.empty) {
                  this._nodeBlendStates["delete"](node);
                }
              };

              _proto.apply = function apply() {
                this._nodeBlendStates.forEach(function (nodeBlendState, node) {
                  nodeBlendState.apply(node);
                });
              };

              return BlendStateBuffer;
            }();

            var BlendStateWriterInternal = function () {
              function BlendStateWriterInternal(_node, _property, _propertyBlendState, _host, _constants) {
                this._node = _node;
                this._property = _property;
                this._propertyBlendState = _propertyBlendState;
                this._host = _host;
                this._constants = _constants;
              }

              var _proto2 = BlendStateWriterInternal.prototype;

              _proto2.getValue = function getValue() {
                return this._node[this._property];
              };

              _proto2.setValue = function setValue(value) {
                var propertyBlendState = this._propertyBlendState,
                    host = this._host;
                var weight = host.weight;
                propertyBlendState.blend(value, weight);
              };

              _createClass(BlendStateWriterInternal, [{
                key: "node",
                get: function get() {
                  return this._node;
                }
              }, {
                key: "property",
                get: function get() {
                  return this._property;
                }
              }]);

              return BlendStateWriterInternal;
            }();

            var TransformApplyFlag;

            (function (TransformApplyFlag) {
              TransformApplyFlag[TransformApplyFlag["POSITION"] = 1] = "POSITION";
              TransformApplyFlag[TransformApplyFlag["ROTATION"] = 2] = "ROTATION";
              TransformApplyFlag[TransformApplyFlag["SCALE"] = 4] = "SCALE";
              TransformApplyFlag[TransformApplyFlag["EULER_ANGLES"] = 8] = "EULER_ANGLES";
            })(TransformApplyFlag || (TransformApplyFlag = {}));

            var TRANSFORM_APPLY_FLAGS_ALL = TransformApplyFlag.POSITION | TransformApplyFlag.ROTATION | TransformApplyFlag.SCALE | TransformApplyFlag.EULER_ANGLES;

            var LegacyVec3PropertyBlendState = function () {
              function LegacyVec3PropertyBlendState() {
                this.refCount = 0;
                this.accumulatedWeight = 0.0;
                this.result = new Vec3();
              }

              var _proto3 = LegacyVec3PropertyBlendState.prototype;

              _proto3.blend = function blend(value, weight) {
                this.accumulatedWeight = mixAveragedVec3(this.result, this.result, this.accumulatedWeight, value, weight);
              };

              _proto3.reset = function reset() {
                this.accumulatedWeight = 0.0;
                Vec3.zero(this.result);
              };

              return LegacyVec3PropertyBlendState;
            }();

            var LegacyQuatPropertyBlendState = function () {
              function LegacyQuatPropertyBlendState() {
                this.refCount = 0;
                this.accumulatedWeight = 0.0;
                this.result = new Quat();
              }

              var _proto4 = LegacyQuatPropertyBlendState.prototype;

              _proto4.blend = function blend(value, weight) {
                this.accumulatedWeight = mixAveragedQuat(this.result, this.result, this.accumulatedWeight, value, weight);
              };

              _proto4.reset = function reset() {
                this.accumulatedWeight = 0.0;
                Quat.identity(this.result);
              };

              return LegacyQuatPropertyBlendState;
            }();

            var NodeBlendState = function () {
              function NodeBlendState() {
                this._transformApplyFlags = 0;
                this._properties = {};
              }

              var _proto5 = NodeBlendState.prototype;

              _proto5.refProperty = function refProperty(node, property) {
                var _properties$property, _properties$property2;

                var properties = this._properties;
                var propertyBlendState;

                switch (property) {
                  default:
                  case 'position':
                  case 'scale':
                  case 'eulerAngles':
                    propertyBlendState = (_properties$property = properties[property]) !== null && _properties$property !== void 0 ? _properties$property : properties[property] = this._createVec3BlendState(node[property]);
                    break;

                  case 'rotation':
                    propertyBlendState = (_properties$property2 = properties[property]) !== null && _properties$property2 !== void 0 ? _properties$property2 : properties[property] = this._createQuatBlendState(node.rotation);
                    break;
                }

                ++propertyBlendState.refCount;
                return propertyBlendState;
              };

              _proto5.deRefProperty = function deRefProperty(property) {
                var properties = this._properties;
                var propertyBlendState = properties[property];

                if (!propertyBlendState) {
                  return;
                }

                --propertyBlendState.refCount;

                if (propertyBlendState.refCount > 0) {
                  return;
                }

                delete properties[property];
              };

              _proto5.apply = function apply(node) {
                var transformApplyFlags = this._transformApplyFlags,
                    _this$_properties = this._properties,
                    position = _this$_properties.position,
                    scale = _this$_properties.scale,
                    rotation = _this$_properties.rotation,
                    eulerAngles = _this$_properties.eulerAngles;

                if (!transformApplyFlags) {
                  return;
                }

                var t;
                var s;
                var r;

                if (position && transformApplyFlags & TransformApplyFlag.POSITION) {
                  t = position.result;
                }

                if (scale && transformApplyFlags & TransformApplyFlag.SCALE) {
                  s = scale.result;
                }

                if (eulerAngles && transformApplyFlags & TransformApplyFlag.EULER_ANGLES) {
                  r = eulerAngles.result;
                }

                if (rotation && transformApplyFlags & TransformApplyFlag.ROTATION) {
                  r = rotation.result;
                }

                if (r || t || s) {
                  node.setRTS(r, t, s);
                }

                this._transformApplyFlags = 0;
              };

              _createClass(NodeBlendState, [{
                key: "empty",
                get: function get() {
                  var properties = this._properties;
                  return !properties.position && !properties.rotation && !properties.eulerAngles && !properties.scale;
                }
              }]);

              return NodeBlendState;
            }();

            var LegacyNodeBlendState = function (_NodeBlendState) {
              _inheritsLoose(LegacyNodeBlendState, _NodeBlendState);

              function LegacyNodeBlendState() {
                return _NodeBlendState.apply(this, arguments) || this;
              }

              var _proto6 = LegacyNodeBlendState.prototype;

              _proto6.apply = function apply(node) {
                var _this$_properties2 = this._properties,
                    position = _this$_properties2.position,
                    scale = _this$_properties2.scale,
                    rotation = _this$_properties2.rotation,
                    eulerAngles = _this$_properties2.eulerAngles;

                if (position && position.accumulatedWeight) {
                  this._transformApplyFlags |= TransformApplyFlag.POSITION;

                  if (position.accumulatedWeight < 1.0) {
                    position.blend(node.position, 1.0 - position.accumulatedWeight);
                  }
                }

                if (scale && scale.accumulatedWeight) {
                  this._transformApplyFlags |= TransformApplyFlag.SCALE;

                  if (scale.accumulatedWeight < 1.0) {
                    scale.blend(node.scale, 1.0 - scale.accumulatedWeight);
                  }
                }

                if (eulerAngles && eulerAngles.accumulatedWeight) {
                  this._transformApplyFlags |= TransformApplyFlag.EULER_ANGLES;

                  if (eulerAngles.accumulatedWeight < 1.0) {
                    eulerAngles.blend(node.eulerAngles, 1.0 - eulerAngles.accumulatedWeight);
                  }
                }

                if (rotation && rotation.accumulatedWeight) {
                  this._transformApplyFlags |= TransformApplyFlag.ROTATION;

                  if (rotation.accumulatedWeight < 1.0) {
                    rotation.blend(node.rotation, 1.0 - rotation.accumulatedWeight);
                  }
                }

                _NodeBlendState.prototype.apply.call(this, node);

                position === null || position === void 0 ? void 0 : position.reset();
                scale === null || scale === void 0 ? void 0 : scale.reset();
                rotation === null || rotation === void 0 ? void 0 : rotation.reset();
                eulerAngles === null || eulerAngles === void 0 ? void 0 : eulerAngles.reset();
              };

              _proto6._createVec3BlendState = function _createVec3BlendState(_currentValue) {
                return new LegacyVec3PropertyBlendState();
              };

              _proto6._createQuatBlendState = function _createQuatBlendState(_currentValue) {
                return new LegacyQuatPropertyBlendState();
              };

              return LegacyNodeBlendState;
            }(NodeBlendState);

            var LegacyBlendStateBuffer = function (_BlendStateBuffer) {
              _inheritsLoose(LegacyBlendStateBuffer, _BlendStateBuffer);

              function LegacyBlendStateBuffer() {
                return _BlendStateBuffer.apply(this, arguments) || this;
              }

              var _proto7 = LegacyBlendStateBuffer.prototype;

              _proto7.createNodeBlendState = function createNodeBlendState() {
                return new LegacyNodeBlendState();
              };

              return LegacyBlendStateBuffer;
            }(BlendStateBuffer);

            var LayeredVec3PropertyBlendState = function () {
              function LayeredVec3PropertyBlendState(defaultValue) {
                this.refCount = 0;
                this.result = new Vec3();
                this._defaultValue = new Vec3();
                this._clipBlendResult = new Vec3();
                this._accumulatedWeight = 0.0;
                Vec3.copy(this._defaultValue, defaultValue);
                Vec3.copy(this.result, defaultValue);
              }

              var _proto8 = LayeredVec3PropertyBlendState.prototype;

              _proto8.blend = function blend(value, weight) {
                this._accumulatedWeight = mixAveragedVec3(this._clipBlendResult, this._clipBlendResult, this._accumulatedWeight, value, weight);
              };

              _proto8.commitLayerChange = function commitLayerChange(weight) {
                var result = this.result,
                    clipBlendResult = this._clipBlendResult,
                    accumulatedWeight = this._accumulatedWeight;

                if (accumulatedWeight < 1.0) {
                  this.blend(this._defaultValue, 1.0 - accumulatedWeight);
                }

                Vec3.lerp(result, result, clipBlendResult, weight);
                Vec3.zero(this._clipBlendResult);
                this._accumulatedWeight = 0.0;
              };

              _proto8.reset = function reset() {
                Vec3.copy(this.result, this._defaultValue);
              };

              return LayeredVec3PropertyBlendState;
            }();

            var LayeredQuatPropertyBlendState = function () {
              function LayeredQuatPropertyBlendState(defaultValue) {
                this.refCount = 0;
                this.result = new Quat();
                this._defaultValue = new Quat();
                this._clipBlendResult = new Quat();
                this._accumulatedWeight = 0.0;
                Quat.copy(this._defaultValue, defaultValue);
                Quat.copy(this.result, defaultValue);
              }

              var _proto9 = LayeredQuatPropertyBlendState.prototype;

              _proto9.blend = function blend(value, weight) {
                this._accumulatedWeight = mixAveragedQuat(this._clipBlendResult, this._clipBlendResult, this._accumulatedWeight, value, weight);
              };

              _proto9.commitLayerChange = function commitLayerChange(weight) {
                var result = this.result,
                    clipBlendResult = this._clipBlendResult,
                    accumulatedWeight = this._accumulatedWeight;

                if (accumulatedWeight < 1.0) {
                  this.blend(this._defaultValue, 1.0 - accumulatedWeight);
                }

                Quat.slerp(result, result, clipBlendResult, weight);
                Quat.identity(this._clipBlendResult);
                this._accumulatedWeight = 0.0;
              };

              _proto9.reset = function reset() {
                Quat.copy(this.result, this._defaultValue);
              };

              return LayeredQuatPropertyBlendState;
            }();

            var LayeredNodeBlendState = function (_NodeBlendState2) {
              _inheritsLoose(LayeredNodeBlendState, _NodeBlendState2);

              function LayeredNodeBlendState() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _NodeBlendState2.call.apply(_NodeBlendState2, [this].concat(args)) || this;
                _this._layerMask = ~0 >>> 0;
                return _this;
              }

              var _proto10 = LayeredNodeBlendState.prototype;

              _proto10.setLayerMask = function setLayerMask(layerIndex) {
                this._layerMask &= ~(1 << layerIndex);
              };

              _proto10.commitLayerChanges = function commitLayerChanges(layerIndex, weight) {
                if (!(this._layerMask & 1 << layerIndex)) {
                  return;
                }

                var _this$_properties3 = this._properties,
                    position = _this$_properties3.position,
                    scale = _this$_properties3.scale,
                    rotation = _this$_properties3.rotation,
                    eulerAngles = _this$_properties3.eulerAngles;

                if (position) {
                  position.commitLayerChange(weight);
                }

                if (scale) {
                  scale.commitLayerChange(weight);
                }

                if (rotation) {
                  rotation.commitLayerChange(weight);
                }

                if (eulerAngles) {
                  eulerAngles.commitLayerChange(weight);
                }
              };

              _proto10.apply = function apply(node) {
                this._transformApplyFlags = TRANSFORM_APPLY_FLAGS_ALL;

                _NodeBlendState2.prototype.apply.call(this, node);

                var _this$_properties4 = this._properties,
                    position = _this$_properties4.position,
                    scale = _this$_properties4.scale,
                    rotation = _this$_properties4.rotation,
                    eulerAngles = _this$_properties4.eulerAngles;
                position === null || position === void 0 ? void 0 : position.reset();
                scale === null || scale === void 0 ? void 0 : scale.reset();
                rotation === null || rotation === void 0 ? void 0 : rotation.reset();
                eulerAngles === null || eulerAngles === void 0 ? void 0 : eulerAngles.reset();
              };

              _proto10._createVec3BlendState = function _createVec3BlendState(currentValue) {
                return new LayeredVec3PropertyBlendState(currentValue);
              };

              _proto10._createQuatBlendState = function _createQuatBlendState(currentValue) {
                return new LayeredQuatPropertyBlendState(currentValue);
              };

              return LayeredNodeBlendState;
            }(NodeBlendState);

            var LayeredBlendStateBuffer = function (_BlendStateBuffer2) {
              _inheritsLoose(LayeredBlendStateBuffer, _BlendStateBuffer2);

              function LayeredBlendStateBuffer() {
                return _BlendStateBuffer2.apply(this, arguments) || this;
              }

              var _proto11 = LayeredBlendStateBuffer.prototype;

              _proto11.setMask = function setMask(layerIndex, excludeNodes) {
                {
                  checkLayerIndex(layerIndex);
                }

                this._nodeBlendStates.forEach(function (nodeBlendState, node) {
                  if (excludeNodes.has(node)) {
                    nodeBlendState.setLayerMask(layerIndex);
                  }
                });
              };

              _proto11.commitLayerChanges = function commitLayerChanges(layerIndex, weight) {
                {
                  checkLayerIndex(layerIndex);
                }

                this._nodeBlendStates.forEach(function (nodeBlendState, node) {
                  nodeBlendState.commitLayerChanges(layerIndex, weight);
                });
              };

              _proto11.createNodeBlendState = function createNodeBlendState() {
                return new LayeredNodeBlendState();
              };

              return LayeredBlendStateBuffer;
            }(BlendStateBuffer);

            function checkLayerIndex(layerIndex) {
              assertIsTrue(layerIndex < MAX_ANIMATION_LAYER);
            }

            function mixAveragedVec3(result, previous, accumulatedWeight, input, weight) {
              var newSum = accumulatedWeight + weight;

              if (weight === 1.0 && !accumulatedWeight) {
                Vec3.copy(result, input);
              } else if (newSum) {
                var t = weight / newSum;
                Vec3.lerp(result, result, input, t);
              }

              return newSum;
            }

            function mixAveragedQuat(result, previous, accumulatedWeight, input, weight) {
              var newSum = accumulatedWeight + weight;

              if (weight === 1.0 && !accumulatedWeight) {
                Quat.copy(result, input);
              } else if (newSum) {
                var t = weight / newSum;
                Quat.slerp(result, previous, input, t);
              }

              return newSum;
            }

            var _dec$Q, _class$Q;
            var StateMachineComponent = (_dec$Q = ccclass(CLASS_NAME_PREFIX_ANIM + "StateMachineComponent"), _dec$Q(_class$Q = function () {
              function StateMachineComponent() {}

              var _proto = StateMachineComponent.prototype;

              _proto.onMotionStateEnter = function onMotionStateEnter(controller, motionStateStatus) {};

              _proto.onMotionStateExit = function onMotionStateExit(controller, motionStateStatus) {};

              _proto.onMotionStateUpdate = function onMotionStateUpdate(controller, motionStateStatus) {};

              _proto.onStateMachineEnter = function onStateMachineEnter(controller) {};

              _proto.onStateMachineExit = function onStateMachineExit(controller) {};

              return StateMachineComponent;
            }()) || _class$Q);

            var _Object$freeze;
            var AnimationGraphEval = function () {
              function AnimationGraphEval(graph, root, controller) {
                var _this = this;

                this._blendBuffer = new LayeredBlendStateBuffer();
                this._currentTransitionCache = {
                  duration: 0.0,
                  time: 0.0
                };
                this._varInstances = {};
                this._hasAutoTrigger = false;

                {
                  if (graph.layers.length >= MAX_ANIMATION_LAYER) {
                    throw new Error("Max layer count exceeds. " + ("Allowed: " + MAX_ANIMATION_LAYER + ", actual: " + graph.layers.length));
                  }
                }

                for (var _iterator = _createForOfIteratorHelperLoose(graph.variables), _step; !(_step = _iterator()).done;) {
                  var _step$value = _step.value,
                      _name = _step$value[0],
                      variable = _step$value[1];
                  var varInstance = this._varInstances[_name] = new VarInstance(variable.type, variable.value);

                  if (variable.type === VariableType.TRIGGER) {
                    var resetMode = variable.resetMode;
                    varInstance.resetMode = resetMode;

                    if (resetMode === TriggerResetMode.NEXT_FRAME_OR_AFTER_CONSUMED) {
                      this._hasAutoTrigger = true;
                    }
                  }
                }

                var context = {
                  controller: controller,
                  blendBuffer: this._blendBuffer,
                  node: root,
                  getVar: function getVar(id) {
                    return _this._varInstances[id];
                  },
                  triggerResetFn: function triggerResetFn(name) {
                    _this.setValue(name, false);
                  }
                };
                var layerEvaluations = this._layerEvaluations = graph.layers.map(function (layer) {
                  var _layer$mask;

                  var layerEval = new LayerEval(layer, _extends({}, context, {
                    mask: (_layer$mask = layer.mask) !== null && _layer$mask !== void 0 ? _layer$mask : undefined
                  }));
                  return layerEval;
                });
                var nLayers = layerEvaluations.length;

                for (var iLayer = 0; iLayer < nLayers; ++iLayer) {
                  var mask = graph.layers[iLayer].mask;

                  if (mask) {
                    var excludeNodes = mask.filterDisabledNodes(context.node);

                    this._blendBuffer.setMask(iLayer, excludeNodes);
                  }
                }
              }

              var _proto = AnimationGraphEval.prototype;

              _proto.update = function update(deltaTime) {
                var blendBuffer = this._blendBuffer,
                    layerEvaluations = this._layerEvaluations;

                var nLayers = layerEvaluations.length;

                for (var iLayer = 0; iLayer < nLayers; ++iLayer) {
                  var layerEval = layerEvaluations[iLayer];
                  layerEval.update(deltaTime);
                  blendBuffer.commitLayerChanges(iLayer, layerEval.weight * layerEval.passthroughWeight);
                }

                if (this._hasAutoTrigger) {
                  var varInstances = this._varInstances;

                  for (var varName in varInstances) {
                    var varInstance = varInstances[varName];

                    if (varInstance.type === VariableType.TRIGGER && varInstance.resetMode === TriggerResetMode.NEXT_FRAME_OR_AFTER_CONSUMED) {
                      varInstance.value = false;
                    }
                  }
                }

                this._blendBuffer.apply();
              };

              _proto.getVariables = function getVariables() {
                return Object.entries(this._varInstances);
              };

              _proto.getCurrentStateStatus = function getCurrentStateStatus(layer) {
                return this._layerEvaluations[layer].getCurrentStateStatus();
              };

              _proto.getCurrentClipStatuses = function getCurrentClipStatuses(layer) {
                return this._layerEvaluations[layer].getCurrentClipStatuses();
              };

              _proto.getCurrentTransition = function getCurrentTransition(layer) {
                var layers = this._layerEvaluations,
                    currentTransition = this._currentTransitionCache;
                var isInTransition = layers[layer].getCurrentTransition(currentTransition);
                return isInTransition ? currentTransition : null;
              };

              _proto.getNextStateStatus = function getNextStateStatus(layer) {
                return this._layerEvaluations[layer].getNextStateStatus();
              };

              _proto.getNextClipStatuses = function getNextClipStatuses(layer) {
                assertIsNonNullable(this.getCurrentTransition(layer), '!!this.getCurrentTransition(layer)');
                return this._layerEvaluations[layer].getNextClipStatuses();
              };

              _proto.getValue = function getValue(name) {
                var varInstance = this._varInstances[name];

                if (!varInstance) {
                  return undefined;
                } else {
                  return varInstance.value;
                }
              };

              _proto.setValue = function setValue(name, value) {
                var varInstance = this._varInstances[name];

                if (!varInstance) {
                  return;
                }

                varInstance.value = value;
              };

              _proto.setLayerWeight = function setLayerWeight(layerIndex, weight) {
                this._layerEvaluations[layerIndex].weight = weight;
              };

              return AnimationGraphEval;
            }();

            var LayerEval = function () {
              function LayerEval(layer, context) {
                this.passthroughWeight = 1.0;
                this._nodes = [];
                this._topLevelEntry = void 0;
                this._topLevelExit = void 0;
                this._currentNode = void 0;
                this._currentTransitionToNode = null;
                this._currentTransitionPath = [];
                this._transitionProgress = 0;
                this._fromWeight = 0.0;
                this._toWeight = 0.0;
                this._fromUpdated = false;
                this._toUpdated = false;
                this.name = layer.name;
                this._controller = context.controller;
                this.weight = layer.weight;

                var _this$_addStateMachin = this._addStateMachine(layer.stateMachine, null, _extends({}, context), layer.name),
                    entry = _this$_addStateMachin.entry,
                    exit = _this$_addStateMachin.exit;

                this._topLevelEntry = entry;
                this._topLevelExit = exit;
                this._currentNode = entry;
                this._resetTrigger = context.triggerResetFn;
              }

              var _proto2 = LayerEval.prototype;

              _proto2.update = function update(deltaTime) {
                if (!this.exited) {
                  this._fromWeight = 1.0;
                  this._toWeight = 0.0;

                  this._eval(deltaTime);

                  this._sample();
                }
              };

              _proto2.getCurrentStateStatus = function getCurrentStateStatus() {
                var currentNode = this._currentNode;

                if (currentNode.kind === NodeKind.animation) {
                  return currentNode.getFromPortStatus();
                } else {
                  return null;
                }
              };

              _proto2.getCurrentClipStatuses = function getCurrentClipStatuses() {
                var currentNode = this._currentNode;

                if (currentNode.kind === NodeKind.animation) {
                  return currentNode.getClipStatuses(this._fromWeight);
                } else {
                  return emptyClipStatusesIterable;
                }
              };

              _proto2.getCurrentTransition = function getCurrentTransition(transitionStatus) {
                var currentTransitionPath = this._currentTransitionPath;

                if (currentTransitionPath.length !== 0) {
                  var lastNode = currentTransitionPath[currentTransitionPath.length - 1];

                  if (lastNode.to.kind !== NodeKind.animation) {
                    return false;
                  }

                  var _currentTransitionPat = currentTransitionPath[0],
                      duration = _currentTransitionPat.duration,
                      normalizedDuration = _currentTransitionPat.normalizedDuration;
                  var durationInSeconds = transitionStatus.duration = normalizedDuration ? duration * (this._currentNode.kind === NodeKind.animation ? this._currentNode.duration : 0.0) : duration;
                  transitionStatus.time = this._transitionProgress * durationInSeconds;
                  return true;
                } else {
                  return false;
                }
              };

              _proto2.getNextStateStatus = function getNextStateStatus() {
                assertIsTrue(this._currentTransitionToNode && this._currentTransitionToNode.kind !== NodeKind.empty, 'There is no transition currently in layer.');
                return this._currentTransitionToNode.getToPortStatus();
              };

              _proto2.getNextClipStatuses = function getNextClipStatuses() {
                var _to$getClipStatuses;

                var currentTransitionPath = this._currentTransitionPath;
                var nCurrentTransitionPath = currentTransitionPath.length;
                assertIsTrue(nCurrentTransitionPath > 0, 'There is no transition currently in layer.');
                var to = currentTransitionPath[nCurrentTransitionPath - 1].to;
                assertIsTrue(to.kind === NodeKind.animation);
                return (_to$getClipStatuses = to.getClipStatuses(this._toWeight)) !== null && _to$getClipStatuses !== void 0 ? _to$getClipStatuses : emptyClipStatusesIterable;
              };

              _proto2._addStateMachine = function _addStateMachine(graph, parentStateMachineInfo, context, __DEBUG_ID__) {
                var _this2 = this;

                var nodes = Array.from(graph.states());
                var entryEval;
                var anyNode;
                var exitEval;
                var nodeEvaluations = nodes.map(function (node) {
                  if (node instanceof MotionState) {
                    return new MotionStateEval(node, context);
                  } else if (node === graph.entryState) {
                    return entryEval = new SpecialStateEval(node, NodeKind.entry, node.name);
                  } else if (node === graph.exitState) {
                    return exitEval = new SpecialStateEval(node, NodeKind.exit, node.name);
                  } else if (node === graph.anyState) {
                    return anyNode = new SpecialStateEval(node, NodeKind.any, node.name);
                  } else if (node instanceof EmptyState) {
                    return new EmptyStateEval(node);
                  } else {
                    assertIsTrue(node instanceof SubStateMachine);
                    return null;
                  }
                });
                assertIsNonNullable(entryEval, 'Entry node is missing');
                assertIsNonNullable(exitEval, 'Exit node is missing');
                assertIsNonNullable(anyNode, 'Any node is missing');
                var stateMachineInfo = {
                  components: null,
                  parent: parentStateMachineInfo,
                  entry: entryEval,
                  exit: exitEval,
                  any: anyNode
                };

                for (var iNode = 0; iNode < nodes.length; ++iNode) {
                  var nodeEval = nodeEvaluations[iNode];

                  if (nodeEval) {
                    nodeEval.stateMachine = stateMachineInfo;
                  }
                }

                var subStateMachineInfos = nodes.map(function (node) {
                  if (node instanceof SubStateMachine) {
                    var subStateMachineInfo = _this2._addStateMachine(node.stateMachine, stateMachineInfo, context, __DEBUG_ID__ + "/" + node.name);

                    subStateMachineInfo.components = new InstantiatedComponents(node);
                    return subStateMachineInfo;
                  } else {
                    return null;
                  }
                });

                {
                  for (var _iterator2 = _createForOfIteratorHelperLoose(nodeEvaluations), _step2; !(_step2 = _iterator2()).done;) {
                    var _nodeEval = _step2.value;

                    if (_nodeEval) {
                      _nodeEval.__DEBUG_ID__ = _nodeEval.name + "(from " + __DEBUG_ID__ + ")";
                    }
                  }
                }

                for (var _iNode = 0; _iNode < nodes.length; ++_iNode) {
                  var node = nodes[_iNode];
                  var outgoingTemplates = graph.getOutgoings(node);
                  var outgoingTransitions = [];
                  var fromNode = void 0;

                  if (node instanceof SubStateMachine) {
                    var subStateMachineInfo = subStateMachineInfos[_iNode];
                    assertIsNonNullable(subStateMachineInfo);
                    fromNode = subStateMachineInfo.exit;
                  } else {
                    var _nodeEval2 = nodeEvaluations[_iNode];
                    assertIsNonNullable(_nodeEval2);
                    fromNode = _nodeEval2;
                  }

                  var _loop = function _loop() {
                    var outgoing = _step3.value;
                    var outgoingNode = outgoing.to;
                    var iOutgoingNode = nodes.findIndex(function (nodeTemplate) {
                      return nodeTemplate === outgoing.to;
                    });

                    if (iOutgoingNode < 0) {
                      assertIsTrue(false, 'Bad animation data');
                    }

                    var toNode = void 0;

                    if (outgoingNode instanceof SubStateMachine) {
                      var _subStateMachineInfo = subStateMachineInfos[iOutgoingNode];
                      assertIsNonNullable(_subStateMachineInfo);
                      toNode = _subStateMachineInfo.entry;
                    } else {
                      var _nodeEval3 = nodeEvaluations[iOutgoingNode];
                      assertIsNonNullable(_nodeEval3);
                      toNode = _nodeEval3;
                    }

                    var conditions = outgoing.conditions.map(function (condition) {
                      return condition[createEval](context);
                    });
                    var transitionEval = {
                      conditions: conditions,
                      to: toNode,
                      triggers: undefined,
                      duration: 0.0,
                      normalizedDuration: false,
                      exitCondition: 0.0,
                      exitConditionEnabled: false
                    };

                    if (isAnimationTransition(outgoing)) {
                      transitionEval.duration = outgoing.duration;
                      transitionEval.normalizedDuration = outgoing.relativeDuration;
                      transitionEval.exitConditionEnabled = outgoing.exitConditionEnabled;
                      transitionEval.exitCondition = outgoing.exitCondition;
                    } else if (outgoing instanceof EmptyStateTransition) {
                      transitionEval.duration = outgoing.duration;
                    }

                    transitionEval.conditions.forEach(function (conditionEval, iCondition) {
                      var condition = outgoing.conditions[iCondition];

                      if (condition instanceof TriggerCondition && condition.trigger) {
                        var _transitionEval$trigg;

                        ((_transitionEval$trigg = transitionEval.triggers) !== null && _transitionEval$trigg !== void 0 ? _transitionEval$trigg : transitionEval.triggers = []).push(condition.trigger);
                      }
                    });
                    outgoingTransitions.push(transitionEval);
                  };

                  for (var _iterator3 = _createForOfIteratorHelperLoose(outgoingTemplates), _step3; !(_step3 = _iterator3()).done;) {
                    _loop();
                  }

                  fromNode.outgoingTransitions = outgoingTransitions;
                }

                return stateMachineInfo;
              };

              _proto2._eval = function _eval(deltaTime) {
                assertIsTrue(!this.exited);
                graphDebugGroup("[Layer " + this.name + "]: UpdateStart " + deltaTime + "s");

                var haltOnNonMotionState = this._continueDanglingTransition();

                if (haltOnNonMotionState) {
                  return 0.0;
                }

                var MAX_ITERATIONS = 100;
                var remainTimePiece = deltaTime;

                for (var continueNextIterationForce = true, iterations = 0; continueNextIterationForce || remainTimePiece > 0.0;) {
                  continueNextIterationForce = false;

                  if (iterations === MAX_ITERATIONS) {
                    warnID(14000, MAX_ITERATIONS);
                    break;
                  }

                  ++iterations;

                  if (this._currentTransitionPath.length > 0) {
                    var currentUpdatingConsume = this._updateCurrentTransition(remainTimePiece);

                    remainTimePiece -= currentUpdatingConsume;

                    if (this._currentNode.kind === NodeKind.exit) {
                      break;
                    }

                    if (this._currentTransitionPath.length === 0) {
                      continueNextIterationForce = true;
                    }

                    continue;
                  }

                  var currentNode = this._currentNode;

                  var transitionMatch = this._matchCurrentNodeTransition(remainTimePiece);

                  if (transitionMatch) {
                    var transition = transitionMatch.transition,
                        updateRequires = transitionMatch.requires;
                    graphDebug("[SubStateMachine " + this.name + "]: CurrentNodeUpdate: " + currentNode.name);

                    remainTimePiece -= updateRequires;

                    if (currentNode.kind === NodeKind.animation) {
                      currentNode.updateFromPort(updateRequires);
                      this._fromUpdated = true;
                    }

                    var ranIntoNonMotionState = this._switchTo(transition);

                    if (ranIntoNonMotionState) {
                      break;
                    }

                    continueNextIterationForce = true;
                  } else {
                    graphDebug("[SubStateMachine " + this.name + "]: CurrentNodeUpdate: " + currentNode.name);

                    if (currentNode.kind === NodeKind.animation) {
                      currentNode.updateFromPort(remainTimePiece);
                      this._fromUpdated = true;
                      remainTimePiece = 0.0;
                    } else {
                      remainTimePiece = 0.0;
                    }

                    continue;
                  }
                }

                graphDebug("[SubStateMachine " + this.name + "]: UpdateEnd");

                if (this._fromUpdated && this._currentNode.kind === NodeKind.animation) {
                  this._fromUpdated = false;

                  this._currentNode.triggerFromPortUpdate(this._controller);
                }

                if (this._currentTransitionToNode && this._toUpdated && this._currentTransitionToNode.kind === NodeKind.animation) {
                  this._toUpdated = false;

                  this._currentTransitionToNode.triggerToPortUpdate(this._controller);
                }

                return remainTimePiece;
              };

              _proto2._sample = function _sample() {
                var currentNode = this._currentNode,
                    currentTransitionToNode = this._currentTransitionToNode,
                    fromWeight = this._fromWeight,
                    toWeight = this._toWeight;

                if (currentNode.kind === NodeKind.empty) {
                  this.passthroughWeight = toWeight;

                  if (currentTransitionToNode && currentTransitionToNode.kind === NodeKind.animation) {
                    currentTransitionToNode.sampleToPort(1.0);
                  }
                } else if (currentTransitionToNode && currentTransitionToNode.kind === NodeKind.empty) {
                  this.passthroughWeight = fromWeight;

                  if (currentNode.kind === NodeKind.animation) {
                    currentNode.sampleFromPort(1.0);
                  }
                } else {
                  this.passthroughWeight = 1.0;

                  if (currentNode.kind === NodeKind.animation) {
                    currentNode.sampleFromPort(fromWeight);
                  }

                  if (currentTransitionToNode && currentTransitionToNode.kind === NodeKind.animation) {
                    currentTransitionToNode.sampleToPort(toWeight);
                  }
                }
              };

              _proto2._matchCurrentNodeTransition = function _matchCurrentNodeTransition(deltaTime) {
                var currentNode = this._currentNode;
                var minDeltaTimeRequired = Infinity;
                var transitionRequiringMinDeltaTime = null;

                var match0 = this._matchTransition(currentNode, currentNode, deltaTime, transitionMatchCacheRegular);

                if (match0) {
                  minDeltaTimeRequired = match0.requires;
                  transitionRequiringMinDeltaTime = match0.transition;
                }

                if (currentNode.kind === NodeKind.animation) {
                  for (var ancestor = currentNode.stateMachine; ancestor !== null; ancestor = ancestor.parent) {
                    var anyMatch = this._matchTransition(ancestor.any, currentNode, deltaTime, transitionMatchCacheAny);

                    if (anyMatch && anyMatch.requires < minDeltaTimeRequired) {
                      minDeltaTimeRequired = anyMatch.requires;
                      transitionRequiringMinDeltaTime = anyMatch.transition;
                    }
                  }
                }

                var result = transitionMatchCache;

                if (transitionRequiringMinDeltaTime) {
                  return result.set(transitionRequiringMinDeltaTime, minDeltaTimeRequired);
                }

                return null;
              };

              _proto2._matchTransition = function _matchTransition(node, realNode, deltaTime, result) {
                assertIsTrue(node === realNode || node.kind === NodeKind.any);
                var outgoingTransitions = node.outgoingTransitions;
                var nTransitions = outgoingTransitions.length;
                var minDeltaTimeRequired = Infinity;
                var transitionRequiringMinDeltaTime = null;

                for (var iTransition = 0; iTransition < nTransitions; ++iTransition) {
                  var transition = outgoingTransitions[iTransition];
                  var conditions = transition.conditions;
                  var nConditions = conditions.length;

                  if (nConditions === 0) {
                    if (node.kind === NodeKind.entry || node.kind === NodeKind.exit) {
                      return result.set(transition, 0.0);
                    }

                    if (!transition.exitConditionEnabled) {
                      continue;
                    }
                  }

                  var deltaTimeRequired = 0.0;

                  if (realNode.kind === NodeKind.animation && transition.exitConditionEnabled) {
                    var exitTime = realNode.duration * transition.exitCondition;
                    deltaTimeRequired = Math.max(exitTime - realNode.fromPortTime, 0.0);

                    if (deltaTimeRequired > deltaTime) {
                      continue;
                    }
                  }

                  var satisfied = true;

                  for (var iCondition = 0; iCondition < nConditions; ++iCondition) {
                    var condition = conditions[iCondition];

                    if (!condition.eval()) {
                      satisfied = false;
                      break;
                    }
                  }

                  if (!satisfied) {
                    continue;
                  }

                  if (deltaTimeRequired === 0.0) {
                    return result.set(transition, 0.0);
                  }

                  if (deltaTimeRequired < minDeltaTimeRequired) {
                    minDeltaTimeRequired = deltaTimeRequired;
                    transitionRequiringMinDeltaTime = transition;
                  }
                }

                if (transitionRequiringMinDeltaTime) {
                  return result.set(transitionRequiringMinDeltaTime, minDeltaTimeRequired);
                }

                return null;
              };

              _proto2._switchTo = function _switchTo(transition) {
                var currentNode = this._currentNode;
                graphDebugGroup("[SubStateMachine " + this.name + "]: STARTED " + currentNode.name + " -> " + transition.to.name + ".");
                var currentTransitionPath = this._currentTransitionPath;

                this._consumeTransition(transition);

                currentTransitionPath.push(transition);

                var motionNode = this._matchTransitionPathUntilMotion();

                if (motionNode) {
                  this._doTransitionToMotion(motionNode);

                  return false;
                } else {
                  return true;
                }
              };

              _proto2._continueDanglingTransition = function _continueDanglingTransition() {
                var currentTransitionPath = this._currentTransitionPath;
                var lenCurrentTransitionPath = currentTransitionPath.length;

                if (lenCurrentTransitionPath === 0) {
                  return false;
                }

                var lastTransition = currentTransitionPath[lenCurrentTransitionPath - 1];
                var tailNode = lastTransition.to;

                if (tailNode.kind !== NodeKind.animation && tailNode.kind !== NodeKind.empty) {
                  var motionNode = this._matchTransitionPathUntilMotion();

                  if (motionNode) {
                    this._doTransitionToMotion(motionNode);

                    return false;
                  } else {
                    return true;
                  }
                }

                return false;
              };

              _proto2._matchTransitionPathUntilMotion = function _matchTransitionPathUntilMotion() {
                var currentTransitionPath = this._currentTransitionPath;
                var lenCurrentTransitionPath = currentTransitionPath.length;
                assertIsTrue(lenCurrentTransitionPath !== 0);
                var lastTransition = currentTransitionPath[lenCurrentTransitionPath - 1];
                var tailNode = lastTransition.to;

                for (; tailNode.kind !== NodeKind.animation && tailNode.kind !== NodeKind.empty;) {
                  var transitionMatch = this._matchTransition(tailNode, tailNode, 0.0, transitionMatchCache);

                  if (!transitionMatch) {
                    break;
                  }

                  var transition = transitionMatch.transition;

                  this._consumeTransition(transition);

                  currentTransitionPath.push(transition);
                  tailNode = transition.to;
                }

                return tailNode.kind === NodeKind.animation || tailNode.kind === NodeKind.empty ? tailNode : null;
              };

              _proto2._consumeTransition = function _consumeTransition(transition) {
                var to = transition.to;

                if (to.kind === NodeKind.entry) {
                  this._callEnterMethods(to);
                }
              };

              _proto2._resetTriggersAlongThePath = function _resetTriggersAlongThePath() {
                var currentTransitionPath = this._currentTransitionPath;
                var nTransitions = currentTransitionPath.length;

                for (var iTransition = 0; iTransition < nTransitions; ++iTransition) {
                  var transition = currentTransitionPath[iTransition];

                  this._resetTriggersOnTransition(transition);
                }
              };

              _proto2._doTransitionToMotion = function _doTransitionToMotion(targetNode) {
                this._resetTriggersAlongThePath();

                this._transitionProgress = 0.0;
                this._currentTransitionToNode = targetNode;
                this._toUpdated = false;

                if (targetNode.kind === NodeKind.animation) {
                  targetNode.resetToPort();
                }

                this._callEnterMethods(targetNode);
              };

              _proto2._updateCurrentTransition = function _updateCurrentTransition(deltaTime) {
                var _toNode$name;

                var currentTransitionPath = this._currentTransitionPath,
                    currentTransitionToNode = this._currentTransitionToNode;
                assertIsNonNullable(currentTransitionPath.length > 0);
                assertIsNonNullable(currentTransitionToNode);
                var currentTransition = currentTransitionPath[0];
                var transitionDuration = currentTransition.duration,
                    normalizedDuration = currentTransition.normalizedDuration;
                var fromNode = this._currentNode;
                var toNode = currentTransitionToNode;
                var contrib = 0.0;
                var ratio = 0.0;

                if (transitionDuration <= 0) {
                  contrib = 0.0;
                  ratio = 1.0;
                } else {
                  assertIsTrue(fromNode.kind === NodeKind.animation || fromNode.kind === NodeKind.empty);
                  var transitionProgress = this._transitionProgress;
                  var durationSeconds = fromNode.kind === NodeKind.empty ? transitionDuration : normalizedDuration ? transitionDuration * fromNode.duration : transitionDuration;
                  var progressSeconds = transitionProgress * durationSeconds;
                  var remain = durationSeconds - progressSeconds;
                  assertIsTrue(remain >= 0.0);
                  contrib = Math.min(remain, deltaTime);
                  ratio = this._transitionProgress = (progressSeconds + contrib) / durationSeconds;
                  assertIsTrue(ratio >= 0.0 && ratio <= 1.0);
                }

                var toNodeName = (_toNode$name = toNode === null || toNode === void 0 ? void 0 : toNode.name) !== null && _toNode$name !== void 0 ? _toNode$name : '<Empty>';
                this._fromWeight = 1.0 - ratio;
                this._toWeight = ratio;
                var shouldUpdatePorts = contrib !== 0;
                var hasFinished = ratio === 1.0;

                if (fromNode.kind === NodeKind.animation && shouldUpdatePorts) {
                  graphDebugGroup("Update " + fromNode.name);
                  fromNode.updateFromPort(contrib);
                  this._fromUpdated = true;
                }

                if (toNode.kind === NodeKind.animation && shouldUpdatePorts) {
                  graphDebugGroup("Update " + toNode.name);
                  toNode.updateToPort(contrib);
                  this._toUpdated = true;
                }

                if (hasFinished) {
                  graphDebug("[SubStateMachine " + this.name + "]: Transition finished:  " + fromNode.name + " -> " + toNodeName + ".");

                  this._callExitMethods(fromNode);

                  var transitions = this._currentTransitionPath;
                  var nTransition = transitions.length;

                  for (var iTransition = 0; iTransition < nTransition; ++iTransition) {
                    var to = transitions[iTransition].to;

                    if (to.kind === NodeKind.exit) {
                      this._callExitMethods(to);
                    }
                  }

                  this._fromUpdated = this._toUpdated;
                  this._toUpdated = false;

                  if (toNode.kind === NodeKind.animation) {
                    toNode.finishTransition();
                  }

                  this._currentNode = toNode;
                  this._currentTransitionToNode = null;
                  this._currentTransitionPath.length = 0;
                  this._fromWeight = 1.0;
                  this._toWeight = 0.0;
                }

                return contrib;
              };

              _proto2._resetTriggersOnTransition = function _resetTriggersOnTransition(transition) {
                var triggers = transition.triggers;

                if (triggers) {
                  var nTriggers = triggers.length;

                  for (var iTrigger = 0; iTrigger < nTriggers; ++iTrigger) {
                    var trigger = triggers[iTrigger];

                    this._resetTrigger(trigger);
                  }
                }
              };

              _proto2._resetTrigger = function _resetTrigger(name) {
                var triggerResetFn = this._triggerReset;
                triggerResetFn(name);
              };

              _proto2._callEnterMethods = function _callEnterMethods(node) {
                var _node$stateMachine$co;

                var controller = this._controller;

                switch (node.kind) {
                  default:
                    break;

                  case NodeKind.animation:
                    {
                      node.components.callMotionStateEnterMethods(controller, node.getToPortStatus());
                      break;
                    }

                  case NodeKind.entry:
                    (_node$stateMachine$co = node.stateMachine.components) === null || _node$stateMachine$co === void 0 ? void 0 : _node$stateMachine$co.callStateMachineEnterMethods(controller);
                    break;
                }
              };

              _proto2._callExitMethods = function _callExitMethods(node) {
                var _node$stateMachine$co2;

                var controller = this._controller;

                switch (node.kind) {
                  default:
                    break;

                  case NodeKind.animation:
                    {
                      node.components.callMotionStateExitMethods(controller, node.getFromPortStatus());
                      break;
                    }

                  case NodeKind.exit:
                    (_node$stateMachine$co2 = node.stateMachine.components) === null || _node$stateMachine$co2 === void 0 ? void 0 : _node$stateMachine$co2.callStateMachineExitMethods(controller);
                    break;
                }
              };

              _createClass(LayerEval, [{
                key: "exited",
                get: function get() {
                  return this._currentNode === this._topLevelExit;
                }
              }]);

              return LayerEval;
            }();

            function createStateStatusCache() {
              return {
                progress: 0.0
              };
            }

            var emptyClipStatusesIterator = Object.freeze({
              next: function next() {
                return {
                  done: true,
                  value: undefined
                };
              }
            });
            var emptyClipStatusesIterable = Object.freeze((_Object$freeze = {}, _Object$freeze[Symbol.iterator] = function () {
              return emptyClipStatusesIterator;
            }, _Object$freeze));

            var TransitionMatchCache = function () {
              function TransitionMatchCache() {
                this.transition = null;
                this.requires = 0.0;
              }

              var _proto3 = TransitionMatchCache.prototype;

              _proto3.set = function set(transition, requires) {
                this.transition = transition;
                this.requires = requires;
                return this;
              };

              return TransitionMatchCache;
            }();

            var transitionMatchCache = new TransitionMatchCache();
            var transitionMatchCacheRegular = new TransitionMatchCache();
            var transitionMatchCacheAny = new TransitionMatchCache();
            var NodeKind;

            (function (NodeKind) {
              NodeKind[NodeKind["entry"] = 0] = "entry";
              NodeKind[NodeKind["exit"] = 1] = "exit";
              NodeKind[NodeKind["any"] = 2] = "any";
              NodeKind[NodeKind["animation"] = 3] = "animation";
              NodeKind[NodeKind["empty"] = 4] = "empty";
            })(NodeKind || (NodeKind = {}));

            var StateEval = function StateEval(node) {
              this.name = void 0;
              this.outgoingTransitions = [];
              this.name = node.name;
            };

            var InstantiatedComponents = function () {
              function InstantiatedComponents(node) {
                this._components = node.instantiateComponents();
              }

              var _proto4 = InstantiatedComponents.prototype;

              _proto4.callMotionStateEnterMethods = function callMotionStateEnterMethods(controller, status) {
                this._callMotionStateCallbackIfNonDefault('onMotionStateEnter', controller, status);
              };

              _proto4.callMotionStateUpdateMethods = function callMotionStateUpdateMethods(controller, status) {
                this._callMotionStateCallbackIfNonDefault('onMotionStateUpdate', controller, status);
              };

              _proto4.callMotionStateExitMethods = function callMotionStateExitMethods(controller, status) {
                this._callMotionStateCallbackIfNonDefault('onMotionStateExit', controller, status);
              };

              _proto4.callStateMachineEnterMethods = function callStateMachineEnterMethods(controller) {
                this._callStateMachineCallbackIfNonDefault('onStateMachineEnter', controller);
              };

              _proto4.callStateMachineExitMethods = function callStateMachineExitMethods(controller) {
                this._callStateMachineCallbackIfNonDefault('onStateMachineExit', controller);
              };

              _proto4._callMotionStateCallbackIfNonDefault = function _callMotionStateCallbackIfNonDefault(methodName, controller, status) {
                var components = this._components;
                var nComponents = components.length;

                for (var iComponent = 0; iComponent < nComponents; ++iComponent) {
                  var component = components[iComponent];

                  if (component[methodName] !== StateMachineComponent.prototype[methodName]) {
                    component[methodName](controller, status);
                  }
                }
              };

              _proto4._callStateMachineCallbackIfNonDefault = function _callStateMachineCallbackIfNonDefault(methodName, controller) {
                var components = this._components;
                var nComponents = components.length;

                for (var iComponent = 0; iComponent < nComponents; ++iComponent) {
                  var component = components[iComponent];

                  if (component[methodName] !== StateMachineComponent.prototype[methodName]) {
                    component[methodName](controller);
                  }
                }
              };

              return InstantiatedComponents;
            }();

            var MotionStateEval = function (_StateEval) {
              _inheritsLoose(MotionStateEval, _StateEval);

              function MotionStateEval(node, context) {
                var _node$motion$createEv, _node$motion;

                var _this3;

                _this3 = _StateEval.call(this, node) || this;
                _this3.kind = NodeKind.animation;
                _this3._source = null;
                _this3._baseSpeed = 1.0;
                _this3._speed = 1.0;
                _this3._fromPort = {
                  progress: 0.0,
                  statusCache: createStateStatusCache()
                };
                _this3._toPort = {
                  progress: 0.0,
                  statusCache: createStateStatusCache()
                };
                _this3._baseSpeed = node.speed;

                _this3._setSpeedMultiplier(1.0);

                if (node.speedMultiplierEnabled && node.speedMultiplier) {
                  var speedMultiplierVarName = node.speedMultiplier;
                  var varInstance = context.getVar(speedMultiplierVarName);

                  if (validateVariableExistence(varInstance, speedMultiplierVarName)) {
                    validateVariableType(varInstance.type, VariableType.FLOAT, speedMultiplierVarName);
                    varInstance.bind(_this3._setSpeedMultiplier, _assertThisInitialized(_this3));
                    var initialSpeedMultiplier = varInstance.value;

                    _this3._setSpeedMultiplier(initialSpeedMultiplier);
                  }
                }

                var sourceEvalContext = _extends({}, context);

                var sourceEval = (_node$motion$createEv = (_node$motion = node.motion) === null || _node$motion === void 0 ? void 0 : _node$motion[createEval](sourceEvalContext)) !== null && _node$motion$createEv !== void 0 ? _node$motion$createEv : null;

                if (sourceEval) {
                  Object.defineProperty(sourceEval, '__DEBUG_ID__', {
                    value: _this3.name
                  });
                }

                _this3._source = sourceEval;
                _this3.components = new InstantiatedComponents(node);
                return _this3;
              }

              var _proto5 = MotionStateEval.prototype;

              _proto5.updateFromPort = function updateFromPort(deltaTime) {
                this._fromPort.progress = calcProgressUpdate(this._fromPort.progress, this.duration, deltaTime * this._speed);
              };

              _proto5.updateToPort = function updateToPort(deltaTime) {
                this._toPort.progress = calcProgressUpdate(this._toPort.progress, this.duration, deltaTime * this._speed);
              };

              _proto5.triggerFromPortUpdate = function triggerFromPortUpdate(controller) {
                this.components.callMotionStateUpdateMethods(controller, this.getFromPortStatus());
              };

              _proto5.triggerToPortUpdate = function triggerToPortUpdate(controller) {
                this.components.callMotionStateUpdateMethods(controller, this.getToPortStatus());
              };

              _proto5.getFromPortStatus = function getFromPortStatus() {
                var stateStatus = this._fromPort.statusCache;

                {
                  stateStatus.__DEBUG_ID__ = this.name;
                }

                stateStatus.progress = normalizeProgress(this._fromPort.progress);
                return stateStatus;
              };

              _proto5.getToPortStatus = function getToPortStatus() {
                var stateStatus = this._toPort.statusCache;

                {
                  stateStatus.__DEBUG_ID__ = this.name;
                }

                stateStatus.progress = normalizeProgress(this._toPort.progress);
                return stateStatus;
              };

              _proto5.resetToPort = function resetToPort() {
                this._toPort.progress = 0.0;
              };

              _proto5.finishTransition = function finishTransition() {
                this._fromPort.progress = this._toPort.progress;
              };

              _proto5.sampleFromPort = function sampleFromPort(weight) {
                var _this$_source;

                (_this$_source = this._source) === null || _this$_source === void 0 ? void 0 : _this$_source.sample(this._fromPort.progress, weight);
              };

              _proto5.sampleToPort = function sampleToPort(weight) {
                var _this$_source2;

                (_this$_source2 = this._source) === null || _this$_source2 === void 0 ? void 0 : _this$_source2.sample(this._toPort.progress, weight);
              };

              _proto5.getClipStatuses = function getClipStatuses(baseWeight) {
                var source = this._source;

                if (!source) {
                  return emptyClipStatusesIterable;
                } else {
                  var _ref;

                  return _ref = {}, _ref[Symbol.iterator] = function () {
                    return source.getClipStatuses(baseWeight);
                  }, _ref;
                }
              };

              _proto5._setSpeedMultiplier = function _setSpeedMultiplier(value) {
                this._speed = this._baseSpeed * value;
              };

              _createClass(MotionStateEval, [{
                key: "duration",
                get: function get() {
                  var _this$_source$duratio, _this$_source3;

                  return (_this$_source$duratio = (_this$_source3 = this._source) === null || _this$_source3 === void 0 ? void 0 : _this$_source3.duration) !== null && _this$_source$duratio !== void 0 ? _this$_source$duratio : 0.0;
                }
              }, {
                key: "fromPortTime",
                get: function get() {
                  return this._fromPort.progress * this.duration;
                }
              }]);

              return MotionStateEval;
            }(StateEval);

            function calcProgressUpdate(currentProgress, duration, deltaTime) {
              if (duration === 0.0) {
                return 0.0;
              }

              var progress = currentProgress + deltaTime / duration;
              return progress;
            }

            function normalizeProgress(progress) {
              return progress - Math.trunc(progress);
            }

            var SpecialStateEval = function (_StateEval2) {
              _inheritsLoose(SpecialStateEval, _StateEval2);

              function SpecialStateEval(node, kind, name) {
                var _this4;

                _this4 = _StateEval2.call(this, node) || this;
                _this4.kind = void 0;
                _this4.kind = kind;
                return _this4;
              }

              return SpecialStateEval;
            }(StateEval);
            var EmptyStateEval = function (_StateEval3) {
              _inheritsLoose(EmptyStateEval, _StateEval3);

              function EmptyStateEval(node) {
                var _this5;

                _this5 = _StateEval3.call(this, node) || this;
                _this5.kind = NodeKind.empty;
                return _this5;
              }

              return EmptyStateEval;
            }(StateEval);

            var _dec$R, _dec2$D, _dec3$r, _class$R, _class2$I, _descriptor$G, _temp$K;
            var AnimationController = (_dec$R = ccclass('cc.animation.AnimationController'), _dec2$D = menu$1(), _dec3$r = property$1(AnimationGraph), _dec$R(_class$R = _dec2$D(_class$R = (_class2$I = (_temp$K = function (_Component) {
              _inheritsLoose(AnimationController, _Component);

              function AnimationController() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "graph", _descriptor$G, _assertThisInitialized(_this));

                _this._graphEval = null;
                return _this;
              }

              var _proto = AnimationController.prototype;

              _proto.__preload = function __preload() {
                if (this.graph) {
                  this._graphEval = new AnimationGraphEval(this.graph, this.node, this);
                }
              };

              _proto.update = function update(deltaTime) {
                var _this$_graphEval;

                (_this$_graphEval = this._graphEval) === null || _this$_graphEval === void 0 ? void 0 : _this$_graphEval.update(deltaTime);
              };

              _proto.getVariables = function getVariables() {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.getVariables();
              };

              _proto.setValue = function setValue(name, value) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                graphEval.setValue(name, value);
              };

              _proto.getValue = function getValue(name) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.getValue(name);
              };

              _proto.getCurrentStateStatus = function getCurrentStateStatus(layer) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.getCurrentStateStatus(layer);
              };

              _proto.getCurrentClipStatuses = function getCurrentClipStatuses(layer) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.getCurrentClipStatuses(layer);
              };

              _proto.getCurrentTransition = function getCurrentTransition(layer) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.getCurrentTransition(layer);
              };

              _proto.getNextStateStatus = function getNextStateStatus(layer) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.getNextStateStatus(layer);
              };

              _proto.getNextClipStatuses = function getNextClipStatuses(layer) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.getNextClipStatuses(layer);
              };

              _proto.setLayerWeight = function setLayerWeight(layer, weight) {
                var graphEval = this._graphEval;
                assertIsNonNullable(graphEval);
                return graphEval.setLayerWeight(layer, weight);
              };

              return AnimationController;
            }(Component), _temp$K), (_descriptor$G = _applyDecoratedDescriptor(_class2$I.prototype, "graph", [_dec3$r], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$I)) || _class$R) || _class$R);

            var animation = /*#__PURE__*/Object.freeze({
                __proto__: null,
                UniformProxyFactory: UniformProxyFactory,
                MorphWeightValueProxy: MorphWeightValueProxy,
                MorphWeightsValueProxy: MorphWeightsValueProxy,
                MorphWeightsAllValueProxy: MorphWeightsAllValueProxy,
                Track: Track,
                TrackPath: TrackPath,
                RealTrack: RealTrack,
                VectorTrack: VectorTrack,
                QuatTrack: QuatTrack,
                ColorTrack: ColorTrack,
                SizeTrack: SizeTrack,
                ObjectTrack: ObjectTrack,
                isPropertyPath: isPropertyPath,
                isCustomPath: isCustomPath,
                HierarchyPath: HierarchyPath,
                ComponentPath: ComponentPath,
                CubicSplineVec2Value: CubicSplineVec2Value,
                CubicSplineVec3Value: CubicSplineVec3Value,
                CubicSplineVec4Value: CubicSplineVec4Value,
                CubicSplineQuatValue: CubicSplineQuatValue,
                CubicSplineNumberValue: CubicSplineNumberValue,
                AnimationController: AnimationController,
                get VariableType () { return VariableType; },
                StateMachineComponent: StateMachineComponent
            });
            exports('animation', animation);

            var _class$S, _class2$J, _temp$L;
            var AnimationManager = exports('AnimationManager', ccclass(_class$S = (_temp$L = _class2$J = function (_System) {
              _inheritsLoose(AnimationManager, _System);

              function AnimationManager() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _System.call.apply(_System, [this].concat(args)) || this;
                _this._anims = new MutableForwardIterator([]);
                _this._crossFades = new MutableForwardIterator([]);
                _this._delayEvents = [];
                _this._blendStateBuffer = new LegacyBlendStateBuffer();
                _this._sockets = [];
                return _this;
              }

              var _proto = AnimationManager.prototype;

              _proto.addCrossFade = function addCrossFade(crossFade) {
                var index = this._crossFades.array.indexOf(crossFade);

                if (index === -1) {
                  this._crossFades.push(crossFade);
                }
              };

              _proto.removeCrossFade = function removeCrossFade(crossFade) {
                var index = this._crossFades.array.indexOf(crossFade);

                if (index >= 0) {
                  this._crossFades.fastRemoveAt(index);
                } else {
                  errorID(3907);
                }
              };

              _proto.update = function update(dt) {
                var _delayEvents = this._delayEvents,
                    crossFadesIter = this._crossFades,
                    _sockets = this._sockets;
                {
                  var crossFades = crossFadesIter.array;

                  for (crossFadesIter.i = 0; crossFadesIter.i < crossFades.length; ++crossFadesIter.i) {
                    var crossFade = crossFades[crossFadesIter.i];
                    crossFade.update(dt);
                  }
                }
                var iterator = this._anims;
                var array = iterator.array;

                for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                  var anim = array[iterator.i];

                  if (!anim.isMotionless) {
                    anim.update(dt);
                  }
                }

                this._blendStateBuffer.apply();

                var stamp = legacyCC.director.getTotalFrames();

                for (var i = 0, l = _sockets.length; i < l; i++) {
                  var _sockets$i = _sockets[i],
                      target = _sockets$i.target,
                      transform = _sockets$i.transform;
                  target.matrix = getWorldMatrix(transform, stamp);
                }

                for (var _i = 0, _l = _delayEvents.length; _i < _l; _i++) {
                  var event = _delayEvents[_i];
                  event.fn.apply(event.thisArg, event.args);
                }

                _delayEvents.length = 0;
              };

              _proto.destruct = function destruct() {};

              _proto.addAnimation = function addAnimation(anim) {
                var index = this._anims.array.indexOf(anim);

                if (index === -1) {
                  this._anims.push(anim);
                }
              };

              _proto.removeAnimation = function removeAnimation(anim) {
                var index = this._anims.array.indexOf(anim);

                if (index >= 0) {
                  this._anims.fastRemoveAt(index);
                } else {
                  errorID(3907);
                }
              };

              _proto.pushDelayEvent = function pushDelayEvent(fn, thisArg, args) {
                this._delayEvents.push({
                  fn: fn,
                  thisArg: thisArg,
                  args: args
                });
              };

              _proto.addSockets = function addSockets(root, sockets) {
                var _this2 = this;

                var _loop = function _loop(i) {
                  var socket = sockets[i];

                  if (_this2._sockets.find(function (s) {
                    return s.target === socket.target;
                  })) {
                    return "continue";
                  }

                  var targetNode = root.getChildByPath(socket.path);
                  var transform = socket.target && targetNode && getTransform(targetNode, root);

                  if (transform) {
                    _this2._sockets.push({
                      target: socket.target,
                      transform: transform
                    });
                  }
                };

                for (var i = 0; i < sockets.length; ++i) {
                  var _ret = _loop(i);

                  if (_ret === "continue") continue;
                }
              };

              _proto.removeSockets = function removeSockets(root, sockets) {
                for (var i = 0; i < sockets.length; ++i) {
                  var socketToRemove = sockets[i];

                  for (var j = 0; j < this._sockets.length; ++j) {
                    var socket = this._sockets[j];

                    if (socket.target === socketToRemove.target) {
                      deleteTransform(socket.transform.node);
                      this._sockets[j] = this._sockets[this._sockets.length - 1];
                      this._sockets.length--;
                      break;
                    }
                  }
                }
              };

              _createClass(AnimationManager, [{
                key: "blendState",
                get: function get() {
                  return this._blendStateBuffer;
                }
              }]);

              return AnimationManager;
            }(System), _class2$J.ID = 'animation', _temp$L)) || _class$S);
            director.on(Director.EVENT_INIT, function () {
              var animationManager = new AnimationManager();
              director.registerSystem(AnimationManager.ID, animationManager, System.Priority.HIGH);
            });
            legacyCC.AnimationManager = AnimationManager;

            var CrossFade = function (_Playable) {
              _inheritsLoose(CrossFade, _Playable);

              function CrossFade(scheduler) {
                var _this;

                _this = _Playable.call(this) || this;
                _this._managedStates = [];
                _this._fadings = [];
                _this._scheduled = false;
                _this._scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : getGlobalAnimationManager();
                return _this;
              }

              var _proto = CrossFade.prototype;

              _proto.update = function update(deltaTime) {
                if (this.isMotionless) {
                  return;
                }

                var managedStates = this._managedStates;
                var fadings = this._fadings;

                if (managedStates.length === 1 && fadings.length === 1) {
                  var state = managedStates[0].state;

                  if (state) {
                    state.weight = 1.0;
                  }
                } else {
                  this._calculateWeights(deltaTime);
                }

                if (managedStates.length === 1 && fadings.length === 1) {
                  this._unscheduleThis();
                }
              };

              _proto.crossFade = function crossFade(state, duration) {
                var _target$state;

                if (this._managedStates.length === 0) {
                  duration = 0;
                }

                if (duration === 0) {
                  this.clear();
                }

                var target = this._managedStates.find(function (weightedState) {
                  return weightedState.state === state;
                });

                if (!target) {
                  target = {
                    state: state,
                    reference: 0
                  };

                  if (state) {
                    state.play();
                  }

                  this._managedStates.push(target);
                } else if ((_target$state = target.state) === null || _target$state === void 0 ? void 0 : _target$state.isMotionless) {
                  target.state.play();
                }

                ++target.reference;

                this._fadings.unshift({
                  easeDuration: duration,
                  easeTime: 0,
                  target: target
                });

                if (!this.isMotionless) {
                  this._scheduleThis();
                }
              };

              _proto.clear = function clear() {
                for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
                  var state = this._managedStates[iManagedState].state;

                  if (state) {
                    state.stop();
                  }
                }

                this._managedStates.length = 0;
                this._fadings.length = 0;
              };

              _proto.onPlay = function onPlay() {
                _Playable.prototype.onPlay.call(this);

                this._scheduleThis();
              };

              _proto.onPause = function onPause() {
                _Playable.prototype.onPause.call(this);

                for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
                  var state = this._managedStates[iManagedState].state;

                  if (state) {
                    state.pause();
                  }
                }

                this._unscheduleThis();
              };

              _proto.onResume = function onResume() {
                _Playable.prototype.onResume.call(this);

                for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
                  var state = this._managedStates[iManagedState].state;

                  if (state) {
                    state.resume();
                  }
                }

                this._scheduleThis();
              };

              _proto.onStop = function onStop() {
                _Playable.prototype.onStop.call(this);

                this.clear();
              };

              _proto._calculateWeights = function _calculateWeights(deltaTime) {
                var managedStates = this._managedStates;
                var fadings = this._fadings;

                for (var iManagedState = 0; iManagedState < managedStates.length; ++iManagedState) {
                  var state = managedStates[iManagedState].state;

                  if (state) {
                    state.weight = 0;
                  }
                }

                var absoluteWeight = 1.0;
                var deadFadingBegin = fadings.length;

                for (var iFading = 0; iFading < fadings.length; ++iFading) {
                  var fading = fadings[iFading];
                  fading.easeTime += deltaTime;
                  var relativeWeight = fading.easeDuration === 0 ? 1 : clamp01(fading.easeTime / fading.easeDuration);
                  var weight = relativeWeight * absoluteWeight;
                  absoluteWeight *= 1.0 - relativeWeight;

                  if (fading.target.state) {
                    fading.target.state.weight += weight;
                  }

                  if (fading.easeTime >= fading.easeDuration) {
                    deadFadingBegin = iFading + 1;
                    fading.easeTime = fading.easeDuration;
                    break;
                  }
                }

                if (deadFadingBegin !== fadings.length) {
                  for (var iDeadFading = deadFadingBegin; iDeadFading < fadings.length; ++iDeadFading) {
                    var deadFading = fadings[iDeadFading];
                    --deadFading.target.reference;

                    if (deadFading.target.reference <= 0) {
                      if (deadFading.target.state) {
                        deadFading.target.state.stop();
                      }

                      remove(this._managedStates, deadFading.target);
                    }
                  }

                  fadings.splice(deadFadingBegin);
                }
              };

              _proto._scheduleThis = function _scheduleThis() {
                if (!this._scheduled) {
                  this._scheduler.addCrossFade(this);

                  this._scheduled = true;
                }
              };

              _proto._unscheduleThis = function _unscheduleThis() {
                if (this._scheduled) {
                  this._scheduler.removeCrossFade(this);

                  this._scheduled = false;
                }
              };

              return CrossFade;
            }(Playable);

            var _dec$S, _dec2$E, _dec3$s, _dec4$o, _dec5$m, _dec6$j, _dec7$j, _dec8$h, _dec9$d, _dec10$c, _class$T, _class2$K, _descriptor$H, _descriptor2$A, _descriptor3$q, _class3$9, _temp$M;
            var Animation = function (v) { return exports({ Animation: v, AnimationComponent: v }), v; }((_dec$S = ccclass('cc.Animation'), _dec2$E = help(), _dec3$s = executionOrder(99), _dec4$o = menu$1(), _dec5$m = type$1([AnimationClip]), _dec6$j = tooltip(), _dec7$j = type$1(AnimationClip), _dec8$h = tooltip(), _dec9$d = tooltip(), _dec10$c = type$1([AnimationClip]), _dec$S(_class$T = _dec2$E(_class$T = _dec3$s(_class$T = executeInEditMode(_class$T = _dec4$o(_class$T = (_class2$K = (_temp$M = _class3$9 = function (_Eventify) {
              _inheritsLoose(Animation, _Eventify);

              function Animation() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Eventify.call.apply(_Eventify, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "playOnLoad", _descriptor$H, _assertThisInitialized(_this));

                _this._crossFade = new CrossFade();
                _this._nameToState = createMap(true);

                _initializerDefineProperty(_this, "_clips", _descriptor2$A, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_defaultClip", _descriptor3$q, _assertThisInitialized(_this));

                _this._hasBeenPlayed = false;
                return _this;
              }

              var _proto = Animation.prototype;

              _proto.onLoad = function onLoad() {
                this.clips = this._clips;

                for (var stateName in this._nameToState) {
                  var state = this._nameToState[stateName];
                  state.initialize(this.node);
                }
              };

              _proto.start = function start() {
                if ( this.playOnLoad && !this._hasBeenPlayed && this._defaultClip) {
                  this.crossFade(this._defaultClip.name, 0);
                }
              };

              _proto.onEnable = function onEnable() {
                this._crossFade.resume();
              };

              _proto.onDisable = function onDisable() {
                this._crossFade.pause();
              };

              _proto.onDestroy = function onDestroy() {
                this._crossFade.stop();

                for (var name in this._nameToState) {
                  var state = this._nameToState[name];
                  state.destroy();
                }

                this._nameToState = createMap(true);
              };

              _proto.play = function play(name) {
                this._hasBeenPlayed = true;

                if (!name) {
                  if (!this._defaultClip) {
                    return;
                  }

                  name = this._defaultClip.name;
                }

                this.crossFade(name, 0);
              };

              _proto.crossFade = function crossFade(name, duration) {
                if (duration === void 0) {
                  duration = 0.3;
                }

                this._hasBeenPlayed = true;
                var state = this._nameToState[name];

                if (state) {
                  this.doPlayOrCrossFade(state, duration);
                }
              };

              _proto.pause = function pause() {
                this._crossFade.pause();
              };

              _proto.resume = function resume() {
                this._crossFade.resume();
              };

              _proto.stop = function stop() {
                this._crossFade.stop();
              };

              _proto.getState = function getState(name) {
                var state = this._nameToState[name];

                if (state && !state.curveLoaded) {
                  state.initialize(this.node);
                }

                return state || null;
              };

              _proto.createState = function createState(clip, name) {
                name = name || clip.name;
                this.removeState(name);
                return this._doCreateState(clip, name);
              };

              _proto.removeState = function removeState(name) {
                var state = this._nameToState[name];

                if (state) {
                  state.allowLastFrameEvent(false);
                  state.stop();
                  delete this._nameToState[name];
                }
              };

              _proto.addClip = function addClip(clip, name) {
                if (!contains(this._clips, clip)) {
                  this._clips.push(clip);
                }

                return this.createState(clip, name);
              };

              _proto.removeClip = function removeClip(clip, force) {
                var removalState;

                for (var name in this._nameToState) {
                  var state = this._nameToState[name];
                  var stateClip = state.clip;

                  if (stateClip === clip) {
                    removalState = state;
                    break;
                  }
                }

                if (clip === this._defaultClip) {
                  if (force) {
                    this._defaultClip = null;
                  } else {
                    {
                      warnID(3902);
                    }

                    return;
                  }
                }

                if (removalState && removalState.isPlaying) {
                  if (force) {
                    removalState.stop();
                  } else {
                    {
                      warnID(3903);
                    }

                    return;
                  }
                }

                this._clips = this._clips.filter(function (item) {
                  return item !== clip;
                });

                if (removalState) {
                  delete this._nameToState[removalState.name];
                }
              };

              _proto.on = function on(type, callback, thisArg, once) {
                var ret = _Eventify.prototype.on.call(this, type, callback, thisArg, once);

                if (type === EventType$1.LASTFRAME) {
                  this._syncAllowLastFrameEvent();
                }

                return ret;
              };

              _proto.once = function once(type, callback, thisArg) {
                var ret = _Eventify.prototype.once.call(this, type, callback, thisArg);

                if (type === EventType$1.LASTFRAME) {
                  this._syncAllowLastFrameEvent();
                }

                return ret;
              };

              _proto.off = function off(type, callback, thisArg) {
                _Eventify.prototype.off.call(this, type, callback, thisArg);

                if (type === EventType$1.LASTFRAME) {
                  this._syncDisallowLastFrameEvent();
                }
              };

              _proto._createState = function _createState(clip, name) {
                return new AnimationState(clip, name);
              };

              _proto._doCreateState = function _doCreateState(clip, name) {
                var state = this._createState(clip, name);

                state._setEventTarget(this);

                state.allowLastFrameEvent(this.hasEventListener(EventType$1.LASTFRAME));

                if (this.node) {
                  state.initialize(this.node);
                }

                this._nameToState[state.name] = state;
                return state;
              };

              _proto.doPlayOrCrossFade = function doPlayOrCrossFade(state, duration) {
                this._crossFade.play();

                this._crossFade.crossFade(state, duration);
              };

              _proto._removeStateOfAutomaticClip = function _removeStateOfAutomaticClip(clip) {
                for (var name in this._nameToState) {
                  var state = this._nameToState[name];

                  if (equalClips(clip, state.clip)) {
                    state.stop();
                    delete this._nameToState[name];
                  }
                }
              };

              _proto._syncAllowLastFrameEvent = function _syncAllowLastFrameEvent() {
                if (this.hasEventListener(EventType$1.LASTFRAME)) {
                  for (var stateName in this._nameToState) {
                    this._nameToState[stateName].allowLastFrameEvent(true);
                  }
                }
              };

              _proto._syncDisallowLastFrameEvent = function _syncDisallowLastFrameEvent() {
                if (!this.hasEventListener(EventType$1.LASTFRAME)) {
                  for (var stateName in this._nameToState) {
                    this._nameToState[stateName].allowLastFrameEvent(false);
                  }
                }
              };

              _createClass(Animation, [{
                key: "clips",
                get: function get() {
                  return this._clips;
                },
                set: function set(value) {
                  var _this2 = this;

                  if (this._crossFade) {
                    this._crossFade.clear();
                  }

                  for (var _iterator = _createForOfIteratorHelperLoose(this._clips), _step; !(_step = _iterator()).done;) {
                    var clip = _step.value;

                    if (clip) {
                      this._removeStateOfAutomaticClip(clip);
                    }
                  }

                  for (var _iterator2 = _createForOfIteratorHelperLoose(value), _step2; !(_step2 = _iterator2()).done;) {
                    var _clip = _step2.value;

                    if (_clip) {
                      this.createState(_clip);
                    }
                  }

                  var newDefaultClip = value.find(function (clip) {
                    return equalClips(clip, _this2._defaultClip);
                  });

                  if (newDefaultClip) {
                    this._defaultClip = newDefaultClip;
                  } else {
                    this._defaultClip = null;
                  }

                  this._clips = value;
                }
              }, {
                key: "defaultClip",
                get: function get() {
                  return this._defaultClip;
                },
                set: function set(value) {
                  this._defaultClip = value;

                  if (!value) {
                    return;
                  }

                  var isBoundedDefaultClip = this._clips.findIndex(function (clip) {
                    return equalClips(clip, value);
                  }) >= 0;

                  if (!isBoundedDefaultClip) {
                    this._clips.push(value);

                    this.createState(value);
                  }
                }
              }]);

              return Animation;
            }(Eventify(Component)), _class3$9.EventType = EventType$1, _temp$M), (_applyDecoratedDescriptor(_class2$K.prototype, "clips", [_dec5$m, _dec6$j], Object.getOwnPropertyDescriptor(_class2$K.prototype, "clips"), _class2$K.prototype), _applyDecoratedDescriptor(_class2$K.prototype, "defaultClip", [_dec7$j, _dec8$h], Object.getOwnPropertyDescriptor(_class2$K.prototype, "defaultClip"), _class2$K.prototype), _descriptor$H = _applyDecoratedDescriptor(_class2$K.prototype, "playOnLoad", [serializable, _dec9$d], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$A = _applyDecoratedDescriptor(_class2$K.prototype, "_clips", [_dec10$c], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor3$q = _applyDecoratedDescriptor(_class2$K.prototype, "_defaultClip", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$K)) || _class$T) || _class$T) || _class$T) || _class$T) || _class$T));

            function equalClips(clip1, clip2) {
              if (clip1 === clip2) {
                return true;
              }

              return !!clip1 && !!clip2 && clip1._uuid === clip2._uuid && clip1._uuid;
            }

            legacyCC.Animation = Animation;
            legacyCC.AnimationComponent = Animation;
            js.setClassAlias(Animation, 'cc.AnimationComponent');

            legacyCC.easing = easing;

            var AudioEvent;

            (function (AudioEvent) {
              AudioEvent["PLAYED"] = "play";
              AudioEvent["PAUSED"] = "pause";
              AudioEvent["STOPPED"] = "stop";
              AudioEvent["SEEKED"] = "seeked";
              AudioEvent["ENDED"] = "ended";
              AudioEvent["INTERRUPTION_BEGIN"] = "interruptionBegin";
              AudioEvent["INTERRUPTION_END"] = "interruptionEnd";
              AudioEvent["USER_GESTURE"] = "on_gesture";
            })(AudioEvent || (AudioEvent = {}));

            var AudioType;

            (function (AudioType) {
              AudioType[AudioType["DOM_AUDIO"] = 0] = "DOM_AUDIO";
              AudioType[AudioType["WEB_AUDIO"] = 1] = "WEB_AUDIO";
              AudioType[AudioType["MINIGAME_AUDIO"] = 2] = "MINIGAME_AUDIO";
              AudioType[AudioType["NATIVE_AUDIO"] = 3] = "NATIVE_AUDIO";
              AudioType[AudioType["UNKNOWN_AUDIO"] = 4] = "UNKNOWN_AUDIO";
            })(AudioType || (AudioType = {}));

            var AudioState;

            (function (AudioState) {
              AudioState[AudioState["INIT"] = 0] = "INIT";
              AudioState[AudioState["PLAYING"] = 1] = "PLAYING";
              AudioState[AudioState["PAUSED"] = 2] = "PAUSED";
              AudioState[AudioState["STOPPED"] = 3] = "STOPPED";
              AudioState[AudioState["INTERRUPTED"] = 4] = "INTERRUPTED";
            })(AudioState || (AudioState = {}));

            var operationId = 0;

            function _tryCallingRecursively(target, opInfo) {
              var _opInfo$func;

              if (opInfo.invoking) {
                return;
              }

              opInfo.invoking = true;

              (_opInfo$func = opInfo.func).call.apply(_opInfo$func, [target].concat(opInfo.args)).then(function () {
                opInfo.invoking = false;

                target._operationQueue.shift();

                target._eventTarget.emit(opInfo.id.toString());

                var nextOpInfo = target._operationQueue[0];
                nextOpInfo && _tryCallingRecursively(target, nextOpInfo);
              })["catch"](function (e) {});
            }

            function enqueueOperation(target, propertyKey, descriptor) {
              var originalOperation = descriptor.value;

              descriptor.value = function () {
                var _this = this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return new Promise(function (resolve) {
                  var id = operationId++;
                  var instance = _this;

                  instance._operationQueue.push({
                    id: id,
                    func: originalOperation,
                    args: args,
                    invoking: false
                  });

                  instance._eventTarget.once(id.toString(), resolve);

                  var opInfo = instance._operationQueue[0];

                  _tryCallingRecursively(instance, opInfo);
                });
              };
            }

            var _class$U, _temp$N;

            function ensurePlaying(domAudio) {
              return new Promise(function (resolve) {
                var promise = domAudio.play();

                if (promise === undefined) {
                  return resolve();
                }

                promise.then(resolve)["catch"](function () {
                  var onGesture = function onGesture() {
                    domAudio.play()["catch"](function (e) {});
                    resolve();
                  };

                  var canvas = document.getElementById('GameCanvas');
                  canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('touchend', onGesture, {
                    once: true
                  });
                  canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('mousedown', onGesture, {
                    once: true
                  });
                });
                return null;
              });
            }

            var OneShotAudioDOM = function () {
              function OneShotAudioDOM(nativeAudio, volume) {
                this._domAudio = void 0;
                this._onPlayCb = void 0;
                this._onEndCb = void 0;
                this._domAudio = nativeAudio;
                nativeAudio.volume = volume;
              }

              var _proto = OneShotAudioDOM.prototype;

              _proto.play = function play() {
                var _this = this;

                ensurePlaying(this._domAudio).then(function () {
                  var _this$onPlay;

                  (_this$onPlay = _this.onPlay) === null || _this$onPlay === void 0 ? void 0 : _this$onPlay.call(_this);
                })["catch"](function (e) {});
              };

              _proto.stop = function stop() {
                this._domAudio.pause();
              };

              _createClass(OneShotAudioDOM, [{
                key: "onPlay",
                get: function get() {
                  return this._onPlayCb;
                },
                set: function set(cb) {
                  this._onPlayCb = cb;
                }
              }, {
                key: "onEnd",
                get: function get() {
                  return this._onEndCb;
                },
                set: function set(cb) {
                  if (this._onEndCb) {
                    this._domAudio.removeEventListener('ended', this._onEndCb);
                  }

                  this._onEndCb = cb;

                  if (cb) {
                    this._domAudio.addEventListener('ended', cb);
                  }
                }
              }]);

              return OneShotAudioDOM;
            }();
            var AudioPlayerDOM = (_class$U = (_temp$N = function () {
              function AudioPlayerDOM(nativeAudio) {
                var _this2 = this;

                this._domAudio = void 0;
                this._state = AudioState.INIT;
                this._onEnded = void 0;
                this._eventTarget = new EventTarget();
                this._operationQueue = [];
                this._domAudio = nativeAudio;
                systemInfo.on('hide', this._onHide, this);
                systemInfo.on('show', this._onShow, this);

                this._onEnded = function () {
                  _this2.seek(0)["catch"](function (e) {});

                  _this2._state = AudioState.INIT;

                  _this2._eventTarget.emit(AudioEvent.ENDED);
                };

                this._domAudio.addEventListener('ended', this._onEnded);
              }

              var _proto2 = AudioPlayerDOM.prototype;

              _proto2.destroy = function destroy() {
                systemInfo.off('hide', this._onHide, this);
                systemInfo.off('show', this._onShow, this);

                this._domAudio.removeEventListener('ended', this._onEnded);

                this._domAudio = null;
              };

              AudioPlayerDOM.load = function load(url) {
                return new Promise(function (resolve) {
                  AudioPlayerDOM.loadNative(url).then(function (domAudio) {
                    resolve(new AudioPlayerDOM(domAudio));
                  })["catch"](function (e) {});
                });
              };

              AudioPlayerDOM.loadNative = function loadNative(url) {
                return new Promise(function (resolve, reject) {
                  var domAudio = document.createElement('audio');
                  var loadedEvent = 'canplaythrough';

                  if (systemInfo.os === OS.IOS) {
                    loadedEvent = 'loadedmetadata';
                  } else if (systemInfo.browserType === BrowserType.FIREFOX) {
                    loadedEvent = 'canplay';
                  }

                  var timer = setTimeout(function () {
                    if (domAudio.readyState === 0) {
                      failure();
                    } else {
                      success();
                    }
                  }, 8000);

                  var clearEvent = function clearEvent() {
                    clearTimeout(timer);
                    domAudio.removeEventListener(loadedEvent, success, false);
                    domAudio.removeEventListener('error', failure, false);
                  };

                  var success = function success() {
                    clearEvent();
                    resolve(domAudio);
                  };

                  var failure = function failure() {
                    clearEvent();
                    var message = "load audio failure - " + url;
                    reject(message);
                  };

                  domAudio.addEventListener(loadedEvent, success, false);
                  domAudio.addEventListener('error', failure, false);
                  domAudio.src = url;
                });
              };

              AudioPlayerDOM.loadOneShotAudio = function loadOneShotAudio(url, volume) {
                return new Promise(function (resolve, reject) {
                  AudioPlayerDOM.loadNative(url).then(function (domAudio) {
                    var oneShotAudio = new OneShotAudioDOM(domAudio, volume);
                    resolve(oneShotAudio);
                  })["catch"](reject);
                });
              };

              _proto2._onHide = function _onHide() {
                var _this3 = this;

                if (this._state === AudioState.PLAYING) {
                  this.pause().then(function () {
                    _this3._state = AudioState.INTERRUPTED;

                    _this3._eventTarget.emit(AudioEvent.INTERRUPTION_BEGIN);
                  })["catch"](function (e) {});
                }
              };

              _proto2._onShow = function _onShow() {
                var _this4 = this;

                if (this._state === AudioState.INTERRUPTED) {
                  this.play().then(function () {
                    _this4._eventTarget.emit(AudioEvent.INTERRUPTION_END);
                  })["catch"](function (e) {});
                }
              };

              _proto2.seek = function seek(time) {
                time = clamp$1(time, 0, this.duration);
                this._domAudio.currentTime = time;
                return Promise.resolve();
              };

              _proto2.play = function play() {
                var _this5 = this;

                return new Promise(function (resolve) {
                  ensurePlaying(_this5._domAudio).then(function () {
                    _this5._state = AudioState.PLAYING;
                    resolve();
                  })["catch"](function (e) {});
                });
              };

              _proto2.pause = function pause() {
                this._domAudio.pause();

                this._state = AudioState.PAUSED;
                return Promise.resolve();
              };

              _proto2.stop = function stop() {
                var _this6 = this;

                return new Promise(function (resolve) {
                  _this6._domAudio.pause();

                  _this6._domAudio.currentTime = 0;
                  _this6._state = AudioState.STOPPED;
                  resolve();
                });
              };

              _proto2.onInterruptionBegin = function onInterruptionBegin(cb) {
                this._eventTarget.on(AudioEvent.INTERRUPTION_BEGIN, cb);
              };

              _proto2.offInterruptionBegin = function offInterruptionBegin(cb) {
                this._eventTarget.off(AudioEvent.INTERRUPTION_BEGIN, cb);
              };

              _proto2.onInterruptionEnd = function onInterruptionEnd(cb) {
                this._eventTarget.on(AudioEvent.INTERRUPTION_END, cb);
              };

              _proto2.offInterruptionEnd = function offInterruptionEnd(cb) {
                this._eventTarget.off(AudioEvent.INTERRUPTION_END, cb);
              };

              _proto2.onEnded = function onEnded(cb) {
                this._eventTarget.on(AudioEvent.ENDED, cb);
              };

              _proto2.offEnded = function offEnded(cb) {
                this._eventTarget.off(AudioEvent.ENDED, cb);
              };

              _createClass(AudioPlayerDOM, [{
                key: "src",
                get: function get() {
                  return this._domAudio ? this._domAudio.src : '';
                }
              }, {
                key: "type",
                get: function get() {
                  return AudioType.DOM_AUDIO;
                }
              }, {
                key: "state",
                get: function get() {
                  return this._state;
                }
              }, {
                key: "loop",
                get: function get() {
                  return this._domAudio.loop;
                },
                set: function set(val) {
                  this._domAudio.loop = val;
                }
              }, {
                key: "volume",
                get: function get() {
                  return this._domAudio.volume;
                },
                set: function set(val) {
                  val = clamp01(val);
                  this._domAudio.volume = val;
                }
              }, {
                key: "duration",
                get: function get() {
                  return this._domAudio.duration;
                }
              }, {
                key: "currentTime",
                get: function get() {
                  return this._domAudio.currentTime;
                }
              }]);

              return AudioPlayerDOM;
            }(), _temp$N), (_applyDecoratedDescriptor(_class$U.prototype, "seek", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$U.prototype, "seek"), _class$U.prototype), _applyDecoratedDescriptor(_class$U.prototype, "play", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$U.prototype, "play"), _class$U.prototype), _applyDecoratedDescriptor(_class$U.prototype, "pause", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$U.prototype, "pause"), _class$U.prototype), _applyDecoratedDescriptor(_class$U.prototype, "stop", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$U.prototype, "stop"), _class$U.prototype)), _class$U);

            var AudioTimer = function () {
              function AudioTimer(nativeAudio) {
                this._nativeAudio = void 0;
                this._startTime = 0;
                this._startOffset = 0;
                this._isPaused = true;
                this._nativeAudio = nativeAudio;
              }

              var _proto = AudioTimer.prototype;

              _proto.destroy = function destroy() {
                this._nativeAudio = undefined;
              };

              _proto._now = function _now() {
                return performance.now() / 1000;
              };

              _proto._calculateCurrentTime = function _calculateCurrentTime() {
                var timePassed = this._now() - this._startTime;

                var currentTime = this._startOffset + timePassed;

                if (currentTime >= this.duration) {
                  this._startTime = this._now();
                  this._startOffset = 0;
                }

                return currentTime % this.duration;
              };

              _proto.start = function start() {
                this._isPaused = false;
                this._startTime = this._now();
              };

              _proto.pause = function pause() {
                if (this._isPaused) {
                  return;
                }

                this._isPaused = true;
                this._startOffset = this._calculateCurrentTime();
              };

              _proto.stop = function stop() {
                this._isPaused = true;
                this._startOffset = 0;
              };

              _proto.seek = function seek(time) {
                this._startTime = this._now();
                this._startOffset = clamp$1(time, 0, this.duration);
              };

              _createClass(AudioTimer, [{
                key: "duration",
                get: function get() {
                  return this._nativeAudio.duration;
                }
              }, {
                key: "currentTime",
                get: function get() {
                  if (this._isPaused) {
                    return this._startOffset;
                  } else {
                    return this._calculateCurrentTime();
                  }
                }
              }]);

              return AudioTimer;
            }();

            var AudioBufferManager = function () {
              function AudioBufferManager() {
                this._audioBufferDataMap = {};
              }

              var _proto = AudioBufferManager.prototype;

              _proto.addCache = function addCache(url, audioBuffer) {
                var audioBufferData = this._audioBufferDataMap[url];

                if (audioBufferData) {
                  console.warn("Audio buffer " + url + " has been cached");
                  return;
                }

                this._audioBufferDataMap[url] = {
                  usedCount: 1,
                  audioBuffer: audioBuffer
                };
              };

              _proto.retainCache = function retainCache(url) {
                var audioBufferData = this._audioBufferDataMap[url];

                if (!audioBufferData) {
                  console.warn("Audio buffer cache " + url + " has not been added.");
                  return;
                }

                audioBufferData.usedCount++;
              };

              _proto.getCache = function getCache(url) {
                var audioBufferData = this._audioBufferDataMap[url];
                return audioBufferData === null || audioBufferData === void 0 ? void 0 : audioBufferData.audioBuffer;
              };

              _proto.tryReleasingCache = function tryReleasingCache(url) {
                var audioBufferData = this._audioBufferDataMap[url];

                if (!audioBufferData) {
                  console.warn("Audio buffer cache " + url + " has not been added.");
                  return;
                }

                if (--audioBufferData.usedCount <= 0) {
                  delete this._audioBufferDataMap[url];
                }
              };

              return AudioBufferManager;
            }();

            var audioBufferManager = new AudioBufferManager();

            var _class$V, _temp$O;
            var AudioContextClass = window.AudioContext || window.webkitAudioContext || window.mozAudioContext;
            var AudioContextAgent = function () {
              function AudioContextAgent() {
                this._context = void 0;
                this._context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
              }

              var _proto = AudioContextAgent.prototype;

              _proto.decodeAudioData = function decodeAudioData(audioData) {
                var _this = this;

                return new Promise(function (resolve) {
                  var promise = _this._context.decodeAudioData(audioData, function (audioBuffer) {
                    resolve(audioBuffer);
                  }, function (err) {
                    console.error('failed to load Web Audio', err);
                  });

                  promise === null || promise === void 0 ? void 0 : promise["catch"](function (e) {});
                });
              };

              _proto.runContext = function runContext() {
                var _this2 = this;

                return new Promise(function (resolve) {
                  var context = _this2._context;

                  if (!context.resume) {
                    resolve();
                    return;
                  }

                  if (context.state === 'running') {
                    resolve();
                    return;
                  }

                  var canvas = document.getElementById('GameCanvas');

                  var onGesture = function onGesture() {
                    context.resume().then(resolve)["catch"](function (e) {});
                  };

                  canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('touchend', onGesture, {
                    once: true,
                    capture: true
                  });
                  canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('mouseup', onGesture, {
                    once: true,
                    capture: true
                  });
                });
              };

              _proto.createBufferSource = function createBufferSource(audioBuffer, loop) {
                var sourceBufferNode = this._context.createBufferSource();

                if (audioBuffer !== undefined) {
                  sourceBufferNode.buffer = audioBuffer;
                }

                if (loop !== undefined) {
                  sourceBufferNode.loop = loop;
                }

                return sourceBufferNode;
              };

              _proto.createGain = function createGain(volume) {
                if (volume === void 0) {
                  volume = 1;
                }

                var gainNode = this._context.createGain();

                this.setGainValue(gainNode, volume);
                return gainNode;
              };

              _proto.setGainValue = function setGainValue(gain, volume) {
                if (gain.gain.setTargetAtTime) {
                  try {
                    gain.gain.setTargetAtTime(volume, this._context.currentTime, 0);
                  } catch (e) {
                    gain.gain.setTargetAtTime(volume, this._context.currentTime, 0.01);
                  }
                } else {
                  gain.gain.value = volume;
                }
              };

              _proto.connectContext = function connectContext(audioNode) {
                if (!this._context) {
                  return;
                }

                audioNode.connect(this._context.destination);
              };

              _createClass(AudioContextAgent, [{
                key: "currentTime",
                get: function get() {
                  return this._context.currentTime;
                }
              }]);

              return AudioContextAgent;
            }();
            AudioContextAgent.support = !!AudioContextClass;
            var audioContextAgent;

            if (AudioContextAgent.support) {
              audioContextAgent = new AudioContextAgent();
            }

            var OneShotAudioWeb = function () {
              function OneShotAudioWeb(audioBuffer, volume, url) {
                this._duration = void 0;
                this._bufferSourceNode = void 0;
                this._onPlayCb = void 0;
                this._currentTimer = 0;
                this._url = void 0;
                this._onEndCb = void 0;
                this._duration = audioBuffer.duration;
                this._url = url;
                this._bufferSourceNode = audioContextAgent.createBufferSource(audioBuffer, false);
                var gainNode = audioContextAgent.createGain(volume);

                this._bufferSourceNode.connect(gainNode);

                audioContextAgent.connectContext(gainNode);
              }

              var _proto2 = OneShotAudioWeb.prototype;

              _proto2.play = function play() {
                var _this3 = this;

                this._bufferSourceNode.start();

                audioContextAgent.runContext().then(function () {
                  var _this3$onPlay;

                  (_this3$onPlay = _this3.onPlay) === null || _this3$onPlay === void 0 ? void 0 : _this3$onPlay.call(_this3);
                  _this3._currentTimer = window.setTimeout(function () {
                    var _this3$onEnd;

                    audioBufferManager.tryReleasingCache(_this3._url);
                    (_this3$onEnd = _this3.onEnd) === null || _this3$onEnd === void 0 ? void 0 : _this3$onEnd.call(_this3);
                  }, _this3._duration * 1000);
                })["catch"](function (e) {});
              };

              _proto2.stop = function stop() {
                clearTimeout(this._currentTimer);
                audioBufferManager.tryReleasingCache(this._url);

                this._bufferSourceNode.stop();

                this._bufferSourceNode.buffer = null;
              };

              _createClass(OneShotAudioWeb, [{
                key: "onPlay",
                get: function get() {
                  return this._onPlayCb;
                },
                set: function set(cb) {
                  this._onPlayCb = cb;
                }
              }, {
                key: "onEnd",
                get: function get() {
                  return this._onEndCb;
                },
                set: function set(cb) {
                  this._onEndCb = cb;
                }
              }]);

              return OneShotAudioWeb;
            }();
            var AudioPlayerWeb = (_class$V = (_temp$O = function () {
              function AudioPlayerWeb(audioBuffer, url) {
                this._src = void 0;
                this._audioBuffer = void 0;
                this._sourceNode = void 0;
                this._gainNode = void 0;
                this._currentTimer = 0;
                this._volume = 1;
                this._loop = false;
                this._state = AudioState.INIT;
                this._audioTimer = void 0;
                this._eventTarget = new EventTarget();
                this._operationQueue = [];
                this._audioBuffer = audioBuffer;
                this._audioTimer = new AudioTimer(audioBuffer);
                this._gainNode = audioContextAgent.createGain();
                audioContextAgent.connectContext(this._gainNode);
                this._src = url;
                systemInfo.on('hide', this._onHide, this);
                systemInfo.on('show', this._onShow, this);
              }

              var _proto3 = AudioPlayerWeb.prototype;

              _proto3.destroy = function destroy() {
                this._audioTimer.destroy();

                if (this._audioBuffer) {
                  this._audioBuffer = null;
                }

                audioBufferManager.tryReleasingCache(this._src);
                systemInfo.off('hide', this._onHide, this);
                systemInfo.off('show', this._onShow, this);
              };

              AudioPlayerWeb.load = function load(url) {
                return new Promise(function (resolve) {
                  AudioPlayerWeb.loadNative(url).then(function (audioBuffer) {
                    resolve(new AudioPlayerWeb(audioBuffer, url));
                  })["catch"](function (e) {});
                });
              };

              AudioPlayerWeb.loadNative = function loadNative(url) {
                return new Promise(function (resolve, reject) {
                  var cachedAudioBuffer = audioBufferManager.getCache(url);

                  if (cachedAudioBuffer) {
                    audioBufferManager.retainCache(url);
                    resolve(cachedAudioBuffer);
                    return;
                  }

                  var xhr = new XMLHttpRequest();
                  var errInfo = "load audio failed: " + url + ", status: ";
                  xhr.open('GET', url, true);
                  xhr.responseType = 'arraybuffer';

                  xhr.onload = function () {
                    if (xhr.status === 200 || xhr.status === 0) {
                      audioContextAgent.decodeAudioData(xhr.response).then(function (decodedAudioBuffer) {
                        audioBufferManager.addCache(url, decodedAudioBuffer);
                        resolve(decodedAudioBuffer);
                      })["catch"](function (e) {});
                    } else {
                      reject(new Error("" + errInfo + xhr.status + "(no response)"));
                    }
                  };

                  xhr.onerror = function () {
                    reject(new Error("" + errInfo + xhr.status + "(error)"));
                  };

                  xhr.ontimeout = function () {
                    reject(new Error("" + errInfo + xhr.status + "(time out)"));
                  };

                  xhr.onabort = function () {
                    reject(new Error("" + errInfo + xhr.status + "(abort)"));
                  };

                  xhr.send(null);
                });
              };

              AudioPlayerWeb.loadOneShotAudio = function loadOneShotAudio(url, volume) {
                return new Promise(function (resolve, reject) {
                  AudioPlayerWeb.loadNative(url).then(function (audioBuffer) {
                    var oneShotAudio = new OneShotAudioWeb(audioBuffer, volume, url);
                    resolve(oneShotAudio);
                  })["catch"](reject);
                });
              };

              _proto3._onHide = function _onHide() {
                var _this4 = this;

                if (this._state === AudioState.PLAYING) {
                  this.pause().then(function () {
                    _this4._state = AudioState.INTERRUPTED;

                    _this4._eventTarget.emit(AudioEvent.INTERRUPTION_BEGIN);
                  })["catch"](function (e) {});
                }
              };

              _proto3._onShow = function _onShow() {
                var _this5 = this;

                if (this._state === AudioState.INTERRUPTED) {
                  this.play().then(function () {
                    _this5._eventTarget.emit(AudioEvent.INTERRUPTION_END);
                  })["catch"](function (e) {});
                }
              };

              _proto3.seek = function seek(time) {
                var _this6 = this;

                return new Promise(function (resolve) {
                  _this6._audioTimer.seek(time);

                  if (_this6._state === AudioState.PLAYING) {
                    _this6._doPlay().then(resolve)["catch"](function (e) {});
                  } else {
                    resolve();
                  }
                });
              };

              _proto3.play = function play() {

                return this._doPlay();
              };

              _proto3._doPlay = function _doPlay() {
                var _this7 = this;

                return new Promise(function (resolve) {
                  _this7._stopSourceNode();

                  _this7._sourceNode = audioContextAgent.createBufferSource(_this7._audioBuffer, _this7.loop);

                  _this7._sourceNode.connect(_this7._gainNode);

                  _this7._sourceNode.start(0, _this7._audioTimer.currentTime);

                  audioContextAgent.runContext().then(function () {
                    _this7._state = AudioState.PLAYING;

                    _this7._audioTimer.start();

                    var checkEnded = function checkEnded() {
                      if (_this7.loop) {
                        _this7._currentTimer = window.setTimeout(checkEnded, _this7._audioBuffer.duration * 1000);
                      } else {
                        _this7._audioTimer.stop();

                        _this7._eventTarget.emit(AudioEvent.ENDED);

                        _this7._state = AudioState.INIT;
                      }
                    };

                    window.clearTimeout(_this7._currentTimer);
                    _this7._currentTimer = window.setTimeout(checkEnded, (_this7._audioBuffer.duration - _this7._audioTimer.currentTime) * 1000);
                    resolve();
                  })["catch"](function (e) {});
                });
              };

              _proto3._stopSourceNode = function _stopSourceNode() {
                try {
                  if (this._sourceNode) {
                    this._sourceNode.stop();

                    this._sourceNode.buffer = null;
                  }
                } catch (e) {}
              };

              _proto3.pause = function pause() {
                if (this._state !== AudioState.PLAYING || !this._sourceNode) {
                  return Promise.resolve();
                }

                this._audioTimer.pause();

                this._state = AudioState.PAUSED;
                window.clearTimeout(this._currentTimer);

                this._stopSourceNode();

                return Promise.resolve();
              };

              _proto3.stop = function stop() {
                if (!this._sourceNode) {
                  return Promise.resolve();
                }

                this._audioTimer.stop();

                this._state = AudioState.STOPPED;
                window.clearTimeout(this._currentTimer);

                this._stopSourceNode();

                return Promise.resolve();
              };

              _proto3.onInterruptionBegin = function onInterruptionBegin(cb) {
                this._eventTarget.on(AudioEvent.INTERRUPTION_BEGIN, cb);
              };

              _proto3.offInterruptionBegin = function offInterruptionBegin(cb) {
                this._eventTarget.off(AudioEvent.INTERRUPTION_BEGIN, cb);
              };

              _proto3.onInterruptionEnd = function onInterruptionEnd(cb) {
                this._eventTarget.on(AudioEvent.INTERRUPTION_END, cb);
              };

              _proto3.offInterruptionEnd = function offInterruptionEnd(cb) {
                this._eventTarget.off(AudioEvent.INTERRUPTION_END, cb);
              };

              _proto3.onEnded = function onEnded(cb) {
                this._eventTarget.on(AudioEvent.ENDED, cb);
              };

              _proto3.offEnded = function offEnded(cb) {
                this._eventTarget.off(AudioEvent.ENDED, cb);
              };

              _createClass(AudioPlayerWeb, [{
                key: "src",
                get: function get() {
                  return this._src;
                }
              }, {
                key: "type",
                get: function get() {
                  return AudioType.WEB_AUDIO;
                }
              }, {
                key: "state",
                get: function get() {
                  return this._state;
                }
              }, {
                key: "loop",
                get: function get() {
                  return this._loop;
                },
                set: function set(val) {
                  this._loop = val;

                  if (this._sourceNode) {
                    this._sourceNode.loop = val;
                  }
                }
              }, {
                key: "volume",
                get: function get() {
                  return this._volume;
                },
                set: function set(val) {
                  val = clamp01(val);
                  this._volume = val;
                  audioContextAgent.setGainValue(this._gainNode, val);
                }
              }, {
                key: "duration",
                get: function get() {
                  return this._audioBuffer.duration;
                }
              }, {
                key: "currentTime",
                get: function get() {
                  return this._audioTimer.currentTime;
                }
              }]);

              return AudioPlayerWeb;
            }(), _temp$O), (_applyDecoratedDescriptor(_class$V.prototype, "seek", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$V.prototype, "seek"), _class$V.prototype), _applyDecoratedDescriptor(_class$V.prototype, "play", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$V.prototype, "play"), _class$V.prototype), _applyDecoratedDescriptor(_class$V.prototype, "pause", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$V.prototype, "pause"), _class$V.prototype), _applyDecoratedDescriptor(_class$V.prototype, "stop", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$V.prototype, "stop"), _class$V.prototype)), _class$V);

            var OneShotAudio = function () {
              function OneShotAudio(audio) {
                this._audio = void 0;
                this._audio = audio;
              }

              var _proto = OneShotAudio.prototype;

              _proto.play = function play() {
                this._audio.play();
              };

              _proto.stop = function stop() {
                this._audio.stop();
              };

              _createClass(OneShotAudio, [{
                key: "onPlay",
                get: function get() {
                  return this._audio.onPlay;
                },
                set: function set(v) {
                  this._audio.onPlay = v;
                }
              }, {
                key: "onEnd",
                get: function get() {
                  return this._audio.onEnd;
                },
                set: function set(v) {
                  this._audio.onEnd = v;
                }
              }]);

              return OneShotAudio;
            }();
            var AudioPlayer = function () {
              function AudioPlayer(player) {
                this._player = void 0;
                this._player = player;
              }

              AudioPlayer.load = function load(url, opts) {
                return new Promise(function (resolve) {
                  if ((opts === null || opts === void 0 ? void 0 : opts.audioLoadMode) === AudioType.DOM_AUDIO || !AudioContextAgent.support) {
                    if (!AudioContextAgent.support) {
                      warnID(5201);
                    }

                    AudioPlayerDOM.load(url).then(function (domPlayer) {
                      resolve(new AudioPlayer(domPlayer));
                    })["catch"](function (e) {});
                  } else {
                    AudioPlayerWeb.load(url).then(function (webPlayer) {
                      resolve(new AudioPlayer(webPlayer));
                    })["catch"](function (e) {});
                  }
                });
              };

              var _proto2 = AudioPlayer.prototype;

              _proto2.destroy = function destroy() {
                this._player.destroy();
              };

              AudioPlayer.loadNative = function loadNative(url, opts) {
                if ((opts === null || opts === void 0 ? void 0 : opts.audioLoadMode) === AudioType.DOM_AUDIO || !AudioContextAgent.support) {
                  if (!AudioContextAgent.support) {
                    warnID(5201);
                  }

                  return AudioPlayerDOM.loadNative(url);
                }

                return AudioPlayerWeb.loadNative(url);
              };

              AudioPlayer.loadOneShotAudio = function loadOneShotAudio(url, volume, opts) {
                return new Promise(function (resolve, reject) {
                  if ((opts === null || opts === void 0 ? void 0 : opts.audioLoadMode) === AudioType.DOM_AUDIO || !AudioContextAgent.support) {
                    if (!AudioContextAgent.support) {
                      warnID(5201);
                    }

                    AudioPlayerDOM.loadOneShotAudio(url, volume).then(function (oneShotAudioDOM) {
                      resolve(new OneShotAudio(oneShotAudioDOM));
                    })["catch"](reject);
                  } else {
                    AudioPlayerWeb.loadOneShotAudio(url, volume).then(function (oneShotAudioWeb) {
                      resolve(new OneShotAudio(oneShotAudioWeb));
                    })["catch"](reject);
                  }
                });
              };

              _proto2.seek = function seek(time) {
                return this._player.seek(time);
              };

              _proto2.play = function play() {
                return this._player.play();
              };

              _proto2.pause = function pause() {
                return this._player.pause();
              };

              _proto2.stop = function stop() {
                return this._player.stop();
              };

              _proto2.onInterruptionBegin = function onInterruptionBegin(cb) {
                this._player.onInterruptionBegin(cb);
              };

              _proto2.offInterruptionBegin = function offInterruptionBegin(cb) {
                this._player.offInterruptionBegin(cb);
              };

              _proto2.onInterruptionEnd = function onInterruptionEnd(cb) {
                this._player.onInterruptionEnd(cb);
              };

              _proto2.offInterruptionEnd = function offInterruptionEnd(cb) {
                this._player.offInterruptionEnd(cb);
              };

              _proto2.onEnded = function onEnded(cb) {
                this._player.onEnded(cb);
              };

              _proto2.offEnded = function offEnded(cb) {
                this._player.offEnded(cb);
              };

              _createClass(AudioPlayer, [{
                key: "src",
                get: function get() {
                  return this._player.src;
                }
              }, {
                key: "type",
                get: function get() {
                  return this._player.type;
                }
              }, {
                key: "state",
                get: function get() {
                  return this._player.state;
                }
              }, {
                key: "loop",
                get: function get() {
                  return this._player.loop;
                },
                set: function set(val) {
                  this._player.loop = val;
                }
              }, {
                key: "volume",
                get: function get() {
                  return this._player.volume;
                },
                set: function set(val) {
                  this._player.volume = val;
                }
              }, {
                key: "duration",
                get: function get() {
                  return this._player.duration;
                }
              }, {
                key: "currentTime",
                get: function get() {
                  return this._player.currentTime;
                }
              }]);

              return AudioPlayer;
            }();
            AudioPlayer.maxAudioChannel = 24;

            var _dec$T, _class$W, _class2$L, _descriptor$I, _class3$a, _temp$P;
            var AudioClip = exports('AudioClip', (_dec$T = ccclass('cc.AudioClip'), _dec$T(_class$W = (_class2$L = (_temp$P = _class3$a = function (_Asset) {
              _inheritsLoose(AudioClip, _Asset);

              function AudioClip() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_duration", _descriptor$I, _assertThisInitialized(_this));

                _this._loadMode = AudioType.UNKNOWN_AUDIO;
                _this._meta = null;
                _this._player = null;
                return _this;
              }

              var _proto = AudioClip.prototype;

              _proto.destroy = function destroy() {
                var _this$_player;

                var destroyResult = _Asset.prototype.destroy.call(this);

                (_this$_player = this._player) === null || _this$_player === void 0 ? void 0 : _this$_player.destroy();
                this._player = null;

                if (this._meta) {
                  this._meta.player = null;
                }

                return destroyResult;
              };

              _proto.validate = function validate() {
                return !!this._meta;
              };

              _proto.getDuration = function getDuration() {
                if (this._duration) {
                  return this._duration;
                }

                return this._meta ? this._meta.duration : 0;
              };

              _proto.getCurrentTime = function getCurrentTime() {
                return this._player ? this._player.currentTime : 0;
              };

              _proto.getVolume = function getVolume() {
                return this._player ? this._player.volume : 0;
              };

              _proto.getLoop = function getLoop() {
                return this._player ? this._player.loop : false;
              };

              _proto.setCurrentTime = function setCurrentTime(time) {
                var _this$_player2;

                (_this$_player2 = this._player) === null || _this$_player2 === void 0 ? void 0 : _this$_player2.seek(time)["catch"](function (e) {});
              };

              _proto.setVolume = function setVolume(volume) {
                if (this._player) {
                  this._player.volume = volume;
                }
              };

              _proto.setLoop = function setLoop(loop) {
                if (this._player) {
                  this._player.loop = loop;
                }
              };

              _proto.play = function play() {
                var _this$_player3;

                (_this$_player3 = this._player) === null || _this$_player3 === void 0 ? void 0 : _this$_player3.play()["catch"](function (e) {});
              };

              _proto.pause = function pause() {
                var _this$_player4;

                (_this$_player4 = this._player) === null || _this$_player4 === void 0 ? void 0 : _this$_player4.pause()["catch"](function (e) {});
              };

              _proto.stop = function stop() {
                var _this$_player5;

                (_this$_player5 = this._player) === null || _this$_player5 === void 0 ? void 0 : _this$_player5.stop()["catch"](function (e) {});
              };

              _proto.playOneShot = function playOneShot(volume) {
                if (volume === void 0) {
                  volume = 1;
                }

                if (this._nativeAsset) {
                  AudioPlayer.loadOneShotAudio(this._nativeAsset.url, volume).then(function (oneShotAudio) {
                    oneShotAudio.play();
                  })["catch"](function (e) {});
                }
              };

              _createClass(AudioClip, [{
                key: "_nativeAsset",
                get: function get() {
                  return this._meta;
                },
                set: function set(meta) {
                  this._meta = meta;

                  if (meta) {
                    this._loadMode = meta.type;
                    this._player = meta.player;
                  } else {
                    this._meta = null;
                    this._loadMode = AudioType.UNKNOWN_AUDIO;
                    this._duration = 0;
                  }
                }
              }, {
                key: "_nativeDep",
                get: function get() {
                  return {
                    uuid: this._uuid,
                    audioLoadMode: this.loadMode,
                    ext: this._native,
                    __isNative__: true
                  };
                }
              }, {
                key: "loadMode",
                get: function get() {
                  return this._loadMode;
                }
              }, {
                key: "state",
                get: function get() {
                  return this._player ? this._player.state : AudioState.INIT;
                }
              }]);

              return AudioClip;
            }(Asset), _class3$a.AudioType = AudioType, _temp$P), (_descriptor$I = _applyDecoratedDescriptor(_class2$L.prototype, "_duration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$L.prototype, "_nativeDep", [override], Object.getOwnPropertyDescriptor(_class2$L.prototype, "_nativeDep"), _class2$L.prototype)), _class2$L)) || _class$W));
            legacyCC.AudioClip = AudioClip;

            function loadAudioPlayer(url, options, onComplete) {
              AudioPlayer.load(url, {
                audioLoadMode: options.audioLoadMode
              }).then(function (player) {
                var audioMeta = {
                  player: player,
                  url: url,
                  duration: player.duration,
                  type: player.type
                };
                onComplete(null, audioMeta);
              })["catch"](function (err) {
                onComplete(err);
              });
            }

            function createAudioClip(id, data, options, onComplete) {
              var out = new AudioClip();
              out._nativeUrl = id;
              out._nativeAsset = data;
              out._duration = data.duration;
              onComplete(null, out);
            }

            downloader.register({
              '.mp3': loadAudioPlayer,
              '.ogg': loadAudioPlayer,
              '.wav': loadAudioPlayer,
              '.m4a': loadAudioPlayer
            });
            factory.register({
              '.mp3': createAudioClip,
              '.ogg': createAudioClip,
              '.wav': createAudioClip,
              '.m4a': createAudioClip
            });

            var AudioManager = function () {
              function AudioManager() {
                this._oneShotAudioInfoList = [];
                this._audioPlayerInfoList = [];
              }

              var _proto = AudioManager.prototype;

              _proto._findIndex = function _findIndex(audioInfoList, audio) {
                return audioInfoList.findIndex(function (item) {
                  return item.audio === audio;
                });
              };

              _proto._tryAddPlaying = function _tryAddPlaying(audioInfoList, audio) {
                var idx = this._findIndex(audioInfoList, audio);

                if (idx > -1) {
                  audioInfoList[idx].playTime = performance.now();
                  return false;
                }

                audioInfoList.push({
                  audio: audio,
                  playTime: performance.now()
                });
                return true;
              };

              _proto.addPlaying = function addPlaying(audio) {
                if (audio instanceof AudioPlayer) {
                  if (this._tryAddPlaying(this._audioPlayerInfoList, audio)) {
                    return;
                  }
                } else {
                  this._tryAddPlaying(this._oneShotAudioInfoList, audio);
                }
              };

              _proto._tryRemovePlaying = function _tryRemovePlaying(audioInfoList, audio) {
                var idx = this._findIndex(audioInfoList, audio);

                if (idx === -1) {
                  return false;
                }

                fastRemoveAt(audioInfoList, idx);
                return true;
              };

              _proto.removePlaying = function removePlaying(audio) {
                if (audio instanceof AudioPlayer) {
                  if (this._tryRemovePlaying(this._audioPlayerInfoList, audio)) {
                    return;
                  }
                } else {
                  this._tryRemovePlaying(this._oneShotAudioInfoList, audio);
                }
              };

              _proto.discardOnePlayingIfNeeded = function discardOnePlayingIfNeeded() {
                if (this._audioPlayerInfoList.length + this._oneShotAudioInfoList.length < AudioPlayer.maxAudioChannel) {
                  return;
                }

                var audioInfoToDiscard;

                if (this._oneShotAudioInfoList.length > 0) {
                  this._oneShotAudioInfoList.forEach(function (audioInfo) {
                    if (!audioInfoToDiscard || audioInfo.playTime < audioInfoToDiscard.playTime) {
                      audioInfoToDiscard = audioInfo;
                    }
                  });
                } else {
                  this._audioPlayerInfoList.forEach(function (audioInfo) {
                    if (!audioInfoToDiscard || audioInfo.playTime < audioInfoToDiscard.playTime) {
                      audioInfoToDiscard = audioInfo;
                    }
                  });
                }

                if (audioInfoToDiscard) {
                  audioInfoToDiscard.audio.stop();
                  this.removePlaying(audioInfoToDiscard.audio);
                }
              };

              return AudioManager;
            }();
            var audioManager = new AudioManager();

            var _dec$U, _dec2$F, _dec3$t, _dec4$p, _dec5$n, _dec6$k, _dec7$k, _dec8$i, _dec9$e, _dec10$d, _class$X, _class2$M, _descriptor$J, _descriptor2$B, _descriptor3$r, _descriptor4$m, _class3$b, _temp$Q;
            var AudioSourceEventType;

            (function (AudioSourceEventType) {
              AudioSourceEventType["STARTED"] = "started";
              AudioSourceEventType["ENDED"] = "ended";
            })(AudioSourceEventType || (AudioSourceEventType = {}));

            var AudioSource = function (v) { return exports({ AudioSource: v, AudioSourceComponent: v }), v; }((_dec$U = ccclass('cc.AudioSource'), _dec2$F = help(), _dec3$t = menu$1(), _dec4$p = type$1(AudioClip), _dec5$n = type$1(AudioClip), _dec6$k = tooltip(), _dec7$k = tooltip(), _dec8$i = tooltip(), _dec9$e = range(), _dec10$d = tooltip(), _dec$U(_class$X = _dec2$F(_class$X = _dec3$t(_class$X = (_class2$M = (_temp$Q = _class3$b = function (_Component) {
              _inheritsLoose(AudioSource, _Component);

              function AudioSource() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_clip", _descriptor$J, _assertThisInitialized(_this));

                _this._player = null;

                _initializerDefineProperty(_this, "_loop", _descriptor2$B, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_playOnAwake", _descriptor3$r, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_volume", _descriptor4$m, _assertThisInitialized(_this));

                _this._cachedCurrentTime = 0;
                _this._operationsBeforeLoading = [];
                _this._isLoaded = false;
                _this._lastSetClip = null;
                return _this;
              }

              var _proto = AudioSource.prototype;

              _proto._syncPlayer = function _syncPlayer() {
                var _this2 = this;

                var clip = this._clip;
                this._isLoaded = false;

                if (this._lastSetClip === clip) {
                  return;
                }

                if (!clip) {
                  this._lastSetClip = null;
                  return;
                }

                if (!clip._nativeAsset) {
                  console.error('Invalid audio clip');
                  return;
                }

                this._lastSetClip = clip;
                AudioPlayer.load(clip._nativeAsset.url, {
                  audioLoadMode: clip.loadMode
                }).then(function (player) {
                  if (_this2._lastSetClip !== clip) {
                    player.destroy();
                    return;
                  }

                  _this2._isLoaded = true;

                  if (_this2._player) {
                    audioManager.removePlaying(_this2._player);

                    _this2._player.offEnded();

                    _this2._player.offInterruptionBegin();

                    _this2._player.offInterruptionEnd();

                    _this2._player.destroy();
                  }

                  _this2._player = player;
                  player.onEnded(function () {
                    audioManager.removePlaying(player);

                    _this2.node.emit(AudioSourceEventType.ENDED, _this2);
                  });
                  player.onInterruptionBegin(function () {
                    audioManager.removePlaying(player);
                  });
                  player.onInterruptionEnd(function () {
                    audioManager.addPlaying(player);
                  });

                  _this2._syncStates();
                })["catch"](function (e) {});
              };

              _proto.onLoad = function onLoad() {
                this._syncPlayer();
              };

              _proto.onEnable = function onEnable() {
                if (this._playOnAwake && !this.playing) {
                  this.play();
                }
              };

              _proto.onDisable = function onDisable() {
                var rootNode = this._getRootNode();

                if (rootNode === null || rootNode === void 0 ? void 0 : rootNode._persistNode) {
                  return;
                }

                this.pause();
              };

              _proto.onDestroy = function onDestroy() {
                var _this$_player;

                this.stop();
                (_this$_player = this._player) === null || _this$_player === void 0 ? void 0 : _this$_player.destroy();
                this._player = null;
              };

              _proto._getRootNode = function _getRootNode() {
                var _currentNode, _currentNode$parent;

                var currentNode = this.node;
                var currentGrandparentNode = (_currentNode = currentNode) === null || _currentNode === void 0 ? void 0 : (_currentNode$parent = _currentNode.parent) === null || _currentNode$parent === void 0 ? void 0 : _currentNode$parent.parent;

                while (currentGrandparentNode) {
                  var _currentNode2, _currentNode3, _currentNode3$parent;

                  currentNode = (_currentNode2 = currentNode) === null || _currentNode2 === void 0 ? void 0 : _currentNode2.parent;
                  currentGrandparentNode = (_currentNode3 = currentNode) === null || _currentNode3 === void 0 ? void 0 : (_currentNode3$parent = _currentNode3.parent) === null || _currentNode3$parent === void 0 ? void 0 : _currentNode3$parent.parent;
                }

                return currentNode;
              };

              _proto.play = function play() {
                var _this$_player3,
                    _this3 = this;

                if (!this._isLoaded) {
                  this._operationsBeforeLoading.push('play');

                  return;
                }

                audioManager.discardOnePlayingIfNeeded();

                if (this.state === AudioState.PLAYING) {
                  var _this$_player2;

                  (_this$_player2 = this._player) === null || _this$_player2 === void 0 ? void 0 : _this$_player2.stop()["catch"](function (e) {});
                }

                (_this$_player3 = this._player) === null || _this$_player3 === void 0 ? void 0 : _this$_player3.play().then(function () {
                  audioManager.addPlaying(_this3._player);

                  _this3.node.emit(AudioSourceEventType.STARTED, _this3);
                })["catch"](function (e) {});
              };

              _proto.pause = function pause() {
                var _this$_player4,
                    _this4 = this;

                if (!this._isLoaded) {
                  this._operationsBeforeLoading.push('pause');

                  return;
                }

                (_this$_player4 = this._player) === null || _this$_player4 === void 0 ? void 0 : _this$_player4.pause().then(function () {
                  audioManager.removePlaying(_this4._player);
                })["catch"](function (e) {});
              };

              _proto.stop = function stop() {
                var _this$_player5,
                    _this5 = this;

                if (!this._isLoaded) {
                  this._operationsBeforeLoading.push('stop');

                  return;
                }

                (_this$_player5 = this._player) === null || _this$_player5 === void 0 ? void 0 : _this$_player5.stop().then(function () {
                  audioManager.removePlaying(_this5._player);
                })["catch"](function (e) {});
              };

              _proto.playOneShot = function playOneShot(clip, volumeScale) {
                if (volumeScale === void 0) {
                  volumeScale = 1;
                }

                if (!clip._nativeAsset) {
                  console.error('Invalid audio clip');
                  return;
                }

                AudioPlayer.loadOneShotAudio(clip._nativeAsset.url, this._volume * volumeScale, {
                  audioLoadMode: clip.loadMode
                }).then(function (oneShotAudio) {
                  audioManager.discardOnePlayingIfNeeded();

                  oneShotAudio.onPlay = function () {
                    audioManager.addPlaying(oneShotAudio);
                  };

                  oneShotAudio.onEnd = function () {
                    audioManager.removePlaying(oneShotAudio);
                  };

                  oneShotAudio.play();
                })["catch"](function (e) {});
              };

              _proto._syncStates = function _syncStates() {
                var _this6 = this;

                if (!this._player) {
                  return;
                }

                this._player.seek(this._cachedCurrentTime).then(function () {
                  if (_this6._player) {
                    _this6._player.loop = _this6._loop;
                    _this6._player.volume = _this6._volume;

                    _this6._operationsBeforeLoading.forEach(function (opName) {
                      var _this6$opName;

                      (_this6$opName = _this6[opName]) === null || _this6$opName === void 0 ? void 0 : _this6$opName.call(_this6);
                    });

                    _this6._operationsBeforeLoading.length = 0;
                  }
                })["catch"](function (e) {});
              };

              _createClass(AudioSource, [{
                key: "clip",
                get: function get() {
                  return this._clip;
                },
                set: function set(val) {
                  if (val === this._clip) {
                    return;
                  }

                  this._clip = val;

                  this._syncPlayer();
                }
              }, {
                key: "loop",
                get: function get() {
                  return this._loop;
                },
                set: function set(val) {
                  this._loop = val;
                  this._player && (this._player.loop = val);
                }
              }, {
                key: "playOnAwake",
                get: function get() {
                  return this._playOnAwake;
                },
                set: function set(val) {
                  this._playOnAwake = val;
                }
              }, {
                key: "volume",
                get: function get() {
                  return this._volume;
                },
                set: function set(val) {
                  if (Number.isNaN(val)) {
                    console.warn('illegal audio volume!');
                    return;
                  }

                  val = clamp$1(val, 0, 1);

                  if (this._player) {
                    this._player.volume = val;
                    this._volume = this._player.volume;
                  } else {
                    this._volume = val;
                  }
                }
              }, {
                key: "currentTime",
                get: function get() {
                  return this._player ? this._player.currentTime : this._cachedCurrentTime;
                },
                set: function set(num) {
                  var _this$_player6;

                  if (Number.isNaN(num)) {
                    console.warn('illegal audio time!');
                    return;
                  }

                  num = clamp$1(num, 0, this.duration);
                  this._cachedCurrentTime = num;
                  (_this$_player6 = this._player) === null || _this$_player6 === void 0 ? void 0 : _this$_player6.seek(this._cachedCurrentTime)["catch"](function (e) {});
                }
              }, {
                key: "duration",
                get: function get() {
                  var _this$_clip$getDurati, _this$_clip;

                  return (_this$_clip$getDurati = (_this$_clip = this._clip) === null || _this$_clip === void 0 ? void 0 : _this$_clip.getDuration()) !== null && _this$_clip$getDurati !== void 0 ? _this$_clip$getDurati : this._player ? this._player.duration : 0;
                }
              }, {
                key: "state",
                get: function get() {
                  return this._player ? this._player.state : AudioState.INIT;
                }
              }, {
                key: "playing",
                get: function get() {
                  return this.state === AudioSource.AudioState.PLAYING;
                }
              }], [{
                key: "maxAudioChannel",
                get: function get() {
                  return AudioPlayer.maxAudioChannel;
                }
              }]);

              return AudioSource;
            }(Component), _class3$b.AudioState = AudioState, _class3$b.EventType = AudioSourceEventType, _temp$Q), (_descriptor$J = _applyDecoratedDescriptor(_class2$M.prototype, "_clip", [_dec4$p], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$B = _applyDecoratedDescriptor(_class2$M.prototype, "_loop", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor3$r = _applyDecoratedDescriptor(_class2$M.prototype, "_playOnAwake", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor4$m = _applyDecoratedDescriptor(_class2$M.prototype, "_volume", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _applyDecoratedDescriptor(_class2$M.prototype, "clip", [_dec5$n, _dec6$k], Object.getOwnPropertyDescriptor(_class2$M.prototype, "clip"), _class2$M.prototype), _applyDecoratedDescriptor(_class2$M.prototype, "loop", [_dec7$k], Object.getOwnPropertyDescriptor(_class2$M.prototype, "loop"), _class2$M.prototype), _applyDecoratedDescriptor(_class2$M.prototype, "playOnAwake", [_dec8$i], Object.getOwnPropertyDescriptor(_class2$M.prototype, "playOnAwake"), _class2$M.prototype), _applyDecoratedDescriptor(_class2$M.prototype, "volume", [_dec9$e, _dec10$d], Object.getOwnPropertyDescriptor(_class2$M.prototype, "volume"), _class2$M.prototype)), _class2$M)) || _class$X) || _class$X) || _class$X));

            replaceProperty(AudioClip, 'AudioClip', [{
              name: 'PlayingState',
              newName: 'AudioState',
              target: AudioSource,
              targetName: 'AudioSource'
            }]);
            markAsWarning(AudioClip.prototype, 'AudioClip.prototype', ['state', 'play', 'pause', 'stop', 'playOneShot', 'setCurrentTime', 'setVolume', 'setLoop', 'getCurrentTime', 'getVolume', 'getLoop'].map(function (item) {
              return {
                name: item,
                suggest: "please use AudioSource.prototype." + item + " instead"
              };
            }));

            legacyCC.AudioSourceComponent = AudioSource;
            js.setClassAlias(AudioSource, 'cc.AudioSourceComponent');

            var WebGLDescriptorSet = function (_DescriptorSet) {
              _inheritsLoose(WebGLDescriptorSet, _DescriptorSet);

              function WebGLDescriptorSet() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _DescriptorSet.call.apply(_DescriptorSet, [this].concat(args)) || this;
                _this._gpuDescriptorSet = null;
                return _this;
              }

              var _proto = WebGLDescriptorSet.prototype;

              _proto.initialize = function initialize(info) {
                this._layout = info.layout;
                var _gpuDescriptorSetLayo = info.layout.gpuDescriptorSetLayout,
                    bindings = _gpuDescriptorSetLayo.bindings,
                    descriptorIndices = _gpuDescriptorSetLayo.descriptorIndices,
                    descriptorCount = _gpuDescriptorSetLayo.descriptorCount;
                this._buffers = Array(descriptorCount).fill(null);
                this._textures = Array(descriptorCount).fill(null);
                this._samplers = Array(descriptorCount).fill(null);
                var gpuDescriptors = [];
                this._gpuDescriptorSet = {
                  gpuDescriptors: gpuDescriptors,
                  descriptorIndices: descriptorIndices
                };

                for (var i = 0; i < bindings.length; ++i) {
                  var binding = bindings[i];

                  for (var j = 0; j < binding.count; j++) {
                    gpuDescriptors.push({
                      type: binding.descriptorType,
                      gpuBuffer: null,
                      gpuTexture: null,
                      gpuSampler: null
                    });
                  }
                }
              };

              _proto.destroy = function destroy() {
                this._layout = null;
                this._gpuDescriptorSet = null;
              };

              _proto.update = function update() {
                if (this._isDirty && this._gpuDescriptorSet) {
                  var descriptors = this._gpuDescriptorSet.gpuDescriptors;

                  for (var i = 0; i < descriptors.length; ++i) {
                    if (descriptors[i].type & DESCRIPTOR_BUFFER_TYPE) {
                      var buffer = this._buffers[i];

                      if (buffer) {
                        descriptors[i].gpuBuffer = buffer.gpuBuffer || buffer.gpuBufferView;
                      }
                    } else if (descriptors[i].type & DESCRIPTOR_SAMPLER_TYPE) {
                      if (this._textures[i]) {
                        descriptors[i].gpuTexture = this._textures[i].gpuTexture;
                      }

                      if (this._samplers[i]) {
                        descriptors[i].gpuSampler = this._samplers[i].gpuSampler;
                      }
                    }
                  }

                  this._isDirty = false;
                }
              };

              _createClass(WebGLDescriptorSet, [{
                key: "gpuDescriptorSet",
                get: function get() {
                  return this._gpuDescriptorSet;
                }
              }]);

              return WebGLDescriptorSet;
            }(DescriptorSet);

            var WebGLEXT;

            (function (WebGLEXT) {
              WebGLEXT[WebGLEXT["RGBA16F_EXT"] = 34842] = "RGBA16F_EXT";
              WebGLEXT[WebGLEXT["RGB16F_EXT"] = 34843] = "RGB16F_EXT";
              WebGLEXT[WebGLEXT["RGBA32F_EXT"] = 34836] = "RGBA32F_EXT";
              WebGLEXT[WebGLEXT["FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"] = 33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT";
              WebGLEXT[WebGLEXT["UNSIGNED_NORMALIZED_EXT"] = 35863] = "UNSIGNED_NORMALIZED_EXT";
              WebGLEXT[WebGLEXT["UNSIGNED_INT_24_8_WEBGL"] = 34042] = "UNSIGNED_INT_24_8_WEBGL";
              WebGLEXT[WebGLEXT["HALF_FLOAT_OES"] = 36193] = "HALF_FLOAT_OES";
              WebGLEXT[WebGLEXT["SRGB_EXT"] = 35904] = "SRGB_EXT";
              WebGLEXT[WebGLEXT["SRGB_ALPHA_EXT"] = 35906] = "SRGB_ALPHA_EXT";
              WebGLEXT[WebGLEXT["SRGB8_ALPHA8_EXT"] = 35907] = "SRGB8_ALPHA8_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
              WebGLEXT[WebGLEXT["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
              WebGLEXT[WebGLEXT["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
              WebGLEXT[WebGLEXT["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
              WebGLEXT[WebGLEXT["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
              WebGLEXT[WebGLEXT["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
              WebGLEXT[WebGLEXT["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
              WebGLEXT[WebGLEXT["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
              WebGLEXT[WebGLEXT["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ETC2"] = 37493] = "COMPRESSED_SRGB8_ETC2";
              WebGLEXT[WebGLEXT["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37494] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37495] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA8_ETC2_EAC"] = 37496] = "COMPRESSED_RGBA8_ETC2_EAC";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37497] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
              WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
            })(WebGLEXT || (WebGLEXT = {}));

            var WebGLDeviceManager = function () {
              function WebGLDeviceManager() {}

              WebGLDeviceManager.setInstance = function setInstance(instance) {
                WebGLDeviceManager._instance = instance;
              };

              _createClass(WebGLDeviceManager, null, [{
                key: "instance",
                get: function get() {
                  return WebGLDeviceManager._instance;
                }
              }]);

              return WebGLDeviceManager;
            }();
            WebGLDeviceManager._instance = null;

            function GFXFormatToWebGLType(format, gl) {
              switch (format) {
                case Format.R8:
                  return gl.UNSIGNED_BYTE;

                case Format.R8SN:
                  return gl.BYTE;

                case Format.R8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.R8I:
                  return gl.BYTE;

                case Format.R16F:
                  return WebGLEXT.HALF_FLOAT_OES;

                case Format.R16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.R16I:
                  return gl.SHORT;

                case Format.R32F:
                  return gl.FLOAT;

                case Format.R32UI:
                  return gl.UNSIGNED_INT;

                case Format.R32I:
                  return gl.INT;

                case Format.RG8:
                  return gl.UNSIGNED_BYTE;

                case Format.RG8SN:
                  return gl.BYTE;

                case Format.RG8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.RG8I:
                  return gl.BYTE;

                case Format.RG16F:
                  return WebGLEXT.HALF_FLOAT_OES;

                case Format.RG16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.RG16I:
                  return gl.SHORT;

                case Format.RG32F:
                  return gl.FLOAT;

                case Format.RG32UI:
                  return gl.UNSIGNED_INT;

                case Format.RG32I:
                  return gl.INT;

                case Format.RGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.SRGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.RGB8SN:
                  return gl.BYTE;

                case Format.RGB8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.RGB8I:
                  return gl.BYTE;

                case Format.RGB16F:
                  return WebGLEXT.HALF_FLOAT_OES;

                case Format.RGB16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.RGB16I:
                  return gl.SHORT;

                case Format.RGB32F:
                  return gl.FLOAT;

                case Format.RGB32UI:
                  return gl.UNSIGNED_INT;

                case Format.RGB32I:
                  return gl.INT;

                case Format.BGRA8:
                  return gl.UNSIGNED_BYTE;

                case Format.RGBA8:
                  return gl.UNSIGNED_BYTE;

                case Format.SRGB8_A8:
                  return gl.UNSIGNED_BYTE;

                case Format.RGBA8SN:
                  return gl.BYTE;

                case Format.RGBA8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.RGBA8I:
                  return gl.BYTE;

                case Format.RGBA16F:
                  return WebGLEXT.HALF_FLOAT_OES;

                case Format.RGBA16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.RGBA16I:
                  return gl.SHORT;

                case Format.RGBA32F:
                  return gl.FLOAT;

                case Format.RGBA32UI:
                  return gl.UNSIGNED_INT;

                case Format.RGBA32I:
                  return gl.INT;

                case Format.R5G6B5:
                  return gl.UNSIGNED_SHORT_5_6_5;

                case Format.R11G11B10F:
                  return gl.FLOAT;

                case Format.RGB5A1:
                  return gl.UNSIGNED_SHORT_5_5_5_1;

                case Format.RGBA4:
                  return gl.UNSIGNED_SHORT_4_4_4_4;

                case Format.RGB10A2:
                  return gl.UNSIGNED_BYTE;

                case Format.RGB10A2UI:
                  return gl.UNSIGNED_INT;

                case Format.RGB9E5:
                  return gl.UNSIGNED_BYTE;

                case Format.DEPTH:
                  return gl.UNSIGNED_INT;

                case Format.DEPTH_STENCIL:
                  return WebGLEXT.UNSIGNED_INT_24_8_WEBGL;

                case Format.BC1:
                  return gl.UNSIGNED_BYTE;

                case Format.BC1_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.BC2:
                  return gl.UNSIGNED_BYTE;

                case Format.BC2_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.BC3:
                  return gl.UNSIGNED_BYTE;

                case Format.BC3_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.BC4:
                  return gl.UNSIGNED_BYTE;

                case Format.BC4_SNORM:
                  return gl.BYTE;

                case Format.BC5:
                  return gl.UNSIGNED_BYTE;

                case Format.BC5_SNORM:
                  return gl.BYTE;

                case Format.BC6H_SF16:
                  return gl.FLOAT;

                case Format.BC6H_UF16:
                  return gl.FLOAT;

                case Format.BC7:
                  return gl.UNSIGNED_BYTE;

                case Format.BC7_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC_RGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_RGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_SRGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_RGB8_A1:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_SRGB8_A1:
                  return gl.UNSIGNED_BYTE;

                case Format.EAC_R11:
                  return gl.UNSIGNED_BYTE;

                case Format.EAC_R11SN:
                  return gl.BYTE;

                case Format.EAC_RG11:
                  return gl.UNSIGNED_BYTE;

                case Format.EAC_RG11SN:
                  return gl.BYTE;

                case Format.PVRTC_RGB2:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC_RGBA2:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC_RGB4:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC_RGBA4:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC2_2BPP:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC2_4BPP:
                  return gl.UNSIGNED_BYTE;

                case Format.ASTC_RGBA_4X4:
                case Format.ASTC_RGBA_5X4:
                case Format.ASTC_RGBA_5X5:
                case Format.ASTC_RGBA_6X5:
                case Format.ASTC_RGBA_6X6:
                case Format.ASTC_RGBA_8X5:
                case Format.ASTC_RGBA_8X6:
                case Format.ASTC_RGBA_8X8:
                case Format.ASTC_RGBA_10X5:
                case Format.ASTC_RGBA_10X6:
                case Format.ASTC_RGBA_10X8:
                case Format.ASTC_RGBA_10X10:
                case Format.ASTC_RGBA_12X10:
                case Format.ASTC_RGBA_12X12:
                case Format.ASTC_SRGBA_4X4:
                case Format.ASTC_SRGBA_5X4:
                case Format.ASTC_SRGBA_5X5:
                case Format.ASTC_SRGBA_6X5:
                case Format.ASTC_SRGBA_6X6:
                case Format.ASTC_SRGBA_8X5:
                case Format.ASTC_SRGBA_8X6:
                case Format.ASTC_SRGBA_8X8:
                case Format.ASTC_SRGBA_10X5:
                case Format.ASTC_SRGBA_10X6:
                case Format.ASTC_SRGBA_10X8:
                case Format.ASTC_SRGBA_10X10:
                case Format.ASTC_SRGBA_12X10:
                case Format.ASTC_SRGBA_12X12:
                  return gl.UNSIGNED_BYTE;

                default:
                  {
                    return gl.UNSIGNED_BYTE;
                  }
              }
            }
            function GFXFormatToWebGLInternalFormat(format, gl) {
              switch (format) {
                case Format.R5G6B5:
                  return gl.RGB565;

                case Format.RGB5A1:
                  return gl.RGB5_A1;

                case Format.RGBA4:
                  return gl.RGBA4;

                case Format.RGBA16F:
                  return WebGLEXT.RGBA16F_EXT;

                case Format.RGBA32F:
                  return WebGLEXT.RGBA32F_EXT;

                case Format.SRGB8_A8:
                  return WebGLEXT.SRGB8_ALPHA8_EXT;

                case Format.DEPTH:
                  return gl.DEPTH_COMPONENT16;

                case Format.DEPTH_STENCIL:
                  return gl.DEPTH_STENCIL;

                default:
                  {
                    console.error('Unsupported Format, convert to WebGL internal format failed.');
                    return gl.RGBA;
                  }
              }
            }
            function GFXFormatToWebGLFormat(format, gl) {
              switch (format) {
                case Format.A8:
                  return gl.ALPHA;

                case Format.L8:
                  return gl.LUMINANCE;

                case Format.LA8:
                  return gl.LUMINANCE_ALPHA;

                case Format.RGB8:
                  return gl.RGB;

                case Format.RGB16F:
                  return gl.RGB;

                case Format.RGB32F:
                  return gl.RGB;

                case Format.BGRA8:
                  return gl.RGBA;

                case Format.RGBA8:
                  return gl.RGBA;

                case Format.SRGB8_A8:
                  return gl.RGBA;

                case Format.RGBA16F:
                  return gl.RGBA;

                case Format.RGBA32F:
                  return gl.RGBA;

                case Format.R5G6B5:
                  return gl.RGB;

                case Format.RGB5A1:
                  return gl.RGBA;

                case Format.RGBA4:
                  return gl.RGBA;

                case Format.DEPTH:
                  return gl.DEPTH_COMPONENT;

                case Format.DEPTH_STENCIL:
                  return gl.DEPTH_STENCIL;

                case Format.BC1:
                  return WebGLEXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

                case Format.BC1_ALPHA:
                  return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

                case Format.BC1_SRGB:
                  return WebGLEXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

                case Format.BC1_SRGB_ALPHA:
                  return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

                case Format.BC2:
                  return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

                case Format.BC2_SRGB:
                  return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

                case Format.BC3:
                  return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

                case Format.BC3_SRGB:
                  return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

                case Format.ETC_RGB8:
                  return WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL;

                case Format.ETC2_RGB8:
                  return WebGLEXT.COMPRESSED_RGB8_ETC2;

                case Format.ETC2_SRGB8:
                  return WebGLEXT.COMPRESSED_SRGB8_ETC2;

                case Format.ETC2_RGB8_A1:
                  return WebGLEXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

                case Format.ETC2_SRGB8_A1:
                  return WebGLEXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

                case Format.ETC2_RGBA8:
                  return WebGLEXT.COMPRESSED_RGBA8_ETC2_EAC;

                case Format.ETC2_SRGB8_A8:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

                case Format.EAC_R11:
                  return WebGLEXT.COMPRESSED_R11_EAC;

                case Format.EAC_R11SN:
                  return WebGLEXT.COMPRESSED_SIGNED_R11_EAC;

                case Format.EAC_RG11:
                  return WebGLEXT.COMPRESSED_RG11_EAC;

                case Format.EAC_RG11SN:
                  return WebGLEXT.COMPRESSED_SIGNED_RG11_EAC;

                case Format.PVRTC_RGB2:
                  return WebGLEXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

                case Format.PVRTC_RGBA2:
                  return WebGLEXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

                case Format.PVRTC_RGB4:
                  return WebGLEXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

                case Format.PVRTC_RGBA4:
                  return WebGLEXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

                case Format.ASTC_RGBA_4X4:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_4x4_KHR;

                case Format.ASTC_RGBA_5X4:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_5x4_KHR;

                case Format.ASTC_RGBA_5X5:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_5x5_KHR;

                case Format.ASTC_RGBA_6X5:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_6x5_KHR;

                case Format.ASTC_RGBA_6X6:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_6x6_KHR;

                case Format.ASTC_RGBA_8X5:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_8x5_KHR;

                case Format.ASTC_RGBA_8X6:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_8x6_KHR;

                case Format.ASTC_RGBA_8X8:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_8x8_KHR;

                case Format.ASTC_RGBA_10X5:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_10x5_KHR;

                case Format.ASTC_RGBA_10X6:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_10x6_KHR;

                case Format.ASTC_RGBA_10X8:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_10x8_KHR;

                case Format.ASTC_RGBA_10X10:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_10x10_KHR;

                case Format.ASTC_RGBA_12X10:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_12x10_KHR;

                case Format.ASTC_RGBA_12X12:
                  return WebGLEXT.COMPRESSED_RGBA_ASTC_12x12_KHR;

                case Format.ASTC_SRGBA_4X4:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;

                case Format.ASTC_SRGBA_5X4:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;

                case Format.ASTC_SRGBA_5X5:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;

                case Format.ASTC_SRGBA_6X5:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;

                case Format.ASTC_SRGBA_6X6:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;

                case Format.ASTC_SRGBA_8X5:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;

                case Format.ASTC_SRGBA_8X6:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;

                case Format.ASTC_SRGBA_8X8:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;

                case Format.ASTC_SRGBA_10X5:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;

                case Format.ASTC_SRGBA_10X6:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;

                case Format.ASTC_SRGBA_10X8:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;

                case Format.ASTC_SRGBA_10X10:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;

                case Format.ASTC_SRGBA_12X10:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;

                case Format.ASTC_SRGBA_12X12:
                  return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;

                default:
                  {
                    console.error('Unsupported Format, convert to WebGL format failed.');
                    return gl.RGBA;
                  }
              }
            }

            function GFXTypeToWebGLType(type, gl) {
              switch (type) {
                case Type$1.BOOL:
                  return gl.BOOL;

                case Type$1.BOOL2:
                  return gl.BOOL_VEC2;

                case Type$1.BOOL3:
                  return gl.BOOL_VEC3;

                case Type$1.BOOL4:
                  return gl.BOOL_VEC4;

                case Type$1.INT:
                  return gl.INT;

                case Type$1.INT2:
                  return gl.INT_VEC2;

                case Type$1.INT3:
                  return gl.INT_VEC3;

                case Type$1.INT4:
                  return gl.INT_VEC4;

                case Type$1.UINT:
                  return gl.UNSIGNED_INT;

                case Type$1.FLOAT:
                  return gl.FLOAT;

                case Type$1.FLOAT2:
                  return gl.FLOAT_VEC2;

                case Type$1.FLOAT3:
                  return gl.FLOAT_VEC3;

                case Type$1.FLOAT4:
                  return gl.FLOAT_VEC4;

                case Type$1.MAT2:
                  return gl.FLOAT_MAT2;

                case Type$1.MAT3:
                  return gl.FLOAT_MAT3;

                case Type$1.MAT4:
                  return gl.FLOAT_MAT4;

                case Type$1.SAMPLER2D:
                  return gl.SAMPLER_2D;

                case Type$1.SAMPLER_CUBE:
                  return gl.SAMPLER_CUBE;

                default:
                  {
                    console.error('Unsupported GLType, convert to GL type failed.');
                    return Type$1.UNKNOWN;
                  }
              }
            }

            function GFXTypeToTypedArrayCtor(type) {
              switch (type) {
                case Type$1.BOOL:
                case Type$1.BOOL2:
                case Type$1.BOOL3:
                case Type$1.BOOL4:
                case Type$1.INT:
                case Type$1.INT2:
                case Type$1.INT3:
                case Type$1.INT4:
                case Type$1.UINT:
                  return Int32Array;

                case Type$1.FLOAT:
                case Type$1.FLOAT2:
                case Type$1.FLOAT3:
                case Type$1.FLOAT4:
                case Type$1.MAT2:
                case Type$1.MAT3:
                case Type$1.MAT4:
                  return Float32Array;

                default:
                  {
                    console.error('Unsupported GLType, convert to TypedArrayConstructor failed.');
                    return Float32Array;
                  }
              }
            }

            function WebGLTypeToGFXType(glType, gl) {
              switch (glType) {
                case gl.BOOL:
                  return Type$1.BOOL;

                case gl.BOOL_VEC2:
                  return Type$1.BOOL2;

                case gl.BOOL_VEC3:
                  return Type$1.BOOL3;

                case gl.BOOL_VEC4:
                  return Type$1.BOOL4;

                case gl.INT:
                  return Type$1.INT;

                case gl.INT_VEC2:
                  return Type$1.INT2;

                case gl.INT_VEC3:
                  return Type$1.INT3;

                case gl.INT_VEC4:
                  return Type$1.INT4;

                case gl.UNSIGNED_INT:
                  return Type$1.UINT;

                case gl.FLOAT:
                  return Type$1.FLOAT;

                case gl.FLOAT_VEC2:
                  return Type$1.FLOAT2;

                case gl.FLOAT_VEC3:
                  return Type$1.FLOAT3;

                case gl.FLOAT_VEC4:
                  return Type$1.FLOAT4;

                case gl.FLOAT_MAT2:
                  return Type$1.MAT2;

                case gl.FLOAT_MAT3:
                  return Type$1.MAT3;

                case gl.FLOAT_MAT4:
                  return Type$1.MAT4;

                case gl.SAMPLER_2D:
                  return Type$1.SAMPLER2D;

                case gl.SAMPLER_CUBE:
                  return Type$1.SAMPLER_CUBE;

                default:
                  {
                    console.error('Unsupported GLType, convert to Type failed.');
                    return Type$1.UNKNOWN;
                  }
              }
            }

            function WebGLGetTypeSize(glType, gl) {
              switch (glType) {
                case gl.BOOL:
                  return 4;

                case gl.BOOL_VEC2:
                  return 8;

                case gl.BOOL_VEC3:
                  return 12;

                case gl.BOOL_VEC4:
                  return 16;

                case gl.INT:
                  return 4;

                case gl.INT_VEC2:
                  return 8;

                case gl.INT_VEC3:
                  return 12;

                case gl.INT_VEC4:
                  return 16;

                case gl.UNSIGNED_INT:
                  return 4;

                case gl.FLOAT:
                  return 4;

                case gl.FLOAT_VEC2:
                  return 8;

                case gl.FLOAT_VEC3:
                  return 12;

                case gl.FLOAT_VEC4:
                  return 16;

                case gl.FLOAT_MAT2:
                  return 16;

                case gl.FLOAT_MAT3:
                  return 36;

                case gl.FLOAT_MAT4:
                  return 64;

                case gl.SAMPLER_2D:
                  return 4;

                case gl.SAMPLER_CUBE:
                  return 4;

                default:
                  {
                    console.error('Unsupported GLType, get type failed.');
                    return 0;
                  }
              }
            }

            function WebGLGetComponentCount(glType, gl) {
              switch (glType) {
                case gl.FLOAT_MAT2:
                  return 2;

                case gl.FLOAT_MAT3:
                  return 3;

                case gl.FLOAT_MAT4:
                  return 4;

                default:
                  {
                    return 1;
                  }
              }
            }

            var WebGLCmpFuncs = [0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207];
            var WebGLStencilOps = [0x0000, 0x1E00, 0x1E01, 0x1E02, 0x1E03, 0x150A, 0x8507, 0x8508];
            var WebGLBlendOps = [0x8006, 0x800A, 0x800B, 0x8007, 0x8008];
            var WebGLBlendFactors = [0x0000, 0x0001, 0x0302, 0x0304, 0x0303, 0x0305, 0x0300, 0x0306, 0x0301, 0x0307, 0x0308, 0x8001, 0x8002, 0x8003, 0x8004];
            var WebGLCmd;

            (function (WebGLCmd) {
              WebGLCmd[WebGLCmd["BEGIN_RENDER_PASS"] = 0] = "BEGIN_RENDER_PASS";
              WebGLCmd[WebGLCmd["END_RENDER_PASS"] = 1] = "END_RENDER_PASS";
              WebGLCmd[WebGLCmd["BIND_STATES"] = 2] = "BIND_STATES";
              WebGLCmd[WebGLCmd["DRAW"] = 3] = "DRAW";
              WebGLCmd[WebGLCmd["UPDATE_BUFFER"] = 4] = "UPDATE_BUFFER";
              WebGLCmd[WebGLCmd["COPY_BUFFER_TO_TEXTURE"] = 5] = "COPY_BUFFER_TO_TEXTURE";
              WebGLCmd[WebGLCmd["COUNT"] = 6] = "COUNT";
            })(WebGLCmd || (WebGLCmd = {}));

            var WebGLCmdObject = function WebGLCmdObject(type) {
              this.cmdType = void 0;
              this.refCount = 0;
              this.cmdType = type;
            };
            var WebGLCmdBeginRenderPass = function (_WebGLCmdObject) {
              _inheritsLoose(WebGLCmdBeginRenderPass, _WebGLCmdObject);

              function WebGLCmdBeginRenderPass() {
                var _this;

                _this = _WebGLCmdObject.call(this, WebGLCmd.BEGIN_RENDER_PASS) || this;
                _this.gpuRenderPass = null;
                _this.gpuFramebuffer = null;
                _this.renderArea = new Rect();
                _this.clearFlag = ClearFlagBit.NONE;
                _this.clearColors = [];
                _this.clearDepth = 1.0;
                _this.clearStencil = 0;
                return _this;
              }

              var _proto = WebGLCmdBeginRenderPass.prototype;

              _proto.clear = function clear() {
                this.gpuFramebuffer = null;
                this.clearColors.length = 0;
              };

              return WebGLCmdBeginRenderPass;
            }(WebGLCmdObject);
            var WebGLCmdBindStates = function (_WebGLCmdObject2) {
              _inheritsLoose(WebGLCmdBindStates, _WebGLCmdObject2);

              function WebGLCmdBindStates() {
                var _this2;

                _this2 = _WebGLCmdObject2.call(this, WebGLCmd.BIND_STATES) || this;
                _this2.gpuPipelineState = null;
                _this2.gpuInputAssembler = null;
                _this2.gpuDescriptorSets = [];
                _this2.dynamicOffsets = [];
                _this2.dynamicStates = new DynamicStates();
                return _this2;
              }

              var _proto2 = WebGLCmdBindStates.prototype;

              _proto2.clear = function clear() {
                this.gpuPipelineState = null;
                this.gpuDescriptorSets.length = 0;
                this.gpuInputAssembler = null;
                this.dynamicOffsets.length = 0;
              };

              return WebGLCmdBindStates;
            }(WebGLCmdObject);
            var WebGLCmdDraw = function (_WebGLCmdObject3) {
              _inheritsLoose(WebGLCmdDraw, _WebGLCmdObject3);

              function WebGLCmdDraw() {
                var _this3;

                _this3 = _WebGLCmdObject3.call(this, WebGLCmd.DRAW) || this;
                _this3.drawInfo = new DrawInfo();
                return _this3;
              }

              var _proto3 = WebGLCmdDraw.prototype;

              _proto3.clear = function clear() {};

              return WebGLCmdDraw;
            }(WebGLCmdObject);
            var WebGLCmdUpdateBuffer = function (_WebGLCmdObject4) {
              _inheritsLoose(WebGLCmdUpdateBuffer, _WebGLCmdObject4);

              function WebGLCmdUpdateBuffer() {
                var _this4;

                _this4 = _WebGLCmdObject4.call(this, WebGLCmd.UPDATE_BUFFER) || this;
                _this4.gpuBuffer = null;
                _this4.buffer = null;
                _this4.offset = 0;
                _this4.size = 0;
                return _this4;
              }

              var _proto4 = WebGLCmdUpdateBuffer.prototype;

              _proto4.clear = function clear() {
                this.gpuBuffer = null;
                this.buffer = null;
              };

              return WebGLCmdUpdateBuffer;
            }(WebGLCmdObject);
            var WebGLCmdCopyBufferToTexture = function (_WebGLCmdObject5) {
              _inheritsLoose(WebGLCmdCopyBufferToTexture, _WebGLCmdObject5);

              function WebGLCmdCopyBufferToTexture() {
                var _this5;

                _this5 = _WebGLCmdObject5.call(this, WebGLCmd.COPY_BUFFER_TO_TEXTURE) || this;
                _this5.gpuTexture = null;
                _this5.buffers = [];
                _this5.regions = [];
                return _this5;
              }

              var _proto5 = WebGLCmdCopyBufferToTexture.prototype;

              _proto5.clear = function clear() {
                this.gpuTexture = null;
                this.buffers.length = 0;
                this.regions.length = 0;
              };

              return WebGLCmdCopyBufferToTexture;
            }(WebGLCmdObject);
            var WebGLCmdPackage = function () {
              function WebGLCmdPackage() {
                this.cmds = new CachedArray(1);
                this.beginRenderPassCmds = new CachedArray(1);
                this.bindStatesCmds = new CachedArray(1);
                this.drawCmds = new CachedArray(1);
                this.updateBufferCmds = new CachedArray(1);
                this.copyBufferToTextureCmds = new CachedArray(1);
              }

              var _proto6 = WebGLCmdPackage.prototype;

              _proto6.clearCmds = function clearCmds(allocator) {
                if (this.beginRenderPassCmds.length) {
                  allocator.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds);
                  this.beginRenderPassCmds.clear();
                }

                if (this.bindStatesCmds.length) {
                  allocator.bindStatesCmdPool.freeCmds(this.bindStatesCmds);
                  this.bindStatesCmds.clear();
                }

                if (this.drawCmds.length) {
                  allocator.drawCmdPool.freeCmds(this.drawCmds);
                  this.drawCmds.clear();
                }

                if (this.updateBufferCmds.length) {
                  allocator.updateBufferCmdPool.freeCmds(this.updateBufferCmds);
                  this.updateBufferCmds.clear();
                }

                if (this.copyBufferToTextureCmds.length) {
                  allocator.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds);
                  this.copyBufferToTextureCmds.clear();
                }

                this.cmds.clear();
              };

              return WebGLCmdPackage;
            }();
            function WebGLCmdFuncCreateBuffer(device, gpuBuffer) {
              var gl = device.gl;
              var cache = device.stateCache;
              var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

              if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
                gpuBuffer.glTarget = gl.ARRAY_BUFFER;
                var glBuffer = gl.createBuffer();

                if (glBuffer) {
                  gpuBuffer.glBuffer = glBuffer;

                  if (gpuBuffer.size > 0) {
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                        cache.glVAO = null;
                      }
                    }

                    gfxStateCache.gpuInputAssembler = null;

                    if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
                      gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                      device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
                    }

                    gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    device.stateCache.glArrayBuffer = null;
                  }
                }
              } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
                gpuBuffer.glTarget = gl.ELEMENT_ARRAY_BUFFER;

                var _glBuffer = gl.createBuffer();

                if (_glBuffer) {
                  gpuBuffer.glBuffer = _glBuffer;

                  if (gpuBuffer.size > 0) {
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                        cache.glVAO = null;
                      }
                    }

                    gfxStateCache.gpuInputAssembler = null;

                    if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                      device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
                    }

                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    device.stateCache.glElementArrayBuffer = null;
                  }
                }
              } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
                gpuBuffer.glTarget = gl.NONE;

                if (gpuBuffer.buffer) {
                  gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);
                }
              } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
                gpuBuffer.glTarget = gl.NONE;
              } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST) {
                gpuBuffer.glTarget = gl.NONE;
              } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
                gpuBuffer.glTarget = gl.NONE;
              } else {
                console.error('Unsupported BufferType, create buffer failed.');
                gpuBuffer.glTarget = gl.NONE;
              }
            }
            function WebGLCmdFuncDestroyBuffer(device, gpuBuffer) {
              var gl = device.gl;
              var cache = device.stateCache;

              if (gpuBuffer.glBuffer) {
                switch (gpuBuffer.glTarget) {
                  case gl.ARRAY_BUFFER:
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                        device.stateCache.glVAO = null;
                      }
                    }

                    gfxStateCache.gpuInputAssembler = null;
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    device.stateCache.glArrayBuffer = null;
                    break;

                  case gl.ELEMENT_ARRAY_BUFFER:
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                        device.stateCache.glVAO = null;
                      }
                    }

                    gfxStateCache.gpuInputAssembler = null;
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    device.stateCache.glElementArrayBuffer = null;
                    break;
                }

                gl.deleteBuffer(gpuBuffer.glBuffer);
                gpuBuffer.glBuffer = null;
              }
            }
            function WebGLCmdFuncResizeBuffer(device, gpuBuffer) {
              var gl = device.gl;
              var cache = device.stateCache;
              var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

              if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache.gpuInputAssembler = null;

                if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                }

                if (gpuBuffer.buffer) {
                  gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
                } else {
                  gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
                }

                gl.bindBuffer(gl.ARRAY_BUFFER, null);
                device.stateCache.glArrayBuffer = null;
              } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache.gpuInputAssembler = null;

                if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                }

                if (gpuBuffer.buffer) {
                  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
                } else {
                  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
                }

                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                device.stateCache.glElementArrayBuffer = null;
              } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
                if (gpuBuffer.buffer) {
                  gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);
                }
              } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT || gpuBuffer.usage & BufferUsageBit.TRANSFER_DST || gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
                gpuBuffer.glTarget = gl.NONE;
              } else {
                console.error('Unsupported BufferType, create buffer failed.');
                gpuBuffer.glTarget = gl.NONE;
              }
            }
            function WebGLCmdFuncUpdateBuffer(device, gpuBuffer, buffer, offset, size) {
              if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
                if (ArrayBuffer.isView(buffer)) {
                  gpuBuffer.vf32.set(buffer, offset / Float32Array.BYTES_PER_ELEMENT);
                } else {
                  gpuBuffer.vf32.set(new Float32Array(buffer), offset / Float32Array.BYTES_PER_ELEMENT);
                }
              } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
                gpuBuffer.indirects.clearDraws();
                var drawInfos = buffer.drawInfos;

                for (var i = 0; i < drawInfos.length; ++i) {
                  gpuBuffer.indirects.setDrawInfo(offset + i, drawInfos[i]);
                }
              } else {
                var buff = buffer;
                var gl = device.gl;
                var cache = device.stateCache;

                switch (gpuBuffer.glTarget) {
                  case gl.ARRAY_BUFFER:
                    {
                      if (device.extensions.useVAO) {
                        if (cache.glVAO) {
                          device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                          cache.glVAO = null;
                        }
                      }

                      gfxStateCache.gpuInputAssembler = null;

                      if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
                        gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                        device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
                      }

                      break;
                    }

                  case gl.ELEMENT_ARRAY_BUFFER:
                    {
                      if (device.extensions.useVAO) {
                        if (cache.glVAO) {
                          device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                          cache.glVAO = null;
                        }
                      }

                      gfxStateCache.gpuInputAssembler = null;

                      if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                        device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
                      }

                      break;
                    }

                  default:
                    {
                      console.error('Unsupported BufferType, update buffer failed.');
                      return;
                    }
                }

                if (size === buff.byteLength) {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
                } else {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
                }
              }
            }
            function WebGLCmdFuncCreateTexture(device, gpuTexture) {
              var gl = device.gl;
              gpuTexture.glFormat = gpuTexture.glInternalFmt = GFXFormatToWebGLFormat(gpuTexture.format, gl);
              gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);
              var w = gpuTexture.width;
              var h = gpuTexture.height;

              switch (gpuTexture.type) {
                case TextureType.TEX2D:
                  {
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                    if (gpuTexture.isSwapchainTexture) break;
                    var maxSize = Math.max(w, h);

                    if (maxSize > device.capabilities.maxTextureSize) {
                      errorID(9100, maxSize, device.capabilities.maxTextureSize);
                    }

                    if (!device.textureExclusive[gpuTexture.format] && !device.extensions.WEBGL_depth_texture && FormatInfos[gpuTexture.format].hasDepth) {
                      gpuTexture.glInternalFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);
                      gpuTexture.glRenderbuffer = gl.createRenderbuffer();

                      if (gpuTexture.size > 0) {
                        if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                          gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                          device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                        }

                        gl.renderbufferStorage(gl.RENDERBUFFER, gpuTexture.glInternalFmt, w, h);
                      }
                    } else {
                      gpuTexture.glTexture = gl.createTexture();

                      if (gpuTexture.size > 0) {
                        var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                        if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                          gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                          glTexUnit.glTexture = gpuTexture.glTexture;
                        }

                        if (FormatInfos[gpuTexture.format].isCompressed) {
                          for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                            var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                            var view = new Uint8Array(imgSize);
                            gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                            w = Math.max(1, w >> 1);
                            h = Math.max(1, h >> 1);
                          }
                        } else {
                          for (var _i = 0; _i < gpuTexture.mipLevel; ++_i) {
                            gl.texImage2D(gl.TEXTURE_2D, _i, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                            w = Math.max(1, w >> 1);
                            h = Math.max(1, h >> 1);
                          }
                        }

                        if (gpuTexture.isPowerOf2) {
                          gpuTexture.glWrapS = gl.REPEAT;
                          gpuTexture.glWrapT = gl.REPEAT;
                        } else {
                          gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
                          gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
                        }

                        gpuTexture.glMinFilter = gl.LINEAR;
                        gpuTexture.glMagFilter = gl.LINEAR;
                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
                      }
                    }

                    break;
                  }

                case TextureType.CUBE:
                  {
                    gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

                    var _maxSize = Math.max(w, h);

                    if (_maxSize > device.capabilities.maxCubeMapTextureSize) {
                      errorID(9100, _maxSize, device.capabilities.maxTextureSize);
                    }

                    gpuTexture.glTexture = gl.createTexture();

                    if (gpuTexture.size > 0) {
                      var _glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                      if (_glTexUnit.glTexture !== gpuTexture.glTexture) {
                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                        _glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      if (FormatInfos[gpuTexture.format].isCompressed) {
                        for (var f = 0; f < 6; ++f) {
                          w = gpuTexture.width;
                          h = gpuTexture.height;

                          for (var _i2 = 0; _i2 < gpuTexture.mipLevel; ++_i2) {
                            var _imgSize = FormatSize(gpuTexture.format, w, h, 1);

                            var _view = new Uint8Array(_imgSize);

                            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i2, gpuTexture.glInternalFmt, w, h, 0, _view);
                            w = Math.max(1, w >> 1);
                            h = Math.max(1, h >> 1);
                          }
                        }
                      } else {
                        for (var _f = 0; _f < 6; ++_f) {
                          w = gpuTexture.width;
                          h = gpuTexture.height;

                          for (var _i3 = 0; _i3 < gpuTexture.mipLevel; ++_i3) {
                            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f, _i3, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                            w = Math.max(1, w >> 1);
                            h = Math.max(1, h >> 1);
                          }
                        }
                      }

                      if (gpuTexture.isPowerOf2) {
                        gpuTexture.glWrapS = gl.REPEAT;
                        gpuTexture.glWrapT = gl.REPEAT;
                      } else {
                        gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
                        gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
                      }

                      gpuTexture.glMinFilter = gl.LINEAR;
                      gpuTexture.glMagFilter = gl.LINEAR;
                      gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
                      gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
                      gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
                      gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported TextureType, create texture failed.');
                    gpuTexture.type = TextureType.TEX2D;
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                  }
              }
            }
            function WebGLCmdFuncDestroyTexture(device, gpuTexture) {
              var gl = device.gl;

              if (gpuTexture.glTexture) {
                var glTexUnits = device.stateCache.glTexUnits;
                var texUnit = device.stateCache.texUnit;
                gl.deleteTexture(gpuTexture.glTexture);

                for (var i = 0; i < glTexUnits.length; i++) {
                  if (glTexUnits[i].glTexture === gpuTexture.glTexture) {
                    gl.activeTexture(gl.TEXTURE0 + i);
                    texUnit = i;
                    gl.bindTexture(gpuTexture.glTarget, null);
                    glTexUnits[i].glTexture = null;
                  }
                }

                device.stateCache.texUnit = texUnit;
                gpuTexture.glTexture = null;
              }

              if (gpuTexture.glRenderbuffer) {
                var glRenderbuffer = device.stateCache.glRenderbuffer;
                gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);

                if (glRenderbuffer === gpuTexture.glRenderbuffer) {
                  gl.bindRenderbuffer(gl.RENDERBUFFER, null);
                  glRenderbuffer = null;
                }

                gpuTexture.glRenderbuffer = null;
              }
            }
            function WebGLCmdFuncResizeTexture(device, gpuTexture) {
              if (!gpuTexture.size) return;
              var gl = device.gl;
              var w = gpuTexture.width;
              var h = gpuTexture.height;

              switch (gpuTexture.type) {
                case TextureType.TEX2D:
                  {
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                    var maxSize = Math.max(w, h);

                    if (maxSize > device.capabilities.maxTextureSize) {
                      errorID(9100, maxSize, device.capabilities.maxTextureSize);
                    }

                    if (gpuTexture.glRenderbuffer) {
                      if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                        gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                        device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                      }

                      gl.renderbufferStorage(gl.RENDERBUFFER, gpuTexture.glInternalFmt, w, h);
                    } else if (gpuTexture.glTexture) {
                      var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                      if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                        gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                        glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      if (FormatInfos[gpuTexture.format].isCompressed) {
                        for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                          var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                          var view = new Uint8Array(imgSize);
                          gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                          w = Math.max(1, w >> 1);
                          h = Math.max(1, h >> 1);
                        }
                      } else {
                        for (var _i4 = 0; _i4 < gpuTexture.mipLevel; ++_i4) {
                          gl.texImage2D(gl.TEXTURE_2D, _i4, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                          w = Math.max(1, w >> 1);
                          h = Math.max(1, h >> 1);
                        }
                      }
                    }

                    break;
                  }

                case TextureType.CUBE:
                  {
                    gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

                    var _maxSize2 = Math.max(w, h);

                    if (_maxSize2 > device.capabilities.maxCubeMapTextureSize) {
                      errorID(9100, _maxSize2, device.capabilities.maxTextureSize);
                    }

                    var _glTexUnit2 = device.stateCache.glTexUnits[device.stateCache.texUnit];

                    if (_glTexUnit2.glTexture !== gpuTexture.glTexture) {
                      gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                      _glTexUnit2.glTexture = gpuTexture.glTexture;
                    }

                    if (FormatInfos[gpuTexture.format].isCompressed) {
                      for (var f = 0; f < 6; ++f) {
                        w = gpuTexture.width;
                        h = gpuTexture.height;

                        for (var _i5 = 0; _i5 < gpuTexture.mipLevel; ++_i5) {
                          var _imgSize2 = FormatSize(gpuTexture.format, w, h, 1);

                          var _view2 = new Uint8Array(_imgSize2);

                          gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i5, gpuTexture.glInternalFmt, w, h, 0, _view2);
                          w = Math.max(1, w >> 1);
                          h = Math.max(1, h >> 1);
                        }
                      }
                    } else {
                      for (var _f2 = 0; _f2 < 6; ++_f2) {
                        w = gpuTexture.width;
                        h = gpuTexture.height;

                        for (var _i6 = 0; _i6 < gpuTexture.mipLevel; ++_i6) {
                          gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f2, _i6, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                          w = Math.max(1, w >> 1);
                          h = Math.max(1, h >> 1);
                        }
                      }
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported TextureType, create texture failed.');
                    gpuTexture.type = TextureType.TEX2D;
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                  }
              }
            }
            function WebGLCmdFuncCreateFramebuffer(device, gpuFramebuffer) {
              for (var i = 0; i < gpuFramebuffer.gpuColorTextures.length; ++i) {
                var tex = gpuFramebuffer.gpuColorTextures[i];

                if (tex.isSwapchainTexture) {
                  gpuFramebuffer.isOffscreen = false;
                  return;
                }
              }

              var gl = device.gl;
              var attachments = [];
              var glFramebuffer = gl.createFramebuffer();

              if (glFramebuffer) {
                gpuFramebuffer.glFramebuffer = glFramebuffer;

                if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
                  gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
                }

                for (var _i7 = 0; _i7 < gpuFramebuffer.gpuColorTextures.length; ++_i7) {
                  var gpuTexture = gpuFramebuffer.gpuColorTextures[_i7];

                  if (gpuTexture) {
                    if (gpuTexture.glTexture) {
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i7, gpuTexture.glTarget, gpuTexture.glTexture, 0);
                    } else {
                      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i7, gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                    }

                    attachments.push(gl.COLOR_ATTACHMENT0 + _i7);
                    gpuFramebuffer.width = Math.min(gpuFramebuffer.width, gpuTexture.width);
                    gpuFramebuffer.height = Math.min(gpuFramebuffer.height, gpuTexture.height);
                  }
                }

                var dst = gpuFramebuffer.gpuDepthStencilTexture;

                if (dst) {
                  var glAttachment = FormatInfos[dst.format].hasStencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;

                  if (dst.glTexture) {
                    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, dst.glTarget, dst.glTexture, 0);
                  } else {
                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, glAttachment, gl.RENDERBUFFER, dst.glRenderbuffer);
                  }

                  gpuFramebuffer.width = Math.min(gpuFramebuffer.width, dst.width);
                  gpuFramebuffer.height = Math.min(gpuFramebuffer.height, dst.height);
                }

                if (device.extensions.WEBGL_draw_buffers) {
                  device.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(attachments);
                }

                var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

                if (status !== gl.FRAMEBUFFER_COMPLETE) {
                  switch (status) {
                    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT');
                        break;
                      }

                    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');
                        break;
                      }

                    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS');
                        break;
                      }

                    case gl.FRAMEBUFFER_UNSUPPORTED:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED');
                        break;
                      }
                  }
                }

                if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
                  gl.bindFramebuffer(gl.FRAMEBUFFER, device.stateCache.glFramebuffer);
                }
              }
            }
            function WebGLCmdFuncDestroyFramebuffer(device, gpuFramebuffer) {
              if (gpuFramebuffer.glFramebuffer) {
                device.gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);

                if (device.stateCache.glFramebuffer === gpuFramebuffer.glFramebuffer) {
                  device.gl.bindFramebuffer(device.gl.FRAMEBUFFER, null);
                  device.stateCache.glFramebuffer = null;
                }

                gpuFramebuffer.glFramebuffer = null;
              }
            }
            function WebGLCmdFuncCreateShader(device, gpuShader) {
              var gl = device.gl;

              var _loop = function _loop(k) {
                var gpuStage = gpuShader.gpuStages[k];
                var glShaderType = 0;
                var shaderTypeStr = '';
                var lineNumber = 1;

                switch (gpuStage.type) {
                  case ShaderStageFlagBit.VERTEX:
                    {
                      shaderTypeStr = 'VertexShader';
                      glShaderType = gl.VERTEX_SHADER;
                      break;
                    }

                  case ShaderStageFlagBit.FRAGMENT:
                    {
                      shaderTypeStr = 'FragmentShader';
                      glShaderType = gl.FRAGMENT_SHADER;
                      break;
                    }

                  default:
                    {
                      console.error('Unsupported ShaderType.');
                      return {
                        v: void 0
                      };
                    }
                }

                var glShader = gl.createShader(glShaderType);

                if (glShader) {
                  gpuStage.glShader = glShader;
                  gl.shaderSource(gpuStage.glShader, gpuStage.source);
                  gl.compileShader(gpuStage.glShader);

                  if (!gl.getShaderParameter(gpuStage.glShader, gl.COMPILE_STATUS)) {
                    console.error(shaderTypeStr + " in '" + gpuShader.name + "' compilation failed.");
                    console.error('Shader source dump:', gpuStage.source.replace(/^|\n/g, function () {
                      return "\n" + lineNumber++ + " ";
                    }));
                    console.error(gl.getShaderInfoLog(gpuStage.glShader));

                    for (var l = 0; l < gpuShader.gpuStages.length; l++) {
                      var stage = gpuShader.gpuStages[k];

                      if (stage.glShader) {
                        gl.deleteShader(stage.glShader);
                        stage.glShader = null;
                      }
                    }

                    return {
                      v: void 0
                    };
                  }
                }
              };

              for (var k = 0; k < gpuShader.gpuStages.length; k++) {
                var _ret = _loop(k);

                if (typeof _ret === "object") return _ret.v;
              }

              var glProgram = gl.createProgram();

              if (!glProgram) {
                return;
              }

              gpuShader.glProgram = glProgram;

              for (var _k = 0; _k < gpuShader.gpuStages.length; _k++) {
                var gpuStage = gpuShader.gpuStages[_k];
                gl.attachShader(gpuShader.glProgram, gpuStage.glShader);
              }

              gl.linkProgram(gpuShader.glProgram);

              if (device.extensions.destroyShadersImmediately) {
                for (var _k2 = 0; _k2 < gpuShader.gpuStages.length; _k2++) {
                  var _gpuStage = gpuShader.gpuStages[_k2];

                  if (_gpuStage.glShader) {
                    gl.detachShader(gpuShader.glProgram, _gpuStage.glShader);
                    gl.deleteShader(_gpuStage.glShader);
                    _gpuStage.glShader = null;
                  }
                }
              }

              if (gl.getProgramParameter(gpuShader.glProgram, gl.LINK_STATUS)) {
                debug("Shader '" + gpuShader.name + "' compilation succeeded.");
              } else {
                console.error("Failed to link shader '" + gpuShader.name + "'.");
                console.error(gl.getProgramInfoLog(gpuShader.glProgram));
                return;
              }

              var activeAttribCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_ATTRIBUTES);
              gpuShader.glInputs = new Array(activeAttribCount);

              for (var i = 0; i < activeAttribCount; ++i) {
                var attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);

                if (attribInfo) {
                  var varName = void 0;
                  var nameOffset = attribInfo.name.indexOf('[');

                  if (nameOffset !== -1) {
                    varName = attribInfo.name.substr(0, nameOffset);
                  } else {
                    varName = attribInfo.name;
                  }

                  var glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);
                  var type = WebGLTypeToGFXType(attribInfo.type, gl);
                  var stride = WebGLGetTypeSize(attribInfo.type, gl);
                  gpuShader.glInputs[i] = {
                    binding: glLoc,
                    name: varName,
                    type: type,
                    stride: stride,
                    count: attribInfo.size,
                    size: stride * attribInfo.size,
                    glType: attribInfo.type,
                    glLoc: glLoc
                  };
                }
              }

              if (gpuShader.blocks.length > 0) {
                gpuShader.glBlocks = new Array(gpuShader.blocks.length);

                for (var _i8 = 0; _i8 < gpuShader.blocks.length; ++_i8) {
                  var block = gpuShader.blocks[_i8];
                  var glBlock = {
                    set: block.set,
                    binding: block.binding,
                    name: block.name,
                    size: 0,
                    glUniforms: new Array(block.members.length),
                    glActiveUniforms: []
                  };
                  gpuShader.glBlocks[_i8] = glBlock;

                  for (var u = 0; u < block.members.length; ++u) {
                    var uniform = block.members[u];
                    var glType = GFXTypeToWebGLType(uniform.type, gl);

                    var _stride = WebGLGetTypeSize(glType, gl);

                    var size = _stride * uniform.count;
                    glBlock.glUniforms[u] = {
                      binding: -1,
                      name: uniform.name,
                      type: uniform.type,
                      stride: _stride,
                      count: uniform.count,
                      size: size,
                      offset: 0,
                      glType: glType,
                      glLoc: null,
                      array: null
                    };
                  }
                }
              }

              for (var _i9 = 0; _i9 < gpuShader.subpassInputs.length; ++_i9) {
                var subpassInput = gpuShader.subpassInputs[_i9];
                gpuShader.samplerTextures.push(new UniformSamplerTexture(subpassInput.set, subpassInput.binding, subpassInput.name, Type$1.SAMPLER2D, subpassInput.count));
              }

              if (gpuShader.samplerTextures.length > 0) {
                gpuShader.glSamplerTextures = new Array(gpuShader.samplerTextures.length);

                for (var _i10 = 0; _i10 < gpuShader.samplerTextures.length; ++_i10) {
                  var sampler = gpuShader.samplerTextures[_i10];
                  gpuShader.glSamplerTextures[_i10] = {
                    set: sampler.set,
                    binding: sampler.binding,
                    name: sampler.name,
                    type: sampler.type,
                    count: sampler.count,
                    units: [],
                    glUnits: null,
                    glType: GFXTypeToWebGLType(sampler.type, gl),
                    glLoc: null
                  };
                }
              }

              var activeUniformCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_UNIFORMS);

              for (var _i11 = 0; _i11 < activeUniformCount; ++_i11) {
                var uniformInfo = gl.getActiveUniform(gpuShader.glProgram, _i11);

                if (uniformInfo) {
                  var isSampler = uniformInfo.type === gl.SAMPLER_2D || uniformInfo.type === gl.SAMPLER_CUBE;

                  if (!isSampler) {
                    var _glLoc = gl.getUniformLocation(gpuShader.glProgram, uniformInfo.name);

                    if (device.extensions.isLocationActive(_glLoc)) {
                      var _varName = void 0;

                      var _nameOffset = uniformInfo.name.indexOf('[');

                      if (_nameOffset !== -1) {
                        _varName = uniformInfo.name.substr(0, _nameOffset);
                      } else {
                        _varName = uniformInfo.name;
                      }

                      for (var j = 0; j < gpuShader.glBlocks.length; j++) {
                        var _glBlock = gpuShader.glBlocks[j];

                        for (var _k3 = 0; _k3 < _glBlock.glUniforms.length; _k3++) {
                          var glUniform = _glBlock.glUniforms[_k3];

                          if (glUniform.name === _varName) {
                            glUniform.glLoc = _glLoc;
                            glUniform.count = uniformInfo.size;
                            glUniform.size = glUniform.stride * glUniform.count;
                            glUniform.array = new (GFXTypeToTypedArrayCtor(glUniform.type))(glUniform.size / 4);

                            _glBlock.glActiveUniforms.push(glUniform);

                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }

              for (var _j = 0; _j < gpuShader.glBlocks.length; _j++) {
                var _glBlock2 = gpuShader.glBlocks[_j];

                for (var _k4 = 0; _k4 < _glBlock2.glUniforms.length; _k4++) {
                  var _glUniform = _glBlock2.glUniforms[_k4];
                  _glUniform.offset = _glBlock2.size / 4;
                  _glBlock2.size += _glUniform.size;
                }
              }

              var glActiveSamplers = [];
              var glActiveSamplerLocations = [];
              var bindingMappings = device.bindingMappings;
              var texUnitCacheMap = device.stateCache.texUnitCacheMap;
              var flexibleSetBaseOffset = 0;

              for (var _i12 = 0; _i12 < gpuShader.blocks.length; ++_i12) {
                if (gpuShader.blocks[_i12].set === bindingMappings.flexibleSet) {
                  flexibleSetBaseOffset++;
                }
              }

              var arrayOffset = 0;

              for (var _i13 = 0; _i13 < gpuShader.samplerTextures.length; ++_i13) {
                var _sampler = gpuShader.samplerTextures[_i13];

                var _glLoc2 = gl.getUniformLocation(gpuShader.glProgram, _sampler.name);

                if (device.extensions.isLocationActive(_glLoc2)) {
                  glActiveSamplers.push(gpuShader.glSamplerTextures[_i13]);
                  glActiveSamplerLocations.push(_glLoc2);
                }

                if (texUnitCacheMap[_sampler.name] === undefined) {
                  var binding = _sampler.binding + bindingMappings.samplerTextureOffsets[_sampler.set] + arrayOffset;

                  if (_sampler.set === bindingMappings.flexibleSet) {
                    binding -= flexibleSetBaseOffset;
                  }

                  texUnitCacheMap[_sampler.name] = binding % device.capabilities.maxTextureUnits;
                  arrayOffset += _sampler.count - 1;
                }
              }

              if (glActiveSamplers.length) {
                var usedTexUnits = [];

                for (var _i14 = 0; _i14 < glActiveSamplers.length; ++_i14) {
                  var glSampler = glActiveSamplers[_i14];
                  var cachedUnit = texUnitCacheMap[glSampler.name];

                  if (cachedUnit !== undefined) {
                    glSampler.glLoc = glActiveSamplerLocations[_i14];

                    for (var t = 0; t < glSampler.count; ++t) {
                      while (usedTexUnits[cachedUnit]) {
                        cachedUnit = (cachedUnit + 1) % device.capabilities.maxTextureUnits;
                      }

                      glSampler.units.push(cachedUnit);
                      usedTexUnits[cachedUnit] = true;
                    }
                  }
                }

                var unitIdx = 0;

                for (var _i15 = 0; _i15 < glActiveSamplers.length; ++_i15) {
                  var _glSampler = glActiveSamplers[_i15];

                  if (!device.extensions.isLocationActive(_glSampler.glLoc)) {
                    _glSampler.glLoc = glActiveSamplerLocations[_i15];

                    for (var _t = 0; _t < _glSampler.count; ++_t) {
                      while (usedTexUnits[unitIdx]) {
                        unitIdx = (unitIdx + 1) % device.capabilities.maxTextureUnits;
                      }

                      if (texUnitCacheMap[_glSampler.name] === undefined) {
                        texUnitCacheMap[_glSampler.name] = unitIdx;
                      }

                      _glSampler.units.push(unitIdx);

                      usedTexUnits[unitIdx] = true;
                    }
                  }
                }

                if (device.stateCache.glProgram !== gpuShader.glProgram) {
                  gl.useProgram(gpuShader.glProgram);
                }

                for (var _i16 = 0; _i16 < glActiveSamplers.length; _i16++) {
                  var _glSampler2 = glActiveSamplers[_i16];
                  _glSampler2.glUnits = new Int32Array(_glSampler2.units);
                  gl.uniform1iv(_glSampler2.glLoc, _glSampler2.glUnits);
                }

                if (device.stateCache.glProgram !== gpuShader.glProgram) {
                  gl.useProgram(device.stateCache.glProgram);
                }
              }

              for (var _i17 = 0; _i17 < gpuShader.glBlocks.length;) {
                if (gpuShader.glBlocks[_i17].glActiveUniforms.length) {
                  _i17++;
                } else {
                  gpuShader.glBlocks[_i17] = gpuShader.glBlocks[gpuShader.glBlocks.length - 1];
                  gpuShader.glBlocks.length--;
                }
              }

              gpuShader.glSamplerTextures = glActiveSamplers;
            }
            function WebGLCmdFuncDestroyShader(device, gpuShader) {
              if (gpuShader.glProgram) {
                var gl = device.gl;

                if (!device.extensions.destroyShadersImmediately) {
                  for (var k = 0; k < gpuShader.gpuStages.length; k++) {
                    var gpuStage = gpuShader.gpuStages[k];

                    if (gpuStage.glShader) {
                      gl.detachShader(gpuShader.glProgram, gpuStage.glShader);
                      gl.deleteShader(gpuStage.glShader);
                      gpuStage.glShader = null;
                    }
                  }
                }

                gl.deleteProgram(gpuShader.glProgram);

                if (device.stateCache.glProgram === gpuShader.glProgram) {
                  device.gl.useProgram(null);
                  device.stateCache.glProgram = null;
                }

                gpuShader.glProgram = null;
              }
            }
            function WebGLCmdFuncCreateInputAssember(device, gpuInputAssembler) {
              var gl = device.gl;
              gpuInputAssembler.glAttribs = new Array(gpuInputAssembler.attributes.length);
              var offsets = [0, 0, 0, 0, 0, 0, 0, 0];

              for (var i = 0; i < gpuInputAssembler.attributes.length; ++i) {
                var attrib = gpuInputAssembler.attributes[i];
                var stream = attrib.stream !== undefined ? attrib.stream : 0;
                var gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];
                var glType = GFXFormatToWebGLType(attrib.format, gl);
                var size = FormatInfos[attrib.format].size;
                gpuInputAssembler.glAttribs[i] = {
                  name: attrib.name,
                  glBuffer: gpuBuffer.glBuffer,
                  glType: glType,
                  size: size,
                  count: FormatInfos[attrib.format].count,
                  stride: gpuBuffer.stride,
                  componentCount: WebGLGetComponentCount(glType, gl),
                  isNormalized: attrib.isNormalized !== undefined ? attrib.isNormalized : false,
                  isInstanced: attrib.isInstanced !== undefined ? attrib.isInstanced : false,
                  offset: offsets[stream]
                };
                offsets[stream] += size;
              }
            }
            function WebGLCmdFuncDestroyInputAssembler(device, gpuInputAssembler) {
              var it = gpuInputAssembler.glVAOs.values();
              var res = it.next();
              var OES_vertex_array_object = device.extensions.OES_vertex_array_object;
              var glVAO = device.stateCache.glVAO;

              while (!res.done) {
                OES_vertex_array_object.deleteVertexArrayOES(res.value);

                if (glVAO === res.value) {
                  OES_vertex_array_object.bindVertexArrayOES(null);
                  glVAO = null;
                }

                res = it.next();
              }

              device.stateCache.glVAO = glVAO;
              gpuInputAssembler.glVAOs.clear();
            }
            var gfxStateCache = {
              gpuPipelineState: null,
              gpuInputAssembler: null,
              glPrimitive: 0
            };
            var realRenderArea = new Rect();
            function WebGLCmdFuncBeginRenderPass(device, gpuRenderPass, gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil) {
              var gl = device.gl;
              var cache = device.stateCache;
              var clears = 0;

              if (gpuFramebuffer) {
                realRenderArea.x = renderArea.x << gpuFramebuffer.lodLevel;
                realRenderArea.y = renderArea.y << gpuFramebuffer.lodLevel;
                realRenderArea.width = renderArea.width << gpuFramebuffer.lodLevel;
                realRenderArea.height = renderArea.height << gpuFramebuffer.lodLevel;
              }

              if (gpuFramebuffer && gpuRenderPass) {
                if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
                  gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
                  cache.glFramebuffer = gpuFramebuffer.glFramebuffer;
                }

                if (cache.viewport.left !== realRenderArea.x || cache.viewport.top !== realRenderArea.y || cache.viewport.width !== realRenderArea.width || cache.viewport.height !== realRenderArea.height) {
                  gl.viewport(realRenderArea.x, realRenderArea.y, realRenderArea.width, realRenderArea.height);
                  cache.viewport.left = realRenderArea.x;
                  cache.viewport.top = realRenderArea.y;
                  cache.viewport.width = realRenderArea.width;
                  cache.viewport.height = realRenderArea.height;
                }

                if (cache.scissorRect.x !== realRenderArea.x || cache.scissorRect.y !== realRenderArea.y || cache.scissorRect.width !== realRenderArea.width || cache.scissorRect.height !== realRenderArea.height) {
                  gl.scissor(realRenderArea.x, realRenderArea.y, realRenderArea.width, realRenderArea.height);
                  cache.scissorRect.x = realRenderArea.x;
                  cache.scissorRect.y = realRenderArea.y;
                  cache.scissorRect.width = realRenderArea.width;
                  cache.scissorRect.height = realRenderArea.height;
                }

                var clearCount = clearColors.length;

                if (!device.extensions.WEBGL_draw_buffers) {
                  clearCount = 1;
                }

                for (var j = 0; j < clearCount; ++j) {
                  var colorAttachment = gpuRenderPass.colorAttachments[j];

                  if (colorAttachment.format !== Format.UNKNOWN) {
                    switch (colorAttachment.loadOp) {
                      case LoadOp.LOAD:
                        break;

                      case LoadOp.CLEAR:
                        {
                          if (cache.bs.targets[0].blendColorMask !== ColorMask.ALL) {
                            gl.colorMask(true, true, true, true);
                          }

                          var clearColor = clearColors[0];
                          gl.clearColor(clearColor.x, clearColor.y, clearColor.z, clearColor.w);
                          clears |= gl.COLOR_BUFFER_BIT;
                          break;
                        }

                      case LoadOp.DISCARD:
                        {
                          break;
                        }
                    }
                  }
                }

                if (gpuRenderPass.depthStencilAttachment) {
                  if (gpuRenderPass.depthStencilAttachment.format !== Format.UNKNOWN) {
                    switch (gpuRenderPass.depthStencilAttachment.depthLoadOp) {
                      case LoadOp.LOAD:
                        break;

                      case LoadOp.CLEAR:
                        {
                          if (!cache.dss.depthWrite) {
                            gl.depthMask(true);
                          }

                          gl.clearDepth(clearDepth);
                          clears |= gl.DEPTH_BUFFER_BIT;
                          break;
                        }

                      case LoadOp.DISCARD:
                        {
                          break;
                        }
                    }

                    if (FormatInfos[gpuRenderPass.depthStencilAttachment.format].hasStencil) {
                      switch (gpuRenderPass.depthStencilAttachment.stencilLoadOp) {
                        case LoadOp.LOAD:
                          break;

                        case LoadOp.CLEAR:
                          {
                            if (!cache.dss.stencilWriteMaskFront) {
                              gl.stencilMaskSeparate(gl.FRONT, 0xffff);
                            }

                            if (!cache.dss.stencilWriteMaskBack) {
                              gl.stencilMaskSeparate(gl.BACK, 0xffff);
                            }

                            gl.clearStencil(clearStencil);
                            clears |= gl.STENCIL_BUFFER_BIT;
                            break;
                          }

                        case LoadOp.DISCARD:
                          {
                            break;
                          }
                      }
                    }
                  }
                }

                if (clears) {
                  gl.clear(clears);
                }

                if (clears & gl.COLOR_BUFFER_BIT) {
                  var colorMask = cache.bs.targets[0].blendColorMask;

                  if (colorMask !== ColorMask.ALL) {
                    var r = (colorMask & ColorMask.R) !== ColorMask.NONE;
                    var g = (colorMask & ColorMask.G) !== ColorMask.NONE;
                    var b = (colorMask & ColorMask.B) !== ColorMask.NONE;
                    var a = (colorMask & ColorMask.A) !== ColorMask.NONE;
                    gl.colorMask(r, g, b, a);
                  }
                }

                if (clears & gl.DEPTH_BUFFER_BIT && !cache.dss.depthWrite) {
                  gl.depthMask(false);
                }

                if (clears & gl.STENCIL_BUFFER_BIT) {
                  if (!cache.dss.stencilWriteMaskFront) {
                    gl.stencilMaskSeparate(gl.FRONT, 0);
                  }

                  if (!cache.dss.stencilWriteMaskBack) {
                    gl.stencilMaskSeparate(gl.BACK, 0);
                  }
                }
              }
            }
            function WebGLCmdFuncBindStates(device, gpuPipelineState, gpuInputAssembler, gpuDescriptorSets, dynamicOffsets, dynamicStates) {
              var gl = device.gl;
              var cache = device.stateCache;
              var gpuShader = gpuPipelineState && gpuPipelineState.gpuShader;
              var isShaderChanged = false;
              var glWrapS;
              var glWrapT;
              var glMinFilter;

              if (gpuPipelineState && gfxStateCache.gpuPipelineState !== gpuPipelineState) {
                gfxStateCache.gpuPipelineState = gpuPipelineState;
                gfxStateCache.glPrimitive = gpuPipelineState.glPrimitive;

                if (gpuPipelineState.gpuShader) {
                  var glProgram = gpuPipelineState.gpuShader.glProgram;

                  if (cache.glProgram !== glProgram) {
                    gl.useProgram(glProgram);
                    cache.glProgram = glProgram;
                    isShaderChanged = true;
                  }
                }

                var rs = gpuPipelineState.rs;

                if (rs) {
                  if (cache.rs.cullMode !== rs.cullMode) {
                    switch (rs.cullMode) {
                      case CullMode.NONE:
                        {
                          gl.disable(gl.CULL_FACE);
                          break;
                        }

                      case CullMode.FRONT:
                        {
                          gl.enable(gl.CULL_FACE);
                          gl.cullFace(gl.FRONT);
                          break;
                        }

                      case CullMode.BACK:
                        {
                          gl.enable(gl.CULL_FACE);
                          gl.cullFace(gl.BACK);
                          break;
                        }
                    }

                    cache.rs.cullMode = rs.cullMode;
                  }

                  var isFrontFaceCCW = rs.isFrontFaceCCW;

                  if (cache.rs.isFrontFaceCCW !== isFrontFaceCCW) {
                    gl.frontFace(isFrontFaceCCW ? gl.CCW : gl.CW);
                    cache.rs.isFrontFaceCCW = isFrontFaceCCW;
                  }

                  if (cache.rs.depthBias !== rs.depthBias || cache.rs.depthBiasSlop !== rs.depthBiasSlop) {
                    gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);
                    cache.rs.depthBias = rs.depthBias;
                    cache.rs.depthBiasSlop = rs.depthBiasSlop;
                  }

                  if (cache.rs.lineWidth !== rs.lineWidth) {
                    gl.lineWidth(rs.lineWidth);
                    cache.rs.lineWidth = rs.lineWidth;
                  }
                }

                var dss = gpuPipelineState.dss;

                if (dss) {
                  if (cache.dss.depthTest !== dss.depthTest) {
                    if (dss.depthTest) {
                      gl.enable(gl.DEPTH_TEST);
                    } else {
                      gl.disable(gl.DEPTH_TEST);
                    }

                    cache.dss.depthTest = dss.depthTest;
                  }

                  if (cache.dss.depthWrite !== dss.depthWrite) {
                    gl.depthMask(dss.depthWrite);
                    cache.dss.depthWrite = dss.depthWrite;
                  }

                  if (cache.dss.depthFunc !== dss.depthFunc) {
                    gl.depthFunc(WebGLCmpFuncs[dss.depthFunc]);
                    cache.dss.depthFunc = dss.depthFunc;
                  }

                  if (cache.dss.stencilTestFront !== dss.stencilTestFront || cache.dss.stencilTestBack !== dss.stencilTestBack) {
                    if (dss.stencilTestFront || dss.stencilTestBack) {
                      gl.enable(gl.STENCIL_TEST);
                    } else {
                      gl.disable(gl.STENCIL_TEST);
                    }

                    cache.dss.stencilTestFront = dss.stencilTestFront;
                    cache.dss.stencilTestBack = dss.stencilTestBack;
                  }

                  if (cache.dss.stencilFuncFront !== dss.stencilFuncFront || cache.dss.stencilRefFront !== dss.stencilRefFront || cache.dss.stencilReadMaskFront !== dss.stencilReadMaskFront) {
                    gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[dss.stencilFuncFront], dss.stencilRefFront, dss.stencilReadMaskFront);
                    cache.dss.stencilFuncFront = dss.stencilFuncFront;
                    cache.dss.stencilRefFront = dss.stencilRefFront;
                    cache.dss.stencilReadMaskFront = dss.stencilReadMaskFront;
                  }

                  if (cache.dss.stencilFailOpFront !== dss.stencilFailOpFront || cache.dss.stencilZFailOpFront !== dss.stencilZFailOpFront || cache.dss.stencilPassOpFront !== dss.stencilPassOpFront) {
                    gl.stencilOpSeparate(gl.FRONT, WebGLStencilOps[dss.stencilFailOpFront], WebGLStencilOps[dss.stencilZFailOpFront], WebGLStencilOps[dss.stencilPassOpFront]);
                    cache.dss.stencilFailOpFront = dss.stencilFailOpFront;
                    cache.dss.stencilZFailOpFront = dss.stencilZFailOpFront;
                    cache.dss.stencilPassOpFront = dss.stencilPassOpFront;
                  }

                  if (cache.dss.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {
                    gl.stencilMaskSeparate(gl.FRONT, dss.stencilWriteMaskFront);
                    cache.dss.stencilWriteMaskFront = dss.stencilWriteMaskFront;
                  }

                  if (cache.dss.stencilFuncBack !== dss.stencilFuncBack || cache.dss.stencilRefBack !== dss.stencilRefBack || cache.dss.stencilReadMaskBack !== dss.stencilReadMaskBack) {
                    gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[dss.stencilFuncBack], dss.stencilRefBack, dss.stencilReadMaskBack);
                    cache.dss.stencilFuncBack = dss.stencilFuncBack;
                    cache.dss.stencilRefBack = dss.stencilRefBack;
                    cache.dss.stencilReadMaskBack = dss.stencilReadMaskBack;
                  }

                  if (cache.dss.stencilFailOpBack !== dss.stencilFailOpBack || cache.dss.stencilZFailOpBack !== dss.stencilZFailOpBack || cache.dss.stencilPassOpBack !== dss.stencilPassOpBack) {
                    gl.stencilOpSeparate(gl.BACK, WebGLStencilOps[dss.stencilFailOpBack], WebGLStencilOps[dss.stencilZFailOpBack], WebGLStencilOps[dss.stencilPassOpBack]);
                    cache.dss.stencilFailOpBack = dss.stencilFailOpBack;
                    cache.dss.stencilZFailOpBack = dss.stencilZFailOpBack;
                    cache.dss.stencilPassOpBack = dss.stencilPassOpBack;
                  }

                  if (cache.dss.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {
                    gl.stencilMaskSeparate(gl.BACK, dss.stencilWriteMaskBack);
                    cache.dss.stencilWriteMaskBack = dss.stencilWriteMaskBack;
                  }
                }

                var bs = gpuPipelineState.bs;

                if (bs) {
                  if (cache.bs.isA2C !== bs.isA2C) {
                    if (bs.isA2C) {
                      gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
                    } else {
                      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
                    }

                    cache.bs.isA2C = bs.isA2C;
                  }

                  if (cache.bs.blendColor.x !== bs.blendColor.x || cache.bs.blendColor.y !== bs.blendColor.y || cache.bs.blendColor.z !== bs.blendColor.z || cache.bs.blendColor.w !== bs.blendColor.w) {
                    gl.blendColor(bs.blendColor.x, bs.blendColor.y, bs.blendColor.z, bs.blendColor.w);
                    cache.bs.blendColor.x = bs.blendColor.x;
                    cache.bs.blendColor.y = bs.blendColor.y;
                    cache.bs.blendColor.z = bs.blendColor.z;
                    cache.bs.blendColor.w = bs.blendColor.w;
                  }

                  var target0 = bs.targets[0];
                  var target0Cache = cache.bs.targets[0];

                  if (target0Cache.blend !== target0.blend) {
                    if (target0.blend) {
                      gl.enable(gl.BLEND);
                    } else {
                      gl.disable(gl.BLEND);
                    }

                    target0Cache.blend = target0.blend;
                  }

                  if (target0Cache.blendEq !== target0.blendEq || target0Cache.blendAlphaEq !== target0.blendAlphaEq) {
                    gl.blendEquationSeparate(WebGLBlendOps[target0.blendEq], WebGLBlendOps[target0.blendAlphaEq]);
                    target0Cache.blendEq = target0.blendEq;
                    target0Cache.blendAlphaEq = target0.blendAlphaEq;
                  }

                  if (target0Cache.blendSrc !== target0.blendSrc || target0Cache.blendDst !== target0.blendDst || target0Cache.blendSrcAlpha !== target0.blendSrcAlpha || target0Cache.blendDstAlpha !== target0.blendDstAlpha) {
                    gl.blendFuncSeparate(WebGLBlendFactors[target0.blendSrc], WebGLBlendFactors[target0.blendDst], WebGLBlendFactors[target0.blendSrcAlpha], WebGLBlendFactors[target0.blendDstAlpha]);
                    target0Cache.blendSrc = target0.blendSrc;
                    target0Cache.blendDst = target0.blendDst;
                    target0Cache.blendSrcAlpha = target0.blendSrcAlpha;
                    target0Cache.blendDstAlpha = target0.blendDstAlpha;
                  }

                  if (target0Cache.blendColorMask !== target0.blendColorMask) {
                    gl.colorMask((target0.blendColorMask & ColorMask.R) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.G) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.B) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.A) !== ColorMask.NONE);
                    target0Cache.blendColorMask = target0.blendColorMask;
                  }
                }
              }

              if (gpuPipelineState && gpuPipelineState.gpuPipelineLayout && gpuShader) {
                var blockLen = gpuShader.glBlocks.length;
                var dynamicOffsetIndices = gpuPipelineState.gpuPipelineLayout.dynamicOffsetIndices;

                for (var j = 0; j < blockLen; j++) {
                  var glBlock = gpuShader.glBlocks[j];
                  var gpuDescriptorSet = gpuDescriptorSets[glBlock.set];
                  var descriptorIdx = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glBlock.binding];
                  var gpuDescriptor = descriptorIdx >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIdx];
                  var vf32 = null;
                  var offset = 0;

                  if (gpuDescriptor && gpuDescriptor.gpuBuffer) {
                    var gpuBuffer = gpuDescriptor.gpuBuffer;
                    var dynamicOffsetIndexSet = dynamicOffsetIndices[glBlock.set];
                    var dynamicOffsetIndex = dynamicOffsetIndexSet && dynamicOffsetIndexSet[glBlock.binding];

                    if (dynamicOffsetIndex >= 0) {
                      offset = dynamicOffsets[dynamicOffsetIndex];
                    }

                    if ('vf32' in gpuBuffer) {
                      vf32 = gpuBuffer.vf32;
                    } else {
                      offset += gpuBuffer.offset;
                      vf32 = gpuBuffer.gpuBuffer.vf32;
                    }

                    offset >>= 2;
                  }

                  if (!vf32) {
                    error("Buffer binding '" + glBlock.name + "' at set " + glBlock.set + " binding " + glBlock.binding + " is not bounded");
                    continue;
                  }

                  var uniformLen = glBlock.glActiveUniforms.length;

                  for (var l = 0; l < uniformLen; l++) {
                    var glUniform = glBlock.glActiveUniforms[l];

                    switch (glUniform.glType) {
                      case gl.BOOL:
                      case gl.INT:
                        {
                          for (var u = 0; u < glUniform.array.length; ++u) {
                            var idx = glUniform.offset + offset + u;

                            if (vf32[idx] !== glUniform.array[u]) {
                              for (var n = u, m = idx; n < glUniform.array.length; ++n, ++m) {
                                glUniform.array[n] = vf32[m];
                              }

                              gl.uniform1iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.BOOL_VEC2:
                      case gl.INT_VEC2:
                        {
                          for (var _u = 0; _u < glUniform.array.length; ++_u) {
                            var _idx = glUniform.offset + offset + _u;

                            if (vf32[_idx] !== glUniform.array[_u]) {
                              for (var _n = _u, _m = _idx; _n < glUniform.array.length; ++_n, ++_m) {
                                glUniform.array[_n] = vf32[_m];
                              }

                              gl.uniform2iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.BOOL_VEC3:
                      case gl.INT_VEC3:
                        {
                          for (var _u2 = 0; _u2 < glUniform.array.length; ++_u2) {
                            var _idx2 = glUniform.offset + offset + _u2;

                            if (vf32[_idx2] !== glUniform.array[_u2]) {
                              for (var _n2 = _u2, _m2 = _idx2; _n2 < glUniform.array.length; ++_n2, ++_m2) {
                                glUniform.array[_n2] = vf32[_m2];
                              }

                              gl.uniform3iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.BOOL_VEC4:
                      case gl.INT_VEC4:
                        {
                          for (var _u3 = 0; _u3 < glUniform.array.length; ++_u3) {
                            var _idx3 = glUniform.offset + offset + _u3;

                            if (vf32[_idx3] !== glUniform.array[_u3]) {
                              for (var _n3 = _u3, _m3 = _idx3; _n3 < glUniform.array.length; ++_n3, ++_m3) {
                                glUniform.array[_n3] = vf32[_m3];
                              }

                              gl.uniform4iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT:
                        {
                          for (var _u4 = 0; _u4 < glUniform.array.length; ++_u4) {
                            var _idx4 = glUniform.offset + offset + _u4;

                            if (vf32[_idx4] !== glUniform.array[_u4]) {
                              for (var _n4 = _u4, _m4 = _idx4; _n4 < glUniform.array.length; ++_n4, ++_m4) {
                                glUniform.array[_n4] = vf32[_m4];
                              }

                              gl.uniform1fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_VEC2:
                        {
                          for (var _u5 = 0; _u5 < glUniform.array.length; ++_u5) {
                            var _idx5 = glUniform.offset + offset + _u5;

                            if (vf32[_idx5] !== glUniform.array[_u5]) {
                              for (var _n5 = _u5, _m5 = _idx5; _n5 < glUniform.array.length; ++_n5, ++_m5) {
                                glUniform.array[_n5] = vf32[_m5];
                              }

                              gl.uniform2fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_VEC3:
                        {
                          for (var _u6 = 0; _u6 < glUniform.array.length; ++_u6) {
                            var _idx6 = glUniform.offset + offset + _u6;

                            if (vf32[_idx6] !== glUniform.array[_u6]) {
                              for (var _n6 = _u6, _m6 = _idx6; _n6 < glUniform.array.length; ++_n6, ++_m6) {
                                glUniform.array[_n6] = vf32[_m6];
                              }

                              gl.uniform3fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_VEC4:
                        {
                          for (var _u7 = 0; _u7 < glUniform.array.length; ++_u7) {
                            var _idx7 = glUniform.offset + offset + _u7;

                            if (vf32[_idx7] !== glUniform.array[_u7]) {
                              for (var _n7 = _u7, _m7 = _idx7; _n7 < glUniform.array.length; ++_n7, ++_m7) {
                                glUniform.array[_n7] = vf32[_m7];
                              }

                              gl.uniform4fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_MAT2:
                        {
                          for (var _u8 = 0; _u8 < glUniform.array.length; ++_u8) {
                            var _idx8 = glUniform.offset + offset + _u8;

                            if (vf32[_idx8] !== glUniform.array[_u8]) {
                              for (var _n8 = _u8, _m8 = _idx8; _n8 < glUniform.array.length; ++_n8, ++_m8) {
                                glUniform.array[_n8] = vf32[_m8];
                              }

                              gl.uniformMatrix2fv(glUniform.glLoc, false, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_MAT3:
                        {
                          for (var _u9 = 0; _u9 < glUniform.array.length; ++_u9) {
                            var _idx9 = glUniform.offset + offset + _u9;

                            if (vf32[_idx9] !== glUniform.array[_u9]) {
                              for (var _n9 = _u9, _m9 = _idx9; _n9 < glUniform.array.length; ++_n9, ++_m9) {
                                glUniform.array[_n9] = vf32[_m9];
                              }

                              gl.uniformMatrix3fv(glUniform.glLoc, false, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_MAT4:
                        {
                          for (var _u10 = 0; _u10 < glUniform.array.length; ++_u10) {
                            var _idx10 = glUniform.offset + offset + _u10;

                            if (vf32[_idx10] !== glUniform.array[_u10]) {
                              for (var _n10 = _u10, _m10 = _idx10; _n10 < glUniform.array.length; ++_n10, ++_m10) {
                                glUniform.array[_n10] = vf32[_m10];
                              }

                              gl.uniformMatrix4fv(glUniform.glLoc, false, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }
                    }
                  }

                  continue;
                }

                var samplerLen = gpuShader.glSamplerTextures.length;

                for (var i = 0; i < samplerLen; i++) {
                  var glSampler = gpuShader.glSamplerTextures[i];
                  var _gpuDescriptorSet = gpuDescriptorSets[glSampler.set];
                  var descriptorIndex = _gpuDescriptorSet && _gpuDescriptorSet.descriptorIndices[glSampler.binding];

                  var _gpuDescriptor = descriptorIndex >= 0 && _gpuDescriptorSet.gpuDescriptors[descriptorIndex];

                  var texUnitLen = glSampler.units.length;

                  for (var _l = 0; _l < texUnitLen; _l++) {
                    var texUnit = glSampler.units[_l];

                    if (!_gpuDescriptor || !_gpuDescriptor.gpuSampler) {
                      error("Sampler binding '" + glSampler.name + "' at set " + glSampler.set + " binding " + glSampler.binding + " index " + _l + " is not bounded");
                      continue;
                    }

                    if (_gpuDescriptor.gpuTexture && _gpuDescriptor.gpuTexture.size > 0) {
                      var _gpuDescriptor2 = _gpuDescriptor,
                          gpuTexture = _gpuDescriptor2.gpuTexture;
                      var glTexUnit = cache.glTexUnits[texUnit];

                      if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        if (gpuTexture.glTexture) {
                          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                        } else {
                          gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);
                        }

                        glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      var _gpuDescriptor3 = _gpuDescriptor,
                          gpuSampler = _gpuDescriptor3.gpuSampler;

                      if (gpuTexture.isPowerOf2) {
                        glWrapS = gpuSampler.glWrapS;
                        glWrapT = gpuSampler.glWrapT;
                      } else {
                        glWrapS = gl.CLAMP_TO_EDGE;
                        glWrapT = gl.CLAMP_TO_EDGE;
                      }

                      if (gpuTexture.isPowerOf2) {
                        if (gpuTexture.mipLevel <= 1 && (gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_NEAREST || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_LINEAR)) {
                          glMinFilter = gl.LINEAR;
                        } else {
                          glMinFilter = gpuSampler.glMinFilter;
                        }
                      } else if (gpuSampler.glMinFilter === gl.LINEAR || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_NEAREST || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_LINEAR) {
                        glMinFilter = gl.LINEAR;
                      } else {
                        glMinFilter = gl.NEAREST;
                      }

                      if (gpuTexture.glWrapS !== glWrapS) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, glWrapS);
                        gpuTexture.glWrapS = glWrapS;
                      }

                      if (gpuTexture.glWrapT !== glWrapT) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, glWrapT);
                        gpuTexture.glWrapT = glWrapT;
                      }

                      if (gpuTexture.glMinFilter !== glMinFilter) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, glMinFilter);
                        gpuTexture.glMinFilter = glMinFilter;
                      }

                      if (gpuTexture.glMagFilter !== gpuSampler.glMagFilter) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuSampler.glMagFilter);
                        gpuTexture.glMagFilter = gpuSampler.glMagFilter;
                      }
                    }

                    _gpuDescriptor = _gpuDescriptorSet.gpuDescriptors[++descriptorIndex];
                  }
                }
              }

              if (gpuInputAssembler && gpuShader && (isShaderChanged || gfxStateCache.gpuInputAssembler !== gpuInputAssembler)) {
                gfxStateCache.gpuInputAssembler = gpuInputAssembler;
                var ia = device.extensions.ANGLE_instanced_arrays;

                if (device.extensions.useVAO) {
                  var vao = device.extensions.OES_vertex_array_object;
                  var glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram);

                  if (!glVAO) {
                    glVAO = vao.createVertexArrayOES();
                    gpuInputAssembler.glVAOs.set(gpuShader.glProgram, glVAO);
                    vao.bindVertexArrayOES(glVAO);
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    cache.glArrayBuffer = null;
                    cache.glElementArrayBuffer = null;
                    var glAttrib;
                    var inputLen = gpuShader.glInputs.length;

                    for (var _j2 = 0; _j2 < inputLen; _j2++) {
                      var glInput = gpuShader.glInputs[_j2];
                      glAttrib = null;
                      var attribLen = gpuInputAssembler.glAttribs.length;

                      for (var k = 0; k < attribLen; k++) {
                        var attrib = gpuInputAssembler.glAttribs[k];

                        if (attrib.name === glInput.name) {
                          glAttrib = attrib;
                          break;
                        }
                      }

                      if (glAttrib) {
                        if (cache.glArrayBuffer !== glAttrib.glBuffer) {
                          gl.bindBuffer(gl.ARRAY_BUFFER, glAttrib.glBuffer);
                          cache.glArrayBuffer = glAttrib.glBuffer;
                        }

                        for (var c = 0; c < glAttrib.componentCount; ++c) {
                          var glLoc = glInput.glLoc + c;
                          var attribOffset = glAttrib.offset + glAttrib.size * c;
                          gl.enableVertexAttribArray(glLoc);
                          cache.glCurrentAttribLocs[glLoc] = true;
                          gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);

                          if (ia) {
                            ia.vertexAttribDivisorANGLE(glLoc, glAttrib.isInstanced ? 1 : 0);
                          }
                        }
                      }
                    }

                    var _gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

                    if (_gpuBuffer) {
                      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer.glBuffer);
                    }

                    vao.bindVertexArrayOES(null);
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    cache.glArrayBuffer = null;
                    cache.glElementArrayBuffer = null;
                  }

                  if (cache.glVAO !== glVAO) {
                    vao.bindVertexArrayOES(glVAO);
                    cache.glVAO = glVAO;
                  }
                } else {
                  for (var a = 0; a < device.capabilities.maxVertexAttributes; ++a) {
                    cache.glCurrentAttribLocs[a] = false;
                  }

                  var _inputLen = gpuShader.glInputs.length;

                  for (var _j3 = 0; _j3 < _inputLen; _j3++) {
                    var _glInput = gpuShader.glInputs[_j3];
                    var _glAttrib = null;
                    var _attribLen = gpuInputAssembler.glAttribs.length;

                    for (var _k5 = 0; _k5 < _attribLen; _k5++) {
                      var _attrib = gpuInputAssembler.glAttribs[_k5];

                      if (_attrib.name === _glInput.name) {
                        _glAttrib = _attrib;
                        break;
                      }
                    }

                    if (_glAttrib) {
                      if (cache.glArrayBuffer !== _glAttrib.glBuffer) {
                        gl.bindBuffer(gl.ARRAY_BUFFER, _glAttrib.glBuffer);
                        cache.glArrayBuffer = _glAttrib.glBuffer;
                      }

                      for (var _c = 0; _c < _glAttrib.componentCount; ++_c) {
                        var _glLoc3 = _glInput.glLoc + _c;

                        var _attribOffset = _glAttrib.offset + _glAttrib.size * _c;

                        if (!cache.glEnabledAttribLocs[_glLoc3] && _glLoc3 >= 0) {
                          gl.enableVertexAttribArray(_glLoc3);
                          cache.glEnabledAttribLocs[_glLoc3] = true;
                        }

                        cache.glCurrentAttribLocs[_glLoc3] = true;
                        gl.vertexAttribPointer(_glLoc3, _glAttrib.count, _glAttrib.glType, _glAttrib.isNormalized, _glAttrib.stride, _attribOffset);

                        if (ia) {
                          ia.vertexAttribDivisorANGLE(_glLoc3, _glAttrib.isInstanced ? 1 : 0);
                        }
                      }
                    }
                  }

                  var _gpuBuffer2 = gpuInputAssembler.gpuIndexBuffer;

                  if (_gpuBuffer2) {
                    if (cache.glElementArrayBuffer !== _gpuBuffer2.glBuffer) {
                      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer2.glBuffer);
                      cache.glElementArrayBuffer = _gpuBuffer2.glBuffer;
                    }
                  }

                  for (var _a = 0; _a < device.capabilities.maxVertexAttributes; ++_a) {
                    if (cache.glEnabledAttribLocs[_a] !== cache.glCurrentAttribLocs[_a]) {
                      gl.disableVertexAttribArray(_a);
                      cache.glEnabledAttribLocs[_a] = false;
                    }
                  }
                }
              }

              if (gpuPipelineState && gpuPipelineState.dynamicStates.length) {
                var dsLen = gpuPipelineState.dynamicStates.length;

                for (var _j4 = 0; _j4 < dsLen; _j4++) {
                  var dynamicState = gpuPipelineState.dynamicStates[_j4];

                  switch (dynamicState) {
                    case DynamicStateFlagBit.LINE_WIDTH:
                      {
                        if (cache.rs.lineWidth !== dynamicStates.lineWidth) {
                          gl.lineWidth(dynamicStates.lineWidth);
                          cache.rs.lineWidth = dynamicStates.lineWidth;
                        }

                        break;
                      }

                    case DynamicStateFlagBit.DEPTH_BIAS:
                      {
                        if (cache.rs.depthBias !== dynamicStates.depthBiasConstant || cache.rs.depthBiasSlop !== dynamicStates.depthBiasSlope) {
                          gl.polygonOffset(dynamicStates.depthBiasConstant, dynamicStates.depthBiasSlope);
                          cache.rs.depthBias = dynamicStates.depthBiasConstant;
                          cache.rs.depthBiasSlop = dynamicStates.depthBiasSlope;
                        }

                        break;
                      }

                    case DynamicStateFlagBit.BLEND_CONSTANTS:
                      {
                        var blendConstant = dynamicStates.blendConstant;

                        if (cache.bs.blendColor.x !== blendConstant.x || cache.bs.blendColor.y !== blendConstant.y || cache.bs.blendColor.z !== blendConstant.z || cache.bs.blendColor.w !== blendConstant.w) {
                          gl.blendColor(blendConstant.x, blendConstant.y, blendConstant.z, blendConstant.w);
                          cache.bs.blendColor.copy(blendConstant);
                        }

                        break;
                      }

                    case DynamicStateFlagBit.STENCIL_WRITE_MASK:
                      {
                        var front = dynamicStates.stencilStatesFront;
                        var back = dynamicStates.stencilStatesBack;

                        if (cache.dss.stencilWriteMaskFront !== front.writeMask) {
                          gl.stencilMaskSeparate(gl.FRONT, front.writeMask);
                          cache.dss.stencilWriteMaskFront = front.writeMask;
                        }

                        if (cache.dss.stencilWriteMaskBack !== back.writeMask) {
                          gl.stencilMaskSeparate(gl.BACK, back.writeMask);
                          cache.dss.stencilWriteMaskBack = back.writeMask;
                        }

                        break;
                      }

                    case DynamicStateFlagBit.STENCIL_COMPARE_MASK:
                      {
                        var _front = dynamicStates.stencilStatesFront;
                        var _back = dynamicStates.stencilStatesBack;

                        if (cache.dss.stencilRefFront !== _front.reference || cache.dss.stencilReadMaskFront !== _front.compareMask) {
                          gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[cache.dss.stencilFuncFront], _front.reference, _front.compareMask);
                          cache.dss.stencilRefFront = _front.reference;
                          cache.dss.stencilReadMaskFront = _front.compareMask;
                        }

                        if (cache.dss.stencilRefBack !== _back.reference || cache.dss.stencilReadMaskBack !== _back.compareMask) {
                          gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[cache.dss.stencilFuncBack], _back.reference, _back.compareMask);
                          cache.dss.stencilRefBack = _back.reference;
                          cache.dss.stencilReadMaskBack = _back.compareMask;
                        }

                        break;
                      }
                  }
                }
              }
            }
            function WebGLCmdFuncDraw(device, drawInfo) {
              var gl = device.gl;
              var _device$extensions = device.extensions,
                  ia = _device$extensions.ANGLE_instanced_arrays,
                  md = _device$extensions.WEBGL_multi_draw;
              var gpuInputAssembler = gfxStateCache.gpuInputAssembler,
                  glPrimitive = gfxStateCache.glPrimitive;

              if (gpuInputAssembler) {
                var indexBuffer = gpuInputAssembler.gpuIndexBuffer;

                if (gpuInputAssembler.gpuIndirectBuffer) {
                  var indirects = gpuInputAssembler.gpuIndirectBuffer.indirects;

                  if (indirects.drawByIndex) {
                    for (var j = 0; j < indirects.drawCount; j++) {
                      indirects.byteOffsets[j] = indirects.offsets[j] * indexBuffer.stride;
                    }

                    if (md) {
                      if (indirects.instancedDraw) {
                        md.multiDrawElementsInstancedWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.instances, 0, indirects.drawCount);
                      } else {
                        md.multiDrawElementsWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.drawCount);
                      }
                    } else {
                      for (var _j5 = 0; _j5 < indirects.drawCount; _j5++) {
                        if (indirects.instances[_j5] && ia) {
                          ia.drawElementsInstancedANGLE(glPrimitive, indirects.counts[_j5], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j5], indirects.instances[_j5]);
                        } else {
                          gl.drawElements(glPrimitive, indirects.counts[_j5], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j5]);
                        }
                      }
                    }
                  } else if (md) {
                    if (indirects.instancedDraw) {
                      md.multiDrawArraysInstancedWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.instances, 0, indirects.drawCount);
                    } else {
                      md.multiDrawArraysWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.drawCount);
                    }
                  } else {
                    for (var _j6 = 0; _j6 < indirects.drawCount; _j6++) {
                      if (indirects.instances[_j6] && ia) {
                        ia.drawArraysInstancedANGLE(glPrimitive, indirects.offsets[_j6], indirects.counts[_j6], indirects.instances[_j6]);
                      } else {
                        gl.drawArrays(glPrimitive, indirects.offsets[_j6], indirects.counts[_j6]);
                      }
                    }
                  }
                } else if (drawInfo.instanceCount && ia) {
                  if (indexBuffer) {
                    if (drawInfo.indexCount > 0) {
                      var offset = drawInfo.firstIndex * indexBuffer.stride;
                      ia.drawElementsInstancedANGLE(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, offset, drawInfo.instanceCount);
                    }
                  } else if (drawInfo.vertexCount > 0) {
                    ia.drawArraysInstancedANGLE(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);
                  }
                } else if (indexBuffer) {
                  if (drawInfo.indexCount > 0) {
                    var _offset = drawInfo.firstIndex * indexBuffer.stride;

                    gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset);
                  }
                } else if (drawInfo.vertexCount > 0) {
                  gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);
                }
              }
            }
            var cmdIds = new Array(WebGLCmd.COUNT);
            function WebGLCmdFuncExecuteCmds(device, cmdPackage) {
              cmdIds.fill(0);

              for (var i = 0; i < cmdPackage.cmds.length; ++i) {
                var cmd = cmdPackage.cmds.array[i];
                var cmdId = cmdIds[cmd]++;

                switch (cmd) {
                  case WebGLCmd.BEGIN_RENDER_PASS:
                    {
                      var cmd0 = cmdPackage.beginRenderPassCmds.array[cmdId];
                      WebGLCmdFuncBeginRenderPass(device, cmd0.gpuRenderPass, cmd0.gpuFramebuffer, cmd0.renderArea, cmd0.clearColors, cmd0.clearDepth, cmd0.clearStencil);
                      break;
                    }

                  case WebGLCmd.BIND_STATES:
                    {
                      var cmd2 = cmdPackage.bindStatesCmds.array[cmdId];
                      WebGLCmdFuncBindStates(device, cmd2.gpuPipelineState, cmd2.gpuInputAssembler, cmd2.gpuDescriptorSets, cmd2.dynamicOffsets, cmd2.dynamicStates);
                      break;
                    }

                  case WebGLCmd.DRAW:
                    {
                      var cmd3 = cmdPackage.drawCmds.array[cmdId];
                      WebGLCmdFuncDraw(device, cmd3.drawInfo);
                      break;
                    }

                  case WebGLCmd.UPDATE_BUFFER:
                    {
                      var cmd4 = cmdPackage.updateBufferCmds.array[cmdId];
                      WebGLCmdFuncUpdateBuffer(device, cmd4.gpuBuffer, cmd4.buffer, cmd4.offset, cmd4.size);
                      break;
                    }

                  case WebGLCmd.COPY_BUFFER_TO_TEXTURE:
                    {
                      var cmd5 = cmdPackage.copyBufferToTextureCmds.array[cmdId];
                      WebGLCmdFuncCopyBuffersToTexture(device, cmd5.buffers, cmd5.gpuTexture, cmd5.regions);
                      break;
                    }
                }
              }
            }
            function WebGLCmdFuncCopyTexImagesToTexture(device, texImages, gpuTexture, regions) {
              var gl = device.gl;
              var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                glTexUnit.glTexture = gpuTexture.glTexture;
              }

              var n = 0;
              var f = 0;

              switch (gpuTexture.glTarget) {
                case gl.TEXTURE_2D:
                  {
                    for (var i = 0; i < regions.length; i++) {
                      var region = regions[i];
                      gl.texSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
                    }

                    break;
                  }

                case gl.TEXTURE_CUBE_MAP:
                  {
                    for (var _i18 = 0; _i18 < regions.length; _i18++) {
                      var _region = regions[_i18];
                      var fcount = _region.texSubres.baseArrayLayer + _region.texSubres.layerCount;

                      for (f = _region.texSubres.baseArrayLayer; f < fcount; ++f) {
                        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region.texSubres.mipLevel, _region.texOffset.x, _region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
                      }
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported GL texture type, copy buffer to texture failed.');
                  }
              }

              if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP && gpuTexture.isPowerOf2) {
                gl.generateMipmap(gpuTexture.glTarget);
              }
            }
            function WebGLCmdFuncCopyBuffersToTexture(device, buffers, gpuTexture, regions) {
              var gl = device.gl;
              var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                glTexUnit.glTexture = gpuTexture.glTexture;
              }

              var n = 0;
              var w = 1;
              var h = 1;
              var f = 0;
              var fmtInfo = FormatInfos[gpuTexture.format];
              var isCompressed = fmtInfo.isCompressed;

              switch (gpuTexture.glTarget) {
                case gl.TEXTURE_2D:
                  {
                    for (var i = 0; i < regions.length; i++) {
                      var region = regions[i];
                      w = region.texExtent.width;
                      h = region.texExtent.height;
                      var pixels = buffers[n++];

                      if (!isCompressed) {
                        gl.texSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, pixels);
                      } else if (gpuTexture.glInternalFmt !== WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL && !device.extensions.noCompressedTexSubImage2D) {
                        gl.compressedTexSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, pixels);
                      } else {
                        gl.compressedTexImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, gpuTexture.glInternalFmt, w, h, 0, pixels);
                      }
                    }

                    break;
                  }

                case gl.TEXTURE_CUBE_MAP:
                  {
                    for (var _i19 = 0; _i19 < regions.length; _i19++) {
                      var _region2 = regions[_i19];
                      var fcount = _region2.texSubres.baseArrayLayer + _region2.texSubres.layerCount;

                      for (f = _region2.texSubres.baseArrayLayer; f < fcount; ++f) {
                        w = _region2.texExtent.width;
                        h = _region2.texExtent.height;
                        var _pixels = buffers[n++];

                        if (!isCompressed) {
                          gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region2.texSubres.mipLevel, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, _pixels);
                        } else if (gpuTexture.glInternalFmt !== WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL && !device.extensions.noCompressedTexSubImage2D) {
                          gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region2.texSubres.mipLevel, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, _pixels);
                        } else {
                          gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region2.texSubres.mipLevel, gpuTexture.glInternalFmt, w, h, 0, _pixels);
                        }
                      }
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported GL texture type, copy buffer to texture failed.');
                  }
              }

              if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {
                gl.generateMipmap(gpuTexture.glTarget);
              }
            }
            function WebGLCmdFuncCopyTextureToBuffers(device, gpuTexture, buffers, regions) {
              var gl = device.gl;
              var cache = device.stateCache;
              var framebuffer = gl.createFramebuffer();
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
              var x = 0;
              var y = 0;
              var w = 1;
              var h = 1;

              switch (gpuTexture.glTarget) {
                case gl.TEXTURE_2D:
                  {
                    for (var k = 0; k < regions.length; k++) {
                      var region = regions[k];
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gpuTexture.glTarget, gpuTexture.glTexture, region.texSubres.mipLevel);
                      x = region.texOffset.x;
                      y = region.texOffset.y;
                      w = region.texExtent.width;
                      h = region.texExtent.height;
                      gl.readPixels(x, y, w, h, gpuTexture.glFormat, gpuTexture.glType, buffers[k]);
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported GL texture type, copy texture to buffers failed.');
                  }
              }

              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              cache.glFramebuffer = null;
              gl.deleteFramebuffer(framebuffer);
            }

            var WebGLIndirectDrawInfos = function () {
              function WebGLIndirectDrawInfos() {
                this.counts = void 0;
                this.offsets = void 0;
                this.instances = void 0;
                this.drawCount = 0;
                this.drawByIndex = false;
                this.instancedDraw = false;
                this.byteOffsets = void 0;
                this._capacity = 4;
                this.counts = new Int32Array(this._capacity);
                this.offsets = new Int32Array(this._capacity);
                this.instances = new Int32Array(this._capacity);
                this.byteOffsets = new Int32Array(this._capacity);
              }

              var _proto = WebGLIndirectDrawInfos.prototype;

              _proto.clearDraws = function clearDraws() {
                this.drawCount = 0;
                this.drawByIndex = false;
                this.instancedDraw = false;
              };

              _proto.setDrawInfo = function setDrawInfo(idx, info) {
                this._ensureCapacity(idx);

                this.drawByIndex = info.indexCount > 0;
                this.instancedDraw = !!info.instanceCount;
                this.drawCount = Math.max(idx + 1, this.drawCount);

                if (this.drawByIndex) {
                  this.counts[idx] = info.indexCount;
                  this.offsets[idx] = info.firstIndex;
                } else {
                  this.counts[idx] = info.vertexCount;
                  this.offsets[idx] = info.firstVertex;
                }

                this.instances[idx] = Math.max(1, info.instanceCount);
              };

              _proto._ensureCapacity = function _ensureCapacity(target) {
                if (this._capacity > target) return;
                this._capacity = nextPow2(target);
                var counts = new Int32Array(this._capacity);
                var offsets = new Int32Array(this._capacity);
                var instances = new Int32Array(this._capacity);
                this.byteOffsets = new Int32Array(this._capacity);
                counts.set(this.counts);
                offsets.set(this.offsets);
                instances.set(this.instances);
                this.counts = counts;
                this.offsets = offsets;
                this.instances = instances;
              };

              return WebGLIndirectDrawInfos;
            }();

            var WebGLBuffer = function (_Buffer) {
              _inheritsLoose(WebGLBuffer, _Buffer);

              function WebGLBuffer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Buffer.call.apply(_Buffer, [this].concat(args)) || this;
                _this._gpuBuffer = null;
                _this._gpuBufferView = null;
                _this._uniformBuffer = null;
                return _this;
              }

              var _proto = WebGLBuffer.prototype;

              _proto.initialize = function initialize(info) {
                if ('buffer' in info) {
                  this._isBufferView = true;
                  var buffer = info.buffer;
                  this._usage = buffer.usage;
                  this._memUsage = buffer.memUsage;
                  this._size = this._stride = info.range;
                  this._count = 1;
                  this._flags = buffer.flags;
                  this._gpuBufferView = {
                    gpuBuffer: buffer.gpuBuffer,
                    offset: info.offset,
                    range: info.range
                  };
                } else {
                  this._usage = info.usage;
                  this._memUsage = info.memUsage;
                  this._size = info.size;
                  this._stride = Math.max(info.stride || this._size, 1);
                  this._count = this._size / this._stride;
                  this._flags = info.flags;

                  if (this._usage & BufferUsageBit.UNIFORM && this._size > 0) {
                    this._uniformBuffer = new Uint8Array(this._size);
                  }

                  this._gpuBuffer = {
                    usage: this._usage,
                    memUsage: this._memUsage,
                    size: this._size,
                    stride: this._stride,
                    buffer: null,
                    vf32: null,
                    indirects: new WebGLIndirectDrawInfos(),
                    glTarget: 0,
                    glBuffer: null
                  };

                  if (this._usage & BufferUsageBit.UNIFORM) {
                    this._gpuBuffer.buffer = this._uniformBuffer;
                  }

                  WebGLCmdFuncCreateBuffer(WebGLDeviceManager.instance, this._gpuBuffer);
                  WebGLDeviceManager.instance.memoryStatus.bufferSize += this._size;
                }
              };

              _proto.destroy = function destroy() {
                if (this._gpuBuffer) {
                  WebGLCmdFuncDestroyBuffer(WebGLDeviceManager.instance, this._gpuBuffer);
                  WebGLDeviceManager.instance.memoryStatus.bufferSize -= this._size;
                  this._gpuBuffer = null;
                }

                if (this._gpuBufferView) {
                  this._gpuBufferView = null;
                }
              };

              _proto.resize = function resize(size) {
                if (this._isBufferView) {
                  console.warn('cannot resize buffer views!');
                  return;
                }

                var oldSize = this._size;

                if (oldSize === size) {
                  return;
                }

                this._size = size;
                this._count = this._size / this._stride;

                if (this._uniformBuffer) {
                  this._uniformBuffer = new Uint8Array(size);
                }

                if (this._gpuBuffer) {
                  if (this._uniformBuffer) {
                    this._gpuBuffer.buffer = this._uniformBuffer;
                  }

                  this._gpuBuffer.size = size;

                  if (size > 0) {
                    WebGLCmdFuncResizeBuffer(WebGLDeviceManager.instance, this._gpuBuffer);
                    WebGLDeviceManager.instance.memoryStatus.bufferSize -= oldSize;
                    WebGLDeviceManager.instance.memoryStatus.bufferSize += size;
                  }
                }
              };

              _proto.update = function update(buffer, size) {
                if (this._isBufferView) {
                  console.warn('cannot update through buffer views!');
                  return;
                }

                var buffSize;

                if (size !== undefined) {
                  buffSize = size;
                } else if (this._usage & BufferUsageBit.INDIRECT) {
                  buffSize = 0;
                } else {
                  buffSize = buffer.byteLength;
                }

                WebGLCmdFuncUpdateBuffer(WebGLDeviceManager.instance, this._gpuBuffer, buffer, 0, buffSize);
              };

              _createClass(WebGLBuffer, [{
                key: "gpuBuffer",
                get: function get() {
                  return this._gpuBuffer;
                }
              }, {
                key: "gpuBufferView",
                get: function get() {
                  return this._gpuBufferView;
                }
              }]);

              return WebGLBuffer;
            }(Buffer);

            var WebGLCommandPool = function () {
              function WebGLCommandPool(Clazz, count) {
                this._frees = void 0;
                this._freeIdx = 0;
                this._freeCmds = void 0;
                this._frees = new Array(count);
                this._freeCmds = new CachedArray(count);

                for (var i = 0; i < count; ++i) {
                  this._frees[i] = new Clazz();
                }

                this._freeIdx = count - 1;
              }

              var _proto = WebGLCommandPool.prototype;

              _proto.alloc = function alloc(Clazz) {
                if (this._freeIdx < 0) {
                  var size = this._frees.length * 2;
                  var temp = this._frees;
                  this._frees = new Array(size);
                  var increase = size - temp.length;

                  for (var i = 0; i < increase; ++i) {
                    this._frees[i] = new Clazz();
                  }

                  for (var _i = increase, j = 0; _i < size; ++_i, ++j) {
                    this._frees[_i] = temp[j];
                  }

                  this._freeIdx += increase;
                }

                var cmd = this._frees[this._freeIdx];
                this._frees[this._freeIdx--] = null;
                ++cmd.refCount;
                return cmd;
              };

              _proto.free = function free(cmd) {
                if (--cmd.refCount === 0) {
                  this._freeCmds.push(cmd);
                }
              };

              _proto.freeCmds = function freeCmds(cmds) {
                for (var i = 0; i < cmds.length; ++i) {
                  if (--cmds.array[i].refCount === 0) {
                    this._freeCmds.push(cmds.array[i]);
                  }
                }
              };

              _proto.release = function release() {
                for (var i = 0; i < this._freeCmds.length; ++i) {
                  var cmd = this._freeCmds.array[i];
                  cmd.clear();
                  this._frees[++this._freeIdx] = cmd;
                }

                this._freeCmds.clear();
              };

              return WebGLCommandPool;
            }();
            var WebGLCommandAllocator = function () {
              function WebGLCommandAllocator() {
                this.beginRenderPassCmdPool = void 0;
                this.bindStatesCmdPool = void 0;
                this.drawCmdPool = void 0;
                this.updateBufferCmdPool = void 0;
                this.copyBufferToTextureCmdPool = void 0;
                this.beginRenderPassCmdPool = new WebGLCommandPool(WebGLCmdBeginRenderPass, 1);
                this.bindStatesCmdPool = new WebGLCommandPool(WebGLCmdBindStates, 1);
                this.drawCmdPool = new WebGLCommandPool(WebGLCmdDraw, 1);
                this.updateBufferCmdPool = new WebGLCommandPool(WebGLCmdUpdateBuffer, 1);
                this.copyBufferToTextureCmdPool = new WebGLCommandPool(WebGLCmdCopyBufferToTexture, 1);
              }

              var _proto2 = WebGLCommandAllocator.prototype;

              _proto2.clearCmds = function clearCmds(cmdPackage) {
                if (cmdPackage.beginRenderPassCmds.length) {
                  this.beginRenderPassCmdPool.freeCmds(cmdPackage.beginRenderPassCmds);
                  cmdPackage.beginRenderPassCmds.clear();
                }

                if (cmdPackage.bindStatesCmds.length) {
                  this.bindStatesCmdPool.freeCmds(cmdPackage.bindStatesCmds);
                  cmdPackage.bindStatesCmds.clear();
                }

                if (cmdPackage.drawCmds.length) {
                  this.drawCmdPool.freeCmds(cmdPackage.drawCmds);
                  cmdPackage.drawCmds.clear();
                }

                if (cmdPackage.updateBufferCmds.length) {
                  this.updateBufferCmdPool.freeCmds(cmdPackage.updateBufferCmds);
                  cmdPackage.updateBufferCmds.clear();
                }

                if (cmdPackage.copyBufferToTextureCmds.length) {
                  this.copyBufferToTextureCmdPool.freeCmds(cmdPackage.copyBufferToTextureCmds);
                  cmdPackage.copyBufferToTextureCmds.clear();
                }

                cmdPackage.cmds.clear();
              };

              _proto2.releaseCmds = function releaseCmds() {
                this.beginRenderPassCmdPool.release();
                this.bindStatesCmdPool.release();
                this.drawCmdPool.release();
                this.updateBufferCmdPool.release();
                this.copyBufferToTextureCmdPool.release();
              };

              return WebGLCommandAllocator;
            }();

            var WebGLCommandBuffer = function (_CommandBuffer) {
              _inheritsLoose(WebGLCommandBuffer, _CommandBuffer);

              function WebGLCommandBuffer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _CommandBuffer.call.apply(_CommandBuffer, [this].concat(args)) || this;
                _this.cmdPackage = new WebGLCmdPackage();
                _this._cmdAllocator = new WebGLCommandAllocator();
                _this._isInRenderPass = false;
                _this._curGPUPipelineState = null;
                _this._curGPUInputAssembler = null;
                _this._curGPUDescriptorSets = [];
                _this._curDynamicOffsets = Array(8).fill(0);
                _this._curDynamicStates = new DynamicStates();
                _this._isStateInvalied = false;
                return _this;
              }

              var _proto = WebGLCommandBuffer.prototype;

              _proto.initialize = function initialize(info) {
                this._type = info.type;
                this._queue = info.queue;
                var setCount = WebGLDeviceManager.instance.bindingMappings.blockOffsets.length;

                for (var i = 0; i < setCount; i++) {
                  this._curGPUDescriptorSets.push(null);
                }
              };

              _proto.destroy = function destroy() {
                this._cmdAllocator.clearCmds(this.cmdPackage);
              };

              _proto.begin = function begin(renderPass, subpass, frameBuffer) {

                this._cmdAllocator.clearCmds(this.cmdPackage);

                this._curGPUPipelineState = null;
                this._curGPUInputAssembler = null;
                this._curGPUDescriptorSets.length = 0;
                this._numDrawCalls = 0;
                this._numInstances = 0;
                this._numTris = 0;
              };

              _proto.end = function end() {
                if (this._isStateInvalied) {
                  this.bindStates();
                }

                this._isInRenderPass = false;
              };

              _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
                var cmd = this._cmdAllocator.beginRenderPassCmdPool.alloc(WebGLCmdBeginRenderPass);

                cmd.gpuRenderPass = renderPass.gpuRenderPass;
                cmd.gpuFramebuffer = framebuffer.gpuFramebuffer;
                cmd.renderArea.copy(renderArea);
                cmd.clearColors.length = clearColors.length;

                for (var i = 0; i < clearColors.length; ++i) {
                  cmd.clearColors[i] = clearColors[i];
                }

                cmd.clearDepth = clearDepth;
                cmd.clearStencil = clearStencil;
                this.cmdPackage.beginRenderPassCmds.push(cmd);
                this.cmdPackage.cmds.push(WebGLCmd.BEGIN_RENDER_PASS);
                this._isInRenderPass = true;
              };

              _proto.endRenderPass = function endRenderPass() {
                this._isInRenderPass = false;
              };

              _proto.bindPipelineState = function bindPipelineState(pipelineState) {
                var gpuPipelineState = pipelineState.gpuPipelineState;

                if (gpuPipelineState !== this._curGPUPipelineState) {
                  this._curGPUPipelineState = gpuPipelineState;
                  this._isStateInvalied = true;
                }
              };

              _proto.bindDescriptorSet = function bindDescriptorSet(set, descriptorSet, dynamicOffsets) {
                var gpuDescriptorSet = descriptorSet.gpuDescriptorSet;

                if (gpuDescriptorSet !== this._curGPUDescriptorSets[set]) {
                  this._curGPUDescriptorSets[set] = gpuDescriptorSet;
                  this._isStateInvalied = true;
                }

                if (dynamicOffsets) {
                  var _this$_curGPUPipeline;

                  var gpuPipelineLayout = (_this$_curGPUPipeline = this._curGPUPipelineState) === null || _this$_curGPUPipeline === void 0 ? void 0 : _this$_curGPUPipeline.gpuPipelineLayout;

                  if (gpuPipelineLayout) {
                    var offsets = this._curDynamicOffsets;
                    var idx = gpuPipelineLayout.dynamicOffsetOffsets[set];

                    for (var i = 0; i < dynamicOffsets.length; i++) {
                      offsets[idx + i] = dynamicOffsets[i];
                    }

                    this._isStateInvalied = true;
                  }
                }
              };

              _proto.bindInputAssembler = function bindInputAssembler(inputAssembler) {
                var gpuInputAssembler = inputAssembler.gpuInputAssembler;
                this._curGPUInputAssembler = gpuInputAssembler;
                this._isStateInvalied = true;
              };

              _proto.setViewport = function setViewport(viewport) {
                var cache = this._curDynamicStates.viewport;

                if (cache.left !== viewport.left || cache.top !== viewport.top || cache.width !== viewport.width || cache.height !== viewport.height || cache.minDepth !== viewport.minDepth || cache.maxDepth !== viewport.maxDepth) {
                  cache.left = viewport.left;
                  cache.top = viewport.top;
                  cache.width = viewport.width;
                  cache.height = viewport.height;
                  cache.minDepth = viewport.minDepth;
                  cache.maxDepth = viewport.maxDepth;
                  this._isStateInvalied = true;
                }
              };

              _proto.setScissor = function setScissor(scissor) {
                var cache = this._curDynamicStates.scissor;

                if (cache.x !== scissor.x || cache.y !== scissor.y || cache.width !== scissor.width || cache.height !== scissor.height) {
                  cache.x = scissor.x;
                  cache.y = scissor.y;
                  cache.width = scissor.width;
                  cache.height = scissor.height;
                  this._isStateInvalied = true;
                }
              };

              _proto.setLineWidth = function setLineWidth(lineWidth) {
                if (this._curDynamicStates.lineWidth !== lineWidth) {
                  this._curDynamicStates.lineWidth = lineWidth;
                  this._isStateInvalied = true;
                }
              };

              _proto.setDepthBias = function setDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) {
                var cache = this._curDynamicStates;

                if (cache.depthBiasConstant !== depthBiasConstantFactor || cache.depthBiasClamp !== depthBiasClamp || cache.depthBiasSlope !== depthBiasSlopeFactor) {
                  cache.depthBiasConstant = depthBiasConstantFactor;
                  cache.depthBiasClamp = depthBiasClamp;
                  cache.depthBiasSlope = depthBiasSlopeFactor;
                  this._isStateInvalied = true;
                }
              };

              _proto.setBlendConstants = function setBlendConstants(blendConstants) {
                var cache = this._curDynamicStates.blendConstant;

                if (cache.x !== blendConstants.x || cache.y !== blendConstants.y || cache.z !== blendConstants.z || cache.w !== blendConstants.w) {
                  cache.copy(blendConstants);
                  this._isStateInvalied = true;
                }
              };

              _proto.setDepthBound = function setDepthBound(minDepthBounds, maxDepthBounds) {
                var cache = this._curDynamicStates;

                if (cache.depthMinBounds !== minDepthBounds || cache.depthMaxBounds !== maxDepthBounds) {
                  cache.depthMinBounds = minDepthBounds;
                  cache.depthMaxBounds = maxDepthBounds;
                  this._isStateInvalied = true;
                }
              };

              _proto.setStencilWriteMask = function setStencilWriteMask(face, writeMask) {
                var front = this._curDynamicStates.stencilStatesFront;
                var back = this._curDynamicStates.stencilStatesBack;

                if (face & StencilFace.FRONT) {
                  if (front.writeMask !== writeMask) {
                    front.writeMask = writeMask;
                    this._isStateInvalied = true;
                  }
                }

                if (face & StencilFace.BACK) {
                  if (back.writeMask !== writeMask) {
                    back.writeMask = writeMask;
                    this._isStateInvalied = true;
                  }
                }
              };

              _proto.setStencilCompareMask = function setStencilCompareMask(face, reference, compareMask) {
                var front = this._curDynamicStates.stencilStatesFront;
                var back = this._curDynamicStates.stencilStatesBack;

                if (face & StencilFace.FRONT) {
                  if (front.compareMask !== compareMask || front.reference !== reference) {
                    front.reference = reference;
                    front.compareMask = compareMask;
                    this._isStateInvalied = true;
                  }
                }

                if (face & StencilFace.BACK) {
                  if (back.compareMask !== compareMask || back.reference !== reference) {
                    back.reference = reference;
                    back.compareMask = compareMask;
                    this._isStateInvalied = true;
                  }
                }
              };

              _proto.draw = function draw(infoOrAssembler) {
                if (this._type === CommandBufferType.PRIMARY && this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
                  if (this._isStateInvalied) {
                    this.bindStates();
                  }

                  var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;

                  var cmd = this._cmdAllocator.drawCmdPool.alloc(WebGLCmdDraw);

                  cmd.drawInfo.copy(info);
                  this.cmdPackage.drawCmds.push(cmd);
                  this.cmdPackage.cmds.push(WebGLCmd.DRAW);
                  ++this._numDrawCalls;
                  this._numInstances += info.instanceCount;
                  var indexCount = info.indexCount || info.vertexCount;

                  if (this._curGPUPipelineState) {
                    var glPrimitive = this._curGPUPipelineState.glPrimitive;

                    switch (glPrimitive) {
                      case 0x0004:
                        {
                          this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                          break;
                        }

                      case 0x0005:
                      case 0x0006:
                        {
                          this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                          break;
                        }
                    }
                  }
                } else {
                  console.error('Command \'draw\' must be recorded inside a render pass.');
                }
              };

              _proto.updateBuffer = function updateBuffer(buffer, data, size) {
                if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
                  var gpuBuffer = buffer.gpuBuffer;

                  if (gpuBuffer) {
                    var cmd = this._cmdAllocator.updateBufferCmdPool.alloc(WebGLCmdUpdateBuffer);

                    var buffSize = 0;
                    var buff = null;

                    if (buffer.usage & BufferUsageBit.INDIRECT) {
                      buff = data;
                    } else {
                      if (size !== undefined) {
                        buffSize = size;
                      } else {
                        buffSize = data.byteLength;
                      }

                      buff = data;
                    }

                    cmd.gpuBuffer = gpuBuffer;
                    cmd.buffer = buff;
                    cmd.offset = 0;
                    cmd.size = buffSize;
                    this.cmdPackage.updateBufferCmds.push(cmd);
                    this.cmdPackage.cmds.push(WebGLCmd.UPDATE_BUFFER);
                  }
                } else {
                  console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
                }
              };

              _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
                if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
                  var gpuTexture = texture.gpuTexture;

                  if (gpuTexture) {
                    var cmd = this._cmdAllocator.copyBufferToTextureCmdPool.alloc(WebGLCmdCopyBufferToTexture);

                    if (cmd) {
                      cmd.gpuTexture = gpuTexture;
                      cmd.regions = regions;
                      cmd.buffers = buffers;
                      this.cmdPackage.copyBufferToTextureCmds.push(cmd);
                      this.cmdPackage.cmds.push(WebGLCmd.COPY_BUFFER_TO_TEXTURE);
                    }
                  }
                } else {
                  console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
                }
              };

              _proto.execute = function execute(cmdBuffs, count) {
                for (var i = 0; i < count; ++i) {
                  var webGLCmdBuff = cmdBuffs[i];

                  for (var c = 0; c < webGLCmdBuff.cmdPackage.beginRenderPassCmds.length; ++c) {
                    var cmd = webGLCmdBuff.cmdPackage.beginRenderPassCmds.array[c];
                    ++cmd.refCount;
                    this.cmdPackage.beginRenderPassCmds.push(cmd);
                  }

                  for (var _c = 0; _c < webGLCmdBuff.cmdPackage.bindStatesCmds.length; ++_c) {
                    var _cmd = webGLCmdBuff.cmdPackage.bindStatesCmds.array[_c];
                    ++_cmd.refCount;
                    this.cmdPackage.bindStatesCmds.push(_cmd);
                  }

                  for (var _c2 = 0; _c2 < webGLCmdBuff.cmdPackage.drawCmds.length; ++_c2) {
                    var _cmd2 = webGLCmdBuff.cmdPackage.drawCmds.array[_c2];
                    ++_cmd2.refCount;
                    this.cmdPackage.drawCmds.push(_cmd2);
                  }

                  for (var _c3 = 0; _c3 < webGLCmdBuff.cmdPackage.updateBufferCmds.length; ++_c3) {
                    var _cmd3 = webGLCmdBuff.cmdPackage.updateBufferCmds.array[_c3];
                    ++_cmd3.refCount;
                    this.cmdPackage.updateBufferCmds.push(_cmd3);
                  }

                  for (var _c4 = 0; _c4 < webGLCmdBuff.cmdPackage.copyBufferToTextureCmds.length; ++_c4) {
                    var _cmd4 = webGLCmdBuff.cmdPackage.copyBufferToTextureCmds.array[_c4];
                    ++_cmd4.refCount;
                    this.cmdPackage.copyBufferToTextureCmds.push(_cmd4);
                  }

                  this.cmdPackage.cmds.concat(webGLCmdBuff.cmdPackage.cmds.array);
                  this._numDrawCalls += webGLCmdBuff._numDrawCalls;
                  this._numInstances += webGLCmdBuff._numInstances;
                  this._numTris += webGLCmdBuff._numTris;
                }
              };

              _proto.pipelineBarrier = function pipelineBarrier(GeneralBarrier, textureBarriers, textures) {};

              _proto.bindStates = function bindStates() {
                var bindStatesCmd = this._cmdAllocator.bindStatesCmdPool.alloc(WebGLCmdBindStates);

                if (bindStatesCmd) {
                  bindStatesCmd.gpuPipelineState = this._curGPUPipelineState;
                  Array.prototype.push.apply(bindStatesCmd.gpuDescriptorSets, this._curGPUDescriptorSets);
                  Array.prototype.push.apply(bindStatesCmd.dynamicOffsets, this._curDynamicOffsets);
                  bindStatesCmd.gpuInputAssembler = this._curGPUInputAssembler;
                  bindStatesCmd.dynamicStates.copy(this._curDynamicStates);
                  this.cmdPackage.bindStatesCmds.push(bindStatesCmd);
                  this.cmdPackage.cmds.push(WebGLCmd.BIND_STATES);
                  this._isStateInvalied = false;
                }
              };

              return WebGLCommandBuffer;
            }(CommandBuffer);

            var WebGLFramebuffer = function (_Framebuffer) {
              _inheritsLoose(WebGLFramebuffer, _Framebuffer);

              function WebGLFramebuffer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Framebuffer.call.apply(_Framebuffer, [this].concat(args)) || this;
                _this._gpuFramebuffer = null;
                return _this;
              }

              var _proto = WebGLFramebuffer.prototype;

              _proto.initialize = function initialize(info) {
                this._renderPass = info.renderPass;
                this._colorTextures = info.colorTextures || [];
                this._depthStencilTexture = info.depthStencilTexture || null;
                var lodLevel = 0;
                var gpuColorTextures = [];

                for (var i = 0; i < info.colorTextures.length; ++i) {
                  var colorTexture = info.colorTextures[i];

                  if (colorTexture) {
                    gpuColorTextures.push(colorTexture.gpuTexture);
                    lodLevel = colorTexture.lodLevel;
                  }
                }

                var gpuDepthStencilTexture = null;

                if (info.depthStencilTexture) {
                  gpuDepthStencilTexture = info.depthStencilTexture.gpuTexture;
                  lodLevel = info.depthStencilTexture.lodLevel;
                }

                var width = Number.MAX_SAFE_INTEGER;
                var height = Number.MAX_SAFE_INTEGER;
                this._gpuFramebuffer = {
                  gpuRenderPass: info.renderPass.gpuRenderPass,
                  gpuColorTextures: gpuColorTextures,
                  gpuDepthStencilTexture: gpuDepthStencilTexture,
                  glFramebuffer: null,
                  isOffscreen: true,

                  get width() {
                    return this.isOffscreen ? width : this.gpuColorTextures[0].width;
                  },

                  set width(val) {
                    width = val;
                  },

                  get height() {
                    return this.isOffscreen ? height : this.gpuColorTextures[0].height;
                  },

                  set height(val) {
                    height = val;
                  },

                  lodLevel: lodLevel
                };
                WebGLCmdFuncCreateFramebuffer(WebGLDeviceManager.instance, this._gpuFramebuffer);
              };

              _proto.destroy = function destroy() {
                if (this._gpuFramebuffer) {
                  WebGLCmdFuncDestroyFramebuffer(WebGLDeviceManager.instance, this._gpuFramebuffer);
                  this._gpuFramebuffer = null;
                }
              };

              _createClass(WebGLFramebuffer, [{
                key: "gpuFramebuffer",
                get: function get() {
                  return this._gpuFramebuffer;
                }
              }]);

              return WebGLFramebuffer;
            }(Framebuffer);

            var WebGLInputAssembler = function (_InputAssembler) {
              _inheritsLoose(WebGLInputAssembler, _InputAssembler);

              function WebGLInputAssembler() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _InputAssembler.call.apply(_InputAssembler, [this].concat(args)) || this;
                _this._gpuInputAssembler = null;
                return _this;
              }

              var _proto = WebGLInputAssembler.prototype;

              _proto.initialize = function initialize(info) {
                if (info.vertexBuffers.length === 0) {
                  console.error('InputAssemblerInfo.vertexBuffers is null.');
                  return;
                }

                this._attributes = info.attributes;
                this._attributesHash = this.computeAttributesHash();
                this._vertexBuffers = info.vertexBuffers;

                if (info.indexBuffer) {
                  this._indexBuffer = info.indexBuffer;
                  this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride;
                  this._drawInfo.firstIndex = 0;
                } else {
                  var vertBuff = this._vertexBuffers[0];
                  this._drawInfo.vertexCount = vertBuff.size / vertBuff.stride;
                  this._drawInfo.firstVertex = 0;
                  this._drawInfo.vertexOffset = 0;
                }

                this._drawInfo.instanceCount = 0;
                this._drawInfo.firstInstance = 0;
                this._indirectBuffer = info.indirectBuffer || null;
                var gpuVertexBuffers = new Array(info.vertexBuffers.length);

                for (var i = 0; i < info.vertexBuffers.length; ++i) {
                  var vb = info.vertexBuffers[i];

                  if (vb.gpuBuffer) {
                    gpuVertexBuffers[i] = vb.gpuBuffer;
                  }
                }

                var gpuIndexBuffer = null;
                var glIndexType = 0;

                if (info.indexBuffer) {
                  gpuIndexBuffer = info.indexBuffer.gpuBuffer;

                  if (gpuIndexBuffer) {
                    switch (gpuIndexBuffer.stride) {
                      case 1:
                        glIndexType = 0x1401;
                        break;

                      case 2:
                        glIndexType = 0x1403;
                        break;

                      case 4:
                        glIndexType = 0x1405;
                        break;

                      default:
                        {
                          console.error('Error index buffer stride.');
                        }
                    }
                  }
                }

                var gpuIndirectBuffer = null;

                if (info.indirectBuffer) {
                  gpuIndirectBuffer = info.indirectBuffer.gpuBuffer;
                }

                this._gpuInputAssembler = {
                  attributes: info.attributes,
                  gpuVertexBuffers: gpuVertexBuffers,
                  gpuIndexBuffer: gpuIndexBuffer,
                  gpuIndirectBuffer: gpuIndirectBuffer,
                  glAttribs: [],
                  glIndexType: glIndexType,
                  glVAOs: new Map()
                };
                WebGLCmdFuncCreateInputAssember(WebGLDeviceManager.instance, this._gpuInputAssembler);
              };

              _proto.destroy = function destroy() {
                var device = WebGLDeviceManager.instance;

                if (this._gpuInputAssembler && device.extensions.useVAO) {
                  WebGLCmdFuncDestroyInputAssembler(device, this._gpuInputAssembler);
                }

                this._gpuInputAssembler = null;
              };

              _createClass(WebGLInputAssembler, [{
                key: "gpuInputAssembler",
                get: function get() {
                  return this._gpuInputAssembler;
                }
              }]);

              return WebGLInputAssembler;
            }(InputAssembler);

            var WebGLDescriptorSetLayout = function (_DescriptorSetLayout) {
              _inheritsLoose(WebGLDescriptorSetLayout, _DescriptorSetLayout);

              function WebGLDescriptorSetLayout() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _DescriptorSetLayout.call.apply(_DescriptorSetLayout, [this].concat(args)) || this;
                _this._gpuDescriptorSetLayout = null;
                return _this;
              }

              var _proto = WebGLDescriptorSetLayout.prototype;

              _proto.initialize = function initialize(info) {
                Array.prototype.push.apply(this._bindings, info.bindings);
                var descriptorCount = 0;
                var maxBinding = -1;
                var flattenedIndices = [];

                for (var i = 0; i < this._bindings.length; i++) {
                  var binding = this._bindings[i];
                  flattenedIndices.push(descriptorCount);
                  descriptorCount += binding.count;
                  if (binding.binding > maxBinding) maxBinding = binding.binding;
                }

                this._bindingIndices = Array(maxBinding + 1).fill(-1);
                var descriptorIndices = this._descriptorIndices = Array(maxBinding + 1).fill(-1);

                for (var _i = 0; _i < this._bindings.length; _i++) {
                  var _binding = this._bindings[_i];
                  this._bindingIndices[_binding.binding] = _i;
                  descriptorIndices[_binding.binding] = flattenedIndices[_i];
                }

                var dynamicBindings = [];

                for (var _i2 = 0; _i2 < this._bindings.length; _i2++) {
                  var _binding2 = this._bindings[_i2];

                  if (_binding2.descriptorType & DESCRIPTOR_DYNAMIC_TYPE) {
                    for (var j = 0; j < _binding2.count; j++) {
                      dynamicBindings.push(_binding2.binding);
                    }
                  }
                }

                this._gpuDescriptorSetLayout = {
                  bindings: this._bindings,
                  dynamicBindings: dynamicBindings,
                  descriptorIndices: descriptorIndices,
                  descriptorCount: descriptorCount
                };
              };

              _proto.destroy = function destroy() {
                this._bindings.length = 0;
              };

              _createClass(WebGLDescriptorSetLayout, [{
                key: "gpuDescriptorSetLayout",
                get: function get() {
                  return this._gpuDescriptorSetLayout;
                }
              }]);

              return WebGLDescriptorSetLayout;
            }(DescriptorSetLayout);

            var WebGLPipelineLayout = function (_PipelineLayout) {
              _inheritsLoose(WebGLPipelineLayout, _PipelineLayout);

              function WebGLPipelineLayout() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _PipelineLayout.call.apply(_PipelineLayout, [this].concat(args)) || this;
                _this._gpuPipelineLayout = null;
                return _this;
              }

              var _proto = WebGLPipelineLayout.prototype;

              _proto.initialize = function initialize(info) {
                Array.prototype.push.apply(this._setLayouts, info.setLayouts);
                var dynamicOffsetIndices = [];
                var gpuSetLayouts = [];
                var dynamicOffsetCount = 0;
                var dynamicOffsetOffsets = [];

                for (var i = 0; i < this._setLayouts.length; i++) {
                  var setLayout = this._setLayouts[i];
                  var dynamicBindings = setLayout.gpuDescriptorSetLayout.dynamicBindings;
                  var indices = Array(setLayout.bindingIndices.length).fill(-1);

                  for (var j = 0; j < dynamicBindings.length; j++) {
                    var binding = dynamicBindings[j];
                    if (indices[binding] < 0) indices[binding] = dynamicOffsetCount + j;
                  }

                  gpuSetLayouts.push(setLayout.gpuDescriptorSetLayout);
                  dynamicOffsetIndices.push(indices);
                  dynamicOffsetOffsets.push(dynamicOffsetCount);
                  dynamicOffsetCount += dynamicBindings.length;
                }

                this._gpuPipelineLayout = {
                  gpuSetLayouts: gpuSetLayouts,
                  dynamicOffsetIndices: dynamicOffsetIndices,
                  dynamicOffsetCount: dynamicOffsetCount,
                  dynamicOffsetOffsets: dynamicOffsetOffsets
                };
              };

              _proto.destroy = function destroy() {
                this._setLayouts.length = 0;
              };

              _createClass(WebGLPipelineLayout, [{
                key: "gpuPipelineLayout",
                get: function get() {
                  return this._gpuPipelineLayout;
                }
              }]);

              return WebGLPipelineLayout;
            }(PipelineLayout);

            var WebGLPrimitives = [0x0000, 0x0001, 0x0003, 0x0002, 0x0000, 0x0000, 0x0000, 0x0004, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000];
            var WebGLPipelineState = function (_PipelineState) {
              _inheritsLoose(WebGLPipelineState, _PipelineState);

              function WebGLPipelineState() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _PipelineState.call.apply(_PipelineState, [this].concat(args)) || this;
                _this._gpuPipelineState = null;
                return _this;
              }

              var _proto = WebGLPipelineState.prototype;

              _proto.initialize = function initialize(info) {
                this._primitive = info.primitive;
                this._shader = info.shader;
                this._pipelineLayout = info.pipelineLayout;
                var bs = this._bs;

                if (info.blendState) {
                  var bsInfo = info.blendState;
                  var targets = bsInfo.targets;

                  if (targets) {
                    targets.forEach(function (t, i) {
                      bs.setTarget(i, t);
                    });
                  }

                  if (bsInfo.isA2C !== undefined) {
                    bs.isA2C = bsInfo.isA2C;
                  }

                  if (bsInfo.isIndepend !== undefined) {
                    bs.isIndepend = bsInfo.isIndepend;
                  }

                  if (bsInfo.blendColor !== undefined) {
                    bs.blendColor = bsInfo.blendColor;
                  }
                }

                Object.assign(this._rs, info.rasterizerState);
                Object.assign(this._dss, info.depthStencilState);
                this._is = info.inputState;
                this._renderPass = info.renderPass;
                this._dynamicStates = info.dynamicStates;
                var dynamicStates = [];

                for (var i = 0; i < 31; i++) {
                  if (this._dynamicStates & 1 << i) {
                    dynamicStates.push(1 << i);
                  }
                }

                this._gpuPipelineState = {
                  glPrimitive: WebGLPrimitives[info.primitive],
                  gpuShader: info.shader.gpuShader,
                  gpuPipelineLayout: info.pipelineLayout.gpuPipelineLayout,
                  rs: info.rasterizerState,
                  dss: info.depthStencilState,
                  bs: info.blendState,
                  gpuRenderPass: info.renderPass.gpuRenderPass,
                  dynamicStates: dynamicStates
                };
              };

              _proto.destroy = function destroy() {
                this._gpuPipelineState = null;
              };

              _createClass(WebGLPipelineState, [{
                key: "gpuPipelineState",
                get: function get() {
                  return this._gpuPipelineState;
                }
              }]);

              return WebGLPipelineState;
            }(PipelineState);

            var WebGLPrimaryCommandBuffer = function (_WebGLCommandBuffer) {
              _inheritsLoose(WebGLPrimaryCommandBuffer, _WebGLCommandBuffer);

              function WebGLPrimaryCommandBuffer() {
                return _WebGLCommandBuffer.apply(this, arguments) || this;
              }

              var _proto = WebGLPrimaryCommandBuffer.prototype;

              _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
                WebGLCmdFuncBeginRenderPass(WebGLDeviceManager.instance, renderPass.gpuRenderPass, framebuffer.gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil);
                this._isInRenderPass = true;
              };

              _proto.draw = function draw(infoOrAssembler) {
                if (this._isInRenderPass) {
                  if (this._isStateInvalied) {
                    this.bindStates();
                  }

                  var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;
                  WebGLCmdFuncDraw(WebGLDeviceManager.instance, info);
                  ++this._numDrawCalls;
                  this._numInstances += info.instanceCount;
                  var indexCount = info.indexCount || info.vertexCount;

                  if (this._curGPUPipelineState) {
                    var glPrimitive = this._curGPUPipelineState.glPrimitive;

                    switch (glPrimitive) {
                      case 0x0004:
                        {
                          this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                          break;
                        }

                      case 0x0005:
                      case 0x0006:
                        {
                          this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                          break;
                        }
                    }
                  }
                } else {
                  console.error('Command \'draw\' must be recorded inside a render pass.');
                }
              };

              _proto.setViewport = function setViewport(viewport) {
                var _WebGLDeviceManager$i = WebGLDeviceManager.instance,
                    cache = _WebGLDeviceManager$i.stateCache,
                    gl = _WebGLDeviceManager$i.gl;

                if (cache.viewport.left !== viewport.left || cache.viewport.top !== viewport.top || cache.viewport.width !== viewport.width || cache.viewport.height !== viewport.height) {
                  gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);
                  cache.viewport.left = viewport.left;
                  cache.viewport.top = viewport.top;
                  cache.viewport.width = viewport.width;
                  cache.viewport.height = viewport.height;
                }
              };

              _proto.setScissor = function setScissor(scissor) {
                var _WebGLDeviceManager$i2 = WebGLDeviceManager.instance,
                    cache = _WebGLDeviceManager$i2.stateCache,
                    gl = _WebGLDeviceManager$i2.gl;

                if (cache.scissorRect.x !== scissor.x || cache.scissorRect.y !== scissor.y || cache.scissorRect.width !== scissor.width || cache.scissorRect.height !== scissor.height) {
                  gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);
                  cache.scissorRect.x = scissor.x;
                  cache.scissorRect.y = scissor.y;
                  cache.scissorRect.width = scissor.width;
                  cache.scissorRect.height = scissor.height;
                }
              };

              _proto.updateBuffer = function updateBuffer(buffer, data, size) {
                if (!this._isInRenderPass) {
                  var gpuBuffer = buffer.gpuBuffer;

                  if (gpuBuffer) {
                    var buffSize;

                    if (size !== undefined) {
                      buffSize = size;
                    } else if (buffer.usage & BufferUsageBit.INDIRECT) {
                      buffSize = 0;
                    } else {
                      buffSize = data.byteLength;
                    }

                    WebGLCmdFuncUpdateBuffer(WebGLDeviceManager.instance, gpuBuffer, data, 0, buffSize);
                  }
                } else {
                  console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
                }
              };

              _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
                if (!this._isInRenderPass) {
                  var gpuTexture = texture.gpuTexture;

                  if (gpuTexture) {
                    WebGLCmdFuncCopyBuffersToTexture(WebGLDeviceManager.instance, buffers, gpuTexture, regions);
                  }
                } else {
                  console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
                }
              };

              _proto.execute = function execute(cmdBuffs, count) {
                for (var i = 0; i < count; ++i) {
                  var webGLCmdBuff = cmdBuffs[i];
                  WebGLCmdFuncExecuteCmds(WebGLDeviceManager.instance, webGLCmdBuff.cmdPackage);
                  this._numDrawCalls += webGLCmdBuff._numDrawCalls;
                  this._numInstances += webGLCmdBuff._numInstances;
                  this._numTris += webGLCmdBuff._numTris;
                }
              };

              _proto.bindStates = function bindStates() {
                WebGLCmdFuncBindStates(WebGLDeviceManager.instance, this._curGPUPipelineState, this._curGPUInputAssembler, this._curGPUDescriptorSets, this._curDynamicOffsets, this._curDynamicStates);
                this._isStateInvalied = false;
              };

              return WebGLPrimaryCommandBuffer;
            }(WebGLCommandBuffer);

            var WebGLQueue = function (_Queue) {
              _inheritsLoose(WebGLQueue, _Queue);

              function WebGLQueue() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Queue.call.apply(_Queue, [this].concat(args)) || this;
                _this.numDrawCalls = 0;
                _this.numInstances = 0;
                _this.numTris = 0;
                return _this;
              }

              var _proto = WebGLQueue.prototype;

              _proto.initialize = function initialize(info) {
                this._type = info.type;
              };

              _proto.destroy = function destroy() {};

              _proto.submit = function submit(cmdBuffs) {
                var len = cmdBuffs.length;

                for (var i = 0; i < len; i++) {
                  var cmdBuff = cmdBuffs[i];
                  this.numDrawCalls += cmdBuff.numDrawCalls;
                  this.numInstances += cmdBuff.numInstances;
                  this.numTris += cmdBuff.numTris;
                }
              };

              _proto.clear = function clear() {
                this.numDrawCalls = 0;
                this.numInstances = 0;
                this.numTris = 0;
              };

              return WebGLQueue;
            }(Queue);

            var WebGLRenderPass = function (_RenderPass) {
              _inheritsLoose(WebGLRenderPass, _RenderPass);

              function WebGLRenderPass() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _RenderPass.call.apply(_RenderPass, [this].concat(args)) || this;
                _this._gpuRenderPass = null;
                return _this;
              }

              var _proto = WebGLRenderPass.prototype;

              _proto.initialize = function initialize(info) {
                this._colorInfos = info.colorAttachments;
                this._depthStencilInfo = info.depthStencilAttachment;
                this._subpasses = info.subpasses;
                this._gpuRenderPass = {
                  colorAttachments: this._colorInfos,
                  depthStencilAttachment: this._depthStencilInfo
                };
                this._hash = this.computeHash();
              };

              _proto.destroy = function destroy() {
                this._gpuRenderPass = null;
              };

              _createClass(WebGLRenderPass, [{
                key: "gpuRenderPass",
                get: function get() {
                  return this._gpuRenderPass;
                }
              }]);

              return WebGLRenderPass;
            }(RenderPass);

            var WebGLWraps = [0x2901, 0x8370, 0x812F, 0x812F];
            var WebGLSampler = function (_Sampler) {
              _inheritsLoose(WebGLSampler, _Sampler);

              function WebGLSampler(info, hash) {
                var _this;

                _this = _Sampler.call(this, info, hash) || this;
                _this._gpuSampler = null;
                var glMinFilter = 0;
                var glMagFilter = 0;
                var minFilter = _this._info.minFilter;
                var magFilter = _this._info.magFilter;
                var mipFilter = _this._info.mipFilter;

                if (minFilter === Filter.LINEAR || minFilter === Filter.ANISOTROPIC) {
                  if (mipFilter === Filter.LINEAR || mipFilter === Filter.ANISOTROPIC) {
                    glMinFilter = 0x2703;
                  } else if (mipFilter === Filter.POINT) {
                    glMinFilter = 0x2701;
                  } else {
                    glMinFilter = 0x2601;
                  }
                } else if (mipFilter === Filter.LINEAR || mipFilter === Filter.ANISOTROPIC) {
                  glMinFilter = 0x2702;
                } else if (mipFilter === Filter.POINT) {
                  glMinFilter = 0x2700;
                } else {
                  glMinFilter = 0x2600;
                }

                if (magFilter === Filter.LINEAR || magFilter === Filter.ANISOTROPIC) {
                  glMagFilter = 0x2601;
                } else {
                  glMagFilter = 0x2600;
                }

                var glWrapS = WebGLWraps[_this._info.addressU];
                var glWrapT = WebGLWraps[_this._info.addressV];
                var glWrapR = WebGLWraps[_this._info.addressW];
                _this._gpuSampler = {
                  glMinFilter: glMinFilter,
                  glMagFilter: glMagFilter,
                  glWrapS: glWrapS,
                  glWrapT: glWrapT,
                  glWrapR: glWrapR
                };
                return _this;
              }

              _createClass(WebGLSampler, [{
                key: "gpuSampler",
                get: function get() {
                  return this._gpuSampler;
                }
              }]);

              return WebGLSampler;
            }(Sampler);

            var WebGLShader = function (_Shader) {
              _inheritsLoose(WebGLShader, _Shader);

              function WebGLShader() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Shader.call.apply(_Shader, [this].concat(args)) || this;
                _this._gpuShader = null;
                return _this;
              }

              var _proto = WebGLShader.prototype;

              _proto.initialize = function initialize(info) {
                this._name = info.name;
                this._stages = info.stages;
                this._attributes = info.attributes;
                this._blocks = info.blocks;
                this._samplers = info.samplers;
                this._gpuShader = {
                  name: info.name,
                  blocks: info.blocks.slice(),
                  samplerTextures: info.samplerTextures.slice(),
                  subpassInputs: info.subpassInputs.slice(),
                  gpuStages: new Array(info.stages.length),
                  glProgram: null,
                  glInputs: [],
                  glUniforms: [],
                  glBlocks: [],
                  glSamplerTextures: []
                };

                for (var i = 0; i < info.stages.length; ++i) {
                  var stage = info.stages[i];
                  this._gpuShader.gpuStages[i] = {
                    type: stage.stage,
                    source: stage.source,
                    glShader: null
                  };
                }

                WebGLCmdFuncCreateShader(WebGLDeviceManager.instance, this._gpuShader);
              };

              _proto.destroy = function destroy() {
                if (this._gpuShader) {
                  WebGLCmdFuncDestroyShader(WebGLDeviceManager.instance, this._gpuShader);
                  this._gpuShader = null;
                }
              };

              _createClass(WebGLShader, [{
                key: "gpuShader",
                get: function get() {
                  return this._gpuShader;
                }
              }]);

              return WebGLShader;
            }(Shader);

            var WebGLStateCache = function () {
              function WebGLStateCache() {
                this.glArrayBuffer = null;
                this.glElementArrayBuffer = null;
                this.glVAO = null;
                this.texUnit = 0;
                this.glTexUnits = [];
                this.glRenderbuffer = null;
                this.glFramebuffer = null;
                this.viewport = new Viewport();
                this.scissorRect = new Rect(0, 0, 0, 0);
                this.rs = new RasterizerState();
                this.dss = new DepthStencilState();
                this.bs = new BlendState();
                this.glProgram = null;
                this.glEnabledAttribLocs = [];
                this.glCurrentAttribLocs = [];
                this.texUnitCacheMap = {};
              }

              var _proto = WebGLStateCache.prototype;

              _proto.initialize = function initialize(texUnit, vertexAttributes) {
                for (var i = 0; i < texUnit; ++i) {
                  this.glTexUnits.push({
                    glTexture: null
                  });
                }

                this.glEnabledAttribLocs.length = vertexAttributes;
                this.glEnabledAttribLocs.fill(false);
                this.glCurrentAttribLocs.length = vertexAttributes;
                this.glCurrentAttribLocs.fill(false);
              };

              return WebGLStateCache;
            }();

            var WebGLTexture = function (_Texture) {
              _inheritsLoose(WebGLTexture, _Texture);

              function WebGLTexture() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Texture.call.apply(_Texture, [this].concat(args)) || this;
                _this._gpuTexture = null;
                _this._lodLevel = 0;
                return _this;
              }

              var _proto = WebGLTexture.prototype;

              _proto.initialize = function initialize(info, isSwapchainTexture) {
                var texInfo = info;
                var viewInfo = info;

                if ('texture' in info) {
                  texInfo = viewInfo.texture.info;
                  this._isTextureView = true;
                }

                this._info.copy(texInfo);

                this._isPowerOf2 = IsPowerOf2(this._info.width) && IsPowerOf2(this._info.height);
                this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

                if (!this._isTextureView) {
                  this._gpuTexture = {
                    type: texInfo.type,
                    format: texInfo.format,
                    usage: texInfo.usage,
                    width: texInfo.width,
                    height: texInfo.height,
                    depth: texInfo.depth,
                    size: this._size,
                    arrayLayer: texInfo.layerCount,
                    mipLevel: texInfo.levelCount,
                    samples: texInfo.samples,
                    flags: texInfo.flags,
                    isPowerOf2: this._isPowerOf2,
                    glTarget: 0,
                    glInternalFmt: 0,
                    glFormat: 0,
                    glType: 0,
                    glUsage: 0,
                    glTexture: null,
                    glRenderbuffer: null,
                    glWrapS: 0,
                    glWrapT: 0,
                    glMinFilter: 0,
                    glMagFilter: 0,
                    isSwapchainTexture: isSwapchainTexture || false
                  };
                  WebGLCmdFuncCreateTexture(WebGLDeviceManager.instance, this._gpuTexture);
                  WebGLDeviceManager.instance.memoryStatus.textureSize += this._size;
                  this._viewInfo.texture = this;
                  this._viewInfo.type = info.type;
                  this._viewInfo.format = info.format;
                  this._viewInfo.baseLevel = 0;
                  this._viewInfo.levelCount = info.levelCount;
                  this._viewInfo.baseLayer = 0;
                  this._viewInfo.layerCount = info.layerCount;
                } else {
                  this._viewInfo.copy(viewInfo);

                  this._lodLevel = viewInfo.baseLevel;
                  this._gpuTexture = viewInfo.texture._gpuTexture;
                }
              };

              _proto.destroy = function destroy() {
                if (!this._isTextureView && this._gpuTexture) {
                  WebGLCmdFuncDestroyTexture(WebGLDeviceManager.instance, this._gpuTexture);
                  WebGLDeviceManager.instance.memoryStatus.textureSize -= this._size;
                  this._gpuTexture = null;
                }
              };

              _proto.resize = function resize(width, height) {
                if (this._info.width === width && this._info.height === height) {
                  return;
                }

                if (this._info.levelCount === WebGLTexture.getLevelCount(this._info.width, this._info.height)) {
                  this._info.levelCount = WebGLTexture.getLevelCount(width, height);
                } else if (this._info.levelCount > 1) {
                  this._info.levelCount = Math.min(this._info.levelCount, WebGLTexture.getLevelCount(width, height));
                }

                var oldSize = this._size;
                this._info.width = width;
                this._info.height = height;
                this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

                if (!this._isTextureView && this._gpuTexture) {
                  this._gpuTexture.width = width;
                  this._gpuTexture.height = height;
                  this._gpuTexture.size = this._size;
                  WebGLCmdFuncResizeTexture(WebGLDeviceManager.instance, this._gpuTexture);
                  WebGLDeviceManager.instance.memoryStatus.textureSize -= oldSize;
                  WebGLDeviceManager.instance.memoryStatus.textureSize += this._size;
                }
              };

              _proto.initAsSwapchainTexture = function initAsSwapchainTexture(info) {
                var texInfo = new TextureInfo();
                texInfo.format = info.format;
                texInfo.usage = FormatInfos[info.format].hasDepth ? TextureUsageBit.DEPTH_STENCIL_ATTACHMENT : TextureUsageBit.COLOR_ATTACHMENT;
                texInfo.width = info.width;
                texInfo.height = info.height;
                this.initialize(texInfo, true);
              };

              _createClass(WebGLTexture, [{
                key: "gpuTexture",
                get: function get() {
                  return this._gpuTexture;
                }
              }, {
                key: "lodLevel",
                get: function get() {
                  return this._lodLevel;
                }
              }]);

              return WebGLTexture;
            }(Texture);

            var eventWebGLContextLost = 'webglcontextlost';

            function initStates(gl) {
              gl.activeTexture(gl.TEXTURE0);
              gl.pixelStorei(gl.PACK_ALIGNMENT, 1);
              gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              gl.enable(gl.SCISSOR_TEST);
              gl.enable(gl.CULL_FACE);
              gl.cullFace(gl.BACK);
              gl.frontFace(gl.CCW);
              gl.disable(gl.POLYGON_OFFSET_FILL);
              gl.polygonOffset(0.0, 0.0);
              gl.enable(gl.DEPTH_TEST);
              gl.depthMask(true);
              gl.depthFunc(gl.LESS);
              gl.depthRange(0.0, 1.0);
              gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 1, 0xffff);
              gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);
              gl.stencilMaskSeparate(gl.FRONT, 0xffff);
              gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 1, 0xffff);
              gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);
              gl.stencilMaskSeparate(gl.BACK, 0xffff);
              gl.disable(gl.STENCIL_TEST);
              gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
              gl.disable(gl.BLEND);
              gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
              gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
              gl.colorMask(true, true, true, true);
              gl.blendColor(0.0, 0.0, 0.0, 0.0);
            }

            function getExtension(gl, ext) {
              var prefixes = ['', 'WEBKIT_', 'MOZ_'];

              for (var i = 0; i < prefixes.length; ++i) {
                var _ext = gl.getExtension(prefixes[i] + ext);

                if (_ext) {
                  return _ext;
                }
              }

              return null;
            }

            function getExtensions(gl) {
              var res = {
                EXT_texture_filter_anisotropic: getExtension(gl, 'EXT_texture_filter_anisotropic'),
                EXT_blend_minmax: getExtension(gl, 'EXT_blend_minmax'),
                EXT_frag_depth: getExtension(gl, 'EXT_frag_depth'),
                EXT_shader_texture_lod: getExtension(gl, 'EXT_shader_texture_lod'),
                EXT_sRGB: getExtension(gl, 'EXT_sRGB'),
                OES_vertex_array_object: getExtension(gl, 'OES_vertex_array_object'),
                EXT_color_buffer_half_float: getExtension(gl, 'EXT_color_buffer_half_float'),
                WEBGL_color_buffer_float: getExtension(gl, 'WEBGL_color_buffer_float'),
                WEBGL_compressed_texture_etc1: getExtension(gl, 'WEBGL_compressed_texture_etc1'),
                WEBGL_compressed_texture_etc: getExtension(gl, 'WEBGL_compressed_texture_etc'),
                WEBGL_compressed_texture_pvrtc: getExtension(gl, 'WEBGL_compressed_texture_pvrtc'),
                WEBGL_compressed_texture_s3tc: getExtension(gl, 'WEBGL_compressed_texture_s3tc'),
                WEBGL_compressed_texture_s3tc_srgb: getExtension(gl, 'WEBGL_compressed_texture_s3tc_srgb'),
                WEBGL_debug_shaders: getExtension(gl, 'WEBGL_debug_shaders'),
                WEBGL_draw_buffers: getExtension(gl, 'WEBGL_draw_buffers'),
                WEBGL_lose_context: getExtension(gl, 'WEBGL_lose_context'),
                WEBGL_depth_texture: getExtension(gl, 'WEBGL_depth_texture'),
                OES_texture_half_float: getExtension(gl, 'OES_texture_half_float'),
                OES_texture_half_float_linear: getExtension(gl, 'OES_texture_half_float_linear'),
                OES_texture_float: getExtension(gl, 'OES_texture_float'),
                OES_texture_float_linear: getExtension(gl, 'OES_texture_float_linear'),
                OES_standard_derivatives: getExtension(gl, 'OES_standard_derivatives'),
                OES_element_index_uint: getExtension(gl, 'OES_element_index_uint'),
                ANGLE_instanced_arrays: getExtension(gl, 'ANGLE_instanced_arrays'),
                WEBGL_debug_renderer_info: getExtension(gl, 'WEBGL_debug_renderer_info'),
                WEBGL_multi_draw: null,
                WEBGL_compressed_texture_astc: null,
                destroyShadersImmediately: true,
                noCompressedTexSubImage2D: false,
                isLocationActive: function isLocationActive(glLoc) {
                  return !!glLoc;
                },
                useVAO: false
              };
              {
                if (systemInfo.os !== OS.IOS || systemInfo.osMainVersion !== 14 || !systemInfo.isBrowser) {
                  res.WEBGL_compressed_texture_astc = getExtension(gl, 'WEBGL_compressed_texture_astc');
                }

                if (systemInfo.os !== OS.ANDROID && systemInfo.os !== OS.IOS) {
                  res.WEBGL_multi_draw = getExtension(gl, 'WEBGL_multi_draw');
                }

                if (systemInfo.browserType === BrowserType.UC) {
                  res.ANGLE_instanced_arrays = null;
                }

                if (systemInfo.os === OS.IOS && systemInfo.osMainVersion <= 10 || WECHAT ) {
                  res.destroyShadersImmediately = false;
                }
              }

              if (res.OES_vertex_array_object) {
                res.useVAO = true;
              }

              return res;
            }
            function getContext(canvas) {
              var context = null;

              try {
                var webGLCtxAttribs = {
                  alpha: macro.ENABLE_TRANSPARENT_CANVAS,
                  antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,
                  depth: true,
                  stencil: true,
                  premultipliedAlpha: false,
                  preserveDrawingBuffer: false,
                  powerPreference: 'default',
                  failIfMajorPerformanceCaveat: false
                };
                context = canvas.getContext('webgl', webGLCtxAttribs);
              } catch (err) {
                return null;
              }

              return context;
            }
            var WebGLSwapchain = function (_Swapchain) {
              _inheritsLoose(WebGLSwapchain, _Swapchain);

              function WebGLSwapchain() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Swapchain.call.apply(_Swapchain, [this].concat(args)) || this;
                _this.stateCache = new WebGLStateCache();
                _this.cmdAllocator = new WebGLCommandAllocator();
                _this.nullTex2D = null;
                _this.nullTexCube = null;
                _this._canvas = null;
                _this._webGLContextLostHandler = null;
                _this._extensions = null;
                return _this;
              }

              var _proto = WebGLSwapchain.prototype;

              _proto.initialize = function initialize(info) {
                this._canvas = info.windowHandle;
                this._webGLContextLostHandler = this._onWebGLContextLost.bind(this);

                this._canvas.addEventListener(eventWebGLContextLost, this._onWebGLContextLost);

                var gl = WebGLDeviceManager.instance.gl;
                this.stateCache.initialize(WebGLDeviceManager.instance.capabilities.maxTextureUnits, WebGLDeviceManager.instance.capabilities.maxVertexAttributes);
                this._extensions = getExtensions(gl);
                initStates(gl);
                var colorFmt = Format.RGBA8;
                var depthStencilFmt = Format.DEPTH_STENCIL;
                var depthBits = gl.getParameter(gl.DEPTH_BITS);
                var stencilBits = gl.getParameter(gl.STENCIL_BITS);

                if (depthBits && stencilBits) depthStencilFmt = Format.DEPTH_STENCIL;else if (depthBits) depthStencilFmt = Format.DEPTH;
                this._colorTexture = new WebGLTexture();

                this._colorTexture.initAsSwapchainTexture({
                  swapchain: this,
                  format: colorFmt,
                  width: info.width,
                  height: info.height
                });

                this._depthStencilTexture = new WebGLTexture();

                this._depthStencilTexture.initAsSwapchainTexture({
                  swapchain: this,
                  format: depthStencilFmt,
                  width: info.width,
                  height: info.height
                });

                this.nullTex2D = WebGLDeviceManager.instance.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.GEN_MIPMAP));
                this.nullTexCube = WebGLDeviceManager.instance.createTexture(new TextureInfo(TextureType.CUBE, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.GEN_MIPMAP, 6));
                var nullTexRegion = new BufferTextureCopy();
                nullTexRegion.texExtent.width = 2;
                nullTexRegion.texExtent.height = 2;
                var nullTexBuff = new Uint8Array(this.nullTex2D.size);
                nullTexBuff.fill(0);
                WebGLDeviceManager.instance.copyBuffersToTexture([nullTexBuff], this.nullTex2D, [nullTexRegion]);
                nullTexRegion.texSubres.layerCount = 6;
                WebGLDeviceManager.instance.copyBuffersToTexture([nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff], this.nullTexCube, [nullTexRegion]);
              };

              _proto.destroy = function destroy() {
                if (this._canvas && this._webGLContextLostHandler) {
                  this._canvas.removeEventListener(eventWebGLContextLost, this._webGLContextLostHandler);

                  this._webGLContextLostHandler = null;
                }

                if (this.nullTex2D) {
                  this.nullTex2D.destroy();
                  this.nullTex2D = null;
                }

                if (this.nullTexCube) {
                  this.nullTexCube.destroy();
                  this.nullTexCube = null;
                }

                this._extensions = null;
                this._canvas = null;
              };

              _proto.resize = function resize(width, height, surfaceTransform) {
                if (this._colorTexture.width !== width || this._colorTexture.height !== height) {
                  debug("Resizing swapchain: " + width + "x" + height);
                  this._canvas.width = width;
                  this._canvas.height = height;

                  this._colorTexture.resize(width, height);

                  this._depthStencilTexture.resize(width, height);
                }
              };

              _proto._onWebGLContextLost = function _onWebGLContextLost(event) {
                warnID(11000);
                warn(event);
              };

              _createClass(WebGLSwapchain, [{
                key: "extensions",
                get: function get() {
                  return this._extensions;
                }
              }]);

              return WebGLSwapchain;
            }(Swapchain);

            var WebGLDevice = exports('WebGLDevice', function (_Device) {
              _inheritsLoose(WebGLDevice, _Device);

              function WebGLDevice() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Device.call.apply(_Device, [this].concat(args)) || this;
                _this._swapchain = null;
                _this._context = null;
                _this._bindingMappings = null;
                _this._textureExclusive = new Array(Format.COUNT);
                return _this;
              }

              var _proto = WebGLDevice.prototype;

              _proto.initialize = function initialize(info) {
                WebGLDeviceManager.setInstance(this);
                this._gfxAPI = API.WEBGL;
                var mapping = this._bindingMappingInfo = info.bindingMappingInfo;
                var blockOffsets = [];
                var samplerTextureOffsets = [];
                var firstSet = mapping.setIndices[0];
                blockOffsets[firstSet] = 0;
                samplerTextureOffsets[firstSet] = 0;

                for (var i = 1; i < mapping.setIndices.length; ++i) {
                  var curSet = mapping.setIndices[i];
                  var prevSet = mapping.setIndices[i - 1];
                  blockOffsets[curSet] = mapping.maxBlockCounts[prevSet] + blockOffsets[prevSet];
                  samplerTextureOffsets[curSet] = mapping.maxSamplerTextureCounts[prevSet] + samplerTextureOffsets[prevSet];
                }

                for (var _i = 0; _i < mapping.setIndices.length; ++_i) {
                  var _curSet = mapping.setIndices[_i];
                  samplerTextureOffsets[_curSet] -= mapping.maxBlockCounts[_curSet];
                }

                this._bindingMappings = {
                  blockOffsets: blockOffsets,
                  samplerTextureOffsets: samplerTextureOffsets,
                  flexibleSet: mapping.setIndices[mapping.setIndices.length - 1]
                };
                var gl = this._context = getContext(Device.canvas);

                if (!gl) {
                  console.error('This device does not support WebGL.');
                  return false;
                }

                this._queue = this.createQueue(new QueueInfo(QueueType.GRAPHICS));
                this._cmdBuff = this.createCommandBuffer(new CommandBufferInfo(this._queue));
                this._caps.maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
                this._caps.maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
                this._caps.maxFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
                this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
                this._caps.maxVertexTextureUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
                this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
                this._caps.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
                this._caps.maxUniformBufferBindings = 16;
                var extensions = gl.getSupportedExtensions();
                var extStr = '';

                if (extensions) {
                  for (var _iterator = _createForOfIteratorHelperLoose(extensions), _step; !(_step = _iterator()).done;) {
                    var ext = _step.value;
                    extStr += ext + " ";
                  }
                }

                var exts = getExtensions(gl);

                if (exts.WEBGL_debug_renderer_info) {
                  this._renderer = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL);
                  this._vendor = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL);
                } else {
                  this._renderer = gl.getParameter(gl.RENDERER);
                  this._vendor = gl.getParameter(gl.VENDOR);
                }

                var version = gl.getParameter(gl.VERSION);

                this._features.fill(false);

                this.initFormatFeatures(exts);

                if (exts.EXT_blend_minmax) {
                  this._features[Feature.BLEND_MINMAX] = true;
                }

                if (exts.OES_element_index_uint) {
                  this._features[Feature.ELEMENT_INDEX_UINT] = true;
                }

                if (exts.ANGLE_instanced_arrays) {
                  this._features[Feature.INSTANCED_ARRAYS] = true;
                }

                if (exts.WEBGL_draw_buffers) {
                  this._features[Feature.MULTIPLE_RENDER_TARGETS] = true;
                }

                var compressedFormat = '';

                if (this.getFormatFeatures(Format.ETC_RGB8)) {
                  compressedFormat += 'etc1 ';
                }

                if (this.getFormatFeatures(Format.ETC2_RGB8)) {
                  compressedFormat += 'etc2 ';
                }

                if (this.getFormatFeatures(Format.BC1)) {
                  compressedFormat += 'dxt ';
                }

                if (this.getFormatFeatures(Format.PVRTC_RGB2)) {
                  compressedFormat += 'pvrtc ';
                }

                if (this.getFormatFeatures(Format.ASTC_RGBA_4X4)) {
                  compressedFormat += 'astc ';
                }

                debug('WebGL device initialized.');
                debug("RENDERER: " + this._renderer);
                debug("VENDOR: " + this._vendor);
                debug("VERSION: " + version);
                debug("COMPRESSED_FORMAT: " + compressedFormat);
                debug("EXTENSIONS: " + extStr);
                return true;
              };

              _proto.destroy = function destroy() {
                if (this._queue) {
                  this._queue.destroy();

                  this._queue = null;
                }

                if (this._cmdBuff) {
                  this._cmdBuff.destroy();

                  this._cmdBuff = null;
                }
              };

              _proto.flushCommands = function flushCommands(cmdBuffs) {};

              _proto.acquire = function acquire(swapchains) {};

              _proto.present = function present() {
                var queue = this._queue;
                this._numDrawCalls = queue.numDrawCalls;
                this._numInstances = queue.numInstances;
                this._numTris = queue.numTris;
                queue.clear();
              };

              _proto.initFormatFeatures = function initFormatFeatures(exts) {
                this._formatFeatures.fill(FormatFeatureBit.NONE);

                this._textureExclusive.fill(true);

                var tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
                this._formatFeatures[Format.RGB8] = tempFeature;
                this._formatFeatures[Format.R5G6B5] = tempFeature;
                this._textureExclusive[Format.R5G6B5] = false;
                this._formatFeatures[Format.RGBA8] = tempFeature;
                this._formatFeatures[Format.RGBA4] = tempFeature;
                this._textureExclusive[Format.RGBA4] = false;
                this._formatFeatures[Format.RGB5A1] = tempFeature;
                this._textureExclusive[Format.RGB5A1] = false;
                this._formatFeatures[Format.DEPTH] = FormatFeatureBit.RENDER_TARGET;
                this._textureExclusive[Format.DEPTH] = false;
                this._formatFeatures[Format.DEPTH_STENCIL] = FormatFeatureBit.RENDER_TARGET;
                this._textureExclusive[Format.DEPTH_STENCIL] = false;
                this._formatFeatures[Format.R8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RG8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGB8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGBA8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RG8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGB8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGBA8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RG8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGB8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGBA8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RG8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGB8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGBA8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RG32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;

                if (exts.EXT_sRGB) {
                  this._formatFeatures[Format.SRGB8] = tempFeature;
                  this._formatFeatures[Format.SRGB8_A8] = tempFeature;
                  this._textureExclusive[Format.SRGB8_A8] = false;
                }

                if (exts.WEBGL_depth_texture) {
                  this._formatFeatures[Format.DEPTH] |= tempFeature;
                  this._formatFeatures[Format.DEPTH_STENCIL] |= tempFeature;
                }

                if (exts.WEBGL_color_buffer_float) {
                  this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.RENDER_TARGET;
                  this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET;
                  this._textureExclusive[Format.RGB32F] = false;
                  this._textureExclusive[Format.RGBA32F] = false;
                }

                if (exts.EXT_color_buffer_half_float) {
                  this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.RENDER_TARGET;
                  this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.RENDER_TARGET;
                  this._textureExclusive[Format.RGB16F] = false;
                  this._textureExclusive[Format.RGBA16F] = false;
                }

                if (exts.OES_texture_float) {
                  this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
                  this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
                }

                if (exts.OES_texture_half_float) {
                  this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
                  this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
                }

                if (exts.OES_texture_float_linear) {
                  this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.LINEAR_FILTER;
                }

                if (exts.OES_texture_half_float_linear) {
                  this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.LINEAR_FILTER;
                }

                var compressedFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;

                if (exts.WEBGL_compressed_texture_etc1) {
                  this._formatFeatures[Format.ETC_RGB8] = compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_etc) {
                  this._formatFeatures[Format.ETC2_RGB8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_RGBA8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_SRGB8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_SRGB8_A8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_RGB8_A1] = compressedFeature;
                  this._formatFeatures[Format.ETC2_SRGB8_A1] = compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_s3tc) {
                  this._formatFeatures[Format.BC1] = compressedFeature;
                  this._formatFeatures[Format.BC1_ALPHA] = compressedFeature;
                  this._formatFeatures[Format.BC1_SRGB] = compressedFeature;
                  this._formatFeatures[Format.BC1_SRGB_ALPHA] = compressedFeature;
                  this._formatFeatures[Format.BC2] = compressedFeature;
                  this._formatFeatures[Format.BC2_SRGB] = compressedFeature;
                  this._formatFeatures[Format.BC3] = compressedFeature;
                  this._formatFeatures[Format.BC3_SRGB] = compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_pvrtc) {
                  this._formatFeatures[Format.PVRTC_RGB2] |= compressedFeature;
                  this._formatFeatures[Format.PVRTC_RGBA2] |= compressedFeature;
                  this._formatFeatures[Format.PVRTC_RGB4] |= compressedFeature;
                  this._formatFeatures[Format.PVRTC_RGBA4] |= compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_astc) {
                  this._formatFeatures[Format.ASTC_RGBA_4X4] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_5X4] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_5X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_6X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_6X6] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_8X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_8X6] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_8X8] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X6] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X8] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X10] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_12X10] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_12X12] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_4X4] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_5X4] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_5X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_6X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_6X6] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_8X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_8X6] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_8X8] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X5] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X6] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X8] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X10] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_12X10] |= compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_12X12] |= compressedFeature;
                }
              };

              _proto.createCommandBuffer = function createCommandBuffer(info) {
                var Ctor = info.type === CommandBufferType.PRIMARY ? WebGLPrimaryCommandBuffer : WebGLCommandBuffer;
                var cmdBuff = new Ctor();
                cmdBuff.initialize(info);
                return cmdBuff;
              };

              _proto.createSwapchain = function createSwapchain(info) {
                var swapchain = new WebGLSwapchain();
                this._swapchain = swapchain;
                swapchain.initialize(info);
                return swapchain;
              };

              _proto.createBuffer = function createBuffer(info) {
                var buffer = new WebGLBuffer();
                buffer.initialize(info);
                return buffer;
              };

              _proto.createTexture = function createTexture(info) {
                var texture = new WebGLTexture();
                texture.initialize(info);
                return texture;
              };

              _proto.createDescriptorSet = function createDescriptorSet(info) {
                var descriptorSet = new WebGLDescriptorSet();
                descriptorSet.initialize(info);
                return descriptorSet;
              };

              _proto.createShader = function createShader(info) {
                var shader = new WebGLShader();
                shader.initialize(info);
                return shader;
              };

              _proto.createInputAssembler = function createInputAssembler(info) {
                var inputAssembler = new WebGLInputAssembler();
                inputAssembler.initialize(info);
                return inputAssembler;
              };

              _proto.createRenderPass = function createRenderPass(info) {
                var renderPass = new WebGLRenderPass();
                renderPass.initialize(info);
                return renderPass;
              };

              _proto.createFramebuffer = function createFramebuffer(info) {
                var framebuffer = new WebGLFramebuffer();
                framebuffer.initialize(info);
                return framebuffer;
              };

              _proto.createDescriptorSetLayout = function createDescriptorSetLayout(info) {
                var descriptorSetLayout = new WebGLDescriptorSetLayout();
                descriptorSetLayout.initialize(info);
                return descriptorSetLayout;
              };

              _proto.createPipelineLayout = function createPipelineLayout(info) {
                var pipelineLayout = new WebGLPipelineLayout();
                pipelineLayout.initialize(info);
                return pipelineLayout;
              };

              _proto.createPipelineState = function createPipelineState(info) {
                var pipelineState = new WebGLPipelineState();
                pipelineState.initialize(info);
                return pipelineState;
              };

              _proto.createQueue = function createQueue(info) {
                var queue = new WebGLQueue();
                queue.initialize(info);
                return queue;
              };

              _proto.getSampler = function getSampler(info) {
                var hash = Sampler.computeHash(info);

                if (!this._samplers.has(hash)) {
                  this._samplers.set(hash, new WebGLSampler(info, hash));
                }

                return this._samplers.get(hash);
              };

              _proto.getGeneralBarrier = function getGeneralBarrier(info) {
                var hash = GeneralBarrier.computeHash(info);

                if (!this._generalBarrierss.has(hash)) {
                  this._generalBarrierss.set(hash, new GeneralBarrier(info, hash));
                }

                return this._generalBarrierss.get(hash);
              };

              _proto.getTextureBarrier = function getTextureBarrier(info) {
                var hash = TextureBarrier.computeHash(info);

                if (!this._textureBarriers.has(hash)) {
                  this._textureBarriers.set(hash, new TextureBarrier(info, hash));
                }

                return this._textureBarriers.get(hash);
              };

              _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
                WebGLCmdFuncCopyBuffersToTexture(this, buffers, texture.gpuTexture, regions);
              };

              _proto.copyTextureToBuffers = function copyTextureToBuffers(texture, buffers, regions) {
                WebGLCmdFuncCopyTextureToBuffers(this, texture.gpuTexture, buffers, regions);
              };

              _proto.copyTexImagesToTexture = function copyTexImagesToTexture(texImages, texture, regions) {
                WebGLCmdFuncCopyTexImagesToTexture(this, texImages, texture.gpuTexture, regions);
              };

              _createClass(WebGLDevice, [{
                key: "gl",
                get: function get() {
                  return this._context;
                }
              }, {
                key: "extensions",
                get: function get() {
                  return this._swapchain.extensions;
                }
              }, {
                key: "stateCache",
                get: function get() {
                  return this._swapchain.stateCache;
                }
              }, {
                key: "nullTex2D",
                get: function get() {
                  return this._swapchain.nullTex2D;
                }
              }, {
                key: "nullTexCube",
                get: function get() {
                  return this._swapchain.nullTexCube;
                }
              }, {
                key: "textureExclusive",
                get: function get() {
                  return this._textureExclusive;
                }
              }, {
                key: "bindingMappings",
                get: function get() {
                  return this._bindingMappings;
                }
              }]);

              return WebGLDevice;
            }(Device));

            legacyCC.WebGLDevice = WebGLDevice;

            var WebGL2DescriptorSet = function (_DescriptorSet) {
              _inheritsLoose(WebGL2DescriptorSet, _DescriptorSet);

              function WebGL2DescriptorSet() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _DescriptorSet.call.apply(_DescriptorSet, [this].concat(args)) || this;
                _this._gpuDescriptorSet = null;
                return _this;
              }

              var _proto = WebGL2DescriptorSet.prototype;

              _proto.initialize = function initialize(info) {
                this._layout = info.layout;
                var _gpuDescriptorSetLayo = info.layout.gpuDescriptorSetLayout,
                    bindings = _gpuDescriptorSetLayo.bindings,
                    descriptorIndices = _gpuDescriptorSetLayo.descriptorIndices,
                    descriptorCount = _gpuDescriptorSetLayo.descriptorCount;
                this._buffers = Array(descriptorCount).fill(null);
                this._textures = Array(descriptorCount).fill(null);
                this._samplers = Array(descriptorCount).fill(null);
                var gpuDescriptors = [];
                this._gpuDescriptorSet = {
                  gpuDescriptors: gpuDescriptors,
                  descriptorIndices: descriptorIndices
                };

                for (var i = 0; i < bindings.length; ++i) {
                  var binding = bindings[i];

                  for (var j = 0; j < binding.count; j++) {
                    gpuDescriptors.push({
                      type: binding.descriptorType,
                      gpuBuffer: null,
                      gpuTextureView: null,
                      gpuSampler: null
                    });
                  }
                }
              };

              _proto.destroy = function destroy() {
                this._layout = null;
                this._gpuDescriptorSet = null;
              };

              _proto.update = function update() {
                if (this._isDirty && this._gpuDescriptorSet) {
                  var descriptors = this._gpuDescriptorSet.gpuDescriptors;

                  for (var i = 0; i < descriptors.length; ++i) {
                    if (descriptors[i].type & DESCRIPTOR_BUFFER_TYPE) {
                      if (this._buffers[i]) {
                        descriptors[i].gpuBuffer = this._buffers[i].gpuBuffer;
                      }
                    } else if (descriptors[i].type & DESCRIPTOR_SAMPLER_TYPE) {
                      if (this._textures[i]) {
                        descriptors[i].gpuTextureView = this._textures[i].gpuTextureView;
                      }

                      if (this._samplers[i]) {
                        descriptors[i].gpuSampler = this._samplers[i].gpuSampler;
                      }
                    }
                  }

                  this._isDirty = false;
                }
              };

              _createClass(WebGL2DescriptorSet, [{
                key: "gpuDescriptorSet",
                get: function get() {
                  return this._gpuDescriptorSet;
                }
              }]);

              return WebGL2DescriptorSet;
            }(DescriptorSet);

            var WebGL2EXT;

            (function (WebGL2EXT) {
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
              WebGL2EXT[WebGL2EXT["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ETC2"] = 37493] = "COMPRESSED_SRGB8_ETC2";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37494] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37495] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA8_ETC2_EAC"] = 37496] = "COMPRESSED_RGBA8_ETC2_EAC";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37497] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
              WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
            })(WebGL2EXT || (WebGL2EXT = {}));

            var WebGL2DeviceManager = function () {
              function WebGL2DeviceManager() {}

              WebGL2DeviceManager.setInstance = function setInstance(instance) {
                WebGL2DeviceManager._instance = instance;
              };

              _createClass(WebGL2DeviceManager, null, [{
                key: "instance",
                get: function get() {
                  return WebGL2DeviceManager._instance;
                }
              }]);

              return WebGL2DeviceManager;
            }();
            WebGL2DeviceManager._instance = null;

            var WebGLWraps$1 = [0x2901, 0x8370, 0x812F, 0x812F];

            var _f32v4 = new Float32Array(4);

            function GFXFormatToWebGLType$1(format, gl) {
              switch (format) {
                case Format.R8:
                  return gl.UNSIGNED_BYTE;

                case Format.R8SN:
                  return gl.BYTE;

                case Format.R8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.R8I:
                  return gl.BYTE;

                case Format.R16F:
                  return gl.HALF_FLOAT;

                case Format.R16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.R16I:
                  return gl.SHORT;

                case Format.R32F:
                  return gl.FLOAT;

                case Format.R32UI:
                  return gl.UNSIGNED_INT;

                case Format.R32I:
                  return gl.INT;

                case Format.RG8:
                  return gl.UNSIGNED_BYTE;

                case Format.RG8SN:
                  return gl.BYTE;

                case Format.RG8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.RG8I:
                  return gl.BYTE;

                case Format.RG16F:
                  return gl.HALF_FLOAT;

                case Format.RG16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.RG16I:
                  return gl.SHORT;

                case Format.RG32F:
                  return gl.FLOAT;

                case Format.RG32UI:
                  return gl.UNSIGNED_INT;

                case Format.RG32I:
                  return gl.INT;

                case Format.RGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.SRGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.RGB8SN:
                  return gl.BYTE;

                case Format.RGB8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.RGB8I:
                  return gl.BYTE;

                case Format.RGB16F:
                  return gl.HALF_FLOAT;

                case Format.RGB16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.RGB16I:
                  return gl.SHORT;

                case Format.RGB32F:
                  return gl.FLOAT;

                case Format.RGB32UI:
                  return gl.UNSIGNED_INT;

                case Format.RGB32I:
                  return gl.INT;

                case Format.BGRA8:
                  return gl.UNSIGNED_BYTE;

                case Format.RGBA8:
                  return gl.UNSIGNED_BYTE;

                case Format.SRGB8_A8:
                  return gl.UNSIGNED_BYTE;

                case Format.RGBA8SN:
                  return gl.BYTE;

                case Format.RGBA8UI:
                  return gl.UNSIGNED_BYTE;

                case Format.RGBA8I:
                  return gl.BYTE;

                case Format.RGBA16F:
                  return gl.HALF_FLOAT;

                case Format.RGBA16UI:
                  return gl.UNSIGNED_SHORT;

                case Format.RGBA16I:
                  return gl.SHORT;

                case Format.RGBA32F:
                  return gl.FLOAT;

                case Format.RGBA32UI:
                  return gl.UNSIGNED_INT;

                case Format.RGBA32I:
                  return gl.INT;

                case Format.R5G6B5:
                  return gl.UNSIGNED_SHORT_5_6_5;

                case Format.R11G11B10F:
                  return gl.UNSIGNED_INT_10F_11F_11F_REV;

                case Format.RGB5A1:
                  return gl.UNSIGNED_SHORT_5_5_5_1;

                case Format.RGBA4:
                  return gl.UNSIGNED_SHORT_4_4_4_4;

                case Format.RGB10A2:
                  return gl.UNSIGNED_INT_2_10_10_10_REV;

                case Format.RGB10A2UI:
                  return gl.UNSIGNED_INT_2_10_10_10_REV;

                case Format.RGB9E5:
                  return gl.FLOAT;

                case Format.DEPTH:
                  return gl.FLOAT;

                case Format.DEPTH_STENCIL:
                  return gl.UNSIGNED_INT_24_8;

                case Format.BC1:
                  return gl.UNSIGNED_BYTE;

                case Format.BC1_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.BC2:
                  return gl.UNSIGNED_BYTE;

                case Format.BC2_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.BC3:
                  return gl.UNSIGNED_BYTE;

                case Format.BC3_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.BC4:
                  return gl.UNSIGNED_BYTE;

                case Format.BC4_SNORM:
                  return gl.BYTE;

                case Format.BC5:
                  return gl.UNSIGNED_BYTE;

                case Format.BC5_SNORM:
                  return gl.BYTE;

                case Format.BC6H_SF16:
                  return gl.FLOAT;

                case Format.BC6H_UF16:
                  return gl.FLOAT;

                case Format.BC7:
                  return gl.UNSIGNED_BYTE;

                case Format.BC7_SRGB:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC_RGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_RGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_SRGB8:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_RGB8_A1:
                  return gl.UNSIGNED_BYTE;

                case Format.ETC2_SRGB8_A1:
                  return gl.UNSIGNED_BYTE;

                case Format.EAC_R11:
                  return gl.UNSIGNED_BYTE;

                case Format.EAC_R11SN:
                  return gl.BYTE;

                case Format.EAC_RG11:
                  return gl.UNSIGNED_BYTE;

                case Format.EAC_RG11SN:
                  return gl.BYTE;

                case Format.PVRTC_RGB2:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC_RGBA2:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC_RGB4:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC_RGBA4:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC2_2BPP:
                  return gl.UNSIGNED_BYTE;

                case Format.PVRTC2_4BPP:
                  return gl.UNSIGNED_BYTE;

                case Format.ASTC_RGBA_4X4:
                case Format.ASTC_RGBA_5X4:
                case Format.ASTC_RGBA_5X5:
                case Format.ASTC_RGBA_6X5:
                case Format.ASTC_RGBA_6X6:
                case Format.ASTC_RGBA_8X5:
                case Format.ASTC_RGBA_8X6:
                case Format.ASTC_RGBA_8X8:
                case Format.ASTC_RGBA_10X5:
                case Format.ASTC_RGBA_10X6:
                case Format.ASTC_RGBA_10X8:
                case Format.ASTC_RGBA_10X10:
                case Format.ASTC_RGBA_12X10:
                case Format.ASTC_RGBA_12X12:
                case Format.ASTC_SRGBA_4X4:
                case Format.ASTC_SRGBA_5X4:
                case Format.ASTC_SRGBA_5X5:
                case Format.ASTC_SRGBA_6X5:
                case Format.ASTC_SRGBA_6X6:
                case Format.ASTC_SRGBA_8X5:
                case Format.ASTC_SRGBA_8X6:
                case Format.ASTC_SRGBA_8X8:
                case Format.ASTC_SRGBA_10X5:
                case Format.ASTC_SRGBA_10X6:
                case Format.ASTC_SRGBA_10X8:
                case Format.ASTC_SRGBA_10X10:
                case Format.ASTC_SRGBA_12X10:
                case Format.ASTC_SRGBA_12X12:
                  return gl.UNSIGNED_BYTE;

                default:
                  {
                    return gl.UNSIGNED_BYTE;
                  }
              }
            }
            function GFXFormatToWebGLInternalFormat$1(format, gl) {
              switch (format) {
                case Format.A8:
                  return gl.ALPHA;

                case Format.L8:
                  return gl.LUMINANCE;

                case Format.LA8:
                  return gl.LUMINANCE_ALPHA;

                case Format.R8:
                  return gl.R8;

                case Format.R8SN:
                  return gl.R8_SNORM;

                case Format.R8UI:
                  return gl.R8UI;

                case Format.R8I:
                  return gl.R8I;

                case Format.RG8:
                  return gl.RG8;

                case Format.RG8SN:
                  return gl.RG8_SNORM;

                case Format.RG8UI:
                  return gl.RG8UI;

                case Format.RG8I:
                  return gl.RG8I;

                case Format.RGB8:
                  return gl.RGB8;

                case Format.RGB8SN:
                  return gl.RGB8_SNORM;

                case Format.RGB8UI:
                  return gl.RGB8UI;

                case Format.RGB8I:
                  return gl.RGB8I;

                case Format.BGRA8:
                  return gl.RGBA8;

                case Format.RGBA8:
                  return gl.RGBA8;

                case Format.RGBA8SN:
                  return gl.RGBA8_SNORM;

                case Format.RGBA8UI:
                  return gl.RGBA8UI;

                case Format.RGBA8I:
                  return gl.RGBA8I;

                case Format.R16I:
                  return gl.R16I;

                case Format.R16UI:
                  return gl.R16UI;

                case Format.R16F:
                  return gl.R16F;

                case Format.RG16I:
                  return gl.RG16I;

                case Format.RG16UI:
                  return gl.RG16UI;

                case Format.RG16F:
                  return gl.RG16F;

                case Format.RGB16I:
                  return gl.RGB16I;

                case Format.RGB16UI:
                  return gl.RGB16UI;

                case Format.RGB16F:
                  return gl.RGB16F;

                case Format.RGBA16I:
                  return gl.RGBA16I;

                case Format.RGBA16UI:
                  return gl.RGBA16UI;

                case Format.RGBA16F:
                  return gl.RGBA16F;

                case Format.R32I:
                  return gl.R32I;

                case Format.R32UI:
                  return gl.R32UI;

                case Format.R32F:
                  return gl.R32F;

                case Format.RG32I:
                  return gl.RG32I;

                case Format.RG32UI:
                  return gl.RG32UI;

                case Format.RG32F:
                  return gl.RG32F;

                case Format.RGB32I:
                  return gl.RGB32I;

                case Format.RGB32UI:
                  return gl.RGB32UI;

                case Format.RGB32F:
                  return gl.RGB32F;

                case Format.RGBA32I:
                  return gl.RGBA32I;

                case Format.RGBA32UI:
                  return gl.RGBA32UI;

                case Format.RGBA32F:
                  return gl.RGBA32F;

                case Format.R5G6B5:
                  return gl.RGB565;

                case Format.RGB5A1:
                  return gl.RGB5_A1;

                case Format.RGBA4:
                  return gl.RGBA4;

                case Format.SRGB8:
                  return gl.SRGB8;

                case Format.SRGB8_A8:
                  return gl.SRGB8_ALPHA8;

                case Format.RGB10A2:
                  return gl.RGB10_A2;

                case Format.RGB10A2UI:
                  return gl.RGB10_A2UI;

                case Format.R11G11B10F:
                  return gl.R11F_G11F_B10F;

                case Format.DEPTH:
                  return gl.DEPTH_COMPONENT32F;

                case Format.DEPTH_STENCIL:
                  return gl.DEPTH24_STENCIL8;

                case Format.BC1:
                  return WebGL2EXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

                case Format.BC1_ALPHA:
                  return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

                case Format.BC1_SRGB:
                  return WebGL2EXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

                case Format.BC1_SRGB_ALPHA:
                  return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

                case Format.BC2:
                  return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

                case Format.BC2_SRGB:
                  return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

                case Format.BC3:
                  return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

                case Format.BC3_SRGB:
                  return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

                case Format.ETC_RGB8:
                  return WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL;

                case Format.ETC2_RGB8:
                  return WebGL2EXT.COMPRESSED_RGB8_ETC2;

                case Format.ETC2_SRGB8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ETC2;

                case Format.ETC2_RGB8_A1:
                  return WebGL2EXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

                case Format.ETC2_SRGB8_A1:
                  return WebGL2EXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

                case Format.ETC2_RGBA8:
                  return WebGL2EXT.COMPRESSED_RGBA8_ETC2_EAC;

                case Format.ETC2_SRGB8_A8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

                case Format.EAC_R11:
                  return WebGL2EXT.COMPRESSED_R11_EAC;

                case Format.EAC_R11SN:
                  return WebGL2EXT.COMPRESSED_SIGNED_R11_EAC;

                case Format.EAC_RG11:
                  return WebGL2EXT.COMPRESSED_RG11_EAC;

                case Format.EAC_RG11SN:
                  return WebGL2EXT.COMPRESSED_SIGNED_RG11_EAC;

                case Format.PVRTC_RGB2:
                  return WebGL2EXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

                case Format.PVRTC_RGBA2:
                  return WebGL2EXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

                case Format.PVRTC_RGB4:
                  return WebGL2EXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

                case Format.PVRTC_RGBA4:
                  return WebGL2EXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

                case Format.ASTC_RGBA_4X4:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_4x4_KHR;

                case Format.ASTC_RGBA_5X4:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x4_KHR;

                case Format.ASTC_RGBA_5X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x5_KHR;

                case Format.ASTC_RGBA_6X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x5_KHR;

                case Format.ASTC_RGBA_6X6:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x6_KHR;

                case Format.ASTC_RGBA_8X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x5_KHR;

                case Format.ASTC_RGBA_8X6:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x6_KHR;

                case Format.ASTC_RGBA_8X8:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x8_KHR;

                case Format.ASTC_RGBA_10X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x5_KHR;

                case Format.ASTC_RGBA_10X6:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x6_KHR;

                case Format.ASTC_RGBA_10X8:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x8_KHR;

                case Format.ASTC_RGBA_10X10:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x10_KHR;

                case Format.ASTC_RGBA_12X10:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x10_KHR;

                case Format.ASTC_RGBA_12X12:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x12_KHR;

                case Format.ASTC_SRGBA_4X4:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;

                case Format.ASTC_SRGBA_5X4:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;

                case Format.ASTC_SRGBA_5X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;

                case Format.ASTC_SRGBA_6X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;

                case Format.ASTC_SRGBA_6X6:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;

                case Format.ASTC_SRGBA_8X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;

                case Format.ASTC_SRGBA_8X6:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;

                case Format.ASTC_SRGBA_8X8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;

                case Format.ASTC_SRGBA_10X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;

                case Format.ASTC_SRGBA_10X6:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;

                case Format.ASTC_SRGBA_10X8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;

                case Format.ASTC_SRGBA_10X10:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;

                case Format.ASTC_SRGBA_12X10:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;

                case Format.ASTC_SRGBA_12X12:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;

                default:
                  {
                    console.error('Unsupported Format, convert to WebGL internal format failed.');
                    return gl.RGBA;
                  }
              }
            }
            function GFXFormatToWebGLFormat$1(format, gl) {
              switch (format) {
                case Format.A8:
                  return gl.ALPHA;

                case Format.L8:
                  return gl.LUMINANCE;

                case Format.LA8:
                  return gl.LUMINANCE_ALPHA;

                case Format.R8:
                case Format.R8SN:
                  return gl.RED;

                case Format.R8UI:
                case Format.R8I:
                  return gl.RED;

                case Format.RG8:
                case Format.RG8SN:
                case Format.RG8UI:
                case Format.RG8I:
                  return gl.RG;

                case Format.RGB8:
                case Format.RGB8SN:
                case Format.RGB8UI:
                case Format.RGB8I:
                  return gl.RGB;

                case Format.BGRA8:
                case Format.RGBA8:
                case Format.RGBA8SN:
                case Format.RGBA8UI:
                case Format.RGBA8I:
                  return gl.RGBA;

                case Format.R16UI:
                case Format.R16I:
                case Format.R16F:
                  return gl.RED;

                case Format.RG16UI:
                case Format.RG16I:
                case Format.RG16F:
                  return gl.RG;

                case Format.RGB16UI:
                case Format.RGB16I:
                case Format.RGB16F:
                  return gl.RGB;

                case Format.RGBA16UI:
                case Format.RGBA16I:
                case Format.RGBA16F:
                  return gl.RGBA;

                case Format.R32UI:
                case Format.R32I:
                case Format.R32F:
                  return gl.RED;

                case Format.RG32UI:
                case Format.RG32I:
                case Format.RG32F:
                  return gl.RG;

                case Format.RGB32UI:
                case Format.RGB32I:
                case Format.RGB32F:
                  return gl.RGB;

                case Format.RGBA32UI:
                case Format.RGBA32I:
                case Format.RGBA32F:
                  return gl.RGBA;

                case Format.RGB10A2:
                  return gl.RGBA;

                case Format.R11G11B10F:
                  return gl.RGB;

                case Format.R5G6B5:
                  return gl.RGB;

                case Format.RGB5A1:
                  return gl.RGBA;

                case Format.RGBA4:
                  return gl.RGBA;

                case Format.SRGB8:
                  return gl.RGB;

                case Format.SRGB8_A8:
                  return gl.RGBA;

                case Format.DEPTH:
                  return gl.DEPTH_COMPONENT;

                case Format.DEPTH_STENCIL:
                  return gl.DEPTH_STENCIL;

                case Format.BC1:
                  return WebGL2EXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

                case Format.BC1_ALPHA:
                  return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

                case Format.BC1_SRGB:
                  return WebGL2EXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

                case Format.BC1_SRGB_ALPHA:
                  return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

                case Format.BC2:
                  return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

                case Format.BC2_SRGB:
                  return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

                case Format.BC3:
                  return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

                case Format.BC3_SRGB:
                  return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

                case Format.ETC_RGB8:
                  return WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL;

                case Format.ETC2_RGB8:
                  return WebGL2EXT.COMPRESSED_RGB8_ETC2;

                case Format.ETC2_SRGB8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ETC2;

                case Format.ETC2_RGB8_A1:
                  return WebGL2EXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

                case Format.ETC2_SRGB8_A1:
                  return WebGL2EXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

                case Format.ETC2_RGBA8:
                  return WebGL2EXT.COMPRESSED_RGBA8_ETC2_EAC;

                case Format.ETC2_SRGB8_A8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

                case Format.EAC_R11:
                  return WebGL2EXT.COMPRESSED_R11_EAC;

                case Format.EAC_R11SN:
                  return WebGL2EXT.COMPRESSED_SIGNED_R11_EAC;

                case Format.EAC_RG11:
                  return WebGL2EXT.COMPRESSED_RG11_EAC;

                case Format.EAC_RG11SN:
                  return WebGL2EXT.COMPRESSED_SIGNED_RG11_EAC;

                case Format.PVRTC_RGB2:
                  return WebGL2EXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

                case Format.PVRTC_RGBA2:
                  return WebGL2EXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

                case Format.PVRTC_RGB4:
                  return WebGL2EXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

                case Format.PVRTC_RGBA4:
                  return WebGL2EXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

                case Format.ASTC_RGBA_4X4:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_4x4_KHR;

                case Format.ASTC_RGBA_5X4:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x4_KHR;

                case Format.ASTC_RGBA_5X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x5_KHR;

                case Format.ASTC_RGBA_6X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x5_KHR;

                case Format.ASTC_RGBA_6X6:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x6_KHR;

                case Format.ASTC_RGBA_8X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x5_KHR;

                case Format.ASTC_RGBA_8X6:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x6_KHR;

                case Format.ASTC_RGBA_8X8:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x8_KHR;

                case Format.ASTC_RGBA_10X5:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x5_KHR;

                case Format.ASTC_RGBA_10X6:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x6_KHR;

                case Format.ASTC_RGBA_10X8:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x8_KHR;

                case Format.ASTC_RGBA_10X10:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x10_KHR;

                case Format.ASTC_RGBA_12X10:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x10_KHR;

                case Format.ASTC_RGBA_12X12:
                  return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x12_KHR;

                case Format.ASTC_SRGBA_4X4:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;

                case Format.ASTC_SRGBA_5X4:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;

                case Format.ASTC_SRGBA_5X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;

                case Format.ASTC_SRGBA_6X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;

                case Format.ASTC_SRGBA_6X6:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;

                case Format.ASTC_SRGBA_8X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;

                case Format.ASTC_SRGBA_8X6:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;

                case Format.ASTC_SRGBA_8X8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;

                case Format.ASTC_SRGBA_10X5:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;

                case Format.ASTC_SRGBA_10X6:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;

                case Format.ASTC_SRGBA_10X8:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;

                case Format.ASTC_SRGBA_10X10:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;

                case Format.ASTC_SRGBA_12X10:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;

                case Format.ASTC_SRGBA_12X12:
                  return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;

                default:
                  {
                    console.error('Unsupported Format, convert to WebGL format failed.');
                    return gl.RGBA;
                  }
              }
            }

            function GFXTypeToWebGLType$1(type, gl) {
              switch (type) {
                case Type$1.BOOL:
                  return gl.BOOL;

                case Type$1.BOOL2:
                  return gl.BOOL_VEC2;

                case Type$1.BOOL3:
                  return gl.BOOL_VEC3;

                case Type$1.BOOL4:
                  return gl.BOOL_VEC4;

                case Type$1.INT:
                  return gl.INT;

                case Type$1.INT2:
                  return gl.INT_VEC2;

                case Type$1.INT3:
                  return gl.INT_VEC3;

                case Type$1.INT4:
                  return gl.INT_VEC4;

                case Type$1.UINT:
                  return gl.UNSIGNED_INT;

                case Type$1.FLOAT:
                  return gl.FLOAT;

                case Type$1.FLOAT2:
                  return gl.FLOAT_VEC2;

                case Type$1.FLOAT3:
                  return gl.FLOAT_VEC3;

                case Type$1.FLOAT4:
                  return gl.FLOAT_VEC4;

                case Type$1.MAT2:
                  return gl.FLOAT_MAT2;

                case Type$1.MAT2X3:
                  return gl.FLOAT_MAT2x3;

                case Type$1.MAT2X4:
                  return gl.FLOAT_MAT2x4;

                case Type$1.MAT3X2:
                  return gl.FLOAT_MAT3x2;

                case Type$1.MAT3:
                  return gl.FLOAT_MAT3;

                case Type$1.MAT3X4:
                  return gl.FLOAT_MAT3x4;

                case Type$1.MAT4X2:
                  return gl.FLOAT_MAT4x2;

                case Type$1.MAT4X3:
                  return gl.FLOAT_MAT4x3;

                case Type$1.MAT4:
                  return gl.FLOAT_MAT4;

                case Type$1.SAMPLER2D:
                  return gl.SAMPLER_2D;

                case Type$1.SAMPLER2D_ARRAY:
                  return gl.SAMPLER_2D_ARRAY;

                case Type$1.SAMPLER3D:
                  return gl.SAMPLER_3D;

                case Type$1.SAMPLER_CUBE:
                  return gl.SAMPLER_CUBE;

                default:
                  {
                    console.error('Unsupported GLType, convert to GL type failed.');
                    return Type$1.UNKNOWN;
                  }
              }
            }

            function WebGLTypeToGFXType$1(glType, gl) {
              switch (glType) {
                case gl.BOOL:
                  return Type$1.BOOL;

                case gl.BOOL_VEC2:
                  return Type$1.BOOL2;

                case gl.BOOL_VEC3:
                  return Type$1.BOOL3;

                case gl.BOOL_VEC4:
                  return Type$1.BOOL4;

                case gl.INT:
                  return Type$1.INT;

                case gl.INT_VEC2:
                  return Type$1.INT2;

                case gl.INT_VEC3:
                  return Type$1.INT3;

                case gl.INT_VEC4:
                  return Type$1.INT4;

                case gl.UNSIGNED_INT:
                  return Type$1.UINT;

                case gl.UNSIGNED_INT_VEC2:
                  return Type$1.UINT2;

                case gl.UNSIGNED_INT_VEC3:
                  return Type$1.UINT3;

                case gl.UNSIGNED_INT_VEC4:
                  return Type$1.UINT4;

                case gl.FLOAT:
                  return Type$1.FLOAT;

                case gl.FLOAT_VEC2:
                  return Type$1.FLOAT2;

                case gl.FLOAT_VEC3:
                  return Type$1.FLOAT3;

                case gl.FLOAT_VEC4:
                  return Type$1.FLOAT4;

                case gl.FLOAT_MAT2:
                  return Type$1.MAT2;

                case gl.FLOAT_MAT2x3:
                  return Type$1.MAT2X3;

                case gl.FLOAT_MAT2x4:
                  return Type$1.MAT2X4;

                case gl.FLOAT_MAT3x2:
                  return Type$1.MAT3X2;

                case gl.FLOAT_MAT3:
                  return Type$1.MAT3;

                case gl.FLOAT_MAT3x4:
                  return Type$1.MAT3X4;

                case gl.FLOAT_MAT4x2:
                  return Type$1.MAT4X2;

                case gl.FLOAT_MAT4x3:
                  return Type$1.MAT4X3;

                case gl.FLOAT_MAT4:
                  return Type$1.MAT4;

                case gl.SAMPLER_2D:
                  return Type$1.SAMPLER2D;

                case gl.SAMPLER_2D_ARRAY:
                  return Type$1.SAMPLER2D_ARRAY;

                case gl.SAMPLER_3D:
                  return Type$1.SAMPLER3D;

                case gl.SAMPLER_CUBE:
                  return Type$1.SAMPLER_CUBE;

                default:
                  {
                    console.error('Unsupported GLType, convert to Type failed.');
                    return Type$1.UNKNOWN;
                  }
              }
            }

            function WebGLGetTypeSize$1(glType, gl) {
              switch (glType) {
                case gl.BOOL:
                  return 4;

                case gl.BOOL_VEC2:
                  return 8;

                case gl.BOOL_VEC3:
                  return 12;

                case gl.BOOL_VEC4:
                  return 16;

                case gl.INT:
                  return 4;

                case gl.INT_VEC2:
                  return 8;

                case gl.INT_VEC3:
                  return 12;

                case gl.INT_VEC4:
                  return 16;

                case gl.UNSIGNED_INT:
                  return 4;

                case gl.UNSIGNED_INT_VEC2:
                  return 8;

                case gl.UNSIGNED_INT_VEC3:
                  return 12;

                case gl.UNSIGNED_INT_VEC4:
                  return 16;

                case gl.FLOAT:
                  return 4;

                case gl.FLOAT_VEC2:
                  return 8;

                case gl.FLOAT_VEC3:
                  return 12;

                case gl.FLOAT_VEC4:
                  return 16;

                case gl.FLOAT_MAT2:
                  return 16;

                case gl.FLOAT_MAT2x3:
                  return 24;

                case gl.FLOAT_MAT2x4:
                  return 32;

                case gl.FLOAT_MAT3x2:
                  return 24;

                case gl.FLOAT_MAT3:
                  return 36;

                case gl.FLOAT_MAT3x4:
                  return 48;

                case gl.FLOAT_MAT4x2:
                  return 32;

                case gl.FLOAT_MAT4x3:
                  return 48;

                case gl.FLOAT_MAT4:
                  return 64;

                case gl.SAMPLER_2D:
                  return 4;

                case gl.SAMPLER_2D_ARRAY:
                  return 4;

                case gl.SAMPLER_2D_ARRAY_SHADOW:
                  return 4;

                case gl.SAMPLER_3D:
                  return 4;

                case gl.SAMPLER_CUBE:
                  return 4;

                case gl.INT_SAMPLER_2D:
                  return 4;

                case gl.INT_SAMPLER_2D_ARRAY:
                  return 4;

                case gl.INT_SAMPLER_3D:
                  return 4;

                case gl.INT_SAMPLER_CUBE:
                  return 4;

                case gl.UNSIGNED_INT_SAMPLER_2D:
                  return 4;

                case gl.UNSIGNED_INT_SAMPLER_2D_ARRAY:
                  return 4;

                case gl.UNSIGNED_INT_SAMPLER_3D:
                  return 4;

                case gl.UNSIGNED_INT_SAMPLER_CUBE:
                  return 4;

                default:
                  {
                    console.error('Unsupported GLType, get type failed.');
                    return 0;
                  }
              }
            }

            function WebGLGetComponentCount$1(glType, gl) {
              switch (glType) {
                case gl.FLOAT_MAT2:
                  return 2;

                case gl.FLOAT_MAT2x3:
                  return 2;

                case gl.FLOAT_MAT2x4:
                  return 2;

                case gl.FLOAT_MAT3x2:
                  return 3;

                case gl.FLOAT_MAT3:
                  return 3;

                case gl.FLOAT_MAT3x4:
                  return 3;

                case gl.FLOAT_MAT4x2:
                  return 4;

                case gl.FLOAT_MAT4x3:
                  return 4;

                case gl.FLOAT_MAT4:
                  return 4;

                default:
                  {
                    return 1;
                  }
              }
            }

            var WebGLCmpFuncs$1 = [0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207];
            var WebGLStencilOps$1 = [0x0000, 0x1E00, 0x1E01, 0x1E02, 0x1E03, 0x150A, 0x8507, 0x8508];
            var WebGLBlendOps$1 = [0x8006, 0x800A, 0x800B, 0x8007, 0x8008];
            var WebGLBlendFactors$1 = [0x0000, 0x0001, 0x0302, 0x0304, 0x0303, 0x0305, 0x0300, 0x0306, 0x0301, 0x0307, 0x0308, 0x8001, 0x8002, 0x8003, 0x8004];
            var WebGL2Cmd;

            (function (WebGL2Cmd) {
              WebGL2Cmd[WebGL2Cmd["BEGIN_RENDER_PASS"] = 0] = "BEGIN_RENDER_PASS";
              WebGL2Cmd[WebGL2Cmd["END_RENDER_PASS"] = 1] = "END_RENDER_PASS";
              WebGL2Cmd[WebGL2Cmd["BIND_STATES"] = 2] = "BIND_STATES";
              WebGL2Cmd[WebGL2Cmd["DRAW"] = 3] = "DRAW";
              WebGL2Cmd[WebGL2Cmd["UPDATE_BUFFER"] = 4] = "UPDATE_BUFFER";
              WebGL2Cmd[WebGL2Cmd["COPY_BUFFER_TO_TEXTURE"] = 5] = "COPY_BUFFER_TO_TEXTURE";
              WebGL2Cmd[WebGL2Cmd["COUNT"] = 6] = "COUNT";
            })(WebGL2Cmd || (WebGL2Cmd = {}));

            var WebGL2CmdObject = function WebGL2CmdObject(type) {
              this.cmdType = void 0;
              this.refCount = 0;
              this.cmdType = type;
            };
            var WebGL2CmdBeginRenderPass = function (_WebGL2CmdObject) {
              _inheritsLoose(WebGL2CmdBeginRenderPass, _WebGL2CmdObject);

              function WebGL2CmdBeginRenderPass() {
                var _this;

                _this = _WebGL2CmdObject.call(this, WebGL2Cmd.BEGIN_RENDER_PASS) || this;
                _this.gpuRenderPass = null;
                _this.gpuFramebuffer = null;
                _this.renderArea = new Rect();
                _this.clearColors = [];
                _this.clearDepth = 1.0;
                _this.clearStencil = 0;
                return _this;
              }

              var _proto = WebGL2CmdBeginRenderPass.prototype;

              _proto.clear = function clear() {
                this.gpuFramebuffer = null;
                this.clearColors.length = 0;
              };

              return WebGL2CmdBeginRenderPass;
            }(WebGL2CmdObject);
            var WebGL2CmdBindStates = function (_WebGL2CmdObject2) {
              _inheritsLoose(WebGL2CmdBindStates, _WebGL2CmdObject2);

              function WebGL2CmdBindStates() {
                var _this2;

                _this2 = _WebGL2CmdObject2.call(this, WebGL2Cmd.BIND_STATES) || this;
                _this2.gpuPipelineState = null;
                _this2.gpuInputAssembler = null;
                _this2.gpuDescriptorSets = [];
                _this2.dynamicOffsets = [];
                _this2.dynamicStates = new DynamicStates();
                return _this2;
              }

              var _proto2 = WebGL2CmdBindStates.prototype;

              _proto2.clear = function clear() {
                this.gpuPipelineState = null;
                this.gpuInputAssembler = null;
                this.gpuDescriptorSets.length = 0;
                this.dynamicOffsets.length = 0;
              };

              return WebGL2CmdBindStates;
            }(WebGL2CmdObject);
            var WebGL2CmdDraw = function (_WebGL2CmdObject3) {
              _inheritsLoose(WebGL2CmdDraw, _WebGL2CmdObject3);

              function WebGL2CmdDraw() {
                var _this3;

                _this3 = _WebGL2CmdObject3.call(this, WebGL2Cmd.DRAW) || this;
                _this3.drawInfo = new DrawInfo();
                return _this3;
              }

              var _proto3 = WebGL2CmdDraw.prototype;

              _proto3.clear = function clear() {};

              return WebGL2CmdDraw;
            }(WebGL2CmdObject);
            var WebGL2CmdUpdateBuffer = function (_WebGL2CmdObject4) {
              _inheritsLoose(WebGL2CmdUpdateBuffer, _WebGL2CmdObject4);

              function WebGL2CmdUpdateBuffer() {
                var _this4;

                _this4 = _WebGL2CmdObject4.call(this, WebGL2Cmd.UPDATE_BUFFER) || this;
                _this4.gpuBuffer = null;
                _this4.buffer = null;
                _this4.offset = 0;
                _this4.size = 0;
                return _this4;
              }

              var _proto4 = WebGL2CmdUpdateBuffer.prototype;

              _proto4.clear = function clear() {
                this.gpuBuffer = null;
                this.buffer = null;
              };

              return WebGL2CmdUpdateBuffer;
            }(WebGL2CmdObject);
            var WebGL2CmdCopyBufferToTexture = function (_WebGL2CmdObject5) {
              _inheritsLoose(WebGL2CmdCopyBufferToTexture, _WebGL2CmdObject5);

              function WebGL2CmdCopyBufferToTexture() {
                var _this5;

                _this5 = _WebGL2CmdObject5.call(this, WebGL2Cmd.COPY_BUFFER_TO_TEXTURE) || this;
                _this5.gpuTexture = null;
                _this5.buffers = [];
                _this5.regions = [];
                return _this5;
              }

              var _proto5 = WebGL2CmdCopyBufferToTexture.prototype;

              _proto5.clear = function clear() {
                this.gpuTexture = null;
                this.buffers.length = 0;
                this.regions.length = 0;
              };

              return WebGL2CmdCopyBufferToTexture;
            }(WebGL2CmdObject);
            var WebGL2CmdPackage = function () {
              function WebGL2CmdPackage() {
                this.cmds = new CachedArray(1);
                this.beginRenderPassCmds = new CachedArray(1);
                this.bindStatesCmds = new CachedArray(1);
                this.drawCmds = new CachedArray(1);
                this.updateBufferCmds = new CachedArray(1);
                this.copyBufferToTextureCmds = new CachedArray(1);
              }

              var _proto6 = WebGL2CmdPackage.prototype;

              _proto6.clearCmds = function clearCmds(allocator) {
                if (this.beginRenderPassCmds.length) {
                  allocator.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds);
                  this.beginRenderPassCmds.clear();
                }

                if (this.bindStatesCmds.length) {
                  allocator.bindStatesCmdPool.freeCmds(this.bindStatesCmds);
                  this.bindStatesCmds.clear();
                }

                if (this.drawCmds.length) {
                  allocator.drawCmdPool.freeCmds(this.drawCmds);
                  this.drawCmds.clear();
                }

                if (this.updateBufferCmds.length) {
                  allocator.updateBufferCmdPool.freeCmds(this.updateBufferCmds);
                  this.updateBufferCmds.clear();
                }

                if (this.copyBufferToTextureCmds.length) {
                  allocator.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds);
                  this.copyBufferToTextureCmds.clear();
                }

                this.cmds.clear();
              };

              return WebGL2CmdPackage;
            }();
            function WebGL2CmdFuncCreateBuffer(device, gpuBuffer) {
              var gl = device.gl;
              var cache = device.stateCache;
              var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

              if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
                gpuBuffer.glTarget = gl.ARRAY_BUFFER;
                var glBuffer = gl.createBuffer();

                if (glBuffer) {
                  gpuBuffer.glBuffer = glBuffer;

                  if (gpuBuffer.size > 0) {
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        gl.bindVertexArray(null);
                        cache.glVAO = null;
                      }
                    }

                    gfxStateCache$1.gpuInputAssembler = null;

                    if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
                      gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                      device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
                    }

                    gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    device.stateCache.glArrayBuffer = null;
                  }
                }
              } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
                gpuBuffer.glTarget = gl.ELEMENT_ARRAY_BUFFER;

                var _glBuffer = gl.createBuffer();

                if (_glBuffer) {
                  gpuBuffer.glBuffer = _glBuffer;

                  if (gpuBuffer.size > 0) {
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        gl.bindVertexArray(null);
                        cache.glVAO = null;
                      }
                    }

                    gfxStateCache$1.gpuInputAssembler = null;

                    if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                      device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
                    }

                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    device.stateCache.glElementArrayBuffer = null;
                  }
                }
              } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
                gpuBuffer.glTarget = gl.UNIFORM_BUFFER;

                var _glBuffer2 = gl.createBuffer();

                if (_glBuffer2 && gpuBuffer.size > 0) {
                  gpuBuffer.glBuffer = _glBuffer2;

                  if (device.stateCache.glUniformBuffer !== gpuBuffer.glBuffer) {
                    gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
                    device.stateCache.glUniformBuffer = gpuBuffer.glBuffer;
                  }

                  gl.bufferData(gl.UNIFORM_BUFFER, gpuBuffer.size, glUsage);
                  gl.bindBuffer(gl.UNIFORM_BUFFER, null);
                  device.stateCache.glUniformBuffer = null;
                }
              } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
                gpuBuffer.glTarget = gl.NONE;
              } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST) {
                gpuBuffer.glTarget = gl.NONE;
              } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
                gpuBuffer.glTarget = gl.NONE;
              } else {
                console.error('Unsupported BufferType, create buffer failed.');
                gpuBuffer.glTarget = gl.NONE;
              }
            }
            function WebGL2CmdFuncDestroyBuffer(device, gpuBuffer) {
              var gl = device.gl;
              var cache = device.stateCache;

              if (gpuBuffer.glBuffer) {
                switch (gpuBuffer.glTarget) {
                  case gl.ARRAY_BUFFER:
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        gl.bindVertexArray(null);
                        device.stateCache.glVAO = null;
                      }
                    }

                    gfxStateCache$1.gpuInputAssembler = null;
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    device.stateCache.glArrayBuffer = null;
                    break;

                  case gl.ELEMENT_ARRAY_BUFFER:
                    if (device.extensions.useVAO) {
                      if (cache.glVAO) {
                        gl.bindVertexArray(null);
                        device.stateCache.glVAO = null;
                      }
                    }

                    gfxStateCache$1.gpuInputAssembler = null;
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    device.stateCache.glElementArrayBuffer = null;
                    break;

                  case gl.UNIFORM_BUFFER:
                    gl.bindBuffer(gl.UNIFORM_BUFFER, null);
                    device.stateCache.glUniformBuffer = null;
                    break;
                }

                gl.deleteBuffer(gpuBuffer.glBuffer);
                gpuBuffer.glBuffer = null;
              }
            }
            function WebGL2CmdFuncResizeBuffer(device, gpuBuffer) {
              var gl = device.gl;
              var cache = device.stateCache;
              var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

              if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    gl.bindVertexArray(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache$1.gpuInputAssembler = null;

                if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                }

                if (gpuBuffer.buffer) {
                  gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
                } else {
                  gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
                }

                gl.bindBuffer(gl.ARRAY_BUFFER, null);
                cache.glArrayBuffer = null;
              } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    gl.bindVertexArray(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache$1.gpuInputAssembler = null;

                if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                }

                if (gpuBuffer.buffer) {
                  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
                } else {
                  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
                }

                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                device.stateCache.glElementArrayBuffer = null;
              } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
                if (device.stateCache.glUniformBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
                }

                gl.bufferData(gl.UNIFORM_BUFFER, gpuBuffer.size, glUsage);
                gl.bindBuffer(gl.UNIFORM_BUFFER, null);
                device.stateCache.glUniformBuffer = null;
              } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT || gpuBuffer.usage & BufferUsageBit.TRANSFER_DST || gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
                gpuBuffer.glTarget = gl.NONE;
              } else {
                console.error('Unsupported BufferType, create buffer failed.');
                gpuBuffer.glTarget = gl.NONE;
              }
            }
            function WebGL2CmdFuncUpdateBuffer(device, gpuBuffer, buffer, offset, size) {
              if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
                gpuBuffer.indirects.clearDraws();
                var drawInfos = buffer.drawInfos;

                for (var i = 0; i < drawInfos.length; ++i) {
                  gpuBuffer.indirects.setDrawInfo(offset + i, drawInfos[i]);
                }
              } else {
                var buff = buffer;
                var gl = device.gl;
                var cache = device.stateCache;

                switch (gpuBuffer.glTarget) {
                  case gl.ARRAY_BUFFER:
                    {
                      if (device.extensions.useVAO) {
                        if (cache.glVAO) {
                          gl.bindVertexArray(null);
                          cache.glVAO = null;
                        }
                      }

                      gfxStateCache$1.gpuInputAssembler = null;

                      if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {
                        gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                        cache.glArrayBuffer = gpuBuffer.glBuffer;
                      }

                      if (size === buff.byteLength) {
                        gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
                      } else {
                        gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
                      }

                      break;
                    }

                  case gl.ELEMENT_ARRAY_BUFFER:
                    {
                      if (device.extensions.useVAO) {
                        if (cache.glVAO) {
                          gl.bindVertexArray(null);
                          cache.glVAO = null;
                        }
                      }

                      gfxStateCache$1.gpuInputAssembler = null;

                      if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                        cache.glElementArrayBuffer = gpuBuffer.glBuffer;
                      }

                      if (size === buff.byteLength) {
                        gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
                      } else {
                        gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
                      }

                      break;
                    }

                  case gl.UNIFORM_BUFFER:
                    {
                      if (cache.glUniformBuffer !== gpuBuffer.glBuffer) {
                        gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
                        cache.glUniformBuffer = gpuBuffer.glBuffer;
                      }

                      if (size === buff.byteLength) {
                        gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
                      } else {
                        gl.bufferSubData(gpuBuffer.glTarget, offset, new Float32Array(buff, 0, size / 4));
                      }

                      break;
                    }

                  default:
                    {
                      console.error('Unsupported BufferType, update buffer failed.');
                    }
                }
              }
            }
            function WebGL2CmdFuncCreateTexture(device, gpuTexture) {
              var gl = device.gl;
              gpuTexture.glInternalFmt = GFXFormatToWebGLInternalFormat$1(gpuTexture.format, gl);
              gpuTexture.glFormat = GFXFormatToWebGLFormat$1(gpuTexture.format, gl);
              gpuTexture.glType = GFXFormatToWebGLType$1(gpuTexture.format, gl);
              var w = gpuTexture.width;
              var h = gpuTexture.height;

              switch (gpuTexture.type) {
                case TextureType.TEX2D:
                  {
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                    if (gpuTexture.isSwapchainTexture) break;
                    var maxSize = Math.max(w, h);

                    if (maxSize > device.capabilities.maxTextureSize) {
                      errorID(9100, maxSize, device.capabilities.maxTextureSize);
                    }

                    if (gpuTexture.samples === SampleCount.ONE) {
                      gpuTexture.glTexture = gl.createTexture();

                      if (gpuTexture.size > 0) {
                        var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                        if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                          gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                          glTexUnit.glTexture = gpuTexture.glTexture;
                        }

                        if (FormatInfos[gpuTexture.format].isCompressed) {
                          for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                            var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                            var view = new Uint8Array(imgSize);
                            gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                            w = Math.max(1, w >> 1);
                            h = Math.max(1, h >> 1);
                          }
                        } else {
                          gl.texStorage2D(gl.TEXTURE_2D, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h);
                        }
                      }
                    } else {
                      gpuTexture.glRenderbuffer = gl.createRenderbuffer();

                      if (gpuTexture.size > 0) {
                        if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                          gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                          device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                        }

                        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, gpuTexture.samples, gpuTexture.glInternalFmt, gpuTexture.width, gpuTexture.height);
                      }
                    }

                    break;
                  }

                case TextureType.CUBE:
                  {
                    gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

                    var _maxSize = Math.max(w, h);

                    if (_maxSize > device.capabilities.maxCubeMapTextureSize) {
                      errorID(9100, _maxSize, device.capabilities.maxTextureSize);
                    }

                    gpuTexture.glTexture = gl.createTexture();

                    if (gpuTexture.size > 0) {
                      var _glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                      if (_glTexUnit.glTexture !== gpuTexture.glTexture) {
                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                        _glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      if (FormatInfos[gpuTexture.format].isCompressed) {
                        for (var _i = 0; _i < gpuTexture.mipLevel; ++_i) {
                          var _imgSize = FormatSize(gpuTexture.format, w, h, 1);

                          var _view = new Uint8Array(_imgSize);

                          for (var f = 0; f < 6; ++f) {
                            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i, gpuTexture.glInternalFmt, w, h, 0, _view);
                          }

                          w = Math.max(1, w >> 1);
                          h = Math.max(1, h >> 1);
                        }
                      } else {
                        gl.texStorage2D(gl.TEXTURE_CUBE_MAP, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h);
                      }
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported TextureType, create texture failed.');
                    gpuTexture.type = TextureType.TEX2D;
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                  }
              }
            }
            function WebGL2CmdFuncDestroyTexture(device, gpuTexture) {
              var gl = device.gl;

              if (gpuTexture.glTexture) {
                var glTexUnits = device.stateCache.glTexUnits;
                var texUnit = device.stateCache.texUnit;
                gl.deleteTexture(gpuTexture.glTexture);

                for (var i = 0; i < glTexUnits.length; ++i) {
                  if (glTexUnits[i].glTexture === gpuTexture.glTexture) {
                    gl.activeTexture(gl.TEXTURE0 + i);
                    texUnit = i;
                    gl.bindTexture(gpuTexture.glTarget, null);
                    glTexUnits[i].glTexture = null;
                  }
                }

                device.stateCache.texUnit = texUnit;
                gpuTexture.glTexture = null;
              }

              if (gpuTexture.glRenderbuffer) {
                var glRenderbuffer = device.stateCache.glRenderbuffer;
                gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);

                if (glRenderbuffer === gpuTexture.glRenderbuffer) {
                  gl.bindRenderbuffer(gl.RENDERBUFFER, null);
                  glRenderbuffer = null;
                }

                gpuTexture.glRenderbuffer = null;
              }
            }
            function WebGL2CmdFuncResizeTexture(device, gpuTexture) {
              if (!gpuTexture.size) return;
              var gl = device.gl;
              var w = gpuTexture.width;
              var h = gpuTexture.height;

              switch (gpuTexture.type) {
                case TextureType.TEX2D:
                  {
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                    var maxSize = Math.max(w, h);

                    if (maxSize > device.capabilities.maxTextureSize) {
                      errorID(9100, maxSize, device.capabilities.maxTextureSize);
                    }

                    if (gpuTexture.samples === SampleCount.ONE) {
                      var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                      if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                        gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                        glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      if (FormatInfos[gpuTexture.format].isCompressed) {
                        for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                          var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                          var view = new Uint8Array(imgSize);
                          gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                          w = Math.max(1, w >> 1);
                          h = Math.max(1, h >> 1);
                        }
                      } else {
                        WebGL2CmdFuncDestroyTexture(device, gpuTexture);
                        WebGL2CmdFuncCreateTexture(device, gpuTexture);
                      }
                    } else if (gpuTexture.glRenderbuffer) {
                      if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                        gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                        device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                      }

                      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, gpuTexture.samples, gpuTexture.glInternalFmt, gpuTexture.width, gpuTexture.height);
                    }

                    break;
                  }

                case TextureType.CUBE:
                  {
                    gpuTexture.type = TextureType.CUBE;
                    gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

                    var _maxSize2 = Math.max(w, h);

                    if (_maxSize2 > device.capabilities.maxCubeMapTextureSize) {
                      errorID(9100, _maxSize2, device.capabilities.maxTextureSize);
                    }

                    var _glTexUnit2 = device.stateCache.glTexUnits[device.stateCache.texUnit];

                    if (_glTexUnit2.glTexture !== gpuTexture.glTexture) {
                      gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                      _glTexUnit2.glTexture = gpuTexture.glTexture;
                    }

                    if (FormatInfos[gpuTexture.format].isCompressed) {
                      for (var f = 0; f < 6; ++f) {
                        w = gpuTexture.width;
                        h = gpuTexture.height;

                        for (var _i2 = 0; _i2 < gpuTexture.mipLevel; ++_i2) {
                          var _imgSize2 = FormatSize(gpuTexture.format, w, h, 1);

                          var _view2 = new Uint8Array(_imgSize2);

                          gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i2, gpuTexture.glInternalFmt, w, h, 0, _view2);
                          w = Math.max(1, w >> 1);
                          h = Math.max(1, h >> 1);
                        }
                      }
                    } else {
                      WebGL2CmdFuncDestroyTexture(device, gpuTexture);
                      WebGL2CmdFuncCreateTexture(device, gpuTexture);
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported TextureType, create texture failed.');
                    gpuTexture.type = TextureType.TEX2D;
                    gpuTexture.glTarget = gl.TEXTURE_2D;
                  }
              }
            }
            function WebGL2CmdFuncPrepareSamplerInfo(device, gpuSampler) {
              var gl = device.gl;

              if (gpuSampler.minFilter === Filter.LINEAR || gpuSampler.minFilter === Filter.ANISOTROPIC) {
                if (gpuSampler.mipFilter === Filter.LINEAR || gpuSampler.mipFilter === Filter.ANISOTROPIC) {
                  gpuSampler.glMinFilter = gl.LINEAR_MIPMAP_LINEAR;
                } else if (gpuSampler.mipFilter === Filter.POINT) {
                  gpuSampler.glMinFilter = gl.LINEAR_MIPMAP_NEAREST;
                } else {
                  gpuSampler.glMinFilter = gl.LINEAR;
                }
              } else if (gpuSampler.mipFilter === Filter.LINEAR || gpuSampler.mipFilter === Filter.ANISOTROPIC) {
                gpuSampler.glMinFilter = gl.NEAREST_MIPMAP_LINEAR;
              } else if (gpuSampler.mipFilter === Filter.POINT) {
                gpuSampler.glMinFilter = gl.NEAREST_MIPMAP_NEAREST;
              } else {
                gpuSampler.glMinFilter = gl.NEAREST;
              }

              if (gpuSampler.magFilter === Filter.LINEAR || gpuSampler.magFilter === Filter.ANISOTROPIC) {
                gpuSampler.glMagFilter = gl.LINEAR;
              } else {
                gpuSampler.glMagFilter = gl.NEAREST;
              }

              gpuSampler.glWrapS = WebGLWraps$1[gpuSampler.addressU];
              gpuSampler.glWrapT = WebGLWraps$1[gpuSampler.addressV];
              gpuSampler.glWrapR = WebGLWraps$1[gpuSampler.addressW];
            }
            function WebGL2CmdFuncDestroySampler(device, gpuSampler) {
              var gl = device.gl;
              var it = gpuSampler.glSamplers.values();
              var res = it.next();

              while (!res.done) {
                gl.deleteSampler(res.value);
                var glSamplerUnits = device.stateCache.glSamplerUnits;

                for (var i = 0; i < glSamplerUnits.length; ++i) {
                  if (glSamplerUnits[i] === res.value) {
                    gl.bindSampler(i, null);
                    glSamplerUnits[i] = null;
                  }
                }
              }

              gpuSampler.glSamplers.clear();
            }
            function WebGL2CmdFuncCreateFramebuffer(device, gpuFramebuffer) {
              for (var i = 0; i < gpuFramebuffer.gpuColorViews.length; ++i) {
                var tex = gpuFramebuffer.gpuColorViews[i].gpuTexture;

                if (tex.isSwapchainTexture) {
                  gpuFramebuffer.isOffscreen = false;
                  return;
                }
              }

              var gl = device.gl;
              var attachments = [];
              var glFramebuffer = gl.createFramebuffer();

              if (glFramebuffer) {
                gpuFramebuffer.glFramebuffer = glFramebuffer;

                if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
                  gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
                }

                for (var _i3 = 0; _i3 < gpuFramebuffer.gpuColorViews.length; ++_i3) {
                  var colorTextureView = gpuFramebuffer.gpuColorViews[_i3];
                  var colorTexture = colorTextureView.gpuTexture;

                  if (colorTexture) {
                    if (colorTexture.glTexture) {
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i3, colorTexture.glTarget, colorTexture.glTexture, colorTextureView.baseLevel);
                    } else {
                      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i3, gl.RENDERBUFFER, colorTexture.glRenderbuffer);
                    }

                    attachments.push(gl.COLOR_ATTACHMENT0 + _i3);
                    gpuFramebuffer.width = Math.min(gpuFramebuffer.width, colorTexture.width >> colorTextureView.baseLevel);
                    gpuFramebuffer.height = Math.min(gpuFramebuffer.height, colorTexture.height >> colorTextureView.baseLevel);
                  }
                }

                var dstView = gpuFramebuffer.gpuDepthStencilView;

                if (dstView) {
                  var dst = dstView.gpuTexture;
                  var glAttachment = FormatInfos[dst.format].hasStencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;

                  if (dst.glTexture) {
                    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, dst.glTarget, dst.glTexture, gpuFramebuffer.gpuDepthStencilView.baseLevel);
                  } else {
                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, glAttachment, gl.RENDERBUFFER, dst.glRenderbuffer);
                  }

                  gpuFramebuffer.width = Math.min(gpuFramebuffer.width, dst.width >> dstView.baseLevel);
                  gpuFramebuffer.height = Math.min(gpuFramebuffer.height, dst.height >> dstView.baseLevel);
                }

                gl.drawBuffers(attachments);
                var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

                if (status !== gl.FRAMEBUFFER_COMPLETE) {
                  switch (status) {
                    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT');
                        break;
                      }

                    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');
                        break;
                      }

                    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS');
                        break;
                      }

                    case gl.FRAMEBUFFER_UNSUPPORTED:
                      {
                        console.error('glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED');
                        break;
                      }
                  }
                }

                if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
                  gl.bindFramebuffer(gl.FRAMEBUFFER, device.stateCache.glFramebuffer);
                }
              }
            }
            function WebGL2CmdFuncDestroyFramebuffer(device, gpuFramebuffer) {
              if (gpuFramebuffer.glFramebuffer) {
                device.gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);

                if (device.stateCache.glFramebuffer === gpuFramebuffer.glFramebuffer) {
                  device.gl.bindFramebuffer(device.gl.FRAMEBUFFER, null);
                  device.stateCache.glFramebuffer = null;
                }

                gpuFramebuffer.glFramebuffer = null;
              }
            }
            function WebGL2CmdFuncCreateShader(device, gpuShader) {
              var gl = device.gl;

              var _loop = function _loop(k) {
                var gpuStage = gpuShader.gpuStages[k];
                var glShaderType = 0;
                var shaderTypeStr = '';
                var lineNumber = 1;

                switch (gpuStage.type) {
                  case ShaderStageFlagBit.VERTEX:
                    {
                      shaderTypeStr = 'VertexShader';
                      glShaderType = gl.VERTEX_SHADER;
                      break;
                    }

                  case ShaderStageFlagBit.FRAGMENT:
                    {
                      shaderTypeStr = 'FragmentShader';
                      glShaderType = gl.FRAGMENT_SHADER;
                      break;
                    }

                  default:
                    {
                      console.error('Unsupported ShaderType.');
                      return {
                        v: void 0
                      };
                    }
                }

                var glShader = gl.createShader(glShaderType);

                if (glShader) {
                  gpuStage.glShader = glShader;
                  gl.shaderSource(gpuStage.glShader, "#version 300 es\n" + gpuStage.source);
                  gl.compileShader(gpuStage.glShader);

                  if (!gl.getShaderParameter(gpuStage.glShader, gl.COMPILE_STATUS)) {
                    console.error(shaderTypeStr + " in '" + gpuShader.name + "' compilation failed.");
                    console.error('Shader source dump:', gpuStage.source.replace(/^|\n/g, function () {
                      return "\n" + lineNumber++ + " ";
                    }));
                    console.error(gl.getShaderInfoLog(gpuStage.glShader));

                    for (var l = 0; l < gpuShader.gpuStages.length; l++) {
                      var stage = gpuShader.gpuStages[k];

                      if (stage.glShader) {
                        gl.deleteShader(stage.glShader);
                        stage.glShader = null;
                      }
                    }

                    return {
                      v: void 0
                    };
                  }
                }
              };

              for (var k = 0; k < gpuShader.gpuStages.length; k++) {
                var _ret = _loop(k);

                if (typeof _ret === "object") return _ret.v;
              }

              var glProgram = gl.createProgram();

              if (!glProgram) {
                return;
              }

              gpuShader.glProgram = glProgram;

              for (var _k = 0; _k < gpuShader.gpuStages.length; _k++) {
                var gpuStage = gpuShader.gpuStages[_k];
                gl.attachShader(gpuShader.glProgram, gpuStage.glShader);
              }

              gl.linkProgram(gpuShader.glProgram);

              for (var _k2 = 0; _k2 < gpuShader.gpuStages.length; _k2++) {
                var _gpuStage = gpuShader.gpuStages[_k2];

                if (_gpuStage.glShader) {
                  gl.detachShader(gpuShader.glProgram, _gpuStage.glShader);
                  gl.deleteShader(_gpuStage.glShader);
                  _gpuStage.glShader = null;
                }
              }

              if (gl.getProgramParameter(gpuShader.glProgram, gl.LINK_STATUS)) {
                debug("Shader '" + gpuShader.name + "' compilation succeeded.");
              } else {
                console.error("Failed to link shader '" + gpuShader.name + "'.");
                console.error(gl.getProgramInfoLog(gpuShader.glProgram));
                return;
              }

              var activeAttribCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_ATTRIBUTES);
              gpuShader.glInputs = new Array(activeAttribCount);

              for (var i = 0; i < activeAttribCount; ++i) {
                var attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);

                if (attribInfo) {
                  var varName = void 0;
                  var nameOffset = attribInfo.name.indexOf('[');

                  if (nameOffset !== -1) {
                    varName = attribInfo.name.substr(0, nameOffset);
                  } else {
                    varName = attribInfo.name;
                  }

                  var glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);
                  var type = WebGLTypeToGFXType$1(attribInfo.type, gl);
                  var stride = WebGLGetTypeSize$1(attribInfo.type, gl);
                  gpuShader.glInputs[i] = {
                    name: varName,
                    type: type,
                    stride: stride,
                    count: attribInfo.size,
                    size: stride * attribInfo.size,
                    glType: attribInfo.type,
                    glLoc: glLoc
                  };
                }
              }

              var activeBlockCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_UNIFORM_BLOCKS);
              var blockName;
              var blockIdx;
              var blockSize;
              var block;

              if (activeBlockCount) {
                gpuShader.glBlocks = new Array(activeBlockCount);

                for (var b = 0; b < activeBlockCount; ++b) {
                  blockName = gl.getActiveUniformBlockName(gpuShader.glProgram, b);

                  var _nameOffset = blockName.indexOf('[');

                  if (_nameOffset !== -1) {
                    blockName = blockName.substr(0, _nameOffset);
                  }

                  block = null;

                  for (var _k3 = 0; _k3 < gpuShader.blocks.length; _k3++) {
                    if (gpuShader.blocks[_k3].name === blockName) {
                      block = gpuShader.blocks[_k3];
                      break;
                    }
                  }

                  if (!block) {
                    error("Block '" + blockName + "' does not bound");
                  } else {
                    blockIdx = b;
                    blockSize = gl.getActiveUniformBlockParameter(gpuShader.glProgram, blockIdx, gl.UNIFORM_BLOCK_DATA_SIZE);
                    var glBinding = block.binding + (device.bindingMappings.blockOffsets[block.set] || 0);
                    gl.uniformBlockBinding(gpuShader.glProgram, blockIdx, glBinding);
                    gpuShader.glBlocks[b] = {
                      set: block.set,
                      binding: block.binding,
                      idx: blockIdx,
                      name: blockName,
                      size: blockSize,
                      glBinding: glBinding
                    };
                  }
                }
              }

              for (var _i4 = 0; _i4 < gpuShader.subpassInputs.length; ++_i4) {
                var subpassInput = gpuShader.subpassInputs[_i4];
                gpuShader.samplerTextures.push(new UniformSamplerTexture(subpassInput.set, subpassInput.binding, subpassInput.name, Type$1.SAMPLER2D, subpassInput.count));
              }

              if (gpuShader.samplerTextures.length > 0) {
                gpuShader.glSamplerTextures = new Array(gpuShader.samplerTextures.length);

                for (var _i5 = 0; _i5 < gpuShader.samplerTextures.length; ++_i5) {
                  var sampler = gpuShader.samplerTextures[_i5];
                  gpuShader.glSamplerTextures[_i5] = {
                    set: sampler.set,
                    binding: sampler.binding,
                    name: sampler.name,
                    type: sampler.type,
                    count: sampler.count,
                    units: [],
                    glUnits: null,
                    glType: GFXTypeToWebGLType$1(sampler.type, gl),
                    glLoc: null
                  };
                }
              }

              var glActiveSamplers = [];
              var glActiveSamplerLocations = [];
              var texUnitCacheMap = device.stateCache.texUnitCacheMap;
              var flexibleSetBaseOffset = 0;

              for (var _i6 = 0; _i6 < gpuShader.blocks.length; ++_i6) {
                if (gpuShader.blocks[_i6].set === device.bindingMappings.flexibleSet) {
                  flexibleSetBaseOffset++;
                }
              }

              var arrayOffset = 0;

              for (var _i7 = 0; _i7 < gpuShader.samplerTextures.length; ++_i7) {
                var _sampler = gpuShader.samplerTextures[_i7];

                var _glLoc = gl.getUniformLocation(gpuShader.glProgram, _sampler.name);

                if (_glLoc && _glLoc.id !== -1) {
                  glActiveSamplers.push(gpuShader.glSamplerTextures[_i7]);
                  glActiveSamplerLocations.push(_glLoc);
                }

                if (texUnitCacheMap[_sampler.name] === undefined) {
                  var binding = _sampler.binding + device.bindingMappings.samplerTextureOffsets[_sampler.set] + arrayOffset;

                  if (_sampler.set === device.bindingMappings.flexibleSet) {
                    binding -= flexibleSetBaseOffset;
                  }

                  texUnitCacheMap[_sampler.name] = binding % device.capabilities.maxTextureUnits;
                  arrayOffset += _sampler.count - 1;
                }
              }

              if (glActiveSamplers.length) {
                var usedTexUnits = [];

                for (var _i8 = 0; _i8 < glActiveSamplers.length; ++_i8) {
                  var glSampler = glActiveSamplers[_i8];
                  var cachedUnit = texUnitCacheMap[glSampler.name];

                  if (cachedUnit !== undefined) {
                    glSampler.glLoc = glActiveSamplerLocations[_i8];

                    for (var t = 0; t < glSampler.count; ++t) {
                      while (usedTexUnits[cachedUnit]) {
                        cachedUnit = (cachedUnit + 1) % device.capabilities.maxTextureUnits;
                      }

                      glSampler.units.push(cachedUnit);
                      usedTexUnits[cachedUnit] = true;
                    }
                  }
                }

                var unitIdx = 0;

                for (var _i9 = 0; _i9 < glActiveSamplers.length; ++_i9) {
                  var _glSampler = glActiveSamplers[_i9];

                  if (!_glSampler.glLoc) {
                    _glSampler.glLoc = glActiveSamplerLocations[_i9];

                    while (usedTexUnits[unitIdx]) {
                      unitIdx++;
                    }

                    for (var _t = 0; _t < _glSampler.count; ++_t) {
                      while (usedTexUnits[unitIdx]) {
                        unitIdx = (unitIdx + 1) % device.capabilities.maxTextureUnits;
                      }

                      if (texUnitCacheMap[_glSampler.name] === undefined) {
                        texUnitCacheMap[_glSampler.name] = unitIdx;
                      }

                      _glSampler.units.push(unitIdx);

                      usedTexUnits[unitIdx] = true;
                    }
                  }
                }

                if (device.stateCache.glProgram !== gpuShader.glProgram) {
                  gl.useProgram(gpuShader.glProgram);
                }

                for (var _k4 = 0; _k4 < glActiveSamplers.length; _k4++) {
                  var _glSampler2 = glActiveSamplers[_k4];
                  _glSampler2.glUnits = new Int32Array(_glSampler2.units);
                  gl.uniform1iv(_glSampler2.glLoc, _glSampler2.glUnits);
                }

                if (device.stateCache.glProgram !== gpuShader.glProgram) {
                  gl.useProgram(device.stateCache.glProgram);
                }
              }

              gpuShader.glSamplerTextures = glActiveSamplers;
            }
            function WebGL2CmdFuncDestroyShader(device, gpuShader) {
              if (gpuShader.glProgram) {
                device.gl.deleteProgram(gpuShader.glProgram);

                if (device.stateCache.glProgram === gpuShader.glProgram) {
                  device.gl.useProgram(null);
                  device.stateCache.glProgram = null;
                }

                gpuShader.glProgram = null;
              }
            }
            function WebGL2CmdFuncCreateInputAssember(device, gpuInputAssembler) {
              var gl = device.gl;
              gpuInputAssembler.glAttribs = new Array(gpuInputAssembler.attributes.length);
              var offsets = [0, 0, 0, 0, 0, 0, 0, 0];

              for (var i = 0; i < gpuInputAssembler.attributes.length; ++i) {
                var attrib = gpuInputAssembler.attributes[i];
                var stream = attrib.stream !== undefined ? attrib.stream : 0;
                var gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];
                var glType = GFXFormatToWebGLType$1(attrib.format, gl);
                var size = FormatInfos[attrib.format].size;
                gpuInputAssembler.glAttribs[i] = {
                  name: attrib.name,
                  glBuffer: gpuBuffer.glBuffer,
                  glType: glType,
                  size: size,
                  count: FormatInfos[attrib.format].count,
                  stride: gpuBuffer.stride,
                  componentCount: WebGLGetComponentCount$1(glType, gl),
                  isNormalized: attrib.isNormalized !== undefined ? attrib.isNormalized : false,
                  isInstanced: attrib.isInstanced !== undefined ? attrib.isInstanced : false,
                  offset: offsets[stream]
                };
                offsets[stream] += size;
              }
            }
            function WebGL2CmdFuncDestroyInputAssembler(device, gpuInputAssembler) {
              var it = gpuInputAssembler.glVAOs.values();
              var res = it.next();
              var gl = device.gl;
              var glVAO = device.stateCache.glVAO;

              while (!res.done) {
                gl.deleteVertexArray(res.value);

                if (glVAO === res.value) {
                  gl.bindVertexArray(null);
                  glVAO = null;
                }

                res = it.next();
              }

              device.stateCache.glVAO = glVAO;
              gpuInputAssembler.glVAOs.clear();
            }
            var gfxStateCache$1 = {
              gpuPipelineState: null,
              gpuInputAssembler: null,
              glPrimitive: 0,
              invalidateAttachments: []
            };
            function WebGL2CmdFuncBeginRenderPass(device, gpuRenderPass, gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil) {
              var gl = device.gl;
              var cache = device.stateCache;
              var clears = 0;

              if (gpuFramebuffer && gpuRenderPass) {
                if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
                  gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
                  cache.glFramebuffer = gpuFramebuffer.glFramebuffer;
                }

                if (cache.viewport.left !== renderArea.x || cache.viewport.top !== renderArea.y || cache.viewport.width !== renderArea.width || cache.viewport.height !== renderArea.height) {
                  gl.viewport(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
                  cache.viewport.left = renderArea.x;
                  cache.viewport.top = renderArea.y;
                  cache.viewport.width = renderArea.width;
                  cache.viewport.height = renderArea.height;
                }

                if (cache.scissorRect.x !== renderArea.x || cache.scissorRect.y !== renderArea.y || cache.scissorRect.width !== renderArea.width || cache.scissorRect.height !== renderArea.height) {
                  gl.scissor(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
                  cache.scissorRect.x = renderArea.x;
                  cache.scissorRect.y = renderArea.y;
                  cache.scissorRect.width = renderArea.width;
                  cache.scissorRect.height = renderArea.height;
                }

                gfxStateCache$1.invalidateAttachments.length = 0;

                for (var j = 0; j < clearColors.length; ++j) {
                  var colorAttachment = gpuRenderPass.colorAttachments[j];

                  if (colorAttachment.format !== Format.UNKNOWN) {
                    switch (colorAttachment.loadOp) {
                      case LoadOp.LOAD:
                        break;

                      case LoadOp.CLEAR:
                        {
                          if (cache.bs.targets[0].blendColorMask !== ColorMask.ALL) {
                            gl.colorMask(true, true, true, true);
                          }

                          if (!gpuFramebuffer.isOffscreen) {
                            var clearColor = clearColors[0];
                            gl.clearColor(clearColor.x, clearColor.y, clearColor.z, clearColor.w);
                            clears |= gl.COLOR_BUFFER_BIT;
                          } else {
                            _f32v4[0] = clearColors[j].x;
                            _f32v4[1] = clearColors[j].y;
                            _f32v4[2] = clearColors[j].z;
                            _f32v4[3] = clearColors[j].w;
                            gl.clearBufferfv(gl.COLOR, j, _f32v4);
                          }

                          break;
                        }

                      case LoadOp.DISCARD:
                        {
                          gfxStateCache$1.invalidateAttachments.push(gl.COLOR_ATTACHMENT0 + j);
                          break;
                        }
                    }
                  }
                }

                if (gpuRenderPass.depthStencilAttachment) {
                  if (gpuRenderPass.depthStencilAttachment.format !== Format.UNKNOWN) {
                    switch (gpuRenderPass.depthStencilAttachment.depthLoadOp) {
                      case LoadOp.LOAD:
                        break;

                      case LoadOp.CLEAR:
                        {
                          if (!cache.dss.depthWrite) {
                            gl.depthMask(true);
                          }

                          gl.clearDepth(clearDepth);
                          clears |= gl.DEPTH_BUFFER_BIT;
                          break;
                        }

                      case LoadOp.DISCARD:
                        {
                          gfxStateCache$1.invalidateAttachments.push(gl.DEPTH_ATTACHMENT);
                          break;
                        }
                    }

                    if (FormatInfos[gpuRenderPass.depthStencilAttachment.format].hasStencil) {
                      switch (gpuRenderPass.depthStencilAttachment.stencilLoadOp) {
                        case LoadOp.LOAD:
                          break;

                        case LoadOp.CLEAR:
                          {
                            if (!cache.dss.stencilWriteMaskFront) {
                              gl.stencilMaskSeparate(gl.FRONT, 0xffff);
                            }

                            if (!cache.dss.stencilWriteMaskBack) {
                              gl.stencilMaskSeparate(gl.BACK, 0xffff);
                            }

                            gl.clearStencil(clearStencil);
                            clears |= gl.STENCIL_BUFFER_BIT;
                            break;
                          }

                        case LoadOp.DISCARD:
                          {
                            gfxStateCache$1.invalidateAttachments.push(gl.STENCIL_ATTACHMENT);
                            break;
                          }
                      }
                    }
                  }
                }

                if (gpuFramebuffer.glFramebuffer && gfxStateCache$1.invalidateAttachments.length) {
                  gl.invalidateFramebuffer(gl.FRAMEBUFFER, gfxStateCache$1.invalidateAttachments);
                }

                if (clears) {
                  gl.clear(clears);
                }

                if (clears & gl.COLOR_BUFFER_BIT) {
                  var colorMask = cache.bs.targets[0].blendColorMask;

                  if (colorMask !== ColorMask.ALL) {
                    var r = (colorMask & ColorMask.R) !== ColorMask.NONE;
                    var g = (colorMask & ColorMask.G) !== ColorMask.NONE;
                    var b = (colorMask & ColorMask.B) !== ColorMask.NONE;
                    var a = (colorMask & ColorMask.A) !== ColorMask.NONE;
                    gl.colorMask(r, g, b, a);
                  }
                }

                if (clears & gl.DEPTH_BUFFER_BIT && !cache.dss.depthWrite) {
                  gl.depthMask(false);
                }

                if (clears & gl.STENCIL_BUFFER_BIT) {
                  if (!cache.dss.stencilWriteMaskFront) {
                    gl.stencilMaskSeparate(gl.FRONT, 0);
                  }

                  if (!cache.dss.stencilWriteMaskBack) {
                    gl.stencilMaskSeparate(gl.BACK, 0);
                  }
                }
              }
            }
            function WebGL2CmdFuncBindStates(device, gpuPipelineState, gpuInputAssembler, gpuDescriptorSets, dynamicOffsets, dynamicStates) {
              var gl = device.gl;
              var cache = device.stateCache;
              var gpuShader = gpuPipelineState && gpuPipelineState.gpuShader;
              var isShaderChanged = false;

              if (gpuPipelineState && gfxStateCache$1.gpuPipelineState !== gpuPipelineState) {
                gfxStateCache$1.gpuPipelineState = gpuPipelineState;
                gfxStateCache$1.glPrimitive = gpuPipelineState.glPrimitive;

                if (gpuShader) {
                  var glProgram = gpuShader.glProgram;

                  if (cache.glProgram !== glProgram) {
                    gl.useProgram(glProgram);
                    cache.glProgram = glProgram;
                    isShaderChanged = true;
                  }
                }

                var rs = gpuPipelineState.rs;

                if (rs) {
                  if (cache.rs.cullMode !== rs.cullMode) {
                    switch (rs.cullMode) {
                      case CullMode.NONE:
                        {
                          gl.disable(gl.CULL_FACE);
                          break;
                        }

                      case CullMode.FRONT:
                        {
                          gl.enable(gl.CULL_FACE);
                          gl.cullFace(gl.FRONT);
                          break;
                        }

                      case CullMode.BACK:
                        {
                          gl.enable(gl.CULL_FACE);
                          gl.cullFace(gl.BACK);
                          break;
                        }
                    }

                    device.stateCache.rs.cullMode = rs.cullMode;
                  }

                  var isFrontFaceCCW = rs.isFrontFaceCCW;

                  if (device.stateCache.rs.isFrontFaceCCW !== isFrontFaceCCW) {
                    gl.frontFace(isFrontFaceCCW ? gl.CCW : gl.CW);
                    device.stateCache.rs.isFrontFaceCCW = isFrontFaceCCW;
                  }

                  if (device.stateCache.rs.depthBias !== rs.depthBias || device.stateCache.rs.depthBiasSlop !== rs.depthBiasSlop) {
                    gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);
                    device.stateCache.rs.depthBias = rs.depthBias;
                    device.stateCache.rs.depthBiasSlop = rs.depthBiasSlop;
                  }

                  if (device.stateCache.rs.lineWidth !== rs.lineWidth) {
                    gl.lineWidth(rs.lineWidth);
                    device.stateCache.rs.lineWidth = rs.lineWidth;
                  }
                }

                var dss = gpuPipelineState.dss;

                if (dss) {
                  if (cache.dss.depthTest !== dss.depthTest) {
                    if (dss.depthTest) {
                      gl.enable(gl.DEPTH_TEST);
                    } else {
                      gl.disable(gl.DEPTH_TEST);
                    }

                    cache.dss.depthTest = dss.depthTest;
                  }

                  if (cache.dss.depthWrite !== dss.depthWrite) {
                    gl.depthMask(dss.depthWrite);
                    cache.dss.depthWrite = dss.depthWrite;
                  }

                  if (cache.dss.depthFunc !== dss.depthFunc) {
                    gl.depthFunc(WebGLCmpFuncs$1[dss.depthFunc]);
                    cache.dss.depthFunc = dss.depthFunc;
                  }

                  if (cache.dss.stencilTestFront !== dss.stencilTestFront || cache.dss.stencilTestBack !== dss.stencilTestBack) {
                    if (dss.stencilTestFront || dss.stencilTestBack) {
                      gl.enable(gl.STENCIL_TEST);
                    } else {
                      gl.disable(gl.STENCIL_TEST);
                    }

                    cache.dss.stencilTestFront = dss.stencilTestFront;
                    cache.dss.stencilTestBack = dss.stencilTestBack;
                  }

                  if (cache.dss.stencilFuncFront !== dss.stencilFuncFront || cache.dss.stencilRefFront !== dss.stencilRefFront || cache.dss.stencilReadMaskFront !== dss.stencilReadMaskFront) {
                    gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs$1[dss.stencilFuncFront], dss.stencilRefFront, dss.stencilReadMaskFront);
                    cache.dss.stencilFuncFront = dss.stencilFuncFront;
                    cache.dss.stencilRefFront = dss.stencilRefFront;
                    cache.dss.stencilReadMaskFront = dss.stencilReadMaskFront;
                  }

                  if (cache.dss.stencilFailOpFront !== dss.stencilFailOpFront || cache.dss.stencilZFailOpFront !== dss.stencilZFailOpFront || cache.dss.stencilPassOpFront !== dss.stencilPassOpFront) {
                    gl.stencilOpSeparate(gl.FRONT, WebGLStencilOps$1[dss.stencilFailOpFront], WebGLStencilOps$1[dss.stencilZFailOpFront], WebGLStencilOps$1[dss.stencilPassOpFront]);
                    cache.dss.stencilFailOpFront = dss.stencilFailOpFront;
                    cache.dss.stencilZFailOpFront = dss.stencilZFailOpFront;
                    cache.dss.stencilPassOpFront = dss.stencilPassOpFront;
                  }

                  if (cache.dss.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {
                    gl.stencilMaskSeparate(gl.FRONT, dss.stencilWriteMaskFront);
                    cache.dss.stencilWriteMaskFront = dss.stencilWriteMaskFront;
                  }

                  if (cache.dss.stencilFuncBack !== dss.stencilFuncBack || cache.dss.stencilRefBack !== dss.stencilRefBack || cache.dss.stencilReadMaskBack !== dss.stencilReadMaskBack) {
                    gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs$1[dss.stencilFuncBack], dss.stencilRefBack, dss.stencilReadMaskBack);
                    cache.dss.stencilFuncBack = dss.stencilFuncBack;
                    cache.dss.stencilRefBack = dss.stencilRefBack;
                    cache.dss.stencilReadMaskBack = dss.stencilReadMaskBack;
                  }

                  if (cache.dss.stencilFailOpBack !== dss.stencilFailOpBack || cache.dss.stencilZFailOpBack !== dss.stencilZFailOpBack || cache.dss.stencilPassOpBack !== dss.stencilPassOpBack) {
                    gl.stencilOpSeparate(gl.BACK, WebGLStencilOps$1[dss.stencilFailOpBack], WebGLStencilOps$1[dss.stencilZFailOpBack], WebGLStencilOps$1[dss.stencilPassOpBack]);
                    cache.dss.stencilFailOpBack = dss.stencilFailOpBack;
                    cache.dss.stencilZFailOpBack = dss.stencilZFailOpBack;
                    cache.dss.stencilPassOpBack = dss.stencilPassOpBack;
                  }

                  if (cache.dss.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {
                    gl.stencilMaskSeparate(gl.BACK, dss.stencilWriteMaskBack);
                    cache.dss.stencilWriteMaskBack = dss.stencilWriteMaskBack;
                  }
                }

                var bs = gpuPipelineState.bs;

                if (bs) {
                  if (cache.bs.isA2C !== bs.isA2C) {
                    if (bs.isA2C) {
                      gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
                    } else {
                      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
                    }

                    cache.bs.isA2C = bs.isA2C;
                  }

                  if (cache.bs.blendColor.x !== bs.blendColor.x || cache.bs.blendColor.y !== bs.blendColor.y || cache.bs.blendColor.z !== bs.blendColor.z || cache.bs.blendColor.w !== bs.blendColor.w) {
                    gl.blendColor(bs.blendColor.x, bs.blendColor.y, bs.blendColor.z, bs.blendColor.w);
                    cache.bs.blendColor.x = bs.blendColor.x;
                    cache.bs.blendColor.y = bs.blendColor.y;
                    cache.bs.blendColor.z = bs.blendColor.z;
                    cache.bs.blendColor.w = bs.blendColor.w;
                  }

                  var target0 = bs.targets[0];
                  var target0Cache = cache.bs.targets[0];

                  if (target0Cache.blend !== target0.blend) {
                    if (target0.blend) {
                      gl.enable(gl.BLEND);
                    } else {
                      gl.disable(gl.BLEND);
                    }

                    target0Cache.blend = target0.blend;
                  }

                  if (target0Cache.blendEq !== target0.blendEq || target0Cache.blendAlphaEq !== target0.blendAlphaEq) {
                    gl.blendEquationSeparate(WebGLBlendOps$1[target0.blendEq], WebGLBlendOps$1[target0.blendAlphaEq]);
                    target0Cache.blendEq = target0.blendEq;
                    target0Cache.blendAlphaEq = target0.blendAlphaEq;
                  }

                  if (target0Cache.blendSrc !== target0.blendSrc || target0Cache.blendDst !== target0.blendDst || target0Cache.blendSrcAlpha !== target0.blendSrcAlpha || target0Cache.blendDstAlpha !== target0.blendDstAlpha) {
                    gl.blendFuncSeparate(WebGLBlendFactors$1[target0.blendSrc], WebGLBlendFactors$1[target0.blendDst], WebGLBlendFactors$1[target0.blendSrcAlpha], WebGLBlendFactors$1[target0.blendDstAlpha]);
                    target0Cache.blendSrc = target0.blendSrc;
                    target0Cache.blendDst = target0.blendDst;
                    target0Cache.blendSrcAlpha = target0.blendSrcAlpha;
                    target0Cache.blendDstAlpha = target0.blendDstAlpha;
                  }

                  if (target0Cache.blendColorMask !== target0.blendColorMask) {
                    gl.colorMask((target0.blendColorMask & ColorMask.R) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.G) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.B) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.A) !== ColorMask.NONE);
                    target0Cache.blendColorMask = target0.blendColorMask;
                  }
                }
              }

              if (gpuPipelineState && gpuPipelineState.gpuPipelineLayout && gpuShader) {
                var blockLen = gpuShader.glBlocks.length;
                var dynamicOffsetIndices = gpuPipelineState.gpuPipelineLayout.dynamicOffsetIndices;

                for (var j = 0; j < blockLen; j++) {
                  var glBlock = gpuShader.glBlocks[j];
                  var gpuDescriptorSet = gpuDescriptorSets[glBlock.set];
                  var descriptorIndex = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glBlock.binding];
                  var gpuDescriptor = descriptorIndex >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIndex];

                  if (!gpuDescriptor || !gpuDescriptor.gpuBuffer) {
                    error("Buffer binding '" + glBlock.name + "' at set " + glBlock.set + " binding " + glBlock.binding + " is not bounded");
                    continue;
                  }

                  var dynamicOffsetIndexSet = dynamicOffsetIndices[glBlock.set];
                  var dynamicOffsetIndex = dynamicOffsetIndexSet && dynamicOffsetIndexSet[glBlock.binding];
                  var offset = gpuDescriptor.gpuBuffer.glOffset;

                  if (dynamicOffsetIndex >= 0) {
                    offset += dynamicOffsets[dynamicOffsetIndex];
                  }

                  if (cache.glBindUBOs[glBlock.glBinding] !== gpuDescriptor.gpuBuffer.glBuffer || cache.glBindUBOOffsets[glBlock.glBinding] !== offset) {
                    if (offset) {
                      gl.bindBufferRange(gl.UNIFORM_BUFFER, glBlock.glBinding, gpuDescriptor.gpuBuffer.glBuffer, offset, gpuDescriptor.gpuBuffer.size);
                    } else {
                      gl.bindBufferBase(gl.UNIFORM_BUFFER, glBlock.glBinding, gpuDescriptor.gpuBuffer.glBuffer);
                    }

                    cache.glUniformBuffer = cache.glBindUBOs[glBlock.glBinding] = gpuDescriptor.gpuBuffer.glBuffer;
                    cache.glBindUBOOffsets[glBlock.glBinding] = offset;
                  }
                }

                var samplerLen = gpuShader.glSamplerTextures.length;

                for (var i = 0; i < samplerLen; i++) {
                  var glSampler = gpuShader.glSamplerTextures[i];
                  var _gpuDescriptorSet = gpuDescriptorSets[glSampler.set];

                  var _descriptorIndex = _gpuDescriptorSet && _gpuDescriptorSet.descriptorIndices[glSampler.binding];

                  var _gpuDescriptor = _descriptorIndex >= 0 && _gpuDescriptorSet.gpuDescriptors[_descriptorIndex];

                  for (var l = 0; l < glSampler.units.length; l++) {
                    var texUnit = glSampler.units[l];
                    var glTexUnit = cache.glTexUnits[texUnit];

                    if (!_gpuDescriptor || !_gpuDescriptor.gpuTextureView || !_gpuDescriptor.gpuTextureView.gpuTexture || !_gpuDescriptor.gpuSampler) {
                      error("Sampler binding '" + glSampler.name + "' at set " + glSampler.set + " binding " + glSampler.binding + " index " + l + " is not bounded");
                      continue;
                    }

                    var gpuTextureView = _gpuDescriptor.gpuTextureView;
                    var gpuTexture = gpuTextureView.gpuTexture;
                    var minLod = gpuTextureView.baseLevel;
                    var maxLod = minLod + gpuTextureView.levelCount;

                    if (gpuTexture.size > 0) {
                      if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        if (gpuTexture.glTexture) {
                          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                        } else {
                          gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);
                        }

                        glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      var _gpuDescriptor2 = _gpuDescriptor,
                          gpuSampler = _gpuDescriptor2.gpuSampler;

                      var _glSampler3 = gpuSampler.getGLSampler(device, minLod, maxLod);

                      if (cache.glSamplerUnits[texUnit] !== _glSampler3) {
                        gl.bindSampler(texUnit, _glSampler3);
                        cache.glSamplerUnits[texUnit] = _glSampler3;
                      }
                    }

                    _gpuDescriptor = _gpuDescriptorSet.gpuDescriptors[++_descriptorIndex];
                  }
                }
              }

              if (gpuInputAssembler && gpuShader && (isShaderChanged || gfxStateCache$1.gpuInputAssembler !== gpuInputAssembler)) {
                gfxStateCache$1.gpuInputAssembler = gpuInputAssembler;

                if (device.extensions.useVAO) {
                  var glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram);

                  if (!glVAO) {
                    glVAO = gl.createVertexArray();
                    gpuInputAssembler.glVAOs.set(gpuShader.glProgram, glVAO);
                    gl.bindVertexArray(glVAO);
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    cache.glArrayBuffer = null;
                    cache.glElementArrayBuffer = null;
                    var glAttrib;

                    for (var _j = 0; _j < gpuShader.glInputs.length; _j++) {
                      var glInput = gpuShader.glInputs[_j];
                      glAttrib = null;

                      for (var k = 0; k < gpuInputAssembler.glAttribs.length; k++) {
                        var attrib = gpuInputAssembler.glAttribs[k];

                        if (attrib.name === glInput.name) {
                          glAttrib = attrib;
                          break;
                        }
                      }

                      if (glAttrib) {
                        if (cache.glArrayBuffer !== glAttrib.glBuffer) {
                          gl.bindBuffer(gl.ARRAY_BUFFER, glAttrib.glBuffer);
                          cache.glArrayBuffer = glAttrib.glBuffer;
                        }

                        for (var c = 0; c < glAttrib.componentCount; ++c) {
                          var glLoc = glInput.glLoc + c;
                          var attribOffset = glAttrib.offset + glAttrib.size * c;
                          gl.enableVertexAttribArray(glLoc);
                          cache.glCurrentAttribLocs[glLoc] = true;
                          gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);
                          gl.vertexAttribDivisor(glLoc, glAttrib.isInstanced ? 1 : 0);
                        }
                      }
                    }

                    var gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

                    if (gpuBuffer) {
                      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                    }

                    gl.bindVertexArray(null);
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    cache.glArrayBuffer = null;
                    cache.glElementArrayBuffer = null;
                  }

                  if (cache.glVAO !== glVAO) {
                    gl.bindVertexArray(glVAO);
                    cache.glVAO = glVAO;
                  }
                } else {
                  for (var a = 0; a < device.capabilities.maxVertexAttributes; ++a) {
                    cache.glCurrentAttribLocs[a] = false;
                  }

                  for (var _j2 = 0; _j2 < gpuShader.glInputs.length; _j2++) {
                    var _glInput = gpuShader.glInputs[_j2];
                    var _glAttrib = null;

                    for (var _k5 = 0; _k5 < gpuInputAssembler.glAttribs.length; _k5++) {
                      var _attrib = gpuInputAssembler.glAttribs[_k5];

                      if (_attrib.name === _glInput.name) {
                        _glAttrib = _attrib;
                        break;
                      }
                    }

                    if (_glAttrib) {
                      if (cache.glArrayBuffer !== _glAttrib.glBuffer) {
                        gl.bindBuffer(gl.ARRAY_BUFFER, _glAttrib.glBuffer);
                        cache.glArrayBuffer = _glAttrib.glBuffer;
                      }

                      for (var _c = 0; _c < _glAttrib.componentCount; ++_c) {
                        var _glLoc2 = _glInput.glLoc + _c;

                        var _attribOffset = _glAttrib.offset + _glAttrib.size * _c;

                        if (!cache.glEnabledAttribLocs[_glLoc2] && _glLoc2 >= 0) {
                          gl.enableVertexAttribArray(_glLoc2);
                          cache.glEnabledAttribLocs[_glLoc2] = true;
                        }

                        cache.glCurrentAttribLocs[_glLoc2] = true;
                        gl.vertexAttribPointer(_glLoc2, _glAttrib.count, _glAttrib.glType, _glAttrib.isNormalized, _glAttrib.stride, _attribOffset);
                        gl.vertexAttribDivisor(_glLoc2, _glAttrib.isInstanced ? 1 : 0);
                      }
                    }
                  }

                  var _gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

                  if (_gpuBuffer) {
                    if (cache.glElementArrayBuffer !== _gpuBuffer.glBuffer) {
                      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer.glBuffer);
                      cache.glElementArrayBuffer = _gpuBuffer.glBuffer;
                    }
                  }

                  for (var _a = 0; _a < device.capabilities.maxVertexAttributes; ++_a) {
                    if (cache.glEnabledAttribLocs[_a] !== cache.glCurrentAttribLocs[_a]) {
                      gl.disableVertexAttribArray(_a);
                      cache.glEnabledAttribLocs[_a] = false;
                    }
                  }
                }
              }

              if (gpuPipelineState && gpuPipelineState.dynamicStates.length) {
                var dsLen = gpuPipelineState.dynamicStates.length;

                for (var _k6 = 0; _k6 < dsLen; _k6++) {
                  var dynamicState = gpuPipelineState.dynamicStates[_k6];

                  switch (dynamicState) {
                    case DynamicStateFlagBit.LINE_WIDTH:
                      {
                        if (cache.rs.lineWidth !== dynamicStates.lineWidth) {
                          gl.lineWidth(dynamicStates.lineWidth);
                          cache.rs.lineWidth = dynamicStates.lineWidth;
                        }

                        break;
                      }

                    case DynamicStateFlagBit.DEPTH_BIAS:
                      {
                        if (cache.rs.depthBias !== dynamicStates.depthBiasConstant || cache.rs.depthBiasSlop !== dynamicStates.depthBiasSlope) {
                          gl.polygonOffset(dynamicStates.depthBiasConstant, dynamicStates.depthBiasSlope);
                          cache.rs.depthBias = dynamicStates.depthBiasConstant;
                          cache.rs.depthBiasSlop = dynamicStates.depthBiasSlope;
                        }

                        break;
                      }

                    case DynamicStateFlagBit.BLEND_CONSTANTS:
                      {
                        var blendConstant = dynamicStates.blendConstant;

                        if (cache.bs.blendColor.x !== blendConstant.x || cache.bs.blendColor.y !== blendConstant.y || cache.bs.blendColor.z !== blendConstant.z || cache.bs.blendColor.w !== blendConstant.w) {
                          gl.blendColor(blendConstant.x, blendConstant.y, blendConstant.z, blendConstant.w);
                          cache.bs.blendColor.copy(blendConstant);
                        }

                        break;
                      }

                    case DynamicStateFlagBit.STENCIL_WRITE_MASK:
                      {
                        var front = dynamicStates.stencilStatesFront;
                        var back = dynamicStates.stencilStatesBack;

                        if (cache.dss.stencilWriteMaskFront !== front.writeMask) {
                          gl.stencilMaskSeparate(gl.FRONT, front.writeMask);
                          cache.dss.stencilWriteMaskFront = front.writeMask;
                        }

                        if (cache.dss.stencilWriteMaskBack !== back.writeMask) {
                          gl.stencilMaskSeparate(gl.BACK, back.writeMask);
                          cache.dss.stencilWriteMaskBack = back.writeMask;
                        }

                        break;
                      }

                    case DynamicStateFlagBit.STENCIL_COMPARE_MASK:
                      {
                        var _front = dynamicStates.stencilStatesFront;
                        var _back = dynamicStates.stencilStatesBack;

                        if (cache.dss.stencilRefFront !== _front.reference || cache.dss.stencilReadMaskFront !== _front.compareMask) {
                          gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs$1[cache.dss.stencilFuncFront], _front.reference, _front.compareMask);
                          cache.dss.stencilRefFront = _front.reference;
                          cache.dss.stencilReadMaskFront = _front.compareMask;
                        }

                        if (cache.dss.stencilRefBack !== _back.reference || cache.dss.stencilReadMaskBack !== _back.compareMask) {
                          gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs$1[cache.dss.stencilFuncBack], _back.reference, _back.compareMask);
                          cache.dss.stencilRefBack = _back.reference;
                          cache.dss.stencilReadMaskBack = _back.compareMask;
                        }

                        break;
                      }
                  }
                }
              }
            }
            function WebGL2CmdFuncDraw(device, drawInfo) {
              var gl = device.gl;
              var gpuInputAssembler = gfxStateCache$1.gpuInputAssembler,
                  glPrimitive = gfxStateCache$1.glPrimitive;
              var md = device.extensions.WEBGL_multi_draw;

              if (gpuInputAssembler) {
                var indexBuffer = gpuInputAssembler.gpuIndexBuffer;

                if (gpuInputAssembler.gpuIndirectBuffer) {
                  var indirects = gpuInputAssembler.gpuIndirectBuffer.indirects;

                  if (indirects.drawByIndex) {
                    for (var j = 0; j < indirects.drawCount; j++) {
                      indirects.byteOffsets[j] = indirects.offsets[j] * indexBuffer.stride;
                    }

                    if (md) {
                      if (indirects.instancedDraw) {
                        md.multiDrawElementsInstancedWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.instances, 0, indirects.drawCount);
                      } else {
                        md.multiDrawElementsWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.drawCount);
                      }
                    } else {
                      for (var _j3 = 0; _j3 < indirects.drawCount; _j3++) {
                        if (indirects.instances[_j3]) {
                          gl.drawElementsInstanced(glPrimitive, indirects.counts[_j3], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j3], indirects.instances[_j3]);
                        } else {
                          gl.drawElements(glPrimitive, indirects.counts[_j3], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j3]);
                        }
                      }
                    }
                  } else if (md) {
                    if (indirects.instancedDraw) {
                      md.multiDrawArraysInstancedWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.instances, 0, indirects.drawCount);
                    } else {
                      md.multiDrawArraysWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.drawCount);
                    }
                  } else {
                    for (var _j4 = 0; _j4 < indirects.drawCount; _j4++) {
                      if (indirects.instances[_j4]) {
                        gl.drawArraysInstanced(glPrimitive, indirects.offsets[_j4], indirects.counts[_j4], indirects.instances[_j4]);
                      } else {
                        gl.drawArrays(glPrimitive, indirects.offsets[_j4], indirects.counts[_j4]);
                      }
                    }
                  }
                } else if (drawInfo.instanceCount) {
                  if (indexBuffer) {
                    if (drawInfo.indexCount > 0) {
                      var offset = drawInfo.firstIndex * indexBuffer.stride;
                      gl.drawElementsInstanced(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, offset, drawInfo.instanceCount);
                    }
                  } else if (drawInfo.vertexCount > 0) {
                    gl.drawArraysInstanced(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);
                  }
                } else if (indexBuffer) {
                  if (drawInfo.indexCount > 0) {
                    var _offset = drawInfo.firstIndex * indexBuffer.stride;

                    gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset);
                  }
                } else if (drawInfo.vertexCount > 0) {
                  gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);
                }
              }
            }
            var cmdIds$1 = new Array(WebGL2Cmd.COUNT);
            function WebGL2CmdFuncExecuteCmds(device, cmdPackage) {
              cmdIds$1.fill(0);

              for (var i = 0; i < cmdPackage.cmds.length; ++i) {
                var cmd = cmdPackage.cmds.array[i];
                var cmdId = cmdIds$1[cmd]++;

                switch (cmd) {
                  case WebGL2Cmd.BEGIN_RENDER_PASS:
                    {
                      var cmd0 = cmdPackage.beginRenderPassCmds.array[cmdId];
                      WebGL2CmdFuncBeginRenderPass(device, cmd0.gpuRenderPass, cmd0.gpuFramebuffer, cmd0.renderArea, cmd0.clearColors, cmd0.clearDepth, cmd0.clearStencil);
                      break;
                    }

                  case WebGL2Cmd.BIND_STATES:
                    {
                      var cmd2 = cmdPackage.bindStatesCmds.array[cmdId];
                      WebGL2CmdFuncBindStates(device, cmd2.gpuPipelineState, cmd2.gpuInputAssembler, cmd2.gpuDescriptorSets, cmd2.dynamicOffsets, cmd2.dynamicStates);
                      break;
                    }

                  case WebGL2Cmd.DRAW:
                    {
                      var cmd3 = cmdPackage.drawCmds.array[cmdId];
                      WebGL2CmdFuncDraw(device, cmd3.drawInfo);
                      break;
                    }

                  case WebGL2Cmd.UPDATE_BUFFER:
                    {
                      var cmd4 = cmdPackage.updateBufferCmds.array[cmdId];
                      WebGL2CmdFuncUpdateBuffer(device, cmd4.gpuBuffer, cmd4.buffer, cmd4.offset, cmd4.size);
                      break;
                    }

                  case WebGL2Cmd.COPY_BUFFER_TO_TEXTURE:
                    {
                      var cmd5 = cmdPackage.copyBufferToTextureCmds.array[cmdId];
                      WebGL2CmdFuncCopyBuffersToTexture(device, cmd5.buffers, cmd5.gpuTexture, cmd5.regions);
                      break;
                    }
                }
              }
            }
            function WebGL2CmdFuncCopyTexImagesToTexture(device, texImages, gpuTexture, regions) {
              var gl = device.gl;
              var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                glTexUnit.glTexture = gpuTexture.glTexture;
              }

              var n = 0;
              var f = 0;

              switch (gpuTexture.glTarget) {
                case gl.TEXTURE_2D:
                  {
                    for (var k = 0; k < regions.length; k++) {
                      var region = regions[k];
                      gl.texSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
                    }

                    break;
                  }

                case gl.TEXTURE_CUBE_MAP:
                  {
                    for (var _k7 = 0; _k7 < regions.length; _k7++) {
                      var _region = regions[_k7];
                      var fcount = _region.texSubres.baseArrayLayer + _region.texSubres.layerCount;

                      for (f = _region.texSubres.baseArrayLayer; f < fcount; ++f) {
                        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region.texSubres.mipLevel, _region.texOffset.x, _region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
                      }
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported GL texture type, copy buffer to texture failed.');
                  }
              }

              if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {
                gl.generateMipmap(gpuTexture.glTarget);
              }
            }
            function WebGL2CmdFuncCopyBuffersToTexture(device, buffers, gpuTexture, regions) {
              var gl = device.gl;
              var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                glTexUnit.glTexture = gpuTexture.glTexture;
              }

              var n = 0;
              var w = 1;
              var h = 1;
              var f = 0;
              var fmtInfo = FormatInfos[gpuTexture.format];
              var isCompressed = fmtInfo.isCompressed;

              switch (gpuTexture.glTarget) {
                case gl.TEXTURE_2D:
                  {
                    for (var k = 0; k < regions.length; k++) {
                      var region = regions[k];
                      w = region.texExtent.width;
                      h = region.texExtent.height;
                      var pixels = buffers[n++];

                      if (!isCompressed) {
                        gl.texSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, pixels);
                      } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL) {
                        gl.compressedTexSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, pixels);
                      } else {
                        gl.compressedTexImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, gpuTexture.glInternalFmt, w, h, 0, pixels);
                      }
                    }

                    break;
                  }

                case gl.TEXTURE_CUBE_MAP:
                  {
                    for (var _k8 = 0; _k8 < regions.length; _k8++) {
                      var _region2 = regions[_k8];
                      var fcount = _region2.texSubres.baseArrayLayer + _region2.texSubres.layerCount;

                      for (f = _region2.texSubres.baseArrayLayer; f < fcount; ++f) {
                        w = _region2.texExtent.width;
                        h = _region2.texExtent.height;
                        var _pixels = buffers[n++];

                        if (!isCompressed) {
                          gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region2.texSubres.mipLevel, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, _pixels);
                        } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL) {
                          gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region2.texSubres.mipLevel, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, _pixels);
                        } else {
                          gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region2.texSubres.mipLevel, gpuTexture.glInternalFmt, w, h, 0, _pixels);
                        }
                      }
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported GL texture type, copy buffer to texture failed.');
                  }
              }

              if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {
                gl.generateMipmap(gpuTexture.glTarget);
              }
            }
            function WebGL2CmdFuncCopyTextureToBuffers(device, gpuTexture, buffers, regions) {
              var gl = device.gl;
              var cache = device.stateCache;
              var framebuffer = gl.createFramebuffer();
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
              var x = 0;
              var y = 0;
              var w = 1;
              var h = 1;

              switch (gpuTexture.glTarget) {
                case gl.TEXTURE_2D:
                  {
                    for (var k = 0; k < regions.length; k++) {
                      var region = regions[k];
                      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gpuTexture.glTarget, gpuTexture.glTexture, region.texSubres.mipLevel);
                      x = region.texOffset.x;
                      y = region.texOffset.y;
                      w = region.texExtent.width;
                      h = region.texExtent.height;
                      gl.readPixels(x, y, w, h, gpuTexture.glFormat, gpuTexture.glType, buffers[k]);
                    }

                    break;
                  }

                default:
                  {
                    console.error('Unsupported GL texture type, copy texture to buffers failed.');
                  }
              }

              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              cache.glFramebuffer = null;
              gl.deleteFramebuffer(framebuffer);
            }

            var WebGL2IndirectDrawInfos = function () {
              function WebGL2IndirectDrawInfos() {
                this.counts = void 0;
                this.offsets = void 0;
                this.instances = void 0;
                this.drawCount = 0;
                this.drawByIndex = false;
                this.instancedDraw = false;
                this.byteOffsets = void 0;
                this._capacity = 4;
                this.counts = new Int32Array(this._capacity);
                this.offsets = new Int32Array(this._capacity);
                this.instances = new Int32Array(this._capacity);
                this.byteOffsets = new Int32Array(this._capacity);
              }

              var _proto = WebGL2IndirectDrawInfos.prototype;

              _proto.clearDraws = function clearDraws() {
                this.drawCount = 0;
                this.drawByIndex = false;
                this.instancedDraw = false;
              };

              _proto.setDrawInfo = function setDrawInfo(idx, info) {
                this._ensureCapacity(idx);

                this.drawByIndex = info.indexCount > 0;
                this.instancedDraw = !!info.instanceCount;
                this.drawCount = Math.max(idx + 1, this.drawCount);

                if (this.drawByIndex) {
                  this.counts[idx] = info.indexCount;
                  this.offsets[idx] = info.firstIndex;
                } else {
                  this.counts[idx] = info.vertexCount;
                  this.offsets[idx] = info.firstVertex;
                }

                this.instances[idx] = Math.max(1, info.instanceCount);
              };

              _proto._ensureCapacity = function _ensureCapacity(target) {
                if (this._capacity > target) return;
                this._capacity = nextPow2(target);
                var counts = new Int32Array(this._capacity);
                var offsets = new Int32Array(this._capacity);
                var instances = new Int32Array(this._capacity);
                this.byteOffsets = new Int32Array(this._capacity);
                counts.set(this.counts);
                offsets.set(this.offsets);
                instances.set(this.instances);
                this.counts = counts;
                this.offsets = offsets;
                this.instances = instances;
              };

              return WebGL2IndirectDrawInfos;
            }();

            var WebGL2Buffer = function (_Buffer) {
              _inheritsLoose(WebGL2Buffer, _Buffer);

              function WebGL2Buffer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Buffer.call.apply(_Buffer, [this].concat(args)) || this;
                _this._gpuBuffer = null;
                return _this;
              }

              var _proto = WebGL2Buffer.prototype;

              _proto.initialize = function initialize(info) {
                if ('buffer' in info) {
                  this._isBufferView = true;
                  var buffer = info.buffer;
                  this._usage = buffer.usage;
                  this._memUsage = buffer.memUsage;
                  this._size = this._stride = info.range;
                  this._count = 1;
                  this._flags = buffer.flags;
                  this._gpuBuffer = {
                    usage: this._usage,
                    memUsage: this._memUsage,
                    size: this._size,
                    stride: this._stride,
                    buffer: null,
                    indirects: buffer.gpuBuffer.indirects,
                    glTarget: buffer.gpuBuffer.glTarget,
                    glBuffer: buffer.gpuBuffer.glBuffer,
                    glOffset: info.offset
                  };
                } else {
                  this._usage = info.usage;
                  this._memUsage = info.memUsage;
                  this._size = info.size;
                  this._stride = Math.max(info.stride || this._size, 1);
                  this._count = this._size / this._stride;
                  this._flags = info.flags;
                  this._gpuBuffer = {
                    usage: this._usage,
                    memUsage: this._memUsage,
                    size: this._size,
                    stride: this._stride,
                    buffer: null,
                    indirects: new WebGL2IndirectDrawInfos(),
                    glTarget: 0,
                    glBuffer: null,
                    glOffset: 0
                  };
                  WebGL2CmdFuncCreateBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);
                  WebGL2DeviceManager.instance.memoryStatus.bufferSize += this._size;
                }
              };

              _proto.destroy = function destroy() {
                if (this._gpuBuffer) {
                  if (!this._isBufferView) {
                    WebGL2CmdFuncDestroyBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);
                    WebGL2DeviceManager.instance.memoryStatus.bufferSize -= this._size;
                  }

                  this._gpuBuffer = null;
                }
              };

              _proto.resize = function resize(size) {
                if (this._isBufferView) {
                  console.warn('cannot resize buffer views!');
                  return;
                }

                var oldSize = this._size;

                if (oldSize === size) {
                  return;
                }

                this._size = size;
                this._count = this._size / this._stride;

                if (this._gpuBuffer) {
                  this._gpuBuffer.size = size;

                  if (size > 0) {
                    WebGL2CmdFuncResizeBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);
                    WebGL2DeviceManager.instance.memoryStatus.bufferSize -= oldSize;
                    WebGL2DeviceManager.instance.memoryStatus.bufferSize += size;
                  }
                }
              };

              _proto.update = function update(buffer, size) {
                if (this._isBufferView) {
                  console.warn('cannot update through buffer views!');
                  return;
                }

                var buffSize;

                if (size !== undefined) {
                  buffSize = size;
                } else if (this._usage & BufferUsageBit.INDIRECT) {
                  buffSize = 0;
                } else {
                  buffSize = buffer.byteLength;
                }

                WebGL2CmdFuncUpdateBuffer(WebGL2DeviceManager.instance, this._gpuBuffer, buffer, 0, buffSize);
              };

              _createClass(WebGL2Buffer, [{
                key: "gpuBuffer",
                get: function get() {
                  return this._gpuBuffer;
                }
              }]);

              return WebGL2Buffer;
            }(Buffer);

            var WebGL2CommandPool = function () {
              function WebGL2CommandPool(Clazz, count) {
                this._frees = void 0;
                this._freeIdx = 0;
                this._freeCmds = void 0;
                this._frees = new Array(count);
                this._freeCmds = new CachedArray(count);

                for (var i = 0; i < count; ++i) {
                  this._frees[i] = new Clazz();
                }

                this._freeIdx = count - 1;
              }

              var _proto = WebGL2CommandPool.prototype;

              _proto.alloc = function alloc(Clazz) {
                if (this._freeIdx < 0) {
                  var size = this._frees.length * 2;
                  var temp = this._frees;
                  this._frees = new Array(size);
                  var increase = size - temp.length;

                  for (var i = 0; i < increase; ++i) {
                    this._frees[i] = new Clazz();
                  }

                  for (var _i = increase, j = 0; _i < size; ++_i, ++j) {
                    this._frees[_i] = temp[j];
                  }

                  this._freeIdx += increase;
                }

                var cmd = this._frees[this._freeIdx];
                this._frees[this._freeIdx--] = null;
                ++cmd.refCount;
                return cmd;
              };

              _proto.free = function free(cmd) {
                if (--cmd.refCount === 0) {
                  this._freeCmds.push(cmd);
                }
              };

              _proto.freeCmds = function freeCmds(cmds) {
                for (var i = 0; i < cmds.length; ++i) {
                  if (--cmds.array[i].refCount === 0) {
                    this._freeCmds.push(cmds.array[i]);
                  }
                }
              };

              _proto.release = function release() {
                for (var i = 0; i < this._freeCmds.length; ++i) {
                  var cmd = this._freeCmds.array[i];
                  cmd.clear();
                  this._frees[++this._freeIdx] = cmd;
                }

                this._freeCmds.clear();
              };

              return WebGL2CommandPool;
            }();
            var WebGL2CommandAllocator = function () {
              function WebGL2CommandAllocator() {
                this.beginRenderPassCmdPool = void 0;
                this.bindStatesCmdPool = void 0;
                this.drawCmdPool = void 0;
                this.updateBufferCmdPool = void 0;
                this.copyBufferToTextureCmdPool = void 0;
                this.beginRenderPassCmdPool = new WebGL2CommandPool(WebGL2CmdBeginRenderPass, 1);
                this.bindStatesCmdPool = new WebGL2CommandPool(WebGL2CmdBindStates, 1);
                this.drawCmdPool = new WebGL2CommandPool(WebGL2CmdDraw, 1);
                this.updateBufferCmdPool = new WebGL2CommandPool(WebGL2CmdUpdateBuffer, 1);
                this.copyBufferToTextureCmdPool = new WebGL2CommandPool(WebGL2CmdCopyBufferToTexture, 1);
              }

              var _proto2 = WebGL2CommandAllocator.prototype;

              _proto2.clearCmds = function clearCmds(cmdPackage) {
                if (cmdPackage.beginRenderPassCmds.length) {
                  this.beginRenderPassCmdPool.freeCmds(cmdPackage.beginRenderPassCmds);
                  cmdPackage.beginRenderPassCmds.clear();
                }

                if (cmdPackage.bindStatesCmds.length) {
                  this.bindStatesCmdPool.freeCmds(cmdPackage.bindStatesCmds);
                  cmdPackage.bindStatesCmds.clear();
                }

                if (cmdPackage.drawCmds.length) {
                  this.drawCmdPool.freeCmds(cmdPackage.drawCmds);
                  cmdPackage.drawCmds.clear();
                }

                if (cmdPackage.updateBufferCmds.length) {
                  this.updateBufferCmdPool.freeCmds(cmdPackage.updateBufferCmds);
                  cmdPackage.updateBufferCmds.clear();
                }

                if (cmdPackage.copyBufferToTextureCmds.length) {
                  this.copyBufferToTextureCmdPool.freeCmds(cmdPackage.copyBufferToTextureCmds);
                  cmdPackage.copyBufferToTextureCmds.clear();
                }

                cmdPackage.cmds.clear();
              };

              _proto2.releaseCmds = function releaseCmds() {
                this.beginRenderPassCmdPool.release();
                this.bindStatesCmdPool.release();
                this.drawCmdPool.release();
                this.updateBufferCmdPool.release();
                this.copyBufferToTextureCmdPool.release();
              };

              return WebGL2CommandAllocator;
            }();

            var WebGL2CommandBuffer = function (_CommandBuffer) {
              _inheritsLoose(WebGL2CommandBuffer, _CommandBuffer);

              function WebGL2CommandBuffer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _CommandBuffer.call.apply(_CommandBuffer, [this].concat(args)) || this;
                _this.cmdPackage = new WebGL2CmdPackage();
                _this._cmdAllocator = new WebGL2CommandAllocator();
                _this._isInRenderPass = false;
                _this._curGPUPipelineState = null;
                _this._curGPUDescriptorSets = [];
                _this._curGPUInputAssembler = null;
                _this._curDynamicOffsets = Array(8).fill(0);
                _this._curDynamicStates = new DynamicStates();
                _this._isStateInvalied = false;
                return _this;
              }

              var _proto = WebGL2CommandBuffer.prototype;

              _proto.initialize = function initialize(info) {
                this._type = info.type;
                this._queue = info.queue;
                var setCount = WebGL2DeviceManager.instance.bindingMappings.blockOffsets.length;

                for (var i = 0; i < setCount; i++) {
                  this._curGPUDescriptorSets.push(null);
                }
              };

              _proto.destroy = function destroy() {
                this._cmdAllocator.clearCmds(this.cmdPackage);
              };

              _proto.begin = function begin(renderPass, subpass, frameBuffer) {

                this._cmdAllocator.clearCmds(this.cmdPackage);

                this._curGPUPipelineState = null;
                this._curGPUInputAssembler = null;
                this._curGPUDescriptorSets.length = 0;
                this._numDrawCalls = 0;
                this._numInstances = 0;
                this._numTris = 0;
              };

              _proto.end = function end() {
                if (this._isStateInvalied) {
                  this.bindStates();
                }

                this._isInRenderPass = false;
              };

              _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
                var cmd = this._cmdAllocator.beginRenderPassCmdPool.alloc(WebGL2CmdBeginRenderPass);

                cmd.gpuRenderPass = renderPass.gpuRenderPass;
                cmd.gpuFramebuffer = framebuffer.gpuFramebuffer;
                cmd.renderArea.copy(renderArea);

                for (var i = 0; i < clearColors.length; ++i) {
                  cmd.clearColors[i] = clearColors[i];
                }

                cmd.clearDepth = clearDepth;
                cmd.clearStencil = clearStencil;
                this.cmdPackage.beginRenderPassCmds.push(cmd);
                this.cmdPackage.cmds.push(WebGL2Cmd.BEGIN_RENDER_PASS);
                this._isInRenderPass = true;
              };

              _proto.endRenderPass = function endRenderPass() {
                this._isInRenderPass = false;
              };

              _proto.bindPipelineState = function bindPipelineState(pipelineState) {
                var gpuPipelineState = pipelineState.gpuPipelineState;

                if (gpuPipelineState !== this._curGPUPipelineState) {
                  this._curGPUPipelineState = gpuPipelineState;
                  this._isStateInvalied = true;
                }
              };

              _proto.bindDescriptorSet = function bindDescriptorSet(set, descriptorSet, dynamicOffsets) {
                var gpuDescriptorSets = descriptorSet.gpuDescriptorSet;

                if (gpuDescriptorSets !== this._curGPUDescriptorSets[set]) {
                  this._curGPUDescriptorSets[set] = gpuDescriptorSets;
                  this._isStateInvalied = true;
                }

                if (dynamicOffsets) {
                  var _this$_curGPUPipeline;

                  var gpuPipelineLayout = (_this$_curGPUPipeline = this._curGPUPipelineState) === null || _this$_curGPUPipeline === void 0 ? void 0 : _this$_curGPUPipeline.gpuPipelineLayout;

                  if (gpuPipelineLayout) {
                    var offsets = this._curDynamicOffsets;
                    var idx = gpuPipelineLayout.dynamicOffsetOffsets[set];

                    for (var i = 0; i < dynamicOffsets.length; i++) {
                      offsets[idx + i] = dynamicOffsets[i];
                    }

                    this._isStateInvalied = true;
                  }
                }
              };

              _proto.bindInputAssembler = function bindInputAssembler(inputAssembler) {
                var gpuInputAssembler = inputAssembler.gpuInputAssembler;
                this._curGPUInputAssembler = gpuInputAssembler;
                this._isStateInvalied = true;
              };

              _proto.setViewport = function setViewport(viewport) {
                var cache = this._curDynamicStates.viewport;

                if (cache.left !== viewport.left || cache.top !== viewport.top || cache.width !== viewport.width || cache.height !== viewport.height || cache.minDepth !== viewport.minDepth || cache.maxDepth !== viewport.maxDepth) {
                  cache.left = viewport.left;
                  cache.top = viewport.top;
                  cache.width = viewport.width;
                  cache.height = viewport.height;
                  cache.minDepth = viewport.minDepth;
                  cache.maxDepth = viewport.maxDepth;
                  this._isStateInvalied = true;
                }
              };

              _proto.setScissor = function setScissor(scissor) {
                var cache = this._curDynamicStates.scissor;

                if (cache.x !== scissor.x || cache.y !== scissor.y || cache.width !== scissor.width || cache.height !== scissor.height) {
                  cache.x = scissor.x;
                  cache.y = scissor.y;
                  cache.width = scissor.width;
                  cache.height = scissor.height;
                  this._isStateInvalied = true;
                }
              };

              _proto.setLineWidth = function setLineWidth(lineWidth) {
                if (this._curDynamicStates.lineWidth !== lineWidth) {
                  this._curDynamicStates.lineWidth = lineWidth;
                  this._isStateInvalied = true;
                }
              };

              _proto.setDepthBias = function setDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) {
                var cache = this._curDynamicStates;

                if (cache.depthBiasConstant !== depthBiasConstantFactor || cache.depthBiasClamp !== depthBiasClamp || cache.depthBiasSlope !== depthBiasSlopeFactor) {
                  cache.depthBiasConstant = depthBiasConstantFactor;
                  cache.depthBiasClamp = depthBiasClamp;
                  cache.depthBiasSlope = depthBiasSlopeFactor;
                  this._isStateInvalied = true;
                }
              };

              _proto.setBlendConstants = function setBlendConstants(blendConstants) {
                var cache = this._curDynamicStates.blendConstant;

                if (cache.x !== blendConstants.x || cache.y !== blendConstants.y || cache.z !== blendConstants.z || cache.w !== blendConstants.w) {
                  cache.copy(blendConstants);
                  this._isStateInvalied = true;
                }
              };

              _proto.setDepthBound = function setDepthBound(minDepthBounds, maxDepthBounds) {
                var cache = this._curDynamicStates;

                if (cache.depthMinBounds !== minDepthBounds || cache.depthMaxBounds !== maxDepthBounds) {
                  cache.depthMinBounds = minDepthBounds;
                  cache.depthMaxBounds = maxDepthBounds;
                  this._isStateInvalied = true;
                }
              };

              _proto.setStencilWriteMask = function setStencilWriteMask(face, writeMask) {
                var front = this._curDynamicStates.stencilStatesFront;
                var back = this._curDynamicStates.stencilStatesBack;

                if (face & StencilFace.FRONT) {
                  if (front.writeMask !== writeMask) {
                    front.writeMask = writeMask;
                    this._isStateInvalied = true;
                  }
                }

                if (face & StencilFace.BACK) {
                  if (back.writeMask !== writeMask) {
                    back.writeMask = writeMask;
                    this._isStateInvalied = true;
                  }
                }
              };

              _proto.setStencilCompareMask = function setStencilCompareMask(face, reference, compareMask) {
                var front = this._curDynamicStates.stencilStatesFront;
                var back = this._curDynamicStates.stencilStatesBack;

                if (face & StencilFace.FRONT) {
                  if (front.compareMask !== compareMask || front.reference !== reference) {
                    front.reference = reference;
                    front.compareMask = compareMask;
                    this._isStateInvalied = true;
                  }
                }

                if (face & StencilFace.BACK) {
                  if (back.compareMask !== compareMask || back.reference !== reference) {
                    back.reference = reference;
                    back.compareMask = compareMask;
                    this._isStateInvalied = true;
                  }
                }
              };

              _proto.draw = function draw(infoOrAssembler) {
                if (this._type === CommandBufferType.PRIMARY && this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
                  if (this._isStateInvalied) {
                    this.bindStates();
                  }

                  var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;

                  var cmd = this._cmdAllocator.drawCmdPool.alloc(WebGL2CmdDraw);

                  cmd.drawInfo.copy(info);
                  this.cmdPackage.drawCmds.push(cmd);
                  this.cmdPackage.cmds.push(WebGL2Cmd.DRAW);
                  ++this._numDrawCalls;
                  this._numInstances += info.instanceCount;
                  var indexCount = info.indexCount || info.vertexCount;

                  if (this._curGPUPipelineState) {
                    var glPrimitive = this._curGPUPipelineState.glPrimitive;

                    switch (glPrimitive) {
                      case 0x0004:
                        {
                          this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                          break;
                        }

                      case 0x0005:
                      case 0x0006:
                        {
                          this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                          break;
                        }
                    }
                  }
                } else {
                  console.error('Command \'draw\' must be recorded inside a render pass.');
                }
              };

              _proto.updateBuffer = function updateBuffer(buffer, data, size) {
                if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
                  var gpuBuffer = buffer.gpuBuffer;

                  if (gpuBuffer) {
                    var cmd = this._cmdAllocator.updateBufferCmdPool.alloc(WebGL2CmdUpdateBuffer);

                    var buffSize = 0;
                    var buff = null;

                    if (buffer.usage & BufferUsageBit.INDIRECT) {
                      buff = data;
                    } else {
                      if (size !== undefined) {
                        buffSize = size;
                      } else {
                        buffSize = data.byteLength;
                      }

                      buff = data;
                    }

                    cmd.gpuBuffer = gpuBuffer;
                    cmd.buffer = buff;
                    cmd.offset = 0;
                    cmd.size = buffSize;
                    this.cmdPackage.updateBufferCmds.push(cmd);
                    this.cmdPackage.cmds.push(WebGL2Cmd.UPDATE_BUFFER);
                  }
                } else {
                  console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
                }
              };

              _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
                if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
                  var gpuTexture = texture.gpuTexture;

                  if (gpuTexture) {
                    var cmd = this._cmdAllocator.copyBufferToTextureCmdPool.alloc(WebGL2CmdCopyBufferToTexture);

                    cmd.gpuTexture = gpuTexture;
                    cmd.regions = regions;
                    cmd.buffers = buffers;
                    this.cmdPackage.copyBufferToTextureCmds.push(cmd);
                    this.cmdPackage.cmds.push(WebGL2Cmd.COPY_BUFFER_TO_TEXTURE);
                  }
                } else {
                  console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
                }
              };

              _proto.execute = function execute(cmdBuffs, count) {
                for (var i = 0; i < count; ++i) {
                  var webGL2CmdBuff = cmdBuffs[i];

                  for (var c = 0; c < webGL2CmdBuff.cmdPackage.beginRenderPassCmds.length; ++c) {
                    var cmd = webGL2CmdBuff.cmdPackage.beginRenderPassCmds.array[c];
                    ++cmd.refCount;
                    this.cmdPackage.beginRenderPassCmds.push(cmd);
                  }

                  for (var _c = 0; _c < webGL2CmdBuff.cmdPackage.bindStatesCmds.length; ++_c) {
                    var _cmd = webGL2CmdBuff.cmdPackage.bindStatesCmds.array[_c];
                    ++_cmd.refCount;
                    this.cmdPackage.bindStatesCmds.push(_cmd);
                  }

                  for (var _c2 = 0; _c2 < webGL2CmdBuff.cmdPackage.drawCmds.length; ++_c2) {
                    var _cmd2 = webGL2CmdBuff.cmdPackage.drawCmds.array[_c2];
                    ++_cmd2.refCount;
                    this.cmdPackage.drawCmds.push(_cmd2);
                  }

                  for (var _c3 = 0; _c3 < webGL2CmdBuff.cmdPackage.updateBufferCmds.length; ++_c3) {
                    var _cmd3 = webGL2CmdBuff.cmdPackage.updateBufferCmds.array[_c3];
                    ++_cmd3.refCount;
                    this.cmdPackage.updateBufferCmds.push(_cmd3);
                  }

                  for (var _c4 = 0; _c4 < webGL2CmdBuff.cmdPackage.copyBufferToTextureCmds.length; ++_c4) {
                    var _cmd4 = webGL2CmdBuff.cmdPackage.copyBufferToTextureCmds.array[_c4];
                    ++_cmd4.refCount;
                    this.cmdPackage.copyBufferToTextureCmds.push(_cmd4);
                  }

                  this.cmdPackage.cmds.concat(webGL2CmdBuff.cmdPackage.cmds.array);
                  this._numDrawCalls += webGL2CmdBuff._numDrawCalls;
                  this._numInstances += webGL2CmdBuff._numInstances;
                  this._numTris += webGL2CmdBuff._numTris;
                }
              };

              _proto.pipelineBarrier = function pipelineBarrier(GeneralBarrier, textureBarriers, textures) {};

              _proto.bindStates = function bindStates() {
                var bindStatesCmd = this._cmdAllocator.bindStatesCmdPool.alloc(WebGL2CmdBindStates);

                bindStatesCmd.gpuPipelineState = this._curGPUPipelineState;
                Array.prototype.push.apply(bindStatesCmd.gpuDescriptorSets, this._curGPUDescriptorSets);
                Array.prototype.push.apply(bindStatesCmd.dynamicOffsets, this._curDynamicOffsets);
                bindStatesCmd.gpuInputAssembler = this._curGPUInputAssembler;
                bindStatesCmd.dynamicStates = this._curDynamicStates;
                this.cmdPackage.bindStatesCmds.push(bindStatesCmd);
                this.cmdPackage.cmds.push(WebGL2Cmd.BIND_STATES);
                this._isStateInvalied = false;
              };

              return WebGL2CommandBuffer;
            }(CommandBuffer);

            var WebGL2Framebuffer = function (_Framebuffer) {
              _inheritsLoose(WebGL2Framebuffer, _Framebuffer);

              function WebGL2Framebuffer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Framebuffer.call.apply(_Framebuffer, [this].concat(args)) || this;
                _this._gpuFramebuffer = null;
                return _this;
              }

              var _proto = WebGL2Framebuffer.prototype;

              _proto.initialize = function initialize(info) {
                this._renderPass = info.renderPass;
                this._colorTextures = info.colorTextures || [];
                this._depthStencilTexture = info.depthStencilTexture || null;
                var gpuColorViews = [];

                for (var i = 0; i < info.colorTextures.length; i++) {
                  var colorTexture = info.colorTextures[i];

                  if (colorTexture) {
                    gpuColorViews.push(colorTexture.gpuTextureView);
                  }
                }

                var gpuDepthStencilView = null;

                if (info.depthStencilTexture) {
                  gpuDepthStencilView = info.depthStencilTexture.gpuTextureView;
                }

                var width = Number.MAX_SAFE_INTEGER;
                this._gpuFramebuffer = {
                  gpuRenderPass: info.renderPass.gpuRenderPass,
                  gpuColorViews: gpuColorViews,
                  gpuDepthStencilView: gpuDepthStencilView,
                  glFramebuffer: null,
                  isOffscreen: true,

                  get width() {
                    if (this.isOffscreen) {
                      return width;
                    } else if (this.gpuColorViews.length > 0) {
                      return this.gpuColorViews[0].gpuTexture.width;
                    } else {
                      return this.gpuDepthStencilView.gpuTexture.width;
                    }
                  },

                  set width(val) {
                    width = val;
                  },

                  get height() {
                    if (this.isOffscreen) {
                      return width;
                    } else if (this.gpuColorViews.length > 0) {
                      return this.gpuColorViews[0].gpuTexture.height;
                    } else {
                      return this.gpuDepthStencilView.gpuTexture.height;
                    }
                  },

                  set height(val) {
                  }

                };
                WebGL2CmdFuncCreateFramebuffer(WebGL2DeviceManager.instance, this._gpuFramebuffer);
              };

              _proto.destroy = function destroy() {
                if (this._gpuFramebuffer) {
                  WebGL2CmdFuncDestroyFramebuffer(WebGL2DeviceManager.instance, this._gpuFramebuffer);
                  this._gpuFramebuffer = null;
                }
              };

              _createClass(WebGL2Framebuffer, [{
                key: "gpuFramebuffer",
                get: function get() {
                  return this._gpuFramebuffer;
                }
              }]);

              return WebGL2Framebuffer;
            }(Framebuffer);

            var WebGL2InputAssembler = function (_InputAssembler) {
              _inheritsLoose(WebGL2InputAssembler, _InputAssembler);

              function WebGL2InputAssembler() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _InputAssembler.call.apply(_InputAssembler, [this].concat(args)) || this;
                _this._gpuInputAssembler = null;
                return _this;
              }

              var _proto = WebGL2InputAssembler.prototype;

              _proto.initialize = function initialize(info) {
                if (info.vertexBuffers.length === 0) {
                  console.error('InputAssemblerInfo.vertexBuffers is null.');
                  return;
                }

                this._attributes = info.attributes;
                this._attributesHash = this.computeAttributesHash();
                this._vertexBuffers = info.vertexBuffers;

                if (info.indexBuffer) {
                  this._indexBuffer = info.indexBuffer;
                  this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride;
                  this._drawInfo.firstIndex = 0;
                } else {
                  var vertBuff = this._vertexBuffers[0];
                  this._drawInfo.vertexCount = vertBuff.size / vertBuff.stride;
                  this._drawInfo.firstVertex = 0;
                  this._drawInfo.vertexOffset = 0;
                }

                this._drawInfo.instanceCount = 0;
                this._drawInfo.firstInstance = 0;
                this._indirectBuffer = info.indirectBuffer || null;
                var gpuVertexBuffers = new Array(info.vertexBuffers.length);

                for (var i = 0; i < info.vertexBuffers.length; ++i) {
                  var vb = info.vertexBuffers[i];

                  if (vb.gpuBuffer) {
                    gpuVertexBuffers[i] = vb.gpuBuffer;
                  }
                }

                var gpuIndexBuffer = null;
                var glIndexType = 0;

                if (info.indexBuffer) {
                  gpuIndexBuffer = info.indexBuffer.gpuBuffer;

                  if (gpuIndexBuffer) {
                    switch (gpuIndexBuffer.stride) {
                      case 1:
                        glIndexType = 0x1401;
                        break;

                      case 2:
                        glIndexType = 0x1403;
                        break;

                      case 4:
                        glIndexType = 0x1405;
                        break;

                      default:
                        {
                          console.error('Illegal index buffer stride.');
                        }
                    }
                  }
                }

                var gpuIndirectBuffer = null;

                if (info.indirectBuffer) {
                  gpuIndirectBuffer = info.indirectBuffer.gpuBuffer;
                }

                this._gpuInputAssembler = {
                  attributes: info.attributes,
                  gpuVertexBuffers: gpuVertexBuffers,
                  gpuIndexBuffer: gpuIndexBuffer,
                  gpuIndirectBuffer: gpuIndirectBuffer,
                  glAttribs: [],
                  glIndexType: glIndexType,
                  glVAOs: new Map()
                };
                WebGL2CmdFuncCreateInputAssember(WebGL2DeviceManager.instance, this._gpuInputAssembler);
              };

              _proto.destroy = function destroy() {
                var device = WebGL2DeviceManager.instance;

                if (this._gpuInputAssembler && device.extensions.useVAO) {
                  WebGL2CmdFuncDestroyInputAssembler(device, this._gpuInputAssembler);
                }

                this._gpuInputAssembler = null;
              };

              _createClass(WebGL2InputAssembler, [{
                key: "gpuInputAssembler",
                get: function get() {
                  return this._gpuInputAssembler;
                }
              }]);

              return WebGL2InputAssembler;
            }(InputAssembler);

            var WebGL2DescriptorSetLayout = function (_DescriptorSetLayout) {
              _inheritsLoose(WebGL2DescriptorSetLayout, _DescriptorSetLayout);

              function WebGL2DescriptorSetLayout() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _DescriptorSetLayout.call.apply(_DescriptorSetLayout, [this].concat(args)) || this;
                _this._gpuDescriptorSetLayout = null;
                return _this;
              }

              var _proto = WebGL2DescriptorSetLayout.prototype;

              _proto.initialize = function initialize(info) {
                Array.prototype.push.apply(this._bindings, info.bindings);
                var descriptorCount = 0;
                var maxBinding = -1;
                var flattenedIndices = [];

                for (var i = 0; i < this._bindings.length; i++) {
                  var binding = this._bindings[i];
                  flattenedIndices.push(descriptorCount);
                  descriptorCount += binding.count;
                  if (binding.binding > maxBinding) maxBinding = binding.binding;
                }

                this._bindingIndices = Array(maxBinding + 1).fill(-1);
                var descriptorIndices = this._descriptorIndices = Array(maxBinding + 1).fill(-1);

                for (var _i = 0; _i < this._bindings.length; _i++) {
                  var _binding = this._bindings[_i];
                  this._bindingIndices[_binding.binding] = _i;
                  descriptorIndices[_binding.binding] = flattenedIndices[_i];
                }

                var dynamicBindings = [];

                for (var _i2 = 0; _i2 < this._bindings.length; _i2++) {
                  var _binding2 = this._bindings[_i2];

                  if (_binding2.descriptorType & DESCRIPTOR_DYNAMIC_TYPE) {
                    for (var j = 0; j < _binding2.count; j++) {
                      dynamicBindings.push(_binding2.binding);
                    }
                  }
                }

                this._gpuDescriptorSetLayout = {
                  bindings: this._bindings,
                  dynamicBindings: dynamicBindings,
                  descriptorIndices: descriptorIndices,
                  descriptorCount: descriptorCount
                };
              };

              _proto.destroy = function destroy() {
                this._bindings.length = 0;
              };

              _createClass(WebGL2DescriptorSetLayout, [{
                key: "gpuDescriptorSetLayout",
                get: function get() {
                  return this._gpuDescriptorSetLayout;
                }
              }]);

              return WebGL2DescriptorSetLayout;
            }(DescriptorSetLayout);

            var WebGL2PipelineLayout = function (_PipelineLayout) {
              _inheritsLoose(WebGL2PipelineLayout, _PipelineLayout);

              function WebGL2PipelineLayout() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _PipelineLayout.call.apply(_PipelineLayout, [this].concat(args)) || this;
                _this._gpuPipelineLayout = null;
                return _this;
              }

              var _proto = WebGL2PipelineLayout.prototype;

              _proto.initialize = function initialize(info) {
                Array.prototype.push.apply(this._setLayouts, info.setLayouts);
                var dynamicOffsetIndices = [];
                var gpuSetLayouts = [];
                var dynamicOffsetCount = 0;
                var dynamicOffsetOffsets = [];

                for (var i = 0; i < this._setLayouts.length; i++) {
                  var setLayout = this._setLayouts[i];
                  var dynamicBindings = setLayout.gpuDescriptorSetLayout.dynamicBindings;
                  var indices = Array(setLayout.bindingIndices.length).fill(-1);

                  for (var j = 0; j < dynamicBindings.length; j++) {
                    var binding = dynamicBindings[j];
                    if (indices[binding] < 0) indices[binding] = dynamicOffsetCount + j;
                  }

                  gpuSetLayouts.push(setLayout.gpuDescriptorSetLayout);
                  dynamicOffsetIndices.push(indices);
                  dynamicOffsetOffsets.push(dynamicOffsetCount);
                  dynamicOffsetCount += dynamicBindings.length;
                }

                this._gpuPipelineLayout = {
                  gpuSetLayouts: gpuSetLayouts,
                  dynamicOffsetIndices: dynamicOffsetIndices,
                  dynamicOffsetCount: dynamicOffsetCount,
                  dynamicOffsetOffsets: dynamicOffsetOffsets
                };
              };

              _proto.destroy = function destroy() {
                this._setLayouts.length = 0;
              };

              _createClass(WebGL2PipelineLayout, [{
                key: "gpuPipelineLayout",
                get: function get() {
                  return this._gpuPipelineLayout;
                }
              }]);

              return WebGL2PipelineLayout;
            }(PipelineLayout);

            var WebGLPrimitives$1 = [0x0000, 0x0001, 0x0003, 0x0002, 0x0000, 0x0000, 0x0000, 0x0004, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000];
            var WebGL2PipelineState = function (_PipelineState) {
              _inheritsLoose(WebGL2PipelineState, _PipelineState);

              function WebGL2PipelineState() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _PipelineState.call.apply(_PipelineState, [this].concat(args)) || this;
                _this._gpuPipelineState = null;
                return _this;
              }

              var _proto = WebGL2PipelineState.prototype;

              _proto.initialize = function initialize(info) {
                this._primitive = info.primitive;
                this._shader = info.shader;
                this._pipelineLayout = info.pipelineLayout;
                var bs = this._bs;

                if (info.blendState) {
                  var bsInfo = info.blendState;
                  var targets = bsInfo.targets;

                  if (targets) {
                    targets.forEach(function (t, i) {
                      bs.setTarget(i, t);
                    });
                  }

                  if (bsInfo.isA2C !== undefined) {
                    bs.isA2C = bsInfo.isA2C;
                  }

                  if (bsInfo.isIndepend !== undefined) {
                    bs.isIndepend = bsInfo.isIndepend;
                  }

                  if (bsInfo.blendColor !== undefined) {
                    bs.blendColor = bsInfo.blendColor;
                  }
                }

                Object.assign(this._rs, info.rasterizerState);
                Object.assign(this._dss, info.depthStencilState);
                this._is = info.inputState;
                this._renderPass = info.renderPass;
                this._dynamicStates = info.dynamicStates;
                var dynamicStates = [];

                for (var i = 0; i < 31; i++) {
                  if (this._dynamicStates & 1 << i) {
                    dynamicStates.push(1 << i);
                  }
                }

                this._gpuPipelineState = {
                  glPrimitive: WebGLPrimitives$1[info.primitive],
                  gpuShader: info.shader.gpuShader,
                  gpuPipelineLayout: info.pipelineLayout.gpuPipelineLayout,
                  rs: info.rasterizerState,
                  dss: info.depthStencilState,
                  bs: info.blendState,
                  gpuRenderPass: info.renderPass.gpuRenderPass,
                  dynamicStates: dynamicStates
                };
              };

              _proto.destroy = function destroy() {
                this._gpuPipelineState = null;
              };

              _createClass(WebGL2PipelineState, [{
                key: "gpuPipelineState",
                get: function get() {
                  return this._gpuPipelineState;
                }
              }]);

              return WebGL2PipelineState;
            }(PipelineState);

            var WebGL2PrimaryCommandBuffer = function (_WebGL2CommandBuffer) {
              _inheritsLoose(WebGL2PrimaryCommandBuffer, _WebGL2CommandBuffer);

              function WebGL2PrimaryCommandBuffer() {
                return _WebGL2CommandBuffer.apply(this, arguments) || this;
              }

              var _proto = WebGL2PrimaryCommandBuffer.prototype;

              _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
                WebGL2CmdFuncBeginRenderPass(WebGL2DeviceManager.instance, renderPass.gpuRenderPass, framebuffer.gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil);
                this._isInRenderPass = true;
              };

              _proto.draw = function draw(infoOrAssembler) {
                if (this._isInRenderPass) {
                  if (this._isStateInvalied) {
                    this.bindStates();
                  }

                  var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;
                  WebGL2CmdFuncDraw(WebGL2DeviceManager.instance, info);
                  ++this._numDrawCalls;
                  this._numInstances += info.instanceCount;
                  var indexCount = info.indexCount || info.vertexCount;

                  if (this._curGPUPipelineState) {
                    var glPrimitive = this._curGPUPipelineState.glPrimitive;

                    switch (glPrimitive) {
                      case 0x0004:
                        {
                          this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                          break;
                        }

                      case 0x0005:
                      case 0x0006:
                        {
                          this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                          break;
                        }
                    }
                  }
                } else {
                  console.error('Command \'draw\' must be recorded inside a render pass.');
                }
              };

              _proto.setViewport = function setViewport(viewport) {
                var _WebGL2DeviceManager$ = WebGL2DeviceManager.instance,
                    cache = _WebGL2DeviceManager$.stateCache,
                    gl = _WebGL2DeviceManager$.gl;

                if (cache.viewport.left !== viewport.left || cache.viewport.top !== viewport.top || cache.viewport.width !== viewport.width || cache.viewport.height !== viewport.height) {
                  gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);
                  cache.viewport.left = viewport.left;
                  cache.viewport.top = viewport.top;
                  cache.viewport.width = viewport.width;
                  cache.viewport.height = viewport.height;
                }
              };

              _proto.setScissor = function setScissor(scissor) {
                var _WebGL2DeviceManager$2 = WebGL2DeviceManager.instance,
                    cache = _WebGL2DeviceManager$2.stateCache,
                    gl = _WebGL2DeviceManager$2.gl;

                if (cache.scissorRect.x !== scissor.x || cache.scissorRect.y !== scissor.y || cache.scissorRect.width !== scissor.width || cache.scissorRect.height !== scissor.height) {
                  gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);
                  cache.scissorRect.x = scissor.x;
                  cache.scissorRect.y = scissor.y;
                  cache.scissorRect.width = scissor.width;
                  cache.scissorRect.height = scissor.height;
                }
              };

              _proto.updateBuffer = function updateBuffer(buffer, data, size) {
                if (!this._isInRenderPass) {
                  var gpuBuffer = buffer.gpuBuffer;

                  if (gpuBuffer) {
                    var buffSize;

                    if (size !== undefined) {
                      buffSize = size;
                    } else if (buffer.usage & BufferUsageBit.INDIRECT) {
                      buffSize = 0;
                    } else {
                      buffSize = data.byteLength;
                    }

                    WebGL2CmdFuncUpdateBuffer(WebGL2DeviceManager.instance, gpuBuffer, data, 0, buffSize);
                  }
                } else {
                  console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
                }
              };

              _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
                if (!this._isInRenderPass) {
                  var gpuTexture = texture.gpuTexture;

                  if (gpuTexture) {
                    WebGL2CmdFuncCopyBuffersToTexture(WebGL2DeviceManager.instance, buffers, gpuTexture, regions);
                  }
                } else {
                  console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
                }
              };

              _proto.execute = function execute(cmdBuffs, count) {
                for (var i = 0; i < count; ++i) {
                  var webGL2CmdBuff = cmdBuffs[i];
                  WebGL2CmdFuncExecuteCmds(WebGL2DeviceManager.instance, webGL2CmdBuff.cmdPackage);
                  this._numDrawCalls += webGL2CmdBuff._numDrawCalls;
                  this._numInstances += webGL2CmdBuff._numInstances;
                  this._numTris += webGL2CmdBuff._numTris;
                }
              };

              _proto.bindStates = function bindStates() {
                WebGL2CmdFuncBindStates(WebGL2DeviceManager.instance, this._curGPUPipelineState, this._curGPUInputAssembler, this._curGPUDescriptorSets, this._curDynamicOffsets, this._curDynamicStates);
                this._isStateInvalied = false;
              };

              return WebGL2PrimaryCommandBuffer;
            }(WebGL2CommandBuffer);

            var WebGL2Queue = function (_Queue) {
              _inheritsLoose(WebGL2Queue, _Queue);

              function WebGL2Queue() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Queue.call.apply(_Queue, [this].concat(args)) || this;
                _this.numDrawCalls = 0;
                _this.numInstances = 0;
                _this.numTris = 0;
                return _this;
              }

              var _proto = WebGL2Queue.prototype;

              _proto.initialize = function initialize(info) {
                this._type = info.type;
              };

              _proto.destroy = function destroy() {};

              _proto.submit = function submit(cmdBuffs) {
                for (var i = 0; i < cmdBuffs.length; i++) {
                  var cmdBuff = cmdBuffs[i];
                  this.numDrawCalls += cmdBuff.numDrawCalls;
                  this.numInstances += cmdBuff.numInstances;
                  this.numTris += cmdBuff.numTris;
                }
              };

              _proto.clear = function clear() {
                this.numDrawCalls = 0;
                this.numInstances = 0;
                this.numTris = 0;
              };

              return WebGL2Queue;
            }(Queue);

            var WebGL2RenderPass = function (_RenderPass) {
              _inheritsLoose(WebGL2RenderPass, _RenderPass);

              function WebGL2RenderPass() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _RenderPass.call.apply(_RenderPass, [this].concat(args)) || this;
                _this._gpuRenderPass = null;
                return _this;
              }

              var _proto = WebGL2RenderPass.prototype;

              _proto.initialize = function initialize(info) {
                this._colorInfos = info.colorAttachments;
                this._depthStencilInfo = info.depthStencilAttachment;
                this._subpasses = info.subpasses;
                this._gpuRenderPass = {
                  colorAttachments: this._colorInfos,
                  depthStencilAttachment: this._depthStencilInfo
                };
                this._hash = this.computeHash();
              };

              _proto.destroy = function destroy() {
                this._gpuRenderPass = null;
              };

              _createClass(WebGL2RenderPass, [{
                key: "gpuRenderPass",
                get: function get() {
                  return this._gpuRenderPass;
                }
              }]);

              return WebGL2RenderPass;
            }(RenderPass);

            var WebGL2Sampler = function (_Sampler) {
              _inheritsLoose(WebGL2Sampler, _Sampler);

              function WebGL2Sampler(info, hash) {
                var _this;

                _this = _Sampler.call(this, info, hash) || this;
                _this._gpuSampler = null;
                _this._gpuSampler = {
                  glSamplers: new Map(),
                  minFilter: _this._info.minFilter,
                  magFilter: _this._info.magFilter,
                  mipFilter: _this._info.mipFilter,
                  addressU: _this._info.addressU,
                  addressV: _this._info.addressV,
                  addressW: _this._info.addressW,
                  glMinFilter: 0,
                  glMagFilter: 0,
                  glWrapS: 0,
                  glWrapT: 0,
                  glWrapR: 0,
                  getGLSampler: function getGLSampler(device, minLod, maxLod) {
                    var gl = device.gl;
                    var samplerHash = minLod << 16 | maxLod;

                    if (!this.glSamplers.has(samplerHash)) {
                      var glSampler = gl.createSampler();

                      if (glSampler) {
                        this.glSamplers.set(samplerHash, glSampler);
                        gl.samplerParameteri(glSampler, gl.TEXTURE_MIN_FILTER, this.glMinFilter);
                        gl.samplerParameteri(glSampler, gl.TEXTURE_MAG_FILTER, this.glMagFilter);
                        gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_S, this.glWrapS);
                        gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_T, this.glWrapT);
                        gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_R, this.glWrapR);
                        gl.samplerParameterf(glSampler, gl.TEXTURE_MIN_LOD, minLod);
                        gl.samplerParameterf(glSampler, gl.TEXTURE_MAX_LOD, maxLod);
                      }
                    }

                    var sampler = this.glSamplers.get(samplerHash);
                    return sampler;
                  }
                };
                WebGL2CmdFuncPrepareSamplerInfo(WebGL2DeviceManager.instance, _this._gpuSampler);
                return _this;
              }

              var _proto = WebGL2Sampler.prototype;

              _proto.destroy = function destroy() {
                if (this._gpuSampler) {
                  WebGL2CmdFuncDestroySampler(WebGL2DeviceManager.instance, this._gpuSampler);
                  this._gpuSampler = null;
                }
              };

              _createClass(WebGL2Sampler, [{
                key: "gpuSampler",
                get: function get() {
                  return this._gpuSampler;
                }
              }]);

              return WebGL2Sampler;
            }(Sampler);

            var WebGL2Shader = function (_Shader) {
              _inheritsLoose(WebGL2Shader, _Shader);

              function WebGL2Shader() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Shader.call.apply(_Shader, [this].concat(args)) || this;
                _this._gpuShader = null;
                return _this;
              }

              var _proto = WebGL2Shader.prototype;

              _proto.initialize = function initialize(info) {
                this._name = info.name;
                this._stages = info.stages;
                this._attributes = info.attributes;
                this._blocks = info.blocks;
                this._samplers = info.samplers;
                this._gpuShader = {
                  name: info.name,
                  blocks: info.blocks.slice(),
                  samplerTextures: info.samplerTextures.slice(),
                  subpassInputs: info.subpassInputs.slice(),
                  gpuStages: new Array(info.stages.length),
                  glProgram: null,
                  glInputs: [],
                  glUniforms: [],
                  glBlocks: [],
                  glSamplerTextures: []
                };

                for (var i = 0; i < info.stages.length; ++i) {
                  var stage = info.stages[i];
                  this._gpuShader.gpuStages[i] = {
                    type: stage.stage,
                    source: stage.source,
                    glShader: null
                  };
                }

                WebGL2CmdFuncCreateShader(WebGL2DeviceManager.instance, this._gpuShader);
              };

              _proto.destroy = function destroy() {
                if (this._gpuShader) {
                  WebGL2CmdFuncDestroyShader(WebGL2DeviceManager.instance, this._gpuShader);
                  this._gpuShader = null;
                }
              };

              _createClass(WebGL2Shader, [{
                key: "gpuShader",
                get: function get() {
                  return this._gpuShader;
                }
              }]);

              return WebGL2Shader;
            }(Shader);

            var WebGL2StateCache = function () {
              function WebGL2StateCache() {
                this.glArrayBuffer = null;
                this.glElementArrayBuffer = null;
                this.glUniformBuffer = null;
                this.glBindUBOs = [];
                this.glBindUBOOffsets = [];
                this.glVAO = null;
                this.texUnit = 0;
                this.glTexUnits = [];
                this.glSamplerUnits = [];
                this.glRenderbuffer = null;
                this.glFramebuffer = null;
                this.glReadFramebuffer = null;
                this.viewport = new Viewport();
                this.scissorRect = new Rect(0, 0, 0, 0);
                this.rs = new RasterizerState();
                this.dss = new DepthStencilState();
                this.bs = new BlendState();
                this.glProgram = null;
                this.glEnabledAttribLocs = [];
                this.glCurrentAttribLocs = [];
                this.texUnitCacheMap = {};
              }

              var _proto = WebGL2StateCache.prototype;

              _proto.initialize = function initialize(texUnit, bufferBindings, vertexAttributes) {
                for (var i = 0; i < texUnit; ++i) {
                  this.glTexUnits.push({
                    glTexture: null
                  });
                }

                this.glSamplerUnits.length = texUnit;
                this.glSamplerUnits.fill(null);
                this.glBindUBOs.length = bufferBindings;
                this.glBindUBOs.fill(null);
                this.glBindUBOOffsets.length = bufferBindings;
                this.glBindUBOOffsets.fill(0);
                this.glEnabledAttribLocs.length = vertexAttributes;
                this.glEnabledAttribLocs.fill(false);
                this.glCurrentAttribLocs.length = vertexAttributes;
                this.glCurrentAttribLocs.fill(false);
              };

              return WebGL2StateCache;
            }();

            var WebGL2Texture = function (_Texture) {
              _inheritsLoose(WebGL2Texture, _Texture);

              function WebGL2Texture() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Texture.call.apply(_Texture, [this].concat(args)) || this;
                _this._gpuTexture = null;
                _this._gpuTextureView = null;
                return _this;
              }

              var _proto = WebGL2Texture.prototype;

              _proto.initialize = function initialize(info, isSwapchainTexture) {
                var texInfo = info;
                var viewInfo = info;

                if ('texture' in info) {
                  texInfo = viewInfo.texture.info;
                  this._isTextureView = true;
                }

                this._info.copy(texInfo);

                this._isPowerOf2 = IsPowerOf2(this._info.width) && IsPowerOf2(this._info.height);
                this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

                if (!this._isTextureView) {
                  this._gpuTexture = {
                    type: texInfo.type,
                    format: texInfo.format,
                    usage: texInfo.usage,
                    width: texInfo.width,
                    height: texInfo.height,
                    depth: texInfo.depth,
                    size: this._size,
                    arrayLayer: texInfo.layerCount,
                    mipLevel: texInfo.levelCount,
                    samples: texInfo.samples,
                    flags: texInfo.flags,
                    isPowerOf2: this._isPowerOf2,
                    glTarget: 0,
                    glInternalFmt: 0,
                    glFormat: 0,
                    glType: 0,
                    glUsage: 0,
                    glTexture: null,
                    glRenderbuffer: null,
                    glWrapS: 0,
                    glWrapT: 0,
                    glMinFilter: 0,
                    glMagFilter: 0,
                    isSwapchainTexture: isSwapchainTexture || false
                  };
                  WebGL2CmdFuncCreateTexture(WebGL2DeviceManager.instance, this._gpuTexture);
                  WebGL2DeviceManager.instance.memoryStatus.textureSize += this._size;
                  this._viewInfo.texture = this;
                  this._viewInfo.type = info.type;
                  this._viewInfo.format = info.format;
                  this._viewInfo.baseLevel = 0;
                  this._viewInfo.levelCount = info.levelCount;
                  this._viewInfo.baseLayer = 0;
                  this._viewInfo.layerCount = info.layerCount;
                  this._gpuTextureView = {
                    gpuTexture: this._gpuTexture,
                    type: this._viewInfo.type,
                    format: this._viewInfo.format,
                    baseLevel: this._viewInfo.baseLevel,
                    levelCount: this._viewInfo.levelCount
                  };
                } else {
                  var _this$_gpuTexture;

                  this._viewInfo.copy(viewInfo);

                  this._gpuTexture = viewInfo.texture._gpuTexture;

                  if (((_this$_gpuTexture = this._gpuTexture) === null || _this$_gpuTexture === void 0 ? void 0 : _this$_gpuTexture.format) !== texInfo.format) {
                    console.log('GPU memory alias is not supported');
                    return;
                  }

                  this._gpuTextureView = {
                    gpuTexture: this._gpuTexture,
                    type: viewInfo.type,
                    format: viewInfo.format,
                    baseLevel: viewInfo.baseLevel,
                    levelCount: viewInfo.levelCount
                  };
                }
              };

              _proto.destroy = function destroy() {
                if (!this._isTextureView && this._gpuTexture) {
                  WebGL2CmdFuncDestroyTexture(WebGL2DeviceManager.instance, this._gpuTexture);
                  WebGL2DeviceManager.instance.memoryStatus.textureSize -= this._size;
                  this._gpuTexture = null;
                }
              };

              _proto.resize = function resize(width, height) {
                if (this._info.width === width && this._info.height === height) {
                  return;
                }

                if (this._info.levelCount === WebGL2Texture.getLevelCount(this._info.width, this._info.height)) {
                  this._info.levelCount = WebGL2Texture.getLevelCount(width, height);
                } else if (this._info.levelCount > 1) {
                  this._info.levelCount = Math.min(this._info.levelCount, WebGL2Texture.getLevelCount(width, height));
                }

                var oldSize = this._size;
                this._info.width = width;
                this._info.height = height;
                this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

                if (!this._isTextureView && this._gpuTexture) {
                  this._gpuTexture.width = width;
                  this._gpuTexture.height = height;
                  this._gpuTexture.size = this._size;
                  WebGL2CmdFuncResizeTexture(WebGL2DeviceManager.instance, this._gpuTexture);
                  WebGL2DeviceManager.instance.memoryStatus.textureSize -= oldSize;
                  WebGL2DeviceManager.instance.memoryStatus.textureSize += this._size;
                }
              };

              _proto.initAsSwapchainTexture = function initAsSwapchainTexture(info) {
                var texInfo = new TextureInfo();
                texInfo.format = info.format;
                texInfo.usage = FormatInfos[info.format].hasDepth ? TextureUsageBit.DEPTH_STENCIL_ATTACHMENT : TextureUsageBit.COLOR_ATTACHMENT;
                texInfo.width = info.width;
                texInfo.height = info.height;
                this.initialize(texInfo, true);
              };

              _createClass(WebGL2Texture, [{
                key: "gpuTexture",
                get: function get() {
                  return this._gpuTexture;
                }
              }, {
                key: "gpuTextureView",
                get: function get() {
                  return this._gpuTextureView;
                }
              }]);

              return WebGL2Texture;
            }(Texture);

            var eventWebGLContextLost$1 = 'webglcontextlost';

            function initStates$1(gl) {
              gl.activeTexture(gl.TEXTURE0);
              gl.pixelStorei(gl.PACK_ALIGNMENT, 1);
              gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              gl.enable(gl.SCISSOR_TEST);
              gl.enable(gl.CULL_FACE);
              gl.cullFace(gl.BACK);
              gl.frontFace(gl.CCW);
              gl.polygonOffset(0.0, 0.0);
              gl.enable(gl.DEPTH_TEST);
              gl.depthMask(true);
              gl.depthFunc(gl.LESS);
              gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 1, 0xffff);
              gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);
              gl.stencilMaskSeparate(gl.FRONT, 0xffff);
              gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 1, 0xffff);
              gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);
              gl.stencilMaskSeparate(gl.BACK, 0xffff);
              gl.disable(gl.STENCIL_TEST);
              gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
              gl.disable(gl.BLEND);
              gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
              gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
              gl.colorMask(true, true, true, true);
              gl.blendColor(0.0, 0.0, 0.0, 0.0);
            }

            function getExtension$1(gl, ext) {
              var prefixes = ['', 'WEBKIT_', 'MOZ_'];

              for (var i = 0; i < prefixes.length; ++i) {
                var _ext = gl.getExtension(prefixes[i] + ext);

                if (_ext) {
                  return _ext;
                }
              }

              return null;
            }

            function getExtensions$1(gl) {
              var res = {
                EXT_texture_filter_anisotropic: getExtension$1(gl, 'EXT_texture_filter_anisotropic'),
                EXT_color_buffer_half_float: getExtension$1(gl, 'EXT_color_buffer_half_float'),
                EXT_color_buffer_float: getExtension$1(gl, 'EXT_color_buffer_float'),
                WEBGL_compressed_texture_etc1: getExtension$1(gl, 'WEBGL_compressed_texture_etc1'),
                WEBGL_compressed_texture_etc: getExtension$1(gl, 'WEBGL_compressed_texture_etc'),
                WEBGL_compressed_texture_pvrtc: getExtension$1(gl, 'WEBGL_compressed_texture_pvrtc'),
                WEBGL_compressed_texture_astc: getExtension$1(gl, 'WEBGL_compressed_texture_astc'),
                WEBGL_compressed_texture_s3tc: getExtension$1(gl, 'WEBGL_compressed_texture_s3tc'),
                WEBGL_compressed_texture_s3tc_srgb: getExtension$1(gl, 'WEBGL_compressed_texture_s3tc_srgb'),
                WEBGL_debug_shaders: getExtension$1(gl, 'WEBGL_debug_shaders'),
                WEBGL_lose_context: getExtension$1(gl, 'WEBGL_lose_context'),
                WEBGL_debug_renderer_info: getExtension$1(gl, 'WEBGL_debug_renderer_info'),
                OES_texture_half_float_linear: getExtension$1(gl, 'OES_texture_half_float_linear'),
                OES_texture_float_linear: getExtension$1(gl, 'OES_texture_float_linear'),
                WEBGL_multi_draw: null,
                useVAO: true
              };
              {
                if (systemInfo.os !== OS.ANDROID && systemInfo.os !== OS.IOS) {
                  res.WEBGL_multi_draw = getExtension$1(gl, 'WEBGL_multi_draw');
                }
              }
              return res;
            }
            function getContext$1(canvas) {
              var context = null;

              try {
                var webGLCtxAttribs = {
                  alpha: macro.ENABLE_TRANSPARENT_CANVAS,
                  antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,
                  depth: true,
                  stencil: true,
                  premultipliedAlpha: false,
                  preserveDrawingBuffer: false,
                  powerPreference: 'default',
                  failIfMajorPerformanceCaveat: false
                };
                context = canvas.getContext('webgl2', webGLCtxAttribs);
              } catch (err) {
                return null;
              }

              return context;
            }
            var WebGL2Swapchain = function (_Swapchain) {
              _inheritsLoose(WebGL2Swapchain, _Swapchain);

              function WebGL2Swapchain() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Swapchain.call.apply(_Swapchain, [this].concat(args)) || this;
                _this.stateCache = new WebGL2StateCache();
                _this.nullTex2D = null;
                _this.nullTexCube = null;
                _this._canvas = null;
                _this._webGL2ContextLostHandler = null;
                _this._extensions = null;
                return _this;
              }

              var _proto = WebGL2Swapchain.prototype;

              _proto.initialize = function initialize(info) {
                this._canvas = info.windowHandle;
                this._webGL2ContextLostHandler = this._onWebGLContextLost.bind(this);

                this._canvas.addEventListener(eventWebGLContextLost$1, this._onWebGLContextLost);

                var gl = WebGL2DeviceManager.instance.gl;
                this.stateCache.initialize(WebGL2DeviceManager.instance.capabilities.maxTextureUnits, WebGL2DeviceManager.instance.capabilities.maxUniformBufferBindings, WebGL2DeviceManager.instance.capabilities.maxVertexAttributes);
                this._extensions = getExtensions$1(gl);
                initStates$1(gl);
                var colorFmt = Format.RGBA8;
                var depthStencilFmt = Format.DEPTH_STENCIL;
                var depthBits = gl.getParameter(gl.DEPTH_BITS);
                var stencilBits = gl.getParameter(gl.STENCIL_BITS);
                if (depthBits && stencilBits) depthStencilFmt = Format.DEPTH_STENCIL;else if (depthBits) depthStencilFmt = Format.DEPTH;
                this._colorTexture = new WebGL2Texture();

                this._colorTexture.initAsSwapchainTexture({
                  swapchain: this,
                  format: colorFmt,
                  width: info.width,
                  height: info.height
                });

                this._depthStencilTexture = new WebGL2Texture();

                this._depthStencilTexture.initAsSwapchainTexture({
                  swapchain: this,
                  format: depthStencilFmt,
                  width: info.width,
                  height: info.height
                });

                this.nullTex2D = WebGL2DeviceManager.instance.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE));
                this.nullTexCube = WebGL2DeviceManager.instance.createTexture(new TextureInfo(TextureType.CUBE, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 6));
                var nullTexRegion = new BufferTextureCopy();
                nullTexRegion.texExtent.width = 2;
                nullTexRegion.texExtent.height = 2;
                var nullTexBuff = new Uint8Array(this.nullTex2D.size);
                nullTexBuff.fill(0);
                WebGL2DeviceManager.instance.copyBuffersToTexture([nullTexBuff], this.nullTex2D, [nullTexRegion]);
                nullTexRegion.texSubres.layerCount = 6;
                WebGL2DeviceManager.instance.copyBuffersToTexture([nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff], this.nullTexCube, [nullTexRegion]);
              };

              _proto.destroy = function destroy() {
                if (this._canvas && this._webGL2ContextLostHandler) {
                  this._canvas.removeEventListener(eventWebGLContextLost$1, this._webGL2ContextLostHandler);

                  this._webGL2ContextLostHandler = null;
                }

                if (this.nullTex2D) {
                  this.nullTex2D.destroy();
                  this.nullTex2D = null;
                }

                if (this.nullTexCube) {
                  this.nullTexCube.destroy();
                  this.nullTexCube = null;
                }

                this._extensions = null;
                this._canvas = null;
              };

              _proto.resize = function resize(width, height, surfaceTransform) {
                if (this._colorTexture.width !== width || this._colorTexture.height !== height) {
                  debug("Resizing swapchain: " + width + "x" + height);
                  this._canvas.width = width;
                  this._canvas.height = height;

                  this._colorTexture.resize(width, height);

                  this._depthStencilTexture.resize(width, height);
                }
              };

              _proto._onWebGLContextLost = function _onWebGLContextLost(event) {
                warnID(11000);
                warn(event);
              };

              _createClass(WebGL2Swapchain, [{
                key: "extensions",
                get: function get() {
                  return this._extensions;
                }
              }]);

              return WebGL2Swapchain;
            }(Swapchain);

            var WebGL2Device = exports('WebGL2Device', function (_Device) {
              _inheritsLoose(WebGL2Device, _Device);

              function WebGL2Device() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Device.call.apply(_Device, [this].concat(args)) || this;
                _this._swapchain = null;
                _this._context = null;
                _this._bindingMappings = null;
                _this._textureExclusive = new Array(Format.COUNT);
                return _this;
              }

              var _proto = WebGL2Device.prototype;

              _proto.initialize = function initialize(info) {
                WebGL2DeviceManager.setInstance(this);
                this._gfxAPI = API.WEBGL2;
                var mapping = this._bindingMappingInfo = info.bindingMappingInfo;
                var blockOffsets = [];
                var samplerTextureOffsets = [];
                var firstSet = mapping.setIndices[0];
                blockOffsets[firstSet] = 0;
                samplerTextureOffsets[firstSet] = 0;

                for (var i = 1; i < mapping.setIndices.length; ++i) {
                  var curSet = mapping.setIndices[i];
                  var prevSet = mapping.setIndices[i - 1];
                  blockOffsets[curSet] = mapping.maxBlockCounts[prevSet] + blockOffsets[prevSet];
                  samplerTextureOffsets[curSet] = mapping.maxSamplerTextureCounts[prevSet] + samplerTextureOffsets[prevSet];
                }

                for (var _i = 0; _i < mapping.setIndices.length; ++_i) {
                  var _curSet = mapping.setIndices[_i];
                  samplerTextureOffsets[_curSet] -= mapping.maxBlockCounts[_curSet];
                }

                this._bindingMappings = {
                  blockOffsets: blockOffsets,
                  samplerTextureOffsets: samplerTextureOffsets,
                  flexibleSet: mapping.setIndices[mapping.setIndices.length - 1]
                };
                var gl = this._context = getContext$1(Device.canvas);

                if (!gl) {
                  console.error('This device does not support WebGL.');
                  return false;
                }

                this._queue = this.createQueue(new QueueInfo(QueueType.GRAPHICS));
                this._cmdBuff = this.createCommandBuffer(new CommandBufferInfo(this._queue));
                this._caps.maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
                this._caps.maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
                this._caps.maxFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
                this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
                this._caps.maxVertexTextureUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
                this._caps.maxUniformBufferBindings = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);
                this._caps.maxUniformBlockSize = gl.getParameter(gl.MAX_UNIFORM_BLOCK_SIZE);
                this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
                this._caps.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
                this._caps.uboOffsetAlignment = gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT);
                var extensions = gl.getSupportedExtensions();
                var extStr = '';

                if (extensions) {
                  for (var _iterator = _createForOfIteratorHelperLoose(extensions), _step; !(_step = _iterator()).done;) {
                    var ext = _step.value;
                    extStr += ext + " ";
                  }
                }

                var exts = getExtensions$1(gl);

                if (exts.WEBGL_debug_renderer_info) {
                  this._renderer = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL);
                  this._vendor = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL);
                } else {
                  this._renderer = gl.getParameter(gl.RENDERER);
                  this._vendor = gl.getParameter(gl.VENDOR);
                }

                var version = gl.getParameter(gl.VERSION);

                this._features.fill(false);

                this.initFormatFeatures(exts);
                this._features[Feature.ELEMENT_INDEX_UINT] = true;
                this._features[Feature.INSTANCED_ARRAYS] = true;
                this._features[Feature.MULTIPLE_RENDER_TARGETS] = true;
                this._features[Feature.BLEND_MINMAX] = true;
                var compressedFormat = '';

                if (this.getFormatFeatures(Format.ETC_RGB8)) {
                  compressedFormat += 'etc1 ';
                }

                if (this.getFormatFeatures(Format.ETC2_RGB8)) {
                  compressedFormat += 'etc2 ';
                }

                if (this.getFormatFeatures(Format.BC1)) {
                  compressedFormat += 'dxt ';
                }

                if (this.getFormatFeatures(Format.PVRTC_RGB2)) {
                  compressedFormat += 'pvrtc ';
                }

                if (this.getFormatFeatures(Format.ASTC_RGBA_4X4)) {
                  compressedFormat += 'astc ';
                }

                debug('WebGL2 device initialized.');
                debug("RENDERER: " + this._renderer);
                debug("VENDOR: " + this._vendor);
                debug("VERSION: " + version);
                debug("COMPRESSED_FORMAT: " + compressedFormat);
                debug("EXTENSIONS: " + extStr);
                return true;
              };

              _proto.destroy = function destroy() {
                if (this._queue) {
                  this._queue.destroy();

                  this._queue = null;
                }

                if (this._cmdBuff) {
                  this._cmdBuff.destroy();

                  this._cmdBuff = null;
                }

                var it = this._samplers.values();

                var res = it.next();

                while (!res.done) {
                  res.value.destroy();
                  res = it.next();
                }

                this._swapchain = null;
              };

              _proto.flushCommands = function flushCommands(cmdBuffs) {};

              _proto.acquire = function acquire(swapchains) {};

              _proto.present = function present() {
                var queue = this._queue;
                this._numDrawCalls = queue.numDrawCalls;
                this._numInstances = queue.numInstances;
                this._numTris = queue.numTris;
                queue.clear();
              };

              _proto.initFormatFeatures = function initFormatFeatures(exts) {
                this._formatFeatures.fill(FormatFeatureBit.NONE);

                this._textureExclusive.fill(true);

                var tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R8] = tempFeature;
                this._formatFeatures[Format.RG8] = tempFeature;
                this._formatFeatures[Format.RGB8] = tempFeature;
                this._formatFeatures[Format.RGBA8] = tempFeature;
                tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
                this._formatFeatures[Format.R8SN] = tempFeature;
                this._formatFeatures[Format.RG8SN] = tempFeature;
                this._formatFeatures[Format.RGB8SN] = tempFeature;
                this._formatFeatures[Format.RGBA8SN] = tempFeature;
                this._formatFeatures[Format.R5G6B5] = tempFeature;
                this._formatFeatures[Format.RGBA4] = tempFeature;
                this._formatFeatures[Format.RGB5A1] = tempFeature;
                this._formatFeatures[Format.RGB10A2] = tempFeature;
                this._formatFeatures[Format.SRGB8] = tempFeature;
                this._formatFeatures[Format.SRGB8_A8] = tempFeature;
                this._formatFeatures[Format.R11G11B10F] = tempFeature;
                this._formatFeatures[Format.RGB9E5] = tempFeature;
                this._formatFeatures[Format.DEPTH] = tempFeature;
                this._formatFeatures[Format.DEPTH_STENCIL] = tempFeature;
                this._formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
                tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R16F] = tempFeature;
                this._formatFeatures[Format.RG16F] = tempFeature;
                this._formatFeatures[Format.RGB16F] = tempFeature;
                this._formatFeatures[Format.RGBA16F] = tempFeature;
                tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R32F] = tempFeature;
                this._formatFeatures[Format.RG32F] = tempFeature;
                this._formatFeatures[Format.RGB32F] = tempFeature;
                this._formatFeatures[Format.RGBA32F] = tempFeature;
                this._formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
                tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;
                this._formatFeatures[Format.R8I] = tempFeature;
                this._formatFeatures[Format.R8UI] = tempFeature;
                this._formatFeatures[Format.R16I] = tempFeature;
                this._formatFeatures[Format.R16UI] = tempFeature;
                this._formatFeatures[Format.R32I] = tempFeature;
                this._formatFeatures[Format.R32UI] = tempFeature;
                this._formatFeatures[Format.RG8I] = tempFeature;
                this._formatFeatures[Format.RG8UI] = tempFeature;
                this._formatFeatures[Format.RG16I] = tempFeature;
                this._formatFeatures[Format.RG16UI] = tempFeature;
                this._formatFeatures[Format.RG32I] = tempFeature;
                this._formatFeatures[Format.RG32UI] = tempFeature;
                this._formatFeatures[Format.RGB8I] = tempFeature;
                this._formatFeatures[Format.RGB8UI] = tempFeature;
                this._formatFeatures[Format.RGB16I] = tempFeature;
                this._formatFeatures[Format.RGB16UI] = tempFeature;
                this._formatFeatures[Format.RGB32I] = tempFeature;
                this._formatFeatures[Format.RGB32UI] = tempFeature;
                this._formatFeatures[Format.RGBA8I] = tempFeature;
                this._formatFeatures[Format.RGBA8UI] = tempFeature;
                this._formatFeatures[Format.RGBA16I] = tempFeature;
                this._formatFeatures[Format.RGBA16UI] = tempFeature;
                this._formatFeatures[Format.RGBA32I] = tempFeature;
                this._formatFeatures[Format.RGBA32UI] = tempFeature;
                this._textureExclusive[Format.R8] = false;
                this._textureExclusive[Format.RG8] = false;
                this._textureExclusive[Format.RGB8] = false;
                this._textureExclusive[Format.R5G6B5] = false;
                this._textureExclusive[Format.RGBA4] = false;
                this._textureExclusive[Format.RGB5A1] = false;
                this._textureExclusive[Format.RGBA8] = false;
                this._textureExclusive[Format.RGB10A2] = false;
                this._textureExclusive[Format.RGB10A2UI] = false;
                this._textureExclusive[Format.SRGB8_A8] = false;
                this._textureExclusive[Format.R8I] = false;
                this._textureExclusive[Format.R8UI] = false;
                this._textureExclusive[Format.R16I] = false;
                this._textureExclusive[Format.R16UI] = false;
                this._textureExclusive[Format.R32I] = false;
                this._textureExclusive[Format.R32UI] = false;
                this._textureExclusive[Format.RG8I] = false;
                this._textureExclusive[Format.RG8UI] = false;
                this._textureExclusive[Format.RG16I] = false;
                this._textureExclusive[Format.RG16UI] = false;
                this._textureExclusive[Format.RG32I] = false;
                this._textureExclusive[Format.RG32UI] = false;
                this._textureExclusive[Format.RGBA8I] = false;
                this._textureExclusive[Format.RGBA8UI] = false;
                this._textureExclusive[Format.RGBA16I] = false;
                this._textureExclusive[Format.RGBA16UI] = false;
                this._textureExclusive[Format.RGBA32I] = false;
                this._textureExclusive[Format.RGBA32UI] = false;
                this._textureExclusive[Format.DEPTH] = false;
                this._textureExclusive[Format.DEPTH_STENCIL] = false;

                if (exts.EXT_color_buffer_float) {
                  this._textureExclusive[Format.R32F] = false;
                  this._textureExclusive[Format.RG32F] = false;
                  this._textureExclusive[Format.RGBA32F] = false;
                }

                if (exts.EXT_color_buffer_half_float) {
                  this._textureExclusive[Format.R16F] = false;
                  this._textureExclusive[Format.RG16F] = false;
                  this._textureExclusive[Format.RGBA16F] = false;
                }

                if (exts.OES_texture_float_linear) {
                  this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.R32F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.RG32F] |= FormatFeatureBit.LINEAR_FILTER;
                }

                if (exts.OES_texture_half_float_linear) {
                  this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.R16F] |= FormatFeatureBit.LINEAR_FILTER;
                  this._formatFeatures[Format.RG16F] |= FormatFeatureBit.LINEAR_FILTER;
                }

                var compressedFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;

                if (exts.WEBGL_compressed_texture_etc1) {
                  this._formatFeatures[Format.ETC_RGB8] = compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_etc) {
                  this._formatFeatures[Format.ETC2_RGB8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_RGBA8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_SRGB8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_SRGB8_A8] = compressedFeature;
                  this._formatFeatures[Format.ETC2_RGB8_A1] = compressedFeature;
                  this._formatFeatures[Format.ETC2_SRGB8_A1] = compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_s3tc) {
                  this._formatFeatures[Format.BC1] = compressedFeature;
                  this._formatFeatures[Format.BC1_ALPHA] = compressedFeature;
                  this._formatFeatures[Format.BC1_SRGB] = compressedFeature;
                  this._formatFeatures[Format.BC1_SRGB_ALPHA] = compressedFeature;
                  this._formatFeatures[Format.BC2] = compressedFeature;
                  this._formatFeatures[Format.BC2_SRGB] = compressedFeature;
                  this._formatFeatures[Format.BC3] = compressedFeature;
                  this._formatFeatures[Format.BC3_SRGB] = compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_pvrtc) {
                  this._formatFeatures[Format.PVRTC_RGB2] = compressedFeature;
                  this._formatFeatures[Format.PVRTC_RGBA2] = compressedFeature;
                  this._formatFeatures[Format.PVRTC_RGB4] = compressedFeature;
                  this._formatFeatures[Format.PVRTC_RGBA4] = compressedFeature;
                }

                if (exts.WEBGL_compressed_texture_astc) {
                  this._formatFeatures[Format.ASTC_RGBA_4X4] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_5X4] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_5X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_6X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_6X6] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_8X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_8X6] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_8X8] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X6] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X8] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_10X10] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_12X10] = compressedFeature;
                  this._formatFeatures[Format.ASTC_RGBA_12X12] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_4X4] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_5X4] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_5X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_6X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_6X6] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_8X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_8X6] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_8X8] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X5] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X6] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X8] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_10X10] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_12X10] = compressedFeature;
                  this._formatFeatures[Format.ASTC_SRGBA_12X12] = compressedFeature;
                }
              };

              _proto.createCommandBuffer = function createCommandBuffer(info) {
                var Ctor = info.type === CommandBufferType.PRIMARY ? WebGL2PrimaryCommandBuffer : WebGL2CommandBuffer;
                var cmdBuff = new Ctor();
                cmdBuff.initialize(info);
                return cmdBuff;
              };

              _proto.createSwapchain = function createSwapchain(info) {
                var swapchain = new WebGL2Swapchain();
                this._swapchain = swapchain;
                swapchain.initialize(info);
                return swapchain;
              };

              _proto.createBuffer = function createBuffer(info) {
                var buffer = new WebGL2Buffer();
                buffer.initialize(info);
                return buffer;
              };

              _proto.createTexture = function createTexture(info) {
                var texture = new WebGL2Texture();
                texture.initialize(info);
                return texture;
              };

              _proto.createDescriptorSet = function createDescriptorSet(info) {
                var descriptorSet = new WebGL2DescriptorSet();
                descriptorSet.initialize(info);
                return descriptorSet;
              };

              _proto.createShader = function createShader(info) {
                var shader = new WebGL2Shader();
                shader.initialize(info);
                return shader;
              };

              _proto.createInputAssembler = function createInputAssembler(info) {
                var inputAssembler = new WebGL2InputAssembler();
                inputAssembler.initialize(info);
                return inputAssembler;
              };

              _proto.createRenderPass = function createRenderPass(info) {
                var renderPass = new WebGL2RenderPass();
                renderPass.initialize(info);
                return renderPass;
              };

              _proto.createFramebuffer = function createFramebuffer(info) {
                var framebuffer = new WebGL2Framebuffer();
                framebuffer.initialize(info);
                return framebuffer;
              };

              _proto.createDescriptorSetLayout = function createDescriptorSetLayout(info) {
                var descriptorSetLayout = new WebGL2DescriptorSetLayout();
                descriptorSetLayout.initialize(info);
                return descriptorSetLayout;
              };

              _proto.createPipelineLayout = function createPipelineLayout(info) {
                var pipelineLayout = new WebGL2PipelineLayout();
                pipelineLayout.initialize(info);
                return pipelineLayout;
              };

              _proto.createPipelineState = function createPipelineState(info) {
                var pipelineState = new WebGL2PipelineState();
                pipelineState.initialize(info);
                return pipelineState;
              };

              _proto.createQueue = function createQueue(info) {
                var queue = new WebGL2Queue();
                queue.initialize(info);
                return queue;
              };

              _proto.getSampler = function getSampler(info) {
                var hash = Sampler.computeHash(info);

                if (!this._samplers.has(hash)) {
                  this._samplers.set(hash, new WebGL2Sampler(info, hash));
                }

                return this._samplers.get(hash);
              };

              _proto.getGeneralBarrier = function getGeneralBarrier(info) {
                var hash = GeneralBarrier.computeHash(info);

                if (!this._generalBarrierss.has(hash)) {
                  this._generalBarrierss.set(hash, new GeneralBarrier(info, hash));
                }

                return this._generalBarrierss.get(hash);
              };

              _proto.getTextureBarrier = function getTextureBarrier(info) {
                var hash = TextureBarrier.computeHash(info);

                if (!this._textureBarriers.has(hash)) {
                  this._textureBarriers.set(hash, new TextureBarrier(info, hash));
                }

                return this._textureBarriers.get(hash);
              };

              _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
                WebGL2CmdFuncCopyBuffersToTexture(this, buffers, texture.gpuTexture, regions);
              };

              _proto.copyTextureToBuffers = function copyTextureToBuffers(texture, buffers, regions) {
                WebGL2CmdFuncCopyTextureToBuffers(this, texture.gpuTexture, buffers, regions);
              };

              _proto.copyTexImagesToTexture = function copyTexImagesToTexture(texImages, texture, regions) {
                WebGL2CmdFuncCopyTexImagesToTexture(this, texImages, texture.gpuTexture, regions);
              };

              _createClass(WebGL2Device, [{
                key: "gl",
                get: function get() {
                  return this._context;
                }
              }, {
                key: "extensions",
                get: function get() {
                  return this._swapchain.extensions;
                }
              }, {
                key: "stateCache",
                get: function get() {
                  return this._swapchain.stateCache;
                }
              }, {
                key: "nullTex2D",
                get: function get() {
                  return this._swapchain.nullTex2D;
                }
              }, {
                key: "nullTexCube",
                get: function get() {
                  return this._swapchain.nullTexCube;
                }
              }, {
                key: "textureExclusive",
                get: function get() {
                  return this._textureExclusive;
                }
              }, {
                key: "bindingMappings",
                get: function get() {
                  return this._bindingMappings;
                }
              }]);

              return WebGL2Device;
            }(Device));

            legacyCC.WebGL2Device = WebGL2Device;

            function lineLine(a1, a2, b1, b2) {
              var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
              var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
              var u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);

              if (u_b !== 0) {
                var ua = ua_t / u_b;
                var ub = ub_t / u_b;

                if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
                  return true;
                }
              }

              return false;
            }

            var tempR1 = new Vec2();
            var tempR2 = new Vec2();
            var tempR3 = new Vec2();
            var tempR4 = new Vec2();

            function lineRect(a1, a2, b) {
              var r0 = tempR1.set(b.x, b.y);
              var r1 = tempR2.set(b.x, b.yMax);
              var r2 = tempR3.set(b.xMax, b.yMax);
              var r3 = tempR4.set(b.xMax, b.y);
              if (lineLine(a1, a2, r0, r1)) return true;
              if (lineLine(a1, a2, r1, r2)) return true;
              if (lineLine(a1, a2, r2, r3)) return true;
              if (lineLine(a1, a2, r3, r0)) return true;
              return false;
            }

            function linePolygon(a1, a2, b) {
              var length = b.length;

              for (var i = 0; i < length; ++i) {
                var b1 = b[i];
                var b2 = b[(i + 1) % length];
                if (lineLine(a1, a2, b1, b2)) return true;
              }

              return false;
            }

            function rectRect(a, b) {
              var a_min_x = a.x;
              var a_min_y = a.y;
              var a_max_x = a.x + a.width;
              var a_max_y = a.y + a.height;
              var b_min_x = b.x;
              var b_min_y = b.y;
              var b_max_x = b.x + b.width;
              var b_max_y = b.y + b.height;
              return a_min_x <= b_max_x && a_max_x >= b_min_x && a_min_y <= b_max_y && a_max_y >= b_min_y;
            }

            function rectPolygon(a, b) {
              var r0 = tempR1.set(a.x, a.y);
              var r1 = tempR2.set(a.x, a.yMax);
              var r2 = tempR3.set(a.xMax, a.yMax);
              var r3 = tempR4.set(a.xMax, a.y);
              if (linePolygon(r0, r1, b)) return true;
              if (linePolygon(r1, r2, b)) return true;
              if (linePolygon(r2, r3, b)) return true;
              if (linePolygon(r3, r0, b)) return true;

              for (var i = 0, l = b.length; i < l; ++i) {
                if (a.contains(b[i])) return true;
              }

              if (pointInPolygon(r0, b)) return true;
              if (pointInPolygon(r1, b)) return true;
              if (pointInPolygon(r2, b)) return true;
              if (pointInPolygon(r3, b)) return true;
              return false;
            }

            function polygonPolygon(a, b) {
              var i;
              var l;

              for (i = 0, l = a.length; i < l; ++i) {
                var a1 = a[i];
                var a2 = a[(i + 1) % l];
                if (linePolygon(a1, a2, b)) return true;
              }

              for (i = 0, l = b.length; i < l; ++i) {
                if (pointInPolygon(b[i], a)) return true;
              }

              for (i = 0, l = a.length; i < l; ++i) {
                if (pointInPolygon(a[i], b)) return true;
              }

              return false;
            }

            function circleCircle(c1p, c1r, c2p, c2r) {
              var distance = Vec2.distance(c1p, c2p);
              return distance < c1r + c2r;
            }

            function polygonCircle(polygon, cp, cr) {
              var position = cp;

              if (pointInPolygon(position, polygon)) {
                return true;
              }

              for (var i = 0, l = polygon.length; i < l; i++) {
                var start = i === 0 ? polygon[polygon.length - 1] : polygon[i - 1];
                var end = polygon[i];

                if (pointLineDistance(position, start, end, true) < cr) {
                  return true;
                }
              }

              return false;
            }

            function rectCircle(rect, cp, cr) {
              var cx = cp.x;
              var cy = cp.y;
              var rx = rect.x;
              var ry = rect.y;
              var rw = rect.width;
              var rh = rect.height;
              var testX = cx;
              var testY = cy;
              if (cx < rx) testX = rx;else if (cx > rx + rw) testX = rx + rw;
              if (cy < ry) testY = ry;else if (cy > ry + rh) testY = ry + rh;
              var distX = cx - testX;
              var distY = cy - testY;
              var distance = Math.sqrt(distX * distX + distY * distY);

              if (distance <= cr) {
                return true;
              }

              return false;
            }

            function pointInPolygon(point, polygon) {
              var inside = false;
              var x = point.x;
              var y = point.y;
              var length = polygon.length;

              for (var i = 0, j = length - 1; i < length; j = i++) {
                var xi = polygon[i].x;
                var yi = polygon[i].y;
                var xj = polygon[j].x;
                var yj = polygon[j].y;
                var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
                if (intersect) inside = !inside;
              }

              return inside;
            }

            function pointLineDistance(point, start, end, isSegment) {
              var dx = end.x - start.x;
              var dy = end.y - start.y;
              var d = dx * dx + dy * dy;
              var t = ((point.x - start.x) * dx + (point.y - start.y) * dy) / d;
              var p;

              if (!isSegment) {
                p = tempR1.set(start.x + t * dx, start.y + t * dy);
              } else if (d) {
                if (t < 0) p = start;else if (t > 1) p = end;else p = tempR1.set(start.x + t * dx, start.y + t * dy);
              } else {
                p = start;
              }

              dx = point.x - p.x;
              dy = point.y - p.y;
              return Math.sqrt(dx * dx + dy * dy);
            }

            var Intersection2D = exports('Intersection2D', function Intersection2D() {});

            Intersection2D.lineLine = lineLine;
            Intersection2D.lineRect = lineRect;
            Intersection2D.linePolygon = linePolygon;
            Intersection2D.rectRect = rectRect;
            Intersection2D.rectPolygon = rectPolygon;
            Intersection2D.rectCircle = rectCircle;
            Intersection2D.polygonPolygon = polygonPolygon;
            Intersection2D.circleCircle = circleCircle;
            Intersection2D.polygonCircle = polygonCircle;
            Intersection2D.pointInPolygon = pointInPolygon;
            Intersection2D.pointLineDistance = pointLineDistance;

            var _dec$V, _dec2$G, _dec3$u, _dec4$q, _dec5$o, _dec6$l, _dec7$l, _dec8$j, _dec9$f, _class$Y, _class2$N, _descriptor$K, _descriptor2$C, _descriptor3$s, _descriptor4$n, _temp$R;
            var Billboard = function (v) { return exports({ Billboard: v, BillboardComponent: v }), v; }((_dec$V = ccclass('cc.Billboard'), _dec2$G = help(), _dec3$u = menu$1(), _dec4$q = type$1(Texture2D), _dec5$o = type$1(Texture2D), _dec6$l = tooltip(), _dec7$l = tooltip(), _dec8$j = tooltip(), _dec9$f = tooltip(), _dec$V(_class$Y = _dec2$G(_class$Y = _dec3$u(_class$Y = executeInEditMode(_class$Y = (_class2$N = (_temp$R = function (_Component) {
              _inheritsLoose(Billboard, _Component);

              function Billboard() {
                var _this;

                _this = _Component.call(this) || this;

                _initializerDefineProperty(_this, "_texture", _descriptor$K, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_height", _descriptor2$C, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_width", _descriptor3$s, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_rotation", _descriptor4$n, _assertThisInitialized(_this));

                _this._model = null;
                _this._mesh = null;
                _this._material = null;
                _this._uniform = new Vec4(1, 1, 0, 0);
                return _this;
              }

              var _proto = Billboard.prototype;

              _proto.onLoad = function onLoad() {
                this.createModel();
              };

              _proto.onEnable = function onEnable() {
                this.attachToScene();
                this._model.enabled = true;
                this.width = this._width;
                this.height = this._height;
                this.rotation = this.rotation;
                this.texture = this.texture;
              };

              _proto.onDisable = function onDisable() {
                this.detachFromScene();
              };

              _proto.attachToScene = function attachToScene() {
                if (this._model && this.node && this.node.scene) {
                  if (this._model.scene) {
                    this.detachFromScene();
                  }

                  this._getRenderScene().addModel(this._model);
                }
              };

              _proto.detachFromScene = function detachFromScene() {
                if (this._model && this._model.scene) {
                  this._model.scene.removeModel(this._model);
                }
              };

              _proto.createModel = function createModel() {
                this._mesh = createMesh({
                  primitiveMode: PrimitiveMode.TRIANGLE_LIST,
                  positions: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  uvs: [0, 0, 1, 0, 0, 1, 1, 1],
                  colors: [Color$1.WHITE.r, Color$1.WHITE.g, Color$1.WHITE.b, Color$1.WHITE.a, Color$1.WHITE.r, Color$1.WHITE.g, Color$1.WHITE.b, Color$1.WHITE.a, Color$1.WHITE.r, Color$1.WHITE.g, Color$1.WHITE.b, Color$1.WHITE.a, Color$1.WHITE.r, Color$1.WHITE.g, Color$1.WHITE.b, Color$1.WHITE.a],
                  attributes: [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8UI, true)],
                  indices: [0, 1, 2, 1, 2, 3]
                }, undefined, {
                  calculateBounds: false
                });
                var model = this._model = legacyCC.director.root.createModel(Model, this.node);
                model.node = model.transform = this.node;

                if (this._material == null) {
                  this._material = new Material();

                  this._material.copy(builtinResMgr.get('default-billboard-material'));
                }

                model.initSubModel(0, this._mesh.renderingSubMeshes[0], this._material);
              };

              _createClass(Billboard, [{
                key: "texture",
                get: function get() {
                  return this._texture;
                },
                set: function set(val) {
                  this._texture = val;

                  if (this._material) {
                    this._material.setProperty('mainTexture', val);
                  }
                }
              }, {
                key: "height",
                get: function get() {
                  return this._height;
                },
                set: function set(val) {
                  this._height = val;

                  if (this._material) {
                    this._uniform.y = val;

                    this._material.setProperty('cc_size_rotation', this._uniform);
                  }
                }
              }, {
                key: "width",
                get: function get() {
                  return this._width;
                },
                set: function set(val) {
                  this._width = val;

                  if (this._material) {
                    this._uniform.x = val;

                    this._material.setProperty('cc_size_rotation', this._uniform);
                  }
                }
              }, {
                key: "rotation",
                get: function get() {
                  return Math.round(toDegree(this._rotation) * 100) / 100;
                },
                set: function set(val) {
                  this._rotation = toRadian(val);

                  if (this._material) {
                    this._uniform.z = this._rotation;

                    this._material.setProperty('cc_size_rotation', this._uniform);
                  }
                }
              }]);

              return Billboard;
            }(Component), _temp$R), (_descriptor$K = _applyDecoratedDescriptor(_class2$N.prototype, "_texture", [_dec4$q], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$N.prototype, "texture", [_dec5$o, _dec6$l], Object.getOwnPropertyDescriptor(_class2$N.prototype, "texture"), _class2$N.prototype), _descriptor2$C = _applyDecoratedDescriptor(_class2$N.prototype, "_height", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$N.prototype, "height", [_dec7$l], Object.getOwnPropertyDescriptor(_class2$N.prototype, "height"), _class2$N.prototype), _descriptor3$s = _applyDecoratedDescriptor(_class2$N.prototype, "_width", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$N.prototype, "width", [_dec8$j], Object.getOwnPropertyDescriptor(_class2$N.prototype, "width"), _class2$N.prototype), _descriptor4$n = _applyDecoratedDescriptor(_class2$N.prototype, "_rotation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$N.prototype, "rotation", [_dec9$f], Object.getOwnPropertyDescriptor(_class2$N.prototype, "rotation"), _class2$N.prototype)), _class2$N)) || _class$Y) || _class$Y) || _class$Y) || _class$Y));

            var _vertex_attrs = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGBA32F), new Attribute(AttributeName.ATTR_TEX_COORD1, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true)];

            var _temp_v1 = new Vec3();

            var _temp_v2 = new Vec3();

            var LineModel = function (_scene$Model) {
              _inheritsLoose(LineModel, _scene$Model);

              function LineModel() {
                var _this;

                _this = _scene$Model.call(this) || this;
                _this._capacity = void 0;
                _this._vertSize = 0;
                _this._vBuffer = null;
                _this._vertAttrsFloatCount = 0;
                _this._vdataF32 = null;
                _this._vdataUint32 = null;
                _this._iaInfo = void 0;
                _this._iaInfoBuffer = void 0;
                _this._subMeshData = null;
                _this._vertCount = 0;
                _this._indexCount = 0;
                _this._material = null;
                _this.type = ModelType.LINE;
                _this._capacity = 100;
                _this._iaInfo = new IndirectBuffer([new DrawInfo()]);
                _this._iaInfoBuffer = _this._device.createBuffer(new BufferInfo(BufferUsageBit.INDIRECT, MemoryUsageBit.DEVICE, DRAW_INFO_SIZE, DRAW_INFO_SIZE));
                return _this;
              }

              var _proto = LineModel.prototype;

              _proto.setCapacity = function setCapacity(capacity) {
                this._capacity = capacity;
                this.createBuffer();
              };

              _proto.createBuffer = function createBuffer() {
                this._vertSize = 0;

                for (var _iterator = _createForOfIteratorHelperLoose(_vertex_attrs), _step; !(_step = _iterator()).done;) {
                  var a = _step.value;
                  a.offset = this._vertSize;
                  this._vertSize += FormatInfos[a.format].size;
                }

                this._vertAttrsFloatCount = this._vertSize / 4;
                this._vBuffer = this.createSubMeshData();
                this._vdataF32 = new Float32Array(this._vBuffer);
                this._vdataUint32 = new Uint32Array(this._vBuffer);
              };

              _proto.updateMaterial = function updateMaterial(mat) {
                this._material = mat;

                _scene$Model.prototype.setSubModelMaterial.call(this, 0, mat);
              };

              _proto.createSubMeshData = function createSubMeshData() {
                if (this._subMeshData) {
                  this.destroySubMeshData();
                }

                this._vertCount = 2;
                this._indexCount = 6;

                var vertexBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, this._vertSize * this._capacity * this._vertCount, this._vertSize));

                var vBuffer = new ArrayBuffer(this._vertSize * this._capacity * this._vertCount);
                vertexBuffer.update(vBuffer);
                var indices = new Uint16Array((this._capacity - 1) * this._indexCount);
                var dst = 0;

                for (var i = 0; i < this._capacity - 1; ++i) {
                  var baseIdx = 2 * i;
                  indices[dst++] = baseIdx;
                  indices[dst++] = baseIdx + 1;
                  indices[dst++] = baseIdx + 2;
                  indices[dst++] = baseIdx + 3;
                  indices[dst++] = baseIdx + 2;
                  indices[dst++] = baseIdx + 1;
                }

                var indexBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, (this._capacity - 1) * this._indexCount * Uint16Array.BYTES_PER_ELEMENT, Uint16Array.BYTES_PER_ELEMENT));

                indexBuffer.update(indices);
                this._iaInfo.drawInfos[0].vertexCount = this._capacity * this._vertCount;
                this._iaInfo.drawInfos[0].indexCount = (this._capacity - 1) * this._indexCount;

                this._iaInfoBuffer.update(this._iaInfo);

                this._subMeshData = new RenderingSubMesh([vertexBuffer], _vertex_attrs, PrimitiveMode.TRIANGLE_LIST, indexBuffer, this._iaInfoBuffer);
                this.initSubModel(0, this._subMeshData, this._material);
                return vBuffer;
              };

              _proto.addLineVertexData = function addLineVertexData(positions, width, color) {
                if (positions.length > 1) {
                  var offset = 0;
                  Vec3.subtract(_temp_v1, positions[1], positions[0]);
                  this._vdataF32[offset++] = positions[0].x;
                  this._vdataF32[offset++] = positions[0].y;
                  this._vdataF32[offset++] = positions[0].z;
                  this._vdataF32[offset++] = 0;
                  this._vdataF32[offset++] = width.evaluate(0, 1);
                  this._vdataF32[offset++] = 0;
                  this._vdataF32[offset++] = 0;
                  this._vdataF32[offset++] = _temp_v1.x;
                  this._vdataF32[offset++] = _temp_v1.y;
                  this._vdataF32[offset++] = _temp_v1.z;
                  this._vdataUint32[offset++] = color.evaluate(0, 1)._val;
                  this._vdataF32[offset++] = positions[0].x;
                  this._vdataF32[offset++] = positions[0].y;
                  this._vdataF32[offset++] = positions[0].z;
                  this._vdataF32[offset++] = 1;
                  this._vdataF32[offset++] = width.evaluate(0, 1);
                  this._vdataF32[offset++] = 0;
                  this._vdataF32[offset++] = 1;
                  this._vdataF32[offset++] = _temp_v1.x;
                  this._vdataF32[offset++] = _temp_v1.y;
                  this._vdataF32[offset++] = _temp_v1.z;
                  this._vdataUint32[offset++] = color.evaluate(0, 1)._val;

                  for (var i = 1; i < positions.length - 1; i++) {
                    Vec3.subtract(_temp_v1, positions[i - 1], positions[i]);
                    Vec3.subtract(_temp_v2, positions[i + 1], positions[i]);
                    Vec3.subtract(_temp_v2, _temp_v2, _temp_v1);
                    var seg = i / positions.length;
                    this._vdataF32[offset++] = positions[i].x;
                    this._vdataF32[offset++] = positions[i].y;
                    this._vdataF32[offset++] = positions[i].z;
                    this._vdataF32[offset++] = 0;
                    this._vdataF32[offset++] = width.evaluate(seg, 1);
                    this._vdataF32[offset++] = seg;
                    this._vdataF32[offset++] = 0;
                    this._vdataF32[offset++] = _temp_v2.x;
                    this._vdataF32[offset++] = _temp_v2.y;
                    this._vdataF32[offset++] = _temp_v2.z;
                    this._vdataUint32[offset++] = color.evaluate(seg, 1)._val;
                    this._vdataF32[offset++] = positions[i].x;
                    this._vdataF32[offset++] = positions[i].y;
                    this._vdataF32[offset++] = positions[i].z;
                    this._vdataF32[offset++] = 1;
                    this._vdataF32[offset++] = width.evaluate(seg, 1);
                    this._vdataF32[offset++] = seg;
                    this._vdataF32[offset++] = 1;
                    this._vdataF32[offset++] = _temp_v2.x;
                    this._vdataF32[offset++] = _temp_v2.y;
                    this._vdataF32[offset++] = _temp_v2.z;
                    this._vdataUint32[offset++] = color.evaluate(seg, 1)._val;
                  }

                  Vec3.subtract(_temp_v1, positions[positions.length - 1], positions[positions.length - 2]);
                  this._vdataF32[offset++] = positions[positions.length - 1].x;
                  this._vdataF32[offset++] = positions[positions.length - 1].y;
                  this._vdataF32[offset++] = positions[positions.length - 1].z;
                  this._vdataF32[offset++] = 0;
                  this._vdataF32[offset++] = width.evaluate(1, 1);
                  this._vdataF32[offset++] = 1;
                  this._vdataF32[offset++] = 0;
                  this._vdataF32[offset++] = _temp_v1.x;
                  this._vdataF32[offset++] = _temp_v1.y;
                  this._vdataF32[offset++] = _temp_v1.z;
                  this._vdataUint32[offset++] = color.evaluate(1, 1)._val;
                  this._vdataF32[offset++] = positions[positions.length - 1].x;
                  this._vdataF32[offset++] = positions[positions.length - 1].y;
                  this._vdataF32[offset++] = positions[positions.length - 1].z;
                  this._vdataF32[offset++] = 1;
                  this._vdataF32[offset++] = width.evaluate(1, 1);
                  this._vdataF32[offset++] = 1;
                  this._vdataF32[offset++] = 1;
                  this._vdataF32[offset++] = _temp_v1.x;
                  this._vdataF32[offset++] = _temp_v1.y;
                  this._vdataF32[offset++] = _temp_v1.z;
                  this._vdataUint32[offset++] = color.evaluate(1, 1)._val;
                }

                this.updateIA(Math.max(0, positions.length - 1));
              };

              _proto.updateIA = function updateIA(count) {
                var ia = this._subModels[0].inputAssembler;
                ia.vertexBuffers[0].update(this._vdataF32);
                this._iaInfo.drawInfos[0].firstIndex = 0;
                this._iaInfo.drawInfos[0].indexCount = this._indexCount * count;

                this._iaInfoBuffer.update(this._iaInfo);
              };

              _proto.destroySubMeshData = function destroySubMeshData() {
                if (this._subMeshData) {
                  this._subMeshData.destroy();

                  this._subMeshData = null;
                }
              };

              return LineModel;
            }(Model);

            var _dec$W, _class$Z, _class2$O, _temp$S;
            var setClassAttr = CCClass.Attr.setClassAttr;
            var SerializableTable = [['mode', 'constant', 'multiplier'], ['mode', 'spline', 'multiplier'], ['mode', 'splineMin', 'splineMax', 'multiplier'], ['mode', 'constantMin', 'constantMax', 'multiplier']];
            var Mode = Enum({
              Constant: 0,
              Curve: 1,
              TwoCurves: 2,
              TwoConstants: 3
            });
            var CurveRange = exports('CurveRange', (_dec$W = ccclass('cc.CurveRange'), _dec$W(_class$Z = (_temp$S = _class2$O = function () {
              function CurveRange() {
                this.mode = Mode.Constant;
                this.spline = constructLegacyCurveAndConvert();
                this.splineMin = constructLegacyCurveAndConvert();
                this.splineMax = constructLegacyCurveAndConvert();
                this.constant = 0;
                this.constantMin = 0;
                this.constantMax = 0;
                this.multiplier = 1;
              }

              var _proto = CurveRange.prototype;

              _proto.evaluate = function evaluate(time, rndRatio) {
                switch (this.mode) {
                  default:
                  case Mode.Constant:
                    return this.constant;

                  case Mode.Curve:
                    return this.spline.evaluate(time) * this.multiplier;

                  case Mode.TwoCurves:
                    return lerp(this.splineMin.evaluate(time), this.splineMax.evaluate(time), rndRatio) * this.multiplier;

                  case Mode.TwoConstants:
                    return lerp(this.constantMin, this.constantMax, rndRatio);
                }
              };

              _proto.getMax = function getMax() {
                switch (this.mode) {
                  default:
                  case Mode.Constant:
                    return this.constant;

                  case Mode.Curve:
                    return this.multiplier;

                  case Mode.TwoConstants:
                    return this.constantMax;

                  case Mode.TwoCurves:
                    return this.multiplier;
                }
              };

              _proto._onBeforeSerialize = function _onBeforeSerialize(props) {
                return SerializableTable[this.mode];
              };

              _createClass(CurveRange, [{
                key: "curve",
                get: function get() {
                  var _this$_curve;

                  return (_this$_curve = this._curve) !== null && _this$_curve !== void 0 ? _this$_curve : this._curve = new AnimationCurve(this.spline);
                },
                set: function set(value) {
                  this._curve = value;
                  this.spline = value._internalCurve;
                }
              }, {
                key: "curveMin",
                get: function get() {
                  var _this$_curveMin;

                  return (_this$_curveMin = this._curveMin) !== null && _this$_curveMin !== void 0 ? _this$_curveMin : this._curveMin = new AnimationCurve(this.splineMin);
                },
                set: function set(value) {
                  this._curveMin = value;
                  this.splineMin = value._internalCurve;
                }
              }, {
                key: "curveMax",
                get: function get() {
                  var _this$_curveMax;

                  return (_this$_curveMax = this._curveMax) !== null && _this$_curveMax !== void 0 ? _this$_curveMax : this._curveMax = new AnimationCurve(this.splineMax);
                },
                set: function set(value) {
                  this._curveMax = value;
                  this.splineMax = value._internalCurve;
                }
              }]);

              return CurveRange;
            }(), _class2$O.Mode = Mode, _temp$S)) || _class$Z));
            CCClass.fastDefine('cc.CurveRange', CurveRange, {
              multiplier: 1,
              constantMax: 0,
              constantMin: 0,
              constant: 0,
              mode: Mode.Constant,
              splineMax: Object.freeze(constructLegacyCurveAndConvert()),
              splineMin: Object.freeze(constructLegacyCurveAndConvert()),
              spline: Object.freeze(constructLegacyCurveAndConvert())
            });
            setClassAttr(CurveRange, 'multiplier', 'visible', true);
            setClassAttr(CurveRange, 'constantMax', 'visible', true);
            setClassAttr(CurveRange, 'constantMin', 'visible', true);
            setClassAttr(CurveRange, 'constant', 'visible', true);
            setClassAttr(CurveRange, 'mode', 'type', 'Enum');
            setClassAttr(CurveRange, 'mode', 'enumList', Enum.getList(Mode));
            setClassAttr(CurveRange, 'mode', 'visible', true);
            setClassAttr(CurveRange, 'splineMax', 'type', 'Object');
            setClassAttr(CurveRange, 'splineMax', 'ctor', RealCurve);
            setClassAttr(CurveRange, 'splineMax', 'visible', true);
            setClassAttr(CurveRange, 'splineMin', 'type', 'Object');
            setClassAttr(CurveRange, 'splineMin', 'ctor', RealCurve);
            setClassAttr(CurveRange, 'splineMin', 'visible', true);
            setClassAttr(CurveRange, 'spline', 'type', 'Object');
            setClassAttr(CurveRange, 'spline', 'ctor', RealCurve);
            setClassAttr(CurveRange, 'spline', 'visible', true);

            function evaluateCurve(cr, time, index) {
              switch (cr.mode) {
                case Mode.Constant:
                  return cr.constant;

                case Mode.Curve:
                  return cr.spline.evaluate(time) * cr.multiplier;

                case Mode.TwoCurves:
                  return index === 0 ? cr.splineMin.evaluate(time) * cr.multiplier : cr.splineMax.evaluate(time) * cr.multiplier;

                case Mode.TwoConstants:
                  return index === 0 ? cr.constantMin : cr.constantMax;

                default:
                  return 0;
              }
            }

            function evaluateHeight(cr) {
              switch (cr.mode) {
                case Mode.TwoConstants:
                  return 2;

                case Mode.TwoCurves:
                  return 2;

                default:
                  return 1;
              }
            }

            function packTexture(data, width, height) {
              var image = new ImageAsset({
                width: width,
                height: height,
                _data: data,
                _compressed: false,
                format: PixelFormat.RGBA32F
              });
              var texture = new Texture2D();
              texture.setFilters(Filter$1.NEAREST, Filter$1.NEAREST);
              texture.setMipFilter(Filter$1.NONE);
              texture.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);
              texture.image = image;
              return texture;
            }

            function packCurveRangeZ(samples, cr, discrete) {
              var height = evaluateHeight(cr);
              var data = new Float32Array(samples * height * 4);
              var interval = 1.0 / (samples - 1);
              var offset = 0;

              for (var h = 0; h < height; h++) {

                for (var j = 0; j < samples; j++) {
                  var value = evaluateCurve(cr, interval * j, h);

                  data[offset + 2] = value;
                  offset += 4;
                }
              }

              return packTexture(data, samples, height);
            }
            function packCurveRangeN(samples, cr, discrete) {
              var height = evaluateHeight(cr);
              var data = new Float32Array(samples * height * 4);
              var interval = 1.0 / (samples - 1);
              var sum = 0;
              var average = 0;
              var offset = 0;

              for (var h = 0; h < height; h++) {
                sum = 0;

                for (var j = 0; j < samples; j++) {
                  var value = evaluateCurve(cr, interval * j, h);

                  if (discrete) {
                    average = value;
                  } else {
                    sum += value;
                    average = sum / (j + 1);
                  }

                  data[offset] = average;
                  data[offset + 1] = average;
                  data[offset + 2] = average;
                  offset += 4;
                }
              }

              return packTexture(data, samples, height);
            }
            function packCurveRangeXY(samples, x, y, discrete) {
              var height = Math.max(evaluateHeight(x), evaluateHeight(y));
              var data = new Float32Array(samples * height * 4);
              var curves = [x, y];
              var interval = 1.0 / (samples - 1);

              for (var h = 0; h < height; h++) {
                for (var i = 0; i < 2; i++) {
                  var cr = curves[i];
                  var sum = 0;
                  var average = 0;

                  for (var j = 0; j < samples; j++) {
                    var value = evaluateCurve(cr, interval * j, h);

                    if (discrete) {
                      average = value;
                    } else {
                      sum += value;
                      average = sum / (j + 1);
                    }

                    data[j * 4 + i] = average;
                  }
                }
              }

              return packTexture(data, samples, height);
            }
            function packCurveRangeXYZ(samples, x, y, z, discrete) {
              var height = Math.max(evaluateHeight(x), evaluateHeight(y), evaluateHeight(z));
              var data = new Float32Array(samples * height * 4);
              var curves = [x, y, z];
              var interval = 1.0 / (samples - 1);

              for (var h = 0; h < height; h++) {
                for (var i = 0; i < 3; i++) {
                  var cr = curves[i];
                  var sum = 0;
                  var average = 0;

                  for (var j = 0; j < samples; j++) {
                    var value = evaluateCurve(cr, interval * j, h);

                    if (discrete) {
                      average = value;
                    } else {
                      sum += value;
                      average = sum / (j + 1);
                    }

                    data[j * 4 + i] = average;
                  }
                }
              }

              return packTexture(data, samples, height);
            }
            function packCurveRangeXYZW(samples, x, y, z, w, discrete) {
              var height = Math.max(evaluateHeight(x), evaluateHeight(y), evaluateHeight(z), evaluateHeight(w));
              var data = new Float32Array(samples * height * 4);
              var curves = [x, y, z, w];
              var interval = 1.0 / (samples - 1);

              for (var h = 0; h < height; h++) {
                for (var i = 0; i < 4; i++) {
                  var cr = curves[i];
                  var sum = 0;
                  var average = 0;

                  for (var j = 0; j < samples; j++) {
                    var value = evaluateCurve(cr, interval * j, h);

                    if (discrete) {
                      average = value;
                    } else {
                      sum += value;
                      average = sum / (j + 1);
                    }

                    data[j * 4 + i] = average;
                  }
                }
              }

              return packTexture(data, samples, height);
            }

            var Mode$1 = Enum({
              Blend: 0,
              Fixed: 1
            });
            var ColorKey = exports('ColorKey', function ColorKey() {
              this.color = Color$1.WHITE.clone();
              this.time = 0;
            });
            CCClass.fastDefine('cc.ColorKey', ColorKey, {
              color: Color$1.WHITE.clone(),
              time: 0
            });
            CCClass.Attr.setClassAttr(ColorKey, 'color', 'visible', true);
            CCClass.Attr.setClassAttr(ColorKey, 'time', 'visible', true);
            var AlphaKey = exports('AlphaKey', function AlphaKey() {
              this.alpha = 1;
              this.time = 0;
            });
            CCClass.fastDefine('cc.AlphaKey', AlphaKey, {
              alpha: 1,
              time: 0
            });
            CCClass.Attr.setClassAttr(AlphaKey, 'alpha', 'visible', true);
            CCClass.Attr.setClassAttr(AlphaKey, 'time', 'visible', true);

            var Gradient = exports('Gradient', function () {
              function Gradient() {
                this.colorKeys = new Array();
                this.alphaKeys = new Array();
                this.mode = Mode$1.Blend;
                this._color = void 0;
                this._color = Color$1.WHITE.clone();
              }

              var _proto = Gradient.prototype;

              _proto.setKeys = function setKeys(colorKeys, alphaKeys) {
                this.colorKeys = colorKeys;
                this.alphaKeys = alphaKeys;
              };

              _proto.sortKeys = function sortKeys() {
                if (this.colorKeys.length > 1) {
                  this.colorKeys.sort(function (a, b) {
                    return a.time - b.time;
                  });
                }

                if (this.alphaKeys.length > 1) {
                  this.alphaKeys.sort(function (a, b) {
                    return a.time - b.time;
                  });
                }
              };

              _proto.evaluate = function evaluate(time) {
                this.getRGB(time);

                this._color._set_a_unsafe(this.getAlpha(time));

                return this._color;
              };

              _proto.randomColor = function randomColor() {
                var c = this.colorKeys[Math.trunc(Math.random() * this.colorKeys.length)];
                var a = this.alphaKeys[Math.trunc(Math.random() * this.alphaKeys.length)];

                this._color.set(c.color);

                this._color._set_a_unsafe(a.alpha);

                return this._color;
              };

              _proto.getRGB = function getRGB(time) {
                if (this.colorKeys.length > 1) {
                  time = repeat$2(time, 1);

                  for (var i = 1; i < this.colorKeys.length; ++i) {
                    var preTime = this.colorKeys[i - 1].time;
                    var curTime = this.colorKeys[i].time;

                    if (time >= preTime && time < curTime) {
                      if (this.mode === Mode$1.Fixed) {
                        return this.colorKeys[i].color;
                      }

                      var factor = (time - preTime) / (curTime - preTime);
                      Color$1.lerp(this._color, this.colorKeys[i - 1].color, this.colorKeys[i].color, factor);
                      return this._color;
                    }
                  }

                  var lastIndex = this.colorKeys.length - 1;

                  if (time < this.colorKeys[0].time) {
                    Color$1.lerp(this._color, Color$1.BLACK, this.colorKeys[0].color, time / this.colorKeys[0].time);
                  } else if (time > this.colorKeys[lastIndex].time) {
                    Color$1.lerp(this._color, this.colorKeys[lastIndex].color, Color$1.BLACK, (time - this.colorKeys[lastIndex].time) / (1 - this.colorKeys[lastIndex].time));
                  }

                  return this._color;
                } else if (this.colorKeys.length === 1) {
                  this._color.set(this.colorKeys[0].color);

                  return this._color;
                } else {
                  this._color.set(Color$1.WHITE);

                  return this._color;
                }
              };

              _proto.getAlpha = function getAlpha(time) {
                var basicAlpha = 0;

                if (this.alphaKeys.length > 1) {
                  time = repeat$2(time, 1);

                  for (var i = 1; i < this.alphaKeys.length; ++i) {
                    var preTime = this.alphaKeys[i - 1].time;
                    var curTime = this.alphaKeys[i].time;

                    if (time >= preTime && time < curTime) {
                      if (this.mode === Mode$1.Fixed) {
                        return this.alphaKeys[i].alpha;
                      }

                      var factor = (time - preTime) / (curTime - preTime);
                      return lerp(this.alphaKeys[i - 1].alpha, this.alphaKeys[i].alpha, factor);
                    }
                  }

                  var lastIndex = this.alphaKeys.length - 1;

                  if (time < this.alphaKeys[0].time) {
                    return lerp(basicAlpha, this.alphaKeys[0].alpha, time / this.alphaKeys[0].time);
                  } else if (time > this.alphaKeys[lastIndex].time) {
                    return lerp(this.alphaKeys[lastIndex].alpha, basicAlpha, (time - this.alphaKeys[lastIndex].time) / (1 - this.alphaKeys[lastIndex].time));
                  }

                  return 255;
                } else if (this.alphaKeys.length === 1) {
                  return this.alphaKeys[0].alpha;
                } else {
                  return 255;
                }
              };

              return Gradient;
            }());

            Gradient.Mode = Mode$1;
            CCClass.fastDefine('cc.Gradient', Gradient, {
              colorKeys: [],
              alphaKeys: [],
              mode: Mode$1.Blend
            });
            CCClass.Attr.setClassAttr(Gradient, 'colorKeys', 'visible', true);
            CCClass.Attr.setClassAttr(Gradient, 'alphaKeys', 'visible', true);
            CCClass.Attr.setClassAttr(Gradient, 'mode', 'visible', true);

            var _dec$X, _dec2$H, _dec3$v, _dec4$r, _dec5$p, _dec6$m, _class$_, _class2$P, _descriptor$L, _descriptor2$D, _descriptor3$t, _descriptor4$o, _descriptor5$j, _descriptor6$f, _descriptor7$b, _class3$c, _temp$T;
            var SerializableTable$1 = EDITOR ;
            var Mode$2 = Enum({
              Color: 0,
              Gradient: 1,
              TwoColors: 2,
              TwoGradients: 3,
              RandomColor: 4
            });
            var GradientRange = exports('GradientRange', (_dec$X = ccclass('cc.GradientRange'), _dec2$H = type$1(Mode$2), _dec3$v = type$1(Gradient), _dec4$r = type$1(Gradient), _dec5$p = type$1(Gradient), _dec6$m = type$1(Mode$2), _dec$X(_class$_ = (_class2$P = (_temp$T = _class3$c = function () {
              function GradientRange() {
                _initializerDefineProperty(this, "color", _descriptor$L, this);

                _initializerDefineProperty(this, "colorMin", _descriptor2$D, this);

                _initializerDefineProperty(this, "colorMax", _descriptor3$t, this);

                _initializerDefineProperty(this, "gradient", _descriptor4$o, this);

                _initializerDefineProperty(this, "gradientMin", _descriptor5$j, this);

                _initializerDefineProperty(this, "gradientMax", _descriptor6$f, this);

                _initializerDefineProperty(this, "_mode", _descriptor7$b, this);

                this._color = Color$1.WHITE.clone();
              }

              var _proto = GradientRange.prototype;

              _proto.evaluate = function evaluate(time, rndRatio) {
                switch (this._mode) {
                  case Mode$2.Color:
                    return this.color;

                  case Mode$2.TwoColors:
                    Color$1.lerp(this._color, this.colorMin, this.colorMax, rndRatio);
                    return this._color;

                  case Mode$2.RandomColor:
                    return this.gradient.randomColor();

                  case Mode$2.Gradient:
                    return this.gradient.evaluate(time);

                  case Mode$2.TwoGradients:
                    Color$1.lerp(this._color, this.gradientMin.evaluate(time), this.gradientMax.evaluate(time), rndRatio);
                    return this._color;

                  default:
                    return this.color;
                }
              };

              _proto._onBeforeSerialize = function _onBeforeSerialize(props) {
                return SerializableTable$1[this._mode];
              };

              _createClass(GradientRange, [{
                key: "mode",
                get: function get() {
                  return this._mode;
                },
                set: function set(m) {

                  this._mode = m;
                }
              }]);

              return GradientRange;
            }(), _class3$c.Mode = Mode$2, _temp$T), (_applyDecoratedDescriptor(_class2$P.prototype, "mode", [_dec2$H], Object.getOwnPropertyDescriptor(_class2$P.prototype, "mode"), _class2$P.prototype), _descriptor$L = _applyDecoratedDescriptor(_class2$P.prototype, "color", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            }), _descriptor2$D = _applyDecoratedDescriptor(_class2$P.prototype, "colorMin", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            }), _descriptor3$t = _applyDecoratedDescriptor(_class2$P.prototype, "colorMax", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            }), _descriptor4$o = _applyDecoratedDescriptor(_class2$P.prototype, "gradient", [_dec3$v], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Gradient();
              }
            }), _descriptor5$j = _applyDecoratedDescriptor(_class2$P.prototype, "gradientMin", [_dec4$r], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Gradient();
              }
            }), _descriptor6$f = _applyDecoratedDescriptor(_class2$P.prototype, "gradientMax", [_dec5$p], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Gradient();
              }
            }), _descriptor7$b = _applyDecoratedDescriptor(_class2$P.prototype, "_mode", [_dec6$m], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Mode$2.Color;
              }
            })), _class2$P)) || _class$_));

            function evaluateGradient(gr, time, index) {
              switch (gr.mode) {
                case Mode$2.Color:
                  return gr.color;

                case Mode$2.TwoColors:
                  return index === 0 ? gr.colorMin : gr.colorMax;

                case Mode$2.RandomColor:
                  return gr.gradient.randomColor();

                case Mode$2.Gradient:
                  return gr.gradient.evaluate(time);

                case Mode$2.TwoGradients:
                  return index === 0 ? gr.gradientMin.evaluate(time) : gr.gradientMax.evaluate(time);

                default:
                  return gr.color;
              }
            }

            function evaluateHeight$1(gr) {
              switch (gr.mode) {
                case Mode$2.TwoColors:
                  return 2;

                case Mode$2.TwoGradients:
                  return 2;

                default:
                  return 1;
              }
            }

            function packGradientRange(samples, gr) {
              var height = evaluateHeight$1(gr);
              var data = new Uint8Array(samples * height * 4);
              var interval = 1.0 / (samples - 1);
              var offset = 0;

              for (var h = 0; h < height; h++) {
                for (var j = 0; j < samples; j++) {
                  var color = evaluateGradient(gr, interval * j, h);
                  data[offset] = color.r;
                  data[offset + 1] = color.g;
                  data[offset + 2] = color.b;
                  data[offset + 3] = color.a;
                  offset += 4;
                }
              }

              var texture = new Texture2D();
              texture.create(samples, height, PixelFormat.RGBA8888);
              texture.setFilters(Filter$1.LINEAR, Filter$1.LINEAR);
              texture.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);
              texture.uploadData(data);
              return texture;
            }

            var _dec$Y, _dec2$I, _dec3$w, _dec4$s, _dec5$q, _dec6$n, _dec7$m, _dec8$k, _dec9$g, _dec10$e, _dec11$a, _dec12$a, _dec13$a, _dec14$8, _dec15$8, _dec16$7, _dec17$6, _dec18$6, _dec19$6, _dec20$6, _dec21$6, _dec22$5, _dec23$4, _dec24$4, _dec25$4, _dec26$4, _dec27$4, _dec28$3, _class$$, _class2$Q, _descriptor$M, _descriptor2$E, _descriptor3$u, _descriptor4$p, _descriptor5$k, _descriptor6$g, _descriptor7$c, _temp$U;
            var _matInsInfo = {
              parent: null,
              owner: null,
              subModelIdx: 0
            };
            var CC_USE_WORLD_SPACE = 'CC_USE_WORLD_SPACE';
            var define = {
              CC_USE_WORLD_SPACE: false
            };
            var Line = function (v) { return exports({ Line: v, LineComponent: v }), v; }((_dec$Y = ccclass('cc.Line'), _dec2$I = help(), _dec3$w = menu$1(), _dec4$s = type$1(Texture2D), _dec5$q = type$1(Texture2D), _dec6$n = displayOrder(), _dec7$m = tooltip(), _dec8$k = displayOrder(), _dec9$g = tooltip(), _dec10$e = type$1([Vec3]), _dec11$a = type$1([Vec3]), _dec12$a = displayOrder(), _dec13$a = tooltip(), _dec14$8 = type$1(CurveRange), _dec15$8 = type$1(CurveRange), _dec16$7 = range(), _dec17$6 = displayOrder(), _dec18$6 = tooltip(), _dec19$6 = type$1(Vec2), _dec20$6 = displayOrder(), _dec21$6 = tooltip(), _dec22$5 = type$1(Vec2), _dec23$4 = displayOrder(), _dec24$4 = tooltip(), _dec25$4 = type$1(GradientRange), _dec26$4 = type$1(GradientRange), _dec27$4 = displayOrder(), _dec28$3 = tooltip(), _dec$Y(_class$$ = _dec2$I(_class$$ = _dec3$w(_class$$ = executeInEditMode(_class$$ = (_class2$Q = (_temp$U = function (_Component) {
              _inheritsLoose(Line, _Component);

              function Line() {
                var _this;

                _this = _Component.call(this) || this;

                _initializerDefineProperty(_this, "_texture", _descriptor$M, _assertThisInitialized(_this));

                _this._material = null;
                _this._materialInstance = null;

                _initializerDefineProperty(_this, "_worldSpace", _descriptor2$E, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_positions", _descriptor3$u, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_width", _descriptor4$p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_tile", _descriptor5$k, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_offset", _descriptor6$g, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_color", _descriptor7$c, _assertThisInitialized(_this));

                _this._model = null;
                _this._tile_offset = new Vec4();
                return _this;
              }

              var _proto = Line.prototype;

              _proto.onLoad = function onLoad() {
                var model = this._model = legacyCC.director.root.createModel(LineModel);
                model.node = model.transform = this.node;

                if (this._material === null) {
                  this._material = new Material();

                  this._material.copy(builtinResMgr.get('default-trail-material'));

                  define[CC_USE_WORLD_SPACE] = this.worldSpace;
                  _matInsInfo.parent = this._material;
                  _matInsInfo.subModelIdx = 0;
                  this._materialInstance = new MaterialInstance(_matInsInfo);
                  _matInsInfo.parent = null;
                  _matInsInfo.subModelIdx = 0;

                  this._materialInstance.recompileShaders(define);
                }

                model.updateMaterial(this._materialInstance);
                model.setCapacity(100);
              };

              _proto.onEnable = function onEnable() {
                if (!this._model) {
                  return;
                }

                this._attachToScene();

                this.texture = this._texture;
                this.tile = this._tile;
                this.offset = this._offset;

                this._model.addLineVertexData(this._positions, this._width, this._color);
              };

              _proto.onDisable = function onDisable() {
                if (this._model) {
                  this._detachFromScene();
                }
              };

              _proto._attachToScene = function _attachToScene() {
                if (this._model && this.node && this.node.scene) {
                  if (this._model.scene) {
                    this._detachFromScene();
                  }

                  this._getRenderScene().addModel(this._model);
                }
              };

              _proto._detachFromScene = function _detachFromScene() {
                if (this._model && this._model.scene) {
                  this._model.scene.removeModel(this._model);
                }
              };

              _createClass(Line, [{
                key: "texture",
                get: function get() {
                  return this._texture;
                },
                set: function set(val) {
                  this._texture = val;

                  if (this._materialInstance) {
                    this._materialInstance.setProperty('mainTexture', val);
                  }
                }
              }, {
                key: "worldSpace",
                get: function get() {
                  return this._worldSpace;
                },
                set: function set(val) {
                  this._worldSpace = val;

                  if (this._materialInstance) {
                    define[CC_USE_WORLD_SPACE] = this.worldSpace;

                    this._materialInstance.recompileShaders(define);

                    if (this._model) {
                      this._model.setSubModelMaterial(0, this._materialInstance);
                    }
                  }
                }
              }, {
                key: "positions",
                get: function get() {
                  return this._positions;
                },
                set: function set(val) {
                  this._positions = val;

                  if (this._model) {
                    this._model.addLineVertexData(this._positions, this._width, this._color);
                  }
                }
              }, {
                key: "width",
                get: function get() {
                  return this._width;
                },
                set: function set(val) {
                  this._width = val;

                  if (this._model) {
                    this._model.addLineVertexData(this._positions, this._width, this._color);
                  }
                }
              }, {
                key: "tile",
                get: function get() {
                  return this._tile;
                },
                set: function set(val) {
                  this._tile.set(val);

                  if (this._materialInstance) {
                    this._tile_offset.x = this._tile.x;
                    this._tile_offset.y = this._tile.y;

                    this._materialInstance.setProperty('mainTiling_Offset', this._tile_offset);
                  }
                }
              }, {
                key: "offset",
                get: function get() {
                  return this._offset;
                },
                set: function set(val) {
                  this._offset.set(val);

                  if (this._materialInstance) {
                    this._tile_offset.z = this._offset.x;
                    this._tile_offset.w = this._offset.y;

                    this._materialInstance.setProperty('mainTiling_Offset', this._tile_offset);
                  }
                }
              }, {
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(val) {
                  this._color = val;

                  if (this._model) {
                    this._model.addLineVertexData(this._positions, this._width, this._color);
                  }
                }
              }]);

              return Line;
            }(Component), _temp$U), (_descriptor$M = _applyDecoratedDescriptor(_class2$Q.prototype, "_texture", [_dec4$s], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$Q.prototype, "texture", [_dec5$q, _dec6$n, _dec7$m], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "texture"), _class2$Q.prototype), _descriptor2$E = _applyDecoratedDescriptor(_class2$Q.prototype, "_worldSpace", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$Q.prototype, "worldSpace", [_dec8$k, _dec9$g], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "worldSpace"), _class2$Q.prototype), _descriptor3$u = _applyDecoratedDescriptor(_class2$Q.prototype, "_positions", [_dec10$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _applyDecoratedDescriptor(_class2$Q.prototype, "positions", [_dec11$a, _dec12$a, _dec13$a], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "positions"), _class2$Q.prototype), _descriptor4$p = _applyDecoratedDescriptor(_class2$Q.prototype, "_width", [_dec14$8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _applyDecoratedDescriptor(_class2$Q.prototype, "width", [_dec15$8, _dec16$7, _dec17$6, _dec18$6], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "width"), _class2$Q.prototype), _descriptor5$k = _applyDecoratedDescriptor(_class2$Q.prototype, "_tile", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2(1, 1);
              }
            }), _applyDecoratedDescriptor(_class2$Q.prototype, "tile", [_dec19$6, _dec20$6, _dec21$6], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "tile"), _class2$Q.prototype), _descriptor6$g = _applyDecoratedDescriptor(_class2$Q.prototype, "_offset", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2(0, 0);
              }
            }), _applyDecoratedDescriptor(_class2$Q.prototype, "offset", [_dec22$5, _dec23$4, _dec24$4], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "offset"), _class2$Q.prototype), _descriptor7$c = _applyDecoratedDescriptor(_class2$Q.prototype, "_color", [_dec25$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new GradientRange();
              }
            }), _applyDecoratedDescriptor(_class2$Q.prototype, "color", [_dec26$4, _dec27$4, _dec28$3], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "color"), _class2$Q.prototype)), _class2$Q)) || _class$$) || _class$$) || _class$$) || _class$$));

            var Particle = function () {
              function Particle(particleSystem) {
                this.particleSystem = void 0;
                this.position = void 0;
                this.velocity = void 0;
                this.animatedVelocity = void 0;
                this.ultimateVelocity = void 0;
                this.angularVelocity = void 0;
                this.axisOfRotation = void 0;
                this.rotation = void 0;
                this.startEuler = void 0;
                this.startRotation = void 0;
                this.startRotated = void 0;
                this.deltaQuat = void 0;
                this.deltaMat = void 0;
                this.localMat = void 0;
                this.startSize = void 0;
                this.size = void 0;
                this.startColor = void 0;
                this.color = void 0;
                this.randomSeed = void 0;
                this.remainingLifetime = void 0;
                this.loopCount = void 0;
                this.lastLoop = void 0;
                this.trailDelay = void 0;
                this.startLifetime = void 0;
                this.emitAccumulator0 = void 0;
                this.emitAccumulator1 = void 0;
                this.frameIndex = void 0;
                this.startRow = void 0;
                this.particleSystem = particleSystem;
                this.position = new Vec3(0, 0, 0);
                this.velocity = new Vec3(0, 0, 0);
                this.animatedVelocity = new Vec3(0, 0, 0);
                this.ultimateVelocity = new Vec3(0, 0, 0);
                this.angularVelocity = new Vec3(0, 0, 0);
                this.axisOfRotation = new Vec3(0, 0, 0);
                this.rotation = new Vec3(0, 0, 0);
                this.startEuler = new Vec3(0, 0, 0);
                this.startRotation = new Quat();
                this.startRotated = false;
                this.deltaQuat = new Quat();
                this.deltaMat = new Mat4();
                this.localMat = new Mat4();
                this.startSize = new Vec3(0, 0, 0);
                this.size = new Vec3(0, 0, 0);
                this.startColor = Color$1.WHITE.clone();
                this.color = Color$1.WHITE.clone();
                this.randomSeed = 0;
                this.remainingLifetime = 0.0;
                this.loopCount = 0;
                this.lastLoop = 0;
                this.trailDelay = 0;
                this.startLifetime = 0.0;
                this.emitAccumulator0 = 0.0;
                this.emitAccumulator1 = 0.0;
                this.frameIndex = 0.0;
                this.startRow = 0;
              }

              var _proto = Particle.prototype;

              _proto.reset = function reset() {
                this.rotation.set(0, 0, 0);
                this.startEuler.set(0, 0, 0);
                this.startRotation.set(0, 0, 0, 1);
                this.startRotated = false;
                this.deltaQuat.set(0, 0, 0, 1);
                this.deltaMat.identity();
                this.localMat.identity();
              };

              return Particle;
            }();
            Particle.INDENTIFY_NEG_QUAT = 10;
            Particle.R2D = 180.0 / Math.PI;
            var PARTICLE_MODULE_NAME = {
              COLOR: 'colorModule',
              FORCE: 'forceModule',
              LIMIT: 'limitModule',
              ROTATION: 'rotationModule',
              SIZE: 'sizeModule',
              VELOCITY: 'velocityModule',
              TEXTURE: 'textureModule'
            };
            var PARTICLE_MODULE_ORDER = ['sizeModule', 'colorModule', 'forceModule', 'velocityModule', 'limitModule', 'rotationModule', 'textureModule'];
            var PARTICLE_MODULE_PROPERTY = ['_colorOverLifetimeModule', '_shapeModule', '_sizeOvertimeModule', '_velocityOvertimeModule', '_forceOvertimeModule', '_limitVelocityOvertimeModule', '_rotationOvertimeModule', '_textureAnimationModule', '_trailModule'];
            var ParticleModuleBase = function () {
              function ParticleModuleBase() {
                this.target = null;
                this.needUpdate = false;
                this.needAnimate = true;
                this.name = void 0;
              }

              var _proto2 = ParticleModuleBase.prototype;

              _proto2.bindTarget = function bindTarget(target) {
                this.target = target;
              };

              _proto2.update = function update(space, trans) {};

              return ParticleModuleBase;
            }();

            var Space = Enum({
              World: 0,
              Local: 1,
              Custom: 2
            });
            var CullingMode = Enum({
              Pause: 0,
              PauseAndCatchup: 1,
              AlwaysSimulate: 2
            });
            var AlignmentSpace = Enum({
              World: 0,
              Local: 1,
              View: 2
            });
            var RenderMode$1 = Enum({
              Billboard: 0,
              StrecthedBillboard: 1,
              HorizontalBillboard: 2,
              VerticalBillboard: 3,
              Mesh: 4
            });
            var ShapeType = Enum({
              Box: 0,
              Circle: 1,
              Cone: 2,
              Sphere: 3,
              Hemisphere: 4
            });
            var EmitLocation = Enum({
              Base: 0,
              Edge: 1,
              Shell: 2,
              Volume: 3
            });
            var ArcMode = Enum({
              Random: 0,
              Loop: 1,
              PingPong: 2
            });
            var TrailMode = Enum({
              Particles: 0
            });
            var TextureMode = Enum({
              Stretch: 0
            });
            var ModuleRandSeed = {
              LIMIT: 23541,
              SIZE: 39825,
              TEXTURE: 90794,
              COLOR: 91041,
              FORCE: 212165,
              ROTATION: 125292,
              VELOCITY_X: 197866,
              VELOCITY_Y: 156497,
              VELOCITY_Z: 984136
            };

            var _dec$Z, _dec2$J, _dec3$x, _dec4$t, _class$10, _class2$R, _descriptor$N, _descriptor2$F, _temp$V;
            var COLOR_OVERTIME_RAND_OFFSET = ModuleRandSeed.COLOR;
            var ColorOvertimeModule = (_dec$Z = ccclass('cc.ColorOvertimeModule'), _dec2$J = displayOrder(), _dec3$x = type$1(GradientRange), _dec4$t = displayOrder(), _dec$Z(_class$10 = (_class2$R = (_temp$V = function (_ParticleModuleBase) {
              _inheritsLoose(ColorOvertimeModule, _ParticleModuleBase);

              function ColorOvertimeModule() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _ParticleModuleBase.call.apply(_ParticleModuleBase, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_enable", _descriptor$N, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "color", _descriptor2$F, _assertThisInitialized(_this));

                _this.name = PARTICLE_MODULE_NAME.COLOR;
                return _this;
              }

              var _proto = ColorOvertimeModule.prototype;

              _proto.animate = function animate(particle) {
                particle.color.set(particle.startColor);
                particle.color.multiply(this.color.evaluate(1.0 - particle.remainingLifetime / particle.startLifetime, pseudoRandom(particle.randomSeed + COLOR_OVERTIME_RAND_OFFSET)));
              };

              _createClass(ColorOvertimeModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (this._enable === val) return;
                  this._enable = val;
                  if (!this.target) return;
                  this.target.enableModule(this.name, val, this);
                }
              }]);

              return ColorOvertimeModule;
            }(ParticleModuleBase), _temp$V), (_descriptor$N = _applyDecoratedDescriptor(_class2$R.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$R.prototype, "enable", [_dec2$J], Object.getOwnPropertyDescriptor(_class2$R.prototype, "enable"), _class2$R.prototype), _descriptor2$F = _applyDecoratedDescriptor(_class2$R.prototype, "color", [_dec3$x, serializable, _dec4$t], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new GradientRange();
              }
            })), _class2$R)) || _class$10);

            var particleEmitZAxis = new Vec3(0, 0, -1);
            function calculateTransform(systemSpace, moduleSpace, worldTransform, outQuat) {
              if (moduleSpace !== systemSpace) {
                if (systemSpace === Space.World) {
                  Mat4.getRotation(outQuat, worldTransform);
                } else {
                  Mat4.invert(worldTransform, worldTransform);
                  Mat4.getRotation(outQuat, worldTransform);
                }

                return true;
              } else {
                Quat.set(outQuat, 0, 0, 0, 1);
                return false;
              }
            }
            function fixedAngleUnitVector2(out, theta) {
              Vec2.set(out, Math.cos(theta), Math.sin(theta));
            }
            function randomUnitVector(out) {
              var z = randomRange(-1, 1);
              var a = randomRange(0, 2 * Math.PI);
              var r = Math.sqrt(1 - z * z);
              var x = r * Math.cos(a);
              var y = r * Math.sin(a);
              Vec3.set(out, x, y, z);
            }
            function randomPointBetweenSphere(out, minRadius, maxRadius) {
              randomUnitVector(out);
              Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * random());
            }
            function randomPointBetweenCircleAtFixedAngle(out, minRadius, maxRadius, theta) {
              fixedAngleUnitVector2(out, theta);
              out.z = 0;
              Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * random());
            }
            function randomPointInCube(out, extents) {
              Vec3.set(out, randomRange(-extents.x, extents.x), randomRange(-extents.y, extents.y), randomRange(-extents.z, extents.z));
            }
            function randomSortArray(arr) {
              for (var i = 0; i < arr.length; i++) {
                var transpose = i + randomRangeInt(0, arr.length - i);
                var val = arr[transpose];
                arr[transpose] = arr[i];
                arr[i] = val;
              }
            }
            function randomSign() {
              var sgn = randomRange(-1, 1);

              if (sgn === 0) {
                sgn++;
              }

              return sign$1(sgn);
            }

            var _dec$_, _dec2$K, _dec3$y, _dec4$u, _dec5$r, _dec6$o, _dec7$n, _dec8$l, _dec9$h, _dec10$f, _dec11$b, _dec12$b, _dec13$b, _dec14$9, _dec15$9, _dec16$8, _dec17$7, _class$11, _class2$S, _descriptor$O, _descriptor2$G, _descriptor3$v, _descriptor4$q, _descriptor5$l, _temp$W;
            var FORCE_OVERTIME_RAND_OFFSET = ModuleRandSeed.FORCE;

            var _temp_v3 = new Vec3();

            var ForceOvertimeModule = (_dec$_ = ccclass('cc.ForceOvertimeModule'), _dec2$K = displayOrder(), _dec3$y = type$1(CurveRange), _dec4$u = range(), _dec5$r = displayOrder(), _dec6$o = tooltip(), _dec7$n = type$1(CurveRange), _dec8$l = range(), _dec9$h = displayOrder(), _dec10$f = tooltip(), _dec11$b = type$1(CurveRange), _dec12$b = range(), _dec13$b = displayOrder(), _dec14$9 = tooltip(), _dec15$9 = type$1(Space), _dec16$8 = displayOrder(), _dec17$7 = tooltip(), _dec$_(_class$11 = (_class2$S = (_temp$W = function (_ParticleModuleBase) {
              _inheritsLoose(ForceOvertimeModule, _ParticleModuleBase);

              function ForceOvertimeModule() {
                var _this;

                _this = _ParticleModuleBase.call(this) || this;

                _initializerDefineProperty(_this, "_enable", _descriptor$O, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "x", _descriptor2$G, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "y", _descriptor3$v, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "z", _descriptor4$q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "space", _descriptor5$l, _assertThisInitialized(_this));

                _this.randomized = false;
                _this.rotation = void 0;
                _this.needTransform = void 0;
                _this.name = PARTICLE_MODULE_NAME.FORCE;
                _this.rotation = new Quat();
                _this.needTransform = false;
                _this.needUpdate = true;
                return _this;
              }

              var _proto = ForceOvertimeModule.prototype;

              _proto.update = function update(space, worldTransform) {
                this.needTransform = calculateTransform(space, this.space, worldTransform, this.rotation);
              };

              _proto.animate = function animate(p, dt) {
                var normalizedTime = 1 - p.remainingLifetime / p.startLifetime;
                var force = Vec3.set(_temp_v3, this.x.evaluate(normalizedTime, pseudoRandom(p.randomSeed + FORCE_OVERTIME_RAND_OFFSET)), this.y.evaluate(normalizedTime, pseudoRandom(p.randomSeed + FORCE_OVERTIME_RAND_OFFSET)), this.z.evaluate(normalizedTime, pseudoRandom(p.randomSeed + FORCE_OVERTIME_RAND_OFFSET)));

                if (this.needTransform) {
                  Vec3.transformQuat(force, force, this.rotation);
                }

                Vec3.scaleAndAdd(p.velocity, p.velocity, force, dt);
                Vec3.copy(p.ultimateVelocity, p.velocity);
              };

              _createClass(ForceOvertimeModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (this._enable === val) return;
                  this._enable = val;
                  if (!this.target) return;
                  this.target.enableModule(this.name, val, this);
                }
              }]);

              return ForceOvertimeModule;
            }(ParticleModuleBase), _temp$W), (_descriptor$O = _applyDecoratedDescriptor(_class2$S.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$S.prototype, "enable", [_dec2$K], Object.getOwnPropertyDescriptor(_class2$S.prototype, "enable"), _class2$S.prototype), _descriptor2$G = _applyDecoratedDescriptor(_class2$S.prototype, "x", [_dec3$y, serializable, _dec4$u, _dec5$r, _dec6$o], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor3$v = _applyDecoratedDescriptor(_class2$S.prototype, "y", [_dec7$n, serializable, _dec8$l, _dec9$h, _dec10$f], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor4$q = _applyDecoratedDescriptor(_class2$S.prototype, "z", [_dec11$b, serializable, _dec12$b, _dec13$b, _dec14$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor5$l = _applyDecoratedDescriptor(_class2$S.prototype, "space", [_dec15$9, serializable, _dec16$8, _dec17$7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Space.Local;
              }
            })), _class2$S)) || _class$11);

            var _dec$$, _dec2$L, _dec3$z, _dec4$v, _dec5$s, _dec6$p, _dec7$o, _dec8$m, _dec9$i, _dec10$g, _dec11$c, _dec12$c, _dec13$c, _dec14$a, _dec15$a, _dec16$9, _dec17$8, _dec18$7, _dec19$7, _dec20$7, _dec21$7, _dec22$6, _dec23$5, _dec24$5, _dec25$5, _class$12, _class2$T, _descriptor$P, _descriptor2$H, _descriptor3$w, _descriptor4$r, _descriptor5$m, _descriptor6$h, _descriptor7$d, _descriptor8$b, _temp$X;
            var LIMIT_VELOCITY_RAND_OFFSET = ModuleRandSeed.LIMIT;

            var _temp_v3$1 = new Vec3();

            var _temp_v3_1 = new Vec3();

            var LimitVelocityOvertimeModule = (_dec$$ = ccclass('cc.LimitVelocityOvertimeModule'), _dec2$L = displayOrder(), _dec3$z = type$1(CurveRange), _dec4$v = range(), _dec5$s = displayOrder(), _dec6$p = tooltip(), _dec7$o = type$1(CurveRange), _dec8$m = range(), _dec9$i = displayOrder(), _dec10$g = tooltip(), _dec11$c = type$1(CurveRange), _dec12$c = range(), _dec13$c = displayOrder(), _dec14$a = tooltip(), _dec15$a = type$1(CurveRange), _dec16$9 = range(), _dec17$8 = displayOrder(), _dec18$7 = tooltip(), _dec19$7 = displayOrder(), _dec20$7 = tooltip(), _dec21$7 = displayOrder(), _dec22$6 = tooltip(), _dec23$5 = type$1(Space), _dec24$5 = displayOrder(), _dec25$5 = tooltip(), _dec$$(_class$12 = (_class2$T = (_temp$X = function (_ParticleModuleBase) {
              _inheritsLoose(LimitVelocityOvertimeModule, _ParticleModuleBase);

              function LimitVelocityOvertimeModule() {
                var _this;

                _this = _ParticleModuleBase.call(this) || this;

                _initializerDefineProperty(_this, "_enable", _descriptor$P, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "limitX", _descriptor2$H, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "limitY", _descriptor3$w, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "limitZ", _descriptor4$r, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "limit", _descriptor5$m, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "dampen", _descriptor6$h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "separateAxes", _descriptor7$d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "space", _descriptor8$b, _assertThisInitialized(_this));

                _this.drag = null;
                _this.multiplyDragByParticleSize = false;
                _this.multiplyDragByParticleVelocity = false;
                _this.name = PARTICLE_MODULE_NAME.LIMIT;
                _this.rotation = void 0;
                _this.needTransform = void 0;
                _this.rotation = new Quat();
                _this.needTransform = false;
                _this.needUpdate = true;
                return _this;
              }

              var _proto = LimitVelocityOvertimeModule.prototype;

              _proto.update = function update(space, worldTransform) {
                this.needTransform = calculateTransform(space, this.space, worldTransform, this.rotation);
              };

              _proto.animate = function animate(p, dt) {
                var normalizedTime = 1 - p.remainingLifetime / p.startLifetime;
                var dampedVel = _temp_v3$1;

                if (this.separateAxes) {
                  Vec3.set(_temp_v3_1, this.limitX.evaluate(normalizedTime, pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET)), this.limitY.evaluate(normalizedTime, pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET)), this.limitZ.evaluate(normalizedTime, pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET)));

                  if (this.needTransform) {
                    Vec3.transformQuat(_temp_v3_1, _temp_v3_1, this.rotation);
                  }

                  Vec3.set(dampedVel, dampenBeyondLimit(p.ultimateVelocity.x, _temp_v3_1.x, this.dampen), dampenBeyondLimit(p.ultimateVelocity.y, _temp_v3_1.y, this.dampen), dampenBeyondLimit(p.ultimateVelocity.z, _temp_v3_1.z, this.dampen));
                } else {
                  Vec3.normalize(dampedVel, p.ultimateVelocity);
                  Vec3.multiplyScalar(dampedVel, dampedVel, dampenBeyondLimit(p.ultimateVelocity.length(), this.limit.evaluate(normalizedTime, pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET)), this.dampen));
                }

                Vec3.copy(p.ultimateVelocity, dampedVel);
              };

              _createClass(LimitVelocityOvertimeModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (this._enable === val) return;
                  this._enable = val;
                  if (!this.target) return;
                  this.target.enableModule(this.name, val, this);
                }
              }]);

              return LimitVelocityOvertimeModule;
            }(ParticleModuleBase), _temp$X), (_descriptor$P = _applyDecoratedDescriptor(_class2$T.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$T.prototype, "enable", [_dec2$L], Object.getOwnPropertyDescriptor(_class2$T.prototype, "enable"), _class2$T.prototype), _descriptor2$H = _applyDecoratedDescriptor(_class2$T.prototype, "limitX", [_dec3$z, serializable, _dec4$v, _dec5$s, _dec6$p], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor3$w = _applyDecoratedDescriptor(_class2$T.prototype, "limitY", [_dec7$o, serializable, _dec8$m, _dec9$i, _dec10$g], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor4$r = _applyDecoratedDescriptor(_class2$T.prototype, "limitZ", [_dec11$c, serializable, _dec12$c, _dec13$c, _dec14$a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor5$m = _applyDecoratedDescriptor(_class2$T.prototype, "limit", [_dec15$a, serializable, _dec16$9, _dec17$8, _dec18$7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor6$h = _applyDecoratedDescriptor(_class2$T.prototype, "dampen", [serializable, _dec19$7, _dec20$7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 3;
              }
            }), _descriptor7$d = _applyDecoratedDescriptor(_class2$T.prototype, "separateAxes", [serializable, _dec21$7, _dec22$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor8$b = _applyDecoratedDescriptor(_class2$T.prototype, "space", [_dec23$5, serializable, _dec24$5, _dec25$5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Space.Local;
              }
            })), _class2$T)) || _class$12);

            function dampenBeyondLimit(vel, limit, dampen) {
              var sgn = Math.sign(vel);
              var abs = Math.abs(vel);

              if (abs > limit) {
                abs = lerp(abs, limit, dampen);
              }

              return abs * sgn;
            }

            var _dec$10, _dec2$M, _dec3$A, _dec4$w, _dec5$t, _dec6$q, _dec7$p, _dec8$n, _dec9$j, _dec10$h, _dec11$d, _dec12$d, _dec13$d, _dec14$b, _dec15$b, _dec16$a, _class$13, _class2$U, _descriptor$Q, _descriptor2$I, _descriptor3$x, _descriptor4$s, _descriptor5$n, _temp$Y;
            var ROTATION_OVERTIME_RAND_OFFSET = ModuleRandSeed.ROTATION;
            var RotationOvertimeModule = (_dec$10 = ccclass('cc.RotationOvertimeModule'), _dec2$M = displayOrder(), _dec3$A = displayOrder(), _dec4$w = tooltip(), _dec5$t = type$1(CurveRange), _dec6$q = range(), _dec7$p = displayOrder(), _dec8$n = tooltip(), _dec9$j = type$1(CurveRange), _dec10$h = range(), _dec11$d = displayOrder(), _dec12$d = tooltip(), _dec13$d = type$1(CurveRange), _dec14$b = range(), _dec15$b = displayOrder(), _dec16$a = tooltip(), _dec$10(_class$13 = (_class2$U = (_temp$Y = function (_ParticleModuleBase) {
              _inheritsLoose(RotationOvertimeModule, _ParticleModuleBase);

              function RotationOvertimeModule() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _ParticleModuleBase.call.apply(_ParticleModuleBase, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_enable", _descriptor$Q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_separateAxes", _descriptor2$I, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "x", _descriptor3$x, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "y", _descriptor4$s, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "z", _descriptor5$n, _assertThisInitialized(_this));

                _this.name = PARTICLE_MODULE_NAME.ROTATION;
                _this._startMat = new Mat4();
                _this._matRot = new Mat4();
                _this._quatRot = new Quat();
                _this._otherEuler = new Vec3();
                return _this;
              }

              var _proto = RotationOvertimeModule.prototype;

              _proto._processRotation = function _processRotation(p, r2d) {
                var renderMode = p.particleSystem.processor.getInfo().renderMode;

                if (renderMode !== RenderMode$1.Mesh) {
                  if (renderMode === RenderMode$1.StrecthedBillboard) {
                    this._quatRot.set(0, 0, 0, 1);
                  }
                }

                Quat.normalize(this._quatRot, this._quatRot);

                if (this._quatRot.w < 0.0) {
                  this._quatRot.x += Particle.INDENTIFY_NEG_QUAT;
                }
              };

              _proto.animate = function animate(p, dt) {
                var normalizedTime = 1 - p.remainingLifetime / p.startLifetime;
                var rotationRand = pseudoRandom(p.randomSeed + ROTATION_OVERTIME_RAND_OFFSET);
                var renderMode = p.particleSystem.processor.getInfo().renderMode;

                if (!this._separateAxes || renderMode === RenderMode$1.VerticalBillboard || renderMode === RenderMode$1.HorizontalBillboard) {
                  Quat.fromEuler(p.deltaQuat, 0, 0, this.z.evaluate(normalizedTime, rotationRand) * dt * Particle.R2D);
                } else {
                  Quat.fromEuler(p.deltaQuat, this.x.evaluate(normalizedTime, rotationRand) * dt * Particle.R2D, this.y.evaluate(normalizedTime, rotationRand) * dt * Particle.R2D, this.z.evaluate(normalizedTime, rotationRand) * dt * Particle.R2D);
                }

                p.deltaMat = Mat4.fromQuat(p.deltaMat, p.deltaQuat);
                p.localMat = p.localMat.multiply(p.deltaMat);

                if (!p.startRotated) {
                  if (renderMode !== RenderMode$1.Mesh) {
                    if (renderMode === RenderMode$1.StrecthedBillboard) {
                      p.startEuler.set(0, 0, 0);
                    } else if (renderMode !== RenderMode$1.Billboard) {
                      p.startEuler.set(0, 0, p.startEuler.z);
                    }
                  }

                  Quat.fromEuler(p.startRotation, p.startEuler.x * Particle.R2D, p.startEuler.y * Particle.R2D, p.startEuler.z * Particle.R2D);
                  p.startRotated = true;
                }

                this._startMat = Mat4.fromQuat(this._startMat, p.startRotation);
                this._matRot = this._startMat.multiply(p.localMat);
                Mat4.getRotation(this._quatRot, this._matRot);

                this._processRotation(p, Particle.R2D);

                p.rotation.set(this._quatRot.x, this._quatRot.y, this._quatRot.z);
              };

              _createClass(RotationOvertimeModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (this._enable === val) return;
                  this._enable = val;
                  if (!this.target) return;
                  this.target.enableModule(this.name, val, this);
                }
              }, {
                key: "separateAxes",
                get: function get() {
                  return this._separateAxes;
                },
                set: function set(val) {
                  this._separateAxes = val;
                }
              }]);

              return RotationOvertimeModule;
            }(ParticleModuleBase), _temp$Y), (_descriptor$Q = _applyDecoratedDescriptor(_class2$U.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$U.prototype, "enable", [_dec2$M], Object.getOwnPropertyDescriptor(_class2$U.prototype, "enable"), _class2$U.prototype), _descriptor2$I = _applyDecoratedDescriptor(_class2$U.prototype, "_separateAxes", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$U.prototype, "separateAxes", [_dec3$A, _dec4$w], Object.getOwnPropertyDescriptor(_class2$U.prototype, "separateAxes"), _class2$U.prototype), _descriptor3$x = _applyDecoratedDescriptor(_class2$U.prototype, "x", [_dec5$t, serializable, _dec6$q, radian, _dec7$p, _dec8$n], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor4$s = _applyDecoratedDescriptor(_class2$U.prototype, "y", [_dec9$j, serializable, _dec10$h, radian, _dec11$d, _dec12$d], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor5$n = _applyDecoratedDescriptor(_class2$U.prototype, "z", [_dec13$d, serializable, _dec14$b, radian, _dec15$b, _dec16$a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            })), _class2$U)) || _class$13);

            var _dec$11, _dec2$N, _dec3$B, _dec4$x, _dec5$u, _dec6$r, _dec7$q, _dec8$o, _dec9$k, _dec10$i, _dec11$e, _dec12$e, _dec13$e, _dec14$c, _dec15$c, _dec16$b, _dec17$9, _dec18$8, _dec19$8, _dec20$8, _class$14, _class2$V, _descriptor$R, _descriptor2$J, _descriptor3$y, _descriptor4$t, _descriptor5$o, _descriptor6$i, _temp$Z;
            var SIZE_OVERTIME_RAND_OFFSET = ModuleRandSeed.SIZE;
            var SizeOvertimeModule = (_dec$11 = ccclass('cc.SizeOvertimeModule'), _dec2$N = displayOrder(), _dec3$B = displayOrder(), _dec4$x = tooltip(), _dec5$u = type$1(CurveRange), _dec6$r = range(), _dec7$q = displayOrder(), _dec8$o = tooltip(), _dec9$k = type$1(CurveRange), _dec10$i = range(), _dec11$e = displayOrder(), _dec12$e = tooltip(), _dec13$e = type$1(CurveRange), _dec14$c = range(), _dec15$c = displayOrder(), _dec16$b = tooltip(), _dec17$9 = type$1(CurveRange), _dec18$8 = range(), _dec19$8 = displayOrder(), _dec20$8 = tooltip(), _dec$11(_class$14 = (_class2$V = (_temp$Z = function (_ParticleModuleBase) {
              _inheritsLoose(SizeOvertimeModule, _ParticleModuleBase);

              function SizeOvertimeModule() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _ParticleModuleBase.call.apply(_ParticleModuleBase, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_enable", _descriptor$R, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "separateAxes", _descriptor2$J, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "size", _descriptor3$y, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "x", _descriptor4$t, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "y", _descriptor5$o, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "z", _descriptor6$i, _assertThisInitialized(_this));

                _this.name = PARTICLE_MODULE_NAME.SIZE;
                return _this;
              }

              var _proto = SizeOvertimeModule.prototype;

              _proto.animate = function animate(particle, dt) {
                if (!this.separateAxes) {
                  Vec3.multiplyScalar(particle.size, particle.startSize, this.size.evaluate(1 - particle.remainingLifetime / particle.startLifetime, pseudoRandom(particle.randomSeed + SIZE_OVERTIME_RAND_OFFSET)));
                } else {
                  var currLifetime = 1 - particle.remainingLifetime / particle.startLifetime;
                  var sizeRand = pseudoRandom(particle.randomSeed + SIZE_OVERTIME_RAND_OFFSET);
                  particle.size.x = particle.startSize.x * this.x.evaluate(currLifetime, sizeRand);
                  particle.size.y = particle.startSize.y * this.y.evaluate(currLifetime, sizeRand);
                  particle.size.z = particle.startSize.z * this.z.evaluate(currLifetime, sizeRand);
                }
              };

              _createClass(SizeOvertimeModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (this._enable === val) return;
                  this._enable = val;
                  if (!this.target) return;
                  this.target.enableModule(this.name, val, this);
                }
              }]);

              return SizeOvertimeModule;
            }(ParticleModuleBase), _temp$Z), (_descriptor$R = _applyDecoratedDescriptor(_class2$V.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$V.prototype, "enable", [_dec2$N], Object.getOwnPropertyDescriptor(_class2$V.prototype, "enable"), _class2$V.prototype), _descriptor2$J = _applyDecoratedDescriptor(_class2$V.prototype, "separateAxes", [serializable, _dec3$B, _dec4$x], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor3$y = _applyDecoratedDescriptor(_class2$V.prototype, "size", [_dec5$u, serializable, _dec6$r, _dec7$q, _dec8$o], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor4$t = _applyDecoratedDescriptor(_class2$V.prototype, "x", [_dec9$k, serializable, _dec10$i, _dec11$e, _dec12$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor5$o = _applyDecoratedDescriptor(_class2$V.prototype, "y", [_dec13$e, serializable, _dec14$c, _dec15$c, _dec16$b], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor6$i = _applyDecoratedDescriptor(_class2$V.prototype, "z", [_dec17$9, serializable, _dec18$8, _dec19$8, _dec20$8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            })), _class2$V)) || _class$14);

            var _dec$12, _dec2$O, _dec3$C, _dec4$y, _dec5$v, _dec6$s, _dec7$r, _dec8$p, _dec9$l, _dec10$j, _dec11$f, _dec12$f, _dec13$f, _dec14$d, _dec15$d, _dec16$c, _dec17$a, _dec18$9, _dec19$9, _dec20$9, _dec21$8, _dec22$7, _dec23$6, _dec24$6, _dec25$6, _dec26$5, _dec27$5, _dec28$4, _dec29$3, _class$15, _class2$W, _descriptor$S, _descriptor2$K, _descriptor3$z, _descriptor4$u, _descriptor5$p, _descriptor6$j, _descriptor7$e, _descriptor8$c, _descriptor9$a, _descriptor10$8, _descriptor11$6, _descriptor12$6, _descriptor13$6, _temp$_;
            var TEXTURE_ANIMATION_RAND_OFFSET = ModuleRandSeed.TEXTURE;
            var Mode$3 = Enum({
              Grid: 0
            });
            var Animation$1 = Enum({
              WholeSheet: 0,
              SingleRow: 1
            });
            var TextureAnimationModule = (_dec$12 = ccclass('cc.TextureAnimationModule'), _dec2$O = formerlySerializedAs('numTilesX'), _dec3$C = formerlySerializedAs('numTilesY'), _dec4$y = displayOrder(), _dec5$v = type$1(Mode$3), _dec6$s = type$1(Mode$3), _dec7$r = displayOrder(), _dec8$p = tooltip(), _dec9$l = displayOrder(), _dec10$j = tooltip(), _dec11$f = displayOrder(), _dec12$f = tooltip(), _dec13$f = type$1(Animation$1), _dec14$d = displayOrder(), _dec15$d = tooltip(), _dec16$c = type$1(CurveRange), _dec17$a = range(), _dec18$9 = displayOrder(), _dec19$9 = tooltip(), _dec20$9 = type$1(CurveRange), _dec21$8 = range(), _dec22$7 = displayOrder(), _dec23$6 = tooltip(), _dec24$6 = displayOrder(), _dec25$6 = tooltip(), _dec26$5 = displayOrder(), _dec27$5 = tooltip(), _dec28$4 = displayOrder(), _dec29$3 = tooltip(), _dec$12(_class$15 = (_class2$W = (_temp$_ = function (_ParticleModuleBase) {
              _inheritsLoose(TextureAnimationModule, _ParticleModuleBase);

              function TextureAnimationModule() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _ParticleModuleBase.call.apply(_ParticleModuleBase, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_enable", _descriptor$S, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_numTilesX", _descriptor2$K, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_numTilesY", _descriptor3$z, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_mode", _descriptor4$u, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "animation", _descriptor5$p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "frameOverTime", _descriptor6$j, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startFrame", _descriptor7$e, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "cycleCount", _descriptor8$c, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_flipU", _descriptor9$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_flipV", _descriptor10$8, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_uvChannelMask", _descriptor11$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "randomRow", _descriptor12$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "rowIndex", _descriptor13$6, _assertThisInitialized(_this));

                _this.name = PARTICLE_MODULE_NAME.TEXTURE;
                return _this;
              }

              var _proto = TextureAnimationModule.prototype;

              _proto.init = function init(p) {
                p.startRow = Math.floor(Math.random() * this.numTilesY);
              };

              _proto.animate = function animate(p, dt) {
                var normalizedTime = 1 - p.remainingLifetime / p.startLifetime;
                var startFrame = this.startFrame.evaluate(normalizedTime, pseudoRandom(p.randomSeed + TEXTURE_ANIMATION_RAND_OFFSET)) / (this.numTilesX * this.numTilesY);

                if (this.animation === Animation$1.WholeSheet) {
                  p.frameIndex = repeat$2(this.cycleCount * (this.frameOverTime.evaluate(normalizedTime, pseudoRandom(p.randomSeed + TEXTURE_ANIMATION_RAND_OFFSET)) + startFrame), 1);
                } else if (this.animation === Animation$1.SingleRow) {
                  var rowLength = 1 / this.numTilesY;

                  if (this.randomRow) {
                    var f = repeat$2(this.cycleCount * (this.frameOverTime.evaluate(normalizedTime, pseudoRandom(p.randomSeed + TEXTURE_ANIMATION_RAND_OFFSET)) + startFrame), 1);
                    var from = p.startRow * rowLength;
                    var to = from + rowLength;
                    p.frameIndex = lerp(from, to, f);
                  } else {
                    var _from = this.rowIndex * rowLength;

                    var _to = _from + rowLength;

                    p.frameIndex = lerp(_from, _to, repeat$2(this.cycleCount * (this.frameOverTime.evaluate(normalizedTime, pseudoRandom(p.randomSeed + TEXTURE_ANIMATION_RAND_OFFSET)) + startFrame), 1));
                  }
                }
              };

              _createClass(TextureAnimationModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (this._enable === val) return;
                  this._enable = val;
                  if (!this.target) return;
                  this.target.updateMaterialParams();
                  this.target.enableModule(this.name, val, this);
                }
              }, {
                key: "mode",
                get: function get() {
                  return this._mode;
                },
                set: function set(val) {
                  if (val !== Mode$3.Grid) {
                    console.error('particle texture animation\'s sprites is not supported!');
                  }
                }
              }, {
                key: "numTilesX",
                get: function get() {
                  return this._numTilesX;
                },
                set: function set(val) {
                  if (this._numTilesX !== val) {
                    this._numTilesX = val;
                    this.target.updateMaterialParams();
                  }
                }
              }, {
                key: "numTilesY",
                get: function get() {
                  return this._numTilesY;
                },
                set: function set(val) {
                  if (this._numTilesY !== val) {
                    this._numTilesY = val;
                    this.target.updateMaterialParams();
                  }
                }
              }, {
                key: "flipU",
                get: function get() {
                  return this._flipU;
                },
                set: function set(val) {
                  console.error('particle texture animation\'s flipU is not supported!');
                }
              }, {
                key: "flipV",
                get: function get() {
                  return this._flipV;
                },
                set: function set(val) {
                  console.error('particle texture animation\'s flipV is not supported!');
                }
              }, {
                key: "uvChannelMask",
                get: function get() {
                  return this._uvChannelMask;
                },
                set: function set(val) {
                  console.error('particle texture animation\'s uvChannelMask is not supported!');
                }
              }]);

              return TextureAnimationModule;
            }(ParticleModuleBase), _temp$_), (_descriptor$S = _applyDecoratedDescriptor(_class2$W.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$K = _applyDecoratedDescriptor(_class2$W.prototype, "_numTilesX", [_dec2$O], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor3$z = _applyDecoratedDescriptor(_class2$W.prototype, "_numTilesY", [_dec3$C], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$W.prototype, "enable", [_dec4$y], Object.getOwnPropertyDescriptor(_class2$W.prototype, "enable"), _class2$W.prototype), _descriptor4$u = _applyDecoratedDescriptor(_class2$W.prototype, "_mode", [_dec5$v], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Mode$3.Grid;
              }
            }), _applyDecoratedDescriptor(_class2$W.prototype, "mode", [_dec6$s, _dec7$r, _dec8$p], Object.getOwnPropertyDescriptor(_class2$W.prototype, "mode"), _class2$W.prototype), _applyDecoratedDescriptor(_class2$W.prototype, "numTilesX", [_dec9$l, _dec10$j], Object.getOwnPropertyDescriptor(_class2$W.prototype, "numTilesX"), _class2$W.prototype), _applyDecoratedDescriptor(_class2$W.prototype, "numTilesY", [_dec11$f, _dec12$f], Object.getOwnPropertyDescriptor(_class2$W.prototype, "numTilesY"), _class2$W.prototype), _descriptor5$p = _applyDecoratedDescriptor(_class2$W.prototype, "animation", [_dec13$f, serializable, _dec14$d, _dec15$d], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Animation$1.WholeSheet;
              }
            }), _descriptor6$j = _applyDecoratedDescriptor(_class2$W.prototype, "frameOverTime", [_dec16$c, serializable, _dec17$a, _dec18$9, _dec19$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor7$e = _applyDecoratedDescriptor(_class2$W.prototype, "startFrame", [_dec20$9, serializable, _dec21$8, _dec22$7, _dec23$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor8$c = _applyDecoratedDescriptor(_class2$W.prototype, "cycleCount", [serializable, _dec24$6, _dec25$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor9$a = _applyDecoratedDescriptor(_class2$W.prototype, "_flipU", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor10$8 = _applyDecoratedDescriptor(_class2$W.prototype, "_flipV", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor11$6 = _applyDecoratedDescriptor(_class2$W.prototype, "_uvChannelMask", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return -1;
              }
            }), _descriptor12$6 = _applyDecoratedDescriptor(_class2$W.prototype, "randomRow", [serializable, _dec26$5, _dec27$5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor13$6 = _applyDecoratedDescriptor(_class2$W.prototype, "rowIndex", [serializable, _dec28$4, _dec29$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class2$W)) || _class$15);

            var _dec$13, _dec2$P, _dec3$D, _dec4$z, _dec5$w, _dec6$t, _dec7$s, _dec8$q, _dec9$m, _dec10$k, _dec11$g, _dec12$g, _dec13$g, _dec14$e, _dec15$e, _dec16$d, _dec17$b, _dec18$a, _dec19$a, _dec20$a, _dec21$9, _class$16, _class2$X, _descriptor$T, _descriptor2$L, _descriptor3$A, _descriptor4$v, _descriptor5$q, _descriptor6$k, _temp$$;
            var VELOCITY_X_OVERTIME_RAND_OFFSET = ModuleRandSeed.VELOCITY_X;
            var VELOCITY_Y_OVERTIME_RAND_OFFSET = ModuleRandSeed.VELOCITY_Y;
            var VELOCITY_Z_OVERTIME_RAND_OFFSET = ModuleRandSeed.VELOCITY_Z;

            var _temp_v3$2 = new Vec3();

            var VelocityOvertimeModule = (_dec$13 = ccclass('cc.VelocityOvertimeModule'), _dec2$P = displayOrder(), _dec3$D = type$1(CurveRange), _dec4$z = range(), _dec5$w = displayOrder(), _dec6$t = tooltip(), _dec7$s = type$1(CurveRange), _dec8$q = range(), _dec9$m = displayOrder(), _dec10$k = tooltip(), _dec11$g = type$1(CurveRange), _dec12$g = range(), _dec13$g = displayOrder(), _dec14$e = tooltip(), _dec15$e = type$1(CurveRange), _dec16$d = range(), _dec17$b = displayOrder(), _dec18$a = tooltip(), _dec19$a = type$1(Space), _dec20$a = displayOrder(), _dec21$9 = tooltip(), _dec$13(_class$16 = (_class2$X = (_temp$$ = function (_ParticleModuleBase) {
              _inheritsLoose(VelocityOvertimeModule, _ParticleModuleBase);

              function VelocityOvertimeModule() {
                var _this;

                _this = _ParticleModuleBase.call(this) || this;

                _initializerDefineProperty(_this, "_enable", _descriptor$T, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "x", _descriptor2$L, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "y", _descriptor3$A, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "z", _descriptor4$v, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "speedModifier", _descriptor5$q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "space", _descriptor6$k, _assertThisInitialized(_this));

                _this.rotation = void 0;
                _this.needTransform = void 0;
                _this.name = PARTICLE_MODULE_NAME.VELOCITY;
                _this.rotation = new Quat();
                _this.speedModifier.constant = 1;
                _this.needTransform = false;
                _this.needUpdate = true;
                return _this;
              }

              var _proto = VelocityOvertimeModule.prototype;

              _proto.update = function update(space, worldTransform) {
                this.needTransform = calculateTransform(space, this.space, worldTransform, this.rotation);
              };

              _proto.animate = function animate(p, dt) {
                var normalizedTime = 1 - p.remainingLifetime / p.startLifetime;
                var vel = Vec3.set(_temp_v3$2, this.x.evaluate(normalizedTime, pseudoRandom(p.randomSeed ^ VELOCITY_X_OVERTIME_RAND_OFFSET)), this.y.evaluate(normalizedTime, pseudoRandom(p.randomSeed ^ VELOCITY_Y_OVERTIME_RAND_OFFSET)), this.z.evaluate(normalizedTime, pseudoRandom(p.randomSeed ^ VELOCITY_Z_OVERTIME_RAND_OFFSET)));

                if (this.needTransform) {
                  Vec3.transformQuat(vel, vel, this.rotation);
                }

                Vec3.add(p.animatedVelocity, p.animatedVelocity, vel);
                Vec3.add(p.ultimateVelocity, p.velocity, p.animatedVelocity);
                Vec3.multiplyScalar(p.ultimateVelocity, p.ultimateVelocity, this.speedModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, pseudoRandom(p.randomSeed + VELOCITY_X_OVERTIME_RAND_OFFSET)));
              };

              _createClass(VelocityOvertimeModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (this._enable === val) return;
                  this._enable = val;
                  if (!this.target) return;
                  this.target.enableModule(this.name, val, this);
                }
              }]);

              return VelocityOvertimeModule;
            }(ParticleModuleBase), _temp$$), (_descriptor$T = _applyDecoratedDescriptor(_class2$X.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$X.prototype, "enable", [_dec2$P], Object.getOwnPropertyDescriptor(_class2$X.prototype, "enable"), _class2$X.prototype), _descriptor2$L = _applyDecoratedDescriptor(_class2$X.prototype, "x", [_dec3$D, serializable, _dec4$z, _dec5$w, _dec6$t], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor3$A = _applyDecoratedDescriptor(_class2$X.prototype, "y", [_dec7$s, serializable, _dec8$q, _dec9$m, _dec10$k], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor4$v = _applyDecoratedDescriptor(_class2$X.prototype, "z", [_dec11$g, serializable, _dec12$g, _dec13$g, _dec14$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor5$q = _applyDecoratedDescriptor(_class2$X.prototype, "speedModifier", [_dec15$e, serializable, _dec16$d, _dec17$b, _dec18$a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor6$k = _applyDecoratedDescriptor(_class2$X.prototype, "space", [_dec19$a, serializable, _dec20$a, _dec21$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Space.Local;
              }
            })), _class2$X)) || _class$16);

            var _dec$14, _dec2$Q, _dec3$E, _class$17, _class2$Y, _descriptor$U, _descriptor2$M, _descriptor3$B, _descriptor4$w, _temp$10;
            var Burst = exports('Burst', (_dec$14 = ccclass('cc.Burst'), _dec2$Q = type$1(CurveRange), _dec3$E = range(), _dec$14(_class$17 = (_class2$Y = (_temp$10 = function () {
              function Burst() {
                _initializerDefineProperty(this, "_time", _descriptor$U, this);

                _initializerDefineProperty(this, "_repeatCount", _descriptor2$M, this);

                _initializerDefineProperty(this, "repeatInterval", _descriptor3$B, this);

                _initializerDefineProperty(this, "count", _descriptor4$w, this);

                this._remainingCount = void 0;
                this._curTime = void 0;
                this._remainingCount = 0;
                this._curTime = 0.0;
              }

              var _proto = Burst.prototype;

              _proto.update = function update(psys, dt) {
                if (this._remainingCount === 0) {
                  this._remainingCount = this._repeatCount;
                  this._curTime = this._time;
                }

                if (this._remainingCount > 0) {
                  var preFrameTime = repeat$2(psys._time - psys.startDelay.evaluate(0, 1), psys.duration) - dt;
                  preFrameTime = preFrameTime > 0.0 ? preFrameTime : 0.0;
                  var curFrameTime = repeat$2(psys.time - psys.startDelay.evaluate(0, 1), psys.duration);

                  if (this._curTime >= preFrameTime && this._curTime < curFrameTime) {
                    psys.emit(this.count.evaluate(this._curTime / psys.duration, 1), dt - (curFrameTime - this._curTime));
                    this._curTime += this.repeatInterval;
                    --this._remainingCount;
                  }
                }
              };

              _proto.reset = function reset() {
                this._remainingCount = 0;
                this._curTime = 0.0;
              };

              _proto.getMaxCount = function getMaxCount(psys) {
                return this.count.getMax() * Math.min(Math.ceil(psys.duration / this.repeatInterval), this.repeatCount);
              };

              _createClass(Burst, [{
                key: "time",
                get: function get() {
                  return this._time;
                },
                set: function set(val) {
                  this._time = val;
                  this._curTime = val;
                }
              }, {
                key: "repeatCount",
                get: function get() {
                  return this._repeatCount;
                },
                set: function set(val) {
                  this._repeatCount = val;
                  this._remainingCount = val;
                }
              }]);

              return Burst;
            }(), _temp$10), (_descriptor$U = _applyDecoratedDescriptor(_class2$Y.prototype, "_time", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$Y.prototype, "time", [editable], Object.getOwnPropertyDescriptor(_class2$Y.prototype, "time"), _class2$Y.prototype), _descriptor2$M = _applyDecoratedDescriptor(_class2$Y.prototype, "_repeatCount", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _applyDecoratedDescriptor(_class2$Y.prototype, "repeatCount", [editable], Object.getOwnPropertyDescriptor(_class2$Y.prototype, "repeatCount"), _class2$Y.prototype), _descriptor3$B = _applyDecoratedDescriptor(_class2$Y.prototype, "repeatInterval", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor4$w = _applyDecoratedDescriptor(_class2$Y.prototype, "count", [_dec2$Q, serializable, _dec3$E], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            })), _class2$Y)) || _class$17));

            var _dec$15, _dec2$R, _dec3$F, _dec4$A, _dec5$x, _dec6$u, _dec7$t, _dec8$r, _dec9$n, _dec10$l, _dec11$h, _dec12$h, _dec13$h, _dec14$f, _dec15$f, _dec16$e, _dec17$c, _dec18$b, _dec19$b, _dec20$b, _dec21$a, _dec22$8, _dec23$7, _dec24$7, _dec25$7, _dec26$6, _dec27$6, _dec28$5, _dec29$4, _dec30$3, _dec31$3, _dec32$3, _dec33$2, _dec34$2, _dec35$2, _dec36$2, _dec37$2, _dec38$2, _dec39$2, _dec40$2, _dec41$2, _dec42$2, _dec43$2, _dec44$1, _dec45$1, _dec46, _dec47, _class$18, _class2$Z, _descriptor$V, _descriptor2$N, _descriptor3$C, _descriptor4$x, _descriptor5$r, _descriptor6$l, _descriptor7$f, _descriptor8$d, _descriptor9$b, _descriptor10$9, _descriptor11$7, _descriptor12$7, _descriptor13$7, _descriptor14$2, _descriptor15$2, _descriptor16$2, _descriptor17$2, _descriptor18$1, _descriptor19$1, _temp$11;

            var _intermediVec = new Vec3(0, 0, 0);

            var _intermediArr = [];

            var _unitBoxExtent = new Vec3(0.5, 0.5, 0.5);

            var ShapeModule = (_dec$15 = ccclass('cc.ShapeModule'), _dec2$R = displayOrder(), _dec3$F = tooltip(), _dec4$A = displayOrder(), _dec5$x = tooltip(), _dec6$u = displayOrder(), _dec7$t = tooltip(), _dec8$r = displayOrder(), _dec9$n = tooltip(), _dec10$l = displayOrder(), _dec11$h = tooltip(), _dec12$h = displayOrder(), _dec13$h = type$1(ShapeType), _dec14$f = formerlySerializedAs('shapeType'), _dec15$f = displayOrder(), _dec16$e = type$1(ShapeType), _dec17$c = tooltip(), _dec18$b = type$1(EmitLocation), _dec19$b = displayOrder(), _dec20$b = tooltip(), _dec21$a = displayOrder(), _dec22$8 = tooltip(), _dec23$7 = displayOrder(), _dec24$7 = tooltip(), _dec25$7 = displayOrder(), _dec26$6 = tooltip(), _dec27$6 = displayOrder(), _dec28$5 = tooltip(), _dec29$4 = displayOrder(), _dec30$3 = tooltip(), _dec31$3 = displayOrder(), _dec32$3 = tooltip(), _dec33$2 = type$1(ArcMode), _dec34$2 = displayOrder(), _dec35$2 = tooltip(), _dec36$2 = visible(), _dec37$2 = displayOrder(), _dec38$2 = tooltip(), _dec39$2 = type$1(CurveRange), _dec40$2 = visible(), _dec41$2 = range(), _dec42$2 = displayOrder(), _dec43$2 = tooltip(), _dec44$1 = displayOrder(), _dec45$1 = tooltip(), _dec46 = displayOrder(), _dec47 = tooltip(), _dec$15(_class$18 = (_class2$Z = (_temp$11 = function () {
              function ShapeModule() {
                _initializerDefineProperty(this, "_enable", _descriptor$V, this);

                _initializerDefineProperty(this, "_shapeType", _descriptor2$N, this);

                _initializerDefineProperty(this, "emitFrom", _descriptor3$C, this);

                _initializerDefineProperty(this, "alignToDirection", _descriptor4$x, this);

                _initializerDefineProperty(this, "randomDirectionAmount", _descriptor5$r, this);

                _initializerDefineProperty(this, "sphericalDirectionAmount", _descriptor6$l, this);

                _initializerDefineProperty(this, "randomPositionAmount", _descriptor7$f, this);

                _initializerDefineProperty(this, "radius", _descriptor8$d, this);

                _initializerDefineProperty(this, "radiusThickness", _descriptor9$b, this);

                _initializerDefineProperty(this, "arcMode", _descriptor10$9, this);

                _initializerDefineProperty(this, "arcSpread", _descriptor11$7, this);

                _initializerDefineProperty(this, "arcSpeed", _descriptor12$7, this);

                _initializerDefineProperty(this, "length", _descriptor13$7, this);

                _initializerDefineProperty(this, "boxThickness", _descriptor14$2, this);

                _initializerDefineProperty(this, "_position", _descriptor15$2, this);

                _initializerDefineProperty(this, "_rotation", _descriptor16$2, this);

                _initializerDefineProperty(this, "_scale", _descriptor17$2, this);

                _initializerDefineProperty(this, "_arc", _descriptor18$1, this);

                _initializerDefineProperty(this, "_angle", _descriptor19$1, this);

                this.mat = void 0;
                this.quat = void 0;
                this.particleSystem = void 0;
                this.lastTime = void 0;
                this.totalAngle = void 0;
                this.mat = new Mat4();
                this.quat = new Quat();
                this.particleSystem = null;
                this.lastTime = 0;
                this.totalAngle = 0;
              }

              var _proto = ShapeModule.prototype;

              _proto.onInit = function onInit(ps) {
                this.particleSystem = ps;
                this.constructMat();
                this.lastTime = this.particleSystem._time;
              };

              _proto.emit = function emit(p) {
                switch (this.shapeType) {
                  case ShapeType.Box:
                    boxEmit(this.emitFrom, this.boxThickness, p.position, p.velocity);
                    break;

                  case ShapeType.Circle:
                    circleEmit(this.radius, this.radiusThickness, this.generateArcAngle(), p.position, p.velocity);
                    break;

                  case ShapeType.Cone:
                    coneEmit(this.emitFrom, this.radius, this.radiusThickness, this.generateArcAngle(), this._angle, this.length, p.position, p.velocity);
                    break;

                  case ShapeType.Sphere:
                    sphereEmit(this.emitFrom, this.radius, this.radiusThickness, p.position, p.velocity);
                    break;

                  case ShapeType.Hemisphere:
                    hemisphereEmit(this.emitFrom, this.radius, this.radiusThickness, p.position, p.velocity);
                    break;

                  default:
                    console.warn(this.shapeType + " shapeType is not supported by ShapeModule.");
                }

                if (this.randomPositionAmount > 0) {
                  p.position.x += randomRange(-this.randomPositionAmount, this.randomPositionAmount);
                  p.position.y += randomRange(-this.randomPositionAmount, this.randomPositionAmount);
                  p.position.z += randomRange(-this.randomPositionAmount, this.randomPositionAmount);
                }

                Vec3.transformQuat(p.velocity, p.velocity, this.quat);
                Vec3.transformMat4(p.position, p.position, this.mat);

                if (this.sphericalDirectionAmount > 0) {
                  var sphericalVel = Vec3.normalize(_intermediVec, p.position);
                  Vec3.lerp(p.velocity, p.velocity, sphericalVel, this.sphericalDirectionAmount);
                }

                this.lastTime = this.particleSystem._time;
              };

              _proto.constructMat = function constructMat() {
                Quat.fromEuler(this.quat, this._rotation.x, this._rotation.y, this._rotation.z);
                Mat4.fromRTS(this.mat, this.quat, this._position, this._scale);
              };

              _proto.generateArcAngle = function generateArcAngle() {
                if (this.arcMode === ArcMode.Random) {
                  return randomRange(0, this._arc);
                }

                var angle = this.totalAngle + 2 * Math.PI * this.arcSpeed.evaluate(this.particleSystem._time, 1) * (this.particleSystem._time - this.lastTime);
                this.totalAngle = angle;

                if (this.arcSpread !== 0) {
                  angle = Math.floor(angle / (this._arc * this.arcSpread)) * this._arc * this.arcSpread;
                }

                switch (this.arcMode) {
                  case ArcMode.Loop:
                    return repeat$2(angle, this._arc);

                  case ArcMode.PingPong:
                    return pingPong(angle, this._arc);

                  default:
                    return repeat$2(angle, this._arc);
                }
              };

              _createClass(ShapeModule, [{
                key: "position",
                get: function get() {
                  return this._position;
                },
                set: function set(val) {
                  this._position = val;
                  this.constructMat();
                }
              }, {
                key: "rotation",
                get: function get() {
                  return this._rotation;
                },
                set: function set(val) {
                  this._rotation = val;
                  this.constructMat();
                }
              }, {
                key: "scale",
                get: function get() {
                  return this._scale;
                },
                set: function set(val) {
                  this._scale = val;
                  this.constructMat();
                }
              }, {
                key: "arc",
                get: function get() {
                  return toDegree(this._arc);
                },
                set: function set(val) {
                  this._arc = toRadian(val);
                }
              }, {
                key: "angle",
                get: function get() {
                  return Math.round(toDegree(this._angle) * 100) / 100;
                },
                set: function set(val) {
                  this._angle = toRadian(val);
                }
              }, {
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  this._enable = val;
                }
              }, {
                key: "shapeType",
                get: function get() {
                  return this._shapeType;
                },
                set: function set(val) {
                  this._shapeType = val;

                  switch (this._shapeType) {
                    case ShapeType.Box:
                      if (this.emitFrom === EmitLocation.Base) {
                        this.emitFrom = EmitLocation.Volume;
                      }

                      break;

                    case ShapeType.Cone:
                      if (this.emitFrom === EmitLocation.Edge) {
                        this.emitFrom = EmitLocation.Base;
                      }

                      break;

                    case ShapeType.Sphere:
                    case ShapeType.Hemisphere:
                      if (this.emitFrom === EmitLocation.Base || this.emitFrom === EmitLocation.Edge) {
                        this.emitFrom = EmitLocation.Volume;
                      }

                      break;
                  }
                }
              }]);

              return ShapeModule;
            }(), _temp$11), (_applyDecoratedDescriptor(_class2$Z.prototype, "position", [_dec2$R, _dec3$F], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "position"), _class2$Z.prototype), _applyDecoratedDescriptor(_class2$Z.prototype, "rotation", [_dec4$A, _dec5$x], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "rotation"), _class2$Z.prototype), _applyDecoratedDescriptor(_class2$Z.prototype, "scale", [_dec6$u, _dec7$t], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "scale"), _class2$Z.prototype), _applyDecoratedDescriptor(_class2$Z.prototype, "arc", [_dec8$r, _dec9$n], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "arc"), _class2$Z.prototype), _applyDecoratedDescriptor(_class2$Z.prototype, "angle", [_dec10$l, _dec11$h], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "angle"), _class2$Z.prototype), _descriptor$V = _applyDecoratedDescriptor(_class2$Z.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$Z.prototype, "enable", [_dec12$h], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "enable"), _class2$Z.prototype), _descriptor2$N = _applyDecoratedDescriptor(_class2$Z.prototype, "_shapeType", [_dec13$h, _dec14$f, _dec15$f], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return ShapeType.Cone;
              }
            }), _applyDecoratedDescriptor(_class2$Z.prototype, "shapeType", [_dec16$e, _dec17$c], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "shapeType"), _class2$Z.prototype), _descriptor3$C = _applyDecoratedDescriptor(_class2$Z.prototype, "emitFrom", [_dec18$b, serializable, _dec19$b, _dec20$b], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return EmitLocation.Volume;
              }
            }), _descriptor4$x = _applyDecoratedDescriptor(_class2$Z.prototype, "alignToDirection", [serializable, _dec21$a, _dec22$8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor5$r = _applyDecoratedDescriptor(_class2$Z.prototype, "randomDirectionAmount", [serializable, _dec23$7, _dec24$7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor6$l = _applyDecoratedDescriptor(_class2$Z.prototype, "sphericalDirectionAmount", [serializable, _dec25$7, _dec26$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor7$f = _applyDecoratedDescriptor(_class2$Z.prototype, "randomPositionAmount", [serializable, _dec27$6, _dec28$5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor8$d = _applyDecoratedDescriptor(_class2$Z.prototype, "radius", [serializable, _dec29$4, _dec30$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor9$b = _applyDecoratedDescriptor(_class2$Z.prototype, "radiusThickness", [serializable, _dec31$3, _dec32$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor10$9 = _applyDecoratedDescriptor(_class2$Z.prototype, "arcMode", [_dec33$2, serializable, _dec34$2, _dec35$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return ArcMode.Random;
              }
            }), _descriptor11$7 = _applyDecoratedDescriptor(_class2$Z.prototype, "arcSpread", [_dec36$2, serializable, _dec37$2, _dec38$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor12$7 = _applyDecoratedDescriptor(_class2$Z.prototype, "arcSpeed", [_dec39$2, _dec40$2, _dec41$2, serializable, _dec42$2, _dec43$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor13$7 = _applyDecoratedDescriptor(_class2$Z.prototype, "length", [serializable, _dec44$1, _dec45$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5;
              }
            }), _descriptor14$2 = _applyDecoratedDescriptor(_class2$Z.prototype, "boxThickness", [serializable, _dec46, _dec47], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec3(0, 0, 0);
              }
            }), _descriptor15$2 = _applyDecoratedDescriptor(_class2$Z.prototype, "_position", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec3(0, 0, 0);
              }
            }), _descriptor16$2 = _applyDecoratedDescriptor(_class2$Z.prototype, "_rotation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec3(0, 0, 0);
              }
            }), _descriptor17$2 = _applyDecoratedDescriptor(_class2$Z.prototype, "_scale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec3(1, 1, 1);
              }
            }), _descriptor18$1 = _applyDecoratedDescriptor(_class2$Z.prototype, "_arc", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return toRadian(360);
              }
            }), _descriptor19$1 = _applyDecoratedDescriptor(_class2$Z.prototype, "_angle", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return toRadian(25);
              }
            })), _class2$Z)) || _class$18);

            function sphereEmit(emitFrom, radius, radiusThickness, pos, dir) {
              switch (emitFrom) {
                case EmitLocation.Volume:
                  randomPointBetweenSphere(pos, radius * (1 - radiusThickness), radius);
                  Vec3.normalize(dir, pos);
                  break;

                case EmitLocation.Shell:
                  randomUnitVector(pos);
                  Vec3.multiplyScalar(pos, pos, radius);
                  Vec3.normalize(dir, pos);
                  break;

                default:
                  console.warn(emitFrom + " is not supported for sphere emitter.");
              }
            }

            function hemisphereEmit(emitFrom, radius, radiusThickness, pos, dir) {
              switch (emitFrom) {
                case EmitLocation.Volume:
                  randomPointBetweenSphere(pos, radius * (1 - radiusThickness), radius);

                  if (pos.z > 0) {
                    pos.z *= -1;
                  }

                  Vec3.normalize(dir, pos);
                  break;

                case EmitLocation.Shell:
                  randomUnitVector(pos);
                  Vec3.multiplyScalar(pos, pos, radius);

                  if (pos.z > 0) {
                    pos.z *= -1;
                  }

                  Vec3.normalize(dir, pos);
                  break;

                default:
                  console.warn(emitFrom + " is not supported for hemisphere emitter.");
              }
            }

            function coneEmit(emitFrom, radius, radiusThickness, theta, angle, length, pos, dir) {
              switch (emitFrom) {
                case EmitLocation.Base:
                  randomPointBetweenCircleAtFixedAngle(pos, radius * (1 - radiusThickness), radius, theta);
                  Vec2.multiplyScalar(dir, pos, Math.sin(angle));
                  dir.z = -Math.cos(angle) * radius;
                  Vec3.normalize(dir, dir);
                  pos.z = 0;
                  break;

                case EmitLocation.Shell:
                  fixedAngleUnitVector2(pos, theta);
                  Vec2.multiplyScalar(dir, pos, Math.sin(angle));
                  dir.z = -Math.cos(angle);
                  Vec3.normalize(dir, dir);
                  Vec2.multiplyScalar(pos, pos, radius);
                  pos.z = 0;
                  break;

                case EmitLocation.Volume:
                  randomPointBetweenCircleAtFixedAngle(pos, radius * (1 - radiusThickness), radius, theta);
                  Vec2.multiplyScalar(dir, pos, Math.sin(angle));
                  dir.z = -Math.cos(angle) * radius;
                  Vec3.normalize(dir, dir);
                  pos.z = 0;
                  Vec3.add(pos, pos, Vec3.multiplyScalar(_intermediVec, dir, length * random() / -dir.z));
                  break;

                default:
                  console.warn(emitFrom + " is not supported for cone emitter.");
              }
            }

            function boxEmit(emitFrom, boxThickness, pos, dir) {
              switch (emitFrom) {
                case EmitLocation.Volume:
                  randomPointInCube(pos, _unitBoxExtent);
                  break;

                case EmitLocation.Shell:
                  _intermediArr.splice(0, _intermediArr.length);

                  _intermediArr.push(randomRange(-0.5, 0.5));

                  _intermediArr.push(randomRange(-0.5, 0.5));

                  _intermediArr.push(randomSign() * 0.5);

                  randomSortArray(_intermediArr);
                  applyBoxThickness(_intermediArr, boxThickness);
                  Vec3.set(pos, _intermediArr[0], _intermediArr[1], _intermediArr[2]);
                  break;

                case EmitLocation.Edge:
                  _intermediArr.splice(0, _intermediArr.length);

                  _intermediArr.push(randomRange(-0.5, 0.5));

                  _intermediArr.push(randomSign() * 0.5);

                  _intermediArr.push(randomSign() * 0.5);

                  randomSortArray(_intermediArr);
                  applyBoxThickness(_intermediArr, boxThickness);
                  Vec3.set(pos, _intermediArr[0], _intermediArr[1], _intermediArr[2]);
                  break;

                default:
                  console.warn(emitFrom + " is not supported for box emitter.");
              }

              Vec3.copy(dir, particleEmitZAxis);
            }

            function circleEmit(radius, radiusThickness, theta, pos, dir) {
              randomPointBetweenCircleAtFixedAngle(pos, radius * (1 - radiusThickness), radius, theta);
              Vec3.normalize(dir, pos);
            }

            function applyBoxThickness(pos, thickness) {
              if (thickness.x > 0) {
                pos[0] += 0.5 * randomRange(-thickness.x, thickness.x);
                pos[0] = clamp$1(pos[0], -0.5, 0.5);
              }

              if (thickness.y > 0) {
                pos[1] += 0.5 * randomRange(-thickness.y, thickness.y);
                pos[1] = clamp$1(pos[1], -0.5, 0.5);
              }

              if (thickness.z > 0) {
                pos[2] += 0.5 * randomRange(-thickness.z, thickness.z);
                pos[2] = clamp$1(pos[2], -0.5, 0.5);
              }
            }

            var _uvs$1 = [0, 0, 1, 0, 0, 1, 1, 1];

            var ParticleBatchModel = function (_scene$Model) {
              _inheritsLoose(ParticleBatchModel, _scene$Model);

              function ParticleBatchModel() {
                var _this;

                _this = _scene$Model.call(this) || this;
                _this._capacity = void 0;
                _this._vertAttrs = void 0;
                _this._vertSize = void 0;
                _this._vBuffer = void 0;
                _this._vertAttrsFloatCount = void 0;
                _this._vdataF32 = void 0;
                _this._vdataUint32 = void 0;
                _this._iaInfo = void 0;
                _this._iaInfoBuffer = void 0;
                _this._subMeshData = void 0;
                _this._mesh = void 0;
                _this._vertCount = 0;
                _this._indexCount = 0;
                _this._startTimeOffset = 0;
                _this._lifeTimeOffset = 0;
                _this._material = null;
                _this.type = ModelType.PARTICLE_BATCH;
                _this._capacity = 0;
                _this._vertAttrs = null;
                _this._vertSize = 0;
                _this._vBuffer = null;
                _this._vertAttrsFloatCount = 0;
                _this._vdataF32 = null;
                _this._vdataUint32 = null;
                _this._iaInfo = new IndirectBuffer([new DrawInfo()]);
                _this._iaInfoBuffer = _this._device.createBuffer(new BufferInfo(BufferUsageBit.INDIRECT, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, DRAW_INFO_SIZE, DRAW_INFO_SIZE));
                _this._subMeshData = null;
                _this._mesh = null;
                return _this;
              }

              var _proto = ParticleBatchModel.prototype;

              _proto.setCapacity = function setCapacity(capacity) {
                var capChanged = this._capacity !== capacity;
                this._capacity = capacity;

                if (this._subMeshData && capChanged) {
                  this.rebuild();
                }
              };

              _proto.setVertexAttributes = function setVertexAttributes(mesh, attrs) {
                if (this._mesh === mesh && this._vertAttrs === attrs) {
                  return;
                }

                this._mesh = mesh;
                this._vertAttrs = attrs;
                this._vertSize = 0;

                for (var _iterator = _createForOfIteratorHelperLoose(this._vertAttrs), _step; !(_step = _iterator()).done;) {
                  var a = _step.value;
                  a.offset = this._vertSize;
                  this._vertSize += FormatInfos[a.format].size;
                }

                this._vertAttrsFloatCount = this._vertSize / 4;
                this.rebuild();
              };

              _proto.createSubMeshData = function createSubMeshData() {
                this.destroySubMeshData();
                this._vertCount = 4;
                this._indexCount = 6;

                if (this._mesh) {
                  this._vertCount = this._mesh.struct.vertexBundles[this._mesh.struct.primitives[0].vertexBundelIndices[0]].view.count;
                  this._indexCount = this._mesh.struct.primitives[0].indexView.count;
                }

                var vertexBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, this._vertSize * this._capacity * this._vertCount, this._vertSize));

                var vBuffer = new ArrayBuffer(this._vertSize * this._capacity * this._vertCount);

                if (this._mesh && this._capacity > 0) {
                  var vOffset = this._vertAttrs[this._vertAttrs.findIndex(function (val) {
                    return val.name === AttributeName.ATTR_TEX_COORD;
                  })].offset;

                  this._mesh.copyAttribute(0, AttributeName.ATTR_TEX_COORD, vBuffer, this._vertSize, vOffset);

                  var vIdx = this._vertAttrs.findIndex(function (val) {
                    return val.name === AttributeName.ATTR_TEX_COORD3;
                  });

                  vOffset = this._vertAttrs[vIdx++].offset;

                  this._mesh.copyAttribute(0, AttributeName.ATTR_POSITION, vBuffer, this._vertSize, vOffset);

                  vOffset = this._vertAttrs[vIdx++].offset;

                  this._mesh.copyAttribute(0, AttributeName.ATTR_NORMAL, vBuffer, this._vertSize, vOffset);

                  vOffset = this._vertAttrs[vIdx++].offset;

                  if (!this._mesh.copyAttribute(0, AttributeName.ATTR_COLOR, vBuffer, this._vertSize, vOffset)) {
                    var vb = new Uint32Array(vBuffer);

                    for (var iVertex = 0; iVertex < this._vertCount; ++iVertex) {
                      vb[iVertex * this._vertAttrsFloatCount + vOffset / 4] = Color$1.WHITE._val;
                    }
                  }

                  var vbFloatArray = new Float32Array(vBuffer);

                  for (var i = 1; i < this._capacity; i++) {
                    vbFloatArray.copyWithin(i * this._vertSize * this._vertCount / 4, 0, this._vertSize * this._vertCount / 4);
                  }
                }

                vertexBuffer.update(vBuffer);
                var indices = new Uint16Array(this._capacity * this._indexCount);

                if (this._mesh && this._capacity > 0) {
                  this._mesh.copyIndices(0, indices);

                  for (var _i = 1; _i < this._capacity; _i++) {
                    for (var j = 0; j < this._indexCount; j++) {
                      indices[_i * this._indexCount + j] = indices[j] + _i * this._vertCount;
                    }
                  }
                } else {
                  var dst = 0;

                  for (var _i2 = 0; _i2 < this._capacity; ++_i2) {
                    var baseIdx = 4 * _i2;
                    indices[dst++] = baseIdx;
                    indices[dst++] = baseIdx + 1;
                    indices[dst++] = baseIdx + 2;
                    indices[dst++] = baseIdx + 3;
                    indices[dst++] = baseIdx + 2;
                    indices[dst++] = baseIdx + 1;
                  }
                }

                var indexBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, this._capacity * this._indexCount * Uint16Array.BYTES_PER_ELEMENT, Uint16Array.BYTES_PER_ELEMENT));

                indexBuffer.update(indices);
                this._iaInfo.drawInfos[0].vertexCount = this._capacity * this._vertCount;
                this._iaInfo.drawInfos[0].indexCount = this._capacity * this._indexCount;

                if (!this._iaInfoBuffer) {
                  this._iaInfoBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.INDIRECT, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, DRAW_INFO_SIZE, DRAW_INFO_SIZE));
                }

                this._iaInfoBuffer.update(this._iaInfo);

                this._subMeshData = new RenderingSubMesh([vertexBuffer], this._vertAttrs, PrimitiveMode.TRIANGLE_LIST, indexBuffer, this._iaInfoBuffer);
                this.initSubModel(0, this._subMeshData, this._material);
                return vBuffer;
              };

              _proto.updateMaterial = function updateMaterial(mat) {
                this._material = mat;
                this.setSubModelMaterial(0, mat);
              };

              _proto.addParticleVertexData = function addParticleVertexData(index, pvdata) {
                if (!this._mesh) {
                  var offset = index * this._vertAttrsFloatCount;
                  this._vdataF32[offset++] = pvdata[0].x;
                  this._vdataF32[offset++] = pvdata[0].y;
                  this._vdataF32[offset++] = pvdata[0].z;
                  this._vdataF32[offset++] = pvdata[1].x;
                  this._vdataF32[offset++] = pvdata[1].y;
                  this._vdataF32[offset++] = pvdata[1].z;
                  this._vdataF32[offset++] = pvdata[2].x;
                  this._vdataF32[offset++] = pvdata[2].y;
                  this._vdataF32[offset++] = pvdata[2].z;
                  this._vdataF32[offset++] = pvdata[3].x;
                  this._vdataF32[offset++] = pvdata[3].y;
                  this._vdataF32[offset++] = pvdata[3].z;
                  this._vdataUint32[offset++] = pvdata[4];

                  if (pvdata[5]) {
                    this._vdataF32[offset++] = pvdata[5].x;
                    this._vdataF32[offset++] = pvdata[5].y;
                    this._vdataF32[offset++] = pvdata[5].z;
                  }
                } else {
                  for (var i = 0; i < this._vertCount; i++) {
                    var _offset = (index * this._vertCount + i) * this._vertAttrsFloatCount;

                    this._vdataF32[_offset++] = pvdata[0].x;
                    this._vdataF32[_offset++] = pvdata[0].y;
                    this._vdataF32[_offset++] = pvdata[0].z;
                    _offset += 2;
                    this._vdataF32[_offset++] = pvdata[1].z;
                    this._vdataF32[_offset++] = pvdata[2].x;
                    this._vdataF32[_offset++] = pvdata[2].y;
                    this._vdataF32[_offset++] = pvdata[2].z;
                    this._vdataF32[_offset++] = pvdata[3].x;
                    this._vdataF32[_offset++] = pvdata[3].y;
                    this._vdataF32[_offset++] = pvdata[3].z;
                    this._vdataUint32[_offset++] = pvdata[4];
                  }
                }
              };

              _proto.addGPUParticleVertexData = function addGPUParticleVertexData(p, num, time) {
                var offset = num * this._vertAttrsFloatCount * this._vertCount;

                for (var i = 0; i < this._vertCount; i++) {
                  var idx = offset;
                  this._vdataF32[idx++] = p.position.x;
                  this._vdataF32[idx++] = p.position.y;
                  this._vdataF32[idx++] = p.position.z;
                  this._vdataF32[idx++] = time;
                  this._vdataF32[idx++] = p.startSize.x;
                  this._vdataF32[idx++] = p.startSize.y;
                  this._vdataF32[idx++] = p.startSize.z;
                  this._vdataF32[idx++] = _uvs$1[2 * i];
                  this._vdataF32[idx++] = p.rotation.x;
                  this._vdataF32[idx++] = p.rotation.y;
                  this._vdataF32[idx++] = p.rotation.z;
                  this._vdataF32[idx++] = _uvs$1[2 * i + 1];
                  this._vdataF32[idx++] = p.startColor.r / 255.0;
                  this._vdataF32[idx++] = p.startColor.g / 255.0;
                  this._vdataF32[idx++] = p.startColor.b / 255.0;
                  this._vdataF32[idx++] = p.startColor.a / 255.0;
                  this._vdataF32[idx++] = p.velocity.x;
                  this._vdataF32[idx++] = p.velocity.y;
                  this._vdataF32[idx++] = p.velocity.z;
                  this._vdataF32[idx++] = p.startLifetime;
                  this._vdataF32[idx++] = p.randomSeed;
                  offset += this._vertAttrsFloatCount;
                }
              };

              _proto.updateGPUParticles = function updateGPUParticles(num, time, dt) {
                var pSize = this._vertAttrsFloatCount * this._vertCount;
                var pBaseIndex = 0;
                var startTime = 0;
                var lifeTime = 0;
                var lastBaseIndex = 0;
                var interval = 0;

                for (var i = 0; i < num; ++i) {
                  pBaseIndex = i * pSize;
                  startTime = this._vdataF32[pBaseIndex + this._startTimeOffset];
                  lifeTime = this._vdataF32[pBaseIndex + this._lifeTimeOffset];
                  interval = time - startTime;

                  if (lifeTime - interval < dt) {
                    lastBaseIndex = --num * pSize;

                    this._vdataF32.copyWithin(pBaseIndex, lastBaseIndex, lastBaseIndex + pSize);

                    i--;
                  }
                }

                return num;
              };

              _proto.constructAttributeIndex = function constructAttributeIndex() {
                if (!this._vertAttrs) {
                  return;
                }

                var vIdx = this._vertAttrs.findIndex(function (val) {
                  return val.name === 'a_position_starttime';
                });

                var vOffset = this._vertAttrs[vIdx].offset;
                this._startTimeOffset = vOffset / 4 + 3;
                vIdx = this._vertAttrs.findIndex(function (val) {
                  return val.name === 'a_dir_life';
                });
                vOffset = this._vertAttrs[vIdx].offset;
                this._lifeTimeOffset = vOffset / 4 + 3;
              };

              _proto.updateIA = function updateIA(count) {
                if (count <= 0) {
                  return;
                }

                var ia = this._subModels[0].inputAssembler;
                ia.vertexBuffers[0].update(this._vdataF32);
                this._iaInfo.drawInfos[0].firstIndex = 0;
                this._iaInfo.drawInfos[0].indexCount = this._indexCount * count;

                this._iaInfoBuffer.update(this._iaInfo);
              };

              _proto.clear = function clear() {
                this._subModels[0].inputAssembler.indexCount = 0;
              };

              _proto.destroy = function destroy() {
                _scene$Model.prototype.destroy.call(this);

                this._vBuffer = null;
                this._vdataF32 = null;
                this.destroySubMeshData();

                if (this._iaInfoBuffer) {
                  this._iaInfoBuffer.destroy();

                  this._iaInfoBuffer = null;
                }
              };

              _proto.rebuild = function rebuild() {
                this._vBuffer = this.createSubMeshData();
                this._vdataF32 = new Float32Array(this._vBuffer);
                this._vdataUint32 = new Uint32Array(this._vBuffer);
              };

              _proto.destroySubMeshData = function destroySubMeshData() {
                if (this._subMeshData) {
                  this._subMeshData.destroy();

                  this._subMeshData = null;
                  this._iaInfoBuffer = null;
                }
              };

              return ParticleBatchModel;
            }(Model);

            var ParticleSystemRendererBase = function () {
              function ParticleSystemRendererBase(info) {
                this._particleSystem = null;
                this._model = null;
                this._renderInfo = null;
                this._vertAttrs = [];
                this._renderInfo = info;
              }

              var _proto = ParticleSystemRendererBase.prototype;

              _proto.getInfo = function getInfo() {
                return this._renderInfo;
              };

              _proto.onInit = function onInit(ps) {
                this._particleSystem = ps;
              };

              _proto.onEnable = function onEnable() {
                if (!this._particleSystem) {
                  return;
                }

                this.attachToScene();
                var model = this._model;

                if (model) {
                  model.node = model.transform = this._particleSystem.node;
                }
              };

              _proto.onDisable = function onDisable() {
                this.detachFromScene();
              };

              _proto.onDestroy = function onDestroy() {
                if (this._model) {
                  legacyCC.director.root.destroyModel(this._model);
                  this._model = null;
                }
              };

              _proto.attachToScene = function attachToScene() {
                if (this._model) {
                  if (this._model.scene) {
                    this.detachFromScene();
                  }

                  this._particleSystem._getRenderScene().addModel(this._model);
                }
              };

              _proto.detachFromScene = function detachFromScene() {
                if (this._model && this._model.scene) {
                  this._model.scene.removeModel(this._model);
                }
              };

              _proto.setVertexAttributes = function setVertexAttributes() {
                if (this._model) {
                  this._model.setVertexAttributes(this._renderInfo.renderMode === RenderMode$1.Mesh ? this._renderInfo.mesh : null, this._vertAttrs);
                }
              };

              _proto.clear = function clear() {
                if (this._model) this._model.enabled = false;
              };

              _proto.getModel = function getModel() {
                return this._model;
              };

              _proto._initModel = function _initModel() {
                if (!this._model) {
                  this._model = legacyCC.director.root.createModel(ParticleBatchModel);

                  this._model.setCapacity(this._particleSystem.capacity);

                  this._model.visFlags = this._particleSystem.visibility;
                }
              };

              _proto.updateTrailMaterial = function updateTrailMaterial() {};

              _proto.getDefaultTrailMaterial = function getDefaultTrailMaterial() {
                return null;
              };

              return ParticleSystemRendererBase;
            }();

            var _tempAttribUV = new Vec3();

            var _tempWorldTrans = new Mat4();

            var _node_rot = new Quat();

            var _node_euler = new Vec3();

            var _anim_module = ['_colorOverLifetimeModule', '_sizeOvertimeModule', '_velocityOvertimeModule', '_forceOvertimeModule', '_limitVelocityOvertimeModule', '_rotationOvertimeModule', '_textureAnimationModule'];
            var _uvs$2 = [0, 0, 1, 0, 0, 1, 1, 1];
            var CC_USE_WORLD_SPACE$1 = 'CC_USE_WORLD_SPACE';
            var CC_RENDER_MODE = 'CC_RENDER_MODE';
            var ROTATION_OVER_TIME_MODULE_ENABLE = 'ROTATION_OVER_TIME_MODULE_ENABLE';
            var RENDER_MODE_BILLBOARD = 0;
            var RENDER_MODE_STRETCHED_BILLBOARD = 1;
            var RENDER_MODE_HORIZONTAL_BILLBOARD = 2;
            var RENDER_MODE_VERTICAL_BILLBOARD = 3;
            var RENDER_MODE_MESH = 4;
            var _vertex_attrs$1 = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD1, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD2, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true)];
            var _vertex_attrs_stretch = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD1, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD2, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true), new Attribute(AttributeName.ATTR_COLOR1, Format.RGB32F)];
            var _vertex_attrs_mesh = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD1, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD2, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true), new Attribute(AttributeName.ATTR_TEX_COORD3, Format.RGB32F), new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR1, Format.RGBA8, true)];
            var _matInsInfo$1 = {
              parent: null,
              owner: null,
              subModelIdx: 0
            };

            var ParticleSystemRendererCPU = function (_ParticleSystemRender) {
              _inheritsLoose(ParticleSystemRendererCPU, _ParticleSystemRender);

              function ParticleSystemRendererCPU(info) {
                var _this;

                _this = _ParticleSystemRender.call(this, info) || this;
                _this._defines = void 0;
                _this._trailDefines = void 0;
                _this._frameTile_velLenScale = void 0;
                _this._tmp_velLenScale = void 0;
                _this._defaultMat = null;
                _this._node_scale = void 0;
                _this._attrs = void 0;
                _this._particles = null;
                _this._defaultTrailMat = null;
                _this._updateList = new Map();
                _this._animateList = new Map();
                _this._runAnimateList = new Array();
                _this._fillDataFunc = null;
                _this._uScaleHandle = 0;
                _this._uLenHandle = 0;
                _this._uNodeRotHandle = 0;
                _this._alignSpace = AlignmentSpace.View;
                _this._inited = false;
                _this._localMat = new Mat4();
                _this._gravity = new Vec4();
                _this._model = null;
                _this._frameTile_velLenScale = new Vec4(1, 1, 0, 0);
                _this._tmp_velLenScale = _this._frameTile_velLenScale.clone();
                _this._node_scale = new Vec4();
                _this._attrs = new Array(5);
                _this._defines = {
                  CC_USE_WORLD_SPACE: true,
                  CC_USE_BILLBOARD: true,
                  CC_USE_STRETCHED_BILLBOARD: false,
                  CC_USE_HORIZONTAL_BILLBOARD: false,
                  CC_USE_VERTICAL_BILLBOARD: false
                };
                _this._trailDefines = {
                  CC_USE_WORLD_SPACE: true
                };
                return _this;
              }

              var _proto = ParticleSystemRendererCPU.prototype;

              _proto.onInit = function onInit(ps) {
                var _this2 = this;

                _ParticleSystemRender.prototype.onInit.call(this, ps);

                this._particles = new RecyclePool(function () {
                  return new Particle(_this2);
                }, 16);

                this._setVertexAttrib();

                this._setFillFunc();

                this._initModuleList();

                this._initModel();

                this.updateMaterialParams();
                this.updateTrailMaterial();
                this.setVertexAttributes();
                this._inited = true;
              };

              _proto.clear = function clear() {
                _ParticleSystemRender.prototype.clear.call(this);

                this._particles.reset();

                if (this._particleSystem._trailModule) {
                  this._particleSystem._trailModule.clear();
                }

                this.updateRenderData();
                this._model.enabled = false;
              };

              _proto.updateRenderMode = function updateRenderMode() {
                this._setVertexAttrib();

                this._setFillFunc();

                this.updateMaterialParams();
                this.setVertexAttributes();
              };

              _proto.getFreeParticle = function getFreeParticle() {
                if (this._particles.length >= this._particleSystem.capacity) {
                  return null;
                }

                return this._particles.add();
              };

              _proto.getDefaultTrailMaterial = function getDefaultTrailMaterial() {
                return this._defaultTrailMat;
              };

              _proto.setNewParticle = function setNewParticle(p) {};

              _proto._initModuleList = function _initModuleList() {
                var _this3 = this;

                _anim_module.forEach(function (val) {
                  var pm = _this3._particleSystem[val];

                  if (pm && pm.enable) {
                    if (pm.needUpdate) {
                      _this3._updateList[pm.name] = pm;
                    }

                    if (pm.needAnimate) {
                      _this3._animateList[pm.name] = pm;
                    }
                  }
                });

                this._runAnimateList.length = 0;

                for (var i = 0, len = PARTICLE_MODULE_ORDER.length; i < len; i++) {
                  var p = this._animateList[PARTICLE_MODULE_ORDER[i]];

                  if (p) {
                    this._runAnimateList.push(p);
                  }
                }
              };

              _proto.enableModule = function enableModule(name, val, pm) {
                if (val) {
                  if (pm.needUpdate) {
                    this._updateList[pm.name] = pm;
                  }

                  if (pm.needAnimate) {
                    this._animateList[pm.name] = pm;
                  }
                } else {
                  delete this._animateList[name];
                  delete this._updateList[name];
                }

                this._runAnimateList.length = 0;

                for (var i = 0, len = PARTICLE_MODULE_ORDER.length; i < len; i++) {
                  var p = this._animateList[PARTICLE_MODULE_ORDER[i]];

                  if (p) {
                    this._runAnimateList.push(p);
                  }
                }

                this.updateMaterialParams();
              };

              _proto.updateAlignSpace = function updateAlignSpace(space) {
                this._alignSpace = space;
              };

              _proto.getDefaultMaterial = function getDefaultMaterial() {
                return this._defaultMat;
              };

              _proto.updateRotation = function updateRotation(pass) {
                if (pass) {
                  this.doUpdateRotation(pass);
                }
              };

              _proto.doUpdateRotation = function doUpdateRotation(pass) {
                var mode = this._renderInfo.renderMode;

                if (mode !== RenderMode$1.Mesh && this._alignSpace === AlignmentSpace.View) {
                  return;
                }

                if (this._alignSpace === AlignmentSpace.Local) {
                  this._particleSystem.node.getRotation(_node_rot);
                } else if (this._alignSpace === AlignmentSpace.World) {
                  this._particleSystem.node.getWorldRotation(_node_rot);
                } else if (this._alignSpace === AlignmentSpace.View) {
                  var _this$_particleSystem;

                  _node_rot.set(0.0, 0.0, 0.0, 1.0);

                  var cameraLst = (_this$_particleSystem = this._particleSystem.node.scene.renderScene) === null || _this$_particleSystem === void 0 ? void 0 : _this$_particleSystem.cameras;

                  if (cameraLst !== undefined) {
                    for (var i = 0; i < (cameraLst === null || cameraLst === void 0 ? void 0 : cameraLst.length); ++i) {
                      var camera = cameraLst[i];
                      var checkCamera =  (camera.visibility & this._particleSystem.node.layer) === this._particleSystem.node.layer ;

                      if (checkCamera) {
                        Quat.fromViewUp(_node_rot, camera.forward);
                        break;
                      }
                    }
                  }
                } else {
                  _node_rot.set(0.0, 0.0, 0.0, 1.0);
                }

                pass.setUniform(this._uNodeRotHandle, _node_rot);
              };

              _proto.updateScale = function updateScale(pass) {
                if (pass) {
                  this.doUpdateScale(pass);
                }
              };

              _proto.doUpdateScale = function doUpdateScale(pass) {
                switch (this._particleSystem.scaleSpace) {
                  case Space.Local:
                    this._particleSystem.node.getScale(this._node_scale);

                    break;

                  case Space.World:
                    this._particleSystem.node.getWorldScale(this._node_scale);

                    break;
                }

                pass.setUniform(this._uScaleHandle, this._node_scale);
              };

              _proto.updateParticles = function updateParticles(dt) {
                var _this4 = this;

                var ps = this._particleSystem;

                if (!ps) {
                  return this._particles.length;
                }

                ps.node.getWorldMatrix(_tempWorldTrans);

                var mat = ps.getMaterialInstance(0) || this._defaultMat;

                var pass = mat.passes[0];
                this.doUpdateScale(pass);
                this.doUpdateRotation(pass);

                this._updateList.forEach(function (value, key) {
                  value.update(ps._simulationSpace, _tempWorldTrans);
                });

                var trailModule = ps._trailModule;
                var trailEnable = trailModule && trailModule.enable;

                if (trailEnable) {
                  trailModule.update();
                }

                if (ps.simulationSpace === Space.Local) {
                  var r = ps.node.getRotation();
                  Mat4.fromQuat(this._localMat, r);

                  this._localMat.transpose();
                }

                var _loop = function _loop(_i) {
                  var p = _this4._particles.data[_i];
                  p.remainingLifetime -= dt;
                  Vec3.set(p.animatedVelocity, 0, 0, 0);

                  if (p.remainingLifetime < 0.0) {
                    if (trailEnable) {
                      trailModule.removeParticle(p);
                    }

                    _this4._particles.removeAt(_i);

                    --_i;
                    i = _i;
                    return "continue";
                  }

                  if (ps.simulationSpace === Space.Local) {
                    var gravityFactor = -ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, pseudoRandom(p.randomSeed)) * 9.8 * dt;
                    _this4._gravity.x = 0.0;
                    _this4._gravity.y = gravityFactor;
                    _this4._gravity.z = 0.0;
                    _this4._gravity.w = 1.0;
                    _this4._gravity = _this4._gravity.transformMat4(_this4._localMat);
                    p.velocity.x += _this4._gravity.x;
                    p.velocity.y += _this4._gravity.y;
                    p.velocity.z += _this4._gravity.z;
                  } else {
                    p.velocity.y -= ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, pseudoRandom(p.randomSeed)) * 9.8 * dt;
                  }

                  Vec3.copy(p.ultimateVelocity, p.velocity);

                  _this4._runAnimateList.forEach(function (value) {
                    value.animate(p, dt);
                  });

                  Vec3.scaleAndAdd(p.position, p.position, p.ultimateVelocity, dt);

                  if (trailEnable) {
                    trailModule.animate(p, dt);
                  }

                  i = _i;
                };

                for (var i = 0; i < this._particles.length; ++i) {
                  var _ret = _loop(i);

                  if (_ret === "continue") continue;
                }

                this._model.enabled = this._particles.length > 0;
                return this._particles.length;
              };

              _proto.updateRenderData = function updateRenderData() {
                var idx = 0;

                for (var _i2 = 0; _i2 < this._particles.length; ++_i2) {
                  var p = this._particles.data[_i2];
                  var fi = 0;
                  var textureModule = this._particleSystem._textureAnimationModule;

                  if (textureModule && textureModule.enable) {
                    fi = p.frameIndex;
                  }

                  idx = _i2 * 4;

                  this._fillDataFunc(p, idx, fi);
                }
              };

              _proto.beforeRender = function beforeRender() {
                this._model.updateIA(this._particles.length);
              };

              _proto.getParticleCount = function getParticleCount() {
                return this._particles.length;
              };

              _proto.onMaterialModified = function onMaterialModified(index, material) {
                if (!this._inited) {
                  return;
                }

                if (index === 0) {
                  this.updateMaterialParams();
                } else {
                  this.updateTrailMaterial();
                }
              };

              _proto.onRebuildPSO = function onRebuildPSO(index, material) {
                if (this._model && index === 0) {
                  this._model.setSubModelMaterial(0, material);
                }

                var trailModule = this._particleSystem._trailModule;

                if (trailModule && trailModule._trailModel && index === 1) {
                  trailModule._trailModel.setSubModelMaterial(0, material);
                }
              };

              _proto._setFillFunc = function _setFillFunc() {
                if (this._renderInfo.renderMode === RenderMode$1.Mesh) {
                  this._fillDataFunc = this._fillMeshData;
                } else if (this._renderInfo.renderMode === RenderMode$1.StrecthedBillboard) {
                  this._fillDataFunc = this._fillStrecthedData;
                } else {
                  this._fillDataFunc = this._fillNormalData;
                }
              };

              _proto._fillMeshData = function _fillMeshData(p, idx, fi) {
                var i = idx / 4;
                this._attrs[0] = p.position;
                _tempAttribUV.z = fi;
                this._attrs[1] = _tempAttribUV;
                this._attrs[2] = p.size;
                this._attrs[3] = p.rotation;
                this._attrs[4] = p.color._val;

                this._model.addParticleVertexData(i, this._attrs);
              };

              _proto._fillStrecthedData = function _fillStrecthedData(p, idx, fi) {
                for (var j = 0; j < 4; ++j) {
                  this._attrs[0] = p.position;
                  _tempAttribUV.x = _uvs$2[2 * j];
                  _tempAttribUV.y = _uvs$2[2 * j + 1];
                  _tempAttribUV.z = fi;
                  this._attrs[1] = _tempAttribUV;
                  this._attrs[2] = p.size;
                  this._attrs[3] = p.rotation;
                  this._attrs[4] = p.color._val;
                  this._attrs[5] = p.ultimateVelocity;
                  this._attrs[6] = null;

                  this._model.addParticleVertexData(idx++, this._attrs);
                }
              };

              _proto._fillNormalData = function _fillNormalData(p, idx, fi) {
                for (var j = 0; j < 4; ++j) {
                  this._attrs[0] = p.position;
                  _tempAttribUV.x = _uvs$2[2 * j];
                  _tempAttribUV.y = _uvs$2[2 * j + 1];
                  _tempAttribUV.z = fi;
                  this._attrs[1] = _tempAttribUV;
                  this._attrs[2] = p.size;
                  this._attrs[3] = p.rotation;
                  this._attrs[4] = p.color._val;
                  this._attrs[5] = null;

                  this._model.addParticleVertexData(idx++, this._attrs);
                }
              };

              _proto._setVertexAttrib = function _setVertexAttrib() {
                switch (this._renderInfo.renderMode) {
                  case RenderMode$1.StrecthedBillboard:
                    this._vertAttrs = _vertex_attrs_stretch.slice();
                    break;

                  case RenderMode$1.Mesh:
                    this._vertAttrs = _vertex_attrs_mesh.slice();
                    break;

                  default:
                    this._vertAttrs = _vertex_attrs$1.slice();
                }
              };

              _proto.updateMaterialParams = function updateMaterialParams() {
                if (!this._particleSystem) {
                  return;
                }

                var ps = this._particleSystem;
                var shareMaterial = ps.sharedMaterial;

                if (shareMaterial != null) {
                  var effectName = shareMaterial._effectAsset._name;
                  this._renderInfo.mainTexture = shareMaterial.getProperty('mainTexture', 0);

                  if (effectName.indexOf('particle') === -1 || effectName.indexOf('particle-gpu') !== -1) {
                    ps.setMaterial(null, 0);
                  }
                }

                if (ps.sharedMaterial == null && this._defaultMat == null) {
                  _matInsInfo$1.parent = builtinResMgr.get('default-particle-material');
                  _matInsInfo$1.owner = this._particleSystem;
                  _matInsInfo$1.subModelIdx = 0;
                  this._defaultMat = new MaterialInstance(_matInsInfo$1);
                  _matInsInfo$1.parent = null;
                  _matInsInfo$1.owner = null;
                  _matInsInfo$1.subModelIdx = 0;

                  if (this._renderInfo.mainTexture !== null) {
                    this._defaultMat.setProperty('mainTexture', this._renderInfo.mainTexture);
                  }
                }

                var mat = ps.getMaterialInstance(0) || this._defaultMat;

                if (ps._simulationSpace === Space.World) {
                  this._defines[CC_USE_WORLD_SPACE$1] = true;
                } else {
                  this._defines[CC_USE_WORLD_SPACE$1] = false;
                }

                var pass = mat.passes[0];
                this._uScaleHandle = pass.getHandle('scale');
                this._uLenHandle = pass.getHandle('frameTile_velLenScale');
                this._uNodeRotHandle = pass.getHandle('nodeRotation');
                var renderMode = this._renderInfo.renderMode;
                var vlenScale = this._frameTile_velLenScale;

                if (renderMode === RenderMode$1.Billboard) {
                  this._defines[CC_RENDER_MODE] = RENDER_MODE_BILLBOARD;
                } else if (renderMode === RenderMode$1.StrecthedBillboard) {
                  this._defines[CC_RENDER_MODE] = RENDER_MODE_STRETCHED_BILLBOARD;
                  vlenScale.z = this._renderInfo.velocityScale;
                  vlenScale.w = this._renderInfo.lengthScale;
                } else if (renderMode === RenderMode$1.HorizontalBillboard) {
                  this._defines[CC_RENDER_MODE] = RENDER_MODE_HORIZONTAL_BILLBOARD;
                } else if (renderMode === RenderMode$1.VerticalBillboard) {
                  this._defines[CC_RENDER_MODE] = RENDER_MODE_VERTICAL_BILLBOARD;
                } else if (renderMode === RenderMode$1.Mesh) {
                  this._defines[CC_RENDER_MODE] = RENDER_MODE_MESH;
                } else {
                  console.warn("particle system renderMode " + renderMode + " not support.");
                }

                var textureModule = ps._textureAnimationModule;

                if (textureModule && textureModule.enable) {
                  Vec4.copy(this._tmp_velLenScale, vlenScale);
                  Vec2.set(this._tmp_velLenScale, textureModule.numTilesX, textureModule.numTilesY);
                  pass.setUniform(this._uLenHandle, this._tmp_velLenScale);
                } else {
                  pass.setUniform(this._uLenHandle, vlenScale);
                }

                var enable = false;
                var roationModule = this._particleSystem._rotationOvertimeModule;
                enable = roationModule && roationModule.enable;
                this._defines[ROTATION_OVER_TIME_MODULE_ENABLE] = enable;
                mat.recompileShaders(this._defines);

                if (this._model) {
                  this._model.updateMaterial(mat);
                }
              };

              _proto.updateTrailMaterial = function updateTrailMaterial() {
                if (!this._particleSystem) {
                  return;
                }

                var ps = this._particleSystem;
                var trailModule = ps._trailModule;

                if (trailModule && trailModule.enable) {
                  if (ps.simulationSpace === Space.World || trailModule.space === Space.World) {
                    this._trailDefines[CC_USE_WORLD_SPACE$1] = true;
                  } else {
                    this._trailDefines[CC_USE_WORLD_SPACE$1] = false;
                  }

                  var mat = ps.getMaterialInstance(1);

                  if (mat === null && this._defaultTrailMat === null) {
                    _matInsInfo$1.parent = builtinResMgr.get('default-trail-material');
                    _matInsInfo$1.owner = this._particleSystem;
                    _matInsInfo$1.subModelIdx = 1;
                    this._defaultTrailMat = new MaterialInstance(_matInsInfo$1);
                    _matInsInfo$1.parent = null;
                    _matInsInfo$1.owner = null;
                    _matInsInfo$1.subModelIdx = 0;
                  }

                  mat = mat || this._defaultTrailMat;
                  mat.recompileShaders(this._trailDefines);
                  trailModule.updateMaterial();
                }
              };

              return ParticleSystemRendererCPU;
            }(ParticleSystemRendererBase);

            var _tempWorldTrans$1 = new Mat4();

            var _tempVec4 = new Vec4();

            var _world_rot = new Quat();

            var _node_rot$1 = new Quat();

            var _node_euler$1 = new Vec3();

            var _sample_num = 32;

            var _sample_interval = 1.0 / _sample_num;

            var CC_USE_WORLD_SPACE$2 = 'CC_USE_WORLD_SPACE';
            var CC_RENDER_MODE$1 = 'CC_RENDER_MODE';
            var RENDER_MODE_BILLBOARD$1 = 0;
            var RENDER_MODE_STRETCHED_BILLBOARD$1 = 1;
            var RENDER_MODE_HORIZONTAL_BILLBOARD$1 = 2;
            var RENDER_MODE_VERTICAL_BILLBOARD$1 = 3;
            var RENDER_MODE_MESH$1 = 4;
            var COLOR_OVER_TIME_MODULE_ENABLE = 'COLOR_OVER_TIME_MODULE_ENABLE';
            var ROTATION_OVER_TIME_MODULE_ENABLE$1 = 'ROTATION_OVER_TIME_MODULE_ENABLE';
            var SIZE_OVER_TIME_MODULE_ENABLE = 'SIZE_OVER_TIME_MODULE_ENABLE';
            var VELOCITY_OVER_TIME_MODULE_ENABLE = 'VELOCITY_OVER_TIME_MODULE_ENABLE';
            var FORCE_OVER_TIME_MODULE_ENABLE = 'FORCE_OVER_TIME_MODULE_ENABLE';
            var TEXTURE_ANIMATION_MODULE_ENABLE = 'TEXTURE_ANIMATION_MODULE_ENABLE';
            var USE_VK_SHADER = 'USE_VK_SHADER';
            var _vert_attr_name = {
              POSITION_STARTTIME: 'a_position_starttime',
              VERT_SIZE_UV: 'a_size_uv',
              VERT_ROTATION_UV: 'a_rotation_uv',
              COLOR: 'a_color',
              DIR_LIFE: 'a_dir_life',
              RANDOM_SEED: 'a_rndSeed'
            };
            var _gpu_vert_attr = [new Attribute(_vert_attr_name.POSITION_STARTTIME, Format.RGBA32F), new Attribute(_vert_attr_name.VERT_SIZE_UV, Format.RGBA32F), new Attribute(_vert_attr_name.VERT_ROTATION_UV, Format.RGBA32F), new Attribute(_vert_attr_name.COLOR, Format.RGBA32F), new Attribute(_vert_attr_name.DIR_LIFE, Format.RGBA32F), new Attribute(_vert_attr_name.RANDOM_SEED, Format.R32F)];
            var _gpu_vert_attr_mesh = [new Attribute(_vert_attr_name.POSITION_STARTTIME, Format.RGBA32F), new Attribute(_vert_attr_name.VERT_SIZE_UV, Format.RGBA32F), new Attribute(_vert_attr_name.VERT_ROTATION_UV, Format.RGBA32F), new Attribute(_vert_attr_name.COLOR, Format.RGBA32F), new Attribute(_vert_attr_name.DIR_LIFE, Format.RGBA32F), new Attribute(_vert_attr_name.RANDOM_SEED, Format.R32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD3, Format.RGB32F), new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR1, Format.RGBA8, true)];
            var _matInsInfo$2 = {
              parent: null,
              owner: null,
              subModelIdx: 0
            };

            var ParticleSystemRendererGPU = function (_ParticleSystemRender) {
              _inheritsLoose(ParticleSystemRendererGPU, _ParticleSystemRender);

              function ParticleSystemRendererGPU(info) {
                var _this;

                _this = _ParticleSystemRender.call(this, info) || this;
                _this._defines = void 0;
                _this._frameTile_velLenScale = void 0;
                _this._unifrom_velLenScale = void 0;
                _this._tmp_velLenScale = void 0;
                _this._node_scale = void 0;
                _this._vertAttrs = [];
                _this._defaultMat = null;
                _this._particleNum = 0;
                _this._tempParticle = null;
                _this._colorTexture = null;
                _this._forceTexture = null;
                _this._velocityTexture = null;
                _this._rotationTexture = null;
                _this._sizeTexture = null;
                _this._animTexture = null;
                _this._uTimeHandle = 0;
                _this._uRotHandle = 0;
                _this._uNodeRotHandle = 0;
                _this._alignSpace = AlignmentSpace.View;
                _this._inited = false;
                _this._frameTile_velLenScale = new Vec4(1, 1, 0, 0);
                _this._unifrom_velLenScale = _this._frameTile_velLenScale.clone();
                _this._tmp_velLenScale = _this._frameTile_velLenScale.clone();
                _this._node_scale = new Vec4();
                _this._defines = {
                  CC_USE_WORLD_SPACE: true,
                  CC_USE_BILLBOARD: true,
                  CC_USE_STRETCHED_BILLBOARD: false,
                  CC_USE_HORIZONTAL_BILLBOARD: false,
                  CC_USE_VERTICAL_BILLBOARD: false,
                  COLOR_OVER_TIME_MODULE_ENABLE: false
                };
                _this._tempParticle = new Particle(null);
                _this._particleNum = 0;
                return _this;
              }

              var _proto = ParticleSystemRendererGPU.prototype;

              _proto.onInit = function onInit(ps) {
                _ParticleSystemRender.prototype.onInit.call(this, ps);

                this._setVertexAttrib();

                this._initModel();

                this.updateMaterialParams();
                this.setVertexAttributes();
                this._inited = true;
              };

              _proto.updateRenderMode = function updateRenderMode() {
                this._setVertexAttrib();

                this.updateMaterialParams();
                this.setVertexAttributes();
              };

              _proto.setVertexAttributes = function setVertexAttributes() {
                _ParticleSystemRender.prototype.setVertexAttributes.call(this);

                this._model.constructAttributeIndex();
              };

              _proto.clear = function clear() {
                _ParticleSystemRender.prototype.clear.call(this);

                this._particleNum = 0;
                this.updateRenderData();
              };

              _proto.onDestroy = function onDestroy() {
                _ParticleSystemRender.prototype.onDestroy.call(this);

                if (this._forceTexture) this._forceTexture.destroy();
                if (this._velocityTexture) this._velocityTexture.destroy();
                if (this._colorTexture) this._colorTexture.destroy();
                if (this._sizeTexture) this._sizeTexture.destroy();
                if (this._rotationTexture) this._rotationTexture.destroy();
                if (this._animTexture) this._animTexture.destroy();
              };

              _proto.enableModule = function enableModule(name, val, pm) {
                var mat = this._particleSystem.getMaterialInstance(0) || this._defaultMat;

                if (!mat) {
                  return;
                }

                this.initShaderUniform(mat);
                mat.recompileShaders(this._defines);

                if (this._model) {
                  this._model.setSubModelMaterial(0, mat);
                }
              };

              _proto.getFreeParticle = function getFreeParticle() {
                if (this._particleNum >= this._particleSystem._capacity) {
                  return null;
                }

                return this._tempParticle;
              };

              _proto.setNewParticle = function setNewParticle(p) {
                this._model.addGPUParticleVertexData(p, this._particleNum, this._particleSystem._time);

                this._particleNum++;
              };

              _proto.getDefaultMaterial = function getDefaultMaterial() {
                return this._defaultMat;
              };

              _proto.updateRotation = function updateRotation(pass) {
                if (pass) {
                  this.doUpdateRotation(pass);
                }
              };

              _proto.doUpdateRotation = function doUpdateRotation(pass) {
                var mode = this._renderInfo.renderMode;

                if (mode !== RenderMode$1.Mesh && this._alignSpace === AlignmentSpace.View) {
                  return;
                }

                if (this._alignSpace === AlignmentSpace.Local) {
                  this._particleSystem.node.getRotation(_node_rot$1);
                } else if (this._alignSpace === AlignmentSpace.World) {
                  this._particleSystem.node.getWorldRotation(_node_rot$1);
                } else if (this._alignSpace === AlignmentSpace.View) {
                  var _this$_particleSystem;

                  _node_rot$1.set(0.0, 0.0, 0.0, 1.0);

                  var cameraLst = (_this$_particleSystem = this._particleSystem.node.scene.renderScene) === null || _this$_particleSystem === void 0 ? void 0 : _this$_particleSystem.cameras;

                  if (cameraLst !== undefined) {
                    for (var i = 0; i < (cameraLst === null || cameraLst === void 0 ? void 0 : cameraLst.length); ++i) {
                      var camera = cameraLst[i];
                      var checkCamera =  (camera.visibility & this._particleSystem.node.layer) === this._particleSystem.node.layer ;

                      if (checkCamera) {
                        Quat.fromViewUp(_node_rot$1, camera.forward);
                        break;
                      }
                    }
                  }
                } else {
                  _node_rot$1.set(0.0, 0.0, 0.0, 1.0);
                }

                pass.setUniform(this._uNodeRotHandle, _node_rot$1);
              };

              _proto.updateScale = function updateScale(pass) {
                if (pass) {
                  this.doUpdateScale(pass);
                }
              };

              _proto.doUpdateScale = function doUpdateScale(pass) {
                switch (this._particleSystem.scaleSpace) {
                  case Space.Local:
                    this._particleSystem.node.getScale(this._node_scale);

                    break;

                  case Space.World:
                    this._particleSystem.node.getWorldScale(this._node_scale);

                    break;
                }

                pass.setUniform(pass.getHandle('scale'), this._node_scale);
              };

              _proto.updateParticles = function updateParticles(dt) {

                this._particleNum = this._model.updateGPUParticles(this._particleNum, this._particleSystem._time, dt);
                this.updateShaderUniform(dt);
                this._model.enabled = this._particleNum > 0;
                return this._particleNum;
              };

              _proto.updateRenderData = function updateRenderData() {};

              _proto.beforeRender = function beforeRender() {
                this._model.updateIA(this._particleNum);
              };

              _proto.updateAlignSpace = function updateAlignSpace(space) {
                this._alignSpace = space;
              };

              _proto.updateShaderUniform = function updateShaderUniform(dt) {
                var mat = this._particleSystem.getMaterialInstance(0) || this._defaultMat;

                if (!mat) {
                  return;
                }

                var pass = mat.passes[0];
                _tempVec4.x = this._particleSystem._time;
                _tempVec4.y = dt;
                pass.setUniform(this._uTimeHandle, _tempVec4);

                this._particleSystem.node.getWorldRotation(_world_rot);

                pass.setUniform(this._uRotHandle, _world_rot);
                this.doUpdateRotation(pass);
              };

              _proto.initShaderUniform = function initShaderUniform(mat) {
                var pass = mat.passes[0];
                this._uTimeHandle = pass.getHandle('u_timeDelta');
                this._uRotHandle = pass.getHandle('u_worldRot');
                this._uNodeRotHandle = pass.getHandle('nodeRotation');
                this.doUpdateScale(pass);
                pass.setUniform(pass.getHandle('frameTile_velLenScale'), this._unifrom_velLenScale);
                _tempVec4.x = _sample_num;
                _tempVec4.y = _sample_interval;
                pass.setUniform(pass.getHandle('u_sampleInfo'), _tempVec4);
                var enable = false;
                var forceModule = this._particleSystem._forceOvertimeModule;
                enable = forceModule && forceModule.enable;
                this._defines[FORCE_OVER_TIME_MODULE_ENABLE] = enable;

                if (enable) {
                  if (this._forceTexture) this._forceTexture.destroy();
                  this._forceTexture = packCurveRangeXYZ(_sample_num, forceModule.x, forceModule.y, forceModule.z);
                  var handle = pass.getHandle('force_over_time_tex0');
                  var binding = Pass.getBindingFromHandle(handle);
                  pass.bindSampler(binding, this._forceTexture.getGFXSampler());
                  pass.bindTexture(binding, this._forceTexture.getGFXTexture());
                  var spaceHandle = pass.getHandle('u_force_space');
                  pass.setUniform(spaceHandle, forceModule.space);
                  var modeHandle = pass.getHandle('u_force_mode');
                  pass.setUniform(modeHandle, this._forceTexture.height);
                }

                var velocityModule = this._particleSystem._velocityOvertimeModule;
                enable = velocityModule && velocityModule.enable;
                this._defines[VELOCITY_OVER_TIME_MODULE_ENABLE] = enable;

                if (enable) {
                  if (this._velocityTexture) this._velocityTexture.destroy();
                  this._velocityTexture = packCurveRangeXYZW(_sample_num, velocityModule.x, velocityModule.y, velocityModule.z, velocityModule.speedModifier);

                  var _handle = pass.getHandle('velocity_over_time_tex0');

                  var _binding = Pass.getBindingFromHandle(_handle);

                  pass.bindSampler(_binding, this._velocityTexture.getGFXSampler());
                  pass.bindTexture(_binding, this._velocityTexture.getGFXTexture());

                  var _spaceHandle = pass.getHandle('u_velocity_space');

                  pass.setUniform(_spaceHandle, velocityModule.space);

                  var _modeHandle = pass.getHandle('u_velocity_mode');

                  pass.setUniform(_modeHandle, this._velocityTexture.height);
                }

                var colorModule = this._particleSystem._colorOverLifetimeModule;
                enable = colorModule && colorModule.enable;
                this._defines[COLOR_OVER_TIME_MODULE_ENABLE] = enable;

                if (enable) {
                  if (this._colorTexture) this._colorTexture.destroy();
                  this._colorTexture = packGradientRange(_sample_num, colorModule.color);

                  var _handle2 = pass.getHandle('color_over_time_tex0');

                  var _binding2 = Pass.getBindingFromHandle(_handle2);

                  pass.bindSampler(_binding2, this._colorTexture.getGFXSampler());
                  pass.bindTexture(_binding2, this._colorTexture.getGFXTexture());

                  var _modeHandle2 = pass.getHandle('u_color_mode');

                  pass.setUniform(_modeHandle2, this._colorTexture.height);
                }

                var roationModule = this._particleSystem._rotationOvertimeModule;
                enable = roationModule && roationModule.enable;
                this._defines[ROTATION_OVER_TIME_MODULE_ENABLE$1] = enable;

                if (enable) {
                  if (this._rotationTexture) this._rotationTexture.destroy();

                  if (roationModule.separateAxes) {
                    this._rotationTexture = packCurveRangeXYZ(_sample_num, roationModule.x, roationModule.y, roationModule.z);
                  } else {
                    this._rotationTexture = packCurveRangeZ(_sample_num, roationModule.z);
                  }

                  var _handle3 = pass.getHandle('rotation_over_time_tex0');

                  var _binding3 = Pass.getBindingFromHandle(_handle3);

                  pass.bindSampler(_binding3, this._rotationTexture.getGFXSampler());
                  pass.bindTexture(_binding3, this._rotationTexture.getGFXTexture());

                  var _modeHandle3 = pass.getHandle('u_rotation_mode');

                  pass.setUniform(_modeHandle3, this._rotationTexture.height);
                }

                var sizeModule = this._particleSystem._sizeOvertimeModule;
                enable = sizeModule && sizeModule.enable;
                this._defines[SIZE_OVER_TIME_MODULE_ENABLE] = enable;

                if (enable) {
                  if (this._sizeTexture) this._sizeTexture.destroy();

                  if (sizeModule.separateAxes) {
                    this._sizeTexture = packCurveRangeXYZ(_sample_num, sizeModule.x, sizeModule.y, sizeModule.z, true);
                  } else {
                    this._sizeTexture = packCurveRangeN(_sample_num, sizeModule.size, true);
                  }

                  var _handle4 = pass.getHandle('size_over_time_tex0');

                  var _binding4 = Pass.getBindingFromHandle(_handle4);

                  pass.bindSampler(_binding4, this._sizeTexture.getGFXSampler());
                  pass.bindTexture(_binding4, this._sizeTexture.getGFXTexture());

                  var _modeHandle4 = pass.getHandle('u_size_mode');

                  pass.setUniform(_modeHandle4, this._sizeTexture.height);
                }

                var textureModule = this._particleSystem._textureAnimationModule;
                enable = textureModule && textureModule.enable;
                this._defines[TEXTURE_ANIMATION_MODULE_ENABLE] = enable;

                if (enable) {
                  if (this._animTexture) this._animTexture.destroy();
                  this._animTexture = packCurveRangeXY(_sample_num, textureModule.startFrame, textureModule.frameOverTime);

                  var _handle5 = pass.getHandle('texture_animation_tex0');

                  var _binding5 = Pass.getBindingFromHandle(_handle5);

                  pass.bindSampler(_binding5, this._animTexture.getGFXSampler());
                  pass.bindTexture(_binding5, this._animTexture.getGFXTexture());
                  var infoHandle = pass.getHandle('u_anim_info');
                  _tempVec4.x = this._animTexture.height;
                  _tempVec4.y = textureModule.numTilesX * textureModule.numTilesY;
                  _tempVec4.z = textureModule.cycleCount;
                  pass.setUniform(infoHandle, _tempVec4);
                }

                this._defines[USE_VK_SHADER] = legacyCC.game._gfxDevice.gfxAPI === API.VULKAN;
              };

              _proto.getParticleCount = function getParticleCount() {
                return this._particleNum;
              };

              _proto.onMaterialModified = function onMaterialModified(index, material) {
                if (!this._inited) {
                  return;
                }

                this.updateMaterialParams();
              };

              _proto.onRebuildPSO = function onRebuildPSO(index, material) {
                if (this._model && index === 0) {
                  this._model.setSubModelMaterial(0, material);
                }
              };

              _proto._setVertexAttrib = function _setVertexAttrib() {
                switch (this._renderInfo.renderMode) {
                  case RenderMode$1.StrecthedBillboard:
                    this._vertAttrs = _gpu_vert_attr.slice();
                    break;

                  case RenderMode$1.Mesh:
                    this._vertAttrs = _gpu_vert_attr_mesh.slice();
                    break;

                  default:
                    this._vertAttrs = _gpu_vert_attr.slice();
                }
              };

              _proto.updateMaterialParams = function updateMaterialParams() {
                if (!this._particleSystem) {
                  return;
                }

                var ps = this._particleSystem;
                var shareMaterial = ps.sharedMaterial;

                if (shareMaterial !== null) {
                  var effectName = shareMaterial._effectAsset._name;
                  this._renderInfo.mainTexture = shareMaterial.getProperty('mainTexture', 0);

                  if (effectName.indexOf('particle-gpu') === -1) {
                    this._renderInfo.mainTexture = shareMaterial.getProperty('mainTexture', 0);

                    this._particleSystem.setMaterial(null, 0);
                  }
                }

                if (ps.sharedMaterial == null && this._defaultMat == null) {
                  _matInsInfo$2.parent = builtinResMgr.get('default-particle-gpu-material');
                  _matInsInfo$2.owner = ps;
                  _matInsInfo$2.subModelIdx = 0;
                  this._defaultMat = new MaterialInstance(_matInsInfo$2);
                  _matInsInfo$2.parent = null;
                  _matInsInfo$2.owner = null;
                  _matInsInfo$2.subModelIdx = 0;

                  if (this._renderInfo.mainTexture !== null) {
                    this._defaultMat.setProperty('mainTexture', this._renderInfo.mainTexture);
                  }
                }

                var mat = ps.getMaterialInstance(0) || this._defaultMat;

                ps.node.getWorldMatrix(_tempWorldTrans$1);

                if (ps._simulationSpace === Space.World) {
                  this._defines[CC_USE_WORLD_SPACE$2] = true;
                } else {
                  this._defines[CC_USE_WORLD_SPACE$2] = false;
                }

                var renderMode = this._renderInfo.renderMode;

                if (renderMode === RenderMode$1.Billboard) {
                  this._defines[CC_RENDER_MODE$1] = RENDER_MODE_BILLBOARD$1;
                } else if (renderMode === RenderMode$1.StrecthedBillboard) {
                  this._defines[CC_RENDER_MODE$1] = RENDER_MODE_STRETCHED_BILLBOARD$1;
                  this._frameTile_velLenScale.z = this._renderInfo.velocityScale;
                  this._frameTile_velLenScale.w = this._renderInfo.lengthScale;
                } else if (renderMode === RenderMode$1.HorizontalBillboard) {
                  this._defines[CC_RENDER_MODE$1] = RENDER_MODE_HORIZONTAL_BILLBOARD$1;
                } else if (renderMode === RenderMode$1.VerticalBillboard) {
                  this._defines[CC_RENDER_MODE$1] = RENDER_MODE_VERTICAL_BILLBOARD$1;
                } else if (renderMode === RenderMode$1.Mesh) {
                  this._defines[CC_RENDER_MODE$1] = RENDER_MODE_MESH$1;
                } else {
                  console.warn("particle system renderMode " + renderMode + " not support.");
                }

                var textureModule = ps._textureAnimationModule;

                if (textureModule && textureModule.enable) {
                  Vec2.set(this._frameTile_velLenScale, textureModule.numTilesX, textureModule.numTilesY);
                  Vec4.copy(this._unifrom_velLenScale, this._frameTile_velLenScale);
                } else {
                  this._tmp_velLenScale.z = this._frameTile_velLenScale.z;
                  this._tmp_velLenScale.w = this._frameTile_velLenScale.w;
                  Vec4.copy(this._unifrom_velLenScale, this._tmp_velLenScale);
                }

                this.initShaderUniform(mat);
                mat.recompileShaders(this._defines);

                if (this._model) {
                  this._model.updateMaterial(mat);
                }
              };

              return ParticleSystemRendererGPU;
            }(ParticleSystemRendererBase);

            var _dec$16, _dec2$S, _dec3$G, _dec4$B, _dec5$y, _dec6$v, _dec7$u, _dec8$s, _dec9$o, _dec10$m, _dec11$i, _dec12$i, _dec13$i, _dec14$g, _dec15$g, _dec16$f, _dec17$d, _dec18$c, _dec19$c, _dec20$c, _dec21$b, _dec22$9, _dec23$8, _class$19, _class2$_, _descriptor$W, _descriptor2$O, _descriptor3$D, _descriptor4$y, _descriptor5$s, _descriptor6$m, _descriptor7$g, _class3$d, _temp$12;

            function isSupportGPUParticle() {
              var device = director.root.device;

              if (device.capabilities.maxVertexTextureUnits >= 8 && device.getFormatFeatures(Format.RGBA32F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)) {
                return true;
              }

              legacyCC.warn('Maybe the device has restrictions on vertex textures or does not support float textures.');
              return false;
            }

            var ParticleSystemRenderer = (_dec$16 = ccclass('cc.ParticleSystemRenderer'), _dec2$S = type$1(RenderMode$1), _dec3$G = displayOrder(), _dec4$B = tooltip(), _dec5$y = displayOrder(), _dec6$v = tooltip(), _dec7$u = displayOrder(), _dec8$s = tooltip(), _dec9$o = type$1(RenderMode$1), _dec10$m = type$1(Mesh), _dec11$i = displayOrder(), _dec12$i = tooltip(), _dec13$i = type$1(Material), _dec14$g = displayOrder(), _dec15$g = tooltip(), _dec16$f = type$1(Material), _dec17$d = displayOrder(), _dec18$c = tooltip(), _dec19$c = displayOrder(), _dec20$c = tooltip(), _dec21$b = type$1(AlignmentSpace), _dec22$9 = displayOrder(), _dec23$8 = tooltip(), _dec$16(_class$19 = (_class2$_ = (_temp$12 = _class3$d = function () {
              function ParticleSystemRenderer() {
                _initializerDefineProperty(this, "_renderMode", _descriptor$W, this);

                _initializerDefineProperty(this, "_velocityScale", _descriptor2$O, this);

                _initializerDefineProperty(this, "_lengthScale", _descriptor3$D, this);

                _initializerDefineProperty(this, "_mesh", _descriptor4$y, this);

                _initializerDefineProperty(this, "_mainTexture", _descriptor5$s, this);

                _initializerDefineProperty(this, "_useGPU", _descriptor6$m, this);

                _initializerDefineProperty(this, "_alignSpace", _descriptor7$g, this);

                this._particleSystem = null;
              }

              var _proto = ParticleSystemRenderer.prototype;

              _proto.create = function create(ps) {
                if (this._particleSystem === null) {
                  this._particleSystem = ps;
                } else if (this._particleSystem !== ps) {
                  errorID(6033);
                }
              };

              _proto.onInit = function onInit(ps) {
                this.create(ps);

                if (!this._particleSystem.processor) {
                  var useGPU = this._useGPU && isSupportGPUParticle();
                  this._particleSystem.processor = useGPU ? new ParticleSystemRendererGPU(this) : new ParticleSystemRendererCPU(this);

                  this._particleSystem.processor.updateAlignSpace(this.alignSpace);

                  this._particleSystem.processor.onInit(ps);
                } else {
                  errorID(6034);
                }
              };

              _proto._switchProcessor = function _switchProcessor() {
                if (!this._particleSystem) {
                  return;
                }

                if (this._particleSystem.processor) {
                  this._particleSystem.processor.detachFromScene();

                  this._particleSystem.processor.clear();

                  this._particleSystem.processor = null;
                }

                this._particleSystem.processor = this._useGPU ? new ParticleSystemRendererGPU(this) : new ParticleSystemRendererCPU(this);

                this._particleSystem.processor.updateAlignSpace(this.alignSpace);

                this._particleSystem.processor.onInit(this._particleSystem);

                this._particleSystem.processor.onEnable();

                this._particleSystem.bindModule();
              };

              _createClass(ParticleSystemRenderer, [{
                key: "renderMode",
                get: function get() {
                  return this._renderMode;
                },
                set: function set(val) {
                  if (this._renderMode === val) {
                    return;
                  }

                  this._renderMode = val;

                  if (this._particleSystem) {
                    this._particleSystem.processor.updateRenderMode();
                  }
                }
              }, {
                key: "velocityScale",
                get: function get() {
                  return this._velocityScale;
                },
                set: function set(val) {
                  this._velocityScale = val;

                  if (this._particleSystem) {
                    this._particleSystem.processor.updateMaterialParams();
                  }
                }
              }, {
                key: "lengthScale",
                get: function get() {
                  return this._lengthScale;
                },
                set: function set(val) {
                  this._lengthScale = val;

                  if (this._particleSystem) {
                    this._particleSystem.processor.updateMaterialParams();
                  }
                }
              }, {
                key: "mesh",
                get: function get() {
                  return this._mesh;
                },
                set: function set(val) {
                  this._mesh = val;

                  if (this._particleSystem) {
                    this._particleSystem.processor.setVertexAttributes();
                  }
                }
              }, {
                key: "particleMaterial",
                get: function get() {
                  if (!this._particleSystem) {
                    return null;
                  }

                  return this._particleSystem.getMaterial(0);
                },
                set: function set(val) {
                  if (this._particleSystem) {
                    this._particleSystem.setMaterial(val, 0);
                  }
                }
              }, {
                key: "trailMaterial",
                get: function get() {
                  if (!this._particleSystem) {
                    return null;
                  }

                  return this._particleSystem.getMaterial(1);
                },
                set: function set(val) {
                  if (this._particleSystem) {
                    this._particleSystem.setMaterial(val, 1);
                  }
                }
              }, {
                key: "mainTexture",
                get: function get() {
                  return this._mainTexture;
                },
                set: function set(val) {
                  this._mainTexture = val;
                }
              }, {
                key: "useGPU",
                get: function get() {
                  return this._useGPU;
                },
                set: function set(val) {
                  if (this._useGPU === val) {
                    return;
                  }

                  if (!isSupportGPUParticle()) {
                    this._useGPU = false;
                  } else {
                    this._useGPU = val;
                  }

                  this._switchProcessor();
                }
              }, {
                key: "alignSpace",
                get: function get() {
                  return this._alignSpace;
                },
                set: function set(val) {
                  this._alignSpace = val;

                  this._particleSystem.processor.updateAlignSpace(this._alignSpace);
                }
              }]);

              return ParticleSystemRenderer;
            }(), _class3$d.AlignmentSpace = AlignmentSpace, _temp$12), (_applyDecoratedDescriptor(_class2$_.prototype, "renderMode", [_dec2$S, _dec3$G, _dec4$B], Object.getOwnPropertyDescriptor(_class2$_.prototype, "renderMode"), _class2$_.prototype), _applyDecoratedDescriptor(_class2$_.prototype, "velocityScale", [_dec5$y, _dec6$v], Object.getOwnPropertyDescriptor(_class2$_.prototype, "velocityScale"), _class2$_.prototype), _applyDecoratedDescriptor(_class2$_.prototype, "lengthScale", [_dec7$u, _dec8$s], Object.getOwnPropertyDescriptor(_class2$_.prototype, "lengthScale"), _class2$_.prototype), _descriptor$W = _applyDecoratedDescriptor(_class2$_.prototype, "_renderMode", [_dec9$o, serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return RenderMode$1.Billboard;
              }
            }), _descriptor2$O = _applyDecoratedDescriptor(_class2$_.prototype, "_velocityScale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor3$D = _applyDecoratedDescriptor(_class2$_.prototype, "_lengthScale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor4$y = _applyDecoratedDescriptor(_class2$_.prototype, "_mesh", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$_.prototype, "mesh", [_dec10$m, _dec11$i, _dec12$i], Object.getOwnPropertyDescriptor(_class2$_.prototype, "mesh"), _class2$_.prototype), _applyDecoratedDescriptor(_class2$_.prototype, "particleMaterial", [_dec13$i, _dec14$g, disallowAnimation, _dec15$g], Object.getOwnPropertyDescriptor(_class2$_.prototype, "particleMaterial"), _class2$_.prototype), _applyDecoratedDescriptor(_class2$_.prototype, "trailMaterial", [_dec16$f, _dec17$d, disallowAnimation, _dec18$c], Object.getOwnPropertyDescriptor(_class2$_.prototype, "trailMaterial"), _class2$_.prototype), _descriptor5$s = _applyDecoratedDescriptor(_class2$_.prototype, "_mainTexture", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor6$m = _applyDecoratedDescriptor(_class2$_.prototype, "_useGPU", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$_.prototype, "useGPU", [_dec19$c, _dec20$c], Object.getOwnPropertyDescriptor(_class2$_.prototype, "useGPU"), _class2$_.prototype), _applyDecoratedDescriptor(_class2$_.prototype, "alignSpace", [_dec21$b, _dec22$9, _dec23$8], Object.getOwnPropertyDescriptor(_class2$_.prototype, "alignSpace"), _class2$_.prototype), _descriptor7$g = _applyDecoratedDescriptor(_class2$_.prototype, "_alignSpace", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return AlignmentSpace.View;
              }
            })), _class2$_)) || _class$19);

            var _dec$17, _dec2$T, _dec3$H, _dec4$C, _dec5$z, _dec6$w, _dec7$v, _dec8$t, _dec9$p, _dec10$n, _dec11$j, _dec12$j, _dec13$j, _dec14$h, _dec15$h, _dec16$g, _dec17$e, _dec18$d, _dec19$d, _dec20$d, _dec21$c, _dec22$a, _dec23$9, _dec24$8, _dec25$8, _dec26$7, _dec27$7, _dec28$6, _dec29$5, _dec30$4, _dec31$4, _dec32$4, _class$1a, _class2$$, _descriptor$X, _descriptor2$P, _descriptor3$E, _descriptor4$z, _descriptor5$t, _descriptor6$n, _descriptor7$h, _descriptor8$e, _descriptor9$c, _descriptor10$a, _descriptor11$8, _descriptor12$8, _descriptor13$8, _temp$13;
            var PRE_TRIANGLE_INDEX = 1;
            var NEXT_TRIANGLE_INDEX = 1 << 2;
            var DIRECTION_THRESHOLD = Math.cos(toRadian(100));
            var _temp_trailEle = {
              position: new Vec3(),
              velocity: new Vec3()
            };

            var _temp_quat = new Quat();

            var _temp_xform = new Mat4();

            var _temp_vec3 = new Vec3();

            var _temp_vec3_1 = new Vec3();

            var _temp_color = new Color$1();

            var TrailSegment = function () {
              function TrailSegment(maxTrailElementNum) {
                this.start = void 0;
                this.end = void 0;
                this.trailElements = void 0;
                this.start = -1;
                this.end = -1;
                this.trailElements = [];

                while (maxTrailElementNum--) {
                  this.trailElements.push({
                    position: new Vec3(),
                    lifetime: 0,
                    width: 0,
                    velocity: new Vec3(),
                    direction: 0,
                    color: new Color$1()
                  });
                }
              }

              var _proto = TrailSegment.prototype;

              _proto.getElement = function getElement(idx) {
                if (this.start === -1) {
                  return null;
                }

                if (idx < 0) {
                  idx = (idx + this.trailElements.length) % this.trailElements.length;
                }

                if (idx >= this.trailElements.length) {
                  idx %= this.trailElements.length;
                }

                return this.trailElements[idx];
              };

              _proto.addElement = function addElement() {
                if (this.trailElements.length === 0) {
                  return null;
                }

                if (this.start === -1) {
                  this.start = 0;
                  this.end = 1;
                  return this.trailElements[0];
                }

                if (this.start === this.end) {
                  this.trailElements.splice(this.end, 0, {
                    position: new Vec3(),
                    lifetime: 0,
                    width: 0,
                    velocity: new Vec3(),
                    direction: 0,
                    color: new Color$1()
                  });
                  this.start++;
                  this.start %= this.trailElements.length;
                }

                var newEleLoc = this.end++;
                this.end %= this.trailElements.length;
                return this.trailElements[newEleLoc];
              };

              _proto.iterateElement = function iterateElement(target, f, p, dt) {
                var end = this.start >= this.end ? this.end + this.trailElements.length : this.end;

                for (var i = this.start; i < end; i++) {
                  if (f(target, this.trailElements[i % this.trailElements.length], p, dt)) {
                    this.start++;
                    this.start %= this.trailElements.length;
                  }
                }

                if (this.start === end) {
                  this.start = -1;
                  this.end = -1;
                }
              };

              _proto.count = function count() {
                if (this.start < this.end) {
                  return this.end - this.start;
                } else {
                  return this.trailElements.length + this.end - this.start;
                }
              };

              _proto.clear = function clear() {
                this.start = -1;
                this.end = -1;
              };

              return TrailSegment;
            }();

            var TrailModule = (_dec$17 = ccclass('cc.TrailModule'), _dec2$T = displayOrder(), _dec3$H = type$1(TrailMode), _dec4$C = displayOrder(), _dec5$z = tooltip(), _dec6$w = type$1(CurveRange), _dec7$v = range(), _dec8$t = displayOrder(), _dec9$p = tooltip(), _dec10$n = displayOrder(), _dec11$j = tooltip(), _dec12$j = type$1(Space), _dec13$j = displayOrder(), _dec14$h = tooltip(), _dec15$h = type$1(TextureMode), _dec16$g = displayOrder(), _dec17$e = tooltip(), _dec18$d = displayOrder(), _dec19$d = tooltip(), _dec20$d = type$1(CurveRange), _dec21$c = range(), _dec22$a = displayOrder(), _dec23$9 = tooltip(), _dec24$8 = displayOrder(), _dec25$8 = tooltip(), _dec26$7 = type$1(GradientRange), _dec27$7 = displayOrder(), _dec28$6 = tooltip(), _dec29$5 = type$1(GradientRange), _dec30$4 = displayOrder(), _dec31$4 = tooltip(), _dec32$4 = type$1(Space), _dec$17(_class$1a = (_class2$$ = (_temp$13 = function () {
              function TrailModule() {
                _initializerDefineProperty(this, "_enable", _descriptor$X, this);

                _initializerDefineProperty(this, "mode", _descriptor2$P, this);

                _initializerDefineProperty(this, "lifeTime", _descriptor3$E, this);

                _initializerDefineProperty(this, "_minParticleDistance", _descriptor4$z, this);

                _initializerDefineProperty(this, "existWithParticles", _descriptor5$t, this);

                _initializerDefineProperty(this, "textureMode", _descriptor6$n, this);

                _initializerDefineProperty(this, "widthFromParticle", _descriptor7$h, this);

                _initializerDefineProperty(this, "widthRatio", _descriptor8$e, this);

                _initializerDefineProperty(this, "colorFromParticle", _descriptor9$c, this);

                _initializerDefineProperty(this, "colorOverTrail", _descriptor10$a, this);

                _initializerDefineProperty(this, "colorOvertime", _descriptor11$8, this);

                _initializerDefineProperty(this, "_space", _descriptor12$8, this);

                _initializerDefineProperty(this, "_particleSystem", _descriptor13$8, this);

                this._minSquaredDistance = 0;
                this._vertSize = void 0;
                this._trailNum = 0;
                this._trailLifetime = 0;
                this.vbOffset = 0;
                this.ibOffset = 0;
                this._trailSegments = null;
                this._particleTrail = void 0;
                this._trailModel = null;
                this._iaInfo = void 0;
                this._iaInfoBuffer = null;
                this._subMeshData = null;
                this._vertAttrs = void 0;
                this._vbF32 = null;
                this._vbUint32 = null;
                this._iBuffer = null;
                this._needTransform = false;
                this._material = null;
                this._iaInfo = new IndirectBuffer([new DrawInfo()]);
                this._vertAttrs = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGBA32F), new Attribute(AttributeName.ATTR_TEX_COORD1, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true)];
                this._vertSize = 0;

                for (var _iterator = _createForOfIteratorHelperLoose(this._vertAttrs), _step; !(_step = _iterator()).done;) {
                  var a = _step.value;
                  this._vertSize += FormatInfos[a.format].size;
                }

                this._particleTrail = new Map();
              }

              var _proto2 = TrailModule.prototype;

              _proto2.onInit = function onInit(ps) {
                this._particleSystem = ps;
                this.minParticleDistance = this._minParticleDistance;
                var burstCount = 0;
                var psTime = ps.startLifetime.getMax();
                var psRate = ps.rateOverTime.getMax();
                var duration = ps.duration;

                for (var i = 0, len = ps.bursts.length; i < len; i++) {
                  var b = ps.bursts[i];
                  burstCount += b.getMaxCount(ps) * Math.ceil(psTime / duration);
                }

                this._trailNum = Math.ceil(psTime * this.lifeTime.getMax() * 60 * (psRate * duration + burstCount));
                this._trailSegments = new Pool(function () {
                  return new TrailSegment(10);
                }, Math.ceil(psRate * duration), function (obj) {
                  return obj.trailElements.length = 0;
                });

                if (this._enable) {
                  this.enable = this._enable;
                }
              };

              _proto2.onEnable = function onEnable() {
                this._attachToScene();
              };

              _proto2.onDisable = function onDisable() {
                this._particleTrail.clear();

                this._detachFromScene();
              };

              _proto2._attachToScene = function _attachToScene() {
                if (this._trailModel) {
                  if (this._trailModel.scene) {
                    this._detachFromScene();
                  }

                  this._particleSystem._getRenderScene().addModel(this._trailModel);
                }
              };

              _proto2._detachFromScene = function _detachFromScene() {
                if (this._trailModel && this._trailModel.scene) {
                  this._trailModel.scene.removeModel(this._trailModel);
                }
              };

              _proto2.destroy = function destroy() {
                this.destroySubMeshData();

                if (this._trailModel) {
                  director.root.destroyModel(this._trailModel);
                  this._trailModel = null;
                }

                if (this._trailSegments) {
                  this._trailSegments.destroy();

                  this._trailSegments = null;
                }
              };

              _proto2.play = function play() {
                if (this._trailModel && this._enable) {
                  this._trailModel.enabled = true;
                }
              };

              _proto2.clear = function clear() {
                if (this.enable) {
                  var trailIter = this._particleTrail.values();

                  var trail = trailIter.next();

                  while (!trail.done) {
                    trail.value.clear();
                    trail = trailIter.next();
                  }

                  this._particleTrail.clear();

                  this.updateRenderData();
                  if (this._trailModel) this._trailModel.enabled = false;
                }
              };

              _proto2.updateMaterial = function updateMaterial() {
                if (this._particleSystem) {
                  this._material = this._particleSystem.getMaterialInstance(1) || this._particleSystem.processor._defaultTrailMat;

                  if (this._trailModel) {
                    this._trailModel.setSubModelMaterial(0, this._material);
                  }
                }
              };

              _proto2.update = function update() {
                this._trailLifetime = this.lifeTime.evaluate(this._particleSystem._time, 1);

                if (this.space === Space.World && this._particleSystem._simulationSpace === Space.Local) {
                  this._needTransform = true;

                  this._particleSystem.node.getWorldMatrix(_temp_xform);

                  this._particleSystem.node.getWorldRotation(_temp_quat);
                } else {
                  this._needTransform = false;
                }
              };

              _proto2.animate = function animate(p, scaledDt) {
                if (!this._trailSegments) {
                  return;
                }

                if (p.loopCount > p.lastLoop) {
                  if (p.trailDelay > 1) {
                    p.lastLoop = p.loopCount;
                    p.trailDelay = 0;
                  } else {
                    p.trailDelay++;
                  }

                  return;
                }

                var trail = this._particleTrail.get(p);

                if (!trail) {
                  trail = this._trailSegments.alloc();

                  this._particleTrail.set(p, trail);

                  return;
                }

                var lastSeg = trail.getElement(trail.end - 1);

                if (this._needTransform) {
                  Vec3.transformMat4(_temp_vec3, p.position, _temp_xform);
                } else {
                  Vec3.copy(_temp_vec3, p.position);
                }

                if (lastSeg) {
                  trail.iterateElement(this, this._updateTrailElement, p, scaledDt);

                  if (Vec3.squaredDistance(lastSeg.position, _temp_vec3) < this._minSquaredDistance) {
                    return;
                  }
                }

                lastSeg = trail.addElement();

                if (!lastSeg) {
                  return;
                }

                Vec3.copy(lastSeg.position, _temp_vec3);
                lastSeg.lifetime = 0;

                if (this.widthFromParticle) {
                  lastSeg.width = p.size.x * this.widthRatio.evaluate(0, 1);
                } else {
                  lastSeg.width = this.widthRatio.evaluate(0, 1);
                }

                var trailNum = trail.count();

                if (trailNum === 2) {
                  var lastSecondTrail = trail.getElement(trail.end - 2);
                  Vec3.subtract(lastSecondTrail.velocity, lastSeg.position, lastSecondTrail.position);
                } else if (trailNum > 2) {
                  var _lastSecondTrail = trail.getElement(trail.end - 2);

                  var lastThirdTrail = trail.getElement(trail.end - 3);
                  Vec3.subtract(_temp_vec3, lastThirdTrail.position, _lastSecondTrail.position);
                  Vec3.subtract(_temp_vec3_1, lastSeg.position, _lastSecondTrail.position);
                  Vec3.subtract(_lastSecondTrail.velocity, _temp_vec3_1, _temp_vec3);

                  if (Vec3.equals(Vec3.ZERO, _lastSecondTrail.velocity)) {
                    Vec3.copy(_lastSecondTrail.velocity, _temp_vec3);
                  }

                  Vec3.normalize(_lastSecondTrail.velocity, _lastSecondTrail.velocity);

                  this._checkDirectionReverse(_lastSecondTrail, lastThirdTrail);
                }

                if (this.colorFromParticle) {
                  lastSeg.color.set(p.color);
                } else {
                  lastSeg.color.set(this.colorOvertime.evaluate(0, 1));
                }
              };

              _proto2.removeParticle = function removeParticle(p) {
                var trail = this._particleTrail.get(p);

                if (trail && this._trailSegments) {
                  trail.clear();

                  this._trailSegments.free(trail);

                  this._particleTrail["delete"](p);
                }
              };

              _proto2.updateRenderData = function updateRenderData() {
                this.vbOffset = 0;
                this.ibOffset = 0;

                for (var _iterator2 = _createForOfIteratorHelperLoose(this._particleTrail.keys()), _step2; !(_step2 = _iterator2()).done;) {
                  var p = _step2.value;

                  var trailSeg = this._particleTrail.get(p);

                  if (trailSeg.start === -1) {
                    continue;
                  }

                  var indexOffset = this.vbOffset * 4 / this._vertSize;
                  var end = trailSeg.start >= trailSeg.end ? trailSeg.end + trailSeg.trailElements.length : trailSeg.end;
                  var trailNum = end - trailSeg.start;
                  var textCoordSeg = 1 / trailNum;
                  var startSegEle = trailSeg.trailElements[trailSeg.start];

                  this._fillVertexBuffer(startSegEle, this.colorOverTrail.evaluate(1, 1), indexOffset, 1, 0, NEXT_TRIANGLE_INDEX);

                  for (var i = trailSeg.start + 1; i < end; i++) {
                    var segEle = trailSeg.trailElements[i % trailSeg.trailElements.length];
                    var j = i - trailSeg.start;

                    this._fillVertexBuffer(segEle, this.colorOverTrail.evaluate(1 - j / trailNum, 1), indexOffset, 1 - j * textCoordSeg, j, PRE_TRIANGLE_INDEX | NEXT_TRIANGLE_INDEX);
                  }

                  if (this._needTransform) {
                    Vec3.transformMat4(_temp_trailEle.position, p.position, _temp_xform);
                  } else {
                    Vec3.copy(_temp_trailEle.position, p.position);
                  }

                  var trailModel = this._trailModel;

                  if (trailModel) {
                    trailModel.node.invalidateChildren(TransformBit.POSITION);
                  }

                  if (trailNum === 1 || trailNum === 2) {
                    var lastSecondTrail = trailSeg.getElement(trailSeg.end - 1);
                    Vec3.subtract(lastSecondTrail.velocity, _temp_trailEle.position, lastSecondTrail.position);
                    this._vbF32[this.vbOffset - this._vertSize / 4 - 4] = lastSecondTrail.velocity.x;
                    this._vbF32[this.vbOffset - this._vertSize / 4 - 3] = lastSecondTrail.velocity.y;
                    this._vbF32[this.vbOffset - this._vertSize / 4 - 2] = lastSecondTrail.velocity.z;
                    this._vbF32[this.vbOffset - 4] = lastSecondTrail.velocity.x;
                    this._vbF32[this.vbOffset - 3] = lastSecondTrail.velocity.y;
                    this._vbF32[this.vbOffset - 2] = lastSecondTrail.velocity.z;
                    Vec3.subtract(_temp_trailEle.velocity, _temp_trailEle.position, lastSecondTrail.position);

                    this._checkDirectionReverse(_temp_trailEle, lastSecondTrail);
                  } else if (trailNum > 2) {
                    var _lastSecondTrail2 = trailSeg.getElement(trailSeg.end - 1);

                    var lastThirdTrail = trailSeg.getElement(trailSeg.end - 2);
                    Vec3.subtract(_temp_vec3, lastThirdTrail.position, _lastSecondTrail2.position);
                    Vec3.subtract(_temp_vec3_1, _temp_trailEle.position, _lastSecondTrail2.position);
                    Vec3.normalize(_temp_vec3, _temp_vec3);
                    Vec3.normalize(_temp_vec3_1, _temp_vec3_1);
                    Vec3.subtract(_lastSecondTrail2.velocity, _temp_vec3_1, _temp_vec3);
                    Vec3.normalize(_lastSecondTrail2.velocity, _lastSecondTrail2.velocity);

                    this._checkDirectionReverse(_lastSecondTrail2, lastThirdTrail);

                    this.vbOffset -= this._vertSize / 4 * 2;
                    this.ibOffset -= 6;

                    this._fillVertexBuffer(_lastSecondTrail2, this.colorOverTrail.evaluate(textCoordSeg, 1), indexOffset, textCoordSeg, trailNum - 1, PRE_TRIANGLE_INDEX | NEXT_TRIANGLE_INDEX);

                    Vec3.subtract(_temp_trailEle.velocity, _temp_trailEle.position, _lastSecondTrail2.position);
                    Vec3.normalize(_temp_trailEle.velocity, _temp_trailEle.velocity);

                    this._checkDirectionReverse(_temp_trailEle, _lastSecondTrail2);
                  }

                  if (this.widthFromParticle) {
                    _temp_trailEle.width = p.size.x * this.widthRatio.evaluate(0, 1);
                  } else {
                    _temp_trailEle.width = this.widthRatio.evaluate(0, 1);
                  }

                  _temp_trailEle.color = p.color;

                  if (Vec3.equals(_temp_trailEle.velocity, Vec3.ZERO)) {
                    this.ibOffset -= 3;
                  } else {
                    this._fillVertexBuffer(_temp_trailEle, this.colorOverTrail.evaluate(0, 1), indexOffset, 0, trailNum, PRE_TRIANGLE_INDEX);
                  }
                }

                this._trailModel.enabled = this.ibOffset > 0;
              };

              _proto2.updateIA = function updateIA(count) {
                var subModels = this._trailModel && this._trailModel.subModels;

                if (subModels && subModels.length > 0) {
                  var subModel = subModels[0];
                  subModel.inputAssembler.vertexBuffers[0].update(this._vbF32);
                  subModel.inputAssembler.indexBuffer.update(this._iBuffer);
                  this._iaInfo.drawInfos[0].firstIndex = 0;
                  this._iaInfo.drawInfos[0].indexCount = count;

                  this._iaInfoBuffer.update(this._iaInfo);
                }
              };

              _proto2.beforeRender = function beforeRender() {
                this.updateIA(this.ibOffset);
              };

              _proto2._createModel = function _createModel() {
                if (this._trailModel) {
                  return;
                }

                this._trailModel = legacyCC.director.root.createModel(Model);
              };

              _proto2.rebuild = function rebuild() {
                var device = director.root.device;
                var vertexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, this._vertSize * (this._trailNum + 1) * 2, this._vertSize));
                var vBuffer = new ArrayBuffer(this._vertSize * (this._trailNum + 1) * 2);
                this._vbF32 = new Float32Array(vBuffer);
                this._vbUint32 = new Uint32Array(vBuffer);
                vertexBuffer.update(vBuffer);
                var indexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, Math.max(1, this._trailNum) * 6 * Uint16Array.BYTES_PER_ELEMENT, Uint16Array.BYTES_PER_ELEMENT));
                this._iBuffer = new Uint16Array(Math.max(1, this._trailNum) * 6);
                indexBuffer.update(this._iBuffer);
                this._iaInfoBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDIRECT, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, DRAW_INFO_SIZE, DRAW_INFO_SIZE));
                this._iaInfo.drawInfos[0].vertexCount = (this._trailNum + 1) * 2;
                this._iaInfo.drawInfos[0].indexCount = this._trailNum * 6;

                this._iaInfoBuffer.update(this._iaInfo);

                this._subMeshData = new RenderingSubMesh([vertexBuffer], this._vertAttrs, PrimitiveMode.TRIANGLE_LIST, indexBuffer, this._iaInfoBuffer);
                var trailModel = this._trailModel;

                if (trailModel) {
                  trailModel.node = trailModel.transform = this._particleSystem.node;
                  trailModel.visFlags = this._particleSystem.visibility;
                  trailModel.initSubModel(0, this._subMeshData, this._material);
                  trailModel.enabled = true;
                }
              };

              _proto2._updateTrailElement = function _updateTrailElement(module, trailEle, p, dt) {
                trailEle.lifetime += dt;

                if (module.colorFromParticle) {
                  trailEle.color.set(p.color);
                  trailEle.color.multiply(module.colorOvertime.evaluate(1.0 - p.remainingLifetime / p.startLifetime, 1));
                } else {
                  trailEle.color.set(module.colorOvertime.evaluate(1.0 - p.remainingLifetime / p.startLifetime, 1));
                }

                if (module.widthFromParticle) {
                  trailEle.width = p.size.x * module.widthRatio.evaluate(trailEle.lifetime / module._trailLifetime, 1);
                } else {
                  trailEle.width = module.widthRatio.evaluate(trailEle.lifetime / module._trailLifetime, 1);
                }

                return trailEle.lifetime > module._trailLifetime;
              };

              _proto2._fillVertexBuffer = function _fillVertexBuffer(trailSeg, colorModifer, indexOffset, xTexCoord, trailEleIdx, indexSet) {
                this._vbF32[this.vbOffset++] = trailSeg.position.x;
                this._vbF32[this.vbOffset++] = trailSeg.position.y;
                this._vbF32[this.vbOffset++] = trailSeg.position.z;
                this._vbF32[this.vbOffset++] = trailSeg.direction;
                this._vbF32[this.vbOffset++] = trailSeg.width;
                this._vbF32[this.vbOffset++] = xTexCoord;
                this._vbF32[this.vbOffset++] = 0;
                this._vbF32[this.vbOffset++] = trailSeg.velocity.x;
                this._vbF32[this.vbOffset++] = trailSeg.velocity.y;
                this._vbF32[this.vbOffset++] = trailSeg.velocity.z;

                _temp_color.set(trailSeg.color);

                _temp_color.multiply(colorModifer);

                this._vbUint32[this.vbOffset++] = _temp_color._val;
                this._vbF32[this.vbOffset++] = trailSeg.position.x;
                this._vbF32[this.vbOffset++] = trailSeg.position.y;
                this._vbF32[this.vbOffset++] = trailSeg.position.z;
                this._vbF32[this.vbOffset++] = 1 - trailSeg.direction;
                this._vbF32[this.vbOffset++] = trailSeg.width;
                this._vbF32[this.vbOffset++] = xTexCoord;
                this._vbF32[this.vbOffset++] = 1;
                this._vbF32[this.vbOffset++] = trailSeg.velocity.x;
                this._vbF32[this.vbOffset++] = trailSeg.velocity.y;
                this._vbF32[this.vbOffset++] = trailSeg.velocity.z;
                this._vbUint32[this.vbOffset++] = _temp_color._val;

                if (indexSet & PRE_TRIANGLE_INDEX) {
                  this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx;
                  this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx - 1;
                  this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx + 1;
                }

                if (indexSet & NEXT_TRIANGLE_INDEX) {
                  this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx;
                  this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx + 1;
                  this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx + 2;
                }
              };

              _proto2._checkDirectionReverse = function _checkDirectionReverse(currElement, prevElement) {
                if (Vec3.dot(currElement.velocity, prevElement.velocity) < DIRECTION_THRESHOLD) {
                  currElement.direction = 1 - prevElement.direction;
                } else {
                  currElement.direction = prevElement.direction;
                }
              };

              _proto2.destroySubMeshData = function destroySubMeshData() {
                if (this._subMeshData) {
                  this._subMeshData.destroy();

                  this._subMeshData = null;
                }
              };

              _createClass(TrailModule, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(val) {
                  if (val === this._enable && this._trailModel) {
                    return;
                  }

                  if (val && !this._enable) {
                    this._enable = val;
                    if (this._particleSystem.processor) this._particleSystem.processor.updateTrailMaterial();
                  }

                  if (val && !this._trailModel) {
                    this._createModel();

                    this.rebuild();
                  }

                  this._enable = val;

                  if (this._trailModel) {
                    this._trailModel.enabled = val;
                  }

                  if (val) this.onEnable();else this.onDisable();
                }
              }, {
                key: "minParticleDistance",
                get: function get() {
                  return this._minParticleDistance;
                },
                set: function set(val) {
                  this._minParticleDistance = val;
                  this._minSquaredDistance = val * val;
                }
              }, {
                key: "space",
                get: function get() {
                  return this._space;
                },
                set: function set(val) {
                  this._space = val;
                  var ps = this._particleSystem;

                  if (ps && ps.processor) {
                    ps.processor.updateTrailMaterial();
                  }
                }
              }]);

              return TrailModule;
            }(), _temp$13), (_applyDecoratedDescriptor(_class2$$.prototype, "enable", [_dec2$T], Object.getOwnPropertyDescriptor(_class2$$.prototype, "enable"), _class2$$.prototype), _descriptor$X = _applyDecoratedDescriptor(_class2$$.prototype, "_enable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$P = _applyDecoratedDescriptor(_class2$$.prototype, "mode", [_dec3$H, serializable, _dec4$C, _dec5$z], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return TrailMode.Particles;
              }
            }), _descriptor3$E = _applyDecoratedDescriptor(_class2$$.prototype, "lifeTime", [_dec6$w, serializable, _dec7$v, _dec8$t, _dec9$p], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor4$z = _applyDecoratedDescriptor(_class2$$.prototype, "_minParticleDistance", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.1;
              }
            }), _applyDecoratedDescriptor(_class2$$.prototype, "minParticleDistance", [_dec10$n, _dec11$j], Object.getOwnPropertyDescriptor(_class2$$.prototype, "minParticleDistance"), _class2$$.prototype), _applyDecoratedDescriptor(_class2$$.prototype, "space", [_dec12$j, _dec13$j, _dec14$h], Object.getOwnPropertyDescriptor(_class2$$.prototype, "space"), _class2$$.prototype), _descriptor5$t = _applyDecoratedDescriptor(_class2$$.prototype, "existWithParticles", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor6$n = _applyDecoratedDescriptor(_class2$$.prototype, "textureMode", [_dec15$h, serializable, _dec16$g, _dec17$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return TextureMode.Stretch;
              }
            }), _descriptor7$h = _applyDecoratedDescriptor(_class2$$.prototype, "widthFromParticle", [serializable, _dec18$d, _dec19$d], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor8$e = _applyDecoratedDescriptor(_class2$$.prototype, "widthRatio", [_dec20$d, serializable, _dec21$c, _dec22$a, _dec23$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor9$c = _applyDecoratedDescriptor(_class2$$.prototype, "colorFromParticle", [serializable, _dec24$8, _dec25$8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor10$a = _applyDecoratedDescriptor(_class2$$.prototype, "colorOverTrail", [_dec26$7, serializable, _dec27$7, _dec28$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new GradientRange();
              }
            }), _descriptor11$8 = _applyDecoratedDescriptor(_class2$$.prototype, "colorOvertime", [_dec29$5, serializable, _dec30$4, _dec31$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new GradientRange();
              }
            }), _descriptor12$8 = _applyDecoratedDescriptor(_class2$$.prototype, "_space", [_dec32$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Space.World;
              }
            }), _descriptor13$8 = _applyDecoratedDescriptor(_class2$$.prototype, "_particleSystem", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$$)) || _class$1a);

            var _node_mat = new Mat4();

            var _node_rol = new Quat();

            var _node_scale = new Vec3();

            var _anim_module$1 = ['_colorOverLifetimeModule', '_sizeOvertimeModule', '_velocityOvertimeModule', '_forceOvertimeModule', '_limitVelocityOvertimeModule', '_rotationOvertimeModule', '_textureAnimationModule'];
            var ParticleCuller = function () {
              function ParticleCuller(ps) {
                this._particleSystem = void 0;
                this._processor = void 0;
                this._node = void 0;
                this._particlesAll = void 0;
                this._updateList = new Map();
                this._animateList = new Map();
                this._runAnimateList = new Array();
                this._localMat = new Mat4();
                this._gravity = new Vec4();
                this.minPos = new Vec3();
                this.maxPos = new Vec3();
                this._nodePos = new Vec3();
                this._nodeSize = new Vec3();
                this._particleSystem = ps;
                this._processor = this._particleSystem.processor;
                this._node = ps.node;
                this._particlesAll = [];

                this._initModuleList();
              }

              var _proto = ParticleCuller.prototype;

              _proto._updateBoundingNode = function _updateBoundingNode() {
                this._nodeSize.set(this.maxPos.x - this.minPos.x, this.maxPos.y - this.minPos.y, this.maxPos.z - this.minPos.z);

                this._nodePos.set(this.minPos.x + this._nodeSize.x * 0.5, this.minPos.y + this._nodeSize.y * 0.5, this.minPos.z + this._nodeSize.z * 0.5);
              };

              _proto.setBoundingBoxSize = function setBoundingBoxSize(halfExt) {
                this.maxPos.x = this._nodePos.x + halfExt.x;
                this.maxPos.y = this._nodePos.y + halfExt.y;
                this.maxPos.z = this._nodePos.z + halfExt.z;
                this.minPos.x = this._nodePos.x - halfExt.x;
                this.minPos.y = this._nodePos.y - halfExt.y;
                this.minPos.z = this._nodePos.z - halfExt.z;

                this._updateBoundingNode();
              };

              _proto.setBoundingBoxCenter = function setBoundingBoxCenter(px, py, pz) {
                this.maxPos.x = px + this._nodeSize.x * 0.5;
                this.maxPos.y = py + this._nodeSize.y * 0.5;
                this.maxPos.z = pz + this._nodeSize.z * 0.5;
                this.minPos.x = px - this._nodeSize.x * 0.5;
                this.minPos.y = py - this._nodeSize.y * 0.5;
                this.minPos.z = pz - this._nodeSize.z * 0.5;

                this._updateBoundingNode();
              };

              _proto._initModuleList = function _initModuleList() {
                var _this = this;

                _anim_module$1.forEach(function (val) {
                  var pm = _this._particleSystem[val];

                  if (pm && pm.enable) {
                    if (pm.needUpdate) {
                      _this._updateList[pm.name] = pm;
                    }

                    if (pm.needAnimate) {
                      _this._animateList[pm.name] = pm;
                    }
                  }
                });

                this._runAnimateList.length = 0;

                for (var i = 0, len = PARTICLE_MODULE_ORDER.length; i < len; i++) {
                  var p = this._animateList[PARTICLE_MODULE_ORDER[i]];

                  if (p) {
                    this._runAnimateList.push(p);
                  }
                }
              };

              _proto._emit = function _emit(count, dt, particleLst) {
                var ps = this._particleSystem;
                var node = this._node;
                var loopDelta = ps.time % ps.duration / ps.duration;
                node.invalidateChildren(TransformBit.POSITION);

                if (ps.simulationSpace === Space.World) {
                  node.getWorldMatrix(_node_mat);
                  node.getWorldRotation(_node_rol);
                }

                for (var i = 0; i < count; ++i) {
                  var particle = new Particle(ps);
                  particle.particleSystem = ps;
                  particle.reset();
                  var rand = pseudoRandom(randomRangeInt(0, INT_MAX));

                  if (ps._shapeModule && ps._shapeModule.enable) {
                    ps._shapeModule.emit(particle);
                  } else {
                    Vec3.set(particle.position, 0, 0, 0);
                    Vec3.copy(particle.velocity, particleEmitZAxis);
                  }

                  if (ps._textureAnimationModule && ps._textureAnimationModule.enable) {
                    ps._textureAnimationModule.init(particle);
                  }

                  var curveStartSpeed = ps.startSpeed.evaluate(loopDelta, rand);
                  Vec3.multiplyScalar(particle.velocity, particle.velocity, curveStartSpeed);

                  if (ps.simulationSpace === Space.World) {
                    Vec3.transformMat4(particle.position, particle.position, _node_mat);
                    Vec3.transformQuat(particle.velocity, particle.velocity, _node_rol);
                  }

                  Vec3.copy(particle.ultimateVelocity, particle.velocity);
                  Vec3.set(particle.rotation, 0, 0, 0);

                  if (ps.startSize3D) {
                    Vec3.set(particle.startSize, ps.startSizeX.evaluate(loopDelta, rand), ps.startSizeY.evaluate(loopDelta, rand), ps.startSizeZ.evaluate(loopDelta, rand));
                  } else {
                    Vec3.set(particle.startSize, ps.startSizeX.evaluate(loopDelta, rand), 1, 1);
                    particle.startSize.y = particle.startSize.x;
                  }

                  Vec3.copy(particle.size, particle.startSize);
                  particle.startLifetime = ps.startLifetime.evaluate(loopDelta, rand) + dt;
                  particle.remainingLifetime = particle.startLifetime;
                  particleLst.push(particle);
                }
              };

              _proto._updateParticles = function _updateParticles(dt, particleLst) {
                var _this2 = this;

                var ps = this._particleSystem;
                ps.node.getWorldMatrix(_node_mat);

                switch (ps.scaleSpace) {
                  case Space.Local:
                    ps.node.getScale(_node_scale);
                    break;

                  case Space.World:
                    ps.node.getWorldScale(_node_scale);
                    break;
                }

                this._updateList.forEach(function (value, key) {
                  value.update(ps.simulationSpace, _node_mat);
                });

                if (ps.simulationSpace === Space.Local) {
                  var r = ps.node.getRotation();
                  Mat4.fromQuat(this._localMat, r);

                  this._localMat.transpose();
                }

                var _loop = function _loop(i) {
                  var p = particleLst[i];
                  p.remainingLifetime -= dt;
                  Vec3.set(p.animatedVelocity, 0, 0, 0);

                  if (ps.simulationSpace === Space.Local) {
                    var gravityFactor = -ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, pseudoRandom(p.randomSeed)) * 9.8 * dt;
                    _this2._gravity.x = 0.0;
                    _this2._gravity.y = gravityFactor;
                    _this2._gravity.z = 0.0;
                    _this2._gravity.w = 1.0;
                    _this2._gravity = _this2._gravity.transformMat4(_this2._localMat);
                    p.velocity.x += _this2._gravity.x;
                    p.velocity.y += _this2._gravity.y;
                    p.velocity.z += _this2._gravity.z;
                  } else {
                    p.velocity.y -= ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, pseudoRandom(p.randomSeed)) * 9.8 * dt;
                  }

                  Vec3.copy(p.ultimateVelocity, p.velocity);

                  _this2._runAnimateList.forEach(function (value) {
                    value.animate(p, dt);
                  });

                  Vec3.scaleAndAdd(p.position, p.position, p.ultimateVelocity, dt);
                };

                for (var i = 0; i < particleLst.length; ++i) {
                  _loop(i);
                }
              };

              _proto._calculateBounding = function _calculateBounding(isInit) {
                var size = new Vec3();
                var position = new Vec3();
                var subPos = new Vec3();
                var addPos = new Vec3();
                var meshSize = new Vec3(1.0, 1.0, 1.0);

                if (this._processor.getInfo().renderMode === RenderMode$1.Mesh) {
                  var mesh = this._processor.getInfo().mesh;

                  if (mesh && mesh.struct.minPosition && mesh.struct.maxPosition) {
                    var meshAABB = new AABB();
                    AABB.fromPoints(meshAABB, mesh.struct.minPosition, mesh.struct.maxPosition);
                    var meshMax = Math.max(meshAABB.halfExtents.x, meshAABB.halfExtents.y, meshAABB.halfExtents.z);
                    meshSize.set(meshMax, meshMax, meshMax);
                  }
                }

                for (var i = 0; i < this._particlesAll.length; ++i) {
                  var p = this._particlesAll[i];
                  Vec3.multiply(size, _node_scale, p.size);
                  Vec3.multiply(size, size, meshSize);
                  position.set(p.position);

                  if (this._particleSystem.simulationSpace !== Space.World) {
                    Vec3.transformMat4(position, position, this._particleSystem.node._mat);
                  }

                  if (isInit && i === 0) {
                    Vec3.subtract(this.minPos, position, size);
                    Vec3.add(this.maxPos, position, size);
                  } else {
                    Vec3.subtract(subPos, position, size);
                    Vec3.add(addPos, position, size);
                    Vec3.min(this.minPos, this.minPos, subPos);
                    Vec3.max(this.maxPos, this.maxPos, addPos);
                  }
                }
              };

              _proto.calculatePositions = function calculatePositions() {
                this._emit(this._particleSystem.capacity, 0, this._particlesAll);

                var rand = pseudoRandom(randomRangeInt(0, INT_MAX));

                this._updateParticles(0, this._particlesAll);

                this._calculateBounding(true);

                this._updateParticles(this._particleSystem.startLifetime.evaluate(0, rand), this._particlesAll);

                this._calculateBounding(false);

                this._updateBoundingNode();
              };

              _proto.clear = function clear() {
                this._particlesAll.length = 0;
              };

              _proto.destroy = function destroy() {};

              return ParticleCuller;
            }();

            var _dec$18, _dec2$U, _dec3$I, _dec4$D, _dec5$A, _dec6$x, _dec7$w, _dec8$u, _dec9$q, _dec10$o, _dec11$k, _dec12$k, _dec13$k, _dec14$i, _dec15$i, _dec16$h, _dec17$f, _dec18$e, _dec19$e, _dec20$e, _dec21$d, _dec22$b, _dec23$a, _dec24$9, _dec25$9, _dec26$8, _dec27$8, _dec28$7, _dec29$6, _dec30$5, _dec31$5, _dec32$5, _dec33$3, _dec34$3, _dec35$3, _dec36$3, _dec37$3, _dec38$3, _dec39$3, _dec40$3, _dec41$3, _dec42$3, _dec43$3, _dec44$2, _dec45$2, _dec46$1, _dec47$1, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _dec65, _dec66, _dec67, _dec68, _dec69, _dec70, _dec71, _dec72, _dec73, _dec74, _dec75, _dec76, _dec77, _dec78, _dec79, _dec80, _dec81, _dec82, _dec83, _dec84, _dec85, _dec86, _dec87, _dec88, _dec89, _dec90, _dec91, _dec92, _dec93, _dec94, _dec95, _dec96, _dec97, _dec98, _dec99, _dec100, _dec101, _dec102, _dec103, _dec104, _dec105, _dec106, _dec107, _dec108, _dec109, _dec110, _dec111, _dec112, _dec113, _dec114, _dec115, _dec116, _dec117, _dec118, _dec119, _dec120, _dec121, _dec122, _dec123, _dec124, _dec125, _dec126, _dec127, _dec128, _dec129, _dec130, _dec131, _dec132, _dec133, _dec134, _dec135, _dec136, _dec137, _dec138, _dec139, _dec140, _dec141, _dec142, _dec143, _class$1b, _class2$10, _descriptor$Y, _descriptor2$Q, _descriptor3$F, _descriptor4$A, _descriptor5$u, _descriptor6$o, _descriptor7$i, _descriptor8$f, _descriptor9$d, _descriptor10$b, _descriptor11$9, _descriptor12$9, _descriptor13$9, _descriptor14$3, _descriptor15$3, _descriptor16$3, _descriptor17$3, _descriptor18$2, _descriptor19$2, _descriptor20$1, _descriptor21$1, _descriptor22$1, _descriptor23$1, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _class3$e, _temp$14;

            var _world_mat = new Mat4();

            var _world_rol = new Quat();

            var superMaterials = Object.getOwnPropertyDescriptor(RenderableComponent.prototype, 'sharedMaterials');
            var ParticleSystem = function (v) { return exports({ ParticleSystem: v, ParticleSystemComponent: v }), v; }((_dec$18 = ccclass('cc.ParticleSystem'), _dec2$U = help(), _dec3$I = menu$1(), _dec4$D = executionOrder(99), _dec5$A = range(), _dec6$x = displayOrder(), _dec7$w = tooltip(), _dec8$u = type$1(GradientRange), _dec9$q = displayOrder(), _dec10$o = tooltip(), _dec11$k = type$1(Space), _dec12$k = displayOrder(), _dec13$k = tooltip(), _dec14$i = displayOrder(), _dec15$i = tooltip(), _dec16$h = formerlySerializedAs('startSize'), _dec17$f = range(), _dec18$e = type$1(CurveRange), _dec19$e = displayOrder(), _dec20$e = tooltip(), _dec21$d = type$1(CurveRange), _dec22$b = range(), _dec23$a = displayOrder(), _dec24$9 = tooltip(), _dec25$9 = type$1(CurveRange), _dec26$8 = range(), _dec27$8 = displayOrder(), _dec28$7 = tooltip(), _dec29$6 = type$1(CurveRange), _dec30$5 = range(), _dec31$5 = displayOrder(), _dec32$5 = tooltip(), _dec33$3 = displayOrder(), _dec34$3 = tooltip(), _dec35$3 = type$1(CurveRange), _dec36$3 = range(), _dec37$3 = displayOrder(), _dec38$3 = tooltip(), _dec39$3 = type$1(CurveRange), _dec40$3 = range(), _dec41$3 = displayOrder(), _dec42$3 = tooltip(), _dec43$3 = type$1(CurveRange), _dec44$2 = formerlySerializedAs('startRotation'), _dec45$2 = range(), _dec46$1 = displayOrder(), _dec47$1 = tooltip(), _dec48 = type$1(CurveRange), _dec49 = range(), _dec50 = displayOrder(), _dec51 = tooltip(), _dec52 = type$1(CurveRange), _dec53 = range(), _dec54 = displayOrder(), _dec55 = tooltip(), _dec56 = displayOrder(), _dec57 = tooltip(), _dec58 = displayOrder(), _dec59 = tooltip(), _dec60 = displayOrder(), _dec61 = tooltip(), _dec62 = type$1(Space), _dec63 = displayOrder(), _dec64 = tooltip(), _dec65 = displayOrder(), _dec66 = tooltip(), _dec67 = displayOrder(), _dec68 = tooltip(), _dec69 = type$1(CurveRange), _dec70 = range(), _dec71 = displayOrder(), _dec72 = tooltip(), _dec73 = type$1(CurveRange), _dec74 = range(), _dec75 = displayOrder(), _dec76 = tooltip(), _dec77 = type$1(CurveRange), _dec78 = range(), _dec79 = displayOrder(), _dec80 = tooltip(), _dec81 = type$1([Burst]), _dec82 = displayOrder(), _dec83 = tooltip(), _dec84 = type$1(Boolean), _dec85 = displayOrder(), _dec86 = tooltip(), _dec87 = type$1(CullingMode), _dec88 = displayOrder(), _dec89 = tooltip(), _dec90 = type$1(Number), _dec91 = displayOrder(), _dec92 = tooltip(), _dec93 = type$1(Number), _dec94 = displayOrder(), _dec95 = tooltip(), _dec96 = type$1(Number), _dec97 = displayOrder(), _dec98 = tooltip(), _dec99 = displayOrder(), _dec100 = tooltip(), _dec101 = formerlySerializedAs('enableCulling'), _dec102 = visible(), _dec103 = type$1(Material), _dec104 = displayName(), _dec105 = type$1(ColorOvertimeModule), _dec106 = type$1(ColorOvertimeModule), _dec107 = displayOrder(), _dec108 = tooltip(), _dec109 = type$1(ShapeModule), _dec110 = type$1(ShapeModule), _dec111 = displayOrder(), _dec112 = tooltip(), _dec113 = type$1(SizeOvertimeModule), _dec114 = type$1(SizeOvertimeModule), _dec115 = displayOrder(), _dec116 = tooltip(), _dec117 = type$1(VelocityOvertimeModule), _dec118 = type$1(VelocityOvertimeModule), _dec119 = displayOrder(), _dec120 = tooltip(), _dec121 = type$1(ForceOvertimeModule), _dec122 = type$1(ForceOvertimeModule), _dec123 = displayOrder(), _dec124 = tooltip(), _dec125 = type$1(LimitVelocityOvertimeModule), _dec126 = type$1(LimitVelocityOvertimeModule), _dec127 = displayOrder(), _dec128 = tooltip(), _dec129 = type$1(RotationOvertimeModule), _dec130 = type$1(RotationOvertimeModule), _dec131 = displayOrder(), _dec132 = tooltip(), _dec133 = type$1(TextureAnimationModule), _dec134 = type$1(TextureAnimationModule), _dec135 = displayOrder(), _dec136 = tooltip(), _dec137 = type$1(TrailModule), _dec138 = type$1(TrailModule), _dec139 = displayOrder(), _dec140 = tooltip(), _dec141 = type$1(ParticleSystemRenderer), _dec142 = displayOrder(), _dec143 = tooltip(), _dec$18(_class$1b = _dec2$U(_class$1b = _dec3$I(_class$1b = _dec4$D(_class$1b = executeInEditMode(_class$1b = (_class2$10 = (_temp$14 = _class3$e = function (_RenderableComponent) {
              _inheritsLoose(ParticleSystem, _RenderableComponent);

              function ParticleSystem() {
                var _this;

                _this = _RenderableComponent.call(this) || this;

                _initializerDefineProperty(_this, "startColor", _descriptor$Y, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "scaleSpace", _descriptor2$Q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSize3D", _descriptor3$F, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSizeX", _descriptor4$A, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSizeY", _descriptor5$u, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSizeZ", _descriptor6$o, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSpeed", _descriptor7$i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startRotation3D", _descriptor8$f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startRotationX", _descriptor9$d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startRotationY", _descriptor10$b, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startRotationZ", _descriptor11$9, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startDelay", _descriptor12$9, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startLifetime", _descriptor13$9, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "duration", _descriptor14$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "loop", _descriptor15$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "simulationSpeed", _descriptor16$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "playOnAwake", _descriptor17$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "gravityModifier", _descriptor18$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "rateOverTime", _descriptor19$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "rateOverDistance", _descriptor20$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "bursts", _descriptor21$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_renderCulling", _descriptor22$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_cullingMode", _descriptor23$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_aabbHalfX", _descriptor24, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_aabbHalfY", _descriptor25, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_aabbHalfZ", _descriptor26, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_dataCulling", _descriptor27, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_colorOverLifetimeModule", _descriptor28, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_shapeModule", _descriptor29, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_sizeOvertimeModule", _descriptor30, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_velocityOvertimeModule", _descriptor31, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_forceOvertimeModule", _descriptor32, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_limitVelocityOvertimeModule", _descriptor33, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_rotationOvertimeModule", _descriptor34, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_textureAnimationModule", _descriptor35, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_trailModule", _descriptor36, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "renderer", _descriptor37, _assertThisInitialized(_this));

                _this._isPlaying = void 0;
                _this._isPaused = void 0;
                _this._isStopped = void 0;
                _this._isEmitting = void 0;
                _this._needRefresh = void 0;
                _this._time = void 0;
                _this._emitRateTimeCounter = void 0;
                _this._emitRateDistanceCounter = void 0;
                _this._oldWPos = void 0;
                _this._curWPos = void 0;
                _this._boundingBox = void 0;
                _this._culler = void 0;
                _this._oldPos = void 0;
                _this._curPos = void 0;
                _this._isCulled = void 0;
                _this._isSimulating = void 0;
                _this._customData1 = void 0;
                _this._customData2 = void 0;
                _this._subEmitters = void 0;

                _initializerDefineProperty(_this, "_prewarm", _descriptor38, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_capacity", _descriptor39, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_simulationSpace", _descriptor40, _assertThisInitialized(_this));

                _this.processor = null;
                _this.rateOverTime.constant = 10;
                _this.startLifetime.constant = 5;
                _this.startSizeX.constant = 1;
                _this.startSpeed.constant = 5;
                _this._isPlaying = false;
                _this._isPaused = false;
                _this._isStopped = true;
                _this._isEmitting = false;
                _this._needRefresh = true;
                _this._time = 0.0;
                _this._emitRateTimeCounter = 0.0;
                _this._emitRateDistanceCounter = 0.0;
                _this._oldWPos = new Vec3();
                _this._curWPos = new Vec3();
                _this._boundingBox = null;
                _this._culler = null;
                _this._oldPos = null;
                _this._curPos = null;
                _this._isCulled = false;
                _this._isSimulating = true;
                _this._customData1 = new Vec2();
                _this._customData2 = new Vec2();
                _this._subEmitters = [];
                return _this;
              }

              var _proto = ParticleSystem.prototype;

              _proto.onFocusInEditor = function onFocusInEditor() {
                this.renderer.create(this);
              };

              _proto.onLoad = function onLoad() {
                this.renderer.onInit(this);
                if (this._shapeModule) this._shapeModule.onInit(this);
                if (this._trailModule) this._trailModule.onInit(this);
                this.bindModule();

                this._resetPosition();
              };

              _proto._onMaterialModified = function _onMaterialModified(index, material) {
                if (this.processor !== null) {
                  this.processor.onMaterialModified(index, material);
                }
              };

              _proto._onRebuildPSO = function _onRebuildPSO(index, material) {
                this.processor.onRebuildPSO(index, material);
              };

              _proto._collectModels = function _collectModels() {
                this._models.length = 0;

                this._models.push(this.processor._model);

                if (this._trailModule && this._trailModule.enable && this._trailModule._trailModel) {
                  this._models.push(this._trailModule._trailModel);
                }

                return this._models;
              };

              _proto._attachToScene = function _attachToScene() {
                this.processor.attachToScene();

                if (this._trailModule && this._trailModule.enable) {
                  this._trailModule._attachToScene();
                }
              };

              _proto._detachFromScene = function _detachFromScene() {
                this.processor.detachFromScene();

                if (this._trailModule && this._trailModule.enable) {
                  this._trailModule._detachFromScene();
                }

                if (this._boundingBox) {
                  this._boundingBox = null;
                }

                if (this._culler) {
                  this._culler.clear();

                  this._culler.destroy();

                  this._culler = null;
                }
              };

              _proto.bindModule = function bindModule() {
                if (this._colorOverLifetimeModule) this._colorOverLifetimeModule.bindTarget(this.processor);
                if (this._sizeOvertimeModule) this._sizeOvertimeModule.bindTarget(this.processor);
                if (this._rotationOvertimeModule) this._rotationOvertimeModule.bindTarget(this.processor);
                if (this._forceOvertimeModule) this._forceOvertimeModule.bindTarget(this.processor);
                if (this._limitVelocityOvertimeModule) this._limitVelocityOvertimeModule.bindTarget(this.processor);
                if (this._velocityOvertimeModule) this._velocityOvertimeModule.bindTarget(this.processor);
                if (this._textureAnimationModule) this._textureAnimationModule.bindTarget(this.processor);
              };

              _proto.play = function play() {
                if (this._isPaused) {
                  this._isPaused = false;
                }

                if (this._isStopped) {
                  this._isStopped = false;
                }

                this._isPlaying = true;
                this._isEmitting = true;

                this._resetPosition();

                if (this._prewarm) {
                  this._prewarmSystem();
                }

                if (this._trailModule) {
                  this._trailModule.play();
                }

                if (this.processor) {
                  var model = this.processor.getModel();

                  if (model) {
                    model.enabled = this.enabledInHierarchy;
                  }
                }
              };

              _proto.pause = function pause() {
                if (this._isStopped) {
                  console.warn('pause(): particle system is already stopped.');
                  return;
                }

                if (this._isPlaying) {
                  this._isPlaying = false;
                }

                this._isPaused = true;
              };

              _proto.stop = function stop() {
                if (this._isPlaying || this._isPaused) {
                  this.clear();
                }

                if (this._isPlaying) {
                  this._isPlaying = false;
                }

                if (this._isPaused) {
                  this._isPaused = false;
                }

                this._time = 0.0;
                this._emitRateTimeCounter = 0.0;
                this._emitRateDistanceCounter = 0.0;
                this._isStopped = true;
                this._needRefresh = true;

                for (var _iterator = _createForOfIteratorHelperLoose(this.bursts), _step; !(_step = _iterator()).done;) {
                  var burst = _step.value;
                  burst.reset();
                }
              };

              _proto.clear = function clear() {
                if (this.enabledInHierarchy) {
                  this.processor.clear();
                  if (this._trailModule) this._trailModule.clear();
                }

                this._calculateBounding(false);
              };

              _proto.getParticleCount = function getParticleCount() {
                return this.processor.getParticleCount();
              };

              _proto.setCustomData1 = function setCustomData1(x, y) {
                Vec2.set(this._customData1, x, y);
              };

              _proto.setCustomData2 = function setCustomData2(x, y) {
                Vec2.set(this._customData2, x, y);
              };

              _proto.onDestroy = function onDestroy() {
                legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_COMMIT, this.beforeRender, this);
                this.processor.onDestroy();
                if (this._trailModule) this._trailModule.destroy();

                if (this._culler) {
                  this._culler.clear();

                  this._culler.destroy();

                  this._culler = null;
                }
              };

              _proto.onEnable = function onEnable() {
                legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_COMMIT, this.beforeRender, this);

                if (this.playOnAwake && !EDITOR) {
                  this.play();
                }

                this.processor.onEnable();
                if (this._trailModule) this._trailModule.onEnable();
              };

              _proto.onDisable = function onDisable() {
                legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_COMMIT, this.beforeRender, this);
                this.processor.onDisable();
                if (this._trailModule) this._trailModule.onDisable();

                if (this._boundingBox) {
                  this._boundingBox = null;
                }

                if (this._culler) {
                  this._culler.clear();

                  this._culler.destroy();

                  this._culler = null;
                }
              };

              _proto._calculateBounding = function _calculateBounding(forceRefresh) {
                if (this._boundingBox) {
                  if (!this._culler) {
                    this._culler = new ParticleCuller(this);
                  }

                  this._culler.calculatePositions();

                  AABB.fromPoints(this._boundingBox, this._culler.minPos, this._culler.maxPos);

                  if (forceRefresh) {
                    this.aabbHalfX = this._boundingBox.halfExtents.x;
                    this.aabbHalfY = this._boundingBox.halfExtents.y;
                    this.aabbHalfZ = this._boundingBox.halfExtents.z;
                  } else {
                    if (this.aabbHalfX) {
                      this.setBoundingX(this.aabbHalfX);
                    } else {
                      this.aabbHalfX = this._boundingBox.halfExtents.x;
                    }

                    if (this.aabbHalfY) {
                      this.setBoundingY(this.aabbHalfY);
                    } else {
                      this.aabbHalfY = this._boundingBox.halfExtents.y;
                    }

                    if (this.aabbHalfZ) {
                      this.setBoundingZ(this.aabbHalfZ);
                    } else {
                      this.aabbHalfZ = this._boundingBox.halfExtents.z;
                    }
                  }

                  this._culler.clear();
                }
              };

              _proto.update = function update(dt) {
                var scaledDeltaTime = dt * this.simulationSpeed;

                if (!this.renderCulling) {
                  if (this._boundingBox) {
                    this._boundingBox = null;
                  }

                  if (this._culler) {
                    this._culler.clear();

                    this._culler.destroy();

                    this._culler = null;
                  }

                  this._isSimulating = true;
                } else {
                  var _this$node$scene$rend;

                  if (!this._boundingBox) {
                    this._boundingBox = new AABB();

                    this._calculateBounding(false);
                  }

                  if (!this._curPos) {
                    this._curPos = new Vec3();
                  }

                  this.node.getWorldPosition(this._curPos);

                  if (!this._oldPos) {
                    this._oldPos = new Vec3();

                    this._oldPos.set(this._curPos);
                  }

                  if (!this._curPos.equals(this._oldPos) && this._boundingBox && this._culler) {
                    var dx = this._curPos.x - this._oldPos.x;
                    var dy = this._curPos.y - this._oldPos.y;
                    var dz = this._curPos.z - this._oldPos.z;
                    var center = this._boundingBox.center;
                    center.x += dx;
                    center.y += dy;
                    center.z += dz;

                    this._culler.setBoundingBoxCenter(center.x, center.y, center.z);

                    this._oldPos.set(this._curPos);
                  }

                  var cameraLst = (_this$node$scene$rend = this.node.scene.renderScene) === null || _this$node$scene$rend === void 0 ? void 0 : _this$node$scene$rend.cameras;
                  var culled = true;

                  if (cameraLst !== undefined && this._boundingBox) {
                    for (var i = 0; i < cameraLst.length; ++i) {
                      var camera = cameraLst[i];
                      var visibility = camera.visibility;

                      if ((visibility & this.node.layer) === this.node.layer) {
                        if (intersect.aabbFrustum(this._boundingBox, camera.frustum)) {
                          culled = false;
                          break;
                        }
                      }
                    }
                  }

                  if (culled) {
                    if (this._cullingMode !== CullingMode.AlwaysSimulate) {
                      this._isSimulating = false;
                    }

                    if (!this._isCulled) {
                      this.processor.detachFromScene();
                      this._isCulled = true;
                    }

                    if (this._trailModule && this._trailModule.enable) {
                      this._trailModule._detachFromScene();
                    }

                    if (this._cullingMode === CullingMode.PauseAndCatchup) {
                      this._time += scaledDeltaTime;
                    }

                    if (this._cullingMode !== CullingMode.AlwaysSimulate) {
                      return;
                    }
                  } else {
                    if (this._isCulled) {
                      this._attachToScene();

                      this._isCulled = false;
                    }

                    if (!this._isSimulating) {
                      this._isSimulating = true;
                    }
                  }

                  if (!this._isSimulating) {
                    return;
                  }
                }

                if (this._isPlaying) {
                  this._time += scaledDeltaTime;

                  this._emit(scaledDeltaTime);

                  if (this.processor.updateParticles(scaledDeltaTime) === 0 && !this._isEmitting) {
                    this.stop();
                  }
                } else {
                  var mat = this.getMaterialInstance(0) || this.processor.getDefaultMaterial();
                  var pass = mat.passes[0];
                  this.processor.updateRotation(pass);
                  this.processor.updateScale(pass);
                }

                this.processor.updateRenderData();

                if (this._trailModule && this._trailModule.enable) {
                  this._trailModule.updateRenderData();
                }
              };

              _proto.beforeRender = function beforeRender() {
                if (!this._isPlaying) return;
                this.processor.beforeRender();

                if (this._trailModule && this._trailModule.enable) {
                  this._trailModule.beforeRender();
                }
              };

              _proto._onVisibilityChange = function _onVisibilityChange(val) {
                if (this.processor._model) {
                  this.processor._model.visFlags = val;
                }
              };

              _proto.emit = function emit(count, dt) {
                var loopDelta = this._time % this.duration / this.duration;

                if (this._needRefresh) {
                  this.node.invalidateChildren(TransformBit.POSITION);
                  this._needRefresh = false;
                }

                if (this._simulationSpace === Space.World) {
                  this.node.getWorldMatrix(_world_mat);
                  this.node.getWorldRotation(_world_rol);
                }

                for (var i = 0; i < count; ++i) {
                  var particle = this.processor.getFreeParticle();

                  if (particle === null) {
                    return;
                  }

                  particle.particleSystem = this;
                  particle.reset();
                  var rand = pseudoRandom(randomRangeInt(0, INT_MAX));

                  if (this._shapeModule && this._shapeModule.enable) {
                    this._shapeModule.emit(particle);
                  } else {
                    Vec3.set(particle.position, 0, 0, 0);
                    Vec3.copy(particle.velocity, particleEmitZAxis);
                  }

                  if (this._textureAnimationModule && this._textureAnimationModule.enable) {
                    this._textureAnimationModule.init(particle);
                  }

                  var curveStartSpeed = this.startSpeed.evaluate(loopDelta, rand);
                  Vec3.multiplyScalar(particle.velocity, particle.velocity, curveStartSpeed);

                  if (this._simulationSpace === Space.World) {
                    Vec3.transformMat4(particle.position, particle.position, _world_mat);
                    Vec3.transformQuat(particle.velocity, particle.velocity, _world_rol);
                  }

                  Vec3.copy(particle.ultimateVelocity, particle.velocity);

                  if (this.startRotation3D) {
                    particle.startEuler.set(this.startRotationX.evaluate(loopDelta, rand), this.startRotationY.evaluate(loopDelta, rand), this.startRotationZ.evaluate(loopDelta, rand));
                  } else {
                    particle.startEuler.set(0, 0, this.startRotationZ.evaluate(loopDelta, rand));
                  }

                  particle.rotation.set(particle.startEuler);

                  if (this.startSize3D) {
                    Vec3.set(particle.startSize, this.startSizeX.evaluate(loopDelta, rand), this.startSizeY.evaluate(loopDelta, rand), this.startSizeZ.evaluate(loopDelta, rand));
                  } else {
                    Vec3.set(particle.startSize, this.startSizeX.evaluate(loopDelta, rand), 1, 1);
                    particle.startSize.y = particle.startSize.x;
                  }

                  Vec3.copy(particle.size, particle.startSize);
                  particle.startColor.set(this.startColor.evaluate(loopDelta, rand));
                  particle.color.set(particle.startColor);
                  particle.startLifetime = this.startLifetime.evaluate(loopDelta, rand) + dt;
                  particle.remainingLifetime = particle.startLifetime;
                  particle.randomSeed = randomRangeInt(0, 233280);
                  particle.loopCount++;
                  this.processor.setNewParticle(particle);
                }
              };

              _proto._prewarmSystem = function _prewarmSystem() {
                this.startDelay.mode = Mode.Constant;
                this.startDelay.constant = 0;
                var dt = 1.0;
                var cnt = this.duration / dt;

                for (var i = 0; i < cnt; ++i) {
                  this._time += dt;

                  this._emit(dt);

                  this.processor.updateParticles(dt);
                }
              };

              _proto._emit = function _emit(dt) {
                var startDelay = this.startDelay.evaluate(0, 1);

                if (this._time > startDelay) {
                  if (this._time > this.duration + startDelay) {
                    if (!this.loop) {
                      this._isEmitting = false;
                      return;
                    }
                  }

                  this._emitRateTimeCounter += this.rateOverTime.evaluate(this._time / this.duration, 1) * dt;

                  if (this._emitRateTimeCounter > 1 && this._isEmitting) {
                    var emitNum = Math.floor(this._emitRateTimeCounter);
                    this._emitRateTimeCounter -= emitNum;
                    this.emit(emitNum, dt);
                  }

                  this.node.getWorldPosition(this._curWPos);
                  var distance = Vec3.distance(this._curWPos, this._oldWPos);
                  Vec3.copy(this._oldWPos, this._curWPos);
                  this._emitRateDistanceCounter += distance * this.rateOverDistance.evaluate(this._time / this.duration, 1);

                  if (this._emitRateDistanceCounter > 1 && this._isEmitting) {
                    var _emitNum = Math.floor(this._emitRateDistanceCounter);

                    this._emitRateDistanceCounter -= _emitNum;
                    this.emit(_emitNum, dt);
                  }

                  for (var _iterator2 = _createForOfIteratorHelperLoose(this.bursts), _step2; !(_step2 = _iterator2()).done;) {
                    var burst = _step2.value;
                    burst.update(this, dt);
                  }
                }
              };

              _proto._resetPosition = function _resetPosition() {
                this.node.getWorldPosition(this._oldWPos);
                Vec3.copy(this._curWPos, this._oldWPos);
              };

              _proto.addSubEmitter = function addSubEmitter(subEmitter) {
                this._subEmitters.push(subEmitter);
              };

              _proto.removeSubEmitter = function removeSubEmitter(idx) {
                this._subEmitters.splice(this._subEmitters.indexOf(idx), 1);
              };

              _proto.addBurst = function addBurst(burst) {
                this.bursts.push(burst);
              };

              _proto.removeBurst = function removeBurst(idx) {
                this.bursts.splice(this.bursts.indexOf(idx), 1);
              };

              _proto.getBoundingX = function getBoundingX() {
                return this._aabbHalfX;
              };

              _proto.getBoundingY = function getBoundingY() {
                return this._aabbHalfY;
              };

              _proto.getBoundingZ = function getBoundingZ() {
                return this._aabbHalfZ;
              };

              _proto.setBoundingX = function setBoundingX(value) {
                if (this._boundingBox && this._culler) {
                  this._boundingBox.halfExtents.x = value;

                  this._culler.setBoundingBoxSize(this._boundingBox.halfExtents);

                  this._aabbHalfX = value;
                }
              };

              _proto.setBoundingY = function setBoundingY(value) {
                if (this._boundingBox && this._culler) {
                  this._boundingBox.halfExtents.y = value;

                  this._culler.setBoundingBoxSize(this._boundingBox.halfExtents);

                  this._aabbHalfY = value;
                }
              };

              _proto.setBoundingZ = function setBoundingZ(value) {
                if (this._boundingBox && this._culler) {
                  this._boundingBox.halfExtents.z = value;

                  this._culler.setBoundingBoxSize(this._boundingBox.halfExtents);

                  this._aabbHalfZ = value;
                }
              };

              _proto._onBeforeSerialize = function _onBeforeSerialize(props) {
                var _this2 = this;

                return this.dataCulling ? props.filter(function (p) {
                  return !PARTICLE_MODULE_PROPERTY.includes(p) || _this2[p] && _this2[p].enable;
                }) : props;
              };

              _createClass(ParticleSystem, [{
                key: "capacity",
                get: function get() {
                  return this._capacity;
                },
                set: function set(val) {
                  this._capacity = Math.floor(val > 0 ? val : 0);

                  if (this.processor && this.processor._model) {
                    this.processor._model.setCapacity(this._capacity);
                  }
                }
              }, {
                key: "prewarm",
                get: function get() {
                  return this._prewarm;
                },
                set: function set(val) {
                  if (val === true && this.loop === false) ;

                  this._prewarm = val;
                }
              }, {
                key: "simulationSpace",
                get: function get() {
                  return this._simulationSpace;
                },
                set: function set(val) {
                  if (val !== this._simulationSpace) {
                    this._simulationSpace = val;

                    if (this.processor) {
                      this.processor.updateMaterialParams();
                      this.processor.updateTrailMaterial();
                    }
                  }
                }
              }, {
                key: "renderCulling",
                get: function get() {
                  return this._renderCulling;
                },
                set: function set(value) {
                  this._renderCulling = value;

                  if (value) {
                    if (!this._boundingBox) {
                      this._boundingBox = new AABB();

                      this._calculateBounding(false);
                    }
                  }
                }
              }, {
                key: "cullingMode",
                get: function get() {
                  return this._cullingMode;
                },
                set: function set(value) {
                  this._cullingMode = value;
                }
              }, {
                key: "aabbHalfX",
                get: function get() {
                  var res = this.getBoundingX();

                  if (res) {
                    return res;
                  } else {
                    return 0;
                  }
                },
                set: function set(value) {
                  this.setBoundingX(value);
                }
              }, {
                key: "aabbHalfY",
                get: function get() {
                  var res = this.getBoundingY();

                  if (res) {
                    return res;
                  } else {
                    return 0;
                  }
                },
                set: function set(value) {
                  this.setBoundingY(value);
                }
              }, {
                key: "aabbHalfZ",
                get: function get() {
                  var res = this.getBoundingZ();

                  if (res) {
                    return res;
                  } else {
                    return 0;
                  }
                },
                set: function set(value) {
                  this.setBoundingZ(value);
                }
              }, {
                key: "dataCulling",
                get: function get() {
                  return this._dataCulling;
                },
                set: function set(value) {
                  this._dataCulling = value;
                }
              }, {
                key: "sharedMaterials",
                get: function get() {
                  return superMaterials.get.call(this);
                },
                set: function set(val) {
                  superMaterials.set.call(this, val);
                }
              }, {
                key: "colorOverLifetimeModule",
                get: function get() {

                  return this._colorOverLifetimeModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._colorOverLifetimeModule = val;
                }
              }, {
                key: "shapeModule",
                get: function get() {

                  return this._shapeModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._shapeModule = val;
                }
              }, {
                key: "sizeOvertimeModule",
                get: function get() {

                  return this._sizeOvertimeModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._sizeOvertimeModule = val;
                }
              }, {
                key: "velocityOvertimeModule",
                get: function get() {

                  return this._velocityOvertimeModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._velocityOvertimeModule = val;
                }
              }, {
                key: "forceOvertimeModule",
                get: function get() {

                  return this._forceOvertimeModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._forceOvertimeModule = val;
                }
              }, {
                key: "limitVelocityOvertimeModule",
                get: function get() {

                  return this._limitVelocityOvertimeModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._limitVelocityOvertimeModule = val;
                }
              }, {
                key: "rotationOvertimeModule",
                get: function get() {

                  return this._rotationOvertimeModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._rotationOvertimeModule = val;
                }
              }, {
                key: "textureAnimationModule",
                get: function get() {

                  return this._textureAnimationModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._textureAnimationModule = val;
                }
              }, {
                key: "trailModule",
                get: function get() {

                  return this._trailModule;
                },
                set: function set(val) {
                  if (!val) return;
                  this._trailModule = val;
                }
              }, {
                key: "isPlaying",
                get: function get() {
                  return this._isPlaying;
                }
              }, {
                key: "isPaused",
                get: function get() {
                  return this._isPaused;
                }
              }, {
                key: "isStopped",
                get: function get() {
                  return this._isStopped;
                }
              }, {
                key: "isEmitting",
                get: function get() {
                  return this._isEmitting;
                }
              }, {
                key: "time",
                get: function get() {
                  return this._time;
                }
              }]);

              return ParticleSystem;
            }(RenderableComponent), _class3$e.CullingMode = CullingMode, _temp$14), (_applyDecoratedDescriptor(_class2$10.prototype, "capacity", [_dec5$A, _dec6$x, _dec7$w], Object.getOwnPropertyDescriptor(_class2$10.prototype, "capacity"), _class2$10.prototype), _descriptor$Y = _applyDecoratedDescriptor(_class2$10.prototype, "startColor", [_dec8$u, serializable, _dec9$q, _dec10$o], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new GradientRange();
              }
            }), _descriptor2$Q = _applyDecoratedDescriptor(_class2$10.prototype, "scaleSpace", [_dec11$k, serializable, _dec12$k, _dec13$k], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Space.Local;
              }
            }), _descriptor3$F = _applyDecoratedDescriptor(_class2$10.prototype, "startSize3D", [serializable, _dec14$i, _dec15$i], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor4$A = _applyDecoratedDescriptor(_class2$10.prototype, "startSizeX", [_dec16$h, _dec17$f, _dec18$e, _dec19$e, _dec20$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor5$u = _applyDecoratedDescriptor(_class2$10.prototype, "startSizeY", [_dec21$d, serializable, _dec22$b, _dec23$a, _dec24$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor6$o = _applyDecoratedDescriptor(_class2$10.prototype, "startSizeZ", [_dec25$9, serializable, _dec26$8, _dec27$8, _dec28$7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor7$i = _applyDecoratedDescriptor(_class2$10.prototype, "startSpeed", [_dec29$6, serializable, _dec30$5, _dec31$5, _dec32$5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor8$f = _applyDecoratedDescriptor(_class2$10.prototype, "startRotation3D", [serializable, _dec33$3, _dec34$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor9$d = _applyDecoratedDescriptor(_class2$10.prototype, "startRotationX", [_dec35$3, serializable, _dec36$3, radian, _dec37$3, _dec38$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor10$b = _applyDecoratedDescriptor(_class2$10.prototype, "startRotationY", [_dec39$3, serializable, _dec40$3, radian, _dec41$3, _dec42$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor11$9 = _applyDecoratedDescriptor(_class2$10.prototype, "startRotationZ", [_dec43$3, _dec44$2, _dec45$2, radian, _dec46$1, _dec47$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor12$9 = _applyDecoratedDescriptor(_class2$10.prototype, "startDelay", [_dec48, serializable, _dec49, _dec50, _dec51], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor13$9 = _applyDecoratedDescriptor(_class2$10.prototype, "startLifetime", [_dec52, serializable, _dec53, _dec54, _dec55], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor14$3 = _applyDecoratedDescriptor(_class2$10.prototype, "duration", [serializable, _dec56, _dec57], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5.0;
              }
            }), _descriptor15$3 = _applyDecoratedDescriptor(_class2$10.prototype, "loop", [serializable, _dec58, _dec59], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "prewarm", [_dec60, _dec61], Object.getOwnPropertyDescriptor(_class2$10.prototype, "prewarm"), _class2$10.prototype), _applyDecoratedDescriptor(_class2$10.prototype, "simulationSpace", [_dec62, serializable, _dec63, _dec64], Object.getOwnPropertyDescriptor(_class2$10.prototype, "simulationSpace"), _class2$10.prototype), _descriptor16$3 = _applyDecoratedDescriptor(_class2$10.prototype, "simulationSpeed", [serializable, _dec65, _dec66], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            }), _descriptor17$3 = _applyDecoratedDescriptor(_class2$10.prototype, "playOnAwake", [serializable, _dec67, _dec68], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor18$2 = _applyDecoratedDescriptor(_class2$10.prototype, "gravityModifier", [_dec69, serializable, _dec70, _dec71, _dec72], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor19$2 = _applyDecoratedDescriptor(_class2$10.prototype, "rateOverTime", [_dec73, serializable, _dec74, _dec75, _dec76], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor20$1 = _applyDecoratedDescriptor(_class2$10.prototype, "rateOverDistance", [_dec77, serializable, _dec78, _dec79, _dec80], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new CurveRange();
              }
            }), _descriptor21$1 = _applyDecoratedDescriptor(_class2$10.prototype, "bursts", [_dec81, serializable, _dec82, _dec83], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "renderCulling", [_dec84, _dec85, _dec86], Object.getOwnPropertyDescriptor(_class2$10.prototype, "renderCulling"), _class2$10.prototype), _descriptor22$1 = _applyDecoratedDescriptor(_class2$10.prototype, "_renderCulling", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "cullingMode", [_dec87, _dec88, _dec89], Object.getOwnPropertyDescriptor(_class2$10.prototype, "cullingMode"), _class2$10.prototype), _descriptor23$1 = _applyDecoratedDescriptor(_class2$10.prototype, "_cullingMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return CullingMode.Pause;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "aabbHalfX", [_dec90, _dec91, _dec92], Object.getOwnPropertyDescriptor(_class2$10.prototype, "aabbHalfX"), _class2$10.prototype), _descriptor24 = _applyDecoratedDescriptor(_class2$10.prototype, "_aabbHalfX", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "aabbHalfY", [_dec93, _dec94, _dec95], Object.getOwnPropertyDescriptor(_class2$10.prototype, "aabbHalfY"), _class2$10.prototype), _descriptor25 = _applyDecoratedDescriptor(_class2$10.prototype, "_aabbHalfY", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "aabbHalfZ", [_dec96, _dec97, _dec98], Object.getOwnPropertyDescriptor(_class2$10.prototype, "aabbHalfZ"), _class2$10.prototype), _descriptor26 = _applyDecoratedDescriptor(_class2$10.prototype, "_aabbHalfZ", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "dataCulling", [_dec99, _dec100], Object.getOwnPropertyDescriptor(_class2$10.prototype, "dataCulling"), _class2$10.prototype), _descriptor27 = _applyDecoratedDescriptor(_class2$10.prototype, "_dataCulling", [serializable, _dec101], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "sharedMaterials", [override, _dec102, _dec103, serializable, _dec104], Object.getOwnPropertyDescriptor(_class2$10.prototype, "sharedMaterials"), _class2$10.prototype), _descriptor28 = _applyDecoratedDescriptor(_class2$10.prototype, "_colorOverLifetimeModule", [_dec105], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "colorOverLifetimeModule", [_dec106, _dec107, _dec108], Object.getOwnPropertyDescriptor(_class2$10.prototype, "colorOverLifetimeModule"), _class2$10.prototype), _descriptor29 = _applyDecoratedDescriptor(_class2$10.prototype, "_shapeModule", [_dec109], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "shapeModule", [_dec110, _dec111, _dec112], Object.getOwnPropertyDescriptor(_class2$10.prototype, "shapeModule"), _class2$10.prototype), _descriptor30 = _applyDecoratedDescriptor(_class2$10.prototype, "_sizeOvertimeModule", [_dec113], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "sizeOvertimeModule", [_dec114, _dec115, _dec116], Object.getOwnPropertyDescriptor(_class2$10.prototype, "sizeOvertimeModule"), _class2$10.prototype), _descriptor31 = _applyDecoratedDescriptor(_class2$10.prototype, "_velocityOvertimeModule", [_dec117], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "velocityOvertimeModule", [_dec118, _dec119, _dec120], Object.getOwnPropertyDescriptor(_class2$10.prototype, "velocityOvertimeModule"), _class2$10.prototype), _descriptor32 = _applyDecoratedDescriptor(_class2$10.prototype, "_forceOvertimeModule", [_dec121], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "forceOvertimeModule", [_dec122, _dec123, _dec124], Object.getOwnPropertyDescriptor(_class2$10.prototype, "forceOvertimeModule"), _class2$10.prototype), _descriptor33 = _applyDecoratedDescriptor(_class2$10.prototype, "_limitVelocityOvertimeModule", [_dec125], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "limitVelocityOvertimeModule", [_dec126, _dec127, _dec128], Object.getOwnPropertyDescriptor(_class2$10.prototype, "limitVelocityOvertimeModule"), _class2$10.prototype), _descriptor34 = _applyDecoratedDescriptor(_class2$10.prototype, "_rotationOvertimeModule", [_dec129], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "rotationOvertimeModule", [_dec130, _dec131, _dec132], Object.getOwnPropertyDescriptor(_class2$10.prototype, "rotationOvertimeModule"), _class2$10.prototype), _descriptor35 = _applyDecoratedDescriptor(_class2$10.prototype, "_textureAnimationModule", [_dec133], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "textureAnimationModule", [_dec134, _dec135, _dec136], Object.getOwnPropertyDescriptor(_class2$10.prototype, "textureAnimationModule"), _class2$10.prototype), _descriptor36 = _applyDecoratedDescriptor(_class2$10.prototype, "_trailModule", [_dec137], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$10.prototype, "trailModule", [_dec138, _dec139, _dec140], Object.getOwnPropertyDescriptor(_class2$10.prototype, "trailModule"), _class2$10.prototype), _descriptor37 = _applyDecoratedDescriptor(_class2$10.prototype, "renderer", [_dec141, serializable, _dec142, _dec143], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new ParticleSystemRenderer();
              }
            }), _descriptor38 = _applyDecoratedDescriptor(_class2$10.prototype, "_prewarm", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor39 = _applyDecoratedDescriptor(_class2$10.prototype, "_capacity", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 100;
              }
            }), _descriptor40 = _applyDecoratedDescriptor(_class2$10.prototype, "_simulationSpace", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Space.Local;
              }
            })), _class2$10)) || _class$1b) || _class$1b) || _class$1b) || _class$1b) || _class$1b));

            var ParticleUtils = exports('ParticleUtils', function () {
              function ParticleUtils() {}

              ParticleUtils.instantiate = function instantiate$1(prefab) {
                if (!this.registeredSceneEvent) {
                  director.on(Director.EVENT_BEFORE_SCENE_LAUNCH, this.onSceneUnload, this);
                  this.registeredSceneEvent = true;
                }

                if (!this.particleSystemPool.has(prefab._uuid)) {
                  this.particleSystemPool.set(prefab._uuid, new Pool(function () {
                    return instantiate(prefab) || new Node();
                  }, 1, function (prefab) {
                    return prefab.destroy();
                  }));
                }

                return this.particleSystemPool.get(prefab._uuid).alloc();
              };

              ParticleUtils.destroy = function destroy(prefab) {
                if (this.particleSystemPool.has(prefab._prefab.asset._uuid)) {
                  this.stop(prefab);
                  this.particleSystemPool.get(prefab._prefab.asset._uuid).free(prefab);
                }
              };

              ParticleUtils.play = function play(rootNode) {
                for (var _iterator = _createForOfIteratorHelperLoose(rootNode.getComponentsInChildren(ParticleSystem)), _step; !(_step = _iterator()).done;) {
                  var ps = _step.value;
                  ps.play();
                }
              };

              ParticleUtils.stop = function stop(rootNode) {
                for (var _iterator2 = _createForOfIteratorHelperLoose(rootNode.getComponentsInChildren(ParticleSystem)), _step2; !(_step2 = _iterator2()).done;) {
                  var ps = _step2.value;
                  ps.stop();
                }
              };

              ParticleUtils.onSceneUnload = function onSceneUnload() {
                this.particleSystemPool.forEach(function (value) {
                  return value.destroy();
                });
                this.particleSystemPool.clear();
              };

              return ParticleUtils;
            }());
            ParticleUtils.particleSystemPool = new Map();
            ParticleUtils.registeredSceneEvent = false;

            removeProperty(Burst.prototype, 'Burst.prototype', [{
              name: 'minCount'
            }, {
              name: 'maxCount'
            }]);
            replaceProperty(ParticleSystem.prototype, 'ParticleSystem.prototype', [{
              name: 'enableCulling',
              newName: 'dataCulling'
            }]);
            legacyCC.ParticleSystemComponent = ParticleSystem;
            js.setClassAlias(ParticleSystem, 'cc.ParticleSystemComponent');
            legacyCC.BillboardComponent = Billboard;
            js.setClassAlias(Billboard, 'cc.BillboardComponent');
            legacyCC.LineComponent = Line;
            js.setClassAlias(Line, 'cc.LineComponent');

            legacyCC.ParticleUtils = ParticleUtils;

            var DURATION_INFINITY = -1;
            var START_SIZE_EQUAL_TO_END_SIZE = -1;
            var START_RADIUS_EQUAL_TO_END_RADIUS = -1;
            var EmitterMode = Enum({
              GRAVITY: 0,
              RADIUS: 1
            });
            var PositionType = Enum({
              FREE: 0,
              RELATIVE: 1,
              GROUPED: 2
            });

            var ZERO_VEC2 = new Vec2(0, 0);

            var _pos = new Vec2();

            var _tpa = new Vec2();

            var _tpb = new Vec2();

            var _tpc = new Vec2();

            var formatBytes = getComponentPerVertex(vfmtPosUvColor);

            function getWorldRotation(node) {
              var rotation = 0;
              var tempNode = node;

              while (tempNode) {
                rotation += tempNode.eulerAngles.z;
                tempNode = tempNode.parent;
              }

              return rotation;
            }

            var Particle$1 = function Particle() {
              this.pos = new Vec2(0, 0);
              this.startPos = new Vec2(0, 0);
              this.color = new Color$1(0, 0, 0, 255);
              this.deltaColor = {
                r: 0,
                g: 0,
                b: 0,
                a: 255
              };
              this.size = 0;
              this.deltaSize = 0;
              this.rotation = 0;
              this.deltaRotation = 0;
              this.timeToLive = 0;
              this.drawPos = new Vec2(0, 0);
              this.aspectRatio = 1;
              this.dir = new Vec2(0, 0);
              this.radialAccel = 0;
              this.tangentialAccel = 0;
              this.angle = 0;
              this.degreesPerSecond = 0;
              this.radius = 0;
              this.deltaRadius = 0;
            };

            var ParticlePool = function (_Pool) {
              _inheritsLoose(ParticlePool, _Pool);

              function ParticlePool() {
                return _Pool.apply(this, arguments) || this;
              }

              var _proto = ParticlePool.prototype;

              _proto.get = function get() {
                return this._get() || new Particle$1();
              };

              return ParticlePool;
            }(Pool$1);

            var pool$2 = new ParticlePool(function (par) {
              par.pos.set(ZERO_VEC2);
              par.startPos.set(ZERO_VEC2);
              par.color._val = 0xFF000000;
              par.deltaColor.r = par.deltaColor.g = par.deltaColor.b = 0;
              par.deltaColor.a = 255;
              par.size = 0;
              par.deltaSize = 0;
              par.rotation = 0;
              par.deltaRotation = 0;
              par.timeToLive = 0;
              par.drawPos.set(ZERO_VEC2);
              par.aspectRatio = 1;
              par.dir.set(ZERO_VEC2);
              par.radialAccel = 0;
              par.tangentialAccel = 0;
              par.angle = 0;
              par.degreesPerSecond = 0;
              par.radius = 0;
              par.deltaRadius = 0;
            }, 1024);
            var Simulator = function () {
              function Simulator(system) {
                this.particles = [];
                this.active = false;
                this.uvFilled = 0;
                this.finished = false;
                this.readyToPlay = true;
                this.elapsed = 0;
                this.emitCounter = 0;
                this._worldRotation = 0;
                this.sys = system;
                this.particles = [];
                this.active = false;
                this.readyToPlay = true;
                this.finished = false;
                this.elapsed = 0;
                this.emitCounter = 0;
                this.uvFilled = 0;
                this._worldRotation = 0;
              }

              var _proto2 = Simulator.prototype;

              _proto2.stop = function stop() {
                this.active = false;
                this.readyToPlay = false;
                this.elapsed = this.sys.duration;
                this.emitCounter = 0;
              };

              _proto2.reset = function reset() {
                this.active = true;
                this.readyToPlay = true;
                this.elapsed = 0;
                this.emitCounter = 0;
                this.finished = false;
                var particles = this.particles;

                for (var id = 0; id < particles.length; ++id) {
                  pool$2.put(particles[id]);
                }

                particles.length = 0;
              };

              _proto2.emitParticle = function emitParticle(pos) {
                var psys = this.sys;
                var particle = pool$2.get();
                this.particles.push(particle);
                particle.timeToLive = psys.life + psys.lifeVar * (Math.random() - 0.5) * 2;
                var timeToLive = particle.timeToLive = Math.max(0, particle.timeToLive);
                particle.pos.x = psys.sourcePos.x + psys.posVar.x * (Math.random() - 0.5) * 2;
                particle.pos.y = psys.sourcePos.y + psys.posVar.y * (Math.random() - 0.5) * 2;
                var sr = 0;
                var sg = 0;
                var sb = 0;
                var sa = 0;
                var startColor = psys.startColor;
                var startColorVar = psys.startColorVar;
                var endColor = psys.endColor;
                var endColorVar = psys.endColorVar;
                particle.color.r = sr = clampf(startColor.r + startColorVar.r * (Math.random() - 0.5) * 2, 0, 255);
                particle.color.g = sg = clampf(startColor.g + startColorVar.g * (Math.random() - 0.5) * 2, 0, 255);
                particle.color.b = sb = clampf(startColor.b + startColorVar.b * (Math.random() - 0.5) * 2, 0, 255);
                particle.color.a = sa = clampf(startColor.a + startColorVar.a * (Math.random() - 0.5) * 2, 0, 255);
                particle.deltaColor.r = (clampf(endColor.r + endColorVar.r * (Math.random() - 0.5) * 2, 0, 255) - sr) / timeToLive;
                particle.deltaColor.g = (clampf(endColor.g + endColorVar.g * (Math.random() - 0.5) * 2, 0, 255) - sg) / timeToLive;
                particle.deltaColor.b = (clampf(endColor.b + endColorVar.b * (Math.random() - 0.5) * 2, 0, 255) - sb) / timeToLive;
                particle.deltaColor.a = (clampf(endColor.a + endColorVar.a * (Math.random() - 0.5) * 2, 0, 255) - sa) / timeToLive;
                var startS = psys.startSize + psys.startSizeVar * (Math.random() - 0.5) * 2;
                startS = Math.max(0, startS);
                particle.size = startS;

                if (psys.endSize === START_SIZE_EQUAL_TO_END_SIZE) {
                  particle.deltaSize = 0;
                } else {
                  var endS = psys.endSize + psys.endSizeVar * (Math.random() - 0.5) * 2;
                  endS = Math.max(0, endS);
                  particle.deltaSize = (endS - startS) / timeToLive;
                }

                var startA = psys.startSpin + psys.startSpinVar * (Math.random() - 0.5) * 2;
                var endA = psys.endSpin + psys.endSpinVar * (Math.random() - 0.5) * 2;
                particle.rotation = startA;
                particle.deltaRotation = (endA - startA) / timeToLive;
                particle.startPos.x = pos.x;
                particle.startPos.y = pos.y;
                particle.aspectRatio = psys.aspectRatio || 1;
                var a = degreesToRadians(psys.angle + this._worldRotation + psys.angleVar * (Math.random() - 0.5) * 2);

                if (psys.emitterMode === EmitterMode.GRAVITY) {
                  var s = psys.speed + psys.speedVar * (Math.random() - 0.5) * 2;
                  particle.dir.x = Math.cos(a);
                  particle.dir.y = Math.sin(a);
                  particle.dir.multiplyScalar(s);
                  particle.radialAccel = psys.radialAccel + psys.radialAccelVar * (Math.random() - 0.5) * 2;
                  particle.tangentialAccel = psys.tangentialAccel + psys.tangentialAccelVar * (Math.random() - 0.5) * 2;

                  if (psys.rotationIsDir) {
                    particle.rotation = -radiansToDegrees(Math.atan2(particle.dir.y, particle.dir.x));
                  }
                } else {
                  var startRadius = psys.startRadius + psys.startRadiusVar * (Math.random() - 0.5) * 2;
                  var endRadius = psys.endRadius + psys.endRadiusVar * (Math.random() - 0.5) * 2;
                  particle.radius = startRadius;
                  particle.deltaRadius = psys.endRadius === START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (endRadius - startRadius) / timeToLive;
                  particle.angle = a;
                  particle.degreesPerSecond = degreesToRadians(psys.rotatePerS + psys.rotatePerSVar * (Math.random() - 0.5) * 2);
                }
              };

              _proto2.updateUVs = function updateUVs(force) {
                var renderData = this.renderData;

                if (renderData && this.sys._renderSpriteFrame) {
                  var vbuf = renderData.vData;
                  var uv = this.sys._renderSpriteFrame.uv;
                  var start = force ? 0 : this.uvFilled;
                  var particleCount = this.particles.length;

                  for (var i = start; i < particleCount; i++) {
                    var offset = i * formatBytes * 4;
                    vbuf[offset + 3] = uv[0];
                    vbuf[offset + 4] = uv[1];
                    vbuf[offset + 12] = uv[2];
                    vbuf[offset + 13] = uv[3];
                    vbuf[offset + 21] = uv[4];
                    vbuf[offset + 22] = uv[5];
                    vbuf[offset + 30] = uv[6];
                    vbuf[offset + 31] = uv[7];
                  }

                  this.uvFilled = particleCount;
                }
              };

              _proto2.updateParticleBuffer = function updateParticleBuffer(particle, pos, buffer, offset) {
                var vbuf = buffer.vData;
                var x = pos.x;
                var y = pos.y;
                var width = particle.size;
                var height = width;
                var aspectRatio = particle.aspectRatio;

                if (aspectRatio > 1) {
                  height = width / aspectRatio;
                } else {
                  width = height * aspectRatio;
                }

                var halfWidth = width / 2;
                var halfHeight = height / 2;

                if (particle.rotation) {
                  var x1 = -halfWidth;
                  var y1 = -halfHeight;
                  var x2 = halfWidth;
                  var y2 = halfHeight;
                  var rad = -degreesToRadians(particle.rotation);
                  var cr = Math.cos(rad);
                  var sr = Math.sin(rad);
                  vbuf[offset] = x1 * cr - y1 * sr + x;
                  vbuf[offset + 1] = x1 * sr + y1 * cr + y;
                  vbuf[offset + 2] = 0;
                  vbuf[offset + 9] = x2 * cr - y1 * sr + x;
                  vbuf[offset + 10] = x2 * sr + y1 * cr + y;
                  vbuf[offset + 11] = 0;
                  vbuf[offset + 18] = x1 * cr - y2 * sr + x;
                  vbuf[offset + 19] = x1 * sr + y2 * cr + y;
                  vbuf[offset + 20] = 0;
                  vbuf[offset + 27] = x2 * cr - y2 * sr + x;
                  vbuf[offset + 28] = x2 * sr + y2 * cr + y;
                  vbuf[offset + 29] = 0;
                } else {
                  vbuf[offset] = x - halfWidth;
                  vbuf[offset + 1] = y - halfHeight;
                  vbuf[offset + 2] = 0;
                  vbuf[offset + 9] = x + halfWidth;
                  vbuf[offset + 10] = y - halfHeight;
                  vbuf[offset + 11] = 0;
                  vbuf[offset + 18] = x - halfWidth;
                  vbuf[offset + 19] = y + halfHeight;
                  vbuf[offset + 20] = 0;
                  vbuf[offset + 27] = x + halfWidth;
                  vbuf[offset + 28] = y + halfHeight;
                  vbuf[offset + 29] = 0;
                }

                Color$1.toArray(vbuf, particle.color, offset + 5);
                Color$1.toArray(vbuf, particle.color, offset + 14);
                Color$1.toArray(vbuf, particle.color, offset + 23);
                Color$1.toArray(vbuf, particle.color, offset + 32);
              };

              _proto2.step = function step(dt) {
                var assembler = this.sys.assembler;
                var psys = this.sys;
                var node = psys.node;
                var particles = this.particles;
                dt = dt > assembler.maxParticleDeltaTime ? assembler.maxParticleDeltaTime : dt;
                node.updateWorldTransform();

                if (psys.positionType === PositionType.FREE) {
                  this._worldRotation = getWorldRotation(node);
                  var m = node.worldMatrix;
                  _pos.x = m.m12;
                  _pos.y = m.m13;
                } else if (psys.positionType === PositionType.RELATIVE) {
                  this._worldRotation = node.eulerAngles.z;
                  _pos.x = node.position.x;
                  _pos.y = node.position.y;
                } else {
                  this._worldRotation = 0;
                }

                if (this.active && psys.emissionRate) {
                  var rate = 1.0 / psys.emissionRate;
                  if (particles.length < psys.totalParticles) this.emitCounter += dt;

                  while (particles.length < psys.totalParticles && this.emitCounter > rate) {
                    this.emitParticle(_pos);
                    this.emitCounter -= rate;
                  }

                  this.elapsed += dt;

                  if (psys.duration !== -1 && psys.duration < this.elapsed) {
                    psys.stopSystem();
                  }
                }

                var renderData = this.renderData;
                var particleCount = particles.length;
                renderData.reset();
                this.requestData(particleCount * 4, particleCount * 6);

                if (particleCount > this.uvFilled) {
                  this.updateUVs();
                }

                var particleIdx = 0;

                while (particleIdx < particles.length) {
                  _tpa.x = _tpa.y = _tpb.x = _tpb.y = _tpc.x = _tpc.y = 0;
                  var particle = particles[particleIdx];
                  particle.timeToLive -= dt;

                  if (particle.timeToLive > 0) {
                    if (psys.emitterMode === EmitterMode.GRAVITY) {
                      var tmp = _tpc;
                      var radial = _tpa;
                      var tangential = _tpb;

                      if (particle.pos.x || particle.pos.y) {
                        radial.set(particle.pos);
                        radial.normalize();
                      }

                      tangential.set(radial);
                      radial.multiplyScalar(particle.radialAccel);
                      var newy = tangential.x;
                      tangential.x = -tangential.y;
                      tangential.y = newy;
                      tangential.multiplyScalar(particle.tangentialAccel);
                      tmp.set(radial);
                      tmp.add(tangential);
                      tmp.add(psys.gravity);
                      tmp.multiplyScalar(dt);
                      particle.dir.add(tmp);
                      tmp.set(particle.dir);
                      tmp.multiplyScalar(dt);
                      particle.pos.add(tmp);
                    } else {
                      particle.angle += particle.degreesPerSecond * dt;
                      particle.radius += particle.deltaRadius * dt;
                      particle.pos.x = -Math.cos(particle.angle) * particle.radius;
                      particle.pos.y = -Math.sin(particle.angle) * particle.radius;
                    }

                    particle.color.r += particle.deltaColor.r * dt;
                    particle.color.g += particle.deltaColor.g * dt;
                    particle.color.b += particle.deltaColor.b * dt;
                    particle.color.a += particle.deltaColor.a * dt;
                    particle.size += particle.deltaSize * dt;

                    if (particle.size < 0) {
                      particle.size = 0;
                    }

                    particle.rotation += particle.deltaRotation * dt;
                    var newPos = _tpa;
                    newPos.set(particle.pos);

                    if (psys.positionType !== PositionType.GROUPED) {
                      newPos.add(particle.startPos);
                    }

                    var offset = formatBytes * particleIdx * 4;
                    this.updateParticleBuffer(particle, newPos, renderData, offset);
                    ++particleIdx;
                  } else {
                    var deadParticle = particles[particleIdx];

                    if (particleIdx !== particles.length - 1) {
                      particles[particleIdx] = particles[particles.length - 1];
                    }

                    pool$2.put(deadParticle);
                    particles.length--;
                    renderData.resize(renderData.vertexCount - 4, renderData.indexCount - 6);
                  }
                }

                if (particles.length === 0 && !this.active && !this.readyToPlay) {
                  this.finished = true;

                  psys._finishedSimulation();
                }
              };

              _proto2.requestData = function requestData(vertexCount, indexCount) {
                var offset = this.renderData.indexCount;
                this.renderData.request(vertexCount, indexCount);
                var count = this.renderData.indexCount / 6;
                var buffer = this.renderData.iData;

                for (var i = offset; i < count; i++) {
                  var vId = i * 4;
                  buffer[offset++] = vId;
                  buffer[offset++] = vId + 1;
                  buffer[offset++] = vId + 2;
                  buffer[offset++] = vId + 1;
                  buffer[offset++] = vId + 3;
                  buffer[offset++] = vId + 2;
                }
              };

              return Simulator;
            }();

            var _dec$19, _class$1c, _class2$11, _descriptor$Z, _temp$15;
            var ParticleAsset = exports('ParticleAsset', (_dec$19 = ccclass('cc.ParticleAsset'), _dec$19(_class$1c = (_class2$11 = (_temp$15 = function (_Asset) {
              _inheritsLoose(ParticleAsset, _Asset);

              function ParticleAsset() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "spriteFrame", _descriptor$Z, _assertThisInitialized(_this));

                return _this;
              }

              return ParticleAsset;
            }(Asset), _temp$15), (_descriptor$Z = _applyDecoratedDescriptor(_class2$11.prototype, "spriteFrame", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$11)) || _class$1c));
            legacyCC.ParticleAsset = ParticleAsset;

            /** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */
            var window$1 = {};
            (function () {

              function i(a) {
                throw a;
              }

              var r = void 0,
                  v = !0,
                  aa = this;

              function y(a, c) {
                var b = a.split("."),
                    e = aa;
                !(b[0] in e) && e.execScript && e.execScript("var " + b[0]);

                for (var f; b.length && (f = b.shift());) {
                  !b.length && c !== r ? e[f] = c : e = e[f] ? e[f] : e[f] = {};
                }
              }
              var H = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Uint32Array;

              function ba(a) {
                if ("string" === typeof a) {
                  var c = a.split(""),
                      b,
                      e;
                  b = 0;

                  for (e = c.length; b < e; b++) {
                    c[b] = (c[b].charCodeAt(0) & 255) >>> 0;
                  }

                  a = c;
                }

                for (var f = 1, d = 0, g = a.length, h, m = 0; 0 < g;) {
                  h = 1024 < g ? 1024 : g;
                  g -= h;

                  do {
                    f += a[m++], d += f;
                  } while (--h);

                  f %= 65521;
                  d %= 65521;
                }

                return (d << 16 | f) >>> 0;
              }

              function J(a, c) {
                this.index = "number" === typeof c ? c : 0;
                this.i = 0;
                this.buffer = a instanceof (H ? Uint8Array : Array) ? a : new (H ? Uint8Array : Array)(32768);
                2 * this.buffer.length <= this.index && i(Error("invalid index"));
                this.buffer.length <= this.index && this.f();
              }

              J.prototype.f = function () {
                var a = this.buffer,
                    c,
                    b = a.length,
                    e = new (H ? Uint8Array : Array)(b << 1);
                if (H) e.set(a);else for (c = 0; c < b; ++c) {
                  e[c] = a[c];
                }
                return this.buffer = e;
              };

              J.prototype.d = function (a, c, b) {
                var e = this.buffer,
                    f = this.index,
                    d = this.i,
                    g = e[f],
                    h;
                b && 1 < c && (a = 8 < c ? (N[a & 255] << 24 | N[a >>> 8 & 255] << 16 | N[a >>> 16 & 255] << 8 | N[a >>> 24 & 255]) >> 32 - c : N[a] >> 8 - c);
                if (8 > c + d) g = g << c | a, d += c;else for (h = 0; h < c; ++h) {
                  g = g << 1 | a >> c - h - 1 & 1, 8 === ++d && (d = 0, e[f++] = N[g], g = 0, f === e.length && (e = this.f()));
                }
                e[f] = g;
                this.buffer = e;
                this.i = d;
                this.index = f;
              };

              J.prototype.finish = function () {
                var a = this.buffer,
                    c = this.index,
                    b;
                0 < this.i && (a[c] <<= 8 - this.i, a[c] = N[a[c]], c++);
                H ? b = a.subarray(0, c) : (a.length = c, b = a);
                return b;
              };

              var ca = new (H ? Uint8Array : Array)(256),
                  ha;

              for (ha = 0; 256 > ha; ++ha) {
                for (var R = ha, ia = R, ja = 7, R = R >>> 1; R; R >>>= 1) {
                  ia <<= 1, ia |= R & 1, --ja;
                }

                ca[ha] = (ia << ja & 255) >>> 0;
              }

              var N = ca;

              function la(a) {
                this.buffer = new (H ? Uint16Array : Array)(2 * a);
                this.length = 0;
              }

              la.prototype.getParent = function (a) {
                return 2 * ((a - 2) / 4 | 0);
              };

              la.prototype.push = function (a, c) {
                var b,
                    e,
                    f = this.buffer,
                    d;
                b = this.length;
                f[this.length++] = c;

                for (f[this.length++] = a; 0 < b;) {
                  if (e = this.getParent(b), f[b] > f[e]) d = f[b], f[b] = f[e], f[e] = d, d = f[b + 1], f[b + 1] = f[e + 1], f[e + 1] = d, b = e;else break;
                }

                return this.length;
              };

              la.prototype.pop = function () {
                var a,
                    c,
                    b = this.buffer,
                    e,
                    f,
                    d;
                c = b[0];
                a = b[1];
                this.length -= 2;
                b[0] = b[this.length];
                b[1] = b[this.length + 1];

                for (d = 0;;) {
                  f = 2 * d + 2;
                  if (f >= this.length) break;
                  f + 2 < this.length && b[f + 2] > b[f] && (f += 2);
                  if (b[f] > b[d]) e = b[d], b[d] = b[f], b[f] = e, e = b[d + 1], b[d + 1] = b[f + 1], b[f + 1] = e;else break;
                  d = f;
                }

                return {
                  index: a,
                  value: c,
                  length: this.length
                };
              };

              function S(a) {
                var c = a.length,
                    b = 0,
                    e = Number.POSITIVE_INFINITY,
                    f,
                    d,
                    g,
                    h,
                    m,
                    j,
                    s,
                    n,
                    l;

                for (n = 0; n < c; ++n) {
                  a[n] > b && (b = a[n]), a[n] < e && (e = a[n]);
                }

                f = 1 << b;
                d = new (H ? Uint32Array : Array)(f);
                g = 1;
                h = 0;

                for (m = 2; g <= b;) {
                  for (n = 0; n < c; ++n) {
                    if (a[n] === g) {
                      j = 0;
                      s = h;

                      for (l = 0; l < g; ++l) {
                        j = j << 1 | s & 1, s >>= 1;
                      }

                      for (l = j; l < f; l += m) {
                        d[l] = g << 16 | n;
                      }

                      ++h;
                    }
                  }

                  ++g;
                  h <<= 1;
                  m <<= 1;
                }

                return [d, b, e];
              }

              function ma(a, c) {
                this.h = pa;
                this.w = 0;
                this.input = a;
                this.b = 0;
                c && (c.lazy && (this.w = c.lazy), "number" === typeof c.compressionType && (this.h = c.compressionType), c.outputBuffer && (this.a = H && c.outputBuffer instanceof Array ? new Uint8Array(c.outputBuffer) : c.outputBuffer), "number" === typeof c.outputIndex && (this.b = c.outputIndex));
                this.a || (this.a = new (H ? Uint8Array : Array)(32768));
              }

              var pa = 2,
                  qa = {
                NONE: 0,
                r: 1,
                j: pa,
                N: 3
              },
                  ra = [],
                  T;

              for (T = 0; 288 > T; T++) {
                switch (v) {
                  case 143 >= T:
                    ra.push([T + 48, 8]);
                    break;

                  case 255 >= T:
                    ra.push([T - 144 + 400, 9]);
                    break;

                  case 279 >= T:
                    ra.push([T - 256 + 0, 7]);
                    break;

                  case 287 >= T:
                    ra.push([T - 280 + 192, 8]);
                    break;

                  default:
                    i("invalid literal: " + T);
                }
              }

              ma.prototype.n = function () {
                var a,
                    c,
                    b,
                    e,
                    f = this.input;

                switch (this.h) {
                  case 0:
                    b = 0;

                    for (e = f.length; b < e;) {
                      c = H ? f.subarray(b, b + 65535) : f.slice(b, b + 65535);
                      b += c.length;
                      var d = c,
                          g = b === e,
                          h = r,
                          m = r,
                          j = r,
                          s = r,
                          n = r,
                          l = this.a,
                          q = this.b;

                      if (H) {
                        for (l = new Uint8Array(this.a.buffer); l.length <= q + d.length + 5;) {
                          l = new Uint8Array(l.length << 1);
                        }

                        l.set(this.a);
                      }

                      h = g ? 1 : 0;
                      l[q++] = h | 0;
                      m = d.length;
                      j = ~m + 65536 & 65535;
                      l[q++] = m & 255;
                      l[q++] = m >>> 8 & 255;
                      l[q++] = j & 255;
                      l[q++] = j >>> 8 & 255;
                      if (H) l.set(d, q), q += d.length, l = l.subarray(0, q);else {
                        s = 0;

                        for (n = d.length; s < n; ++s) {
                          l[q++] = d[s];
                        }

                        l.length = q;
                      }
                      this.b = q;
                      this.a = l;
                    }

                    break;

                  case 1:
                    var E = new J(new Uint8Array(this.a.buffer), this.b);
                    E.d(1, 1, v);
                    E.d(1, 2, v);
                    var t = sa(this, f),
                        z,
                        K,
                        A;
                    z = 0;

                    for (K = t.length; z < K; z++) {
                      if (A = t[z], J.prototype.d.apply(E, ra[A]), 256 < A) E.d(t[++z], t[++z], v), E.d(t[++z], 5), E.d(t[++z], t[++z], v);else if (256 === A) break;
                    }

                    this.a = E.finish();
                    this.b = this.a.length;
                    break;

                  case pa:
                    var x = new J(new Uint8Array(this.a), this.b),
                        B,
                        k,
                        p,
                        D,
                        C,
                        da = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
                        W,
                        Ma,
                        ea,
                        Na,
                        na,
                        va = Array(19),
                        Oa,
                        $,
                        oa,
                        F,
                        Pa;
                    B = pa;
                    x.d(1, 1, v);
                    x.d(B, 2, v);
                    k = sa(this, f);
                    W = ta(this.L, 15);
                    Ma = ua(W);
                    ea = ta(this.K, 7);
                    Na = ua(ea);

                    for (p = 286; 257 < p && 0 === W[p - 1]; p--) {
                    }

                    for (D = 30; 1 < D && 0 === ea[D - 1]; D--) {
                    }

                    var Qa = p,
                        Ra = D,
                        M = new (H ? Uint32Array : Array)(Qa + Ra),
                        u,
                        O,
                        w,
                        fa,
                        L = new (H ? Uint32Array : Array)(316),
                        I,
                        G,
                        P = new (H ? Uint8Array : Array)(19);

                    for (u = O = 0; u < Qa; u++) {
                      M[O++] = W[u];
                    }

                    for (u = 0; u < Ra; u++) {
                      M[O++] = ea[u];
                    }

                    if (!H) {
                      u = 0;

                      for (fa = P.length; u < fa; ++u) {
                        P[u] = 0;
                      }
                    }

                    u = I = 0;

                    for (fa = M.length; u < fa; u += O) {
                      for (O = 1; u + O < fa && M[u + O] === M[u]; ++O) {
                      }

                      w = O;
                      if (0 === M[u]) {
                        if (3 > w) for (; 0 < w--;) {
                          L[I++] = 0, P[0]++;
                        } else for (; 0 < w;) {
                          G = 138 > w ? w : 138, G > w - 3 && G < w && (G = w - 3), 10 >= G ? (L[I++] = 17, L[I++] = G - 3, P[17]++) : (L[I++] = 18, L[I++] = G - 11, P[18]++), w -= G;
                        }
                      } else if (L[I++] = M[u], P[M[u]]++, w--, 3 > w) for (; 0 < w--;) {
                        L[I++] = M[u], P[M[u]]++;
                      } else for (; 0 < w;) {
                        G = 6 > w ? w : 6, G > w - 3 && G < w && (G = w - 3), L[I++] = 16, L[I++] = G - 3, P[16]++, w -= G;
                      }
                    }

                    a = H ? L.subarray(0, I) : L.slice(0, I);
                    na = ta(P, 7);

                    for (F = 0; 19 > F; F++) {
                      va[F] = na[da[F]];
                    }

                    for (C = 19; 4 < C && 0 === va[C - 1]; C--) {
                    }

                    Oa = ua(na);
                    x.d(p - 257, 5, v);
                    x.d(D - 1, 5, v);
                    x.d(C - 4, 4, v);

                    for (F = 0; F < C; F++) {
                      x.d(va[F], 3, v);
                    }

                    F = 0;

                    for (Pa = a.length; F < Pa; F++) {
                      if ($ = a[F], x.d(Oa[$], na[$], v), 16 <= $) {
                        F++;

                        switch ($) {
                          case 16:
                            oa = 2;
                            break;

                          case 17:
                            oa = 3;
                            break;

                          case 18:
                            oa = 7;
                            break;

                          default:
                            i("invalid code: " + $);
                        }

                        x.d(a[F], oa, v);
                      }
                    }

                    var Sa = [Ma, W],
                        Ta = [Na, ea],
                        Q,
                        Ua,
                        ga,
                        ya,
                        Va,
                        Wa,
                        Xa,
                        Ya;
                    Va = Sa[0];
                    Wa = Sa[1];
                    Xa = Ta[0];
                    Ya = Ta[1];
                    Q = 0;

                    for (Ua = k.length; Q < Ua; ++Q) {
                      if (ga = k[Q], x.d(Va[ga], Wa[ga], v), 256 < ga) x.d(k[++Q], k[++Q], v), ya = k[++Q], x.d(Xa[ya], Ya[ya], v), x.d(k[++Q], k[++Q], v);else if (256 === ga) break;
                    }

                    this.a = x.finish();
                    this.b = this.a.length;
                    break;

                  default:
                    i("invalid compression type");
                }

                return this.a;
              };

              function wa(a, c) {
                this.length = a;
                this.G = c;
              }

              function xa() {
                var a = za;

                switch (v) {
                  case 3 === a:
                    return [257, a - 3, 0];

                  case 4 === a:
                    return [258, a - 4, 0];

                  case 5 === a:
                    return [259, a - 5, 0];

                  case 6 === a:
                    return [260, a - 6, 0];

                  case 7 === a:
                    return [261, a - 7, 0];

                  case 8 === a:
                    return [262, a - 8, 0];

                  case 9 === a:
                    return [263, a - 9, 0];

                  case 10 === a:
                    return [264, a - 10, 0];

                  case 12 >= a:
                    return [265, a - 11, 1];

                  case 14 >= a:
                    return [266, a - 13, 1];

                  case 16 >= a:
                    return [267, a - 15, 1];

                  case 18 >= a:
                    return [268, a - 17, 1];

                  case 22 >= a:
                    return [269, a - 19, 2];

                  case 26 >= a:
                    return [270, a - 23, 2];

                  case 30 >= a:
                    return [271, a - 27, 2];

                  case 34 >= a:
                    return [272, a - 31, 2];

                  case 42 >= a:
                    return [273, a - 35, 3];

                  case 50 >= a:
                    return [274, a - 43, 3];

                  case 58 >= a:
                    return [275, a - 51, 3];

                  case 66 >= a:
                    return [276, a - 59, 3];

                  case 82 >= a:
                    return [277, a - 67, 4];

                  case 98 >= a:
                    return [278, a - 83, 4];

                  case 114 >= a:
                    return [279, a - 99, 4];

                  case 130 >= a:
                    return [280, a - 115, 4];

                  case 162 >= a:
                    return [281, a - 131, 5];

                  case 194 >= a:
                    return [282, a - 163, 5];

                  case 226 >= a:
                    return [283, a - 195, 5];

                  case 257 >= a:
                    return [284, a - 227, 5];

                  case 258 === a:
                    return [285, a - 258, 0];

                  default:
                    i("invalid length: " + a);
                }
              }

              var Aa = [],
                  za,
                  Ba;

              for (za = 3; 258 >= za; za++) {
                Ba = xa(), Aa[za] = Ba[2] << 24 | Ba[1] << 16 | Ba[0];
              }

              var Ca = H ? new Uint32Array(Aa) : Aa;

              function sa(a, c) {
                function b(a, c) {
                  var b = a.G,
                      d = [],
                      e = 0,
                      f;
                  f = Ca[a.length];
                  d[e++] = f & 65535;
                  d[e++] = f >> 16 & 255;
                  d[e++] = f >> 24;
                  var g;

                  switch (v) {
                    case 1 === b:
                      g = [0, b - 1, 0];
                      break;

                    case 2 === b:
                      g = [1, b - 2, 0];
                      break;

                    case 3 === b:
                      g = [2, b - 3, 0];
                      break;

                    case 4 === b:
                      g = [3, b - 4, 0];
                      break;

                    case 6 >= b:
                      g = [4, b - 5, 1];
                      break;

                    case 8 >= b:
                      g = [5, b - 7, 1];
                      break;

                    case 12 >= b:
                      g = [6, b - 9, 2];
                      break;

                    case 16 >= b:
                      g = [7, b - 13, 2];
                      break;

                    case 24 >= b:
                      g = [8, b - 17, 3];
                      break;

                    case 32 >= b:
                      g = [9, b - 25, 3];
                      break;

                    case 48 >= b:
                      g = [10, b - 33, 4];
                      break;

                    case 64 >= b:
                      g = [11, b - 49, 4];
                      break;

                    case 96 >= b:
                      g = [12, b - 65, 5];
                      break;

                    case 128 >= b:
                      g = [13, b - 97, 5];
                      break;

                    case 192 >= b:
                      g = [14, b - 129, 6];
                      break;

                    case 256 >= b:
                      g = [15, b - 193, 6];
                      break;

                    case 384 >= b:
                      g = [16, b - 257, 7];
                      break;

                    case 512 >= b:
                      g = [17, b - 385, 7];
                      break;

                    case 768 >= b:
                      g = [18, b - 513, 8];
                      break;

                    case 1024 >= b:
                      g = [19, b - 769, 8];
                      break;

                    case 1536 >= b:
                      g = [20, b - 1025, 9];
                      break;

                    case 2048 >= b:
                      g = [21, b - 1537, 9];
                      break;

                    case 3072 >= b:
                      g = [22, b - 2049, 10];
                      break;

                    case 4096 >= b:
                      g = [23, b - 3073, 10];
                      break;

                    case 6144 >= b:
                      g = [24, b - 4097, 11];
                      break;

                    case 8192 >= b:
                      g = [25, b - 6145, 11];
                      break;

                    case 12288 >= b:
                      g = [26, b - 8193, 12];
                      break;

                    case 16384 >= b:
                      g = [27, b - 12289, 12];
                      break;

                    case 24576 >= b:
                      g = [28, b - 16385, 13];
                      break;

                    case 32768 >= b:
                      g = [29, b - 24577, 13];
                      break;

                    default:
                      i("invalid distance");
                  }

                  f = g;
                  d[e++] = f[0];
                  d[e++] = f[1];
                  d[e++] = f[2];
                  var h, j;
                  h = 0;

                  for (j = d.length; h < j; ++h) {
                    l[q++] = d[h];
                  }

                  t[d[0]]++;
                  z[d[3]]++;
                  E = a.length + c - 1;
                  n = null;
                }

                var e,
                    f,
                    d,
                    g,
                    h,
                    m = {},
                    j,
                    s,
                    n,
                    l = H ? new Uint16Array(2 * c.length) : [],
                    q = 0,
                    E = 0,
                    t = new (H ? Uint32Array : Array)(286),
                    z = new (H ? Uint32Array : Array)(30),
                    K = a.w,
                    A;

                if (!H) {
                  for (d = 0; 285 >= d;) {
                    t[d++] = 0;
                  }

                  for (d = 0; 29 >= d;) {
                    z[d++] = 0;
                  }
                }

                t[256] = 1;
                e = 0;

                for (f = c.length; e < f; ++e) {
                  d = h = 0;

                  for (g = 3; d < g && e + d !== f; ++d) {
                    h = h << 8 | c[e + d];
                  }

                  m[h] === r && (m[h] = []);
                  j = m[h];

                  if (!(0 < E--)) {
                    for (; 0 < j.length && 32768 < e - j[0];) {
                      j.shift();
                    }

                    if (e + 3 >= f) {
                      n && b(n, -1);
                      d = 0;

                      for (g = f - e; d < g; ++d) {
                        A = c[e + d], l[q++] = A, ++t[A];
                      }

                      break;
                    }

                    if (0 < j.length) {
                      var x = r,
                          B = r,
                          k = 0,
                          p = r,
                          D = r,
                          C = r,
                          da = r,
                          W = c.length,
                          D = 0,
                          da = j.length;

                      a: for (; D < da; D++) {
                        x = j[da - D - 1];
                        p = 3;

                        if (3 < k) {
                          for (C = k; 3 < C; C--) {
                            if (c[x + C - 1] !== c[e + C - 1]) continue a;
                          }

                          p = k;
                        }

                        for (; 258 > p && e + p < W && c[x + p] === c[e + p];) {
                          ++p;
                        }

                        p > k && (B = x, k = p);
                        if (258 === p) break;
                      }

                      s = new wa(k, e - B);
                      n ? n.length < s.length ? (A = c[e - 1], l[q++] = A, ++t[A], b(s, 0)) : b(n, -1) : s.length < K ? n = s : b(s, 0);
                    } else n ? b(n, -1) : (A = c[e], l[q++] = A, ++t[A]);
                  }

                  j.push(e);
                }

                l[q++] = 256;
                t[256]++;
                a.L = t;
                a.K = z;
                return H ? l.subarray(0, q) : l;
              }

              function ta(a, c) {
                function b(a) {
                  var c = z[a][K[a]];
                  c === n ? (b(a + 1), b(a + 1)) : --E[c];
                  ++K[a];
                }

                var e = a.length,
                    f = new la(572),
                    d = new (H ? Uint8Array : Array)(e),
                    g,
                    h,
                    m,
                    j,
                    s;
                if (!H) for (j = 0; j < e; j++) {
                  d[j] = 0;
                }

                for (j = 0; j < e; ++j) {
                  0 < a[j] && f.push(j, a[j]);
                }

                g = Array(f.length / 2);
                h = new (H ? Uint32Array : Array)(f.length / 2);
                if (1 === g.length) return d[f.pop().index] = 1, d;
                j = 0;

                for (s = f.length / 2; j < s; ++j) {
                  g[j] = f.pop(), h[j] = g[j].value;
                }

                var n = h.length,
                    l = new (H ? Uint16Array : Array)(c),
                    q = new (H ? Uint8Array : Array)(c),
                    E = new (H ? Uint8Array : Array)(n),
                    t = Array(c),
                    z = Array(c),
                    K = Array(c),
                    A = (1 << c) - n,
                    x = 1 << c - 1,
                    B,
                    k,
                    p,
                    D,
                    C;
                l[c - 1] = n;

                for (k = 0; k < c; ++k) {
                  A < x ? q[k] = 0 : (q[k] = 1, A -= x), A <<= 1, l[c - 2 - k] = (l[c - 1 - k] / 2 | 0) + n;
                }

                l[0] = q[0];
                t[0] = Array(l[0]);
                z[0] = Array(l[0]);

                for (k = 1; k < c; ++k) {
                  l[k] > 2 * l[k - 1] + q[k] && (l[k] = 2 * l[k - 1] + q[k]), t[k] = Array(l[k]), z[k] = Array(l[k]);
                }

                for (B = 0; B < n; ++B) {
                  E[B] = c;
                }

                for (p = 0; p < l[c - 1]; ++p) {
                  t[c - 1][p] = h[p], z[c - 1][p] = p;
                }

                for (B = 0; B < c; ++B) {
                  K[B] = 0;
                }

                1 === q[c - 1] && (--E[0], ++K[c - 1]);

                for (k = c - 2; 0 <= k; --k) {
                  D = B = 0;
                  C = K[k + 1];

                  for (p = 0; p < l[k]; p++) {
                    D = t[k + 1][C] + t[k + 1][C + 1], D > h[B] ? (t[k][p] = D, z[k][p] = n, C += 2) : (t[k][p] = h[B], z[k][p] = B, ++B);
                  }

                  K[k] = 0;
                  1 === q[k] && b(k);
                }

                m = E;
                j = 0;

                for (s = g.length; j < s; ++j) {
                  d[g[j].index] = m[j];
                }

                return d;
              }

              function ua(a) {
                var c = new (H ? Uint16Array : Array)(a.length),
                    b = [],
                    e = [],
                    f = 0,
                    d,
                    g,
                    h,
                    m;
                d = 0;

                for (g = a.length; d < g; d++) {
                  b[a[d]] = (b[a[d]] | 0) + 1;
                }

                d = 1;

                for (g = 16; d <= g; d++) {
                  e[d] = f, f += b[d] | 0, f > 1 << d && i("overcommitted"), f <<= 1;
                }

                65536 > f && i("undercommitted");
                d = 0;

                for (g = a.length; d < g; d++) {
                  f = e[a[d]];
                  e[a[d]] += 1;
                  h = c[d] = 0;

                  for (m = a[d]; h < m; h++) {
                    c[d] = c[d] << 1 | f & 1, f >>>= 1;
                  }
                }

                return c;
              }

              function Da(a, c) {
                this.input = a;
                this.a = new (H ? Uint8Array : Array)(32768);
                this.h = U.j;
                var b = {},
                    e;
                if ((c || !(c = {})) && "number" === typeof c.compressionType) this.h = c.compressionType;

                for (e in c) {
                  b[e] = c[e];
                }

                b.outputBuffer = this.a;
                this.z = new ma(this.input, b);
              }

              var U = qa;

              Da.prototype.n = function () {
                var a,
                    c,
                    b,
                    e,
                    f,
                    d,
                    g,
                    h = 0;
                g = this.a;
                a = Ea;

                switch (a) {
                  case Ea:
                    c = Math.LOG2E * Math.log(32768) - 8;
                    break;

                  default:
                    i(Error("invalid compression method"));
                }

                b = c << 4 | a;
                g[h++] = b;

                switch (a) {
                  case Ea:
                    switch (this.h) {
                      case U.NONE:
                        f = 0;
                        break;

                      case U.r:
                        f = 1;
                        break;

                      case U.j:
                        f = 2;
                        break;

                      default:
                        i(Error("unsupported compression type"));
                    }

                    break;

                  default:
                    i(Error("invalid compression method"));
                }

                e = f << 6 | 0;
                g[h++] = e | 31 - (256 * b + e) % 31;
                d = ba(this.input);
                this.z.b = h;
                g = this.z.n();
                h = g.length;
                H && (g = new Uint8Array(g.buffer), g.length <= h + 4 && (this.a = new Uint8Array(g.length + 4), this.a.set(g), g = this.a), g = g.subarray(0, h + 4));
                g[h++] = d >> 24 & 255;
                g[h++] = d >> 16 & 255;
                g[h++] = d >> 8 & 255;
                g[h++] = d & 255;
                return g;
              };

              y("Zlib.Deflate", Da);
              y("Zlib.Deflate.compress", function (a, c) {
                return new Da(a, c).n();
              });
              y("Zlib.Deflate.CompressionType", U);
              y("Zlib.Deflate.CompressionType.NONE", U.NONE);
              y("Zlib.Deflate.CompressionType.FIXED", U.r);
              y("Zlib.Deflate.CompressionType.DYNAMIC", U.j);

              function V(a, c) {
                this.k = [];
                this.l = 32768;
                this.e = this.g = this.c = this.q = 0;
                this.input = H ? new Uint8Array(a) : a;
                this.s = !1;
                this.m = Fa;
                this.B = !1;
                if (c || !(c = {})) c.index && (this.c = c.index), c.bufferSize && (this.l = c.bufferSize), c.bufferType && (this.m = c.bufferType), c.resize && (this.B = c.resize);

                switch (this.m) {
                  case Ga:
                    this.b = 32768;
                    this.a = new (H ? Uint8Array : Array)(32768 + this.l + 258);
                    break;

                  case Fa:
                    this.b = 0;
                    this.a = new (H ? Uint8Array : Array)(this.l);
                    this.f = this.J;
                    this.t = this.H;
                    this.o = this.I;
                    break;

                  default:
                    i(Error("invalid inflate mode"));
                }
              }

              var Ga = 0,
                  Fa = 1,
                  Ha = {
                D: Ga,
                C: Fa
              };

              V.prototype.p = function () {
                for (; !this.s;) {
                  var a = X(this, 3);
                  a & 1 && (this.s = v);
                  a >>>= 1;

                  switch (a) {
                    case 0:
                      var c = this.input,
                          b = this.c,
                          e = this.a,
                          f = this.b,
                          d = r,
                          g = r,
                          h = r,
                          m = e.length,
                          j = r;
                      this.e = this.g = 0;
                      d = c[b++];
                      d === r && i(Error("invalid uncompressed block header: LEN (first byte)"));
                      g = d;
                      d = c[b++];
                      d === r && i(Error("invalid uncompressed block header: LEN (second byte)"));
                      g |= d << 8;
                      d = c[b++];
                      d === r && i(Error("invalid uncompressed block header: NLEN (first byte)"));
                      h = d;
                      d = c[b++];
                      d === r && i(Error("invalid uncompressed block header: NLEN (second byte)"));
                      h |= d << 8;
                      g === ~h && i(Error("invalid uncompressed block header: length verify"));
                      b + g > c.length && i(Error("input buffer is broken"));

                      switch (this.m) {
                        case Ga:
                          for (; f + g > e.length;) {
                            j = m - f;
                            g -= j;
                            if (H) e.set(c.subarray(b, b + j), f), f += j, b += j;else for (; j--;) {
                              e[f++] = c[b++];
                            }
                            this.b = f;
                            e = this.f();
                            f = this.b;
                          }

                          break;

                        case Fa:
                          for (; f + g > e.length;) {
                            e = this.f({
                              v: 2
                            });
                          }

                          break;

                        default:
                          i(Error("invalid inflate mode"));
                      }

                      if (H) e.set(c.subarray(b, b + g), f), f += g, b += g;else for (; g--;) {
                        e[f++] = c[b++];
                      }
                      this.c = b;
                      this.b = f;
                      this.a = e;
                      break;

                    case 1:
                      this.o(Ia, Ja);
                      break;

                    case 2:
                      Ka(this);
                      break;

                    default:
                      i(Error("unknown BTYPE: " + a));
                  }
                }

                return this.t();
              };

              var La = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
                  Za = H ? new Uint16Array(La) : La,
                  $a = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258],
                  ab = H ? new Uint16Array($a) : $a,
                  bb = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0],
                  cb = H ? new Uint8Array(bb) : bb,
                  db = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577],
                  eb = H ? new Uint16Array(db) : db,
                  fb = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],
                  gb = H ? new Uint8Array(fb) : fb,
                  hb = new (H ? Uint8Array : Array)(288),
                  Y,
                  ib;
              Y = 0;

              for (ib = hb.length; Y < ib; ++Y) {
                hb[Y] = 143 >= Y ? 8 : 255 >= Y ? 9 : 279 >= Y ? 7 : 8;
              }

              var Ia = S(hb),
                  jb = new (H ? Uint8Array : Array)(30),
                  kb,
                  lb;
              kb = 0;

              for (lb = jb.length; kb < lb; ++kb) {
                jb[kb] = 5;
              }

              var Ja = S(jb);

              function X(a, c) {
                for (var b = a.g, e = a.e, f = a.input, d = a.c, g; e < c;) {
                  g = f[d++], g === r && i(Error("input buffer is broken")), b |= g << e, e += 8;
                }

                g = b & (1 << c) - 1;
                a.g = b >>> c;
                a.e = e - c;
                a.c = d;
                return g;
              }

              function mb(a, c) {
                for (var b = a.g, e = a.e, f = a.input, d = a.c, g = c[0], h = c[1], m, j, s; e < h;) {
                  m = f[d++], m === r && i(Error("input buffer is broken")), b |= m << e, e += 8;
                }

                j = g[b & (1 << h) - 1];
                s = j >>> 16;
                a.g = b >> s;
                a.e = e - s;
                a.c = d;
                return j & 65535;
              }

              function Ka(a) {
                function c(a, b, c) {
                  var d, e, f, g;

                  for (g = 0; g < a;) {
                    switch (d = mb(this, b), d) {
                      case 16:
                        for (f = 3 + X(this, 2); f--;) {
                          c[g++] = e;
                        }

                        break;

                      case 17:
                        for (f = 3 + X(this, 3); f--;) {
                          c[g++] = 0;
                        }

                        e = 0;
                        break;

                      case 18:
                        for (f = 11 + X(this, 7); f--;) {
                          c[g++] = 0;
                        }

                        e = 0;
                        break;

                      default:
                        e = c[g++] = d;
                    }
                  }

                  return c;
                }

                var b = X(a, 5) + 257,
                    e = X(a, 5) + 1,
                    f = X(a, 4) + 4,
                    d = new (H ? Uint8Array : Array)(Za.length),
                    g,
                    h,
                    m,
                    j;

                for (j = 0; j < f; ++j) {
                  d[Za[j]] = X(a, 3);
                }

                g = S(d);
                h = new (H ? Uint8Array : Array)(b);
                m = new (H ? Uint8Array : Array)(e);
                a.o(S(c.call(a, b, g, h)), S(c.call(a, e, g, m)));
              }

              V.prototype.o = function (a, c) {
                var b = this.a,
                    e = this.b;
                this.u = a;

                for (var f = b.length - 258, d, g, h, m; 256 !== (d = mb(this, a));) {
                  if (256 > d) e >= f && (this.b = e, b = this.f(), e = this.b), b[e++] = d;else {
                    g = d - 257;
                    m = ab[g];
                    0 < cb[g] && (m += X(this, cb[g]));
                    d = mb(this, c);
                    h = eb[d];
                    0 < gb[d] && (h += X(this, gb[d]));
                    e >= f && (this.b = e, b = this.f(), e = this.b);

                    for (; m--;) {
                      b[e] = b[e++ - h];
                    }
                  }
                }

                for (; 8 <= this.e;) {
                  this.e -= 8, this.c--;
                }

                this.b = e;
              };

              V.prototype.I = function (a, c) {
                var b = this.a,
                    e = this.b;
                this.u = a;

                for (var f = b.length, d, g, h, m; 256 !== (d = mb(this, a));) {
                  if (256 > d) e >= f && (b = this.f(), f = b.length), b[e++] = d;else {
                    g = d - 257;
                    m = ab[g];
                    0 < cb[g] && (m += X(this, cb[g]));
                    d = mb(this, c);
                    h = eb[d];
                    0 < gb[d] && (h += X(this, gb[d]));
                    e + m > f && (b = this.f(), f = b.length);

                    for (; m--;) {
                      b[e] = b[e++ - h];
                    }
                  }
                }

                for (; 8 <= this.e;) {
                  this.e -= 8, this.c--;
                }

                this.b = e;
              };

              V.prototype.f = function () {
                var a = new (H ? Uint8Array : Array)(this.b - 32768),
                    c = this.b - 32768,
                    b,
                    e,
                    f = this.a;
                if (H) a.set(f.subarray(32768, a.length));else {
                  b = 0;

                  for (e = a.length; b < e; ++b) {
                    a[b] = f[b + 32768];
                  }
                }
                this.k.push(a);
                this.q += a.length;
                if (H) f.set(f.subarray(c, c + 32768));else for (b = 0; 32768 > b; ++b) {
                  f[b] = f[c + b];
                }
                this.b = 32768;
                return f;
              };

              V.prototype.J = function (a) {
                var c,
                    b = this.input.length / this.c + 1 | 0,
                    e,
                    f,
                    d,
                    g = this.input,
                    h = this.a;
                a && ("number" === typeof a.v && (b = a.v), "number" === typeof a.F && (b += a.F));
                2 > b ? (e = (g.length - this.c) / this.u[2], d = 258 * (e / 2) | 0, f = d < h.length ? h.length + d : h.length << 1) : f = h.length * b;
                H ? (c = new Uint8Array(f), c.set(h)) : c = h;
                return this.a = c;
              };

              V.prototype.t = function () {
                var a = 0,
                    c = this.a,
                    b = this.k,
                    e,
                    f = new (H ? Uint8Array : Array)(this.q + (this.b - 32768)),
                    d,
                    g,
                    h,
                    m;
                if (0 === b.length) return H ? this.a.subarray(32768, this.b) : this.a.slice(32768, this.b);
                d = 0;

                for (g = b.length; d < g; ++d) {
                  e = b[d];
                  h = 0;

                  for (m = e.length; h < m; ++h) {
                    f[a++] = e[h];
                  }
                }

                d = 32768;

                for (g = this.b; d < g; ++d) {
                  f[a++] = c[d];
                }

                this.k = [];
                return this.buffer = f;
              };

              V.prototype.H = function () {
                var a,
                    c = this.b;
                H ? this.B ? (a = new Uint8Array(c), a.set(this.a.subarray(0, c))) : a = this.a.subarray(0, c) : (this.a.length > c && (this.a.length = c), a = this.a);
                return this.buffer = a;
              };

              function nb(a, c) {
                var b, e;
                this.input = a;
                this.c = 0;
                if (c || !(c = {})) c.index && (this.c = c.index), c.verify && (this.M = c.verify);
                b = a[this.c++];
                e = a[this.c++];

                switch (b & 15) {
                  case Ea:
                    this.method = Ea;
                    break;

                  default:
                    i(Error("unsupported compression method"));
                }

                0 !== ((b << 8) + e) % 31 && i(Error("invalid fcheck flag:" + ((b << 8) + e) % 31));
                e & 32 && i(Error("fdict flag is not supported"));
                this.A = new V(a, {
                  index: this.c,
                  bufferSize: c.bufferSize,
                  bufferType: c.bufferType,
                  resize: c.resize
                });
              }

              nb.prototype.p = function () {
                var a = this.input,
                    c,
                    b;
                c = this.A.p();
                this.c = this.A.c;
                this.M && (b = (a[this.c++] << 24 | a[this.c++] << 16 | a[this.c++] << 8 | a[this.c++]) >>> 0, b !== ba(c) && i(Error("invalid adler-32 checksum")));
                return c;
              };

              y("Zlib.Inflate", nb);
              y("Zlib.Inflate.BufferType", Ha);
              Ha.ADAPTIVE = Ha.C;
              Ha.BLOCK = Ha.D;
              y("Zlib.Inflate.prototype.decompress", nb.prototype.p);
              var tb = new (H ? Uint8Array : Array)(288),
                  Z,
                  ub;
              Z = 0;

              for (ub = tb.length; Z < ub; ++Z) {
                tb[Z] = 143 >= Z ? 8 : 255 >= Z ? 9 : 279 >= Z ? 7 : 8;
              }

              S(tb);
              var vb = new (H ? Uint8Array : Array)(30),
                  wb,
                  xb;
              wb = 0;

              for (xb = vb.length; wb < xb; ++wb) {
                vb[wb] = 5;
              }

              S(vb);
              var Ea = 8;
            }).call(window$1);
            var _p = window$1.Zlib;
            _p.Deflate = _p["Deflate"];
            _p.Deflate.compress = _p.Deflate["compress"];
            _p.Inflate = _p["Inflate"];
            _p.Inflate.BufferType = _p.Inflate["BufferType"];
            _p.Inflate.prototype.decompress = _p.Inflate.prototype["decompress"];

            var PNGReader = function () {
              function PNGReader(data) {
                var _this = this;

                this.pos = 8;
                this.palette = [];
                this.imgData = [];
                this.text = {};
                this.width = 0;
                this.height = 0;
                this.bits = 0;
                this.colorType = 0;
                this.compressionMethod = 0;
                this.filterMethod = 0;
                this.interlaceMethod = 0;
                this.colors = 0;
                this.hasAlphaChannel = false;
                this.pixelBitlength = 0;
                this.data = data;
                this.transparency = {
                  indexed: [],
                  rgb: 0,
                  grayscale: 0
                };
                var frame;
                var i = 0;
                var _i = 0;
                var _j = 0;
                var chunkSize = 0;

                while (true) {
                  chunkSize = this.readUInt32();

                  var section = function () {
                    var _results = [];

                    for (i = _i = 0; _i < 4; i = ++_i) {
                      _results.push(String.fromCharCode(_this.data[_this.pos++]));
                    }

                    return _results;
                  }.call(this).join('');

                  switch (section) {
                    case 'IHDR':
                      this.width = this.readUInt32();
                      this.height = this.readUInt32();
                      this.bits = this.data[this.pos++];
                      this.colorType = this.data[this.pos++];
                      this.compressionMethod = this.data[this.pos++];
                      this.filterMethod = this.data[this.pos++];
                      this.interlaceMethod = this.data[this.pos++];
                      break;

                    case 'acTL':
                      this.animation = {
                        numFrames: this.readUInt32(),
                        numPlays: this.readUInt32() || Infinity,
                        frames: []
                      };
                      break;

                    case 'PLTE':
                      this.palette = this.read(chunkSize);
                      break;

                    case 'fcTL':
                      if (frame) {
                        this.animation.frames.push(frame);
                      }

                      this.pos += 4;
                      frame = {
                        width: this.readUInt32(),
                        height: this.readUInt32(),
                        xOffset: this.readUInt32(),
                        yOffset: this.readUInt32()
                      };
                      var delayNum = this.readUInt16();
                      var delayDen = this.readUInt16() || 100;
                      frame.delay = 1000 * delayNum / delayDen;
                      frame.disposeOp = this.data[this.pos++];
                      frame.blendOp = this.data[this.pos++];
                      frame.data = [];
                      break;

                    case 'IDAT':
                    case 'fdAT':
                      if (section === 'fdAT') {
                        this.pos += 4;
                        chunkSize -= 4;
                      }

                      data = (frame != null ? frame.data : void 0) || this.imgData;

                      for (i = _i = 0; chunkSize >= 0 ? _i < chunkSize : _i > chunkSize; i = chunkSize >= 0 ? ++_i : --_i) {
                        data.push(this.data[this.pos++]);
                      }

                      break;

                    case 'tRNS':
                      this.transparency = {};

                      switch (this.colorType) {
                        case 3:
                          this.transparency.indexed = this.read(chunkSize);
                          var ccshort = 255 - this.transparency.indexed.length;

                          if (ccshort > 0) {
                            for (i = _j = 0; ccshort >= 0 ? _j < ccshort : _j > ccshort; i = ccshort >= 0 ? ++_j : --_j) {
                              this.transparency.indexed.push(255);
                            }
                          }

                          break;

                        case 0:
                          this.transparency.grayscale = this.read(chunkSize)[0];
                          break;

                        case 2:
                          this.transparency.rgb = this.read(chunkSize);
                      }

                      break;

                    case 'tEXt':
                      var text = this.read(chunkSize);
                      var index = text.indexOf(0);
                      var key = String.fromCharCode.apply(String, text.slice(0, index));
                      this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
                      break;

                    case 'IEND':
                      if (frame) {
                        this.animation.frames.push(frame);
                      }

                      this.colors = function () {
                        switch (_this.colorType) {
                          case 0:
                          case 3:
                          case 4:
                            return 1;

                          case 2:
                          case 6:
                            return 3;
                        }
                      }.call(this);

                      var _ref = this.colorType;
                      this.hasAlphaChannel = _ref === 4 || _ref === 6;
                      var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
                      this.pixelBitlength = this.bits * colors;

                      this.colorSpace = function () {
                        switch (_this.colors) {
                          case 1:
                            return 'DeviceGray';

                          case 3:
                            return 'DeviceRGB';
                        }
                      }.call(this);

                      if (!(this.imgData instanceof Uint8Array)) {
                        this.imgData = new Uint8Array(this.imgData);
                      }

                      return;

                    default:
                      this.pos += chunkSize;
                  }

                  this.pos += 4;

                  if (this.pos > this.data.length) {
                    throw new Error(getError(6017));
                  }
                }
              }

              var _proto = PNGReader.prototype;

              _proto.read = function read(bytes) {
                var i = 0;
                var _i = 0;
                var _results = [];

                for (i = _i = 0; bytes >= 0 ? _i < bytes : _i > bytes; i = bytes >= 0 ? ++_i : --_i) {
                  _results.push(this.data[this.pos++]);
                }

                return _results;
              };

              _proto.readUInt32 = function readUInt32() {
                var b1 = this.data[this.pos++] << 24;
                var b2 = this.data[this.pos++] << 16;
                var b3 = this.data[this.pos++] << 8;
                var b4 = this.data[this.pos++];
                return b1 | b2 | b3 | b4;
              };

              _proto.readUInt16 = function readUInt16() {
                var b1 = this.data[this.pos++] << 8;
                var b2 = this.data[this.pos++];
                return b1 | b2;
              };

              _proto.decodePixels = function decodePixels(data) {
                if (data == null) {
                  data = this.imgData;
                }

                if (data.length === 0) {
                  return new Uint8Array(0);
                }

                var inflate = new _p.Inflate(data, {
                  index: 0,
                  verify: false
                });
                data = inflate.decompress();
                var pixelBytes = this.pixelBitlength / 8;
                var scanlineLength = pixelBytes * this.width;
                var pixels = new Uint8Array(scanlineLength * this.height);
                var length = data.length;
                var row = 0;
                var pos = 0;
                var c = 0;
                var ccbyte = 0;
                var col = 0;
                var i = 0;
                var _i = 0;
                var _j = 0;
                var _k = 0;
                var _l = 0;
                var _m = 0;
                var left = 0;
                var p = 0;
                var pa = 0;
                var paeth = 0;
                var pb = 0;
                var pc = 0;
                var upper = 0;
                var upperLeft = 0;

                while (pos < length) {
                  switch (data[pos++]) {
                    case 0:
                      for (i = _i = 0; _i < scanlineLength; i = _i += 1) {
                        pixels[c++] = data[pos++];
                      }

                      break;

                    case 1:
                      for (i = _j = 0; _j < scanlineLength; i = _j += 1) {
                        ccbyte = data[pos++];
                        left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
                        pixels[c++] = (ccbyte + left) % 256;
                      }

                      break;

                    case 2:
                      for (i = _k = 0; _k < scanlineLength; i = _k += 1) {
                        ccbyte = data[pos++];
                        col = (i - i % pixelBytes) / pixelBytes;
                        upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                        pixels[c++] = (upper + ccbyte) % 256;
                      }

                      break;

                    case 3:
                      for (i = _l = 0; _l < scanlineLength; i = _l += 1) {
                        ccbyte = data[pos++];
                        col = (i - i % pixelBytes) / pixelBytes;
                        left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
                        upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                        pixels[c++] = (ccbyte + Math.floor((left + upper) / 2)) % 256;
                      }

                      break;

                    case 4:
                      for (i = _m = 0; _m < scanlineLength; i = _m += 1) {
                        ccbyte = data[pos++];
                        col = (i - i % pixelBytes) / pixelBytes;
                        left = i < pixelBytes ? 0 : pixels[c - pixelBytes];

                        if (row === 0) {
                          upper = upperLeft = 0;
                        } else {
                          upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                          upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];
                        }

                        p = left + upper - upperLeft;
                        pa = Math.abs(p - left);
                        pb = Math.abs(p - upper);
                        pc = Math.abs(p - upperLeft);

                        if (pa <= pb && pa <= pc) {
                          paeth = left;
                        } else if (pb <= pc) {
                          paeth = upper;
                        } else {
                          paeth = upperLeft;
                        }

                        pixels[c++] = (ccbyte + paeth) % 256;
                      }

                      break;

                    default:
                      throw new Error(getError(6018, data[pos - 1]));
                  }

                  row++;
                }

                return pixels;
              };

              _proto.copyToImageData = function copyToImageData(imageData, pixels) {
                var alpha = this.hasAlphaChannel;
                var palette;
                var colors = this.colors;

                if (this.palette.length) {
                  palette = this._decodedPalette != null ? this._decodedPalette : this._decodedPalette = this.decodePalette();
                  colors = 4;
                  alpha = true;
                }

                var data = imageData.data || imageData;
                var length = data.length;
                var input = palette || pixels;
                var i = 0;
                var j = 0;
                var k = 0;
                var v = 0;

                if (colors === 1) {
                  while (i < length) {
                    k = palette ? pixels[i / 4] * 4 : j;
                    v = input[k++];
                    data[i++] = v;
                    data[i++] = v;
                    data[i++] = v;
                    data[i++] = alpha ? input[k++] : 255;
                    j = k;
                  }
                } else {
                  while (i < length) {
                    k = palette ? pixels[i / 4] * 4 : j;
                    data[i++] = input[k++];
                    data[i++] = input[k++];
                    data[i++] = input[k++];
                    data[i++] = alpha ? input[k++] : 255;
                    j = k;
                  }
                }
              };

              _proto.decodePalette = function decodePalette() {
                var palette = this.palette;
                var transparency = this.transparency.indexed || [];
                var ret = new Uint8Array((transparency.length || 0) + palette.length);
                var pos = 0;
                var c = 0;
                var _ref1 = 0;

                for (var i = 0, _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {
                  ret[pos++] = palette[i];
                  ret[pos++] = palette[i + 1];
                  ret[pos++] = palette[i + 2];
                  _ref1 = transparency[c++];
                  ret[pos++] = _ref1 != null ? _ref1 : 255;
                }

                return ret;
              };

              _proto.render = function render(canvas) {
                canvas.width = this.width;
                canvas.height = this.height;
                var ctx = canvas.getContext('2d');
                var data = ctx.createImageData(this.width, this.height);
                this.copyToImageData(data, this.decodePixels(null));
                return ctx.putImageData(data, 0, 0);
              };

              return PNGReader;
            }();

            var TiffReader = function () {
              function TiffReader() {
                this._littleEndian = false;
                this._tiffData = [];
                this._fileDirectories = [];
              }

              var _proto = TiffReader.prototype;

              _proto.getUint8 = function getUint8(offset) {
                return this._tiffData[offset];
              };

              _proto.getUint16 = function getUint16(offset) {
                if (this._littleEndian) return this._tiffData[offset + 1] << 8 | this._tiffData[offset];else return this._tiffData[offset] << 8 | this._tiffData[offset + 1];
              };

              _proto.getUint32 = function getUint32(offset) {
                var a = this._tiffData;
                if (this._littleEndian) return a[offset + 3] << 24 | a[offset + 2] << 16 | a[offset + 1] << 8 | a[offset];else return a[offset] << 24 | a[offset + 1] << 16 | a[offset + 2] << 8 | a[offset + 3];
              };

              _proto.checkLittleEndian = function checkLittleEndian() {
                var BOM = this.getUint16(0);

                if (BOM === 0x4949) {
                  this._littleEndian = true;
                } else if (BOM === 0x4D4D) {
                  this._littleEndian = false;
                } else {
                  console.log(BOM);
                  throw TypeError(getError(6019));
                }

                return this._littleEndian;
              };

              _proto.hasTowel = function hasTowel() {
                if (this.getUint16(2) !== 42) {
                  throw RangeError(getError(6020));
                }

                return true;
              };

              _proto.getFieldTypeName = function getFieldTypeName(fieldType) {
                var typeNames = fieldTypeNames;

                if (fieldType in typeNames) {
                  return typeNames[fieldType];
                }

                return null;
              };

              _proto.getFieldTagName = function getFieldTagName(fieldTag) {
                var tagNames = fieldTagNames;

                if (fieldTag in tagNames) {
                  return tagNames[fieldTag];
                } else {
                  logID(6021, fieldTag);
                  return "Tag" + fieldTag;
                }
              };

              _proto.getFieldTypeLength = function getFieldTypeLength(fieldTypeName) {
                if (['BYTE', 'ASCII', 'SBYTE', 'UNDEFINED'].indexOf(fieldTypeName) !== -1) {
                  return 1;
                } else if (['SHORT', 'SSHORT'].indexOf(fieldTypeName) !== -1) {
                  return 2;
                } else if (['LONG', 'SLONG', 'FLOAT'].indexOf(fieldTypeName) !== -1) {
                  return 4;
                } else if (['RATIONAL', 'SRATIONAL', 'DOUBLE'].indexOf(fieldTypeName) !== -1) {
                  return 8;
                }

                return 0;
              };

              _proto.getFieldValues = function getFieldValues(fieldTagName, fieldTypeName, typeCount, valueOffset) {
                var fieldValues = [];
                var fieldTypeLength = this.getFieldTypeLength(fieldTypeName);
                var fieldValueSize = fieldTypeLength * typeCount;

                if (fieldValueSize <= 4) {
                  if (this._littleEndian === false) fieldValues.push(valueOffset >>> (4 - fieldTypeLength) * 8);else fieldValues.push(valueOffset);
                } else {
                  for (var i = 0; i < typeCount; i++) {
                    var indexOffset = fieldTypeLength * i;

                    if (fieldTypeLength >= 8) {
                      if (['RATIONAL', 'SRATIONAL'].indexOf(fieldTypeName) !== -1) {
                        fieldValues.push(this.getUint32(valueOffset + indexOffset));
                        fieldValues.push(this.getUint32(valueOffset + indexOffset + 4));
                      } else {
                        logID(8000);
                      }
                    } else {
                      fieldValues.push(this.getBytes(fieldTypeLength, valueOffset + indexOffset));
                    }
                  }
                }

                if (fieldTypeName === 'ASCII') {
                  fieldValues.forEach(function (e, i, a) {
                    a[i] = String.fromCharCode(e);
                  });
                }

                return fieldValues;
              };

              _proto.getBytes = function getBytes(numBytes, offset) {
                if (numBytes <= 0) {
                  logID(8001);
                } else if (numBytes <= 1) {
                  return this.getUint8(offset);
                } else if (numBytes <= 2) {
                  return this.getUint16(offset);
                } else if (numBytes <= 3) {
                  return this.getUint32(offset) >>> 8;
                } else if (numBytes <= 4) {
                  return this.getUint32(offset);
                } else {
                  logID(8002);
                }

                return 0;
              };

              _proto.getBits = function getBits(numBits, byteOffset, bitOffset) {
                bitOffset = bitOffset || 0;
                var extraBytes = Math.floor(bitOffset / 8);
                var newByteOffset = byteOffset + extraBytes;
                var totalBits = bitOffset + numBits;
                var shiftRight = 32 - numBits;
                var shiftLeft = 0;
                var rawBits = 0;

                if (totalBits <= 0) {
                  logID(6023);
                } else if (totalBits <= 8) {
                  shiftLeft = 24 + bitOffset;
                  rawBits = this.getUint8(newByteOffset);
                } else if (totalBits <= 16) {
                  shiftLeft = 16 + bitOffset;
                  rawBits = this.getUint16(newByteOffset);
                } else if (totalBits <= 32) {
                  shiftLeft = bitOffset;
                  rawBits = this.getUint32(newByteOffset);
                } else {
                  logID(6022);
                }

                return {
                  bits: rawBits << shiftLeft >>> shiftRight,
                  byteOffset: newByteOffset + Math.floor(totalBits / 8),
                  bitOffset: totalBits % 8
                };
              };

              _proto.parseFileDirectory = function parseFileDirectory(offset) {
                var numDirEntries = this.getUint16(offset);
                var tiffFields = [];
                var i = 0;
                var entryCount = 0;

                for (i = offset + 2, entryCount = 0; entryCount < numDirEntries; i += 12, entryCount++) {
                  var fieldTag = this.getUint16(i);
                  var fieldType = this.getUint16(i + 2);
                  var typeCount = this.getUint32(i + 4);
                  var valueOffset = this.getUint32(i + 8);
                  var fieldTagName = this.getFieldTagName(fieldTag);
                  var fieldTypeName = this.getFieldTypeName(fieldType);
                  var fieldValues = this.getFieldValues(fieldTagName, fieldTypeName, typeCount, valueOffset);
                  tiffFields[fieldTagName] = {
                    type: fieldTypeName,
                    values: fieldValues
                  };
                }

                this._fileDirectories.push(tiffFields);

                var nextIFDByteOffset = this.getUint32(i);

                if (nextIFDByteOffset !== 0x00000000) {
                  this.parseFileDirectory(nextIFDByteOffset);
                }
              };

              _proto.clampColorSample = function clampColorSample(colorSample, bitsPerSample) {
                var multiplier = Math.pow(2, 8 - bitsPerSample);
                return Math.floor(colorSample * multiplier + (multiplier - 1));
              };

              _proto.parseTIFF = function parseTIFF(tiffData, canvas) {
                var _this = this;

                canvas = canvas || document.createElement('canvas');
                this._tiffData = tiffData;
                this._canvas = canvas;
                this.checkLittleEndian();

                if (!this.hasTowel()) {
                  return;
                }

                var firstIFDByteOffset = this.getUint32(4);
                this._fileDirectories.length = 0;
                this.parseFileDirectory(firstIFDByteOffset);
                var fileDirectory = this._fileDirectories[0];
                var imageWidth = fileDirectory.ImageWidth.values[0];
                var imageLength = fileDirectory.ImageLength.values[0];
                this._canvas.width = imageWidth;
                this._canvas.height = imageLength;
                var strips = [];
                var compression = fileDirectory.Compression ? fileDirectory.Compression.values[0] : 1;
                var samplesPerPixel = fileDirectory.SamplesPerPixel.values[0];
                var sampleProperties = [];
                var bitsPerPixel = 0;
                var hasBytesPerPixel = false;
                fileDirectory.BitsPerSample.values.forEach(function (bitsPerSample, i, bitsPerSampleValues) {
                  sampleProperties[i] = {
                    bitsPerSample: bitsPerSample,
                    hasBytesPerSample: false,
                    bytesPerSample: undefined
                  };

                  if (bitsPerSample % 8 === 0) {
                    sampleProperties[i].hasBytesPerSample = true;
                    sampleProperties[i].bytesPerSample = bitsPerSample / 8;
                  }

                  bitsPerPixel += bitsPerSample;
                }, this);
                var bytesPerPixel = 0;

                if (bitsPerPixel % 8 === 0) {
                  hasBytesPerPixel = true;
                  bytesPerPixel = bitsPerPixel / 8;
                }

                var stripOffsetValues = fileDirectory.StripOffsets.values;
                var numStripOffsetValues = stripOffsetValues.length;
                var stripByteCountValues;

                if (fileDirectory.StripByteCounts) {
                  stripByteCountValues = fileDirectory.StripByteCounts.values;
                } else {
                  logID(8003);

                  if (numStripOffsetValues === 1) {
                    stripByteCountValues = [Math.ceil(imageWidth * imageLength * bitsPerPixel / 8)];
                  } else {
                    throw Error(getError(6024));
                  }
                }

                var blockLength = 1;
                var iterations = 1;

                for (var i = 0; i < numStripOffsetValues; i++) {
                  var stripOffset = stripOffsetValues[i];
                  strips[i] = [];
                  var stripByteCount = stripByteCountValues[i];

                  for (var byteOffset = 0, bitOffset = 0, jIncrement = 1, getHeader = true, pixel = [], numBytes = 0, sample = 0, currentSample = 0; byteOffset < stripByteCount; byteOffset += jIncrement) {
                    switch (compression) {
                      case 1:
                        pixel = [];

                        for (var m = 0; m < samplesPerPixel; m++) {
                          var s = sampleProperties[m];

                          if (s.hasBytesPerSample) {
                            var sampleOffset = s.bytesPerSample * m;
                            pixel.push(this.getBytes(s.bytesPerSample, stripOffset + byteOffset + sampleOffset));
                          } else {
                            var sampleInfo = this.getBits(s.bitsPerSample, stripOffset + byteOffset, bitOffset);
                            pixel.push(sampleInfo.bits);
                            byteOffset = sampleInfo.byteOffset - stripOffset;
                            bitOffset = sampleInfo.bitOffset;
                            throw RangeError(getError(6025));
                          }
                        }

                        strips[i].push(pixel);

                        if (hasBytesPerPixel) {
                          jIncrement = bytesPerPixel;
                        } else {
                          jIncrement = 0;
                          throw RangeError(getError(6026));
                        }

                        break;

                      case 2:
                        break;

                      case 3:
                        break;

                      case 4:
                        break;

                      case 5:
                        break;

                      case 6:
                        break;

                      case 7:
                        break;

                      case 32773:
                        if (getHeader) {
                          getHeader = false;
                          var header = this.getUint8(stripOffset + byteOffset);

                          if (header >= 0 && header <= 127) {
                            blockLength = header + 1;
                          } else if (header >= -127 && header <= -1) {
                            iterations = -header + 1;
                          } else {
                              getHeader = true;
                            }
                        } else {
                          var currentByte = this.getUint8(stripOffset + byteOffset);

                          for (var _m = 0; _m < iterations; _m++) {
                            var _s = sampleProperties[sample];

                            if (_s.hasBytesPerSample) {
                              currentSample = currentSample << 8 * numBytes | currentByte;
                              numBytes++;

                              if (numBytes === _s.bytesPerSample) {
                                pixel.push(currentSample);
                                currentSample = numBytes = 0;
                                sample++;
                              }
                            } else {
                              throw RangeError(getError(6025));
                            }

                            if (sample === samplesPerPixel) {
                              strips[i].push(pixel);
                              pixel = [];
                              sample = 0;
                            }
                          }

                          blockLength--;

                          if (blockLength === 0) {
                            getHeader = true;
                          }
                        }

                        jIncrement = 1;
                        break;
                    }
                  }
                }

                if (canvas.getContext) {
                  var ctx = this._canvas.getContext('2d');

                  ctx.fillStyle = 'rgba(255, 255, 255, 0)';
                  var rowsPerStrip = fileDirectory.RowsPerStrip ? fileDirectory.RowsPerStrip.values[0] : imageLength;
                  var numStrips = strips.length;
                  var imageLengthModRowsPerStrip = imageLength % rowsPerStrip;
                  var rowsInLastStrip = imageLengthModRowsPerStrip === 0 ? rowsPerStrip : imageLengthModRowsPerStrip;
                  var numRowsInStrip = rowsPerStrip;
                  var numRowsInPreviousStrip = 0;
                  var photometricInterpretation = fileDirectory.PhotometricInterpretation.values[0];
                  var extraSamplesValues = [];
                  var numExtraSamples = 0;

                  if (fileDirectory.ExtraSamples) {
                    extraSamplesValues = fileDirectory.ExtraSamples.values;
                    numExtraSamples = extraSamplesValues.length;
                  }

                  var colorMapValues = [];
                  var colorMapSampleSize = 0;

                  if (fileDirectory.ColorMap) {
                    colorMapValues = fileDirectory.ColorMap.values;
                    colorMapSampleSize = Math.pow(2, sampleProperties[0].bitsPerSample);
                  }

                  for (var _i = 0; _i < numStrips; _i++) {
                    if (_i + 1 === numStrips) {
                      numRowsInStrip = rowsInLastStrip;
                    }

                    var numPixels = strips[_i].length;
                    var yPadding = numRowsInPreviousStrip * _i;

                    for (var y = 0, j = 0; y < numRowsInStrip && j < numPixels; y++) {
                      for (var x = 0; x < imageWidth; x++, j++) {
                        var pixelSamples = strips[_i][j];
                        var red = 0;
                        var green = 0;
                        var blue = 0;
                        var opacity = 1.0;

                        if (numExtraSamples > 0) {
                          for (var k = 0; k < numExtraSamples; k++) {
                            if (extraSamplesValues[k] === 1 || extraSamplesValues[k] === 2) {
                              opacity = pixelSamples[3 + k] / 256;
                              break;
                            }
                          }
                        }

                        (function () {
                          switch (photometricInterpretation) {
                            case 0:
                              var invertValue = 0;

                              if (sampleProperties[0].hasBytesPerSample) {
                                invertValue = Math.pow(0x10, sampleProperties[0].bytesPerSample * 2);
                              }

                              pixelSamples.forEach(function (sample, index, samples) {
                                samples[index] = invertValue - sample;
                              });

                            case 1:
                              red = green = blue = _this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);
                              break;

                            case 2:
                              red = _this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);
                              green = _this.clampColorSample(pixelSamples[1], sampleProperties[1].bitsPerSample);
                              blue = _this.clampColorSample(pixelSamples[2], sampleProperties[2].bitsPerSample);
                              break;

                            case 3:
                              if (colorMapValues === undefined) {
                                throw Error(getError(6027));
                              }

                              var colorMapIndex = pixelSamples[0];
                              red = _this.clampColorSample(colorMapValues[colorMapIndex], 16);
                              green = _this.clampColorSample(colorMapValues[colorMapSampleSize + colorMapIndex], 16);
                              blue = _this.clampColorSample(colorMapValues[2 * colorMapSampleSize + colorMapIndex], 16);
                              break;

                            default:
                              throw RangeError(getError(6028, photometricInterpretation));
                          }
                        })();

                        ctx.fillStyle = "rgba(" + red + ", " + green + ", " + blue + ", " + opacity + ")";
                        ctx.fillRect(x, yPadding + y, 1, 1);
                      }
                    }

                    numRowsInPreviousStrip = numRowsInStrip;
                  }
                }

                return this._canvas;
              };

              return TiffReader;
            }();
            var fieldTagNames = {
              0x013B: 'Artist',
              0x0102: 'BitsPerSample',
              0x0109: 'CellLength',
              0x0108: 'CellWidth',
              0x0140: 'ColorMap',
              0x0103: 'Compression',
              0x8298: 'Copyright',
              0x0132: 'DateTime',
              0x0152: 'ExtraSamples',
              0x010A: 'FillOrder',
              0x0121: 'FreeByteCounts',
              0x0120: 'FreeOffsets',
              0x0123: 'GrayResponseCurve',
              0x0122: 'GrayResponseUnit',
              0x013C: 'HostComputer',
              0x010E: 'ImageDescription',
              0x0101: 'ImageLength',
              0x0100: 'ImageWidth',
              0x010F: 'Make',
              0x0119: 'MaxSampleValue',
              0x0118: 'MinSampleValue',
              0x0110: 'Model',
              0x00FE: 'NewSubfileType',
              0x0112: 'Orientation',
              0x0106: 'PhotometricInterpretation',
              0x011C: 'PlanarConfiguration',
              0x0128: 'ResolutionUnit',
              0x0116: 'RowsPerStrip',
              0x0115: 'SamplesPerPixel',
              0x0131: 'Software',
              0x0117: 'StripByteCounts',
              0x0111: 'StripOffsets',
              0x00FF: 'SubfileType',
              0x0107: 'Threshholding',
              0x011A: 'XResolution',
              0x011B: 'YResolution',
              0x0146: 'BadFaxLines',
              0x0147: 'CleanFaxData',
              0x0157: 'ClipPath',
              0x0148: 'ConsecutiveBadFaxLines',
              0x01B1: 'Decode',
              0x01B2: 'DefaultImageColor',
              0x010D: 'DocumentName',
              0x0150: 'DotRange',
              0x0141: 'HalftoneHints',
              0x015A: 'Indexed',
              0x015B: 'JPEGTables',
              0x011D: 'PageName',
              0x0129: 'PageNumber',
              0x013D: 'Predictor',
              0x013F: 'PrimaryChromaticities',
              0x0214: 'ReferenceBlackWhite',
              0x0153: 'SampleFormat',
              0x022F: 'StripRowCounts',
              0x014A: 'SubIFDs',
              0x0124: 'T4Options',
              0x0125: 'T6Options',
              0x0145: 'TileByteCounts',
              0x0143: 'TileLength',
              0x0144: 'TileOffsets',
              0x0142: 'TileWidth',
              0x012D: 'TransferFunction',
              0x013E: 'WhitePoint',
              0x0158: 'XClipPathUnits',
              0x011E: 'XPosition',
              0x0211: 'YCbCrCoefficients',
              0x0213: 'YCbCrPositioning',
              0x0212: 'YCbCrSubSampling',
              0x0159: 'YClipPathUnits',
              0x011F: 'YPosition',
              0x9202: 'ApertureValue',
              0xA001: 'ColorSpace',
              0x9004: 'DateTimeDigitized',
              0x9003: 'DateTimeOriginal',
              0x8769: 'Exif IFD',
              0x9000: 'ExifVersion',
              0x829A: 'ExposureTime',
              0xA300: 'FileSource',
              0x9209: 'Flash',
              0xA000: 'FlashpixVersion',
              0x829D: 'FNumber',
              0xA420: 'ImageUniqueID',
              0x9208: 'LightSource',
              0x927C: 'MakerNote',
              0x9201: 'ShutterSpeedValue',
              0x9286: 'UserComment',
              0x83BB: 'IPTC',
              0x8773: 'ICC Profile',
              0x02BC: 'XMP',
              0xA480: 'GDAL_METADATA',
              0xA481: 'GDAL_NODATA',
              0x8649: 'Photoshop'
            };
            var fieldTypeNames = {
              0x0001: 'BYTE',
              0x0002: 'ASCII',
              0x0003: 'SHORT',
              0x0004: 'LONG',
              0x0005: 'RATIONAL',
              0x0006: 'SBYTE',
              0x0007: 'UNDEFINED',
              0x0008: 'SSHORT',
              0x0009: 'SLONG',
              0x000A: 'SRATIONAL',
              0x000B: 'FLOAT',
              0x000C: 'DOUBLE'
            };

            var BASE64_KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            var BASE64_VALUES = new Array(123);

            for (var i$3 = 0; i$3 < 123; ++i$3) {
              BASE64_VALUES[i$3] = 64;
            }

            for (var _i = 0; _i < 64; ++_i) {
              BASE64_VALUES[BASE64_KEYS.charCodeAt(_i)] = _i;
            }

            var Base64 = {
              name: 'Jacob__Codec__Base64'
            };

            Base64.decode = function Jacob__Codec__Base64__decode(input) {
              var output = [],
                  chr1,
                  chr2,
                  chr3,
                  enc1,
                  enc2,
                  enc3,
                  enc4,
                  i = 0;
              input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

              while (i < input.length) {
                enc1 = BASE64_VALUES[input.charCodeAt(i++)];
                enc2 = BASE64_VALUES[input.charCodeAt(i++)];
                enc3 = BASE64_VALUES[input.charCodeAt(i++)];
                enc4 = BASE64_VALUES[input.charCodeAt(i++)];
                chr1 = enc1 << 2 | enc2 >> 4;
                chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                chr3 = (enc3 & 3) << 6 | enc4;
                output.push(String.fromCharCode(chr1));

                if (enc3 !== 64) {
                  output.push(String.fromCharCode(chr2));
                }

                if (enc4 !== 64) {
                  output.push(String.fromCharCode(chr3));
                }
              }

              output = output.join('');
              return output;
            };

            Base64.decodeAsArray = function Jacob__Codec__Base64___decodeAsArray(input, bytes) {
              var dec = this.decode(input),
                  ar = [],
                  i,
                  j,
                  len;

              for (i = 0, len = dec.length / bytes; i < len; i++) {
                ar[i] = 0;

                for (j = bytes - 1; j >= 0; --j) {
                  ar[i] += dec.charCodeAt(i * bytes + j) << j * 8;
                }
              }

              return ar;
            };

            var GZip = function Jacob__GZip(data) {
              this.data = data;
              this.debug = false;
              this.gpflags = undefined;
              this.files = 0;
              this.unzipped = [];
              this.buf32k = new Array(32768);
              this.bIdx = 0;
              this.modeZIP = false;
              this.bytepos = 0;
              this.bb = 1;
              this.bits = 0;
              this.nameBuf = [];
              this.fileout = undefined;
              this.literalTree = new Array(GZip.LITERALS);
              this.distanceTree = new Array(32);
              this.treepos = 0;
              this.Places = null;
              this.len = 0;
              this.fpos = new Array(17);
              this.fpos[0] = 0;
              this.flens = undefined;
              this.fmax = undefined;
            };

            GZip.gunzip = function (string) {
              if (string.constructor === Array) ; else if (string.constructor === String) ;

              var gzip = new GZip(string);
              return gzip.gunzip()[0][0];
            };

            GZip.HufNode = function () {
              this.b0 = 0;
              this.b1 = 0;
              this.jump = null;
              this.jumppos = -1;
            };

            GZip.LITERALS = 288;
            GZip.NAMEMAX = 256;
            GZip.bitReverse = [0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe, 0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1, 0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9, 0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5, 0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd, 0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3, 0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb, 0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7, 0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff];
            GZip.cplens = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
            GZip.cplext = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99];
            GZip.cpdist = [0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001];
            GZip.cpdext = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
            GZip.border = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

            GZip.prototype.gunzip = function () {
              this.outputArr = [];
              this.nextFile();
              return this.unzipped;
            };

            GZip.prototype.readByte = function () {
              this.bits += 8;

              if (this.bytepos < this.data.length) {
                return this.data.charCodeAt(this.bytepos++);
              } else {
                return -1;
              }
            };

            GZip.prototype.byteAlign = function () {
              this.bb = 1;
            };

            GZip.prototype.readBit = function () {
              var carry;
              this.bits++;
              carry = this.bb & 1;
              this.bb >>= 1;

              if (this.bb === 0) {
                this.bb = this.readByte();
                carry = this.bb & 1;
                this.bb = this.bb >> 1 | 0x80;
              }

              return carry;
            };

            GZip.prototype.readBits = function (a) {
              var res = 0,
                  i = a;

              while (i--) {
                res = res << 1 | this.readBit();
              }

              if (a) res = GZip.bitReverse[res] >> 8 - a;
              return res;
            };

            GZip.prototype.flushBuffer = function () {
              this.bIdx = 0;
            };

            GZip.prototype.addBuffer = function (a) {
              this.buf32k[this.bIdx++] = a;
              this.outputArr.push(String.fromCharCode(a));
              if (this.bIdx === 0x8000) this.bIdx = 0;
            };

            GZip.prototype.IsPat = function () {
              while (1) {
                if (this.fpos[this.len] >= this.fmax) return -1;
                if (this.flens[this.fpos[this.len]] === this.len) return this.fpos[this.len]++;
                this.fpos[this.len]++;
              }
            };

            GZip.prototype.Rec = function () {
              var curplace = this.Places[this.treepos];
              var tmp;

              if (this.len === 17) {
                return -1;
              }

              this.treepos++;
              this.len++;
              tmp = this.IsPat();

              if (tmp >= 0) {
                curplace.b0 = tmp;
              } else {
                curplace.b0 = 0x8000;
                if (this.Rec()) return -1;
              }

              tmp = this.IsPat();

              if (tmp >= 0) {
                curplace.b1 = tmp;
                curplace.jump = null;
              } else {
                curplace.b1 = 0x8000;
                curplace.jump = this.Places[this.treepos];
                curplace.jumppos = this.treepos;
                if (this.Rec()) return -1;
              }

              this.len--;
              return 0;
            };

            GZip.prototype.CreateTree = function (currentTree, numval, lengths, show) {
              var i;
              this.Places = currentTree;
              this.treepos = 0;
              this.flens = lengths;
              this.fmax = numval;

              for (i = 0; i < 17; i++) {
                this.fpos[i] = 0;
              }

              this.len = 0;

              if (this.Rec()) {
                return -1;
              }

              return 0;
            };

            GZip.prototype.DecodeValue = function (currentTree) {
              var len,
                  i,
                  xtreepos = 0,
                  X = currentTree[xtreepos],
                  b;

              while (1) {
                b = this.readBit();

                if (b) {
                  if (!(X.b1 & 0x8000)) {
                    return X.b1;
                  }

                  X = X.jump;
                  len = currentTree.length;

                  for (i = 0; i < len; i++) {
                    if (currentTree[i] === X) {
                      xtreepos = i;
                      break;
                    }
                  }
                } else {
                  if (!(X.b0 & 0x8000)) {
                    return X.b0;
                  }

                  xtreepos++;
                  X = currentTree[xtreepos];
                }
              }

              return -1;
            };

            GZip.prototype.DeflateLoop = function () {
              var last, c, type, i, len;

              do {
                last = this.readBit();
                type = this.readBits(2);

                if (type === 0) {
                  var blockLen, cSum;
                  this.byteAlign();
                  blockLen = this.readByte();
                  blockLen |= this.readByte() << 8;
                  cSum = this.readByte();
                  cSum |= this.readByte() << 8;

                  if ((blockLen ^ ~cSum) & 0xffff) {
                    document.write("BlockLen checksum mismatch\n");
                  }

                  while (blockLen--) {
                    c = this.readByte();
                    this.addBuffer(c);
                  }
                } else if (type === 1) {
                  var j;

                  while (1) {
                    j = GZip.bitReverse[this.readBits(7)] >> 1;

                    if (j > 23) {
                      j = j << 1 | this.readBit();

                      if (j > 199) {
                        j -= 128;
                        j = j << 1 | this.readBit();
                      } else {
                        j -= 48;

                        if (j > 143) {
                          j = j + 136;
                        }
                      }
                    } else {
                      j += 256;
                    }

                    if (j < 256) {
                      this.addBuffer(j);
                    } else if (j === 256) {
                      break;
                    } else {
                      var len, dist;
                      j -= 256 + 1;
                      len = this.readBits(GZip.cplext[j]) + GZip.cplens[j];
                      j = GZip.bitReverse[this.readBits(5)] >> 3;

                      if (GZip.cpdext[j] > 8) {
                        dist = this.readBits(8);
                        dist |= this.readBits(GZip.cpdext[j] - 8) << 8;
                      } else {
                        dist = this.readBits(GZip.cpdext[j]);
                      }

                      dist += GZip.cpdist[j];

                      for (j = 0; j < len; j++) {
                        var c = this.buf32k[this.bIdx - dist & 0x7fff];
                        this.addBuffer(c);
                      }
                    }
                  }
                } else if (type === 2) {
                  var j, n, literalCodes, distCodes, lenCodes;
                  var ll = new Array(288 + 32);
                  literalCodes = 257 + this.readBits(5);
                  distCodes = 1 + this.readBits(5);
                  lenCodes = 4 + this.readBits(4);

                  for (j = 0; j < 19; j++) {
                    ll[j] = 0;
                  }

                  for (j = 0; j < lenCodes; j++) {
                    ll[GZip.border[j]] = this.readBits(3);
                  }

                  len = this.distanceTree.length;

                  for (i = 0; i < len; i++) {
                    this.distanceTree[i] = new GZip.HufNode();
                  }

                  if (this.CreateTree(this.distanceTree, 19, ll, 0)) {
                    this.flushBuffer();
                    return 1;
                  }

                  n = literalCodes + distCodes;
                  i = 0;

                  while (i < n) {
                    j = this.DecodeValue(this.distanceTree);

                    if (j < 16) {
                      ll[i++] = j;
                    } else if (j === 16) {
                      var l;
                      j = 3 + this.readBits(2);

                      if (i + j > n) {
                        this.flushBuffer();
                        return 1;
                      }

                      l = i ? ll[i - 1] : 0;

                      while (j--) {
                        ll[i++] = l;
                      }
                    } else {
                      if (j === 17) {
                        j = 3 + this.readBits(3);
                      } else {
                        j = 11 + this.readBits(7);
                      }

                      if (i + j > n) {
                        this.flushBuffer();
                        return 1;
                      }

                      while (j--) {
                        ll[i++] = 0;
                      }
                    }
                  }

                  len = this.literalTree.length;

                  for (i = 0; i < len; i++) {
                    this.literalTree[i] = new GZip.HufNode();
                  }

                  if (this.CreateTree(this.literalTree, literalCodes, ll, 0)) {
                    this.flushBuffer();
                    return 1;
                  }

                  len = this.literalTree.length;

                  for (i = 0; i < len; i++) {
                    this.distanceTree[i] = new GZip.HufNode();
                  }

                  var ll2 = new Array();

                  for (i = literalCodes; i < ll.length; i++) {
                    ll2[i - literalCodes] = ll[i];
                  }

                  if (this.CreateTree(this.distanceTree, distCodes, ll2, 0)) {
                    this.flushBuffer();
                    return 1;
                  }

                  while (1) {
                    j = this.DecodeValue(this.literalTree);

                    if (j >= 256) {
                      var len, dist;
                      j -= 256;

                      if (j === 0) {
                        break;
                      }

                      j--;
                      len = this.readBits(GZip.cplext[j]) + GZip.cplens[j];
                      j = this.DecodeValue(this.distanceTree);

                      if (GZip.cpdext[j] > 8) {
                        dist = this.readBits(8);
                        dist |= this.readBits(GZip.cpdext[j] - 8) << 8;
                      } else {
                        dist = this.readBits(GZip.cpdext[j]);
                      }

                      dist += GZip.cpdist[j];

                      while (len--) {
                        var c = this.buf32k[this.bIdx - dist & 0x7fff];
                        this.addBuffer(c);
                      }
                    } else {
                      this.addBuffer(j);
                    }
                  }
                }
              } while (!last);

              this.flushBuffer();
              this.byteAlign();
              return 0;
            };

            GZip.prototype.unzipFile = function (name) {
              var i;
              this.gunzip();

              for (i = 0; i < this.unzipped.length; i++) {
                if (this.unzipped[i][1] === name) {
                  return this.unzipped[i][0];
                }
              }
            };

            GZip.prototype.nextFile = function () {
              this.outputArr = [];
              this.modeZIP = false;
              var tmp = [];
              tmp[0] = this.readByte();
              tmp[1] = this.readByte();

              if (tmp[0] === 0x78 && tmp[1] === 0xda) {
                this.DeflateLoop();
                this.unzipped[this.files] = [this.outputArr.join(''), "geonext.gxt"];
                this.files++;
              }

              if (tmp[0] === 0x1f && tmp[1] === 0x8b) {
                this.skipdir();
                this.unzipped[this.files] = [this.outputArr.join(''), "file"];
                this.files++;
              }

              if (tmp[0] === 0x50 && tmp[1] === 0x4b) {
                this.modeZIP = true;
                tmp[2] = this.readByte();
                tmp[3] = this.readByte();

                if (tmp[2] === 0x03 && tmp[3] === 0x04) {
                  tmp[0] = this.readByte();
                  tmp[1] = this.readByte();
                  this.gpflags = this.readByte();
                  this.gpflags |= this.readByte() << 8;
                  var method = this.readByte();
                  method |= this.readByte() << 8;
                  this.readByte();
                  this.readByte();
                  this.readByte();
                  this.readByte();
                  var compSize = this.readByte();
                  compSize |= this.readByte() << 8;
                  compSize |= this.readByte() << 16;
                  compSize |= this.readByte() << 24;
                  var size = this.readByte();
                  size |= this.readByte() << 8;
                  size |= this.readByte() << 16;
                  size |= this.readByte() << 24;
                  var filelen = this.readByte();
                  filelen |= this.readByte() << 8;
                  var extralen = this.readByte();
                  extralen |= this.readByte() << 8;
                  i = 0;
                  this.nameBuf = [];

                  while (filelen--) {
                    var c = this.readByte();

                    if (c === "/" | c === ":") {
                      i = 0;
                    } else if (i < GZip.NAMEMAX - 1) {
                      this.nameBuf[i++] = String.fromCharCode(c);
                    }
                  }

                  if (!this.fileout) this.fileout = this.nameBuf;
                  var i = 0;

                  while (i < extralen) {
                    c = this.readByte();
                    i++;
                  }

                  if (method === 8) {
                    this.DeflateLoop();
                    this.unzipped[this.files] = [this.outputArr.join(''), this.nameBuf.join('')];
                    this.files++;
                  }

                  this.skipdir();
                }
              }
            };

            GZip.prototype.skipdir = function () {
              var tmp = [];
              var compSize, size, os, i, c;

              if (this.gpflags & 8) {
                tmp[0] = this.readByte();
                tmp[1] = this.readByte();
                tmp[2] = this.readByte();
                tmp[3] = this.readByte();
                compSize = this.readByte();
                compSize |= this.readByte() << 8;
                compSize |= this.readByte() << 16;
                compSize |= this.readByte() << 24;
                size = this.readByte();
                size |= this.readByte() << 8;
                size |= this.readByte() << 16;
                size |= this.readByte() << 24;
              }

              if (this.modeZIP) this.nextFile();
              tmp[0] = this.readByte();

              if (tmp[0] !== 8) {
                return 0;
              }

              this.gpflags = this.readByte();
              this.readByte();
              this.readByte();
              this.readByte();
              this.readByte();
              this.readByte();
              os = this.readByte();

              if (this.gpflags & 4) {
                tmp[0] = this.readByte();
                tmp[2] = this.readByte();
                this.len = tmp[0] + 256 * tmp[1];

                for (i = 0; i < this.len; i++) {
                  this.readByte();
                }
              }

              if (this.gpflags & 8) {
                i = 0;
                this.nameBuf = [];

                while (c = this.readByte()) {
                  if (c === "7" || c === ":") i = 0;
                  if (i < GZip.NAMEMAX - 1) this.nameBuf[i++] = c;
                }
              }

              if (this.gpflags & 16) {
                while (c = this.readByte()) {}
              }

              if (this.gpflags & 2) {
                this.readByte();
                this.readByte();
              }

              this.DeflateLoop();
              size = this.readByte();
              size |= this.readByte() << 8;
              size |= this.readByte() << 16;
              size |= this.readByte() << 24;
              if (this.modeZIP) this.nextFile();
            };

            var codec = {
              name: 'Jacob__Codec'
            };
            codec.Base64 = Base64;
            codec.GZip = GZip;

            codec.unzip = function () {
              return codec.GZip.gunzip.apply(codec.GZip, arguments);
            };

            codec.unzipBase64 = function () {
              var buffer = codec.Base64.decode.apply(codec.Base64, arguments);

              try {
                return codec.GZip.gunzip.call(codec.GZip, buffer);
              } catch (e) {
                return buffer.slice(7);
              }
            };

            codec.unzipBase64AsArray = function (input, bytes) {
              bytes = bytes || 1;
              var dec = this.unzipBase64(input),
                  ar = [],
                  i,
                  j,
                  len;

              for (i = 0, len = dec.length / bytes; i < len; i++) {
                ar[i] = 0;

                for (j = bytes - 1; j >= 0; --j) {
                  ar[i] += dec.charCodeAt(i * bytes + j) << j * 8;
                }
              }

              return ar;
            };

            codec.unzipAsArray = function (input, bytes) {
              bytes = bytes || 1;
              var dec = this.unzip(input),
                  ar = [],
                  i,
                  j,
                  len;

              for (i = 0, len = dec.length / bytes; i < len; i++) {
                ar[i] = 0;

                for (j = bytes - 1; j >= 0; --j) {
                  ar[i] += dec.charCodeAt(i * bytes + j) << j * 8;
                }
              }

              return ar;
            };

            var _dec$1a, _dec2$V, _dec3$J, _dec4$E, _dec5$B, _dec6$y, _dec7$x, _dec8$v, _dec9$r, _dec10$p, _dec11$l, _dec12$l, _dec13$l, _dec14$j, _dec15$j, _dec16$i, _dec17$g, _dec18$f, _dec19$f, _dec20$f, _dec21$e, _dec22$c, _dec23$b, _dec24$a, _dec25$a, _dec26$9, _dec27$9, _dec28$8, _dec29$7, _dec30$6, _dec31$6, _dec32$6, _dec33$4, _dec34$4, _dec35$4, _dec36$4, _dec37$4, _dec38$4, _dec39$4, _dec40$4, _dec41$4, _dec42$4, _dec43$4, _dec44$3, _dec45$3, _dec46$2, _dec47$2, _dec48$1, _dec49$1, _dec50$1, _dec51$1, _dec52$1, _dec53$1, _dec54$1, _dec55$1, _class$1d, _class2$12, _descriptor$_, _descriptor2$R, _descriptor3$G, _descriptor4$B, _descriptor5$v, _descriptor6$p, _descriptor7$j, _descriptor8$g, _descriptor9$e, _descriptor10$c, _descriptor11$a, _descriptor12$a, _descriptor13$a, _descriptor14$4, _descriptor15$4, _descriptor16$4, _descriptor17$4, _descriptor18$3, _descriptor19$3, _descriptor20$2, _descriptor21$2, _descriptor22$2, _descriptor23$2, _descriptor24$1, _descriptor25$1, _descriptor26$1, _descriptor27$1, _descriptor28$1, _descriptor29$1, _descriptor30$1, _descriptor31$1, _descriptor32$1, _descriptor33$1, _descriptor34$1, _descriptor35$1, _descriptor36$1, _descriptor37$1, _descriptor38$1, _descriptor39$1, _descriptor40$1, _descriptor41, _descriptor42, _descriptor43, _class3$f, _temp$16;
            var ImageFormat;

            (function (ImageFormat) {
              ImageFormat[ImageFormat["JPG"] = 0] = "JPG";
              ImageFormat[ImageFormat["PNG"] = 1] = "PNG";
              ImageFormat[ImageFormat["TIFF"] = 2] = "TIFF";
              ImageFormat[ImageFormat["WEBP"] = 3] = "WEBP";
              ImageFormat[ImageFormat["PVR"] = 4] = "PVR";
              ImageFormat[ImageFormat["ETC"] = 5] = "ETC";
              ImageFormat[ImageFormat["S3TC"] = 6] = "S3TC";
              ImageFormat[ImageFormat["ATITC"] = 7] = "ATITC";
              ImageFormat[ImageFormat["TGA"] = 8] = "TGA";
              ImageFormat[ImageFormat["RAWDATA"] = 9] = "RAWDATA";
              ImageFormat[ImageFormat["UNKNOWN"] = 10] = "UNKNOWN";
            })(ImageFormat || (ImageFormat = {}));

            function getImageFormatByData(imgData) {
              if (imgData.length > 8 && imgData[0] === 0x89 && imgData[1] === 0x50 && imgData[2] === 0x4E && imgData[3] === 0x47 && imgData[4] === 0x0D && imgData[5] === 0x0A && imgData[6] === 0x1A && imgData[7] === 0x0A) {
                return ImageFormat.PNG;
              }

              if (imgData.length > 2 && (imgData[0] === 0x49 && imgData[1] === 0x49 || imgData[0] === 0x4d && imgData[1] === 0x4d || imgData[0] === 0xff && imgData[1] === 0xd8)) {
                return ImageFormat.TIFF;
              }

              return ImageFormat.UNKNOWN;
            }

            function getParticleComponents(node) {
              var parent = node.parent;
              var comp = node.getComponent(ParticleSystem2D);

              if (!parent || !comp) {
                return node.getComponentsInChildren(ParticleSystem2D);
              }

              return getParticleComponents(parent);
            }

            var ParticleSystem2D = exports('ParticleSystem2D', (_dec$1a = ccclass('cc.ParticleSystem2D'), _dec2$V = menu$1(), _dec3$J = displayOrder(), _dec4$E = tooltip(), _dec5$B = type$1(ParticleAsset), _dec6$y = displayOrder(), _dec7$x = tooltip(), _dec8$v = type$1(SpriteFrame), _dec9$r = tooltip(), _dec10$p = tooltip(), _dec11$l = tooltip(), _dec12$l = tooltip(), _dec13$l = tooltip(), _dec14$j = tooltip(), _dec15$j = tooltip(), _dec16$i = tooltip(), _dec17$g = visible(), _dec18$f = tooltip(), _dec19$f = tooltip(), _dec20$f = tooltip(), _dec21$e = tooltip(), _dec22$c = tooltip(), _dec23$b = tooltip(), _dec24$a = tooltip(), _dec25$a = tooltip(), _dec26$9 = tooltip(), _dec27$9 = tooltip(), _dec28$8 = tooltip(), _dec29$7 = tooltip(), _dec30$6 = tooltip(), _dec31$6 = type$1(PositionType), _dec32$6 = tooltip(), _dec33$4 = displayOrder(), _dec34$4 = tooltip(), _dec35$4 = type$1(EmitterMode), _dec36$4 = tooltip(), _dec37$4 = tooltip(), _dec38$4 = tooltip(), _dec39$4 = tooltip(), _dec40$4 = tooltip(), _dec41$4 = tooltip(), _dec42$4 = tooltip(), _dec43$4 = tooltip(), _dec44$3 = tooltip(), _dec45$3 = tooltip(), _dec46$2 = tooltip(), _dec47$2 = tooltip(), _dec48$1 = tooltip(), _dec49$1 = tooltip(), _dec50$1 = tooltip(), _dec51$1 = displayOrder(), _dec52$1 = tooltip(), _dec53$1 = displayOrder(), _dec54$1 = tooltip(), _dec55$1 = formerlySerializedAs('preview'), _dec$1a(_class$1d = _dec2$V(_class$1d = playOnFocus(_class$1d = executeInEditMode(_class$1d = (_class2$12 = (_temp$16 = _class3$f = function (_Renderable2D) {
              _inheritsLoose(ParticleSystem2D, _Renderable2D);

              function ParticleSystem2D() {
                var _this;

                _this = _Renderable2D.call(this) || this;

                _initializerDefineProperty(_this, "duration", _descriptor$_, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "emissionRate", _descriptor2$R, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "life", _descriptor3$G, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "lifeVar", _descriptor4$B, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "angle", _descriptor5$v, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "angleVar", _descriptor6$p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSize", _descriptor7$j, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSizeVar", _descriptor8$g, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "endSize", _descriptor9$e, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "endSizeVar", _descriptor10$c, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSpin", _descriptor11$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startSpinVar", _descriptor12$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "endSpin", _descriptor13$a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "endSpinVar", _descriptor14$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "sourcePos", _descriptor15$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "posVar", _descriptor16$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "emitterMode", _descriptor17$4, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "gravity", _descriptor18$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "speed", _descriptor19$3, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "speedVar", _descriptor20$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "tangentialAccel", _descriptor21$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "tangentialAccelVar", _descriptor22$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "radialAccel", _descriptor23$2, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "radialAccelVar", _descriptor24$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "rotationIsDir", _descriptor25$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startRadius", _descriptor26$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "startRadiusVar", _descriptor27$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "endRadius", _descriptor28$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "endRadiusVar", _descriptor29$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "rotatePerS", _descriptor30$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "rotatePerSVar", _descriptor31$1, _assertThisInitialized(_this));

                _this.aspectRatio = 1;

                _initializerDefineProperty(_this, "playOnLoad", _descriptor32$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "autoRemoveOnFinish", _descriptor33$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_preview", _descriptor34$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_custom", _descriptor35$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_file", _descriptor36$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_spriteFrame", _descriptor37$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_totalParticles", _descriptor38$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_startColor", _descriptor39$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_startColorVar", _descriptor40$1, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_endColor", _descriptor41, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_endColorVar", _descriptor42, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_positionType", _descriptor43, _assertThisInitialized(_this));

                _this._stopped = true;

                _this.initProperties();

                return _this;
              }

              var _proto = ParticleSystem2D.prototype;

              _proto.onEnable = function onEnable() {
                _Renderable2D.prototype.onEnable.call(this);

                this._updateMaterial();
              };

              _proto.onDestroy = function onDestroy() {
                _Renderable2D.prototype.onDestroy.call(this);

                if (this.autoRemoveOnFinish) {
                  this.autoRemoveOnFinish = false;
                }

                this._simulator.uvFilled = 0;

                if (this._simulator.renderData && this._assembler) {
                  this._assembler.removeData(this._simulator.renderData);
                }
              };

              _proto.initProperties = function initProperties() {
                this._previewTimer = null;
                this._focused = false;
                this.aspectRatio = 1;
                this._simulator = new Simulator(this);
              };

              _proto.onFocusInEditor = function onFocusInEditor() {
                this._focused = true;
                var components = getParticleComponents(this.node);

                for (var i = 0; i < components.length; ++i) {
                  components[i]._startPreview();
                }
              };

              _proto.onLostFocusInEditor = function onLostFocusInEditor() {
                this._focused = false;
                var components = getParticleComponents(this.node);

                for (var i = 0; i < components.length; ++i) {
                  components[i]._stopPreview();
                }
              };

              _proto._startPreview = function _startPreview() {
                if (this._preview) {
                  this.resetSystem();
                }
              };

              _proto._stopPreview = function _stopPreview() {
                if (this._preview) {
                  this.resetSystem();
                  this.stopSystem();
                }

                if (this._previewTimer) {
                  clearInterval(this._previewTimer);
                }
              };

              _proto.__preload = function __preload() {
                _Renderable2D.prototype.__preload.call(this);

                if (this._custom && this.spriteFrame && !this._renderSpriteFrame) {
                  this._applySpriteFrame();
                } else if (this._file) {
                  if (this._custom) {
                    var missCustomTexture = !this._getTexture();

                    if (missCustomTexture) {
                      this._applyFile();
                    }
                  } else {
                    this._applyFile();
                  }
                }

                {
                  if (this.playOnLoad) {
                    this.resetSystem();
                  }
                }
              };

              _proto._flushAssembler = function _flushAssembler() {
                var assembler = ParticleSystem2D.Assembler.getAssembler(this);

                if (this._assembler !== assembler) {
                  this._assembler = assembler;
                }

                if (this._assembler && this._assembler.createData) {
                  this._simulator.renderData = this._assembler.createData(this);
                }
              };

              _proto.lateUpdate = function lateUpdate(dt) {
                if (!this._simulator.finished) {
                  this._simulator.step(dt);
                }
              };

              _proto.addParticle = function addParticle() {};

              _proto.stopSystem = function stopSystem() {
                this._stopped = true;

                this._simulator.stop();
              };

              _proto.resetSystem = function resetSystem() {
                this._stopped = false;

                this._simulator.reset();

                this._renderFlag = this._canRender();
              };

              _proto.isFull = function isFull() {
                return this.particleCount >= this.totalParticles;
              };

              _proto._applyFile = function _applyFile() {
                var file = this._file;

                if (file) {
                  if (!file) {
                    errorID(6029);
                    return;
                  }

                  if (!this.isValid) {
                    return;
                  }

                  this._plistFile = file.nativeUrl;

                  if (!this._custom) {
                    var isDiffFrame = this._spriteFrame !== file.spriteFrame;
                    if (isDiffFrame) this.spriteFrame = file.spriteFrame;

                    this._initWithDictionary(file._nativeAsset);
                  }

                  if (!this._spriteFrame) {
                    if (file.spriteFrame) {
                      this.spriteFrame = file.spriteFrame;
                    } else if (this._custom) {
                      this._initTextureWithDictionary(file._nativeAsset);
                    }
                  } else if (!this._renderSpriteFrame && this._spriteFrame) {
                    this._applySpriteFrame();
                  }
                }
              };

              _proto._initTextureWithDictionary = function _initTextureWithDictionary(dict) {
                var _this2 = this;

                if (dict.spriteFrameUuid) {
                  var spriteFrameUuid = dict.spriteFrameUuid;
                  assetManager.loadAny(spriteFrameUuid, function (err, spriteFrame) {
                    if (err) {
                      dict.spriteFrameUuid = undefined;

                      _this2._initTextureWithDictionary(dict);

                      error(err);
                    } else {
                      _this2.spriteFrame = spriteFrame;
                    }
                  });
                } else {
                  var imgPath = changeBasename(this._plistFile, dict.textureFileName || '');

                  if (dict.textureFileName) {
                    assetManager.loadRemote(imgPath, function (err, imageAsset) {
                      if (err) {
                        dict.textureFileName = undefined;

                        _this2._initTextureWithDictionary(dict);

                        error(err);
                      } else {
                        if (imageAsset) {
                          _this2.spriteFrame = SpriteFrame.createWithImage(imageAsset);
                        } else {
                          _this2.spriteFrame = SpriteFrame.createWithImage(builtinResMgr.get('white-texture'));
                        }
                      }
                    });
                  } else if (dict.textureImageData) {
                    var textureData = dict.textureImageData;

                    if (textureData && textureData.length > 0) {
                      var imageAsset = assetManager.assets.get(imgPath);

                      if (!imageAsset) {
                        var buffer = codec.unzipBase64AsArray(textureData, 1);

                        if (!buffer) {
                          warnID(6030, this._file.name);
                          return false;
                        }

                        var imageFormat = getImageFormatByData(buffer);

                        if (imageFormat !== ImageFormat.TIFF && imageFormat !== ImageFormat.PNG) {
                          warnID(6031, this._file.name);
                          return false;
                        }

                        var canvasObj = document.createElement('canvas');

                        if (imageFormat === ImageFormat.PNG) {
                          var myPngObj = new PNGReader(buffer);
                          myPngObj.render(canvasObj);
                        } else {
                          if (!this._tiffReader) {
                            this._tiffReader = new TiffReader();
                          }

                          this._tiffReader.parseTIFF(buffer, canvasObj);
                        }

                        imageAsset = new ImageAsset(canvasObj);
                        assetManager.assets.add(imgPath, imageAsset);
                      }

                      if (!imageAsset) {
                        warnID(6032, this._file.name);
                      }

                      if (imageAsset) {
                        this.spriteFrame = SpriteFrame.createWithImage(imageAsset);
                      } else {
                        this.spriteFrame = SpriteFrame.createWithImage(builtinResMgr.get('white-texture'));
                      }
                    } else {
                      return false;
                    }
                  }
                }

                return true;
              };

              _proto._initWithDictionary = function _initWithDictionary(dict) {
                this.totalParticles = parseInt(dict.maxParticles || 0);
                this.life = parseFloat(dict.particleLifespan || 0);
                this.lifeVar = parseFloat(dict.particleLifespanVariance || 0);
                var _tempEmissionRate = dict.emissionRate;

                if (_tempEmissionRate) {
                  this.emissionRate = _tempEmissionRate;
                } else {
                  this.emissionRate = Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
                }

                this.duration = parseFloat(dict.duration || 0);
                this._srcBlendFactor = parseInt(dict.blendFuncSource || BlendFactor.SRC_ALPHA);
                this._dstBlendFactor = parseInt(dict.blendFuncDestination || BlendFactor.ONE_MINUS_SRC_ALPHA);
                var locStartColor = this._startColor;
                locStartColor.r = parseFloat(dict.startColorRed || 0) * 255;
                locStartColor.g = parseFloat(dict.startColorGreen || 0) * 255;
                locStartColor.b = parseFloat(dict.startColorBlue || 0) * 255;
                locStartColor.a = parseFloat(dict.startColorAlpha || 0) * 255;
                var locStartColorVar = this._startColorVar;
                locStartColorVar.r = parseFloat(dict.startColorVarianceRed || 0) * 255;
                locStartColorVar.g = parseFloat(dict.startColorVarianceGreen || 0) * 255;
                locStartColorVar.b = parseFloat(dict.startColorVarianceBlue || 0) * 255;
                locStartColorVar.a = parseFloat(dict.startColorVarianceAlpha || 0) * 255;
                var locEndColor = this._endColor;
                locEndColor.r = parseFloat(dict.finishColorRed || 0) * 255;
                locEndColor.g = parseFloat(dict.finishColorGreen || 0) * 255;
                locEndColor.b = parseFloat(dict.finishColorBlue || 0) * 255;
                locEndColor.a = parseFloat(dict.finishColorAlpha || 0) * 255;
                var locEndColorVar = this._endColorVar;
                locEndColorVar.r = parseFloat(dict.finishColorVarianceRed || 0) * 255;
                locEndColorVar.g = parseFloat(dict.finishColorVarianceGreen || 0) * 255;
                locEndColorVar.b = parseFloat(dict.finishColorVarianceBlue || 0) * 255;
                locEndColorVar.a = parseFloat(dict.finishColorVarianceAlpha || 0) * 255;
                this.startSize = parseFloat(dict.startParticleSize || 0);
                this.startSizeVar = parseFloat(dict.startParticleSizeVariance || 0);
                this.endSize = parseFloat(dict.finishParticleSize || 0);
                this.endSizeVar = parseFloat(dict.finishParticleSizeVariance || 0);
                this.positionType = parseFloat(dict.positionType !== undefined ? dict.positionType : PositionType.FREE);
                this.sourcePos.set(0, 0);
                this.posVar.set(parseFloat(dict.sourcePositionVariancex || 0), parseFloat(dict.sourcePositionVariancey || 0));
                this.angle = parseFloat(dict.angle || 0);
                this.angleVar = parseFloat(dict.angleVariance || 0);
                this.startSpin = parseFloat(dict.rotationStart || 0);
                this.startSpinVar = parseFloat(dict.rotationStartVariance || 0);
                this.endSpin = parseFloat(dict.rotationEnd || 0);
                this.endSpinVar = parseFloat(dict.rotationEndVariance || 0);
                this.emitterMode = parseInt(dict.emitterType || EmitterMode.GRAVITY);

                if (this.emitterMode === EmitterMode.GRAVITY) {
                  this.gravity.set(parseFloat(dict.gravityx || 0), parseFloat(dict.gravityy || 0));
                  this.speed = parseFloat(dict.speed || 0);
                  this.speedVar = parseFloat(dict.speedVariance || 0);
                  this.radialAccel = parseFloat(dict.radialAcceleration || 0);
                  this.radialAccelVar = parseFloat(dict.radialAccelVariance || 0);
                  this.tangentialAccel = parseFloat(dict.tangentialAcceleration || 0);
                  this.tangentialAccelVar = parseFloat(dict.tangentialAccelVariance || 0);
                  var locRotationIsDir = dict.rotationIsDir || '';

                  if (locRotationIsDir !== null) {
                    locRotationIsDir = locRotationIsDir.toString().toLowerCase();
                    this.rotationIsDir = locRotationIsDir === 'true' || locRotationIsDir === '1';
                  } else {
                    this.rotationIsDir = false;
                  }
                } else if (this.emitterMode === EmitterMode.RADIUS) {
                  this.startRadius = parseFloat(dict.maxRadius || 0);
                  this.startRadiusVar = parseFloat(dict.maxRadiusVariance || 0);
                  this.endRadius = parseFloat(dict.minRadius || 0);
                  this.endRadiusVar = parseFloat(dict.minRadiusVariance || 0);
                  this.rotatePerS = parseFloat(dict.rotatePerSecond || 0);
                  this.rotatePerSVar = parseFloat(dict.rotatePerSecondVariance || 0);
                } else {
                  warnID(6009);
                  return false;
                }

                this._initTextureWithDictionary(dict);

                return true;
              };

              _proto._syncAspect = function _syncAspect() {
                if (this._renderSpriteFrame) {
                  var frameRect = this._renderSpriteFrame.rect;
                  this.aspectRatio = frameRect.width / frameRect.height;
                }
              };

              _proto._applySpriteFrame = function _applySpriteFrame() {
                this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;

                if (this._renderSpriteFrame) {
                  if (this._renderSpriteFrame.texture) {
                    this._simulator.updateUVs(true);

                    this._syncAspect();

                    this._updateMaterial();

                    this._stopped = false;
                    this._renderFlag = this._canRender();
                  }
                } else {
                  this.resetSystem();
                }
              };

              _proto._getTexture = function _getTexture() {
                return this._renderSpriteFrame && this._renderSpriteFrame.texture;
              };

              _proto._updateMaterial = function _updateMaterial() {
                var mat = this.getMaterialInstance(0);
                if (mat) mat.recompileShaders({
                  USE_LOCAL: this._positionType !== PositionType.FREE
                });
              };

              _proto._finishedSimulation = function _finishedSimulation() {

                this.resetSystem();
                this.stopSystem();
                this._renderFlag = this._canRender();

                if (this.autoRemoveOnFinish && this._stopped) {
                  this.node.destroy();
                }
              };

              _proto._canRender = function _canRender() {
                return _Renderable2D.prototype._canRender.call(this) && !this._stopped && this._renderSpriteFrame !== null;
              };

              _proto._render = function _render(render) {
                if (this._positionType === PositionType.RELATIVE) {
                  render.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, this.node.parent);
                } else if (this.positionType === PositionType.GROUPED) {
                  render.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, this.node);
                } else {
                  render.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, null);
                }
              };

              _createClass(ParticleSystem2D, [{
                key: "custom",
                get: function get() {
                  return this._custom;
                },
                set: function set(value) {

                  if (this._custom !== value) {
                    this._custom = value;

                    this._applyFile();
                  }
                }
              }, {
                key: "file",
                get: function get() {
                  return this._file;
                },
                set: function set(value) {
                  if (this._file !== value) {
                    this._file = value;

                    if (value) {
                      this._applyFile();
                    } else {
                      this.custom = true;
                    }
                  }
                }
              }, {
                key: "spriteFrame",
                get: function get() {
                  return this._spriteFrame;
                },
                set: function set(value) {
                  var lastSprite = this._renderSpriteFrame;

                  if (lastSprite === value) {
                    return;
                  }

                  this._renderSpriteFrame = value;

                  if (!value || value._uuid) {
                    this._spriteFrame = value;
                  }

                  this._applySpriteFrame();
                }
              }, {
                key: "particleCount",
                get: function get() {
                  return this._simulator.particles.length;
                }
              }, {
                key: "totalParticles",
                get: function get() {
                  return this._totalParticles;
                },
                set: function set(value) {
                  if (this._totalParticles === value) return;
                  this._totalParticles = value;
                }
              }, {
                key: "startColor",
                get: function get() {
                  return this._startColor;
                },
                set: function set(val) {
                  this._startColor.r = val.r;
                  this._startColor.g = val.g;
                  this._startColor.b = val.b;
                  this._startColor.a = val.a;
                }
              }, {
                key: "startColorVar",
                get: function get() {
                  return this._startColorVar;
                },
                set: function set(val) {
                  this._startColorVar.r = val.r;
                  this._startColorVar.g = val.g;
                  this._startColorVar.b = val.b;
                  this._startColorVar.a = val.a;
                }
              }, {
                key: "color",
                get: function get() {
                  return this._color;
                },
                set: function set(value) {}
              }, {
                key: "endColor",
                get: function get() {
                  return this._endColor;
                },
                set: function set(val) {
                  this._endColor.r = val.r;
                  this._endColor.g = val.g;
                  this._endColor.b = val.b;
                  this._endColor.a = val.a;
                }
              }, {
                key: "endColorVar",
                get: function get() {
                  return this._endColorVar;
                },
                set: function set(val) {
                  this._endColorVar.r = val.r;
                  this._endColorVar.g = val.g;
                  this._endColorVar.b = val.b;
                  this._endColorVar.a = val.a;
                }
              }, {
                key: "positionType",
                get: function get() {
                  return this._positionType;
                },
                set: function set(val) {
                  this._positionType = val;

                  this._updateMaterial();
                }
              }, {
                key: "preview",
                get: function get() {
                  return this._preview;
                },
                set: function set(val) {
                  if (val) {
                    this._startPreview();
                  } else {
                    this._stopPreview();
                  }

                  this._preview = val;
                }
              }, {
                key: "stopped",
                get: function get() {
                  return this._stopped;
                }
              }, {
                key: "active",
                get: function get() {
                  return this._simulator.active;
                }
              }, {
                key: "assembler",
                get: function get() {
                  return this._assembler;
                }
              }]);

              return ParticleSystem2D;
            }(Renderable2D), _class3$f.EmitterMode = EmitterMode, _class3$f.PositionType = PositionType, _class3$f.DURATION_INFINITY = DURATION_INFINITY, _class3$f.START_SIZE_EQUAL_TO_END_SIZE = START_SIZE_EQUAL_TO_END_SIZE, _class3$f.START_RADIUS_EQUAL_TO_END_RADIUS = START_RADIUS_EQUAL_TO_END_RADIUS, _temp$16), (_applyDecoratedDescriptor(_class2$12.prototype, "custom", [editable, _dec3$J, _dec4$E], Object.getOwnPropertyDescriptor(_class2$12.prototype, "custom"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "file", [_dec5$B, _dec6$y, _dec7$x], Object.getOwnPropertyDescriptor(_class2$12.prototype, "file"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "spriteFrame", [_dec8$v, _dec9$r], Object.getOwnPropertyDescriptor(_class2$12.prototype, "spriteFrame"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "totalParticles", [editable, _dec10$p], Object.getOwnPropertyDescriptor(_class2$12.prototype, "totalParticles"), _class2$12.prototype), _descriptor$_ = _applyDecoratedDescriptor(_class2$12.prototype, "duration", [serializable, editable, _dec11$l], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return -1;
              }
            }), _descriptor2$R = _applyDecoratedDescriptor(_class2$12.prototype, "emissionRate", [serializable, editable, _dec12$l], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 10;
              }
            }), _descriptor3$G = _applyDecoratedDescriptor(_class2$12.prototype, "life", [serializable, editable, _dec13$l], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor4$B = _applyDecoratedDescriptor(_class2$12.prototype, "lifeVar", [serializable, editable, _dec14$j], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$12.prototype, "startColor", [editable, _dec15$j], Object.getOwnPropertyDescriptor(_class2$12.prototype, "startColor"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "startColorVar", [editable, _dec16$i], Object.getOwnPropertyDescriptor(_class2$12.prototype, "startColorVar"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "color", [_dec17$g], Object.getOwnPropertyDescriptor(_class2$12.prototype, "color"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "endColor", [editable, _dec18$f], Object.getOwnPropertyDescriptor(_class2$12.prototype, "endColor"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "endColorVar", [editable, _dec19$f], Object.getOwnPropertyDescriptor(_class2$12.prototype, "endColorVar"), _class2$12.prototype), _descriptor5$v = _applyDecoratedDescriptor(_class2$12.prototype, "angle", [serializable, editable, _dec20$f], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 90;
              }
            }), _descriptor6$p = _applyDecoratedDescriptor(_class2$12.prototype, "angleVar", [serializable, editable, _dec21$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 20;
              }
            }), _descriptor7$j = _applyDecoratedDescriptor(_class2$12.prototype, "startSize", [serializable, editable, _dec22$c], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 50;
              }
            }), _descriptor8$g = _applyDecoratedDescriptor(_class2$12.prototype, "startSizeVar", [serializable, editable, _dec23$b], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor9$e = _applyDecoratedDescriptor(_class2$12.prototype, "endSize", [serializable, editable, _dec24$a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor10$c = _applyDecoratedDescriptor(_class2$12.prototype, "endSizeVar", [serializable, editable, _dec25$a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor11$a = _applyDecoratedDescriptor(_class2$12.prototype, "startSpin", [serializable, editable, _dec26$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor12$a = _applyDecoratedDescriptor(_class2$12.prototype, "startSpinVar", [serializable, editable, _dec27$9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor13$a = _applyDecoratedDescriptor(_class2$12.prototype, "endSpin", [serializable, editable, _dec28$8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor14$4 = _applyDecoratedDescriptor(_class2$12.prototype, "endSpinVar", [serializable, editable, _dec29$7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor15$4 = _applyDecoratedDescriptor(_class2$12.prototype, "sourcePos", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Vec2.ZERO.clone();
              }
            }), _descriptor16$4 = _applyDecoratedDescriptor(_class2$12.prototype, "posVar", [serializable, editable, _dec30$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Vec2.ZERO.clone();
              }
            }), _applyDecoratedDescriptor(_class2$12.prototype, "positionType", [_dec31$6, _dec32$6], Object.getOwnPropertyDescriptor(_class2$12.prototype, "positionType"), _class2$12.prototype), _applyDecoratedDescriptor(_class2$12.prototype, "preview", [editable, _dec33$4, _dec34$4], Object.getOwnPropertyDescriptor(_class2$12.prototype, "preview"), _class2$12.prototype), _descriptor17$4 = _applyDecoratedDescriptor(_class2$12.prototype, "emitterMode", [serializable, editable, _dec35$4, _dec36$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return EmitterMode.GRAVITY;
              }
            }), _descriptor18$3 = _applyDecoratedDescriptor(_class2$12.prototype, "gravity", [serializable, editable, _dec37$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Vec2.ZERO.clone();
              }
            }), _descriptor19$3 = _applyDecoratedDescriptor(_class2$12.prototype, "speed", [serializable, editable, _dec38$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 180;
              }
            }), _descriptor20$2 = _applyDecoratedDescriptor(_class2$12.prototype, "speedVar", [serializable, editable, _dec39$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 50;
              }
            }), _descriptor21$2 = _applyDecoratedDescriptor(_class2$12.prototype, "tangentialAccel", [serializable, editable, _dec40$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 80;
              }
            }), _descriptor22$2 = _applyDecoratedDescriptor(_class2$12.prototype, "tangentialAccelVar", [serializable, editable, _dec41$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor23$2 = _applyDecoratedDescriptor(_class2$12.prototype, "radialAccel", [serializable, editable, _dec42$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor24$1 = _applyDecoratedDescriptor(_class2$12.prototype, "radialAccelVar", [serializable, editable, _dec43$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor25$1 = _applyDecoratedDescriptor(_class2$12.prototype, "rotationIsDir", [serializable, editable, _dec44$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor26$1 = _applyDecoratedDescriptor(_class2$12.prototype, "startRadius", [serializable, editable, _dec45$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor27$1 = _applyDecoratedDescriptor(_class2$12.prototype, "startRadiusVar", [serializable, editable, _dec46$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor28$1 = _applyDecoratedDescriptor(_class2$12.prototype, "endRadius", [serializable, editable, _dec47$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor29$1 = _applyDecoratedDescriptor(_class2$12.prototype, "endRadiusVar", [serializable, editable, _dec48$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor30$1 = _applyDecoratedDescriptor(_class2$12.prototype, "rotatePerS", [serializable, editable, _dec49$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor31$1 = _applyDecoratedDescriptor(_class2$12.prototype, "rotatePerSVar", [serializable, editable, _dec50$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor32$1 = _applyDecoratedDescriptor(_class2$12.prototype, "playOnLoad", [serializable, editable, _dec51$1, _dec52$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor33$1 = _applyDecoratedDescriptor(_class2$12.prototype, "autoRemoveOnFinish", [serializable, editable, _dec53$1, _dec54$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor34$1 = _applyDecoratedDescriptor(_class2$12.prototype, "_preview", [_dec55$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor35$1 = _applyDecoratedDescriptor(_class2$12.prototype, "_custom", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor36$1 = _applyDecoratedDescriptor(_class2$12.prototype, "_file", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor37$1 = _applyDecoratedDescriptor(_class2$12.prototype, "_spriteFrame", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor38$1 = _applyDecoratedDescriptor(_class2$12.prototype, "_totalParticles", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 150;
              }
            }), _descriptor39$1 = _applyDecoratedDescriptor(_class2$12.prototype, "_startColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(255, 255, 255, 255);
              }
            }), _descriptor40$1 = _applyDecoratedDescriptor(_class2$12.prototype, "_startColorVar", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(0, 0, 0, 0);
              }
            }), _descriptor41 = _applyDecoratedDescriptor(_class2$12.prototype, "_endColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(255, 255, 255, 0);
              }
            }), _descriptor42 = _applyDecoratedDescriptor(_class2$12.prototype, "_endColorVar", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(0, 0, 0, 0);
              }
            }), _descriptor43 = _applyDecoratedDescriptor(_class2$12.prototype, "_positionType", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PositionType.FREE;
              }
            })), _class2$12)) || _class$1d) || _class$1d) || _class$1d) || _class$1d));

            var _dec$1b, _dec2$W, _dec3$K, _dec4$F, _class$1e, _class2$13, _descriptor$$, _descriptor2$S, _descriptor3$H, _descriptor4$C, _descriptor5$w, _descriptor6$q, _class3$g, _temp$17;

            var Point$1 = function () {
              function Point(point, dir) {
                this.point = new Vec2();
                this.dir = new Vec2();
                this.distance = 0;
                this.time = 0;
                if (point) this.point.set(point);
                if (dir) this.dir.set(dir);
              }

              var _proto = Point.prototype;

              _proto.setPoint = function setPoint(x, y) {
                this.point.x = x;
                this.point.y = y;
              };

              _proto.setDir = function setDir(x, y) {
                this.dir.x = x;
                this.dir.y = y;
              };

              return Point;
            }();

            var MotionStreak = exports('MotionStreak', (_dec$1b = ccclass('cc.MotionStreak'), _dec2$W = menu$1(), _dec3$K = help(), _dec4$F = type$1(Texture2D), _dec$1b(_class$1e = executeInEditMode(_class$1e = playOnFocus(_class$1e = _dec2$W(_class$1e = _dec3$K(_class$1e = (_class2$13 = (_temp$17 = _class3$g = function (_Renderable2D) {
              _inheritsLoose(MotionStreak, _Renderable2D);

              function MotionStreak() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Renderable2D.call.apply(_Renderable2D, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_preview", _descriptor$$, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fadeTime", _descriptor2$S, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_minSeg", _descriptor3$H, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_stroke", _descriptor4$C, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_texture", _descriptor5$w, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fastMode", _descriptor6$q, _assertThisInitialized(_this));

                _this._points = [];
                return _this;
              }

              var _proto2 = MotionStreak.prototype;

              _proto2.onEnable = function onEnable() {
                _Renderable2D.prototype.onEnable.call(this);

                this.reset();
              };

              _proto2._flushAssembler = function _flushAssembler() {
                var assembler = MotionStreak.Assembler.getAssembler(this);

                if (this._assembler !== assembler) {
                  this._assembler = assembler;
                }

                if (!this._renderData) {
                  if (this._assembler && this._assembler.createData) {
                    this._renderData = this._assembler.createData(this);
                    this._renderData.material = this.material;
                  }
                }
              };

              _proto2.onFocusInEditor = function onFocusInEditor() {
                if (this._preview) {
                  this.reset();
                }
              };

              _proto2.onLostFocusInEditor = function onLostFocusInEditor() {
                if (this._preview) {
                  this.reset();
                }
              };

              _proto2.reset = function reset() {
                this._points.length = 0;
                if (this._renderData) this._renderData.clear();
              };

              _proto2.lateUpdate = function lateUpdate(dt) {
                if (this._assembler) this._assembler.update(this, dt);
              };

              _proto2._render = function _render(render) {
                render.commitComp(this, this.renderData, this._texture, this._assembler, null);
              };

              _createClass(MotionStreak, [{
                key: "preview",
                get: function get() {
                  return this._preview;
                },
                set: function set(val) {
                  this._preview = val;
                  this.reset();
                }
              }, {
                key: "fadeTime",
                get: function get() {
                  return this._fadeTime;
                },
                set: function set(val) {
                  this._fadeTime = val;
                  this.reset();
                }
              }, {
                key: "minSeg",
                get: function get() {
                  return this._minSeg;
                },
                set: function set(val) {
                  this._minSeg = val;
                }
              }, {
                key: "stroke",
                get: function get() {
                  return this._stroke;
                },
                set: function set(val) {
                  this._stroke = val;
                }
              }, {
                key: "texture",
                get: function get() {
                  return this._texture;
                },
                set: function set(val) {
                  if (this._texture === val) return;
                  this._texture = val;
                }
              }, {
                key: "fastMode",
                get: function get() {
                  return this._fastMode;
                },
                set: function set(val) {
                  this._fastMode = val;
                }
              }, {
                key: "points",
                get: function get() {
                  return this._points;
                }
              }]);

              return MotionStreak;
            }(Renderable2D), _class3$g.Point = Point$1, _temp$17), (_applyDecoratedDescriptor(_class2$13.prototype, "preview", [editable], Object.getOwnPropertyDescriptor(_class2$13.prototype, "preview"), _class2$13.prototype), _applyDecoratedDescriptor(_class2$13.prototype, "fadeTime", [editable], Object.getOwnPropertyDescriptor(_class2$13.prototype, "fadeTime"), _class2$13.prototype), _applyDecoratedDescriptor(_class2$13.prototype, "minSeg", [editable], Object.getOwnPropertyDescriptor(_class2$13.prototype, "minSeg"), _class2$13.prototype), _applyDecoratedDescriptor(_class2$13.prototype, "stroke", [editable], Object.getOwnPropertyDescriptor(_class2$13.prototype, "stroke"), _class2$13.prototype), _applyDecoratedDescriptor(_class2$13.prototype, "texture", [_dec4$F], Object.getOwnPropertyDescriptor(_class2$13.prototype, "texture"), _class2$13.prototype), _applyDecoratedDescriptor(_class2$13.prototype, "fastMode", [editable], Object.getOwnPropertyDescriptor(_class2$13.prototype, "fastMode"), _class2$13.prototype), _descriptor$$ = _applyDecoratedDescriptor(_class2$13.prototype, "_preview", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$S = _applyDecoratedDescriptor(_class2$13.prototype, "_fadeTime", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor3$H = _applyDecoratedDescriptor(_class2$13.prototype, "_minSeg", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor4$C = _applyDecoratedDescriptor(_class2$13.prototype, "_stroke", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 64;
              }
            }), _descriptor5$w = _applyDecoratedDescriptor(_class2$13.prototype, "_texture", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor6$q = _applyDecoratedDescriptor(_class2$13.prototype, "_fastMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            })), _class2$13)) || _class$1e) || _class$1e) || _class$1e) || _class$1e) || _class$1e));

            var _tangent = new Vec2();

            var _normal = new Vec2();

            var _vec2 = new Vec2();

            function normal(out, dir) {
              out.x = -dir.y;
              out.y = dir.x;
              return out;
            }

            var MotionStreakAssembler = {
              createData: function createData(comp) {
                var renderData = comp.requestRenderData();
                renderData.dataLength = 4;
                renderData.resize(16, (16 - 2) * 3);
                return renderData;
              },
              update: function update(comp, dt) {
                var stroke = comp.stroke / 2;
                var node = comp.node;
                var matrix = node.worldMatrix;
                var tx = matrix.m12;
                var ty = matrix.m13;
                var points = comp.points;
                var cur;

                if (points.length > 1) {
                  var point = points[0];
                  var difx = point.point.x - tx;
                  var dify = point.point.y - ty;

                  if (difx * difx + dify * dify < comp.minSeg) {
                    cur = point;
                  }
                }

                if (!cur) {
                  cur = new MotionStreak.Point();
                  points.unshift(cur);
                }

                cur.setPoint(tx, ty);
                cur.time = comp.fadeTime + dt;
                var vertexCount = 0;
                var indexCount = 0;

                if (points.length < 2) {
                  return;
                }

                var renderData = comp.renderData;
                this.updateRenderDataCache(comp, renderData);
                var color = comp.color;
                var cr = color.r;
                var cg = color.g;
                var cb = color.b;
                var ca = color.a;
                var prev = points[1];
                prev.distance = Vec2.subtract(_vec2, cur.point, prev.point).length();

                _vec2.normalize();

                prev.setDir(_vec2.x, _vec2.y);
                cur.setDir(_vec2.x, _vec2.y);
                renderData.dataLength = points.length * 2;
                var data = renderData.data;
                var fadeTime = comp.fadeTime;
                var findLast = false;

                for (var i = points.length - 1; i >= 0; i--) {
                  var p = points[i];
                  var _point = p.point;
                  var dir = p.dir;
                  p.time -= dt;

                  if (p.time < 0) {
                    points.splice(i, 1);
                    continue;
                  }

                  var progress = p.time / fadeTime;
                  var next = points[i - 1];

                  if (!findLast) {
                    if (!next) {
                      points.splice(i, 1);
                      continue;
                    }

                    _point.x = next.point.x - dir.x * progress;
                    _point.y = next.point.y - dir.y * progress;
                  }

                  findLast = true;
                  normal(_normal, dir);
                  var da = progress * ca;
                  var c = (da << 24 >>> 0) + (cb << 16) + (cg << 8) + cr;
                  var offset = vertexCount;
                  data[offset].x = _point.x + _normal.x * stroke;
                  data[offset].y = _point.y + _normal.y * stroke;
                  data[offset].u = 1;
                  data[offset].v = progress;
                  data[offset].color._val = c;
                  offset += 1;
                  data[offset].x = _point.x - _normal.x * stroke;
                  data[offset].y = _point.y - _normal.y * stroke;
                  data[offset].u = 0;
                  data[offset].v = progress;
                  data[offset].color._val = c;
                  vertexCount += 2;
                }

                indexCount = vertexCount <= 2 ? 0 : (vertexCount - 2) * 3;
                renderData.resize(vertexCount, indexCount);
              },
              updateRenderDataCache: function updateRenderDataCache(comp, renderData) {
                if (renderData.passDirty) {
                  renderData.updatePass(comp);
                }

                if (renderData.nodeDirty) {
                  renderData.updateNode(comp);
                }

                if (renderData.textureDirty && comp.texture) {
                  renderData.updateTexture(comp.texture);
                  renderData.material = comp.getRenderMaterial(0);
                }

                if (renderData.hashDirty) {
                  renderData.updateHash();
                }
              },
              updateRenderData: function updateRenderData(comp) {},
              updateColor: function updateColor(comp) {},
              fillBuffers: function fillBuffers(comp, renderer) {
                var renderData = comp.renderData;
                var chunk = renderData.chunk;
                var dataList = renderData.data;
                var vertexCount = renderData.vertexCount;
                var indexCount = renderData.indexCount;
                var vData = chunk.vb;
                var vertexOffset = 0;

                for (var i = 0; i < vertexCount; i++) {
                  var vert = dataList[i];
                  vData[vertexOffset++] = vert.x;
                  vData[vertexOffset++] = vert.y;
                  vData[vertexOffset++] = vert.z;
                  vData[vertexOffset++] = vert.u;
                  vData[vertexOffset++] = vert.v;
                  Color$1.toArray(vData, vert.color, vertexOffset);
                  vertexOffset += 4;
                }

                var bid = chunk.bufferId;
                var vid = chunk.vertexOffset;
                var meshBuffer = chunk.vertexAccessor.getMeshBuffer(chunk.bufferId);
                var ib = chunk.vertexAccessor.getIndexBuffer(bid);
                var indexOffset = meshBuffer.indexOffset;

                for (var _i = 0, l = indexCount; _i < l; _i += 2) {
                  var start = vid + _i;
                  ib[indexOffset++] = start;
                  ib[indexOffset++] = start + 2;
                  ib[indexOffset++] = start + 1;
                  ib[indexOffset++] = start + 1;
                  ib[indexOffset++] = start + 2;
                  ib[indexOffset++] = start + 3;
                }

                meshBuffer.indexOffset += renderData.indexCount;
                meshBuffer.setDirty();
              }
            };
            var MotionStreakAssemblerManager = exports('MotionStreakAssemblerManager', {
              getAssembler: function getAssembler(comp) {
                return MotionStreakAssembler;
              }
            });
            MotionStreak.Assembler = MotionStreakAssemblerManager;

            var ParticleAssembler = {
              maxParticleDeltaTime: 0,
              createData: function createData(comp) {
                return MeshRenderData.add();
              },
              removeData: function removeData(data) {
                MeshRenderData.remove(data);
              },
              updateRenderData: function updateRenderData() {},
              fillBuffers: function fillBuffers(comp, renderer) {}
            };
            var ParticleSystem2DAssembler = exports('ParticleSystem2DAssembler', {
              getAssembler: function getAssembler(comp) {
                if (!ParticleAssembler.maxParticleDeltaTime) {
                  ParticleAssembler.maxParticleDeltaTime = legacyCC.game.frameTime / 1000 * 2;
                }

                return ParticleAssembler;
              }
            });
            ParticleSystem2D.Assembler = ParticleSystem2DAssembler;

            var WRAPPER;
            var physicsEngineId;
            function select(id, wrapper) {
              physicsEngineId = id;
              legacyCC._global.CC_PHYSICS_2D_BUILTIN = id == 'builtin';
              legacyCC._global.CC_PHYSICS_2D_BOX2D = id == 'box2d';
              WRAPPER = wrapper;
            }

            var box2d_umd=createCommonjsModule(function(module,exports){(function(global,factory){factory(exports);})(commonjsGlobal,function(exports){function b2Assert(condition){if(!condition){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}throw _construct(Error,args);}}function b2Maybe(value,def){return value!==undefined?value:def;}var b2_maxFloat=1E+37;var b2_epsilon=1E-5;var b2_epsilon_sq=b2_epsilon*b2_epsilon;var b2_pi=3.14159265359;var b2_maxManifoldPoints=2;var b2_maxPolygonVertices=8;var b2_aabbExtension=0.1;var b2_aabbMultiplier=2;var b2_linearSlop=0.008;var b2_angularSlop=2/180*b2_pi;var b2_polygonRadius=2*b2_linearSlop;var b2_maxSubSteps=8;var b2_maxTOIContacts=32;var b2_velocityThreshold=1;var b2_maxLinearCorrection=0.2;var b2_maxAngularCorrection=8/180*b2_pi;var b2_maxTranslation=2;var b2_maxTranslationSquared=b2_maxTranslation*b2_maxTranslation;var b2_maxRotation=0.5*b2_pi;var b2_maxRotationSquared=b2_maxRotation*b2_maxRotation;var b2_baumgarte=0.2;var b2_toiBaumgarte=0.75;var b2_invalidParticleIndex=-1;var b2_maxParticleIndex=0x7FFFFFFF;var b2_particleStride=0.75;var b2_minParticleWeight=1.0;var b2_maxParticlePressure=0.25;var b2_maxParticleForce=0.5;var b2_maxTriadDistance=2.0;var b2_maxTriadDistanceSquared=b2_maxTriadDistance*b2_maxTriadDistance;var b2_minParticleSystemBufferCapacity=256;var b2_barrierCollisionTime=2.5;var b2_timeToSleep=0.5;var b2_linearSleepTolerance=0.01;var b2_angularSleepTolerance=2/180*b2_pi;function b2Alloc(size){return null;}function b2Free(mem){}function b2Log(message){}var b2Version=function(){function b2Version(major,minor,revision){if(major===void 0){major=0;}if(minor===void 0){minor=0;}if(revision===void 0){revision=0;}this.major=0;this.minor=0;this.revision=0;this.major=major;this.minor=minor;this.revision=revision;}var _proto=b2Version.prototype;_proto.toString=function toString(){return this.major+"."+this.minor+"."+this.revision;};return b2Version;}();var b2_version=new b2Version(2,3,2);var b2_branch="master";var b2_commit="fbf51801d80fc389d43dc46524520e89043b6faf";function b2ParseInt(v){return parseInt(v,10);}function b2ParseUInt(v){return Math.abs(parseInt(v,10));}function b2MakeArray(length,init){var a=new Array(length);for(var i=0;i<length;++i){a[i]=init(i);}return a;}function b2MakeNullArray(length){var a=new Array(length);for(var i=0;i<length;++i){a[i]=null;}return a;}function b2MakeNumberArray(length,init){if(init===void 0){init=0;}var a=new Array(length);for(var i=0;i<length;++i){a[i]=init;}return a;}var b2_pi_over_180=b2_pi/180;var b2_180_over_pi=180/b2_pi;var b2_two_pi=2*b2_pi;var b2Abs=Math.abs;function b2Min(a,b){return a<b?a:b;}function b2Max(a,b){return a>b?a:b;}function b2Clamp(a,lo,hi){return a<lo?lo:a>hi?hi:a;}function b2Swap(a,b){var tmp=a[0];a[0]=b[0];b[0]=tmp;}var b2IsValid=isFinite;function b2Sq(n){return n*n;}function b2InvSqrt(n){return 1/Math.sqrt(n);}var b2Sqrt=Math.sqrt;var b2Pow=Math.pow;function b2DegToRad(degrees){return degrees*b2_pi_over_180;}function b2RadToDeg(radians){return radians*b2_180_over_pi;}var b2Cos=Math.cos;var b2Sin=Math.sin;var b2Acos=Math.acos;var b2Asin=Math.asin;var b2Atan2=Math.atan2;function b2NextPowerOfTwo(x){x|=x>>1&0x7FFFFFFF;x|=x>>2&0x3FFFFFFF;x|=x>>4&0x0FFFFFFF;x|=x>>8&0x00FFFFFF;x|=x>>16&0x0000FFFF;return x+1;}function b2IsPowerOfTwo(x){return x>0&&(x&x-1)===0;}function b2Random(){return Math.random()*2-1;}function b2RandomRange(lo,hi){return (hi-lo)*Math.random()+lo;}var b2Vec2=function(){function b2Vec2(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}if(args[0]instanceof Float32Array){if(args[0].length!==2){throw new Error();}this.data=args[0];}else {var x=typeof args[0]==="number"?args[0]:0;var y=typeof args[1]==="number"?args[1]:0;this.data=new Float32Array([x,y]);}}var _proto2=b2Vec2.prototype;_proto2.Clone=function Clone(){return new b2Vec2(this.x,this.y);};_proto2.SetZero=function SetZero(){this.x=0;this.y=0;return this;};_proto2.Set=function Set(x,y){this.x=x;this.y=y;return this;};_proto2.Copy=function Copy(other){this.x=other.x;this.y=other.y;return this;};_proto2.SelfAdd=function SelfAdd(v){this.x+=v.x;this.y+=v.y;return this;};_proto2.SelfAddXY=function SelfAddXY(x,y){this.x+=x;this.y+=y;return this;};_proto2.SelfSub=function SelfSub(v){this.x-=v.x;this.y-=v.y;return this;};_proto2.SelfSubXY=function SelfSubXY(x,y){this.x-=x;this.y-=y;return this;};_proto2.SelfMul=function SelfMul(s){this.x*=s;this.y*=s;return this;};_proto2.SelfMulAdd=function SelfMulAdd(s,v){this.x+=s*v.x;this.y+=s*v.y;return this;};_proto2.SelfMulSub=function SelfMulSub(s,v){this.x-=s*v.x;this.y-=s*v.y;return this;};_proto2.Dot=function Dot(v){return this.x*v.x+this.y*v.y;};_proto2.Cross=function Cross(v){return this.x*v.y-this.y*v.x;};_proto2.Length=function Length(){var x=this.x,y=this.y;return Math.sqrt(x*x+y*y);};_proto2.LengthSquared=function LengthSquared(){var x=this.x,y=this.y;return x*x+y*y;};_proto2.Normalize=function Normalize(){var length=this.Length();if(length>=b2_epsilon){var inv_length=1/length;this.x*=inv_length;this.y*=inv_length;}return length;};_proto2.SelfNormalize=function SelfNormalize(){var length=this.Length();if(length>=b2_epsilon){var inv_length=1/length;this.x*=inv_length;this.y*=inv_length;}return this;};_proto2.SelfRotate=function SelfRotate(radians){var c=Math.cos(radians);var s=Math.sin(radians);var x=this.x;this.x=c*x-s*this.y;this.y=s*x+c*this.y;return this;};_proto2.SelfRotateCosSin=function SelfRotateCosSin(c,s){var x=this.x;this.x=c*x-s*this.y;this.y=s*x+c*this.y;return this;};_proto2.IsValid=function IsValid(){return isFinite(this.x)&&isFinite(this.y);};_proto2.SelfCrossVS=function SelfCrossVS(s){var x=this.x;this.x=s*this.y;this.y=-s*x;return this;};_proto2.SelfCrossSV=function SelfCrossSV(s){var x=this.x;this.x=-s*this.y;this.y=s*x;return this;};_proto2.SelfMinV=function SelfMinV(v){this.x=b2Min(this.x,v.x);this.y=b2Min(this.y,v.y);return this;};_proto2.SelfMaxV=function SelfMaxV(v){this.x=b2Max(this.x,v.x);this.y=b2Max(this.y,v.y);return this;};_proto2.SelfAbs=function SelfAbs(){this.x=b2Abs(this.x);this.y=b2Abs(this.y);return this;};_proto2.SelfNeg=function SelfNeg(){this.x=-this.x;this.y=-this.y;return this;};_proto2.SelfSkew=function SelfSkew(){var x=this.x;this.x=-this.y;this.y=x;return this;};b2Vec2.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2Vec2();});};b2Vec2.AbsV=function AbsV(v,out){out.x=b2Abs(v.x);out.y=b2Abs(v.y);return out;};b2Vec2.MinV=function MinV(a,b,out){out.x=b2Min(a.x,b.x);out.y=b2Min(a.y,b.y);return out;};b2Vec2.MaxV=function MaxV(a,b,out){out.x=b2Max(a.x,b.x);out.y=b2Max(a.y,b.y);return out;};b2Vec2.ClampV=function ClampV(v,lo,hi,out){out.x=b2Clamp(v.x,lo.x,hi.x);out.y=b2Clamp(v.y,lo.y,hi.y);return out;};b2Vec2.RotateV=function RotateV(v,radians,out){var v_x=v.x,v_y=v.y;var c=Math.cos(radians);var s=Math.sin(radians);out.x=c*v_x-s*v_y;out.y=s*v_x+c*v_y;return out;};b2Vec2.DotVV=function DotVV(a,b){return a.x*b.x+a.y*b.y;};b2Vec2.CrossVV=function CrossVV(a,b){return a.x*b.y-a.y*b.x;};b2Vec2.CrossVS=function CrossVS(v,s,out){var v_x=v.x;out.x=s*v.y;out.y=-s*v_x;return out;};b2Vec2.CrossVOne=function CrossVOne(v,out){var v_x=v.x;out.x=v.y;out.y=-v_x;return out;};b2Vec2.CrossSV=function CrossSV(s,v,out){var v_x=v.x;out.x=-s*v.y;out.y=s*v_x;return out;};b2Vec2.CrossOneV=function CrossOneV(v,out){var v_x=v.x;out.x=-v.y;out.y=v_x;return out;};b2Vec2.AddVV=function AddVV(a,b,out){out.x=a.x+b.x;out.y=a.y+b.y;return out;};b2Vec2.SubVV=function SubVV(a,b,out){out.x=a.x-b.x;out.y=a.y-b.y;return out;};b2Vec2.MulSV=function MulSV(s,v,out){out.x=v.x*s;out.y=v.y*s;return out;};b2Vec2.MulVS=function MulVS(v,s,out){out.x=v.x*s;out.y=v.y*s;return out;};b2Vec2.AddVMulSV=function AddVMulSV(a,s,b,out){out.x=a.x+s*b.x;out.y=a.y+s*b.y;return out;};b2Vec2.SubVMulSV=function SubVMulSV(a,s,b,out){out.x=a.x-s*b.x;out.y=a.y-s*b.y;return out;};b2Vec2.AddVCrossSV=function AddVCrossSV(a,s,v,out){var v_x=v.x;out.x=a.x-s*v.y;out.y=a.y+s*v_x;return out;};b2Vec2.MidVV=function MidVV(a,b,out){out.x=(a.x+b.x)*0.5;out.y=(a.y+b.y)*0.5;return out;};b2Vec2.ExtVV=function ExtVV(a,b,out){out.x=(b.x-a.x)*0.5;out.y=(b.y-a.y)*0.5;return out;};b2Vec2.IsEqualToV=function IsEqualToV(a,b){return a.x===b.x&&a.y===b.y;};b2Vec2.DistanceVV=function DistanceVV(a,b){var c_x=a.x-b.x;var c_y=a.y-b.y;return Math.sqrt(c_x*c_x+c_y*c_y);};b2Vec2.DistanceSquaredVV=function DistanceSquaredVV(a,b){var c_x=a.x-b.x;var c_y=a.y-b.y;return c_x*c_x+c_y*c_y;};b2Vec2.NegV=function NegV(v,out){out.x=-v.x;out.y=-v.y;return out;};_createClass(b2Vec2,[{key:"x",get:function get(){return this.data[0];},set:function set(value){this.data[0]=value;}},{key:"y",get:function get(){return this.data[1];},set:function set(value){this.data[1]=value;}}]);return b2Vec2;}();b2Vec2.ZERO=new b2Vec2(0,0);b2Vec2.UNITX=new b2Vec2(1,0);b2Vec2.UNITY=new b2Vec2(0,1);b2Vec2.s_t0=new b2Vec2();b2Vec2.s_t1=new b2Vec2();b2Vec2.s_t2=new b2Vec2();b2Vec2.s_t3=new b2Vec2();var b2Vec2_zero=new b2Vec2(0,0);var b2Vec3=function(){function b2Vec3(){for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}if(args[0]instanceof Float32Array){if(args[0].length!==3){throw new Error();}this.data=args[0];}else {var x=typeof args[0]==="number"?args[0]:0;var y=typeof args[1]==="number"?args[1]:0;var z=typeof args[2]==="number"?args[2]:0;this.data=new Float32Array([x,y,z]);}}var _proto3=b2Vec3.prototype;_proto3.Clone=function Clone(){return new b2Vec3(this.x,this.y,this.z);};_proto3.SetZero=function SetZero(){this.x=0;this.y=0;this.z=0;return this;};_proto3.SetXYZ=function SetXYZ(x,y,z){this.x=x;this.y=y;this.z=z;return this;};_proto3.Copy=function Copy(other){this.x=other.x;this.y=other.y;this.z=other.z;return this;};_proto3.SelfNeg=function SelfNeg(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this;};_proto3.SelfAdd=function SelfAdd(v){this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;};_proto3.SelfAddXYZ=function SelfAddXYZ(x,y,z){this.x+=x;this.y+=y;this.z+=z;return this;};_proto3.SelfSub=function SelfSub(v){this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;};_proto3.SelfSubXYZ=function SelfSubXYZ(x,y,z){this.x-=x;this.y-=y;this.z-=z;return this;};_proto3.SelfMul=function SelfMul(s){this.x*=s;this.y*=s;this.z*=s;return this;};b2Vec3.DotV3V3=function DotV3V3(a,b){return a.x*b.x+a.y*b.y+a.z*b.z;};b2Vec3.CrossV3V3=function CrossV3V3(a,b,out){var a_x=a.x,a_y=a.y,a_z=a.z;var b_x=b.x,b_y=b.y,b_z=b.z;out.x=a_y*b_z-a_z*b_y;out.y=a_z*b_x-a_x*b_z;out.z=a_x*b_y-a_y*b_x;return out;};_createClass(b2Vec3,[{key:"x",get:function get(){return this.data[0];},set:function set(value){this.data[0]=value;}},{key:"y",get:function get(){return this.data[1];},set:function set(value){this.data[1]=value;}},{key:"z",get:function get(){return this.data[2];},set:function set(value){this.data[2]=value;}}]);return b2Vec3;}();b2Vec3.ZERO=new b2Vec3(0,0,0);b2Vec3.s_t0=new b2Vec3();var b2Mat22=function(){function b2Mat22(){this.data=new Float32Array([1,0,0,1]);this.ex=new b2Vec2(this.data.subarray(0,2));this.ey=new b2Vec2(this.data.subarray(2,4));}var _proto4=b2Mat22.prototype;_proto4.Clone=function Clone(){return new b2Mat22().Copy(this);};b2Mat22.FromVV=function FromVV(c1,c2){return new b2Mat22().SetVV(c1,c2);};b2Mat22.FromSSSS=function FromSSSS(r1c1,r1c2,r2c1,r2c2){return new b2Mat22().SetSSSS(r1c1,r1c2,r2c1,r2c2);};b2Mat22.FromAngle=function FromAngle(radians){return new b2Mat22().SetAngle(radians);};_proto4.SetSSSS=function SetSSSS(r1c1,r1c2,r2c1,r2c2){this.ex.Set(r1c1,r2c1);this.ey.Set(r1c2,r2c2);return this;};_proto4.SetVV=function SetVV(c1,c2){this.ex.Copy(c1);this.ey.Copy(c2);return this;};_proto4.SetAngle=function SetAngle(radians){var c=Math.cos(radians);var s=Math.sin(radians);this.ex.Set(c,s);this.ey.Set(-s,c);return this;};_proto4.Copy=function Copy(other){this.ex.Copy(other.ex);this.ey.Copy(other.ey);return this;};_proto4.SetIdentity=function SetIdentity(){this.ex.Set(1,0);this.ey.Set(0,1);return this;};_proto4.SetZero=function SetZero(){this.ex.SetZero();this.ey.SetZero();return this;};_proto4.GetAngle=function GetAngle(){return Math.atan2(this.ex.y,this.ex.x);};_proto4.GetInverse=function GetInverse(out){var a=this.ex.x;var b=this.ey.x;var c=this.ex.y;var d=this.ey.y;var det=a*d-b*c;if(det!==0){det=1/det;}out.ex.x=det*d;out.ey.x=-det*b;out.ex.y=-det*c;out.ey.y=det*a;return out;};_proto4.Solve=function Solve(b_x,b_y,out){var a11=this.ex.x,a12=this.ey.x;var a21=this.ex.y,a22=this.ey.y;var det=a11*a22-a12*a21;if(det!==0){det=1/det;}out.x=det*(a22*b_x-a12*b_y);out.y=det*(a11*b_y-a21*b_x);return out;};_proto4.SelfAbs=function SelfAbs(){this.ex.SelfAbs();this.ey.SelfAbs();return this;};_proto4.SelfInv=function SelfInv(){this.GetInverse(this);return this;};_proto4.SelfAddM=function SelfAddM(M){this.ex.SelfAdd(M.ex);this.ey.SelfAdd(M.ey);return this;};_proto4.SelfSubM=function SelfSubM(M){this.ex.SelfSub(M.ex);this.ey.SelfSub(M.ey);return this;};b2Mat22.AbsM=function AbsM(M,out){var M_ex=M.ex,M_ey=M.ey;out.ex.x=b2Abs(M_ex.x);out.ex.y=b2Abs(M_ex.y);out.ey.x=b2Abs(M_ey.x);out.ey.y=b2Abs(M_ey.y);return out;};b2Mat22.MulMV=function MulMV(M,v,out){var M_ex=M.ex,M_ey=M.ey;var v_x=v.x,v_y=v.y;out.x=M_ex.x*v_x+M_ey.x*v_y;out.y=M_ex.y*v_x+M_ey.y*v_y;return out;};b2Mat22.MulTMV=function MulTMV(M,v,out){var M_ex=M.ex,M_ey=M.ey;var v_x=v.x,v_y=v.y;out.x=M_ex.x*v_x+M_ex.y*v_y;out.y=M_ey.x*v_x+M_ey.y*v_y;return out;};b2Mat22.AddMM=function AddMM(A,B,out){var A_ex=A.ex,A_ey=A.ey;var B_ex=B.ex,B_ey=B.ey;out.ex.x=A_ex.x+B_ex.x;out.ex.y=A_ex.y+B_ex.y;out.ey.x=A_ey.x+B_ey.x;out.ey.y=A_ey.y+B_ey.y;return out;};b2Mat22.MulMM=function MulMM(A,B,out){var A_ex_x=A.ex.x,A_ex_y=A.ex.y;var A_ey_x=A.ey.x,A_ey_y=A.ey.y;var B_ex_x=B.ex.x,B_ex_y=B.ex.y;var B_ey_x=B.ey.x,B_ey_y=B.ey.y;out.ex.x=A_ex_x*B_ex_x+A_ey_x*B_ex_y;out.ex.y=A_ex_y*B_ex_x+A_ey_y*B_ex_y;out.ey.x=A_ex_x*B_ey_x+A_ey_x*B_ey_y;out.ey.y=A_ex_y*B_ey_x+A_ey_y*B_ey_y;return out;};b2Mat22.MulTMM=function MulTMM(A,B,out){var A_ex_x=A.ex.x,A_ex_y=A.ex.y;var A_ey_x=A.ey.x,A_ey_y=A.ey.y;var B_ex_x=B.ex.x,B_ex_y=B.ex.y;var B_ey_x=B.ey.x,B_ey_y=B.ey.y;out.ex.x=A_ex_x*B_ex_x+A_ex_y*B_ex_y;out.ex.y=A_ey_x*B_ex_x+A_ey_y*B_ex_y;out.ey.x=A_ex_x*B_ey_x+A_ex_y*B_ey_y;out.ey.y=A_ey_x*B_ey_x+A_ey_y*B_ey_y;return out;};return b2Mat22;}();b2Mat22.IDENTITY=new b2Mat22();var b2Mat33=function(){function b2Mat33(){this.data=new Float32Array([1,0,0,0,1,0,0,0,1]);this.ex=new b2Vec3(this.data.subarray(0,3));this.ey=new b2Vec3(this.data.subarray(3,6));this.ez=new b2Vec3(this.data.subarray(6,9));}var _proto5=b2Mat33.prototype;_proto5.Clone=function Clone(){return new b2Mat33().Copy(this);};_proto5.SetVVV=function SetVVV(c1,c2,c3){this.ex.Copy(c1);this.ey.Copy(c2);this.ez.Copy(c3);return this;};_proto5.Copy=function Copy(other){this.ex.Copy(other.ex);this.ey.Copy(other.ey);this.ez.Copy(other.ez);return this;};_proto5.SetIdentity=function SetIdentity(){this.ex.SetXYZ(1,0,0);this.ey.SetXYZ(0,1,0);this.ez.SetXYZ(0,0,1);return this;};_proto5.SetZero=function SetZero(){this.ex.SetZero();this.ey.SetZero();this.ez.SetZero();return this;};_proto5.SelfAddM=function SelfAddM(M){this.ex.SelfAdd(M.ex);this.ey.SelfAdd(M.ey);this.ez.SelfAdd(M.ez);return this;};_proto5.Solve33=function Solve33(b_x,b_y,b_z,out){var a11=this.ex.x,a21=this.ex.y,a31=this.ex.z;var a12=this.ey.x,a22=this.ey.y,a32=this.ey.z;var a13=this.ez.x,a23=this.ez.y,a33=this.ez.z;var det=a11*(a22*a33-a32*a23)+a21*(a32*a13-a12*a33)+a31*(a12*a23-a22*a13);if(det!==0){det=1/det;}out.x=det*(b_x*(a22*a33-a32*a23)+b_y*(a32*a13-a12*a33)+b_z*(a12*a23-a22*a13));out.y=det*(a11*(b_y*a33-b_z*a23)+a21*(b_z*a13-b_x*a33)+a31*(b_x*a23-b_y*a13));out.z=det*(a11*(a22*b_z-a32*b_y)+a21*(a32*b_x-a12*b_z)+a31*(a12*b_y-a22*b_x));return out;};_proto5.Solve22=function Solve22(b_x,b_y,out){var a11=this.ex.x,a12=this.ey.x;var a21=this.ex.y,a22=this.ey.y;var det=a11*a22-a12*a21;if(det!==0){det=1/det;}out.x=det*(a22*b_x-a12*b_y);out.y=det*(a11*b_y-a21*b_x);return out;};_proto5.GetInverse22=function GetInverse22(M){var a=this.ex.x,b=this.ey.x,c=this.ex.y,d=this.ey.y;var det=a*d-b*c;if(det!==0){det=1/det;}M.ex.x=det*d;M.ey.x=-det*b;M.ex.z=0;M.ex.y=-det*c;M.ey.y=det*a;M.ey.z=0;M.ez.x=0;M.ez.y=0;M.ez.z=0;};_proto5.GetSymInverse33=function GetSymInverse33(M){var det=b2Vec3.DotV3V3(this.ex,b2Vec3.CrossV3V3(this.ey,this.ez,b2Vec3.s_t0));if(det!==0){det=1/det;}var a11=this.ex.x,a12=this.ey.x,a13=this.ez.x;var a22=this.ey.y,a23=this.ez.y;var a33=this.ez.z;M.ex.x=det*(a22*a33-a23*a23);M.ex.y=det*(a13*a23-a12*a33);M.ex.z=det*(a12*a23-a13*a22);M.ey.x=M.ex.y;M.ey.y=det*(a11*a33-a13*a13);M.ey.z=det*(a13*a12-a11*a23);M.ez.x=M.ex.z;M.ez.y=M.ey.z;M.ez.z=det*(a11*a22-a12*a12);};b2Mat33.MulM33V3=function MulM33V3(A,v,out){var v_x=v.x,v_y=v.y,v_z=v.z;out.x=A.ex.x*v_x+A.ey.x*v_y+A.ez.x*v_z;out.y=A.ex.y*v_x+A.ey.y*v_y+A.ez.y*v_z;out.z=A.ex.z*v_x+A.ey.z*v_y+A.ez.z*v_z;return out;};b2Mat33.MulM33XYZ=function MulM33XYZ(A,x,y,z,out){out.x=A.ex.x*x+A.ey.x*y+A.ez.x*z;out.y=A.ex.y*x+A.ey.y*y+A.ez.y*z;out.z=A.ex.z*x+A.ey.z*y+A.ez.z*z;return out;};b2Mat33.MulM33V2=function MulM33V2(A,v,out){var v_x=v.x,v_y=v.y;out.x=A.ex.x*v_x+A.ey.x*v_y;out.y=A.ex.y*v_x+A.ey.y*v_y;return out;};b2Mat33.MulM33XY=function MulM33XY(A,x,y,out){out.x=A.ex.x*x+A.ey.x*y;out.y=A.ex.y*x+A.ey.y*y;return out;};return b2Mat33;}();b2Mat33.IDENTITY=new b2Mat33();var b2Rot=function(){function b2Rot(angle){if(angle===void 0){angle=0;}this.s=0;this.c=1;if(angle){this.s=Math.sin(angle);this.c=Math.cos(angle);}}var _proto6=b2Rot.prototype;_proto6.Clone=function Clone(){return new b2Rot().Copy(this);};_proto6.Copy=function Copy(other){this.s=other.s;this.c=other.c;return this;};_proto6.SetAngle=function SetAngle(angle){this.s=Math.sin(angle);this.c=Math.cos(angle);return this;};_proto6.SetIdentity=function SetIdentity(){this.s=0;this.c=1;return this;};_proto6.GetAngle=function GetAngle(){return Math.atan2(this.s,this.c);};_proto6.GetXAxis=function GetXAxis(out){out.x=this.c;out.y=this.s;return out;};_proto6.GetYAxis=function GetYAxis(out){out.x=-this.s;out.y=this.c;return out;};b2Rot.MulRR=function MulRR(q,r,out){var q_c=q.c,q_s=q.s;var r_c=r.c,r_s=r.s;out.s=q_s*r_c+q_c*r_s;out.c=q_c*r_c-q_s*r_s;return out;};b2Rot.MulTRR=function MulTRR(q,r,out){var q_c=q.c,q_s=q.s;var r_c=r.c,r_s=r.s;out.s=q_c*r_s-q_s*r_c;out.c=q_c*r_c+q_s*r_s;return out;};b2Rot.MulRV=function MulRV(q,v,out){var q_c=q.c,q_s=q.s;var v_x=v.x,v_y=v.y;out.x=q_c*v_x-q_s*v_y;out.y=q_s*v_x+q_c*v_y;return out;};b2Rot.MulTRV=function MulTRV(q,v,out){var q_c=q.c,q_s=q.s;var v_x=v.x,v_y=v.y;out.x=q_c*v_x+q_s*v_y;out.y=-q_s*v_x+q_c*v_y;return out;};return b2Rot;}();b2Rot.IDENTITY=new b2Rot();var b2Transform=function(){function b2Transform(){this.p=new b2Vec2();this.q=new b2Rot();}var _proto7=b2Transform.prototype;_proto7.Clone=function Clone(){return new b2Transform().Copy(this);};_proto7.Copy=function Copy(other){this.p.Copy(other.p);this.q.Copy(other.q);return this;};_proto7.SetIdentity=function SetIdentity(){this.p.SetZero();this.q.SetIdentity();return this;};_proto7.SetPositionRotation=function SetPositionRotation(position,q){this.p.Copy(position);this.q.Copy(q);return this;};_proto7.SetPositionAngle=function SetPositionAngle(pos,a){this.p.Copy(pos);this.q.SetAngle(a);return this;};_proto7.SetPosition=function SetPosition(position){this.p.Copy(position);return this;};_proto7.SetPositionXY=function SetPositionXY(x,y){this.p.Set(x,y);return this;};_proto7.SetRotation=function SetRotation(rotation){this.q.Copy(rotation);return this;};_proto7.SetRotationAngle=function SetRotationAngle(radians){this.q.SetAngle(radians);return this;};_proto7.GetPosition=function GetPosition(){return this.p;};_proto7.GetRotation=function GetRotation(){return this.q;};_proto7.GetRotationAngle=function GetRotationAngle(){return this.q.GetAngle();};_proto7.GetAngle=function GetAngle(){return this.q.GetAngle();};b2Transform.MulXV=function MulXV(T,v,out){var T_q_c=T.q.c,T_q_s=T.q.s;var v_x=v.x,v_y=v.y;out.x=T_q_c*v_x-T_q_s*v_y+T.p.x;out.y=T_q_s*v_x+T_q_c*v_y+T.p.y;return out;};b2Transform.MulTXV=function MulTXV(T,v,out){var T_q_c=T.q.c,T_q_s=T.q.s;var p_x=v.x-T.p.x;var p_y=v.y-T.p.y;out.x=T_q_c*p_x+T_q_s*p_y;out.y=-T_q_s*p_x+T_q_c*p_y;return out;};b2Transform.MulXX=function MulXX(A,B,out){b2Rot.MulRR(A.q,B.q,out.q);b2Vec2.AddVV(b2Rot.MulRV(A.q,B.p,out.p),A.p,out.p);return out;};b2Transform.MulTXX=function MulTXX(A,B,out){b2Rot.MulTRR(A.q,B.q,out.q);b2Rot.MulTRV(A.q,b2Vec2.SubVV(B.p,A.p,out.p),out.p);return out;};return b2Transform;}();b2Transform.IDENTITY=new b2Transform();var b2Sweep=function(){function b2Sweep(){this.localCenter=new b2Vec2();this.c0=new b2Vec2();this.c=new b2Vec2();this.a0=0;this.a=0;this.alpha0=0;}var _proto8=b2Sweep.prototype;_proto8.Clone=function Clone(){return new b2Sweep().Copy(this);};_proto8.Copy=function Copy(other){this.localCenter.Copy(other.localCenter);this.c0.Copy(other.c0);this.c.Copy(other.c);this.a0=other.a0;this.a=other.a;this.alpha0=other.alpha0;return this;};_proto8.GetTransform=function GetTransform(xf,beta){var one_minus_beta=1-beta;xf.p.x=one_minus_beta*this.c0.x+beta*this.c.x;xf.p.y=one_minus_beta*this.c0.y+beta*this.c.y;var angle=one_minus_beta*this.a0+beta*this.a;xf.q.SetAngle(angle);xf.p.SelfSub(b2Rot.MulRV(xf.q,this.localCenter,b2Vec2.s_t0));return xf;};_proto8.Advance=function Advance(alpha){var beta=(alpha-this.alpha0)/(1-this.alpha0);var one_minus_beta=1-beta;this.c0.x=one_minus_beta*this.c0.x+beta*this.c.x;this.c0.y=one_minus_beta*this.c0.y+beta*this.c.y;this.a0=one_minus_beta*this.a0+beta*this.a;this.alpha0=alpha;};_proto8.Normalize=function Normalize(){var d=b2_two_pi*Math.floor(this.a0/b2_two_pi);this.a0-=d;this.a-=d;};return b2Sweep;}();var b2Color=function(){function b2Color(){for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}if(args[0]instanceof Float32Array){if(args[0].length!==4){throw new Error();}this.data=args[0];}else {var rr=typeof args[0]==="number"?args[0]:0.5;var gg=typeof args[1]==="number"?args[1]:0.5;var bb=typeof args[2]==="number"?args[2]:0.5;var aa=typeof args[3]==="number"?args[3]:1.0;this.data=new Float32Array([rr,gg,bb,aa]);}}var _proto9=b2Color.prototype;_proto9.Clone=function Clone(){return new b2Color().Copy(this);};_proto9.Copy=function Copy(other){this.r=other.r;this.g=other.g;this.b=other.b;this.a=other.a;return this;};_proto9.IsEqual=function IsEqual(color){return this.r===color.r&&this.g===color.g&&this.b===color.b&&this.a===color.a;};_proto9.IsZero=function IsZero(){return this.r===0&&this.g===0&&this.b===0&&this.a===0;};_proto9.Set=function Set(r,g,b,a){if(a===void 0){a=this.a;}this.SetRGBA(r,g,b,a);};_proto9.SetByteRGB=function SetByteRGB(r,g,b){this.r=r/0xff;this.g=g/0xff;this.b=b/0xff;return this;};_proto9.SetByteRGBA=function SetByteRGBA(r,g,b,a){this.r=r/0xff;this.g=g/0xff;this.b=b/0xff;this.a=a/0xff;return this;};_proto9.SetRGB=function SetRGB(rr,gg,bb){this.r=rr;this.g=gg;this.b=bb;return this;};_proto9.SetRGBA=function SetRGBA(rr,gg,bb,aa){this.r=rr;this.g=gg;this.b=bb;this.a=aa;return this;};_proto9.SelfAdd=function SelfAdd(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;this.a+=color.a;return this;};_proto9.Add=function Add(color,out){out.r=this.r+color.r;out.g=this.g+color.g;out.b=this.b+color.b;out.a=this.a+color.a;return out;};_proto9.SelfSub=function SelfSub(color){this.r-=color.r;this.g-=color.g;this.b-=color.b;this.a-=color.a;return this;};_proto9.Sub=function Sub(color,out){out.r=this.r-color.r;out.g=this.g-color.g;out.b=this.b-color.b;out.a=this.a-color.a;return out;};_proto9.SelfMul=function SelfMul(s){this.r*=s;this.g*=s;this.b*=s;this.a*=s;return this;};_proto9.Mul=function Mul(s,out){out.r=this.r*s;out.g=this.g*s;out.b=this.b*s;out.a=this.a*s;return out;};_proto9.Mix=function Mix(mixColor,strength){b2Color.MixColors(this,mixColor,strength);};b2Color.MixColors=function MixColors(colorA,colorB,strength){var dr=strength*(colorB.r-colorA.r);var dg=strength*(colorB.g-colorA.g);var db=strength*(colorB.b-colorA.b);var da=strength*(colorB.a-colorA.a);colorA.r+=dr;colorA.g+=dg;colorA.b+=db;colorA.a+=da;colorB.r-=dr;colorB.g-=dg;colorB.b-=db;colorB.a-=da;};_proto9.MakeStyleString=function MakeStyleString(alpha){if(alpha===void 0){alpha=this.a;}return b2Color.MakeStyleString(this.r,this.g,this.b,alpha);};b2Color.MakeStyleString=function MakeStyleString(r,g,b,a){if(a===void 0){a=1.0;}r*=255;g*=255;b*=255;if(a<1){return "rgba("+r+","+g+","+b+","+a+")";}else {return "rgb("+r+","+g+","+b+")";}};_createClass(b2Color,[{key:"r",get:function get(){return this.data[0];},set:function set(value){this.data[0]=value;}},{key:"g",get:function get(){return this.data[1];},set:function set(value){this.data[1]=value;}},{key:"b",get:function get(){return this.data[2];},set:function set(value){this.data[2]=value;}},{key:"a",get:function get(){return this.data[3];},set:function set(value){this.data[3]=value;}}]);return b2Color;}();b2Color.ZERO=new b2Color(0,0,0,0);b2Color.RED=new b2Color(1,0,0);b2Color.GREEN=new b2Color(0,1,0);b2Color.BLUE=new b2Color(0,0,1);(function(b2DrawFlags){b2DrawFlags[b2DrawFlags["e_none"]=0]="e_none";b2DrawFlags[b2DrawFlags["e_shapeBit"]=1]="e_shapeBit";b2DrawFlags[b2DrawFlags["e_jointBit"]=2]="e_jointBit";b2DrawFlags[b2DrawFlags["e_aabbBit"]=4]="e_aabbBit";b2DrawFlags[b2DrawFlags["e_pairBit"]=8]="e_pairBit";b2DrawFlags[b2DrawFlags["e_centerOfMassBit"]=16]="e_centerOfMassBit";b2DrawFlags[b2DrawFlags["e_particleBit"]=32]="e_particleBit";b2DrawFlags[b2DrawFlags["e_controllerBit"]=64]="e_controllerBit";b2DrawFlags[b2DrawFlags["e_all"]=63]="e_all";})(exports.b2DrawFlags||(exports.b2DrawFlags={}));var b2Draw=function(){function b2Draw(){this.m_drawFlags=0;}var _proto10=b2Draw.prototype;_proto10.SetFlags=function SetFlags(flags){this.m_drawFlags=flags;};_proto10.GetFlags=function GetFlags(){return this.m_drawFlags;};_proto10.AppendFlags=function AppendFlags(flags){this.m_drawFlags|=flags;};_proto10.ClearFlags=function ClearFlags(flags){this.m_drawFlags&=~flags;};return b2Draw;}();var b2Timer=function(){function b2Timer(){this.m_start=Date.now();}var _proto11=b2Timer.prototype;_proto11.Reset=function Reset(){this.m_start=Date.now();return this;};_proto11.GetMilliseconds=function GetMilliseconds(){return Date.now()-this.m_start;};return b2Timer;}();var b2Counter=function(){function b2Counter(){this.m_count=0;this.m_min_count=0;this.m_max_count=0;}var _proto12=b2Counter.prototype;_proto12.GetCount=function GetCount(){return this.m_count;};_proto12.GetMinCount=function GetMinCount(){return this.m_min_count;};_proto12.GetMaxCount=function GetMaxCount(){return this.m_max_count;};_proto12.ResetCount=function ResetCount(){var count=this.m_count;this.m_count=0;return count;};_proto12.ResetMinCount=function ResetMinCount(){this.m_min_count=0;};_proto12.ResetMaxCount=function ResetMaxCount(){this.m_max_count=0;};_proto12.Increment=function Increment(){this.m_count++;if(this.m_max_count<this.m_count){this.m_max_count=this.m_count;}};_proto12.Decrement=function Decrement(){this.m_count--;if(this.m_min_count>this.m_count){this.m_min_count=this.m_count;}};return b2Counter;}();var b2GrowableStack=function(){function b2GrowableStack(N){this.m_stack=[];this.m_count=0;this.m_stack=b2MakeArray(N,function(index){return null;});this.m_count=0;}var _proto13=b2GrowableStack.prototype;_proto13.Reset=function Reset(){this.m_count=0;return this;};_proto13.Push=function Push(element){this.m_stack[this.m_count]=element;this.m_count++;};_proto13.Pop=function Pop(){this.m_count--;var element=this.m_stack[this.m_count];this.m_stack[this.m_count]=null;if(element===null){throw new Error();}return element;};_proto13.GetCount=function GetCount(){return this.m_count;};return b2GrowableStack;}();var b2BlockAllocator=function b2BlockAllocator(){};var b2StackAllocator=function b2StackAllocator(){};var b2DistanceProxy=function(){function b2DistanceProxy(){this.m_buffer=b2Vec2.MakeArray(2);this.m_vertices=this.m_buffer;this.m_count=0;this.m_radius=0;}var _proto14=b2DistanceProxy.prototype;_proto14.Copy=function Copy(other){if(other.m_vertices===other.m_buffer){this.m_vertices=this.m_buffer;this.m_buffer[0].Copy(other.m_buffer[0]);this.m_buffer[1].Copy(other.m_buffer[1]);}else {this.m_vertices=other.m_vertices;}this.m_count=other.m_count;this.m_radius=other.m_radius;return this;};_proto14.Reset=function Reset(){this.m_vertices=this.m_buffer;this.m_count=0;this.m_radius=0;return this;};_proto14.SetShape=function SetShape(shape,index){shape.SetupDistanceProxy(this,index);};_proto14.SetVerticesRadius=function SetVerticesRadius(vertices,count,radius){this.m_vertices=vertices;this.m_count=count;this.m_radius=radius;};_proto14.GetSupport=function GetSupport(d){var bestIndex=0;var bestValue=b2Vec2.DotVV(this.m_vertices[0],d);for(var i=1;i<this.m_count;++i){var value=b2Vec2.DotVV(this.m_vertices[i],d);if(value>bestValue){bestIndex=i;bestValue=value;}}return bestIndex;};_proto14.GetSupportVertex=function GetSupportVertex(d){var bestIndex=0;var bestValue=b2Vec2.DotVV(this.m_vertices[0],d);for(var i=1;i<this.m_count;++i){var value=b2Vec2.DotVV(this.m_vertices[i],d);if(value>bestValue){bestIndex=i;bestValue=value;}}return this.m_vertices[bestIndex];};_proto14.GetVertexCount=function GetVertexCount(){return this.m_count;};_proto14.GetVertex=function GetVertex(index){return this.m_vertices[index];};return b2DistanceProxy;}();var b2SimplexCache=function(){function b2SimplexCache(){this.metric=0;this.count=0;this.indexA=[0,0,0];this.indexB=[0,0,0];}var _proto15=b2SimplexCache.prototype;_proto15.Reset=function Reset(){this.metric=0;this.count=0;return this;};return b2SimplexCache;}();var b2DistanceInput=function(){function b2DistanceInput(){this.proxyA=new b2DistanceProxy();this.proxyB=new b2DistanceProxy();this.transformA=new b2Transform();this.transformB=new b2Transform();this.useRadii=false;}var _proto16=b2DistanceInput.prototype;_proto16.Reset=function Reset(){this.proxyA.Reset();this.proxyB.Reset();this.transformA.SetIdentity();this.transformB.SetIdentity();this.useRadii=false;return this;};return b2DistanceInput;}();var b2DistanceOutput=function(){function b2DistanceOutput(){this.pointA=new b2Vec2();this.pointB=new b2Vec2();this.distance=0;this.iterations=0;}var _proto17=b2DistanceOutput.prototype;_proto17.Reset=function Reset(){this.pointA.SetZero();this.pointB.SetZero();this.distance=0;this.iterations=0;return this;};return b2DistanceOutput;}();var b2ShapeCastInput=function b2ShapeCastInput(){this.proxyA=new b2DistanceProxy();this.proxyB=new b2DistanceProxy();this.transformA=new b2Transform();this.transformB=new b2Transform();this.translationB=new b2Vec2();};var b2ShapeCastOutput=function b2ShapeCastOutput(){this.point=new b2Vec2();this.normal=new b2Vec2();this.lambda=0.0;this.iterations=0;};exports.b2_gjkCalls=0;exports.b2_gjkIters=0;exports.b2_gjkMaxIters=0;function b2_gjk_reset(){exports.b2_gjkCalls=0;exports.b2_gjkIters=0;exports.b2_gjkMaxIters=0;}var b2SimplexVertex=function(){function b2SimplexVertex(){this.wA=new b2Vec2();this.wB=new b2Vec2();this.w=new b2Vec2();this.a=0;this.indexA=0;this.indexB=0;}var _proto18=b2SimplexVertex.prototype;_proto18.Copy=function Copy(other){this.wA.Copy(other.wA);this.wB.Copy(other.wB);this.w.Copy(other.w);this.a=other.a;this.indexA=other.indexA;this.indexB=other.indexB;return this;};return b2SimplexVertex;}();var b2Simplex=function(){function b2Simplex(){this.m_v1=new b2SimplexVertex();this.m_v2=new b2SimplexVertex();this.m_v3=new b2SimplexVertex();this.m_vertices=[];this.m_count=0;this.m_vertices[0]=this.m_v1;this.m_vertices[1]=this.m_v2;this.m_vertices[2]=this.m_v3;}var _proto19=b2Simplex.prototype;_proto19.ReadCache=function ReadCache(cache,proxyA,transformA,proxyB,transformB){this.m_count=cache.count;var vertices=this.m_vertices;for(var i=0;i<this.m_count;++i){var v=vertices[i];v.indexA=cache.indexA[i];v.indexB=cache.indexB[i];var wALocal=proxyA.GetVertex(v.indexA);var wBLocal=proxyB.GetVertex(v.indexB);b2Transform.MulXV(transformA,wALocal,v.wA);b2Transform.MulXV(transformB,wBLocal,v.wB);b2Vec2.SubVV(v.wB,v.wA,v.w);v.a=0;}if(this.m_count>1){var metric1=cache.metric;var metric2=this.GetMetric();if(metric2<0.5*metric1||2*metric1<metric2||metric2<b2_epsilon){this.m_count=0;}}if(this.m_count===0){var _v=vertices[0];_v.indexA=0;_v.indexB=0;var _wALocal=proxyA.GetVertex(0);var _wBLocal=proxyB.GetVertex(0);b2Transform.MulXV(transformA,_wALocal,_v.wA);b2Transform.MulXV(transformB,_wBLocal,_v.wB);b2Vec2.SubVV(_v.wB,_v.wA,_v.w);_v.a=1;this.m_count=1;}};_proto19.WriteCache=function WriteCache(cache){cache.metric=this.GetMetric();cache.count=this.m_count;var vertices=this.m_vertices;for(var i=0;i<this.m_count;++i){cache.indexA[i]=vertices[i].indexA;cache.indexB[i]=vertices[i].indexB;}};_proto19.GetSearchDirection=function GetSearchDirection(out){switch(this.m_count){case 1:return b2Vec2.NegV(this.m_v1.w,out);case 2:{var e12=b2Vec2.SubVV(this.m_v2.w,this.m_v1.w,out);var sgn=b2Vec2.CrossVV(e12,b2Vec2.NegV(this.m_v1.w,b2Vec2.s_t0));if(sgn>0){return b2Vec2.CrossOneV(e12,out);}else {return b2Vec2.CrossVOne(e12,out);}}default:return out.SetZero();}};_proto19.GetClosestPoint=function GetClosestPoint(out){switch(this.m_count){case 0:return out.SetZero();case 1:return out.Copy(this.m_v1.w);case 2:return out.Set(this.m_v1.a*this.m_v1.w.x+this.m_v2.a*this.m_v2.w.x,this.m_v1.a*this.m_v1.w.y+this.m_v2.a*this.m_v2.w.y);case 3:return out.SetZero();default:return out.SetZero();}};_proto19.GetWitnessPoints=function GetWitnessPoints(pA,pB){switch(this.m_count){case 0:break;case 1:pA.Copy(this.m_v1.wA);pB.Copy(this.m_v1.wB);break;case 2:pA.x=this.m_v1.a*this.m_v1.wA.x+this.m_v2.a*this.m_v2.wA.x;pA.y=this.m_v1.a*this.m_v1.wA.y+this.m_v2.a*this.m_v2.wA.y;pB.x=this.m_v1.a*this.m_v1.wB.x+this.m_v2.a*this.m_v2.wB.x;pB.y=this.m_v1.a*this.m_v1.wB.y+this.m_v2.a*this.m_v2.wB.y;break;case 3:pB.x=pA.x=this.m_v1.a*this.m_v1.wA.x+this.m_v2.a*this.m_v2.wA.x+this.m_v3.a*this.m_v3.wA.x;pB.y=pA.y=this.m_v1.a*this.m_v1.wA.y+this.m_v2.a*this.m_v2.wA.y+this.m_v3.a*this.m_v3.wA.y;break;}};_proto19.GetMetric=function GetMetric(){switch(this.m_count){case 0:return 0;case 1:return 0;case 2:return b2Vec2.DistanceVV(this.m_v1.w,this.m_v2.w);case 3:return b2Vec2.CrossVV(b2Vec2.SubVV(this.m_v2.w,this.m_v1.w,b2Vec2.s_t0),b2Vec2.SubVV(this.m_v3.w,this.m_v1.w,b2Vec2.s_t1));default:return 0;}};_proto19.Solve2=function Solve2(){var w1=this.m_v1.w;var w2=this.m_v2.w;var e12=b2Vec2.SubVV(w2,w1,b2Simplex.s_e12);var d12_2=-b2Vec2.DotVV(w1,e12);if(d12_2<=0){this.m_v1.a=1;this.m_count=1;return;}var d12_1=b2Vec2.DotVV(w2,e12);if(d12_1<=0){this.m_v2.a=1;this.m_count=1;this.m_v1.Copy(this.m_v2);return;}var inv_d12=1/(d12_1+d12_2);this.m_v1.a=d12_1*inv_d12;this.m_v2.a=d12_2*inv_d12;this.m_count=2;};_proto19.Solve3=function Solve3(){var w1=this.m_v1.w;var w2=this.m_v2.w;var w3=this.m_v3.w;var e12=b2Vec2.SubVV(w2,w1,b2Simplex.s_e12);var w1e12=b2Vec2.DotVV(w1,e12);var w2e12=b2Vec2.DotVV(w2,e12);var d12_1=w2e12;var d12_2=-w1e12;var e13=b2Vec2.SubVV(w3,w1,b2Simplex.s_e13);var w1e13=b2Vec2.DotVV(w1,e13);var w3e13=b2Vec2.DotVV(w3,e13);var d13_1=w3e13;var d13_2=-w1e13;var e23=b2Vec2.SubVV(w3,w2,b2Simplex.s_e23);var w2e23=b2Vec2.DotVV(w2,e23);var w3e23=b2Vec2.DotVV(w3,e23);var d23_1=w3e23;var d23_2=-w2e23;var n123=b2Vec2.CrossVV(e12,e13);var d123_1=n123*b2Vec2.CrossVV(w2,w3);var d123_2=n123*b2Vec2.CrossVV(w3,w1);var d123_3=n123*b2Vec2.CrossVV(w1,w2);if(d12_2<=0&&d13_2<=0){this.m_v1.a=1;this.m_count=1;return;}if(d12_1>0&&d12_2>0&&d123_3<=0){var inv_d12=1/(d12_1+d12_2);this.m_v1.a=d12_1*inv_d12;this.m_v2.a=d12_2*inv_d12;this.m_count=2;return;}if(d13_1>0&&d13_2>0&&d123_2<=0){var inv_d13=1/(d13_1+d13_2);this.m_v1.a=d13_1*inv_d13;this.m_v3.a=d13_2*inv_d13;this.m_count=2;this.m_v2.Copy(this.m_v3);return;}if(d12_1<=0&&d23_2<=0){this.m_v2.a=1;this.m_count=1;this.m_v1.Copy(this.m_v2);return;}if(d13_1<=0&&d23_1<=0){this.m_v3.a=1;this.m_count=1;this.m_v1.Copy(this.m_v3);return;}if(d23_1>0&&d23_2>0&&d123_1<=0){var inv_d23=1/(d23_1+d23_2);this.m_v2.a=d23_1*inv_d23;this.m_v3.a=d23_2*inv_d23;this.m_count=2;this.m_v1.Copy(this.m_v3);return;}var inv_d123=1/(d123_1+d123_2+d123_3);this.m_v1.a=d123_1*inv_d123;this.m_v2.a=d123_2*inv_d123;this.m_v3.a=d123_3*inv_d123;this.m_count=3;};return b2Simplex;}();b2Simplex.s_e12=new b2Vec2();b2Simplex.s_e13=new b2Vec2();b2Simplex.s_e23=new b2Vec2();var b2Distance_s_simplex=new b2Simplex();var b2Distance_s_saveA=[0,0,0];var b2Distance_s_saveB=[0,0,0];var b2Distance_s_p=new b2Vec2();var b2Distance_s_d=new b2Vec2();var b2Distance_s_normal=new b2Vec2();var b2Distance_s_supportA=new b2Vec2();var b2Distance_s_supportB=new b2Vec2();function b2Distance(output,cache,input){++exports.b2_gjkCalls;var proxyA=input.proxyA;var proxyB=input.proxyB;var transformA=input.transformA;var transformB=input.transformB;var simplex=b2Distance_s_simplex;simplex.ReadCache(cache,proxyA,transformA,proxyB,transformB);var vertices=simplex.m_vertices;var k_maxIters=20;var saveA=b2Distance_s_saveA;var saveB=b2Distance_s_saveB;var saveCount=0;var iter=0;while(iter<k_maxIters){saveCount=simplex.m_count;for(var i=0;i<saveCount;++i){saveA[i]=vertices[i].indexA;saveB[i]=vertices[i].indexB;}switch(simplex.m_count){case 1:break;case 2:simplex.Solve2();break;case 3:simplex.Solve3();break;}if(simplex.m_count===3){break;}var d=simplex.GetSearchDirection(b2Distance_s_d);if(d.LengthSquared()<b2_epsilon_sq){break;}var vertex=vertices[simplex.m_count];vertex.indexA=proxyA.GetSupport(b2Rot.MulTRV(transformA.q,b2Vec2.NegV(d,b2Vec2.s_t0),b2Distance_s_supportA));b2Transform.MulXV(transformA,proxyA.GetVertex(vertex.indexA),vertex.wA);vertex.indexB=proxyB.GetSupport(b2Rot.MulTRV(transformB.q,d,b2Distance_s_supportB));b2Transform.MulXV(transformB,proxyB.GetVertex(vertex.indexB),vertex.wB);b2Vec2.SubVV(vertex.wB,vertex.wA,vertex.w);++iter;++exports.b2_gjkIters;var duplicate=false;for(var _i=0;_i<saveCount;++_i){if(vertex.indexA===saveA[_i]&&vertex.indexB===saveB[_i]){duplicate=true;break;}}if(duplicate){break;}++simplex.m_count;}exports.b2_gjkMaxIters=b2Max(exports.b2_gjkMaxIters,iter);simplex.GetWitnessPoints(output.pointA,output.pointB);output.distance=b2Vec2.DistanceVV(output.pointA,output.pointB);output.iterations=iter;simplex.WriteCache(cache);if(input.useRadii){var rA=proxyA.m_radius;var rB=proxyB.m_radius;if(output.distance>rA+rB&&output.distance>b2_epsilon){output.distance-=rA+rB;var normal=b2Vec2.SubVV(output.pointB,output.pointA,b2Distance_s_normal);normal.Normalize();output.pointA.SelfMulAdd(rA,normal);output.pointB.SelfMulSub(rB,normal);}else {var p=b2Vec2.MidVV(output.pointA,output.pointB,b2Distance_s_p);output.pointA.Copy(p);output.pointB.Copy(p);output.distance=0;}}}var b2ShapeCast_s_n=new b2Vec2();var b2ShapeCast_s_simplex=new b2Simplex();var b2ShapeCast_s_wA=new b2Vec2();var b2ShapeCast_s_wB=new b2Vec2();var b2ShapeCast_s_v=new b2Vec2();var b2ShapeCast_s_p=new b2Vec2();var b2ShapeCast_s_pointA=new b2Vec2();var b2ShapeCast_s_pointB=new b2Vec2();function b2ShapeCast(output,input){output.iterations=0;output.lambda=1.0;output.normal.SetZero();output.point.SetZero();var proxyA=input.proxyA;var proxyB=input.proxyB;var radiusA=b2Max(proxyA.m_radius,b2_polygonRadius);var radiusB=b2Max(proxyB.m_radius,b2_polygonRadius);var radius=radiusA+radiusB;var xfA=input.transformA;var xfB=input.transformB;var r=input.translationB;var n=b2ShapeCast_s_n.Set(0.0,0.0);var lambda=0.0;var simplex=b2ShapeCast_s_simplex;simplex.m_count=0;var vertices=simplex.m_vertices;var indexA=proxyA.GetSupport(b2Rot.MulTRV(xfA.q,b2Vec2.NegV(r,b2Vec2.s_t1),b2Vec2.s_t0));var wA=b2Transform.MulXV(xfA,proxyA.GetVertex(indexA),b2ShapeCast_s_wA);var indexB=proxyB.GetSupport(b2Rot.MulTRV(xfB.q,r,b2Vec2.s_t0));var wB=b2Transform.MulXV(xfB,proxyB.GetVertex(indexB),b2ShapeCast_s_wB);var v=b2Vec2.SubVV(wA,wB,b2ShapeCast_s_v);var sigma=b2Max(b2_polygonRadius,radius-b2_polygonRadius);var tolerance=0.5*b2_linearSlop;var k_maxIters=20;var iter=0;while(iter<k_maxIters&&b2Abs(v.Length()-sigma)>tolerance){output.iterations+=1;indexA=proxyA.GetSupport(b2Rot.MulTRV(xfA.q,b2Vec2.NegV(v,b2Vec2.s_t1),b2Vec2.s_t0));wA=b2Transform.MulXV(xfA,proxyA.GetVertex(indexA),b2ShapeCast_s_wA);indexB=proxyB.GetSupport(b2Rot.MulTRV(xfB.q,v,b2Vec2.s_t0));wB=b2Transform.MulXV(xfB,proxyB.GetVertex(indexB),b2ShapeCast_s_wB);var p=b2Vec2.SubVV(wA,wB,b2ShapeCast_s_p);v.Normalize();var vp=b2Vec2.DotVV(v,p);var vr=b2Vec2.DotVV(v,r);if(vp-sigma>lambda*vr){if(vr<=0.0){return false;}lambda=(vp-sigma)/vr;if(lambda>1.0){return false;}n.Copy(v).SelfNeg();simplex.m_count=0;}var vertex=vertices[simplex.m_count];vertex.indexA=indexB;vertex.wA.Copy(wB).SelfMulAdd(lambda,r);vertex.indexB=indexA;vertex.wB.Copy(wA);vertex.w.Copy(vertex.wB).SelfSub(vertex.wA);vertex.a=1.0;simplex.m_count+=1;switch(simplex.m_count){case 1:break;case 2:simplex.Solve2();break;case 3:simplex.Solve3();break;}if(simplex.m_count===3){return false;}simplex.GetClosestPoint(v);++iter;}var pointA=b2ShapeCast_s_pointA;var pointB=b2ShapeCast_s_pointB;simplex.GetWitnessPoints(pointA,pointB);if(v.LengthSquared()>0.0){n.Copy(v).SelfNeg();n.Normalize();}output.normal.Copy(n);output.lambda=lambda;output.iterations=iter;return true;}(function(b2ContactFeatureType){b2ContactFeatureType[b2ContactFeatureType["e_vertex"]=0]="e_vertex";b2ContactFeatureType[b2ContactFeatureType["e_face"]=1]="e_face";})(exports.b2ContactFeatureType||(exports.b2ContactFeatureType={}));var b2ContactFeature=function(){function b2ContactFeature(){this._key=0;this._key_invalid=false;this._indexA=0;this._indexB=0;this._typeA=0;this._typeB=0;}_createClass(b2ContactFeature,[{key:"key",get:function get(){if(this._key_invalid){this._key_invalid=false;this._key=this._indexA|this._indexB<<8|this._typeA<<16|this._typeB<<24;}return this._key;},set:function set(value){this._key=value;this._key_invalid=false;this._indexA=this._key&0xff;this._indexB=this._key>>8&0xff;this._typeA=this._key>>16&0xff;this._typeB=this._key>>24&0xff;}},{key:"indexA",get:function get(){return this._indexA;},set:function set(value){this._indexA=value;this._key_invalid=true;}},{key:"indexB",get:function get(){return this._indexB;},set:function set(value){this._indexB=value;this._key_invalid=true;}},{key:"typeA",get:function get(){return this._typeA;},set:function set(value){this._typeA=value;this._key_invalid=true;}},{key:"typeB",get:function get(){return this._typeB;},set:function set(value){this._typeB=value;this._key_invalid=true;}}]);return b2ContactFeature;}();var b2ContactID=function(){function b2ContactID(){this.cf=new b2ContactFeature();}var _proto20=b2ContactID.prototype;_proto20.Copy=function Copy(o){this.key=o.key;return this;};_proto20.Clone=function Clone(){return new b2ContactID().Copy(this);};_createClass(b2ContactID,[{key:"key",get:function get(){return this.cf.key;},set:function set(value){this.cf.key=value;}}]);return b2ContactID;}();var b2ManifoldPoint=function(){function b2ManifoldPoint(){this.localPoint=new b2Vec2();this.normalImpulse=0;this.tangentImpulse=0;this.id=new b2ContactID();}b2ManifoldPoint.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2ManifoldPoint();});};var _proto21=b2ManifoldPoint.prototype;_proto21.Reset=function Reset(){this.localPoint.SetZero();this.normalImpulse=0;this.tangentImpulse=0;this.id.key=0;};_proto21.Copy=function Copy(o){this.localPoint.Copy(o.localPoint);this.normalImpulse=o.normalImpulse;this.tangentImpulse=o.tangentImpulse;this.id.Copy(o.id);return this;};return b2ManifoldPoint;}();(function(b2ManifoldType){b2ManifoldType[b2ManifoldType["e_unknown"]=-1]="e_unknown";b2ManifoldType[b2ManifoldType["e_circles"]=0]="e_circles";b2ManifoldType[b2ManifoldType["e_faceA"]=1]="e_faceA";b2ManifoldType[b2ManifoldType["e_faceB"]=2]="e_faceB";})(exports.b2ManifoldType||(exports.b2ManifoldType={}));var b2Manifold=function(){function b2Manifold(){this.points=b2ManifoldPoint.MakeArray(b2_maxManifoldPoints);this.localNormal=new b2Vec2();this.localPoint=new b2Vec2();this.type=exports.b2ManifoldType.e_unknown;this.pointCount=0;}var _proto22=b2Manifold.prototype;_proto22.Reset=function Reset(){for(var i=0;i<b2_maxManifoldPoints;++i){this.points[i].Reset();}this.localNormal.SetZero();this.localPoint.SetZero();this.type=exports.b2ManifoldType.e_unknown;this.pointCount=0;};_proto22.Copy=function Copy(o){this.pointCount=o.pointCount;for(var i=0;i<b2_maxManifoldPoints;++i){this.points[i].Copy(o.points[i]);}this.localNormal.Copy(o.localNormal);this.localPoint.Copy(o.localPoint);this.type=o.type;return this;};_proto22.Clone=function Clone(){return new b2Manifold().Copy(this);};return b2Manifold;}();var b2WorldManifold=function(){function b2WorldManifold(){this.normal=new b2Vec2();this.points=b2Vec2.MakeArray(b2_maxManifoldPoints);this.separations=b2MakeNumberArray(b2_maxManifoldPoints);}var _proto23=b2WorldManifold.prototype;_proto23.Initialize=function Initialize(manifold,xfA,radiusA,xfB,radiusB){if(manifold.pointCount===0){return;}switch(manifold.type){case exports.b2ManifoldType.e_circles:{this.normal.Set(1,0);var pointA=b2Transform.MulXV(xfA,manifold.localPoint,b2WorldManifold.Initialize_s_pointA);var pointB=b2Transform.MulXV(xfB,manifold.points[0].localPoint,b2WorldManifold.Initialize_s_pointB);if(b2Vec2.DistanceSquaredVV(pointA,pointB)>b2_epsilon_sq){b2Vec2.SubVV(pointB,pointA,this.normal).SelfNormalize();}var cA=b2Vec2.AddVMulSV(pointA,radiusA,this.normal,b2WorldManifold.Initialize_s_cA);var cB=b2Vec2.SubVMulSV(pointB,radiusB,this.normal,b2WorldManifold.Initialize_s_cB);b2Vec2.MidVV(cA,cB,this.points[0]);this.separations[0]=b2Vec2.DotVV(b2Vec2.SubVV(cB,cA,b2Vec2.s_t0),this.normal);break;}case exports.b2ManifoldType.e_faceA:{b2Rot.MulRV(xfA.q,manifold.localNormal,this.normal);var planePoint=b2Transform.MulXV(xfA,manifold.localPoint,b2WorldManifold.Initialize_s_planePoint);for(var i=0;i<manifold.pointCount;++i){var clipPoint=b2Transform.MulXV(xfB,manifold.points[i].localPoint,b2WorldManifold.Initialize_s_clipPoint);var s=radiusA-b2Vec2.DotVV(b2Vec2.SubVV(clipPoint,planePoint,b2Vec2.s_t0),this.normal);var _cA=b2Vec2.AddVMulSV(clipPoint,s,this.normal,b2WorldManifold.Initialize_s_cA);var _cB=b2Vec2.SubVMulSV(clipPoint,radiusB,this.normal,b2WorldManifold.Initialize_s_cB);b2Vec2.MidVV(_cA,_cB,this.points[i]);this.separations[i]=b2Vec2.DotVV(b2Vec2.SubVV(_cB,_cA,b2Vec2.s_t0),this.normal);}break;}case exports.b2ManifoldType.e_faceB:{b2Rot.MulRV(xfB.q,manifold.localNormal,this.normal);var _planePoint=b2Transform.MulXV(xfB,manifold.localPoint,b2WorldManifold.Initialize_s_planePoint);for(var _i2=0;_i2<manifold.pointCount;++_i2){var _clipPoint=b2Transform.MulXV(xfA,manifold.points[_i2].localPoint,b2WorldManifold.Initialize_s_clipPoint);var _s=radiusB-b2Vec2.DotVV(b2Vec2.SubVV(_clipPoint,_planePoint,b2Vec2.s_t0),this.normal);var _cB2=b2Vec2.AddVMulSV(_clipPoint,_s,this.normal,b2WorldManifold.Initialize_s_cB);var _cA2=b2Vec2.SubVMulSV(_clipPoint,radiusA,this.normal,b2WorldManifold.Initialize_s_cA);b2Vec2.MidVV(_cA2,_cB2,this.points[_i2]);this.separations[_i2]=b2Vec2.DotVV(b2Vec2.SubVV(_cA2,_cB2,b2Vec2.s_t0),this.normal);}this.normal.SelfNeg();break;}}};return b2WorldManifold;}();b2WorldManifold.Initialize_s_pointA=new b2Vec2();b2WorldManifold.Initialize_s_pointB=new b2Vec2();b2WorldManifold.Initialize_s_cA=new b2Vec2();b2WorldManifold.Initialize_s_cB=new b2Vec2();b2WorldManifold.Initialize_s_planePoint=new b2Vec2();b2WorldManifold.Initialize_s_clipPoint=new b2Vec2();(function(b2PointState){b2PointState[b2PointState["b2_nullState"]=0]="b2_nullState";b2PointState[b2PointState["b2_addState"]=1]="b2_addState";b2PointState[b2PointState["b2_persistState"]=2]="b2_persistState";b2PointState[b2PointState["b2_removeState"]=3]="b2_removeState";})(exports.b2PointState||(exports.b2PointState={}));function b2GetPointStates(state1,state2,manifold1,manifold2){var i;for(i=0;i<manifold1.pointCount;++i){var id=manifold1.points[i].id;var key=id.key;state1[i]=exports.b2PointState.b2_removeState;for(var j=0,jct=manifold2.pointCount;j<jct;++j){if(manifold2.points[j].id.key===key){state1[i]=exports.b2PointState.b2_persistState;break;}}}for(;i<b2_maxManifoldPoints;++i){state1[i]=exports.b2PointState.b2_nullState;}for(i=0;i<manifold2.pointCount;++i){var _id=manifold2.points[i].id;var _key5=_id.key;state2[i]=exports.b2PointState.b2_addState;for(var _j=0,_jct=manifold1.pointCount;_j<_jct;++_j){if(manifold1.points[_j].id.key===_key5){state2[i]=exports.b2PointState.b2_persistState;break;}}}for(;i<b2_maxManifoldPoints;++i){state2[i]=exports.b2PointState.b2_nullState;}}var b2ClipVertex=function(){function b2ClipVertex(){this.v=new b2Vec2();this.id=new b2ContactID();}b2ClipVertex.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2ClipVertex();});};var _proto24=b2ClipVertex.prototype;_proto24.Copy=function Copy(other){this.v.Copy(other.v);this.id.Copy(other.id);return this;};return b2ClipVertex;}();var b2RayCastInput=function(){function b2RayCastInput(){this.p1=new b2Vec2();this.p2=new b2Vec2();this.maxFraction=1;}var _proto25=b2RayCastInput.prototype;_proto25.Copy=function Copy(o){this.p1.Copy(o.p1);this.p2.Copy(o.p2);this.maxFraction=o.maxFraction;return this;};return b2RayCastInput;}();var b2RayCastOutput=function(){function b2RayCastOutput(){this.normal=new b2Vec2();this.fraction=0;}var _proto26=b2RayCastOutput.prototype;_proto26.Copy=function Copy(o){this.normal.Copy(o.normal);this.fraction=o.fraction;return this;};return b2RayCastOutput;}();var b2AABB=function(){function b2AABB(){this.lowerBound=new b2Vec2();this.upperBound=new b2Vec2();this.m_cache_center=new b2Vec2();this.m_cache_extent=new b2Vec2();}var _proto27=b2AABB.prototype;_proto27.Copy=function Copy(o){this.lowerBound.Copy(o.lowerBound);this.upperBound.Copy(o.upperBound);return this;};_proto27.IsValid=function IsValid(){if(!this.lowerBound.IsValid()){return false;}if(!this.upperBound.IsValid()){return false;}if(this.upperBound.x<this.lowerBound.x){return false;}if(this.upperBound.y<this.lowerBound.y){return false;}return true;};_proto27.GetCenter=function GetCenter(){return b2Vec2.MidVV(this.lowerBound,this.upperBound,this.m_cache_center);};_proto27.GetExtents=function GetExtents(){return b2Vec2.ExtVV(this.lowerBound,this.upperBound,this.m_cache_extent);};_proto27.GetPerimeter=function GetPerimeter(){var wx=this.upperBound.x-this.lowerBound.x;var wy=this.upperBound.y-this.lowerBound.y;return 2*(wx+wy);};_proto27.Combine1=function Combine1(aabb){this.lowerBound.x=b2Min(this.lowerBound.x,aabb.lowerBound.x);this.lowerBound.y=b2Min(this.lowerBound.y,aabb.lowerBound.y);this.upperBound.x=b2Max(this.upperBound.x,aabb.upperBound.x);this.upperBound.y=b2Max(this.upperBound.y,aabb.upperBound.y);return this;};_proto27.Combine2=function Combine2(aabb1,aabb2){this.lowerBound.x=b2Min(aabb1.lowerBound.x,aabb2.lowerBound.x);this.lowerBound.y=b2Min(aabb1.lowerBound.y,aabb2.lowerBound.y);this.upperBound.x=b2Max(aabb1.upperBound.x,aabb2.upperBound.x);this.upperBound.y=b2Max(aabb1.upperBound.y,aabb2.upperBound.y);return this;};b2AABB.Combine=function Combine(aabb1,aabb2,out){out.Combine2(aabb1,aabb2);return out;};_proto27.Contains=function Contains(aabb){if(this.lowerBound.x<=aabb.lowerBound.x){return false;}if(this.lowerBound.y<=aabb.lowerBound.y){return false;}if(aabb.upperBound.x<=this.upperBound.x){return false;}if(aabb.upperBound.y<=this.upperBound.y){return false;}return true;};_proto27.RayCast=function RayCast(output,input){var tmin=-b2_maxFloat;var tmax=b2_maxFloat;var p_x=input.p1.x;var p_y=input.p1.y;var d_x=input.p2.x-input.p1.x;var d_y=input.p2.y-input.p1.y;var absD_x=b2Abs(d_x);var absD_y=b2Abs(d_y);var normal=output.normal;if(absD_x<b2_epsilon){if(p_x<this.lowerBound.x||this.upperBound.x<p_x){return false;}}else {var inv_d=1/d_x;var t1=(this.lowerBound.x-p_x)*inv_d;var t2=(this.upperBound.x-p_x)*inv_d;var s=-1;if(t1>t2){var t3=t1;t1=t2;t2=t3;s=1;}if(t1>tmin){normal.x=s;normal.y=0;tmin=t1;}tmax=b2Min(tmax,t2);if(tmin>tmax){return false;}}if(absD_y<b2_epsilon){if(p_y<this.lowerBound.y||this.upperBound.y<p_y){return false;}}else {var _inv_d=1/d_y;var _t=(this.lowerBound.y-p_y)*_inv_d;var _t2=(this.upperBound.y-p_y)*_inv_d;var _s2=-1;if(_t>_t2){var _t3=_t;_t=_t2;_t2=_t3;_s2=1;}if(_t>tmin){normal.x=0;normal.y=_s2;tmin=_t;}tmax=b2Min(tmax,_t2);if(tmin>tmax){return false;}}if(tmin<0||input.maxFraction<tmin){return false;}output.fraction=tmin;return true;};_proto27.TestContain=function TestContain(point){if(point.x<this.lowerBound.x||this.upperBound.x<point.x){return false;}if(point.y<this.lowerBound.y||this.upperBound.y<point.y){return false;}return true;};_proto27.TestOverlap=function TestOverlap(other){if(this.upperBound.x<other.lowerBound.x){return false;}if(this.upperBound.y<other.lowerBound.y){return false;}if(other.upperBound.x<this.lowerBound.x){return false;}if(other.upperBound.y<this.lowerBound.y){return false;}return true;};return b2AABB;}();function b2TestOverlapAABB(a,b){if(a.upperBound.x<b.lowerBound.x){return false;}if(a.upperBound.y<b.lowerBound.y){return false;}if(b.upperBound.x<a.lowerBound.x){return false;}if(b.upperBound.y<a.lowerBound.y){return false;}return true;}function b2ClipSegmentToLine(vOut,vIn,normal,offset,vertexIndexA){var numOut=0;var vIn0=vIn[0];var vIn1=vIn[1];var distance0=b2Vec2.DotVV(normal,vIn0.v)-offset;var distance1=b2Vec2.DotVV(normal,vIn1.v)-offset;if(distance0<=0){vOut[numOut++].Copy(vIn0);}if(distance1<=0){vOut[numOut++].Copy(vIn1);}if(distance0*distance1<0){var interp=distance0/(distance0-distance1);var v=vOut[numOut].v;v.x=vIn0.v.x+interp*(vIn1.v.x-vIn0.v.x);v.y=vIn0.v.y+interp*(vIn1.v.y-vIn0.v.y);var id=vOut[numOut].id;id.cf.indexA=vertexIndexA;id.cf.indexB=vIn0.id.cf.indexB;id.cf.typeA=exports.b2ContactFeatureType.e_vertex;id.cf.typeB=exports.b2ContactFeatureType.e_face;++numOut;}return numOut;}var b2TestOverlapShape_s_input=new b2DistanceInput();var b2TestOverlapShape_s_simplexCache=new b2SimplexCache();var b2TestOverlapShape_s_output=new b2DistanceOutput();function b2TestOverlapShape(shapeA,indexA,shapeB,indexB,xfA,xfB){var input=b2TestOverlapShape_s_input.Reset();input.proxyA.SetShape(shapeA,indexA);input.proxyB.SetShape(shapeB,indexB);input.transformA.Copy(xfA);input.transformB.Copy(xfB);input.useRadii=true;var simplexCache=b2TestOverlapShape_s_simplexCache.Reset();simplexCache.count=0;var output=b2TestOverlapShape_s_output.Reset();b2Distance(output,simplexCache,input);return output.distance<10*b2_epsilon;}function verify(value){if(value===null){throw new Error();}return value;}var b2TreeNode=function(){function b2TreeNode(id){if(id===void 0){id=0;}this.m_id=0;this.aabb=new b2AABB();this._userData=null;this.parent=null;this.child1=null;this.child2=null;this.height=0;this.m_id=id;}var _proto28=b2TreeNode.prototype;_proto28.Reset=function Reset(){this._userData=null;};_proto28.IsLeaf=function IsLeaf(){return this.child1===null;};_createClass(b2TreeNode,[{key:"userData",get:function get(){if(this._userData===null){throw new Error();}return this._userData;},set:function set(value){if(this._userData!==null){throw new Error();}this._userData=value;}}]);return b2TreeNode;}();var b2DynamicTree=function(){function b2DynamicTree(){this.m_root=null;this.m_freeList=null;this.m_path=0;this.m_insertionCount=0;this.m_stack=new b2GrowableStack(256);}var _proto29=b2DynamicTree.prototype;_proto29.Query=function Query(aabb,callback){var stack=this.m_stack.Reset();stack.Push(this.m_root);while(stack.GetCount()>0){var node=stack.Pop();if(node===null){continue;}if(node.aabb.TestOverlap(aabb)){if(node.IsLeaf()){var proceed=callback(node);if(!proceed){return;}}else {stack.Push(node.child1);stack.Push(node.child2);}}}};_proto29.QueryPoint=function QueryPoint(point,callback){var stack=this.m_stack.Reset();stack.Push(this.m_root);while(stack.GetCount()>0){var node=stack.Pop();if(node===null){continue;}if(node.aabb.TestContain(point)){if(node.IsLeaf()){var proceed=callback(node);if(!proceed){return;}}else {stack.Push(node.child1);stack.Push(node.child2);}}}};_proto29.RayCast=function RayCast(input,callback){var p1=input.p1;var p2=input.p2;var r=b2Vec2.SubVV(p2,p1,b2DynamicTree.s_r);r.Normalize();var v=b2Vec2.CrossOneV(r,b2DynamicTree.s_v);var abs_v=b2Vec2.AbsV(v,b2DynamicTree.s_abs_v);var maxFraction=input.maxFraction;var segmentAABB=b2DynamicTree.s_segmentAABB;var t_x=p1.x+maxFraction*(p2.x-p1.x);var t_y=p1.y+maxFraction*(p2.y-p1.y);segmentAABB.lowerBound.x=b2Min(p1.x,t_x);segmentAABB.lowerBound.y=b2Min(p1.y,t_y);segmentAABB.upperBound.x=b2Max(p1.x,t_x);segmentAABB.upperBound.y=b2Max(p1.y,t_y);var stack=this.m_stack.Reset();stack.Push(this.m_root);while(stack.GetCount()>0){var node=stack.Pop();if(node===null){continue;}if(!b2TestOverlapAABB(node.aabb,segmentAABB)){continue;}var c=node.aabb.GetCenter();var h=node.aabb.GetExtents();var separation=b2Abs(b2Vec2.DotVV(v,b2Vec2.SubVV(p1,c,b2Vec2.s_t0)))-b2Vec2.DotVV(abs_v,h);if(separation>0){continue;}if(node.IsLeaf()){var subInput=b2DynamicTree.s_subInput;subInput.p1.Copy(input.p1);subInput.p2.Copy(input.p2);subInput.maxFraction=maxFraction;var value=callback(subInput,node);if(value===0){return;}if(value>0){maxFraction=value;t_x=p1.x+maxFraction*(p2.x-p1.x);t_y=p1.y+maxFraction*(p2.y-p1.y);segmentAABB.lowerBound.x=b2Min(p1.x,t_x);segmentAABB.lowerBound.y=b2Min(p1.y,t_y);segmentAABB.upperBound.x=b2Max(p1.x,t_x);segmentAABB.upperBound.y=b2Max(p1.y,t_y);}}else {stack.Push(node.child1);stack.Push(node.child2);}}};_proto29.AllocateNode=function AllocateNode(){if(this.m_freeList!==null){var node=this.m_freeList;this.m_freeList=node.parent;node.parent=null;node.child1=null;node.child2=null;node.height=0;return node;}return new b2TreeNode(b2DynamicTree.s_node_id++);};_proto29.FreeNode=function FreeNode(node){node.parent=this.m_freeList;node.child1=null;node.child2=null;node.height=-1;node.Reset();this.m_freeList=node;};_proto29.CreateProxy=function CreateProxy(aabb,userData){var node=this.AllocateNode();var r_x=b2_aabbExtension;var r_y=b2_aabbExtension;node.aabb.lowerBound.x=aabb.lowerBound.x-r_x;node.aabb.lowerBound.y=aabb.lowerBound.y-r_y;node.aabb.upperBound.x=aabb.upperBound.x+r_x;node.aabb.upperBound.y=aabb.upperBound.y+r_y;node.userData=userData;node.height=0;this.InsertLeaf(node);return node;};_proto29.DestroyProxy=function DestroyProxy(node){this.RemoveLeaf(node);this.FreeNode(node);};_proto29.MoveProxy=function MoveProxy(node,aabb,displacement){if(node.aabb.Contains(aabb)){return false;}this.RemoveLeaf(node);var r_x=b2_aabbExtension;var r_y=b2_aabbExtension;node.aabb.lowerBound.x=aabb.lowerBound.x-r_x;node.aabb.lowerBound.y=aabb.lowerBound.y-r_y;node.aabb.upperBound.x=aabb.upperBound.x+r_x;node.aabb.upperBound.y=aabb.upperBound.y+r_y;var d_x=b2_aabbMultiplier*displacement.x;var d_y=b2_aabbMultiplier*displacement.y;if(d_x<0.0){node.aabb.lowerBound.x+=d_x;}else {node.aabb.upperBound.x+=d_x;}if(d_y<0.0){node.aabb.lowerBound.y+=d_y;}else {node.aabb.upperBound.y+=d_y;}this.InsertLeaf(node);return true;};_proto29.InsertLeaf=function InsertLeaf(leaf){++this.m_insertionCount;if(this.m_root===null){this.m_root=leaf;this.m_root.parent=null;return;}var leafAABB=leaf.aabb;var sibling=this.m_root;while(!sibling.IsLeaf()){var child1=verify(sibling.child1);var child2=verify(sibling.child2);var area=sibling.aabb.GetPerimeter();var combinedAABB=b2DynamicTree.s_combinedAABB;combinedAABB.Combine2(sibling.aabb,leafAABB);var combinedArea=combinedAABB.GetPerimeter();var cost=2*combinedArea;var inheritanceCost=2*(combinedArea-area);var cost1=void 0;var aabb=b2DynamicTree.s_aabb;var oldArea=void 0;var newArea=void 0;if(child1.IsLeaf()){aabb.Combine2(leafAABB,child1.aabb);cost1=aabb.GetPerimeter()+inheritanceCost;}else {aabb.Combine2(leafAABB,child1.aabb);oldArea=child1.aabb.GetPerimeter();newArea=aabb.GetPerimeter();cost1=newArea-oldArea+inheritanceCost;}var cost2=void 0;if(child2.IsLeaf()){aabb.Combine2(leafAABB,child2.aabb);cost2=aabb.GetPerimeter()+inheritanceCost;}else {aabb.Combine2(leafAABB,child2.aabb);oldArea=child2.aabb.GetPerimeter();newArea=aabb.GetPerimeter();cost2=newArea-oldArea+inheritanceCost;}if(cost<cost1&&cost<cost2){break;}if(cost1<cost2){sibling=child1;}else {sibling=child2;}}var oldParent=sibling.parent;var newParent=this.AllocateNode();newParent.parent=oldParent;newParent.aabb.Combine2(leafAABB,sibling.aabb);newParent.height=sibling.height+1;if(oldParent!==null){if(oldParent.child1===sibling){oldParent.child1=newParent;}else {oldParent.child2=newParent;}newParent.child1=sibling;newParent.child2=leaf;sibling.parent=newParent;leaf.parent=newParent;}else {newParent.child1=sibling;newParent.child2=leaf;sibling.parent=newParent;leaf.parent=newParent;this.m_root=newParent;}var node=leaf.parent;while(node!==null){node=this.Balance(node);var _child=verify(node.child1);var _child2=verify(node.child2);node.height=1+b2Max(_child.height,_child2.height);node.aabb.Combine2(_child.aabb,_child2.aabb);node=node.parent;}};_proto29.RemoveLeaf=function RemoveLeaf(leaf){if(leaf===this.m_root){this.m_root=null;return;}var parent=verify(leaf.parent);var grandParent=parent&&parent.parent;var sibling=verify(parent.child1===leaf?parent.child2:parent.child1);if(grandParent!==null){if(grandParent.child1===parent){grandParent.child1=sibling;}else {grandParent.child2=sibling;}sibling.parent=grandParent;this.FreeNode(parent);var index=grandParent;while(index!==null){index=this.Balance(index);var child1=verify(index.child1);var child2=verify(index.child2);index.aabb.Combine2(child1.aabb,child2.aabb);index.height=1+b2Max(child1.height,child2.height);index=index.parent;}}else {this.m_root=sibling;sibling.parent=null;this.FreeNode(parent);}};_proto29.Balance=function Balance(A){if(A.IsLeaf()||A.height<2){return A;}var B=verify(A.child1);var C=verify(A.child2);var balance=C.height-B.height;if(balance>1){var F=verify(C.child1);var G=verify(C.child2);C.child1=A;C.parent=A.parent;A.parent=C;if(C.parent!==null){if(C.parent.child1===A){C.parent.child1=C;}else {C.parent.child2=C;}}else {this.m_root=C;}if(F.height>G.height){C.child2=F;A.child2=G;G.parent=A;A.aabb.Combine2(B.aabb,G.aabb);C.aabb.Combine2(A.aabb,F.aabb);A.height=1+b2Max(B.height,G.height);C.height=1+b2Max(A.height,F.height);}else {C.child2=G;A.child2=F;F.parent=A;A.aabb.Combine2(B.aabb,F.aabb);C.aabb.Combine2(A.aabb,G.aabb);A.height=1+b2Max(B.height,F.height);C.height=1+b2Max(A.height,G.height);}return C;}if(balance<-1){var D=verify(B.child1);var E=verify(B.child2);B.child1=A;B.parent=A.parent;A.parent=B;if(B.parent!==null){if(B.parent.child1===A){B.parent.child1=B;}else {B.parent.child2=B;}}else {this.m_root=B;}if(D.height>E.height){B.child2=D;A.child1=E;E.parent=A;A.aabb.Combine2(C.aabb,E.aabb);B.aabb.Combine2(A.aabb,D.aabb);A.height=1+b2Max(C.height,E.height);B.height=1+b2Max(A.height,D.height);}else {B.child2=E;A.child1=D;D.parent=A;A.aabb.Combine2(C.aabb,D.aabb);B.aabb.Combine2(A.aabb,E.aabb);A.height=1+b2Max(C.height,D.height);B.height=1+b2Max(A.height,E.height);}return B;}return A;};_proto29.GetHeight=function GetHeight(){if(this.m_root===null){return 0;}return this.m_root.height;};b2DynamicTree.GetAreaNode=function GetAreaNode(node){if(node===null){return 0;}if(node.IsLeaf()){return 0;}var area=node.aabb.GetPerimeter();area+=b2DynamicTree.GetAreaNode(node.child1);area+=b2DynamicTree.GetAreaNode(node.child2);return area;};_proto29.GetAreaRatio=function GetAreaRatio(){if(this.m_root===null){return 0;}var root=this.m_root;var rootArea=root.aabb.GetPerimeter();var totalArea=b2DynamicTree.GetAreaNode(this.m_root);return totalArea/rootArea;};b2DynamicTree.ComputeHeightNode=function ComputeHeightNode(node){if(node===null){return 0;}if(node.IsLeaf()){return 0;}var height1=b2DynamicTree.ComputeHeightNode(node.child1);var height2=b2DynamicTree.ComputeHeightNode(node.child2);return 1+b2Max(height1,height2);};_proto29.ComputeHeight=function ComputeHeight(){var height=b2DynamicTree.ComputeHeightNode(this.m_root);return height;};_proto29.ValidateStructure=function ValidateStructure(node){if(node===null){return;}if(node===this.m_root);if(node.IsLeaf()){return;}var child1=verify(node.child1);var child2=verify(node.child2);this.ValidateStructure(child1);this.ValidateStructure(child2);};_proto29.ValidateMetrics=function ValidateMetrics(node){if(node===null){return;}if(node.IsLeaf()){return;}var child1=verify(node.child1);var child2=verify(node.child2);var aabb=b2DynamicTree.s_aabb;aabb.Combine2(child1.aabb,child2.aabb);this.ValidateMetrics(child1);this.ValidateMetrics(child2);};_proto29.Validate=function Validate(){};b2DynamicTree.GetMaxBalanceNode=function GetMaxBalanceNode(node,maxBalance){if(node===null){return maxBalance;}if(node.height<=1){return maxBalance;}var child1=verify(node.child1);var child2=verify(node.child2);var balance=b2Abs(child2.height-child1.height);return b2Max(maxBalance,balance);};_proto29.GetMaxBalance=function GetMaxBalance(){var maxBalance=b2DynamicTree.GetMaxBalanceNode(this.m_root,0);return maxBalance;};_proto29.RebuildBottomUp=function RebuildBottomUp(){this.Validate();};b2DynamicTree.ShiftOriginNode=function ShiftOriginNode(node,newOrigin){if(node===null){return;}if(node.height<=1){return;}var child1=node.child1;var child2=node.child2;b2DynamicTree.ShiftOriginNode(child1,newOrigin);b2DynamicTree.ShiftOriginNode(child2,newOrigin);node.aabb.lowerBound.SelfSub(newOrigin);node.aabb.upperBound.SelfSub(newOrigin);};_proto29.ShiftOrigin=function ShiftOrigin(newOrigin){b2DynamicTree.ShiftOriginNode(this.m_root,newOrigin);};return b2DynamicTree;}();b2DynamicTree.s_r=new b2Vec2();b2DynamicTree.s_v=new b2Vec2();b2DynamicTree.s_abs_v=new b2Vec2();b2DynamicTree.s_segmentAABB=new b2AABB();b2DynamicTree.s_subInput=new b2RayCastInput();b2DynamicTree.s_combinedAABB=new b2AABB();b2DynamicTree.s_aabb=new b2AABB();b2DynamicTree.s_node_id=0;function std_iter_swap(array,a,b){var tmp=array[a];array[a]=array[b];array[b]=tmp;}function default_compare(a,b){return a<b;}function std_sort(array,first,len,cmp){if(first===void 0){first=0;}if(len===void 0){len=array.length-first;}if(cmp===void 0){cmp=default_compare;}var left=first;var stack=[];var pos=0;for(;;){for(;left+1<len;len++){var pivot=array[left+Math.floor(Math.random()*(len-left))];stack[pos++]=len;for(var right=left-1;;){while(cmp(array[++right],pivot)){}while(cmp(pivot,array[--len])){}if(right>=len){break;}std_iter_swap(array,right,len);}}if(pos===0){break;}left=len;len=stack[--pos];}return array;}var b2Pair=function b2Pair(proxyA,proxyB){this.proxyA=proxyA;this.proxyB=proxyB;};var b2BroadPhase=function(){function b2BroadPhase(){this.m_tree=new b2DynamicTree();this.m_proxyCount=0;this.m_moveCount=0;this.m_moveBuffer=[];this.m_pairCount=0;this.m_pairBuffer=[];}var _proto30=b2BroadPhase.prototype;_proto30.CreateProxy=function CreateProxy(aabb,userData){var proxy=this.m_tree.CreateProxy(aabb,userData);++this.m_proxyCount;this.BufferMove(proxy);return proxy;};_proto30.DestroyProxy=function DestroyProxy(proxy){this.UnBufferMove(proxy);--this.m_proxyCount;this.m_tree.DestroyProxy(proxy);};_proto30.MoveProxy=function MoveProxy(proxy,aabb,displacement){var buffer=this.m_tree.MoveProxy(proxy,aabb,displacement);if(buffer){this.BufferMove(proxy);}};_proto30.TouchProxy=function TouchProxy(proxy){this.BufferMove(proxy);};_proto30.GetProxyCount=function GetProxyCount(){return this.m_proxyCount;};_proto30.UpdatePairs=function UpdatePairs(callback){var _this=this;this.m_pairCount=0;var _loop=function _loop(_i3){var queryProxy=_this.m_moveBuffer[_i3];if(queryProxy===null){return "continue";}var fatAABB=queryProxy.aabb;_this.m_tree.Query(fatAABB,function(proxy){if(proxy.m_id===queryProxy.m_id){return true;}var proxyA;var proxyB;if(proxy.m_id<queryProxy.m_id){proxyA=proxy;proxyB=queryProxy;}else {proxyA=queryProxy;proxyB=proxy;}if(_this.m_pairCount===_this.m_pairBuffer.length){_this.m_pairBuffer[_this.m_pairCount]=new b2Pair(proxyA,proxyB);}else {var _pair=_this.m_pairBuffer[_this.m_pairCount];_pair.proxyA=proxyA;_pair.proxyB=proxyB;}++_this.m_pairCount;return true;});};for(var _i3=0;_i3<this.m_moveCount;++_i3){var _ret=_loop(_i3);if(_ret==="continue")continue;}this.m_moveCount=0;std_sort(this.m_pairBuffer,0,this.m_pairCount,b2PairLessThan);var i=0;while(i<this.m_pairCount){var primaryPair=this.m_pairBuffer[i];var userDataA=primaryPair.proxyA.userData;var userDataB=primaryPair.proxyB.userData;callback(userDataA,userDataB);++i;while(i<this.m_pairCount){var pair=this.m_pairBuffer[i];if(pair.proxyA.m_id!==primaryPair.proxyA.m_id||pair.proxyB.m_id!==primaryPair.proxyB.m_id){break;}++i;}}};_proto30.Query=function Query(aabb,callback){this.m_tree.Query(aabb,callback);};_proto30.QueryPoint=function QueryPoint(point,callback){this.m_tree.QueryPoint(point,callback);};_proto30.RayCast=function RayCast(input,callback){this.m_tree.RayCast(input,callback);};_proto30.GetTreeHeight=function GetTreeHeight(){return this.m_tree.GetHeight();};_proto30.GetTreeBalance=function GetTreeBalance(){return this.m_tree.GetMaxBalance();};_proto30.GetTreeQuality=function GetTreeQuality(){return this.m_tree.GetAreaRatio();};_proto30.ShiftOrigin=function ShiftOrigin(newOrigin){this.m_tree.ShiftOrigin(newOrigin);};_proto30.BufferMove=function BufferMove(proxy){this.m_moveBuffer[this.m_moveCount]=proxy;++this.m_moveCount;};_proto30.UnBufferMove=function UnBufferMove(proxy){var i=this.m_moveBuffer.indexOf(proxy);this.m_moveBuffer[i]=null;};return b2BroadPhase;}();function b2PairLessThan(pair1,pair2){if(pair1.proxyA.m_id<pair2.proxyA.m_id){return true;}if(pair1.proxyA.m_id===pair2.proxyA.m_id){return pair1.proxyB.m_id<pair2.proxyB.m_id;}return false;}exports.b2_toiTime=0;exports.b2_toiMaxTime=0;exports.b2_toiCalls=0;exports.b2_toiIters=0;exports.b2_toiMaxIters=0;exports.b2_toiRootIters=0;exports.b2_toiMaxRootIters=0;function b2_toi_reset(){exports.b2_toiTime=0;exports.b2_toiMaxTime=0;exports.b2_toiCalls=0;exports.b2_toiIters=0;exports.b2_toiMaxIters=0;exports.b2_toiRootIters=0;exports.b2_toiMaxRootIters=0;}var b2TimeOfImpact_s_xfA=new b2Transform();var b2TimeOfImpact_s_xfB=new b2Transform();var b2TimeOfImpact_s_pointA=new b2Vec2();var b2TimeOfImpact_s_pointB=new b2Vec2();var b2TimeOfImpact_s_normal=new b2Vec2();var b2TimeOfImpact_s_axisA=new b2Vec2();var b2TimeOfImpact_s_axisB=new b2Vec2();var b2TOIInput=function b2TOIInput(){this.proxyA=new b2DistanceProxy();this.proxyB=new b2DistanceProxy();this.sweepA=new b2Sweep();this.sweepB=new b2Sweep();this.tMax=0;};(function(b2TOIOutputState){b2TOIOutputState[b2TOIOutputState["e_unknown"]=0]="e_unknown";b2TOIOutputState[b2TOIOutputState["e_failed"]=1]="e_failed";b2TOIOutputState[b2TOIOutputState["e_overlapped"]=2]="e_overlapped";b2TOIOutputState[b2TOIOutputState["e_touching"]=3]="e_touching";b2TOIOutputState[b2TOIOutputState["e_separated"]=4]="e_separated";})(exports.b2TOIOutputState||(exports.b2TOIOutputState={}));var b2TOIOutput=function b2TOIOutput(){this.state=exports.b2TOIOutputState.e_unknown;this.t=0;};(function(b2SeparationFunctionType){b2SeparationFunctionType[b2SeparationFunctionType["e_unknown"]=-1]="e_unknown";b2SeparationFunctionType[b2SeparationFunctionType["e_points"]=0]="e_points";b2SeparationFunctionType[b2SeparationFunctionType["e_faceA"]=1]="e_faceA";b2SeparationFunctionType[b2SeparationFunctionType["e_faceB"]=2]="e_faceB";})(exports.b2SeparationFunctionType||(exports.b2SeparationFunctionType={}));var b2SeparationFunction=function(){function b2SeparationFunction(){this.m_sweepA=new b2Sweep();this.m_sweepB=new b2Sweep();this.m_type=exports.b2SeparationFunctionType.e_unknown;this.m_localPoint=new b2Vec2();this.m_axis=new b2Vec2();}var _proto31=b2SeparationFunction.prototype;_proto31.Initialize=function Initialize(cache,proxyA,sweepA,proxyB,sweepB,t1){this.m_proxyA=proxyA;this.m_proxyB=proxyB;var count=cache.count;this.m_sweepA.Copy(sweepA);this.m_sweepB.Copy(sweepB);var xfA=b2TimeOfImpact_s_xfA;var xfB=b2TimeOfImpact_s_xfB;this.m_sweepA.GetTransform(xfA,t1);this.m_sweepB.GetTransform(xfB,t1);if(count===1){this.m_type=exports.b2SeparationFunctionType.e_points;var localPointA=this.m_proxyA.GetVertex(cache.indexA[0]);var localPointB=this.m_proxyB.GetVertex(cache.indexB[0]);var pointA=b2Transform.MulXV(xfA,localPointA,b2TimeOfImpact_s_pointA);var pointB=b2Transform.MulXV(xfB,localPointB,b2TimeOfImpact_s_pointB);b2Vec2.SubVV(pointB,pointA,this.m_axis);var s=this.m_axis.Normalize();this.m_localPoint.SetZero();return s;}else if(cache.indexA[0]===cache.indexA[1]){this.m_type=exports.b2SeparationFunctionType.e_faceB;var localPointB1=this.m_proxyB.GetVertex(cache.indexB[0]);var localPointB2=this.m_proxyB.GetVertex(cache.indexB[1]);b2Vec2.CrossVOne(b2Vec2.SubVV(localPointB2,localPointB1,b2Vec2.s_t0),this.m_axis).SelfNormalize();var normal=b2Rot.MulRV(xfB.q,this.m_axis,b2TimeOfImpact_s_normal);b2Vec2.MidVV(localPointB1,localPointB2,this.m_localPoint);var _pointB=b2Transform.MulXV(xfB,this.m_localPoint,b2TimeOfImpact_s_pointB);var _localPointA=this.m_proxyA.GetVertex(cache.indexA[0]);var _pointA=b2Transform.MulXV(xfA,_localPointA,b2TimeOfImpact_s_pointA);var _s3=b2Vec2.DotVV(b2Vec2.SubVV(_pointA,_pointB,b2Vec2.s_t0),normal);if(_s3<0){this.m_axis.SelfNeg();_s3=-_s3;}return _s3;}else {this.m_type=exports.b2SeparationFunctionType.e_faceA;var localPointA1=this.m_proxyA.GetVertex(cache.indexA[0]);var localPointA2=this.m_proxyA.GetVertex(cache.indexA[1]);b2Vec2.CrossVOne(b2Vec2.SubVV(localPointA2,localPointA1,b2Vec2.s_t0),this.m_axis).SelfNormalize();var _normal=b2Rot.MulRV(xfA.q,this.m_axis,b2TimeOfImpact_s_normal);b2Vec2.MidVV(localPointA1,localPointA2,this.m_localPoint);var _pointA2=b2Transform.MulXV(xfA,this.m_localPoint,b2TimeOfImpact_s_pointA);var _localPointB=this.m_proxyB.GetVertex(cache.indexB[0]);var _pointB2=b2Transform.MulXV(xfB,_localPointB,b2TimeOfImpact_s_pointB);var _s4=b2Vec2.DotVV(b2Vec2.SubVV(_pointB2,_pointA2,b2Vec2.s_t0),_normal);if(_s4<0){this.m_axis.SelfNeg();_s4=-_s4;}return _s4;}};_proto31.FindMinSeparation=function FindMinSeparation(indexA,indexB,t){var xfA=b2TimeOfImpact_s_xfA;var xfB=b2TimeOfImpact_s_xfB;this.m_sweepA.GetTransform(xfA,t);this.m_sweepB.GetTransform(xfB,t);switch(this.m_type){case exports.b2SeparationFunctionType.e_points:{var axisA=b2Rot.MulTRV(xfA.q,this.m_axis,b2TimeOfImpact_s_axisA);var axisB=b2Rot.MulTRV(xfB.q,b2Vec2.NegV(this.m_axis,b2Vec2.s_t0),b2TimeOfImpact_s_axisB);indexA[0]=this.m_proxyA.GetSupport(axisA);indexB[0]=this.m_proxyB.GetSupport(axisB);var localPointA=this.m_proxyA.GetVertex(indexA[0]);var localPointB=this.m_proxyB.GetVertex(indexB[0]);var pointA=b2Transform.MulXV(xfA,localPointA,b2TimeOfImpact_s_pointA);var pointB=b2Transform.MulXV(xfB,localPointB,b2TimeOfImpact_s_pointB);var separation=b2Vec2.DotVV(b2Vec2.SubVV(pointB,pointA,b2Vec2.s_t0),this.m_axis);return separation;}case exports.b2SeparationFunctionType.e_faceA:{var normal=b2Rot.MulRV(xfA.q,this.m_axis,b2TimeOfImpact_s_normal);var _pointA3=b2Transform.MulXV(xfA,this.m_localPoint,b2TimeOfImpact_s_pointA);var _axisB=b2Rot.MulTRV(xfB.q,b2Vec2.NegV(normal,b2Vec2.s_t0),b2TimeOfImpact_s_axisB);indexA[0]=-1;indexB[0]=this.m_proxyB.GetSupport(_axisB);var _localPointB2=this.m_proxyB.GetVertex(indexB[0]);var _pointB3=b2Transform.MulXV(xfB,_localPointB2,b2TimeOfImpact_s_pointB);var _separation=b2Vec2.DotVV(b2Vec2.SubVV(_pointB3,_pointA3,b2Vec2.s_t0),normal);return _separation;}case exports.b2SeparationFunctionType.e_faceB:{var _normal2=b2Rot.MulRV(xfB.q,this.m_axis,b2TimeOfImpact_s_normal);var _pointB4=b2Transform.MulXV(xfB,this.m_localPoint,b2TimeOfImpact_s_pointB);var _axisA=b2Rot.MulTRV(xfA.q,b2Vec2.NegV(_normal2,b2Vec2.s_t0),b2TimeOfImpact_s_axisA);indexB[0]=-1;indexA[0]=this.m_proxyA.GetSupport(_axisA);var _localPointA2=this.m_proxyA.GetVertex(indexA[0]);var _pointA4=b2Transform.MulXV(xfA,_localPointA2,b2TimeOfImpact_s_pointA);var _separation2=b2Vec2.DotVV(b2Vec2.SubVV(_pointA4,_pointB4,b2Vec2.s_t0),_normal2);return _separation2;}default:indexA[0]=-1;indexB[0]=-1;return 0;}};_proto31.Evaluate=function Evaluate(indexA,indexB,t){var xfA=b2TimeOfImpact_s_xfA;var xfB=b2TimeOfImpact_s_xfB;this.m_sweepA.GetTransform(xfA,t);this.m_sweepB.GetTransform(xfB,t);switch(this.m_type){case exports.b2SeparationFunctionType.e_points:{var localPointA=this.m_proxyA.GetVertex(indexA);var localPointB=this.m_proxyB.GetVertex(indexB);var pointA=b2Transform.MulXV(xfA,localPointA,b2TimeOfImpact_s_pointA);var pointB=b2Transform.MulXV(xfB,localPointB,b2TimeOfImpact_s_pointB);var separation=b2Vec2.DotVV(b2Vec2.SubVV(pointB,pointA,b2Vec2.s_t0),this.m_axis);return separation;}case exports.b2SeparationFunctionType.e_faceA:{var normal=b2Rot.MulRV(xfA.q,this.m_axis,b2TimeOfImpact_s_normal);var _pointA5=b2Transform.MulXV(xfA,this.m_localPoint,b2TimeOfImpact_s_pointA);var _localPointB3=this.m_proxyB.GetVertex(indexB);var _pointB5=b2Transform.MulXV(xfB,_localPointB3,b2TimeOfImpact_s_pointB);var _separation3=b2Vec2.DotVV(b2Vec2.SubVV(_pointB5,_pointA5,b2Vec2.s_t0),normal);return _separation3;}case exports.b2SeparationFunctionType.e_faceB:{var _normal3=b2Rot.MulRV(xfB.q,this.m_axis,b2TimeOfImpact_s_normal);var _pointB6=b2Transform.MulXV(xfB,this.m_localPoint,b2TimeOfImpact_s_pointB);var _localPointA3=this.m_proxyA.GetVertex(indexA);var _pointA6=b2Transform.MulXV(xfA,_localPointA3,b2TimeOfImpact_s_pointA);var _separation4=b2Vec2.DotVV(b2Vec2.SubVV(_pointA6,_pointB6,b2Vec2.s_t0),_normal3);return _separation4;}default:return 0;}};return b2SeparationFunction;}();var b2TimeOfImpact_s_timer=new b2Timer();var b2TimeOfImpact_s_cache=new b2SimplexCache();var b2TimeOfImpact_s_distanceInput=new b2DistanceInput();var b2TimeOfImpact_s_distanceOutput=new b2DistanceOutput();var b2TimeOfImpact_s_fcn=new b2SeparationFunction();var b2TimeOfImpact_s_indexA=[0];var b2TimeOfImpact_s_indexB=[0];var b2TimeOfImpact_s_sweepA=new b2Sweep();var b2TimeOfImpact_s_sweepB=new b2Sweep();function b2TimeOfImpact(output,input){var timer=b2TimeOfImpact_s_timer.Reset();++exports.b2_toiCalls;output.state=exports.b2TOIOutputState.e_unknown;output.t=input.tMax;var proxyA=input.proxyA;var proxyB=input.proxyB;var maxVertices=b2Max(b2_maxPolygonVertices,b2Max(proxyA.m_count,proxyB.m_count));var sweepA=b2TimeOfImpact_s_sweepA.Copy(input.sweepA);var sweepB=b2TimeOfImpact_s_sweepB.Copy(input.sweepB);sweepA.Normalize();sweepB.Normalize();var tMax=input.tMax;var totalRadius=proxyA.m_radius+proxyB.m_radius;var target=b2Max(b2_linearSlop,totalRadius-3*b2_linearSlop);var tolerance=0.25*b2_linearSlop;var t1=0;var k_maxIterations=20;var iter=0;var cache=b2TimeOfImpact_s_cache;cache.count=0;var distanceInput=b2TimeOfImpact_s_distanceInput;distanceInput.proxyA.Copy(input.proxyA);distanceInput.proxyB.Copy(input.proxyB);distanceInput.useRadii=false;for(;;){var xfA=b2TimeOfImpact_s_xfA;var xfB=b2TimeOfImpact_s_xfB;sweepA.GetTransform(xfA,t1);sweepB.GetTransform(xfB,t1);distanceInput.transformA.Copy(xfA);distanceInput.transformB.Copy(xfB);var distanceOutput=b2TimeOfImpact_s_distanceOutput;b2Distance(distanceOutput,cache,distanceInput);if(distanceOutput.distance<=0){output.state=exports.b2TOIOutputState.e_overlapped;output.t=0;break;}if(distanceOutput.distance<target+tolerance){output.state=exports.b2TOIOutputState.e_touching;output.t=t1;break;}var fcn=b2TimeOfImpact_s_fcn;fcn.Initialize(cache,proxyA,sweepA,proxyB,sweepB,t1);var done=false;var t2=tMax;var pushBackIter=0;for(;;){var indexA=b2TimeOfImpact_s_indexA;var indexB=b2TimeOfImpact_s_indexB;var s2=fcn.FindMinSeparation(indexA,indexB,t2);if(s2>target+tolerance){output.state=exports.b2TOIOutputState.e_separated;output.t=tMax;done=true;break;}if(s2>target-tolerance){t1=t2;break;}var s1=fcn.Evaluate(indexA[0],indexB[0],t1);if(s1<target-tolerance){output.state=exports.b2TOIOutputState.e_failed;output.t=t1;done=true;break;}if(s1<=target+tolerance){output.state=exports.b2TOIOutputState.e_touching;output.t=t1;done=true;break;}var rootIterCount=0;var a1=t1;var a2=t2;for(;;){var t=0;if(rootIterCount&1){t=a1+(target-s1)*(a2-a1)/(s2-s1);}else {t=0.5*(a1+a2);}++rootIterCount;++exports.b2_toiRootIters;var s=fcn.Evaluate(indexA[0],indexB[0],t);if(b2Abs(s-target)<tolerance){t2=t;break;}if(s>target){a1=t;s1=s;}else {a2=t;s2=s;}if(rootIterCount===50){break;}}exports.b2_toiMaxRootIters=b2Max(exports.b2_toiMaxRootIters,rootIterCount);++pushBackIter;if(pushBackIter===maxVertices){break;}}++iter;++exports.b2_toiIters;if(done){break;}if(iter===k_maxIterations){output.state=exports.b2TOIOutputState.e_failed;output.t=t1;break;}}exports.b2_toiMaxIters=b2Max(exports.b2_toiMaxIters,iter);var time=timer.GetMilliseconds();exports.b2_toiMaxTime=b2Max(exports.b2_toiMaxTime,time);exports.b2_toiTime+=time;}var b2CollideCircles_s_pA=new b2Vec2();var b2CollideCircles_s_pB=new b2Vec2();function b2CollideCircles(manifold,circleA,xfA,circleB,xfB){manifold.pointCount=0;var pA=b2Transform.MulXV(xfA,circleA.m_p,b2CollideCircles_s_pA);var pB=b2Transform.MulXV(xfB,circleB.m_p,b2CollideCircles_s_pB);var distSqr=b2Vec2.DistanceSquaredVV(pA,pB);var radius=circleA.m_radius+circleB.m_radius;if(distSqr>radius*radius){return;}manifold.type=exports.b2ManifoldType.e_circles;manifold.localPoint.Copy(circleA.m_p);manifold.localNormal.SetZero();manifold.pointCount=1;manifold.points[0].localPoint.Copy(circleB.m_p);manifold.points[0].id.key=0;}var b2CollidePolygonAndCircle_s_c=new b2Vec2();var b2CollidePolygonAndCircle_s_cLocal=new b2Vec2();var b2CollidePolygonAndCircle_s_faceCenter=new b2Vec2();function b2CollidePolygonAndCircle(manifold,polygonA,xfA,circleB,xfB){manifold.pointCount=0;var c=b2Transform.MulXV(xfB,circleB.m_p,b2CollidePolygonAndCircle_s_c);var cLocal=b2Transform.MulTXV(xfA,c,b2CollidePolygonAndCircle_s_cLocal);var normalIndex=0;var separation=-b2_maxFloat;var radius=polygonA.m_radius+circleB.m_radius;var vertexCount=polygonA.m_count;var vertices=polygonA.m_vertices;var normals=polygonA.m_normals;for(var i=0;i<vertexCount;++i){var s=b2Vec2.DotVV(normals[i],b2Vec2.SubVV(cLocal,vertices[i],b2Vec2.s_t0));if(s>radius){return;}if(s>separation){separation=s;normalIndex=i;}}var vertIndex1=normalIndex;var vertIndex2=(vertIndex1+1)%vertexCount;var v1=vertices[vertIndex1];var v2=vertices[vertIndex2];if(separation<b2_epsilon){manifold.pointCount=1;manifold.type=exports.b2ManifoldType.e_faceA;manifold.localNormal.Copy(normals[normalIndex]);b2Vec2.MidVV(v1,v2,manifold.localPoint);manifold.points[0].localPoint.Copy(circleB.m_p);manifold.points[0].id.key=0;return;}var u1=b2Vec2.DotVV(b2Vec2.SubVV(cLocal,v1,b2Vec2.s_t0),b2Vec2.SubVV(v2,v1,b2Vec2.s_t1));var u2=b2Vec2.DotVV(b2Vec2.SubVV(cLocal,v2,b2Vec2.s_t0),b2Vec2.SubVV(v1,v2,b2Vec2.s_t1));if(u1<=0){if(b2Vec2.DistanceSquaredVV(cLocal,v1)>radius*radius){return;}manifold.pointCount=1;manifold.type=exports.b2ManifoldType.e_faceA;b2Vec2.SubVV(cLocal,v1,manifold.localNormal).SelfNormalize();manifold.localPoint.Copy(v1);manifold.points[0].localPoint.Copy(circleB.m_p);manifold.points[0].id.key=0;}else if(u2<=0){if(b2Vec2.DistanceSquaredVV(cLocal,v2)>radius*radius){return;}manifold.pointCount=1;manifold.type=exports.b2ManifoldType.e_faceA;b2Vec2.SubVV(cLocal,v2,manifold.localNormal).SelfNormalize();manifold.localPoint.Copy(v2);manifold.points[0].localPoint.Copy(circleB.m_p);manifold.points[0].id.key=0;}else {var faceCenter=b2Vec2.MidVV(v1,v2,b2CollidePolygonAndCircle_s_faceCenter);var _separation5=b2Vec2.DotVV(b2Vec2.SubVV(cLocal,faceCenter,b2Vec2.s_t1),normals[vertIndex1]);if(_separation5>radius){return;}manifold.pointCount=1;manifold.type=exports.b2ManifoldType.e_faceA;manifold.localNormal.Copy(normals[vertIndex1]).SelfNormalize();manifold.localPoint.Copy(faceCenter);manifold.points[0].localPoint.Copy(circleB.m_p);manifold.points[0].id.key=0;}}var b2EdgeSeparation_s_normal1World=new b2Vec2();var b2EdgeSeparation_s_normal1=new b2Vec2();var b2EdgeSeparation_s_v1=new b2Vec2();var b2EdgeSeparation_s_v2=new b2Vec2();function b2EdgeSeparation(poly1,xf1,edge1,poly2,xf2){var vertices1=poly1.m_vertices;var normals1=poly1.m_normals;var count2=poly2.m_count;var vertices2=poly2.m_vertices;var normal1World=b2Rot.MulRV(xf1.q,normals1[edge1],b2EdgeSeparation_s_normal1World);var normal1=b2Rot.MulTRV(xf2.q,normal1World,b2EdgeSeparation_s_normal1);var index=0;var minDot=b2_maxFloat;for(var i=0;i<count2;++i){var dot=b2Vec2.DotVV(vertices2[i],normal1);if(dot<minDot){minDot=dot;index=i;}}var v1=b2Transform.MulXV(xf1,vertices1[edge1],b2EdgeSeparation_s_v1);var v2=b2Transform.MulXV(xf2,vertices2[index],b2EdgeSeparation_s_v2);var separation=b2Vec2.DotVV(b2Vec2.SubVV(v2,v1,b2Vec2.s_t0),normal1World);return separation;}var b2FindMaxSeparation_s_d=new b2Vec2();var b2FindMaxSeparation_s_dLocal1=new b2Vec2();function b2FindMaxSeparation(edgeIndex,poly1,xf1,poly2,xf2){var count1=poly1.m_count;var normals1=poly1.m_normals;var d=b2Vec2.SubVV(b2Transform.MulXV(xf2,poly2.m_centroid,b2Vec2.s_t0),b2Transform.MulXV(xf1,poly1.m_centroid,b2Vec2.s_t1),b2FindMaxSeparation_s_d);var dLocal1=b2Rot.MulTRV(xf1.q,d,b2FindMaxSeparation_s_dLocal1);var edge=0;var maxDot=-b2_maxFloat;for(var i=0;i<count1;++i){var dot=b2Vec2.DotVV(normals1[i],dLocal1);if(dot>maxDot){maxDot=dot;edge=i;}}var s=b2EdgeSeparation(poly1,xf1,edge,poly2,xf2);var prevEdge=(edge+count1-1)%count1;var sPrev=b2EdgeSeparation(poly1,xf1,prevEdge,poly2,xf2);var nextEdge=(edge+1)%count1;var sNext=b2EdgeSeparation(poly1,xf1,nextEdge,poly2,xf2);var bestEdge=0;var bestSeparation=0;var increment=0;if(sPrev>s&&sPrev>sNext){increment=-1;bestEdge=prevEdge;bestSeparation=sPrev;}else if(sNext>s){increment=1;bestEdge=nextEdge;bestSeparation=sNext;}else {edgeIndex[0]=edge;return s;}while(true){if(increment===-1){edge=(bestEdge+count1-1)%count1;}else {edge=(bestEdge+1)%count1;}s=b2EdgeSeparation(poly1,xf1,edge,poly2,xf2);if(s>bestSeparation){bestEdge=edge;bestSeparation=s;}else {break;}}edgeIndex[0]=bestEdge;return bestSeparation;}var b2FindIncidentEdge_s_normal1=new b2Vec2();function b2FindIncidentEdge(c,poly1,xf1,edge1,poly2,xf2){var normals1=poly1.m_normals;var count2=poly2.m_count;var vertices2=poly2.m_vertices;var normals2=poly2.m_normals;var normal1=b2Rot.MulTRV(xf2.q,b2Rot.MulRV(xf1.q,normals1[edge1],b2Vec2.s_t0),b2FindIncidentEdge_s_normal1);var index=0;var minDot=b2_maxFloat;for(var i=0;i<count2;++i){var dot=b2Vec2.DotVV(normal1,normals2[i]);if(dot<minDot){minDot=dot;index=i;}}var i1=index;var i2=(i1+1)%count2;var c0=c[0];b2Transform.MulXV(xf2,vertices2[i1],c0.v);var cf0=c0.id.cf;cf0.indexA=edge1;cf0.indexB=i1;cf0.typeA=exports.b2ContactFeatureType.e_face;cf0.typeB=exports.b2ContactFeatureType.e_vertex;var c1=c[1];b2Transform.MulXV(xf2,vertices2[i2],c1.v);var cf1=c1.id.cf;cf1.indexA=edge1;cf1.indexB=i2;cf1.typeA=exports.b2ContactFeatureType.e_face;cf1.typeB=exports.b2ContactFeatureType.e_vertex;}var b2CollidePolygons_s_incidentEdge=b2ClipVertex.MakeArray(2);var b2CollidePolygons_s_clipPoints1=b2ClipVertex.MakeArray(2);var b2CollidePolygons_s_clipPoints2=b2ClipVertex.MakeArray(2);var b2CollidePolygons_s_edgeA=[0];var b2CollidePolygons_s_edgeB=[0];var b2CollidePolygons_s_localTangent=new b2Vec2();var b2CollidePolygons_s_localNormal=new b2Vec2();var b2CollidePolygons_s_planePoint=new b2Vec2();var b2CollidePolygons_s_normal=new b2Vec2();var b2CollidePolygons_s_tangent=new b2Vec2();var b2CollidePolygons_s_ntangent=new b2Vec2();var b2CollidePolygons_s_v11=new b2Vec2();var b2CollidePolygons_s_v12=new b2Vec2();function b2CollidePolygons(manifold,polyA,xfA,polyB,xfB){manifold.pointCount=0;var totalRadius=polyA.m_radius+polyB.m_radius;var edgeA=b2CollidePolygons_s_edgeA;edgeA[0]=0;var separationA=b2FindMaxSeparation(edgeA,polyA,xfA,polyB,xfB);if(separationA>totalRadius){return;}var edgeB=b2CollidePolygons_s_edgeB;edgeB[0]=0;var separationB=b2FindMaxSeparation(edgeB,polyB,xfB,polyA,xfA);if(separationB>totalRadius){return;}var poly1;var poly2;var xf1,xf2;var edge1=0;var flip=0;var k_relativeTol=0.98;var k_absoluteTol=0.001;if(separationB>k_relativeTol*separationA+k_absoluteTol){poly1=polyB;poly2=polyA;xf1=xfB;xf2=xfA;edge1=edgeB[0];manifold.type=exports.b2ManifoldType.e_faceB;flip=1;}else {poly1=polyA;poly2=polyB;xf1=xfA;xf2=xfB;edge1=edgeA[0];manifold.type=exports.b2ManifoldType.e_faceA;flip=0;}var incidentEdge=b2CollidePolygons_s_incidentEdge;b2FindIncidentEdge(incidentEdge,poly1,xf1,edge1,poly2,xf2);var count1=poly1.m_count;var vertices1=poly1.m_vertices;var iv1=edge1;var iv2=(edge1+1)%count1;var local_v11=vertices1[iv1];var local_v12=vertices1[iv2];var localTangent=b2Vec2.SubVV(local_v12,local_v11,b2CollidePolygons_s_localTangent);localTangent.Normalize();var localNormal=b2Vec2.CrossVOne(localTangent,b2CollidePolygons_s_localNormal);var planePoint=b2Vec2.MidVV(local_v11,local_v12,b2CollidePolygons_s_planePoint);var tangent=b2Rot.MulRV(xf1.q,localTangent,b2CollidePolygons_s_tangent);var normal=b2Vec2.CrossVOne(tangent,b2CollidePolygons_s_normal);var v11=b2Transform.MulXV(xf1,local_v11,b2CollidePolygons_s_v11);var v12=b2Transform.MulXV(xf1,local_v12,b2CollidePolygons_s_v12);var frontOffset=b2Vec2.DotVV(normal,v11);var sideOffset1=-b2Vec2.DotVV(tangent,v11)+totalRadius;var sideOffset2=b2Vec2.DotVV(tangent,v12)+totalRadius;var clipPoints1=b2CollidePolygons_s_clipPoints1;var clipPoints2=b2CollidePolygons_s_clipPoints2;var np;var ntangent=b2Vec2.NegV(tangent,b2CollidePolygons_s_ntangent);np=b2ClipSegmentToLine(clipPoints1,incidentEdge,ntangent,sideOffset1,iv1);if(np<2){return;}np=b2ClipSegmentToLine(clipPoints2,clipPoints1,tangent,sideOffset2,iv2);if(np<2){return;}manifold.localNormal.Copy(localNormal);manifold.localPoint.Copy(planePoint);var pointCount=0;for(var i=0;i<b2_maxManifoldPoints;++i){var cv=clipPoints2[i];var separation=b2Vec2.DotVV(normal,cv.v)-frontOffset;if(separation<=totalRadius){var cp=manifold.points[pointCount];b2Transform.MulTXV(xf2,cv.v,cp.localPoint);cp.id.Copy(cv.id);if(flip){var cf=cp.id.cf;cp.id.cf.indexA=cf.indexB;cp.id.cf.indexB=cf.indexA;cp.id.cf.typeA=cf.typeB;cp.id.cf.typeB=cf.typeA;}++pointCount;}}manifold.pointCount=pointCount;}var b2CollideEdgeAndCircle_s_Q=new b2Vec2();var b2CollideEdgeAndCircle_s_e=new b2Vec2();var b2CollideEdgeAndCircle_s_d=new b2Vec2();var b2CollideEdgeAndCircle_s_e1=new b2Vec2();var b2CollideEdgeAndCircle_s_e2=new b2Vec2();var b2CollideEdgeAndCircle_s_P=new b2Vec2();var b2CollideEdgeAndCircle_s_n=new b2Vec2();var b2CollideEdgeAndCircle_s_id=new b2ContactID();function b2CollideEdgeAndCircle(manifold,edgeA,xfA,circleB,xfB){manifold.pointCount=0;var Q=b2Transform.MulTXV(xfA,b2Transform.MulXV(xfB,circleB.m_p,b2Vec2.s_t0),b2CollideEdgeAndCircle_s_Q);var A=edgeA.m_vertex1;var B=edgeA.m_vertex2;var e=b2Vec2.SubVV(B,A,b2CollideEdgeAndCircle_s_e);var u=b2Vec2.DotVV(e,b2Vec2.SubVV(B,Q,b2Vec2.s_t0));var v=b2Vec2.DotVV(e,b2Vec2.SubVV(Q,A,b2Vec2.s_t0));var radius=edgeA.m_radius+circleB.m_radius;var id=b2CollideEdgeAndCircle_s_id;id.cf.indexB=0;id.cf.typeB=exports.b2ContactFeatureType.e_vertex;if(v<=0){var _P=A;var _d=b2Vec2.SubVV(Q,_P,b2CollideEdgeAndCircle_s_d);var _dd=b2Vec2.DotVV(_d,_d);if(_dd>radius*radius){return;}if(edgeA.m_hasVertex0){var A1=edgeA.m_vertex0;var B1=A;var e1=b2Vec2.SubVV(B1,A1,b2CollideEdgeAndCircle_s_e1);var u1=b2Vec2.DotVV(e1,b2Vec2.SubVV(B1,Q,b2Vec2.s_t0));if(u1>0){return;}}id.cf.indexA=0;id.cf.typeA=exports.b2ContactFeatureType.e_vertex;manifold.pointCount=1;manifold.type=exports.b2ManifoldType.e_circles;manifold.localNormal.SetZero();manifold.localPoint.Copy(_P);manifold.points[0].id.Copy(id);manifold.points[0].localPoint.Copy(circleB.m_p);return;}if(u<=0){var _P2=B;var _d2=b2Vec2.SubVV(Q,_P2,b2CollideEdgeAndCircle_s_d);var _dd2=b2Vec2.DotVV(_d2,_d2);if(_dd2>radius*radius){return;}if(edgeA.m_hasVertex3){var B2=edgeA.m_vertex3;var A2=B;var e2=b2Vec2.SubVV(B2,A2,b2CollideEdgeAndCircle_s_e2);var v2=b2Vec2.DotVV(e2,b2Vec2.SubVV(Q,A2,b2Vec2.s_t0));if(v2>0){return;}}id.cf.indexA=1;id.cf.typeA=exports.b2ContactFeatureType.e_vertex;manifold.pointCount=1;manifold.type=exports.b2ManifoldType.e_circles;manifold.localNormal.SetZero();manifold.localPoint.Copy(_P2);manifold.points[0].id.Copy(id);manifold.points[0].localPoint.Copy(circleB.m_p);return;}var den=b2Vec2.DotVV(e,e);var P=b2CollideEdgeAndCircle_s_P;P.x=1/den*(u*A.x+v*B.x);P.y=1/den*(u*A.y+v*B.y);var d=b2Vec2.SubVV(Q,P,b2CollideEdgeAndCircle_s_d);var dd=b2Vec2.DotVV(d,d);if(dd>radius*radius){return;}var n=b2CollideEdgeAndCircle_s_n.Set(-e.y,e.x);if(b2Vec2.DotVV(n,b2Vec2.SubVV(Q,A,b2Vec2.s_t0))<0){n.Set(-n.x,-n.y);}n.Normalize();id.cf.indexA=0;id.cf.typeA=exports.b2ContactFeatureType.e_face;manifold.pointCount=1;manifold.type=exports.b2ManifoldType.e_faceA;manifold.localNormal.Copy(n);manifold.localPoint.Copy(A);manifold.points[0].id.Copy(id);manifold.points[0].localPoint.Copy(circleB.m_p);}var b2EPAxisType;(function(b2EPAxisType){b2EPAxisType[b2EPAxisType["e_unknown"]=0]="e_unknown";b2EPAxisType[b2EPAxisType["e_edgeA"]=1]="e_edgeA";b2EPAxisType[b2EPAxisType["e_edgeB"]=2]="e_edgeB";})(b2EPAxisType||(b2EPAxisType={}));var b2EPAxis=function b2EPAxis(){this.type=b2EPAxisType.e_unknown;this.index=0;this.separation=0;};var b2TempPolygon=function b2TempPolygon(){this.vertices=[];this.normals=[];this.count=0;};var b2ReferenceFace=function b2ReferenceFace(){this.i1=0;this.i2=0;this.v1=new b2Vec2();this.v2=new b2Vec2();this.normal=new b2Vec2();this.sideNormal1=new b2Vec2();this.sideOffset1=0;this.sideNormal2=new b2Vec2();this.sideOffset2=0;};var b2EPColliderVertexType;(function(b2EPColliderVertexType){b2EPColliderVertexType[b2EPColliderVertexType["e_isolated"]=0]="e_isolated";b2EPColliderVertexType[b2EPColliderVertexType["e_concave"]=1]="e_concave";b2EPColliderVertexType[b2EPColliderVertexType["e_convex"]=2]="e_convex";})(b2EPColliderVertexType||(b2EPColliderVertexType={}));var b2EPCollider=function(){function b2EPCollider(){this.m_polygonB=new b2TempPolygon();this.m_xf=new b2Transform();this.m_centroidB=new b2Vec2();this.m_v0=new b2Vec2();this.m_v1=new b2Vec2();this.m_v2=new b2Vec2();this.m_v3=new b2Vec2();this.m_normal0=new b2Vec2();this.m_normal1=new b2Vec2();this.m_normal2=new b2Vec2();this.m_normal=new b2Vec2();this.m_type1=b2EPColliderVertexType.e_isolated;this.m_type2=b2EPColliderVertexType.e_isolated;this.m_lowerLimit=new b2Vec2();this.m_upperLimit=new b2Vec2();this.m_radius=0;this.m_front=false;}var _proto32=b2EPCollider.prototype;_proto32.Collide=function Collide(manifold,edgeA,xfA,polygonB,xfB){b2Transform.MulTXX(xfA,xfB,this.m_xf);b2Transform.MulXV(this.m_xf,polygonB.m_centroid,this.m_centroidB);this.m_v0.Copy(edgeA.m_vertex0);this.m_v1.Copy(edgeA.m_vertex1);this.m_v2.Copy(edgeA.m_vertex2);this.m_v3.Copy(edgeA.m_vertex3);var hasVertex0=edgeA.m_hasVertex0;var hasVertex3=edgeA.m_hasVertex3;var edge1=b2Vec2.SubVV(this.m_v2,this.m_v1,b2EPCollider.s_edge1);edge1.Normalize();this.m_normal1.Set(edge1.y,-edge1.x);var offset1=b2Vec2.DotVV(this.m_normal1,b2Vec2.SubVV(this.m_centroidB,this.m_v1,b2Vec2.s_t0));var offset0=0;var offset2=0;var convex1=false;var convex2=false;if(hasVertex0){var edge0=b2Vec2.SubVV(this.m_v1,this.m_v0,b2EPCollider.s_edge0);edge0.Normalize();this.m_normal0.Set(edge0.y,-edge0.x);convex1=b2Vec2.CrossVV(edge0,edge1)>=0;offset0=b2Vec2.DotVV(this.m_normal0,b2Vec2.SubVV(this.m_centroidB,this.m_v0,b2Vec2.s_t0));}if(hasVertex3){var edge2=b2Vec2.SubVV(this.m_v3,this.m_v2,b2EPCollider.s_edge2);edge2.Normalize();this.m_normal2.Set(edge2.y,-edge2.x);convex2=b2Vec2.CrossVV(edge1,edge2)>0;offset2=b2Vec2.DotVV(this.m_normal2,b2Vec2.SubVV(this.m_centroidB,this.m_v2,b2Vec2.s_t0));}if(hasVertex0&&hasVertex3){if(convex1&&convex2){this.m_front=offset0>=0||offset1>=0||offset2>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal0);this.m_upperLimit.Copy(this.m_normal2);}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();this.m_upperLimit.Copy(this.m_normal1).SelfNeg();}}else if(convex1){this.m_front=offset0>=0||offset1>=0&&offset2>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal0);this.m_upperLimit.Copy(this.m_normal1);}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();this.m_upperLimit.Copy(this.m_normal1).SelfNeg();}}else if(convex2){this.m_front=offset2>=0||offset0>=0&&offset1>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal1);this.m_upperLimit.Copy(this.m_normal2);}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();this.m_upperLimit.Copy(this.m_normal0).SelfNeg();}}else {this.m_front=offset0>=0&&offset1>=0&&offset2>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal1);this.m_upperLimit.Copy(this.m_normal1);}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();this.m_upperLimit.Copy(this.m_normal0).SelfNeg();}}}else if(hasVertex0){if(convex1){this.m_front=offset0>=0||offset1>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal0);this.m_upperLimit.Copy(this.m_normal1).SelfNeg();}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal1);this.m_upperLimit.Copy(this.m_normal1).SelfNeg();}}else {this.m_front=offset0>=0&&offset1>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal1);this.m_upperLimit.Copy(this.m_normal1).SelfNeg();}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal1);this.m_upperLimit.Copy(this.m_normal0).SelfNeg();}}}else if(hasVertex3){if(convex2){this.m_front=offset1>=0||offset2>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();this.m_upperLimit.Copy(this.m_normal2);}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();this.m_upperLimit.Copy(this.m_normal1);}}else {this.m_front=offset1>=0&&offset2>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();this.m_upperLimit.Copy(this.m_normal1);}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();this.m_upperLimit.Copy(this.m_normal1);}}}else {this.m_front=offset1>=0;if(this.m_front){this.m_normal.Copy(this.m_normal1);this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();this.m_upperLimit.Copy(this.m_normal1).SelfNeg();}else {this.m_normal.Copy(this.m_normal1).SelfNeg();this.m_lowerLimit.Copy(this.m_normal1);this.m_upperLimit.Copy(this.m_normal1);}}this.m_polygonB.count=polygonB.m_count;for(var i=0;i<polygonB.m_count;++i){if(this.m_polygonB.vertices.length<=i){this.m_polygonB.vertices.push(new b2Vec2());}if(this.m_polygonB.normals.length<=i){this.m_polygonB.normals.push(new b2Vec2());}b2Transform.MulXV(this.m_xf,polygonB.m_vertices[i],this.m_polygonB.vertices[i]);b2Rot.MulRV(this.m_xf.q,polygonB.m_normals[i],this.m_polygonB.normals[i]);}this.m_radius=polygonB.m_radius+edgeA.m_radius;manifold.pointCount=0;var edgeAxis=this.ComputeEdgeSeparation(b2EPCollider.s_edgeAxis);if(edgeAxis.type===b2EPAxisType.e_unknown){return;}if(edgeAxis.separation>this.m_radius){return;}var polygonAxis=this.ComputePolygonSeparation(b2EPCollider.s_polygonAxis);if(polygonAxis.type!==b2EPAxisType.e_unknown&&polygonAxis.separation>this.m_radius){return;}var k_relativeTol=0.98;var k_absoluteTol=0.001;var primaryAxis;if(polygonAxis.type===b2EPAxisType.e_unknown){primaryAxis=edgeAxis;}else if(polygonAxis.separation>k_relativeTol*edgeAxis.separation+k_absoluteTol){primaryAxis=polygonAxis;}else {primaryAxis=edgeAxis;}var ie=b2EPCollider.s_ie;var rf=b2EPCollider.s_rf;if(primaryAxis.type===b2EPAxisType.e_edgeA){manifold.type=exports.b2ManifoldType.e_faceA;var bestIndex=0;var bestValue=b2Vec2.DotVV(this.m_normal,this.m_polygonB.normals[0]);for(var _i4=1;_i4<this.m_polygonB.count;++_i4){var value=b2Vec2.DotVV(this.m_normal,this.m_polygonB.normals[_i4]);if(value<bestValue){bestValue=value;bestIndex=_i4;}}var i1=bestIndex;var i2=(i1+1)%this.m_polygonB.count;var ie0=ie[0];ie0.v.Copy(this.m_polygonB.vertices[i1]);ie0.id.cf.indexA=0;ie0.id.cf.indexB=i1;ie0.id.cf.typeA=exports.b2ContactFeatureType.e_face;ie0.id.cf.typeB=exports.b2ContactFeatureType.e_vertex;var ie1=ie[1];ie1.v.Copy(this.m_polygonB.vertices[i2]);ie1.id.cf.indexA=0;ie1.id.cf.indexB=i2;ie1.id.cf.typeA=exports.b2ContactFeatureType.e_face;ie1.id.cf.typeB=exports.b2ContactFeatureType.e_vertex;if(this.m_front){rf.i1=0;rf.i2=1;rf.v1.Copy(this.m_v1);rf.v2.Copy(this.m_v2);rf.normal.Copy(this.m_normal1);}else {rf.i1=1;rf.i2=0;rf.v1.Copy(this.m_v2);rf.v2.Copy(this.m_v1);rf.normal.Copy(this.m_normal1).SelfNeg();}}else {manifold.type=exports.b2ManifoldType.e_faceB;var _ie=ie[0];_ie.v.Copy(this.m_v1);_ie.id.cf.indexA=0;_ie.id.cf.indexB=primaryAxis.index;_ie.id.cf.typeA=exports.b2ContactFeatureType.e_vertex;_ie.id.cf.typeB=exports.b2ContactFeatureType.e_face;var _ie2=ie[1];_ie2.v.Copy(this.m_v2);_ie2.id.cf.indexA=0;_ie2.id.cf.indexB=primaryAxis.index;_ie2.id.cf.typeA=exports.b2ContactFeatureType.e_vertex;_ie2.id.cf.typeB=exports.b2ContactFeatureType.e_face;rf.i1=primaryAxis.index;rf.i2=(rf.i1+1)%this.m_polygonB.count;rf.v1.Copy(this.m_polygonB.vertices[rf.i1]);rf.v2.Copy(this.m_polygonB.vertices[rf.i2]);rf.normal.Copy(this.m_polygonB.normals[rf.i1]);}rf.sideNormal1.Set(rf.normal.y,-rf.normal.x);rf.sideNormal2.Copy(rf.sideNormal1).SelfNeg();rf.sideOffset1=b2Vec2.DotVV(rf.sideNormal1,rf.v1);rf.sideOffset2=b2Vec2.DotVV(rf.sideNormal2,rf.v2);var clipPoints1=b2EPCollider.s_clipPoints1;var clipPoints2=b2EPCollider.s_clipPoints2;var np=0;np=b2ClipSegmentToLine(clipPoints1,ie,rf.sideNormal1,rf.sideOffset1,rf.i1);if(np<b2_maxManifoldPoints){return;}np=b2ClipSegmentToLine(clipPoints2,clipPoints1,rf.sideNormal2,rf.sideOffset2,rf.i2);if(np<b2_maxManifoldPoints){return;}if(primaryAxis.type===b2EPAxisType.e_edgeA){manifold.localNormal.Copy(rf.normal);manifold.localPoint.Copy(rf.v1);}else {manifold.localNormal.Copy(polygonB.m_normals[rf.i1]);manifold.localPoint.Copy(polygonB.m_vertices[rf.i1]);}var pointCount=0;for(var _i5=0;_i5<b2_maxManifoldPoints;++_i5){var separation=void 0;separation=b2Vec2.DotVV(rf.normal,b2Vec2.SubVV(clipPoints2[_i5].v,rf.v1,b2Vec2.s_t0));if(separation<=this.m_radius){var cp=manifold.points[pointCount];if(primaryAxis.type===b2EPAxisType.e_edgeA){b2Transform.MulTXV(this.m_xf,clipPoints2[_i5].v,cp.localPoint);cp.id.Copy(clipPoints2[_i5].id);}else {cp.localPoint.Copy(clipPoints2[_i5].v);cp.id.cf.typeA=clipPoints2[_i5].id.cf.typeB;cp.id.cf.typeB=clipPoints2[_i5].id.cf.typeA;cp.id.cf.indexA=clipPoints2[_i5].id.cf.indexB;cp.id.cf.indexB=clipPoints2[_i5].id.cf.indexA;}++pointCount;}}manifold.pointCount=pointCount;};_proto32.ComputeEdgeSeparation=function ComputeEdgeSeparation(out){var axis=out;axis.type=b2EPAxisType.e_edgeA;axis.index=this.m_front?0:1;axis.separation=b2_maxFloat;for(var i=0;i<this.m_polygonB.count;++i){var s=b2Vec2.DotVV(this.m_normal,b2Vec2.SubVV(this.m_polygonB.vertices[i],this.m_v1,b2Vec2.s_t0));if(s<axis.separation){axis.separation=s;}}return axis;};_proto32.ComputePolygonSeparation=function ComputePolygonSeparation(out){var axis=out;axis.type=b2EPAxisType.e_unknown;axis.index=-1;axis.separation=-b2_maxFloat;var perp=b2EPCollider.s_perp.Set(-this.m_normal.y,this.m_normal.x);for(var i=0;i<this.m_polygonB.count;++i){var n=b2Vec2.NegV(this.m_polygonB.normals[i],b2EPCollider.s_n);var s1=b2Vec2.DotVV(n,b2Vec2.SubVV(this.m_polygonB.vertices[i],this.m_v1,b2Vec2.s_t0));var s2=b2Vec2.DotVV(n,b2Vec2.SubVV(this.m_polygonB.vertices[i],this.m_v2,b2Vec2.s_t0));var s=b2Min(s1,s2);if(s>this.m_radius){axis.type=b2EPAxisType.e_edgeB;axis.index=i;axis.separation=s;return axis;}if(b2Vec2.DotVV(n,perp)>=0){if(b2Vec2.DotVV(b2Vec2.SubVV(n,this.m_upperLimit,b2Vec2.s_t0),this.m_normal)<-b2_angularSlop){continue;}}else {if(b2Vec2.DotVV(b2Vec2.SubVV(n,this.m_lowerLimit,b2Vec2.s_t0),this.m_normal)<-b2_angularSlop){continue;}}if(s>axis.separation){axis.type=b2EPAxisType.e_edgeB;axis.index=i;axis.separation=s;}}return axis;};return b2EPCollider;}();b2EPCollider.s_edge1=new b2Vec2();b2EPCollider.s_edge0=new b2Vec2();b2EPCollider.s_edge2=new b2Vec2();b2EPCollider.s_ie=b2ClipVertex.MakeArray(2);b2EPCollider.s_rf=new b2ReferenceFace();b2EPCollider.s_clipPoints1=b2ClipVertex.MakeArray(2);b2EPCollider.s_clipPoints2=b2ClipVertex.MakeArray(2);b2EPCollider.s_edgeAxis=new b2EPAxis();b2EPCollider.s_polygonAxis=new b2EPAxis();b2EPCollider.s_n=new b2Vec2();b2EPCollider.s_perp=new b2Vec2();var b2CollideEdgeAndPolygon_s_collider=new b2EPCollider();function b2CollideEdgeAndPolygon(manifold,edgeA,xfA,polygonB,xfB){var collider=b2CollideEdgeAndPolygon_s_collider;collider.Collide(manifold,edgeA,xfA,polygonB,xfB);}var b2MassData=function b2MassData(){this.mass=0;this.center=new b2Vec2(0,0);this.I=0;};(function(b2ShapeType){b2ShapeType[b2ShapeType["e_unknown"]=-1]="e_unknown";b2ShapeType[b2ShapeType["e_circleShape"]=0]="e_circleShape";b2ShapeType[b2ShapeType["e_edgeShape"]=1]="e_edgeShape";b2ShapeType[b2ShapeType["e_polygonShape"]=2]="e_polygonShape";b2ShapeType[b2ShapeType["e_chainShape"]=3]="e_chainShape";b2ShapeType[b2ShapeType["e_shapeTypeCount"]=4]="e_shapeTypeCount";})(exports.b2ShapeType||(exports.b2ShapeType={}));var b2Shape=function(){function b2Shape(type,radius){this.m_type=exports.b2ShapeType.e_unknown;this.m_radius=0;this.m_type=type;this.m_radius=radius;}var _proto33=b2Shape.prototype;_proto33.Copy=function Copy(other){this.m_radius=other.m_radius;return this;};_proto33.GetType=function GetType(){return this.m_type;};return b2Shape;}();var b2CircleShape=function(_b2Shape){_inheritsLoose(b2CircleShape,_b2Shape);function b2CircleShape(radius){var _this2;if(radius===void 0){radius=0;}_this2=_b2Shape.call(this,exports.b2ShapeType.e_circleShape,radius)||this;_this2.m_p=new b2Vec2();return _this2;}var _proto34=b2CircleShape.prototype;_proto34.Set=function Set(position,radius){if(radius===void 0){radius=this.m_radius;}this.m_p.Copy(position);this.m_radius=radius;return this;};_proto34.Clone=function Clone(){return new b2CircleShape().Copy(this);};_proto34.Copy=function Copy(other){_b2Shape.prototype.Copy.call(this,other);this.m_p.Copy(other.m_p);return this;};_proto34.GetChildCount=function GetChildCount(){return 1;};_proto34.TestPoint=function TestPoint(transform,p){var center=b2Transform.MulXV(transform,this.m_p,b2CircleShape.TestPoint_s_center);var d=b2Vec2.SubVV(p,center,b2CircleShape.TestPoint_s_d);return b2Vec2.DotVV(d,d)<=b2Sq(this.m_radius);};_proto34.ComputeDistance=function ComputeDistance(xf,p,normal,childIndex){var center=b2Transform.MulXV(xf,this.m_p,b2CircleShape.ComputeDistance_s_center);b2Vec2.SubVV(p,center,normal);return normal.Normalize()-this.m_radius;};_proto34.RayCast=function RayCast(output,input,transform,childIndex){var position=b2Transform.MulXV(transform,this.m_p,b2CircleShape.RayCast_s_position);var s=b2Vec2.SubVV(input.p1,position,b2CircleShape.RayCast_s_s);var b=b2Vec2.DotVV(s,s)-b2Sq(this.m_radius);var r=b2Vec2.SubVV(input.p2,input.p1,b2CircleShape.RayCast_s_r);var c=b2Vec2.DotVV(s,r);var rr=b2Vec2.DotVV(r,r);var sigma=c*c-rr*b;if(sigma<0||rr<b2_epsilon){return false;}var a=-(c+b2Sqrt(sigma));if(0<=a&&a<=input.maxFraction*rr){a/=rr;output.fraction=a;b2Vec2.AddVMulSV(s,a,r,output.normal).SelfNormalize();return true;}return false;};_proto34.ComputeAABB=function ComputeAABB(aabb,transform,childIndex){var p=b2Transform.MulXV(transform,this.m_p,b2CircleShape.ComputeAABB_s_p);aabb.lowerBound.Set(p.x-this.m_radius,p.y-this.m_radius);aabb.upperBound.Set(p.x+this.m_radius,p.y+this.m_radius);};_proto34.ComputeMass=function ComputeMass(massData,density){var radius_sq=b2Sq(this.m_radius);massData.mass=density*b2_pi*radius_sq;massData.center.Copy(this.m_p);massData.I=massData.mass*(0.5*radius_sq+b2Vec2.DotVV(this.m_p,this.m_p));};_proto34.SetupDistanceProxy=function SetupDistanceProxy(proxy,index){proxy.m_vertices=proxy.m_buffer;proxy.m_vertices[0].Copy(this.m_p);proxy.m_count=1;proxy.m_radius=this.m_radius;};_proto34.ComputeSubmergedArea=function ComputeSubmergedArea(normal,offset,xf,c){var p=b2Transform.MulXV(xf,this.m_p,new b2Vec2());var l=-(b2Vec2.DotVV(normal,p)-offset);if(l<-this.m_radius+b2_epsilon){return 0;}if(l>this.m_radius){c.Copy(p);return b2_pi*this.m_radius*this.m_radius;}var r2=this.m_radius*this.m_radius;var l2=l*l;var area=r2*(b2Asin(l/this.m_radius)+b2_pi/2)+l*b2Sqrt(r2-l2);var com=-2/3*b2Pow(r2-l2,1.5)/area;c.x=p.x+normal.x*com;c.y=p.y+normal.y*com;return area;};_proto34.Dump=function Dump(log){log("    const shape: b2CircleShape = new b2CircleShape();\n");log("    shape.m_radius = %.15f;\n",this.m_radius);log("    shape.m_p.Set(%.15f, %.15f);\n",this.m_p.x,this.m_p.y);};return b2CircleShape;}(b2Shape);b2CircleShape.TestPoint_s_center=new b2Vec2();b2CircleShape.TestPoint_s_d=new b2Vec2();b2CircleShape.ComputeDistance_s_center=new b2Vec2();b2CircleShape.RayCast_s_position=new b2Vec2();b2CircleShape.RayCast_s_s=new b2Vec2();b2CircleShape.RayCast_s_r=new b2Vec2();b2CircleShape.ComputeAABB_s_p=new b2Vec2();var b2PolygonShape=function(_b2Shape2){_inheritsLoose(b2PolygonShape,_b2Shape2);function b2PolygonShape(){var _this3;_this3=_b2Shape2.call(this,exports.b2ShapeType.e_polygonShape,b2_polygonRadius)||this;_this3.m_centroid=new b2Vec2(0,0);_this3.m_vertices=[];_this3.m_normals=[];_this3.m_count=0;return _this3;}var _proto35=b2PolygonShape.prototype;_proto35.Clone=function Clone(){return new b2PolygonShape().Copy(this);};_proto35.Copy=function Copy(other){_b2Shape2.prototype.Copy.call(this,other);this.m_centroid.Copy(other.m_centroid);this.m_count=other.m_count;this.m_vertices=b2Vec2.MakeArray(this.m_count);this.m_normals=b2Vec2.MakeArray(this.m_count);for(var i=0;i<this.m_count;++i){this.m_vertices[i].Copy(other.m_vertices[i]);this.m_normals[i].Copy(other.m_normals[i]);}return this;};_proto35.GetChildCount=function GetChildCount(){return 1;};_proto35.Set=function Set(){for(var _len5=arguments.length,args=new Array(_len5),_key6=0;_key6<_len5;_key6++){args[_key6]=arguments[_key6];}if(typeof args[0][0]==="number"){var vertices=args[0];if(vertices.length%2!==0){throw new Error();}return this._Set(function(index){return {x:vertices[index*2],y:vertices[index*2+1]};},vertices.length/2);}else {var _vertices=args[0];var count=args[1]||_vertices.length;return this._Set(function(index){return _vertices[index];},count);}};_proto35._Set=function _Set(vertices,count){if(count<3){return this.SetAsBox(1,1);}var n=count;var ps=[];for(var i=0;i<n;++i){var v=vertices(i);var unique=true;for(var j=0;j<ps.length;++j){if(b2Vec2.DistanceSquaredVV(v,ps[j])<0.5*b2_linearSlop*(0.5*b2_linearSlop)){unique=false;break;}}if(unique){ps.push(v);}}n=ps.length;if(n<3){return this.SetAsBox(1.0,1.0);}var i0=0;var x0=ps[0].x;for(var _i6=1;_i6<n;++_i6){var x=ps[_i6].x;if(x>x0||x===x0&&ps[_i6].y<ps[i0].y){i0=_i6;x0=x;}}var hull=[];var m=0;var ih=i0;for(;;){hull[m]=ih;var ie=0;for(var _j2=1;_j2<n;++_j2){if(ie===ih){ie=_j2;continue;}var r=b2Vec2.SubVV(ps[ie],ps[hull[m]],b2PolygonShape.Set_s_r);var _v2=b2Vec2.SubVV(ps[_j2],ps[hull[m]],b2PolygonShape.Set_s_v);var c=b2Vec2.CrossVV(r,_v2);if(c<0){ie=_j2;}if(c===0&&_v2.LengthSquared()>r.LengthSquared()){ie=_j2;}}++m;ih=ie;if(ie===i0){break;}}this.m_count=m;this.m_vertices=b2Vec2.MakeArray(this.m_count);this.m_normals=b2Vec2.MakeArray(this.m_count);for(var _i7=0;_i7<m;++_i7){this.m_vertices[_i7].Copy(ps[hull[_i7]]);}for(var _i8=0;_i8<m;++_i8){var vertexi1=this.m_vertices[_i8];var vertexi2=this.m_vertices[(_i8+1)%m];var edge=b2Vec2.SubVV(vertexi2,vertexi1,b2Vec2.s_t0);b2Vec2.CrossVOne(edge,this.m_normals[_i8]).SelfNormalize();}b2PolygonShape.ComputeCentroid(this.m_vertices,m,this.m_centroid);return this;};_proto35.SetAsBox=function SetAsBox(hx,hy,center,angle){if(angle===void 0){angle=0;}this.m_count=4;this.m_vertices=b2Vec2.MakeArray(this.m_count);this.m_normals=b2Vec2.MakeArray(this.m_count);this.m_vertices[0].Set(-hx,-hy);this.m_vertices[1].Set(hx,-hy);this.m_vertices[2].Set(hx,hy);this.m_vertices[3].Set(-hx,hy);this.m_normals[0].Set(0,-1);this.m_normals[1].Set(1,0);this.m_normals[2].Set(0,1);this.m_normals[3].Set(-1,0);this.m_centroid.SetZero();if(center){this.m_centroid.Copy(center);var xf=new b2Transform();xf.SetPosition(center);xf.SetRotationAngle(angle);for(var i=0;i<this.m_count;++i){b2Transform.MulXV(xf,this.m_vertices[i],this.m_vertices[i]);b2Rot.MulRV(xf.q,this.m_normals[i],this.m_normals[i]);}}return this;};_proto35.TestPoint=function TestPoint(xf,p){var pLocal=b2Transform.MulTXV(xf,p,b2PolygonShape.TestPoint_s_pLocal);for(var i=0;i<this.m_count;++i){var dot=b2Vec2.DotVV(this.m_normals[i],b2Vec2.SubVV(pLocal,this.m_vertices[i],b2Vec2.s_t0));if(dot>0){return false;}}return true;};_proto35.ComputeDistance=function ComputeDistance(xf,p,normal,childIndex){var pLocal=b2Transform.MulTXV(xf,p,b2PolygonShape.ComputeDistance_s_pLocal);var maxDistance=-b2_maxFloat;var normalForMaxDistance=b2PolygonShape.ComputeDistance_s_normalForMaxDistance.Copy(pLocal);for(var i=0;i<this.m_count;++i){var dot=b2Vec2.DotVV(this.m_normals[i],b2Vec2.SubVV(pLocal,this.m_vertices[i],b2Vec2.s_t0));if(dot>maxDistance){maxDistance=dot;normalForMaxDistance.Copy(this.m_normals[i]);}}if(maxDistance>0){var minDistance=b2PolygonShape.ComputeDistance_s_minDistance.Copy(normalForMaxDistance);var minDistance2=maxDistance*maxDistance;for(var _i9=0;_i9<this.m_count;++_i9){var distance=b2Vec2.SubVV(pLocal,this.m_vertices[_i9],b2PolygonShape.ComputeDistance_s_distance);var distance2=distance.LengthSquared();if(minDistance2>distance2){minDistance.Copy(distance);minDistance2=distance2;}}b2Rot.MulRV(xf.q,minDistance,normal);normal.Normalize();return Math.sqrt(minDistance2);}else {b2Rot.MulRV(xf.q,normalForMaxDistance,normal);return maxDistance;}};_proto35.RayCast=function RayCast(output,input,xf,childIndex){var p1=b2Transform.MulTXV(xf,input.p1,b2PolygonShape.RayCast_s_p1);var p2=b2Transform.MulTXV(xf,input.p2,b2PolygonShape.RayCast_s_p2);var d=b2Vec2.SubVV(p2,p1,b2PolygonShape.RayCast_s_d);var lower=0,upper=input.maxFraction;var index=-1;for(var i=0;i<this.m_count;++i){var numerator=b2Vec2.DotVV(this.m_normals[i],b2Vec2.SubVV(this.m_vertices[i],p1,b2Vec2.s_t0));var denominator=b2Vec2.DotVV(this.m_normals[i],d);if(denominator===0){if(numerator<0){return false;}}else {if(denominator<0&&numerator<lower*denominator){lower=numerator/denominator;index=i;}else if(denominator>0&&numerator<upper*denominator){upper=numerator/denominator;}}if(upper<lower){return false;}}if(index>=0){output.fraction=lower;b2Rot.MulRV(xf.q,this.m_normals[index],output.normal);return true;}return false;};_proto35.ComputeAABB=function ComputeAABB(aabb,xf,childIndex){var lower=b2Transform.MulXV(xf,this.m_vertices[0],aabb.lowerBound);var upper=aabb.upperBound.Copy(lower);for(var i=0;i<this.m_count;++i){var v=b2Transform.MulXV(xf,this.m_vertices[i],b2PolygonShape.ComputeAABB_s_v);b2Vec2.MinV(v,lower,lower);b2Vec2.MaxV(v,upper,upper);}var r=this.m_radius;lower.SelfSubXY(r,r);upper.SelfAddXY(r,r);};_proto35.ComputeMass=function ComputeMass(massData,density){var center=b2PolygonShape.ComputeMass_s_center.SetZero();var area=0;var I=0;var s=b2PolygonShape.ComputeMass_s_s.SetZero();for(var i=0;i<this.m_count;++i){s.SelfAdd(this.m_vertices[i]);}s.SelfMul(1/this.m_count);var k_inv3=1/3;for(var _i10=0;_i10<this.m_count;++_i10){var e1=b2Vec2.SubVV(this.m_vertices[_i10],s,b2PolygonShape.ComputeMass_s_e1);var e2=b2Vec2.SubVV(this.m_vertices[(_i10+1)%this.m_count],s,b2PolygonShape.ComputeMass_s_e2);var D=b2Vec2.CrossVV(e1,e2);var triangleArea=0.5*D;area+=triangleArea;center.SelfAdd(b2Vec2.MulSV(triangleArea*k_inv3,b2Vec2.AddVV(e1,e2,b2Vec2.s_t0),b2Vec2.s_t1));var ex1=e1.x;var ey1=e1.y;var ex2=e2.x;var ey2=e2.y;var intx2=ex1*ex1+ex2*ex1+ex2*ex2;var inty2=ey1*ey1+ey2*ey1+ey2*ey2;I+=0.25*k_inv3*D*(intx2+inty2);}massData.mass=density*area;center.SelfMul(1/area);b2Vec2.AddVV(center,s,massData.center);massData.I=density*I;massData.I+=massData.mass*(b2Vec2.DotVV(massData.center,massData.center)-b2Vec2.DotVV(center,center));};_proto35.Validate=function Validate(){for(var i=0;i<this.m_count;++i){var i1=i;var i2=(i+1)%this.m_count;var p=this.m_vertices[i1];var e=b2Vec2.SubVV(this.m_vertices[i2],p,b2PolygonShape.Validate_s_e);for(var j=0;j<this.m_count;++j){if(j===i1||j===i2){continue;}var v=b2Vec2.SubVV(this.m_vertices[j],p,b2PolygonShape.Validate_s_v);var c=b2Vec2.CrossVV(e,v);if(c<0){return false;}}}return true;};_proto35.SetupDistanceProxy=function SetupDistanceProxy(proxy,index){proxy.m_vertices=this.m_vertices;proxy.m_count=this.m_count;proxy.m_radius=this.m_radius;};_proto35.ComputeSubmergedArea=function ComputeSubmergedArea(normal,offset,xf,c){var normalL=b2Rot.MulTRV(xf.q,normal,b2PolygonShape.ComputeSubmergedArea_s_normalL);var offsetL=offset-b2Vec2.DotVV(normal,xf.p);var depths=[];var diveCount=0;var intoIndex=-1;var outoIndex=-1;var lastSubmerged=false;for(var _i11=0;_i11<this.m_count;++_i11){depths[_i11]=b2Vec2.DotVV(normalL,this.m_vertices[_i11])-offsetL;var isSubmerged=depths[_i11]<-b2_epsilon;if(_i11>0){if(isSubmerged){if(!lastSubmerged){intoIndex=_i11-1;diveCount++;}}else {if(lastSubmerged){outoIndex=_i11-1;diveCount++;}}}lastSubmerged=isSubmerged;}switch(diveCount){case 0:if(lastSubmerged){var md=b2PolygonShape.ComputeSubmergedArea_s_md;this.ComputeMass(md,1);b2Transform.MulXV(xf,md.center,c);return md.mass;}else {return 0;}case 1:if(intoIndex===-1){intoIndex=this.m_count-1;}else {outoIndex=this.m_count-1;}break;}var intoIndex2=(intoIndex+1)%this.m_count;var outoIndex2=(outoIndex+1)%this.m_count;var intoLamdda=(0-depths[intoIndex])/(depths[intoIndex2]-depths[intoIndex]);var outoLamdda=(0-depths[outoIndex])/(depths[outoIndex2]-depths[outoIndex]);var intoVec=b2PolygonShape.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[intoIndex].x*(1-intoLamdda)+this.m_vertices[intoIndex2].x*intoLamdda,this.m_vertices[intoIndex].y*(1-intoLamdda)+this.m_vertices[intoIndex2].y*intoLamdda);var outoVec=b2PolygonShape.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[outoIndex].x*(1-outoLamdda)+this.m_vertices[outoIndex2].x*outoLamdda,this.m_vertices[outoIndex].y*(1-outoLamdda)+this.m_vertices[outoIndex2].y*outoLamdda);var area=0;var center=b2PolygonShape.ComputeSubmergedArea_s_center.SetZero();var p2=this.m_vertices[intoIndex2];var p3;var i=intoIndex2;while(i!==outoIndex2){i=(i+1)%this.m_count;if(i===outoIndex2){p3=outoVec;}else {p3=this.m_vertices[i];}var triangleArea=0.5*((p2.x-intoVec.x)*(p3.y-intoVec.y)-(p2.y-intoVec.y)*(p3.x-intoVec.x));area+=triangleArea;center.x+=triangleArea*(intoVec.x+p2.x+p3.x)/3;center.y+=triangleArea*(intoVec.y+p2.y+p3.y)/3;p2=p3;}center.SelfMul(1/area);b2Transform.MulXV(xf,center,c);return area;};_proto35.Dump=function Dump(log){log("    const shape: b2PolygonShape = new b2PolygonShape();\n");log("    const vs: b2Vec2[] = [];\n");for(var i=0;i<this.m_count;++i){log("    vs[%d] = new b2Vec2(%.15f, %.15f);\n",i,this.m_vertices[i].x,this.m_vertices[i].y);}log("    shape.Set(vs, %d);\n",this.m_count);};b2PolygonShape.ComputeCentroid=function ComputeCentroid(vs,count,out){var c=out;c.SetZero();var area=0;var pRef=b2PolygonShape.ComputeCentroid_s_pRef.SetZero();var inv3=1/3;for(var i=0;i<count;++i){var p1=pRef;var p2=vs[i];var p3=vs[(i+1)%count];var e1=b2Vec2.SubVV(p2,p1,b2PolygonShape.ComputeCentroid_s_e1);var e2=b2Vec2.SubVV(p3,p1,b2PolygonShape.ComputeCentroid_s_e2);var D=b2Vec2.CrossVV(e1,e2);var triangleArea=0.5*D;area+=triangleArea;c.x+=triangleArea*inv3*(p1.x+p2.x+p3.x);c.y+=triangleArea*inv3*(p1.y+p2.y+p3.y);}c.SelfMul(1/area);return c;};return b2PolygonShape;}(b2Shape);b2PolygonShape.Set_s_r=new b2Vec2();b2PolygonShape.Set_s_v=new b2Vec2();b2PolygonShape.TestPoint_s_pLocal=new b2Vec2();b2PolygonShape.ComputeDistance_s_pLocal=new b2Vec2();b2PolygonShape.ComputeDistance_s_normalForMaxDistance=new b2Vec2();b2PolygonShape.ComputeDistance_s_minDistance=new b2Vec2();b2PolygonShape.ComputeDistance_s_distance=new b2Vec2();b2PolygonShape.RayCast_s_p1=new b2Vec2();b2PolygonShape.RayCast_s_p2=new b2Vec2();b2PolygonShape.RayCast_s_d=new b2Vec2();b2PolygonShape.ComputeAABB_s_v=new b2Vec2();b2PolygonShape.ComputeMass_s_center=new b2Vec2();b2PolygonShape.ComputeMass_s_s=new b2Vec2();b2PolygonShape.ComputeMass_s_e1=new b2Vec2();b2PolygonShape.ComputeMass_s_e2=new b2Vec2();b2PolygonShape.Validate_s_e=new b2Vec2();b2PolygonShape.Validate_s_v=new b2Vec2();b2PolygonShape.ComputeSubmergedArea_s_normalL=new b2Vec2();b2PolygonShape.ComputeSubmergedArea_s_md=new b2MassData();b2PolygonShape.ComputeSubmergedArea_s_intoVec=new b2Vec2();b2PolygonShape.ComputeSubmergedArea_s_outoVec=new b2Vec2();b2PolygonShape.ComputeSubmergedArea_s_center=new b2Vec2();b2PolygonShape.ComputeCentroid_s_pRef=new b2Vec2();b2PolygonShape.ComputeCentroid_s_e1=new b2Vec2();b2PolygonShape.ComputeCentroid_s_e2=new b2Vec2();var b2EdgeShape=function(_b2Shape3){_inheritsLoose(b2EdgeShape,_b2Shape3);function b2EdgeShape(){var _this4;_this4=_b2Shape3.call(this,exports.b2ShapeType.e_edgeShape,b2_polygonRadius)||this;_this4.m_vertex1=new b2Vec2();_this4.m_vertex2=new b2Vec2();_this4.m_vertex0=new b2Vec2();_this4.m_vertex3=new b2Vec2();_this4.m_hasVertex0=false;_this4.m_hasVertex3=false;return _this4;}var _proto36=b2EdgeShape.prototype;_proto36.Set=function Set(v1,v2){this.m_vertex1.Copy(v1);this.m_vertex2.Copy(v2);this.m_hasVertex0=false;this.m_hasVertex3=false;return this;};_proto36.Clone=function Clone(){return new b2EdgeShape().Copy(this);};_proto36.Copy=function Copy(other){_b2Shape3.prototype.Copy.call(this,other);this.m_vertex1.Copy(other.m_vertex1);this.m_vertex2.Copy(other.m_vertex2);this.m_vertex0.Copy(other.m_vertex0);this.m_vertex3.Copy(other.m_vertex3);this.m_hasVertex0=other.m_hasVertex0;this.m_hasVertex3=other.m_hasVertex3;return this;};_proto36.GetChildCount=function GetChildCount(){return 1;};_proto36.TestPoint=function TestPoint(xf,p){return false;};_proto36.ComputeDistance=function ComputeDistance(xf,p,normal,childIndex){var v1=b2Transform.MulXV(xf,this.m_vertex1,b2EdgeShape.ComputeDistance_s_v1);var v2=b2Transform.MulXV(xf,this.m_vertex2,b2EdgeShape.ComputeDistance_s_v2);var d=b2Vec2.SubVV(p,v1,b2EdgeShape.ComputeDistance_s_d);var s=b2Vec2.SubVV(v2,v1,b2EdgeShape.ComputeDistance_s_s);var ds=b2Vec2.DotVV(d,s);if(ds>0){var s2=b2Vec2.DotVV(s,s);if(ds>s2){b2Vec2.SubVV(p,v2,d);}else {d.SelfMulSub(ds/s2,s);}}normal.Copy(d);return normal.Normalize();};_proto36.RayCast=function RayCast(output,input,xf,childIndex){var p1=b2Transform.MulTXV(xf,input.p1,b2EdgeShape.RayCast_s_p1);var p2=b2Transform.MulTXV(xf,input.p2,b2EdgeShape.RayCast_s_p2);var d=b2Vec2.SubVV(p2,p1,b2EdgeShape.RayCast_s_d);var v1=this.m_vertex1;var v2=this.m_vertex2;var e=b2Vec2.SubVV(v2,v1,b2EdgeShape.RayCast_s_e);var normal=output.normal.Set(e.y,-e.x).SelfNormalize();var numerator=b2Vec2.DotVV(normal,b2Vec2.SubVV(v1,p1,b2Vec2.s_t0));var denominator=b2Vec2.DotVV(normal,d);if(denominator===0){return false;}var t=numerator/denominator;if(t<0||input.maxFraction<t){return false;}var q=b2Vec2.AddVMulSV(p1,t,d,b2EdgeShape.RayCast_s_q);var r=b2Vec2.SubVV(v2,v1,b2EdgeShape.RayCast_s_r);var rr=b2Vec2.DotVV(r,r);if(rr===0){return false;}var s=b2Vec2.DotVV(b2Vec2.SubVV(q,v1,b2Vec2.s_t0),r)/rr;if(s<0||1<s){return false;}output.fraction=t;b2Rot.MulRV(xf.q,output.normal,output.normal);if(numerator>0){output.normal.SelfNeg();}return true;};_proto36.ComputeAABB=function ComputeAABB(aabb,xf,childIndex){var v1=b2Transform.MulXV(xf,this.m_vertex1,b2EdgeShape.ComputeAABB_s_v1);var v2=b2Transform.MulXV(xf,this.m_vertex2,b2EdgeShape.ComputeAABB_s_v2);b2Vec2.MinV(v1,v2,aabb.lowerBound);b2Vec2.MaxV(v1,v2,aabb.upperBound);var r=this.m_radius;aabb.lowerBound.SelfSubXY(r,r);aabb.upperBound.SelfAddXY(r,r);};_proto36.ComputeMass=function ComputeMass(massData,density){massData.mass=0;b2Vec2.MidVV(this.m_vertex1,this.m_vertex2,massData.center);massData.I=0;};_proto36.SetupDistanceProxy=function SetupDistanceProxy(proxy,index){proxy.m_vertices=proxy.m_buffer;proxy.m_vertices[0].Copy(this.m_vertex1);proxy.m_vertices[1].Copy(this.m_vertex2);proxy.m_count=2;proxy.m_radius=this.m_radius;};_proto36.ComputeSubmergedArea=function ComputeSubmergedArea(normal,offset,xf,c){c.SetZero();return 0;};_proto36.Dump=function Dump(log){log("    const shape: b2EdgeShape = new b2EdgeShape();\n");log("    shape.m_radius = %.15f;\n",this.m_radius);log("    shape.m_vertex0.Set(%.15f, %.15f);\n",this.m_vertex0.x,this.m_vertex0.y);log("    shape.m_vertex1.Set(%.15f, %.15f);\n",this.m_vertex1.x,this.m_vertex1.y);log("    shape.m_vertex2.Set(%.15f, %.15f);\n",this.m_vertex2.x,this.m_vertex2.y);log("    shape.m_vertex3.Set(%.15f, %.15f);\n",this.m_vertex3.x,this.m_vertex3.y);log("    shape.m_hasVertex0 = %s;\n",this.m_hasVertex0);log("    shape.m_hasVertex3 = %s;\n",this.m_hasVertex3);};return b2EdgeShape;}(b2Shape);b2EdgeShape.ComputeDistance_s_v1=new b2Vec2();b2EdgeShape.ComputeDistance_s_v2=new b2Vec2();b2EdgeShape.ComputeDistance_s_d=new b2Vec2();b2EdgeShape.ComputeDistance_s_s=new b2Vec2();b2EdgeShape.RayCast_s_p1=new b2Vec2();b2EdgeShape.RayCast_s_p2=new b2Vec2();b2EdgeShape.RayCast_s_d=new b2Vec2();b2EdgeShape.RayCast_s_e=new b2Vec2();b2EdgeShape.RayCast_s_q=new b2Vec2();b2EdgeShape.RayCast_s_r=new b2Vec2();b2EdgeShape.ComputeAABB_s_v1=new b2Vec2();b2EdgeShape.ComputeAABB_s_v2=new b2Vec2();var b2ChainShape=function(_b2Shape4){_inheritsLoose(b2ChainShape,_b2Shape4);function b2ChainShape(){var _this5;_this5=_b2Shape4.call(this,exports.b2ShapeType.e_chainShape,b2_polygonRadius)||this;_this5.m_vertices=[];_this5.m_count=0;_this5.m_prevVertex=new b2Vec2();_this5.m_nextVertex=new b2Vec2();_this5.m_hasPrevVertex=false;_this5.m_hasNextVertex=false;return _this5;}var _proto37=b2ChainShape.prototype;_proto37.CreateLoop=function CreateLoop(){for(var _len6=arguments.length,args=new Array(_len6),_key7=0;_key7<_len6;_key7++){args[_key7]=arguments[_key7];}if(typeof args[0][0]==="number"){var vertices=args[0];if(vertices.length%2!==0){throw new Error();}return this._CreateLoop(function(index){return {x:vertices[index*2],y:vertices[index*2+1]};},vertices.length/2);}else {var _vertices2=args[0];var count=args[1]||_vertices2.length;return this._CreateLoop(function(index){return _vertices2[index];},count);}};_proto37._CreateLoop=function _CreateLoop(vertices,count){if(count<3){return this;}this.m_count=count+1;this.m_vertices=b2Vec2.MakeArray(this.m_count);for(var i=0;i<count;++i){this.m_vertices[i].Copy(vertices(i));}this.m_vertices[count].Copy(this.m_vertices[0]);this.m_prevVertex.Copy(this.m_vertices[this.m_count-2]);this.m_nextVertex.Copy(this.m_vertices[1]);this.m_hasPrevVertex=true;this.m_hasNextVertex=true;return this;};_proto37.CreateChain=function CreateChain(){for(var _len7=arguments.length,args=new Array(_len7),_key8=0;_key8<_len7;_key8++){args[_key8]=arguments[_key8];}if(typeof args[0][0]==="number"){var vertices=args[0];if(vertices.length%2!==0){throw new Error();}return this._CreateChain(function(index){return {x:vertices[index*2],y:vertices[index*2+1]};},vertices.length/2);}else {var _vertices3=args[0];var count=args[1]||_vertices3.length;return this._CreateChain(function(index){return _vertices3[index];},count);}};_proto37._CreateChain=function _CreateChain(vertices,count){this.m_count=count;this.m_vertices=b2Vec2.MakeArray(count);for(var i=0;i<count;++i){this.m_vertices[i].Copy(vertices(i));}this.m_hasPrevVertex=false;this.m_hasNextVertex=false;this.m_prevVertex.SetZero();this.m_nextVertex.SetZero();return this;};_proto37.SetPrevVertex=function SetPrevVertex(prevVertex){this.m_prevVertex.Copy(prevVertex);this.m_hasPrevVertex=true;return this;};_proto37.SetNextVertex=function SetNextVertex(nextVertex){this.m_nextVertex.Copy(nextVertex);this.m_hasNextVertex=true;return this;};_proto37.Clone=function Clone(){return new b2ChainShape().Copy(this);};_proto37.Copy=function Copy(other){_b2Shape4.prototype.Copy.call(this,other);this._CreateChain(function(index){return other.m_vertices[index];},other.m_count);this.m_prevVertex.Copy(other.m_prevVertex);this.m_nextVertex.Copy(other.m_nextVertex);this.m_hasPrevVertex=other.m_hasPrevVertex;this.m_hasNextVertex=other.m_hasNextVertex;return this;};_proto37.GetChildCount=function GetChildCount(){return this.m_count-1;};_proto37.GetChildEdge=function GetChildEdge(edge,index){edge.m_radius=this.m_radius;edge.m_vertex1.Copy(this.m_vertices[index]);edge.m_vertex2.Copy(this.m_vertices[index+1]);if(index>0){edge.m_vertex0.Copy(this.m_vertices[index-1]);edge.m_hasVertex0=true;}else {edge.m_vertex0.Copy(this.m_prevVertex);edge.m_hasVertex0=this.m_hasPrevVertex;}if(index<this.m_count-2){edge.m_vertex3.Copy(this.m_vertices[index+2]);edge.m_hasVertex3=true;}else {edge.m_vertex3.Copy(this.m_nextVertex);edge.m_hasVertex3=this.m_hasNextVertex;}};_proto37.TestPoint=function TestPoint(xf,p){return false;};_proto37.ComputeDistance=function ComputeDistance(xf,p,normal,childIndex){var edge=b2ChainShape.ComputeDistance_s_edgeShape;this.GetChildEdge(edge,childIndex);return edge.ComputeDistance(xf,p,normal,0);};_proto37.RayCast=function RayCast(output,input,xf,childIndex){var edgeShape=b2ChainShape.RayCast_s_edgeShape;edgeShape.m_vertex1.Copy(this.m_vertices[childIndex]);edgeShape.m_vertex2.Copy(this.m_vertices[(childIndex+1)%this.m_count]);return edgeShape.RayCast(output,input,xf,0);};_proto37.ComputeAABB=function ComputeAABB(aabb,xf,childIndex){var vertexi1=this.m_vertices[childIndex];var vertexi2=this.m_vertices[(childIndex+1)%this.m_count];var v1=b2Transform.MulXV(xf,vertexi1,b2ChainShape.ComputeAABB_s_v1);var v2=b2Transform.MulXV(xf,vertexi2,b2ChainShape.ComputeAABB_s_v2);b2Vec2.MinV(v1,v2,aabb.lowerBound);b2Vec2.MaxV(v1,v2,aabb.upperBound);};_proto37.ComputeMass=function ComputeMass(massData,density){massData.mass=0;massData.center.SetZero();massData.I=0;};_proto37.SetupDistanceProxy=function SetupDistanceProxy(proxy,index){proxy.m_vertices=proxy.m_buffer;proxy.m_vertices[0].Copy(this.m_vertices[index]);if(index+1<this.m_count){proxy.m_vertices[1].Copy(this.m_vertices[index+1]);}else {proxy.m_vertices[1].Copy(this.m_vertices[0]);}proxy.m_count=2;proxy.m_radius=this.m_radius;};_proto37.ComputeSubmergedArea=function ComputeSubmergedArea(normal,offset,xf,c){c.SetZero();return 0;};_proto37.Dump=function Dump(log){log("    const shape: b2ChainShape = new b2ChainShape();\n");log("    const vs: b2Vec2[] = [];\n");for(var i=0;i<this.m_count;++i){log("    vs[%d] = new bVec2(%.15f, %.15f);\n",i,this.m_vertices[i].x,this.m_vertices[i].y);}log("    shape.CreateChain(vs, %d);\n",this.m_count);log("    shape.m_prevVertex.Set(%.15f, %.15f);\n",this.m_prevVertex.x,this.m_prevVertex.y);log("    shape.m_nextVertex.Set(%.15f, %.15f);\n",this.m_nextVertex.x,this.m_nextVertex.y);log("    shape.m_hasPrevVertex = %s;\n",this.m_hasPrevVertex?"true":"false");log("    shape.m_hasNextVertex = %s;\n",this.m_hasNextVertex?"true":"false");};return b2ChainShape;}(b2Shape);b2ChainShape.ComputeDistance_s_edgeShape=new b2EdgeShape();b2ChainShape.RayCast_s_edgeShape=new b2EdgeShape();b2ChainShape.ComputeAABB_s_v1=new b2Vec2();b2ChainShape.ComputeAABB_s_v2=new b2Vec2();var b2Filter=function(){function b2Filter(){this.categoryBits=0x0001;this.maskBits=0xFFFF;this.groupIndex=0;}var _proto38=b2Filter.prototype;_proto38.Clone=function Clone(){return new b2Filter().Copy(this);};_proto38.Copy=function Copy(other){this.categoryBits=other.categoryBits;this.maskBits=other.maskBits;this.groupIndex=other.groupIndex||0;return this;};return b2Filter;}();b2Filter.DEFAULT=new b2Filter();var b2FixtureDef=function b2FixtureDef(){this.userData=null;this.friction=0.2;this.restitution=0;this.density=0;this.isSensor=false;this.filter=new b2Filter();};var b2FixtureProxy=function(){function b2FixtureProxy(fixture,childIndex){this.aabb=new b2AABB();this.childIndex=0;this.fixture=fixture;this.childIndex=childIndex;this.fixture.m_shape.ComputeAABB(this.aabb,this.fixture.m_body.GetTransform(),childIndex);this.treeNode=this.fixture.m_body.m_world.m_contactManager.m_broadPhase.CreateProxy(this.aabb,this);}var _proto39=b2FixtureProxy.prototype;_proto39.Reset=function Reset(){this.fixture.m_body.m_world.m_contactManager.m_broadPhase.DestroyProxy(this.treeNode);};_proto39.Touch=function Touch(){this.fixture.m_body.m_world.m_contactManager.m_broadPhase.TouchProxy(this.treeNode);};_proto39.Synchronize=function Synchronize(transform1,transform2,displacement){if(transform1===transform2){this.fixture.m_shape.ComputeAABB(this.aabb,transform1,this.childIndex);this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(this.treeNode,this.aabb,displacement);}else {var aabb1=b2FixtureProxy.Synchronize_s_aabb1;var aabb2=b2FixtureProxy.Synchronize_s_aabb2;this.fixture.m_shape.ComputeAABB(aabb1,transform1,this.childIndex);this.fixture.m_shape.ComputeAABB(aabb2,transform2,this.childIndex);this.aabb.Combine2(aabb1,aabb2);this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(this.treeNode,this.aabb,displacement);}};return b2FixtureProxy;}();b2FixtureProxy.Synchronize_s_aabb1=new b2AABB();b2FixtureProxy.Synchronize_s_aabb2=new b2AABB();var b2Fixture=function(){function b2Fixture(body,def){this.m_density=0;this.m_next=null;this.m_friction=0;this.m_restitution=0;this.m_proxies=[];this.m_filter=new b2Filter();this.m_isSensor=false;this.m_userData=null;this.m_body=body;this.m_shape=def.shape.Clone();this.m_userData=b2Maybe(def.userData,null);this.m_friction=b2Maybe(def.friction,0.2);this.m_restitution=b2Maybe(def.restitution,0);this.m_filter.Copy(b2Maybe(def.filter,b2Filter.DEFAULT));this.m_isSensor=b2Maybe(def.isSensor,false);this.m_density=b2Maybe(def.density,0);}var _proto40=b2Fixture.prototype;_proto40.Reset=function Reset(){};_proto40.GetType=function GetType(){return this.m_shape.GetType();};_proto40.GetShape=function GetShape(){return this.m_shape;};_proto40.SetSensor=function SetSensor(sensor){if(sensor!==this.m_isSensor){this.m_body.SetAwake(true);this.m_isSensor=sensor;}};_proto40.IsSensor=function IsSensor(){return this.m_isSensor;};_proto40.SetFilterData=function SetFilterData(filter){this.m_filter.Copy(filter);this.Refilter();};_proto40.GetFilterData=function GetFilterData(){return this.m_filter;};_proto40.Refilter=function Refilter(){var edge=this.m_body.GetContactList();while(edge){var contact=edge.contact;var fixtureA=contact.GetFixtureA();var fixtureB=contact.GetFixtureB();if(fixtureA===this||fixtureB===this){contact.FlagForFiltering();}edge=edge.next;}this.TouchProxies();};_proto40.GetBody=function GetBody(){return this.m_body;};_proto40.GetNext=function GetNext(){return this.m_next;};_proto40.GetUserData=function GetUserData(){return this.m_userData;};_proto40.SetUserData=function SetUserData(data){this.m_userData=data;};_proto40.TestPoint=function TestPoint(p){return this.m_shape.TestPoint(this.m_body.GetTransform(),p);};_proto40.ComputeDistance=function ComputeDistance(p,normal,childIndex){return this.m_shape.ComputeDistance(this.m_body.GetTransform(),p,normal,childIndex);};_proto40.RayCast=function RayCast(output,input,childIndex){return this.m_shape.RayCast(output,input,this.m_body.GetTransform(),childIndex);};_proto40.GetMassData=function GetMassData(massData){if(massData===void 0){massData=new b2MassData();}this.m_shape.ComputeMass(massData,this.m_density);return massData;};_proto40.SetDensity=function SetDensity(density){this.m_density=density;};_proto40.GetDensity=function GetDensity(){return this.m_density;};_proto40.GetFriction=function GetFriction(){return this.m_friction;};_proto40.SetFriction=function SetFriction(friction){this.m_friction=friction;};_proto40.GetRestitution=function GetRestitution(){return this.m_restitution;};_proto40.SetRestitution=function SetRestitution(restitution){this.m_restitution=restitution;};_proto40.GetAABB=function GetAABB(childIndex){return this.m_proxies[childIndex].aabb;};_proto40.Dump=function Dump(log,bodyIndex){log("    const fd: b2FixtureDef = new b2FixtureDef();\n");log("    fd.friction = %.15f;\n",this.m_friction);log("    fd.restitution = %.15f;\n",this.m_restitution);log("    fd.density = %.15f;\n",this.m_density);log("    fd.isSensor = %s;\n",this.m_isSensor?"true":"false");log("    fd.filter.categoryBits = %d;\n",this.m_filter.categoryBits);log("    fd.filter.maskBits = %d;\n",this.m_filter.maskBits);log("    fd.filter.groupIndex = %d;\n",this.m_filter.groupIndex);this.m_shape.Dump(log);log("\n");log("    fd.shape = shape;\n");log("\n");log("    bodies[%d].CreateFixture(fd);\n",bodyIndex);};_proto40.CreateProxies=function CreateProxies(){if(this.m_proxies.length!==0){throw new Error();}for(var i=0;i<this.m_shape.GetChildCount();++i){this.m_proxies[i]=new b2FixtureProxy(this,i);}};_proto40.DestroyProxies=function DestroyProxies(){for(var _iterator=_createForOfIteratorHelperLoose(this.m_proxies),_step;!(_step=_iterator()).done;){var proxy=_step.value;proxy.Reset();}this.m_proxies.length=0;};_proto40.TouchProxies=function TouchProxies(){for(var _iterator2=_createForOfIteratorHelperLoose(this.m_proxies),_step2;!(_step2=_iterator2()).done;){var proxy=_step2.value;proxy.Touch();}};_proto40.SynchronizeProxies=function SynchronizeProxies(transform1,transform2,displacement){for(var _iterator3=_createForOfIteratorHelperLoose(this.m_proxies),_step3;!(_step3=_iterator3()).done;){var proxy=_step3.value;proxy.Synchronize(transform1,transform2,displacement);}};_createClass(b2Fixture,[{key:"m_proxyCount",get:function get(){return this.m_proxies.length;}}]);return b2Fixture;}();(function(b2BodyType){b2BodyType[b2BodyType["b2_unknown"]=-1]="b2_unknown";b2BodyType[b2BodyType["b2_staticBody"]=0]="b2_staticBody";b2BodyType[b2BodyType["b2_kinematicBody"]=1]="b2_kinematicBody";b2BodyType[b2BodyType["b2_dynamicBody"]=2]="b2_dynamicBody";})(exports.b2BodyType||(exports.b2BodyType={}));var b2BodyDef=function b2BodyDef(){this.type=exports.b2BodyType.b2_staticBody;this.position=new b2Vec2(0,0);this.angle=0;this.linearVelocity=new b2Vec2(0,0);this.angularVelocity=0;this.linearDamping=0;this.angularDamping=0;this.allowSleep=true;this.awake=true;this.fixedRotation=false;this.bullet=false;this.active=true;this.userData=null;this.gravityScale=1;};var b2Body=function(){function b2Body(bd,world){this.m_type=exports.b2BodyType.b2_staticBody;this.m_islandFlag=false;this.m_awakeFlag=false;this.m_autoSleepFlag=false;this.m_bulletFlag=false;this.m_fixedRotationFlag=false;this.m_activeFlag=false;this.m_toiFlag=false;this.m_islandIndex=0;this.m_xf=new b2Transform();this.m_xf0=new b2Transform();this.m_sweep=new b2Sweep();this.m_linearVelocity=new b2Vec2();this.m_angularVelocity=0;this.m_force=new b2Vec2();this.m_torque=0;this.m_prev=null;this.m_next=null;this.m_fixtureList=null;this.m_fixtureCount=0;this.m_jointList=null;this.m_contactList=null;this.m_mass=1;this.m_invMass=1;this.m_I=0;this.m_invI=0;this.m_linearDamping=0;this.m_angularDamping=0;this.m_gravityScale=1;this.m_sleepTime=0;this.m_userData=null;this.m_controllerList=null;this.m_controllerCount=0;this.m_bulletFlag=b2Maybe(bd.bullet,false);this.m_fixedRotationFlag=b2Maybe(bd.fixedRotation,false);this.m_autoSleepFlag=b2Maybe(bd.allowSleep,true);this.m_awakeFlag=b2Maybe(bd.awake,true);this.m_activeFlag=b2Maybe(bd.active,true);this.m_world=world;this.m_xf.p.Copy(b2Maybe(bd.position,b2Vec2.ZERO));this.m_xf.q.SetAngle(b2Maybe(bd.angle,0));this.m_xf0.Copy(this.m_xf);this.m_sweep.localCenter.SetZero();this.m_sweep.c0.Copy(this.m_xf.p);this.m_sweep.c.Copy(this.m_xf.p);this.m_sweep.a0=this.m_sweep.a=this.m_xf.q.GetAngle();this.m_sweep.alpha0=0;this.m_linearVelocity.Copy(b2Maybe(bd.linearVelocity,b2Vec2.ZERO));this.m_angularVelocity=b2Maybe(bd.angularVelocity,0);this.m_linearDamping=b2Maybe(bd.linearDamping,0);this.m_angularDamping=b2Maybe(bd.angularDamping,0);this.m_gravityScale=b2Maybe(bd.gravityScale,1);this.m_force.SetZero();this.m_torque=0;this.m_sleepTime=0;this.m_type=b2Maybe(bd.type,exports.b2BodyType.b2_staticBody);if(bd.type===exports.b2BodyType.b2_dynamicBody){this.m_mass=1;this.m_invMass=1;}else {this.m_mass=0;this.m_invMass=0;}this.m_I=0;this.m_invI=0;this.m_userData=bd.userData;this.m_fixtureList=null;this.m_fixtureCount=0;this.m_controllerList=null;this.m_controllerCount=0;}var _proto41=b2Body.prototype;_proto41.CreateFixture=function CreateFixture(a,b){if(b===void 0){b=0;}if(a instanceof b2Shape){return this.CreateFixtureShapeDensity(a,b);}else {return this.CreateFixtureDef(a);}};_proto41.CreateFixtureDef=function CreateFixtureDef(def){if(this.m_world.IsLocked()){throw new Error();}var fixture=new b2Fixture(this,def);if(this.m_activeFlag){fixture.CreateProxies();}fixture.m_next=this.m_fixtureList;this.m_fixtureList=fixture;++this.m_fixtureCount;if(fixture.m_density>0){this.ResetMassData();}this.m_world.m_newFixture=true;return fixture;};_proto41.CreateFixtureShapeDensity=function CreateFixtureShapeDensity(shape,density){if(density===void 0){density=0;}var def=b2Body.CreateFixtureShapeDensity_s_def;def.shape=shape;def.density=density;return this.CreateFixtureDef(def);};_proto41.DestroyFixture=function DestroyFixture(fixture){if(this.m_world.IsLocked()){throw new Error();}var node=this.m_fixtureList;var ppF=null;while(node!==null){if(node===fixture){if(ppF){ppF.m_next=fixture.m_next;}else {this.m_fixtureList=fixture.m_next;}break;}ppF=node;node=node.m_next;}var edge=this.m_contactList;while(edge){var c=edge.contact;edge=edge.next;var fixtureA=c.GetFixtureA();var fixtureB=c.GetFixtureB();if(fixture===fixtureA||fixture===fixtureB){this.m_world.m_contactManager.Destroy(c);}}if(this.m_activeFlag){fixture.DestroyProxies();}fixture.m_next=null;fixture.Reset();--this.m_fixtureCount;this.ResetMassData();};_proto41.SetTransformVec=function SetTransformVec(position,angle){this.SetTransformXY(position.x,position.y,angle);};_proto41.SetTransformXY=function SetTransformXY(x,y,angle){if(this.m_world.IsLocked()){throw new Error();}this.m_xf.q.SetAngle(angle);this.m_xf.p.Set(x,y);this.m_xf0.Copy(this.m_xf);b2Transform.MulXV(this.m_xf,this.m_sweep.localCenter,this.m_sweep.c);this.m_sweep.a=angle;this.m_sweep.c0.Copy(this.m_sweep.c);this.m_sweep.a0=angle;for(var f=this.m_fixtureList;f;f=f.m_next){f.SynchronizeProxies(this.m_xf,this.m_xf,b2Vec2.ZERO);}this.m_world.m_contactManager.FindNewContacts();};_proto41.SetTransform=function SetTransform(xf){this.SetTransformVec(xf.p,xf.GetAngle());};_proto41.GetTransform=function GetTransform(){return this.m_xf;};_proto41.GetPosition=function GetPosition(){return this.m_xf.p;};_proto41.SetPosition=function SetPosition(position){this.SetTransformVec(position,this.GetAngle());};_proto41.SetPositionXY=function SetPositionXY(x,y){this.SetTransformXY(x,y,this.GetAngle());};_proto41.GetAngle=function GetAngle(){return this.m_sweep.a;};_proto41.SetAngle=function SetAngle(angle){this.SetTransformVec(this.GetPosition(),angle);};_proto41.GetWorldCenter=function GetWorldCenter(){return this.m_sweep.c;};_proto41.GetLocalCenter=function GetLocalCenter(){return this.m_sweep.localCenter;};_proto41.SetLinearVelocity=function SetLinearVelocity(v){if(this.m_type===exports.b2BodyType.b2_staticBody){return;}if(b2Vec2.DotVV(v,v)>0){this.SetAwake(true);}this.m_linearVelocity.Copy(v);};_proto41.GetLinearVelocity=function GetLinearVelocity(){return this.m_linearVelocity;};_proto41.SetAngularVelocity=function SetAngularVelocity(w){if(this.m_type===exports.b2BodyType.b2_staticBody){return;}if(w*w>0){this.SetAwake(true);}this.m_angularVelocity=w;};_proto41.GetAngularVelocity=function GetAngularVelocity(){return this.m_angularVelocity;};_proto41.GetDefinition=function GetDefinition(bd){bd.type=this.GetType();bd.allowSleep=this.m_autoSleepFlag;bd.angle=this.GetAngle();bd.angularDamping=this.m_angularDamping;bd.gravityScale=this.m_gravityScale;bd.angularVelocity=this.m_angularVelocity;bd.fixedRotation=this.m_fixedRotationFlag;bd.bullet=this.m_bulletFlag;bd.awake=this.m_awakeFlag;bd.linearDamping=this.m_linearDamping;bd.linearVelocity.Copy(this.GetLinearVelocity());bd.position.Copy(this.GetPosition());bd.userData=this.GetUserData();return bd;};_proto41.ApplyForce=function ApplyForce(force,point,wake){if(wake===void 0){wake=true;}if(this.m_type!==exports.b2BodyType.b2_dynamicBody){return;}if(wake&&!this.m_awakeFlag){this.SetAwake(true);}if(this.m_awakeFlag){this.m_force.x+=force.x;this.m_force.y+=force.y;this.m_torque+=(point.x-this.m_sweep.c.x)*force.y-(point.y-this.m_sweep.c.y)*force.x;}};_proto41.ApplyForceToCenter=function ApplyForceToCenter(force,wake){if(wake===void 0){wake=true;}if(this.m_type!==exports.b2BodyType.b2_dynamicBody){return;}if(wake&&!this.m_awakeFlag){this.SetAwake(true);}if(this.m_awakeFlag){this.m_force.x+=force.x;this.m_force.y+=force.y;}};_proto41.ApplyTorque=function ApplyTorque(torque,wake){if(wake===void 0){wake=true;}if(this.m_type!==exports.b2BodyType.b2_dynamicBody){return;}if(wake&&!this.m_awakeFlag){this.SetAwake(true);}if(this.m_awakeFlag){this.m_torque+=torque;}};_proto41.ApplyLinearImpulse=function ApplyLinearImpulse(impulse,point,wake){if(wake===void 0){wake=true;}if(this.m_type!==exports.b2BodyType.b2_dynamicBody){return;}if(wake&&!this.m_awakeFlag){this.SetAwake(true);}if(this.m_awakeFlag){this.m_linearVelocity.x+=this.m_invMass*impulse.x;this.m_linearVelocity.y+=this.m_invMass*impulse.y;this.m_angularVelocity+=this.m_invI*((point.x-this.m_sweep.c.x)*impulse.y-(point.y-this.m_sweep.c.y)*impulse.x);}};_proto41.ApplyLinearImpulseToCenter=function ApplyLinearImpulseToCenter(impulse,wake){if(wake===void 0){wake=true;}if(this.m_type!==exports.b2BodyType.b2_dynamicBody){return;}if(wake&&!this.m_awakeFlag){this.SetAwake(true);}if(this.m_awakeFlag){this.m_linearVelocity.x+=this.m_invMass*impulse.x;this.m_linearVelocity.y+=this.m_invMass*impulse.y;}};_proto41.ApplyAngularImpulse=function ApplyAngularImpulse(impulse,wake){if(wake===void 0){wake=true;}if(this.m_type!==exports.b2BodyType.b2_dynamicBody){return;}if(wake&&!this.m_awakeFlag){this.SetAwake(true);}if(this.m_awakeFlag){this.m_angularVelocity+=this.m_invI*impulse;}};_proto41.GetMass=function GetMass(){return this.m_mass;};_proto41.GetInertia=function GetInertia(){return this.m_I+this.m_mass*b2Vec2.DotVV(this.m_sweep.localCenter,this.m_sweep.localCenter);};_proto41.GetMassData=function GetMassData(data){data.mass=this.m_mass;data.I=this.m_I+this.m_mass*b2Vec2.DotVV(this.m_sweep.localCenter,this.m_sweep.localCenter);data.center.Copy(this.m_sweep.localCenter);return data;};_proto41.SetMassData=function SetMassData(massData){if(this.m_world.IsLocked()){throw new Error();}if(this.m_type!==exports.b2BodyType.b2_dynamicBody){return;}this.m_invMass=0;this.m_I=0;this.m_invI=0;this.m_mass=massData.mass;if(this.m_mass<=0){this.m_mass=1;}this.m_invMass=1/this.m_mass;if(massData.I>0&&!this.m_fixedRotationFlag){this.m_I=massData.I-this.m_mass*b2Vec2.DotVV(massData.center,massData.center);this.m_invI=1/this.m_I;}var oldCenter=b2Body.SetMassData_s_oldCenter.Copy(this.m_sweep.c);this.m_sweep.localCenter.Copy(massData.center);b2Transform.MulXV(this.m_xf,this.m_sweep.localCenter,this.m_sweep.c);this.m_sweep.c0.Copy(this.m_sweep.c);b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,b2Vec2.SubVV(this.m_sweep.c,oldCenter,b2Vec2.s_t0),this.m_linearVelocity);};_proto41.ResetMassData=function ResetMassData(){this.m_mass=0;this.m_invMass=0;this.m_I=0;this.m_invI=0;this.m_sweep.localCenter.SetZero();if(this.m_type===exports.b2BodyType.b2_staticBody||this.m_type===exports.b2BodyType.b2_kinematicBody){this.m_sweep.c0.Copy(this.m_xf.p);this.m_sweep.c.Copy(this.m_xf.p);this.m_sweep.a0=this.m_sweep.a;return;}var localCenter=b2Body.ResetMassData_s_localCenter.SetZero();for(var f=this.m_fixtureList;f;f=f.m_next){if(f.m_density===0){continue;}var massData=f.GetMassData(b2Body.ResetMassData_s_massData);this.m_mass+=massData.mass;localCenter.x+=massData.center.x*massData.mass;localCenter.y+=massData.center.y*massData.mass;this.m_I+=massData.I;}if(this.m_mass>0){this.m_invMass=1/this.m_mass;localCenter.x*=this.m_invMass;localCenter.y*=this.m_invMass;}else {this.m_mass=1;this.m_invMass=1;}if(this.m_I>0&&!this.m_fixedRotationFlag){this.m_I-=this.m_mass*b2Vec2.DotVV(localCenter,localCenter);this.m_invI=1/this.m_I;}else {this.m_I=0;this.m_invI=0;}var oldCenter=b2Body.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);this.m_sweep.localCenter.Copy(localCenter);b2Transform.MulXV(this.m_xf,this.m_sweep.localCenter,this.m_sweep.c);this.m_sweep.c0.Copy(this.m_sweep.c);b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,b2Vec2.SubVV(this.m_sweep.c,oldCenter,b2Vec2.s_t0),this.m_linearVelocity);};_proto41.GetWorldPoint=function GetWorldPoint(localPoint,out){return b2Transform.MulXV(this.m_xf,localPoint,out);};_proto41.GetWorldVector=function GetWorldVector(localVector,out){return b2Rot.MulRV(this.m_xf.q,localVector,out);};_proto41.GetLocalPoint=function GetLocalPoint(worldPoint,out){return b2Transform.MulTXV(this.m_xf,worldPoint,out);};_proto41.GetLocalVector=function GetLocalVector(worldVector,out){return b2Rot.MulTRV(this.m_xf.q,worldVector,out);};_proto41.GetLinearVelocityFromWorldPoint=function GetLinearVelocityFromWorldPoint(worldPoint,out){return b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,b2Vec2.SubVV(worldPoint,this.m_sweep.c,b2Vec2.s_t0),out);};_proto41.GetLinearVelocityFromLocalPoint=function GetLinearVelocityFromLocalPoint(localPoint,out){return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(localPoint,out),out);};_proto41.GetLinearDamping=function GetLinearDamping(){return this.m_linearDamping;};_proto41.SetLinearDamping=function SetLinearDamping(linearDamping){this.m_linearDamping=linearDamping;};_proto41.GetAngularDamping=function GetAngularDamping(){return this.m_angularDamping;};_proto41.SetAngularDamping=function SetAngularDamping(angularDamping){this.m_angularDamping=angularDamping;};_proto41.GetGravityScale=function GetGravityScale(){return this.m_gravityScale;};_proto41.SetGravityScale=function SetGravityScale(scale){this.m_gravityScale=scale;};_proto41.SetType=function SetType(type){if(this.m_world.IsLocked()){throw new Error();}if(this.m_type===type){return;}this.m_type=type;this.ResetMassData();if(this.m_type===exports.b2BodyType.b2_staticBody){this.m_linearVelocity.SetZero();this.m_angularVelocity=0;this.m_sweep.a0=this.m_sweep.a;this.m_sweep.c0.Copy(this.m_sweep.c);this.SynchronizeFixtures();}this.SetAwake(true);this.m_force.SetZero();this.m_torque=0;var ce=this.m_contactList;while(ce){var ce0=ce;ce=ce.next;this.m_world.m_contactManager.Destroy(ce0.contact);}this.m_contactList=null;for(var f=this.m_fixtureList;f;f=f.m_next){f.TouchProxies();}};_proto41.GetType=function GetType(){return this.m_type;};_proto41.SetBullet=function SetBullet(flag){this.m_bulletFlag=flag;};_proto41.IsBullet=function IsBullet(){return this.m_bulletFlag;};_proto41.SetSleepingAllowed=function SetSleepingAllowed(flag){this.m_autoSleepFlag=flag;if(!flag){this.SetAwake(true);}};_proto41.IsSleepingAllowed=function IsSleepingAllowed(){return this.m_autoSleepFlag;};_proto41.SetAwake=function SetAwake(flag){if(flag){this.m_awakeFlag=true;this.m_sleepTime=0;}else {this.m_awakeFlag=false;this.m_sleepTime=0;this.m_linearVelocity.SetZero();this.m_angularVelocity=0;this.m_force.SetZero();this.m_torque=0;}};_proto41.IsAwake=function IsAwake(){return this.m_awakeFlag;};_proto41.SetActive=function SetActive(flag){if(this.m_world.IsLocked()){throw new Error();}if(flag===this.IsActive()){return;}this.m_activeFlag=flag;if(flag){for(var f=this.m_fixtureList;f;f=f.m_next){f.CreateProxies();}}else {for(var _f=this.m_fixtureList;_f;_f=_f.m_next){_f.DestroyProxies();}var ce=this.m_contactList;while(ce){var ce0=ce;ce=ce.next;this.m_world.m_contactManager.Destroy(ce0.contact);}this.m_contactList=null;}};_proto41.IsActive=function IsActive(){return this.m_activeFlag;};_proto41.SetFixedRotation=function SetFixedRotation(flag){if(this.m_fixedRotationFlag===flag){return;}this.m_fixedRotationFlag=flag;this.m_angularVelocity=0;this.ResetMassData();};_proto41.IsFixedRotation=function IsFixedRotation(){return this.m_fixedRotationFlag;};_proto41.GetFixtureList=function GetFixtureList(){return this.m_fixtureList;};_proto41.GetJointList=function GetJointList(){return this.m_jointList;};_proto41.GetContactList=function GetContactList(){return this.m_contactList;};_proto41.GetNext=function GetNext(){return this.m_next;};_proto41.GetUserData=function GetUserData(){return this.m_userData;};_proto41.SetUserData=function SetUserData(data){this.m_userData=data;};_proto41.GetWorld=function GetWorld(){return this.m_world;};_proto41.Dump=function Dump(log){var bodyIndex=this.m_islandIndex;log("{\n");log("  const bd: b2BodyDef = new b2BodyDef();\n");var type_str="";switch(this.m_type){case exports.b2BodyType.b2_staticBody:type_str="b2BodyType.b2_staticBody";break;case exports.b2BodyType.b2_kinematicBody:type_str="b2BodyType.b2_kinematicBody";break;case exports.b2BodyType.b2_dynamicBody:type_str="b2BodyType.b2_dynamicBody";break;}log("  bd.type = %s;\n",type_str);log("  bd.position.Set(%.15f, %.15f);\n",this.m_xf.p.x,this.m_xf.p.y);log("  bd.angle = %.15f;\n",this.m_sweep.a);log("  bd.linearVelocity.Set(%.15f, %.15f);\n",this.m_linearVelocity.x,this.m_linearVelocity.y);log("  bd.angularVelocity = %.15f;\n",this.m_angularVelocity);log("  bd.linearDamping = %.15f;\n",this.m_linearDamping);log("  bd.angularDamping = %.15f;\n",this.m_angularDamping);log("  bd.allowSleep = %s;\n",this.m_autoSleepFlag?"true":"false");log("  bd.awake = %s;\n",this.m_awakeFlag?"true":"false");log("  bd.fixedRotation = %s;\n",this.m_fixedRotationFlag?"true":"false");log("  bd.bullet = %s;\n",this.m_bulletFlag?"true":"false");log("  bd.active = %s;\n",this.m_activeFlag?"true":"false");log("  bd.gravityScale = %.15f;\n",this.m_gravityScale);log("\n");log("  bodies[%d] = this.m_world.CreateBody(bd);\n",this.m_islandIndex);log("\n");for(var f=this.m_fixtureList;f;f=f.m_next){log("  {\n");f.Dump(log,bodyIndex);log("  }\n");}log("}\n");};_proto41.SynchronizeFixtures=function SynchronizeFixtures(){var xf1=b2Body.SynchronizeFixtures_s_xf1;xf1.q.SetAngle(this.m_sweep.a0);b2Rot.MulRV(xf1.q,this.m_sweep.localCenter,xf1.p);b2Vec2.SubVV(this.m_sweep.c0,xf1.p,xf1.p);var displacement=b2Vec2.SubVV(this.m_sweep.c,this.m_sweep.c0,b2Body.SynchronizeFixtures_s_displacement);for(var f=this.m_fixtureList;f;f=f.m_next){f.SynchronizeProxies(xf1,this.m_xf,displacement);}};_proto41.SynchronizeTransform=function SynchronizeTransform(){this.m_xf.q.SetAngle(this.m_sweep.a);b2Rot.MulRV(this.m_xf.q,this.m_sweep.localCenter,this.m_xf.p);b2Vec2.SubVV(this.m_sweep.c,this.m_xf.p,this.m_xf.p);};_proto41.ShouldCollide=function ShouldCollide(other){if(this.m_type===exports.b2BodyType.b2_staticBody&&other.m_type===exports.b2BodyType.b2_staticBody){return false;}return this.ShouldCollideConnected(other);};_proto41.ShouldCollideConnected=function ShouldCollideConnected(other){for(var jn=this.m_jointList;jn;jn=jn.next){if(jn.other===other){if(!jn.joint.m_collideConnected){return false;}}}return true;};_proto41.Advance=function Advance(alpha){this.m_sweep.Advance(alpha);this.m_sweep.c.Copy(this.m_sweep.c0);this.m_sweep.a=this.m_sweep.a0;this.m_xf.q.SetAngle(this.m_sweep.a);b2Rot.MulRV(this.m_xf.q,this.m_sweep.localCenter,this.m_xf.p);b2Vec2.SubVV(this.m_sweep.c,this.m_xf.p,this.m_xf.p);};_proto41.GetControllerList=function GetControllerList(){return this.m_controllerList;};_proto41.GetControllerCount=function GetControllerCount(){return this.m_controllerCount;};return b2Body;}();b2Body.CreateFixtureShapeDensity_s_def=new b2FixtureDef();b2Body.SetMassData_s_oldCenter=new b2Vec2();b2Body.ResetMassData_s_localCenter=new b2Vec2();b2Body.ResetMassData_s_oldCenter=new b2Vec2();b2Body.ResetMassData_s_massData=new b2MassData();b2Body.SynchronizeFixtures_s_xf1=new b2Transform();b2Body.SynchronizeFixtures_s_displacement=new b2Vec2();(function(b2JointType){b2JointType[b2JointType["e_unknownJoint"]=0]="e_unknownJoint";b2JointType[b2JointType["e_revoluteJoint"]=1]="e_revoluteJoint";b2JointType[b2JointType["e_prismaticJoint"]=2]="e_prismaticJoint";b2JointType[b2JointType["e_distanceJoint"]=3]="e_distanceJoint";b2JointType[b2JointType["e_pulleyJoint"]=4]="e_pulleyJoint";b2JointType[b2JointType["e_mouseJoint"]=5]="e_mouseJoint";b2JointType[b2JointType["e_gearJoint"]=6]="e_gearJoint";b2JointType[b2JointType["e_wheelJoint"]=7]="e_wheelJoint";b2JointType[b2JointType["e_weldJoint"]=8]="e_weldJoint";b2JointType[b2JointType["e_frictionJoint"]=9]="e_frictionJoint";b2JointType[b2JointType["e_ropeJoint"]=10]="e_ropeJoint";b2JointType[b2JointType["e_motorJoint"]=11]="e_motorJoint";b2JointType[b2JointType["e_areaJoint"]=12]="e_areaJoint";})(exports.b2JointType||(exports.b2JointType={}));(function(b2LimitState){b2LimitState[b2LimitState["e_inactiveLimit"]=0]="e_inactiveLimit";b2LimitState[b2LimitState["e_atLowerLimit"]=1]="e_atLowerLimit";b2LimitState[b2LimitState["e_atUpperLimit"]=2]="e_atUpperLimit";b2LimitState[b2LimitState["e_equalLimits"]=3]="e_equalLimits";})(exports.b2LimitState||(exports.b2LimitState={}));var b2Jacobian=function(){function b2Jacobian(){this.linear=new b2Vec2();this.angularA=0;this.angularB=0;}var _proto42=b2Jacobian.prototype;_proto42.SetZero=function SetZero(){this.linear.SetZero();this.angularA=0;this.angularB=0;return this;};_proto42.Set=function Set(x,a1,a2){this.linear.Copy(x);this.angularA=a1;this.angularB=a2;return this;};return b2Jacobian;}();var b2JointEdge=function(){function b2JointEdge(joint){this._other=null;this.prev=null;this.next=null;this.joint=joint;}var _proto43=b2JointEdge.prototype;_proto43.Reset=function Reset(){this._other=null;this.prev=null;this.next=null;};_createClass(b2JointEdge,[{key:"other",get:function get(){if(this._other===null){throw new Error();}return this._other;},set:function set(value){if(this._other!==null){throw new Error();}this._other=value;}}]);return b2JointEdge;}();var b2JointDef=function b2JointDef(type){this.type=exports.b2JointType.e_unknownJoint;this.userData=null;this.collideConnected=false;this.type=type;};var b2Joint=function(){function b2Joint(def){this.m_type=exports.b2JointType.e_unknownJoint;this.m_prev=null;this.m_next=null;this.m_edgeA=new b2JointEdge(this);this.m_edgeB=new b2JointEdge(this);this.m_index=0;this.m_islandFlag=false;this.m_collideConnected=false;this.m_userData=null;this.m_type=def.type;this.m_edgeA.other=def.bodyB;this.m_edgeB.other=def.bodyA;this.m_bodyA=def.bodyA;this.m_bodyB=def.bodyB;this.m_collideConnected=b2Maybe(def.collideConnected,false);this.m_userData=b2Maybe(def.userData,null);}var _proto44=b2Joint.prototype;_proto44.GetType=function GetType(){return this.m_type;};_proto44.GetBodyA=function GetBodyA(){return this.m_bodyA;};_proto44.GetBodyB=function GetBodyB(){return this.m_bodyB;};_proto44.GetNext=function GetNext(){return this.m_next;};_proto44.GetUserData=function GetUserData(){return this.m_userData;};_proto44.SetUserData=function SetUserData(data){this.m_userData=data;};_proto44.IsActive=function IsActive(){return this.m_bodyA.IsActive()&&this.m_bodyB.IsActive();};_proto44.GetCollideConnected=function GetCollideConnected(){return this.m_collideConnected;};_proto44.Dump=function Dump(log){log("// Dump is not supported for this joint type.\n");};_proto44.ShiftOrigin=function ShiftOrigin(newOrigin){};return b2Joint;}();var b2DistanceJointDef=function(_b2JointDef){_inheritsLoose(b2DistanceJointDef,_b2JointDef);function b2DistanceJointDef(){var _this6;_this6=_b2JointDef.call(this,exports.b2JointType.e_distanceJoint)||this;_this6.localAnchorA=new b2Vec2();_this6.localAnchorB=new b2Vec2();_this6.length=1;_this6.frequencyHz=0;_this6.dampingRatio=0;return _this6;}var _proto45=b2DistanceJointDef.prototype;_proto45.Initialize=function Initialize(b1,b2,anchor1,anchor2){this.bodyA=b1;this.bodyB=b2;this.bodyA.GetLocalPoint(anchor1,this.localAnchorA);this.bodyB.GetLocalPoint(anchor2,this.localAnchorB);this.length=b2Vec2.DistanceVV(anchor1,anchor2);this.frequencyHz=0;this.dampingRatio=0;};return b2DistanceJointDef;}(b2JointDef);var b2DistanceJoint=function(_b2Joint){_inheritsLoose(b2DistanceJoint,_b2Joint);function b2DistanceJoint(def){var _this7;_this7=_b2Joint.call(this,def)||this;_this7.m_frequencyHz=0;_this7.m_dampingRatio=0;_this7.m_bias=0;_this7.m_localAnchorA=new b2Vec2();_this7.m_localAnchorB=new b2Vec2();_this7.m_gamma=0;_this7.m_impulse=0;_this7.m_length=0;_this7.m_indexA=0;_this7.m_indexB=0;_this7.m_u=new b2Vec2();_this7.m_rA=new b2Vec2();_this7.m_rB=new b2Vec2();_this7.m_localCenterA=new b2Vec2();_this7.m_localCenterB=new b2Vec2();_this7.m_invMassA=0;_this7.m_invMassB=0;_this7.m_invIA=0;_this7.m_invIB=0;_this7.m_mass=0;_this7.m_qA=new b2Rot();_this7.m_qB=new b2Rot();_this7.m_lalcA=new b2Vec2();_this7.m_lalcB=new b2Vec2();_this7.m_frequencyHz=b2Maybe(def.frequencyHz,0);_this7.m_dampingRatio=b2Maybe(def.dampingRatio,0);_this7.m_localAnchorA.Copy(def.localAnchorA);_this7.m_localAnchorB.Copy(def.localAnchorB);_this7.m_length=def.length;return _this7;}var _proto46=b2DistanceJoint.prototype;_proto46.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto46.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto46.GetReactionForce=function GetReactionForce(inv_dt,out){out.x=inv_dt*this.m_impulse*this.m_u.x;out.y=inv_dt*this.m_impulse*this.m_u.y;return out;};_proto46.GetReactionTorque=function GetReactionTorque(inv_dt){return 0;};_proto46.GetLocalAnchorA=function GetLocalAnchorA(){return this.m_localAnchorA;};_proto46.GetLocalAnchorB=function GetLocalAnchorB(){return this.m_localAnchorB;};_proto46.SetLength=function SetLength(length){this.m_length=length;};_proto46.Length=function Length(){return this.m_length;};_proto46.SetFrequency=function SetFrequency(hz){this.m_frequencyHz=hz;};_proto46.GetFrequency=function GetFrequency(){return this.m_frequencyHz;};_proto46.SetDampingRatio=function SetDampingRatio(ratio){this.m_dampingRatio=ratio;};_proto46.GetDampingRatio=function GetDampingRatio(){return this.m_dampingRatio;};_proto46.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2DistanceJointDef = new b2DistanceJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.length = %.15f;\n",this.m_length);log("  jd.frequencyHz = %.15f;\n",this.m_frequencyHz);log("  jd.dampingRatio = %.15f;\n",this.m_dampingRatio);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};_proto46.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);this.m_u.x=cB.x+this.m_rB.x-cA.x-this.m_rA.x;this.m_u.y=cB.y+this.m_rB.y-cA.y-this.m_rA.y;var length=this.m_u.Length();if(length>b2_linearSlop){this.m_u.SelfMul(1/length);}else {this.m_u.SetZero();}var crAu=b2Vec2.CrossVV(this.m_rA,this.m_u);var crBu=b2Vec2.CrossVV(this.m_rB,this.m_u);var invMass=this.m_invMassA+this.m_invIA*crAu*crAu+this.m_invMassB+this.m_invIB*crBu*crBu;this.m_mass=invMass!==0?1/invMass:0;if(this.m_frequencyHz>0){var C=length-this.m_length;var omega=2*b2_pi*this.m_frequencyHz;var d=2*this.m_mass*this.m_dampingRatio*omega;var k=this.m_mass*omega*omega;var h=data.step.dt;this.m_gamma=h*(d+h*k);this.m_gamma=this.m_gamma!==0?1/this.m_gamma:0;this.m_bias=C*h*k*this.m_gamma;invMass+=this.m_gamma;this.m_mass=invMass!==0?1/invMass:0;}else {this.m_gamma=0;this.m_bias=0;}if(data.step.warmStarting){this.m_impulse*=data.step.dtRatio;var P=b2Vec2.MulSV(this.m_impulse,this.m_u,b2DistanceJoint.InitVelocityConstraints_s_P);vA.SelfMulSub(this.m_invMassA,P);wA-=this.m_invIA*b2Vec2.CrossVV(this.m_rA,P);vB.SelfMulAdd(this.m_invMassB,P);wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,P);}else {this.m_impulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto46.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var vpA=b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2DistanceJoint.SolveVelocityConstraints_s_vpA);var vpB=b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2DistanceJoint.SolveVelocityConstraints_s_vpB);var Cdot=b2Vec2.DotVV(this.m_u,b2Vec2.SubVV(vpB,vpA,b2Vec2.s_t0));var impulse=-this.m_mass*(Cdot+this.m_bias+this.m_gamma*this.m_impulse);this.m_impulse+=impulse;var P=b2Vec2.MulSV(impulse,this.m_u,b2DistanceJoint.SolveVelocityConstraints_s_P);vA.SelfMulSub(this.m_invMassA,P);wA-=this.m_invIA*b2Vec2.CrossVV(this.m_rA,P);vB.SelfMulAdd(this.m_invMassB,P);wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,P);data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto46.SolvePositionConstraints=function SolvePositionConstraints(data){if(this.m_frequencyHz>0){return true;}var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var u=this.m_u;u.x=cB.x+rB.x-cA.x-rA.x;u.y=cB.y+rB.y-cA.y-rA.y;var length=this.m_u.Normalize();var C=length-this.m_length;C=b2Clamp(C,-b2_maxLinearCorrection,b2_maxLinearCorrection);var impulse=-this.m_mass*C;var P=b2Vec2.MulSV(impulse,u,b2DistanceJoint.SolvePositionConstraints_s_P);cA.SelfMulSub(this.m_invMassA,P);aA-=this.m_invIA*b2Vec2.CrossVV(rA,P);cB.SelfMulAdd(this.m_invMassB,P);aB+=this.m_invIB*b2Vec2.CrossVV(rB,P);data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;return b2Abs(C)<b2_linearSlop;};return b2DistanceJoint;}(b2Joint);b2DistanceJoint.InitVelocityConstraints_s_P=new b2Vec2();b2DistanceJoint.SolveVelocityConstraints_s_vpA=new b2Vec2();b2DistanceJoint.SolveVelocityConstraints_s_vpB=new b2Vec2();b2DistanceJoint.SolveVelocityConstraints_s_P=new b2Vec2();b2DistanceJoint.SolvePositionConstraints_s_P=new b2Vec2();var b2AreaJointDef=function(_b2JointDef2){_inheritsLoose(b2AreaJointDef,_b2JointDef2);function b2AreaJointDef(){var _this8;_this8=_b2JointDef2.call(this,exports.b2JointType.e_areaJoint)||this;_this8.bodies=[];_this8.frequencyHz=0;_this8.dampingRatio=0;return _this8;}var _proto47=b2AreaJointDef.prototype;_proto47.AddBody=function AddBody(body){this.bodies.push(body);if(this.bodies.length===1){this.bodyA=body;}else if(this.bodies.length===2){this.bodyB=body;}};return b2AreaJointDef;}(b2JointDef);var b2AreaJoint=function(_b2Joint2){_inheritsLoose(b2AreaJoint,_b2Joint2);function b2AreaJoint(def){var _this9;_this9=_b2Joint2.call(this,def)||this;_this9.m_frequencyHz=0;_this9.m_dampingRatio=0;_this9.m_impulse=0;_this9.m_targetArea=0;_this9.m_delta=new b2Vec2();_this9.m_bodies=def.bodies;_this9.m_frequencyHz=b2Maybe(def.frequencyHz,0);_this9.m_dampingRatio=b2Maybe(def.dampingRatio,0);_this9.m_targetLengths=b2MakeNumberArray(def.bodies.length);_this9.m_normals=b2Vec2.MakeArray(def.bodies.length);_this9.m_joints=[];_this9.m_deltas=b2Vec2.MakeArray(def.bodies.length);var djd=new b2DistanceJointDef();djd.frequencyHz=_this9.m_frequencyHz;djd.dampingRatio=_this9.m_dampingRatio;_this9.m_targetArea=0;for(var i=0;i<_this9.m_bodies.length;++i){var body=_this9.m_bodies[i];var next=_this9.m_bodies[(i+1)%_this9.m_bodies.length];var body_c=body.GetWorldCenter();var next_c=next.GetWorldCenter();_this9.m_targetLengths[i]=b2Vec2.DistanceVV(body_c,next_c);_this9.m_targetArea+=b2Vec2.CrossVV(body_c,next_c);djd.Initialize(body,next,body_c,next_c);_this9.m_joints[i]=body.GetWorld().CreateJoint(djd);}_this9.m_targetArea*=0.5;return _this9;}var _proto48=b2AreaJoint.prototype;_proto48.GetAnchorA=function GetAnchorA(out){return out;};_proto48.GetAnchorB=function GetAnchorB(out){return out;};_proto48.GetReactionForce=function GetReactionForce(inv_dt,out){return out;};_proto48.GetReactionTorque=function GetReactionTorque(inv_dt){return 0;};_proto48.SetFrequency=function SetFrequency(hz){this.m_frequencyHz=hz;for(var i=0;i<this.m_joints.length;++i){this.m_joints[i].SetFrequency(hz);}};_proto48.GetFrequency=function GetFrequency(){return this.m_frequencyHz;};_proto48.SetDampingRatio=function SetDampingRatio(ratio){this.m_dampingRatio=ratio;for(var i=0;i<this.m_joints.length;++i){this.m_joints[i].SetDampingRatio(ratio);}};_proto48.GetDampingRatio=function GetDampingRatio(){return this.m_dampingRatio;};_proto48.Dump=function Dump(log){log("Area joint dumping is not supported.\n");};_proto48.InitVelocityConstraints=function InitVelocityConstraints(data){for(var i=0;i<this.m_bodies.length;++i){var prev=this.m_bodies[(i+this.m_bodies.length-1)%this.m_bodies.length];var next=this.m_bodies[(i+1)%this.m_bodies.length];var prev_c=data.positions[prev.m_islandIndex].c;var next_c=data.positions[next.m_islandIndex].c;var delta=this.m_deltas[i];b2Vec2.SubVV(next_c,prev_c,delta);}if(data.step.warmStarting){this.m_impulse*=data.step.dtRatio;for(var _i12=0;_i12<this.m_bodies.length;++_i12){var body=this.m_bodies[_i12];var body_v=data.velocities[body.m_islandIndex].v;var _delta=this.m_deltas[_i12];body_v.x+=body.m_invMass*_delta.y*0.5*this.m_impulse;body_v.y+=body.m_invMass*-_delta.x*0.5*this.m_impulse;}}else {this.m_impulse=0;}};_proto48.SolveVelocityConstraints=function SolveVelocityConstraints(data){var dotMassSum=0;var crossMassSum=0;for(var i=0;i<this.m_bodies.length;++i){var body=this.m_bodies[i];var body_v=data.velocities[body.m_islandIndex].v;var delta=this.m_deltas[i];dotMassSum+=delta.LengthSquared()/body.GetMass();crossMassSum+=b2Vec2.CrossVV(body_v,delta);}var lambda=-2*crossMassSum/dotMassSum;this.m_impulse+=lambda;for(var _i13=0;_i13<this.m_bodies.length;++_i13){var _body=this.m_bodies[_i13];var _body_v=data.velocities[_body.m_islandIndex].v;var _delta2=this.m_deltas[_i13];_body_v.x+=_body.m_invMass*_delta2.y*0.5*lambda;_body_v.y+=_body.m_invMass*-_delta2.x*0.5*lambda;}};_proto48.SolvePositionConstraints=function SolvePositionConstraints(data){var perimeter=0;var area=0;for(var i=0;i<this.m_bodies.length;++i){var body=this.m_bodies[i];var next=this.m_bodies[(i+1)%this.m_bodies.length];var body_c=data.positions[body.m_islandIndex].c;var next_c=data.positions[next.m_islandIndex].c;var delta=b2Vec2.SubVV(next_c,body_c,this.m_delta);var dist=delta.Length();if(dist<b2_epsilon){dist=1;}this.m_normals[i].x=delta.y/dist;this.m_normals[i].y=-delta.x/dist;perimeter+=dist;area+=b2Vec2.CrossVV(body_c,next_c);}area*=0.5;var deltaArea=this.m_targetArea-area;var toExtrude=0.5*deltaArea/perimeter;var done=true;for(var _i14=0;_i14<this.m_bodies.length;++_i14){var _body2=this.m_bodies[_i14];var _body_c=data.positions[_body2.m_islandIndex].c;var next_i=(_i14+1)%this.m_bodies.length;var _delta3=b2Vec2.AddVV(this.m_normals[_i14],this.m_normals[next_i],this.m_delta);_delta3.SelfMul(toExtrude);var norm_sq=_delta3.LengthSquared();if(norm_sq>b2Sq(b2_maxLinearCorrection)){_delta3.SelfMul(b2_maxLinearCorrection/b2Sqrt(norm_sq));}if(norm_sq>b2Sq(b2_linearSlop)){done=false;}_body_c.x+=_delta3.x;_body_c.y+=_delta3.y;}return done;};return b2AreaJoint;}(b2Joint);var b2FrictionJointDef=function(_b2JointDef3){_inheritsLoose(b2FrictionJointDef,_b2JointDef3);function b2FrictionJointDef(){var _this10;_this10=_b2JointDef3.call(this,exports.b2JointType.e_frictionJoint)||this;_this10.localAnchorA=new b2Vec2();_this10.localAnchorB=new b2Vec2();_this10.maxForce=0;_this10.maxTorque=0;return _this10;}var _proto49=b2FrictionJointDef.prototype;_proto49.Initialize=function Initialize(bA,bB,anchor){this.bodyA=bA;this.bodyB=bB;this.bodyA.GetLocalPoint(anchor,this.localAnchorA);this.bodyB.GetLocalPoint(anchor,this.localAnchorB);};return b2FrictionJointDef;}(b2JointDef);var b2FrictionJoint=function(_b2Joint3){_inheritsLoose(b2FrictionJoint,_b2Joint3);function b2FrictionJoint(def){var _this11;_this11=_b2Joint3.call(this,def)||this;_this11.m_localAnchorA=new b2Vec2();_this11.m_localAnchorB=new b2Vec2();_this11.m_linearImpulse=new b2Vec2();_this11.m_angularImpulse=0;_this11.m_maxForce=0;_this11.m_maxTorque=0;_this11.m_indexA=0;_this11.m_indexB=0;_this11.m_rA=new b2Vec2();_this11.m_rB=new b2Vec2();_this11.m_localCenterA=new b2Vec2();_this11.m_localCenterB=new b2Vec2();_this11.m_invMassA=0;_this11.m_invMassB=0;_this11.m_invIA=0;_this11.m_invIB=0;_this11.m_linearMass=new b2Mat22();_this11.m_angularMass=0;_this11.m_qA=new b2Rot();_this11.m_qB=new b2Rot();_this11.m_lalcA=new b2Vec2();_this11.m_lalcB=new b2Vec2();_this11.m_K=new b2Mat22();_this11.m_localAnchorA.Copy(def.localAnchorA);_this11.m_localAnchorB.Copy(def.localAnchorB);_this11.m_linearImpulse.SetZero();_this11.m_maxForce=b2Maybe(def.maxForce,0);_this11.m_maxTorque=b2Maybe(def.maxTorque,0);_this11.m_linearMass.SetZero();return _this11;}var _proto50=b2FrictionJoint.prototype;_proto50.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var K=this.m_K;K.ex.x=mA+mB+iA*rA.y*rA.y+iB*rB.y*rB.y;K.ex.y=-iA*rA.x*rA.y-iB*rB.x*rB.y;K.ey.x=K.ex.y;K.ey.y=mA+mB+iA*rA.x*rA.x+iB*rB.x*rB.x;K.GetInverse(this.m_linearMass);this.m_angularMass=iA+iB;if(this.m_angularMass>0){this.m_angularMass=1/this.m_angularMass;}if(data.step.warmStarting){this.m_linearImpulse.SelfMul(data.step.dtRatio);this.m_angularImpulse*=data.step.dtRatio;var P=this.m_linearImpulse;vA.SelfMulSub(mA,P);wA-=iA*(b2Vec2.CrossVV(this.m_rA,P)+this.m_angularImpulse);vB.SelfMulAdd(mB,P);wB+=iB*(b2Vec2.CrossVV(this.m_rB,P)+this.m_angularImpulse);}else {this.m_linearImpulse.SetZero();this.m_angularImpulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto50.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var h=data.step.dt;{var Cdot=wB-wA;var impulse=-this.m_angularMass*Cdot;var oldImpulse=this.m_angularImpulse;var maxImpulse=h*this.m_maxTorque;this.m_angularImpulse=b2Clamp(this.m_angularImpulse+impulse,-maxImpulse,maxImpulse);impulse=this.m_angularImpulse-oldImpulse;wA-=iA*impulse;wB+=iB*impulse;}{var Cdot_v2=b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2Vec2.s_t1),b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2);var impulseV=b2Mat22.MulMV(this.m_linearMass,Cdot_v2,b2FrictionJoint.SolveVelocityConstraints_s_impulseV).SelfNeg();var oldImpulseV=b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);this.m_linearImpulse.SelfAdd(impulseV);var _maxImpulse=h*this.m_maxForce;if(this.m_linearImpulse.LengthSquared()>_maxImpulse*_maxImpulse){this.m_linearImpulse.Normalize();this.m_linearImpulse.SelfMul(_maxImpulse);}b2Vec2.SubVV(this.m_linearImpulse,oldImpulseV,impulseV);vA.SelfMulSub(mA,impulseV);wA-=iA*b2Vec2.CrossVV(this.m_rA,impulseV);vB.SelfMulAdd(mB,impulseV);wB+=iB*b2Vec2.CrossVV(this.m_rB,impulseV);}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto50.SolvePositionConstraints=function SolvePositionConstraints(data){return true;};_proto50.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto50.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto50.GetReactionForce=function GetReactionForce(inv_dt,out){out.x=inv_dt*this.m_linearImpulse.x;out.y=inv_dt*this.m_linearImpulse.y;return out;};_proto50.GetReactionTorque=function GetReactionTorque(inv_dt){return inv_dt*this.m_angularImpulse;};_proto50.GetLocalAnchorA=function GetLocalAnchorA(){return this.m_localAnchorA;};_proto50.GetLocalAnchorB=function GetLocalAnchorB(){return this.m_localAnchorB;};_proto50.SetMaxForce=function SetMaxForce(force){this.m_maxForce=force;};_proto50.GetMaxForce=function GetMaxForce(){return this.m_maxForce;};_proto50.SetMaxTorque=function SetMaxTorque(torque){this.m_maxTorque=torque;};_proto50.GetMaxTorque=function GetMaxTorque(){return this.m_maxTorque;};_proto50.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2FrictionJointDef = new b2FrictionJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.maxForce = %.15f;\n",this.m_maxForce);log("  jd.maxTorque = %.15f;\n",this.m_maxTorque);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2FrictionJoint;}(b2Joint);b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2=new b2Vec2();b2FrictionJoint.SolveVelocityConstraints_s_impulseV=new b2Vec2();b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV=new b2Vec2();var b2GearJointDef=function(_b2JointDef4){_inheritsLoose(b2GearJointDef,_b2JointDef4);function b2GearJointDef(){var _this12;_this12=_b2JointDef4.call(this,exports.b2JointType.e_gearJoint)||this;_this12.ratio=1;return _this12;}return b2GearJointDef;}(b2JointDef);var b2GearJoint=function(_b2Joint4){_inheritsLoose(b2GearJoint,_b2Joint4);function b2GearJoint(def){var _this13;_this13=_b2Joint4.call(this,def)||this;_this13.m_typeA=exports.b2JointType.e_unknownJoint;_this13.m_typeB=exports.b2JointType.e_unknownJoint;_this13.m_localAnchorA=new b2Vec2();_this13.m_localAnchorB=new b2Vec2();_this13.m_localAnchorC=new b2Vec2();_this13.m_localAnchorD=new b2Vec2();_this13.m_localAxisC=new b2Vec2();_this13.m_localAxisD=new b2Vec2();_this13.m_referenceAngleA=0;_this13.m_referenceAngleB=0;_this13.m_constant=0;_this13.m_ratio=0;_this13.m_impulse=0;_this13.m_indexA=0;_this13.m_indexB=0;_this13.m_indexC=0;_this13.m_indexD=0;_this13.m_lcA=new b2Vec2();_this13.m_lcB=new b2Vec2();_this13.m_lcC=new b2Vec2();_this13.m_lcD=new b2Vec2();_this13.m_mA=0;_this13.m_mB=0;_this13.m_mC=0;_this13.m_mD=0;_this13.m_iA=0;_this13.m_iB=0;_this13.m_iC=0;_this13.m_iD=0;_this13.m_JvAC=new b2Vec2();_this13.m_JvBD=new b2Vec2();_this13.m_JwA=0;_this13.m_JwB=0;_this13.m_JwC=0;_this13.m_JwD=0;_this13.m_mass=0;_this13.m_qA=new b2Rot();_this13.m_qB=new b2Rot();_this13.m_qC=new b2Rot();_this13.m_qD=new b2Rot();_this13.m_lalcA=new b2Vec2();_this13.m_lalcB=new b2Vec2();_this13.m_lalcC=new b2Vec2();_this13.m_lalcD=new b2Vec2();_this13.m_joint1=def.joint1;_this13.m_joint2=def.joint2;_this13.m_typeA=_this13.m_joint1.GetType();_this13.m_typeB=_this13.m_joint2.GetType();var coordinateA,coordinateB;_this13.m_bodyC=_this13.m_joint1.GetBodyA();_this13.m_bodyA=_this13.m_joint1.GetBodyB();var xfA=_this13.m_bodyA.m_xf;var aA=_this13.m_bodyA.m_sweep.a;var xfC=_this13.m_bodyC.m_xf;var aC=_this13.m_bodyC.m_sweep.a;if(_this13.m_typeA===exports.b2JointType.e_revoluteJoint){var revolute=def.joint1;_this13.m_localAnchorC.Copy(revolute.m_localAnchorA);_this13.m_localAnchorA.Copy(revolute.m_localAnchorB);_this13.m_referenceAngleA=revolute.m_referenceAngle;_this13.m_localAxisC.SetZero();coordinateA=aA-aC-_this13.m_referenceAngleA;}else {var prismatic=def.joint1;_this13.m_localAnchorC.Copy(prismatic.m_localAnchorA);_this13.m_localAnchorA.Copy(prismatic.m_localAnchorB);_this13.m_referenceAngleA=prismatic.m_referenceAngle;_this13.m_localAxisC.Copy(prismatic.m_localXAxisA);var pC=_this13.m_localAnchorC;var pA=b2Rot.MulTRV(xfC.q,b2Vec2.AddVV(b2Rot.MulRV(xfA.q,_this13.m_localAnchorA,b2Vec2.s_t0),b2Vec2.SubVV(xfA.p,xfC.p,b2Vec2.s_t1),b2Vec2.s_t0),b2Vec2.s_t0);coordinateA=b2Vec2.DotVV(b2Vec2.SubVV(pA,pC,b2Vec2.s_t0),_this13.m_localAxisC);}_this13.m_bodyD=_this13.m_joint2.GetBodyA();_this13.m_bodyB=_this13.m_joint2.GetBodyB();var xfB=_this13.m_bodyB.m_xf;var aB=_this13.m_bodyB.m_sweep.a;var xfD=_this13.m_bodyD.m_xf;var aD=_this13.m_bodyD.m_sweep.a;if(_this13.m_typeB===exports.b2JointType.e_revoluteJoint){var _revolute=def.joint2;_this13.m_localAnchorD.Copy(_revolute.m_localAnchorA);_this13.m_localAnchorB.Copy(_revolute.m_localAnchorB);_this13.m_referenceAngleB=_revolute.m_referenceAngle;_this13.m_localAxisD.SetZero();coordinateB=aB-aD-_this13.m_referenceAngleB;}else {var _prismatic=def.joint2;_this13.m_localAnchorD.Copy(_prismatic.m_localAnchorA);_this13.m_localAnchorB.Copy(_prismatic.m_localAnchorB);_this13.m_referenceAngleB=_prismatic.m_referenceAngle;_this13.m_localAxisD.Copy(_prismatic.m_localXAxisA);var pD=_this13.m_localAnchorD;var pB=b2Rot.MulTRV(xfD.q,b2Vec2.AddVV(b2Rot.MulRV(xfB.q,_this13.m_localAnchorB,b2Vec2.s_t0),b2Vec2.SubVV(xfB.p,xfD.p,b2Vec2.s_t1),b2Vec2.s_t0),b2Vec2.s_t0);coordinateB=b2Vec2.DotVV(b2Vec2.SubVV(pB,pD,b2Vec2.s_t0),_this13.m_localAxisD);}_this13.m_ratio=b2Maybe(def.ratio,1);_this13.m_constant=coordinateA+_this13.m_ratio*coordinateB;_this13.m_impulse=0;return _this13;}var _proto51=b2GearJoint.prototype;_proto51.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_indexC=this.m_bodyC.m_islandIndex;this.m_indexD=this.m_bodyD.m_islandIndex;this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter);this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter);this.m_mA=this.m_bodyA.m_invMass;this.m_mB=this.m_bodyB.m_invMass;this.m_mC=this.m_bodyC.m_invMass;this.m_mD=this.m_bodyD.m_invMass;this.m_iA=this.m_bodyA.m_invI;this.m_iB=this.m_bodyB.m_invI;this.m_iC=this.m_bodyC.m_invI;this.m_iD=this.m_bodyD.m_invI;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var aC=data.positions[this.m_indexC].a;var vC=data.velocities[this.m_indexC].v;var wC=data.velocities[this.m_indexC].w;var aD=data.positions[this.m_indexD].a;var vD=data.velocities[this.m_indexD].v;var wD=data.velocities[this.m_indexD].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB),qC=this.m_qC.SetAngle(aC),qD=this.m_qD.SetAngle(aD);this.m_mass=0;if(this.m_typeA===exports.b2JointType.e_revoluteJoint){this.m_JvAC.SetZero();this.m_JwA=1;this.m_JwC=1;this.m_mass+=this.m_iA+this.m_iC;}else {var u=b2Rot.MulRV(qC,this.m_localAxisC,b2GearJoint.InitVelocityConstraints_s_u);b2Vec2.SubVV(this.m_localAnchorC,this.m_lcC,this.m_lalcC);var rC=b2Rot.MulRV(qC,this.m_lalcC,b2GearJoint.InitVelocityConstraints_s_rC);b2Vec2.SubVV(this.m_localAnchorA,this.m_lcA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,b2GearJoint.InitVelocityConstraints_s_rA);this.m_JvAC.Copy(u);this.m_JwC=b2Vec2.CrossVV(rC,u);this.m_JwA=b2Vec2.CrossVV(rA,u);this.m_mass+=this.m_mC+this.m_mA+this.m_iC*this.m_JwC*this.m_JwC+this.m_iA*this.m_JwA*this.m_JwA;}if(this.m_typeB===exports.b2JointType.e_revoluteJoint){this.m_JvBD.SetZero();this.m_JwB=this.m_ratio;this.m_JwD=this.m_ratio;this.m_mass+=this.m_ratio*this.m_ratio*(this.m_iB+this.m_iD);}else {var _u=b2Rot.MulRV(qD,this.m_localAxisD,b2GearJoint.InitVelocityConstraints_s_u);b2Vec2.SubVV(this.m_localAnchorD,this.m_lcD,this.m_lalcD);var rD=b2Rot.MulRV(qD,this.m_lalcD,b2GearJoint.InitVelocityConstraints_s_rD);b2Vec2.SubVV(this.m_localAnchorB,this.m_lcB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,b2GearJoint.InitVelocityConstraints_s_rB);b2Vec2.MulSV(this.m_ratio,_u,this.m_JvBD);this.m_JwD=this.m_ratio*b2Vec2.CrossVV(rD,_u);this.m_JwB=this.m_ratio*b2Vec2.CrossVV(rB,_u);this.m_mass+=this.m_ratio*this.m_ratio*(this.m_mD+this.m_mB)+this.m_iD*this.m_JwD*this.m_JwD+this.m_iB*this.m_JwB*this.m_JwB;}this.m_mass=this.m_mass>0?1/this.m_mass:0;if(data.step.warmStarting){vA.SelfMulAdd(this.m_mA*this.m_impulse,this.m_JvAC);wA+=this.m_iA*this.m_impulse*this.m_JwA;vB.SelfMulAdd(this.m_mB*this.m_impulse,this.m_JvBD);wB+=this.m_iB*this.m_impulse*this.m_JwB;vC.SelfMulSub(this.m_mC*this.m_impulse,this.m_JvAC);wC-=this.m_iC*this.m_impulse*this.m_JwC;vD.SelfMulSub(this.m_mD*this.m_impulse,this.m_JvBD);wD-=this.m_iD*this.m_impulse*this.m_JwD;}else {this.m_impulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;data.velocities[this.m_indexC].w=wC;data.velocities[this.m_indexD].w=wD;};_proto51.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var vC=data.velocities[this.m_indexC].v;var wC=data.velocities[this.m_indexC].w;var vD=data.velocities[this.m_indexD].v;var wD=data.velocities[this.m_indexD].w;var Cdot=b2Vec2.DotVV(this.m_JvAC,b2Vec2.SubVV(vA,vC,b2Vec2.s_t0))+b2Vec2.DotVV(this.m_JvBD,b2Vec2.SubVV(vB,vD,b2Vec2.s_t0));Cdot+=this.m_JwA*wA-this.m_JwC*wC+(this.m_JwB*wB-this.m_JwD*wD);var impulse=-this.m_mass*Cdot;this.m_impulse+=impulse;vA.SelfMulAdd(this.m_mA*impulse,this.m_JvAC);wA+=this.m_iA*impulse*this.m_JwA;vB.SelfMulAdd(this.m_mB*impulse,this.m_JvBD);wB+=this.m_iB*impulse*this.m_JwB;vC.SelfMulSub(this.m_mC*impulse,this.m_JvAC);wC-=this.m_iC*impulse*this.m_JwC;vD.SelfMulSub(this.m_mD*impulse,this.m_JvBD);wD-=this.m_iD*impulse*this.m_JwD;data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;data.velocities[this.m_indexC].w=wC;data.velocities[this.m_indexD].w=wD;};_proto51.SolvePositionConstraints=function SolvePositionConstraints(data){var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var cC=data.positions[this.m_indexC].c;var aC=data.positions[this.m_indexC].a;var cD=data.positions[this.m_indexD].c;var aD=data.positions[this.m_indexD].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB),qC=this.m_qC.SetAngle(aC),qD=this.m_qD.SetAngle(aD);var linearError=0;var coordinateA,coordinateB;var JvAC=this.m_JvAC,JvBD=this.m_JvBD;var JwA,JwB,JwC,JwD;var mass=0;if(this.m_typeA===exports.b2JointType.e_revoluteJoint){JvAC.SetZero();JwA=1;JwC=1;mass+=this.m_iA+this.m_iC;coordinateA=aA-aC-this.m_referenceAngleA;}else {var u=b2Rot.MulRV(qC,this.m_localAxisC,b2GearJoint.SolvePositionConstraints_s_u);var rC=b2Rot.MulRV(qC,this.m_lalcC,b2GearJoint.SolvePositionConstraints_s_rC);var rA=b2Rot.MulRV(qA,this.m_lalcA,b2GearJoint.SolvePositionConstraints_s_rA);JvAC.Copy(u);JwC=b2Vec2.CrossVV(rC,u);JwA=b2Vec2.CrossVV(rA,u);mass+=this.m_mC+this.m_mA+this.m_iC*JwC*JwC+this.m_iA*JwA*JwA;var pC=this.m_lalcC;var pA=b2Rot.MulTRV(qC,b2Vec2.AddVV(rA,b2Vec2.SubVV(cA,cC,b2Vec2.s_t0),b2Vec2.s_t0),b2Vec2.s_t0);coordinateA=b2Vec2.DotVV(b2Vec2.SubVV(pA,pC,b2Vec2.s_t0),this.m_localAxisC);}if(this.m_typeB===exports.b2JointType.e_revoluteJoint){JvBD.SetZero();JwB=this.m_ratio;JwD=this.m_ratio;mass+=this.m_ratio*this.m_ratio*(this.m_iB+this.m_iD);coordinateB=aB-aD-this.m_referenceAngleB;}else {var _u2=b2Rot.MulRV(qD,this.m_localAxisD,b2GearJoint.SolvePositionConstraints_s_u);var rD=b2Rot.MulRV(qD,this.m_lalcD,b2GearJoint.SolvePositionConstraints_s_rD);var rB=b2Rot.MulRV(qB,this.m_lalcB,b2GearJoint.SolvePositionConstraints_s_rB);b2Vec2.MulSV(this.m_ratio,_u2,JvBD);JwD=this.m_ratio*b2Vec2.CrossVV(rD,_u2);JwB=this.m_ratio*b2Vec2.CrossVV(rB,_u2);mass+=this.m_ratio*this.m_ratio*(this.m_mD+this.m_mB)+this.m_iD*JwD*JwD+this.m_iB*JwB*JwB;var pD=this.m_lalcD;var pB=b2Rot.MulTRV(qD,b2Vec2.AddVV(rB,b2Vec2.SubVV(cB,cD,b2Vec2.s_t0),b2Vec2.s_t0),b2Vec2.s_t0);coordinateB=b2Vec2.DotVV(b2Vec2.SubVV(pB,pD,b2Vec2.s_t0),this.m_localAxisD);}var C=coordinateA+this.m_ratio*coordinateB-this.m_constant;var impulse=0;if(mass>0){impulse=-C/mass;}cA.SelfMulAdd(this.m_mA*impulse,JvAC);aA+=this.m_iA*impulse*JwA;cB.SelfMulAdd(this.m_mB*impulse,JvBD);aB+=this.m_iB*impulse*JwB;cC.SelfMulSub(this.m_mC*impulse,JvAC);aC-=this.m_iC*impulse*JwC;cD.SelfMulSub(this.m_mD*impulse,JvBD);aD-=this.m_iD*impulse*JwD;data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;data.positions[this.m_indexC].a=aC;data.positions[this.m_indexD].a=aD;return linearError<b2_linearSlop;};_proto51.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto51.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto51.GetReactionForce=function GetReactionForce(inv_dt,out){return b2Vec2.MulSV(inv_dt*this.m_impulse,this.m_JvAC,out);};_proto51.GetReactionTorque=function GetReactionTorque(inv_dt){return inv_dt*this.m_impulse*this.m_JwA;};_proto51.GetJoint1=function GetJoint1(){return this.m_joint1;};_proto51.GetJoint2=function GetJoint2(){return this.m_joint2;};_proto51.GetRatio=function GetRatio(){return this.m_ratio;};_proto51.SetRatio=function SetRatio(ratio){this.m_ratio=ratio;};_proto51.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;var index1=this.m_joint1.m_index;var index2=this.m_joint2.m_index;log("  const jd: b2GearJointDef = new b2GearJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.joint1 = joints[%d];\n",index1);log("  jd.joint2 = joints[%d];\n",index2);log("  jd.ratio = %.15f;\n",this.m_ratio);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2GearJoint;}(b2Joint);b2GearJoint.InitVelocityConstraints_s_u=new b2Vec2();b2GearJoint.InitVelocityConstraints_s_rA=new b2Vec2();b2GearJoint.InitVelocityConstraints_s_rB=new b2Vec2();b2GearJoint.InitVelocityConstraints_s_rC=new b2Vec2();b2GearJoint.InitVelocityConstraints_s_rD=new b2Vec2();b2GearJoint.SolvePositionConstraints_s_u=new b2Vec2();b2GearJoint.SolvePositionConstraints_s_rA=new b2Vec2();b2GearJoint.SolvePositionConstraints_s_rB=new b2Vec2();b2GearJoint.SolvePositionConstraints_s_rC=new b2Vec2();b2GearJoint.SolvePositionConstraints_s_rD=new b2Vec2();var b2MotorJointDef=function(_b2JointDef5){_inheritsLoose(b2MotorJointDef,_b2JointDef5);function b2MotorJointDef(){var _this14;_this14=_b2JointDef5.call(this,exports.b2JointType.e_motorJoint)||this;_this14.linearOffset=new b2Vec2(0,0);_this14.angularOffset=0;_this14.maxForce=1;_this14.maxTorque=1;_this14.correctionFactor=0.3;return _this14;}var _proto52=b2MotorJointDef.prototype;_proto52.Initialize=function Initialize(bA,bB){this.bodyA=bA;this.bodyB=bB;this.bodyA.GetLocalPoint(this.bodyB.GetPosition(),this.linearOffset);var angleA=this.bodyA.GetAngle();var angleB=this.bodyB.GetAngle();this.angularOffset=angleB-angleA;};return b2MotorJointDef;}(b2JointDef);var b2MotorJoint=function(_b2Joint5){_inheritsLoose(b2MotorJoint,_b2Joint5);function b2MotorJoint(def){var _this15;_this15=_b2Joint5.call(this,def)||this;_this15.m_linearOffset=new b2Vec2();_this15.m_angularOffset=0;_this15.m_linearImpulse=new b2Vec2();_this15.m_angularImpulse=0;_this15.m_maxForce=0;_this15.m_maxTorque=0;_this15.m_correctionFactor=0.3;_this15.m_indexA=0;_this15.m_indexB=0;_this15.m_rA=new b2Vec2();_this15.m_rB=new b2Vec2();_this15.m_localCenterA=new b2Vec2();_this15.m_localCenterB=new b2Vec2();_this15.m_linearError=new b2Vec2();_this15.m_angularError=0;_this15.m_invMassA=0;_this15.m_invMassB=0;_this15.m_invIA=0;_this15.m_invIB=0;_this15.m_linearMass=new b2Mat22();_this15.m_angularMass=0;_this15.m_qA=new b2Rot();_this15.m_qB=new b2Rot();_this15.m_K=new b2Mat22();_this15.m_linearOffset.Copy(b2Maybe(def.linearOffset,b2Vec2.ZERO));_this15.m_linearImpulse.SetZero();_this15.m_maxForce=b2Maybe(def.maxForce,0);_this15.m_maxTorque=b2Maybe(def.maxTorque,0);_this15.m_correctionFactor=b2Maybe(def.correctionFactor,0.3);return _this15;}var _proto53=b2MotorJoint.prototype;_proto53.GetAnchorA=function GetAnchorA(out){var pos=this.m_bodyA.GetPosition();out.x=pos.x;out.y=pos.y;return out;};_proto53.GetAnchorB=function GetAnchorB(out){var pos=this.m_bodyB.GetPosition();out.x=pos.x;out.y=pos.y;return out;};_proto53.GetReactionForce=function GetReactionForce(inv_dt,out){return b2Vec2.MulSV(inv_dt,this.m_linearImpulse,out);};_proto53.GetReactionTorque=function GetReactionTorque(inv_dt){return inv_dt*this.m_angularImpulse;};_proto53.SetLinearOffset=function SetLinearOffset(linearOffset){if(!b2Vec2.IsEqualToV(linearOffset,this.m_linearOffset)){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_linearOffset.Copy(linearOffset);}};_proto53.GetLinearOffset=function GetLinearOffset(){return this.m_linearOffset;};_proto53.SetAngularOffset=function SetAngularOffset(angularOffset){if(angularOffset!==this.m_angularOffset){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_angularOffset=angularOffset;}};_proto53.GetAngularOffset=function GetAngularOffset(){return this.m_angularOffset;};_proto53.SetMaxForce=function SetMaxForce(force){this.m_maxForce=force;};_proto53.GetMaxForce=function GetMaxForce(){return this.m_maxForce;};_proto53.SetMaxTorque=function SetMaxTorque(torque){this.m_maxTorque=torque;};_proto53.GetMaxTorque=function GetMaxTorque(){return this.m_maxTorque;};_proto53.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);var rA=b2Rot.MulRV(qA,b2Vec2.SubVV(this.m_linearOffset,this.m_localCenterA,b2Vec2.s_t0),this.m_rA);var rB=b2Rot.MulRV(qB,b2Vec2.NegV(this.m_localCenterB,b2Vec2.s_t0),this.m_rB);var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var K=this.m_K;K.ex.x=mA+mB+iA*rA.y*rA.y+iB*rB.y*rB.y;K.ex.y=-iA*rA.x*rA.y-iB*rB.x*rB.y;K.ey.x=K.ex.y;K.ey.y=mA+mB+iA*rA.x*rA.x+iB*rB.x*rB.x;K.GetInverse(this.m_linearMass);this.m_angularMass=iA+iB;if(this.m_angularMass>0){this.m_angularMass=1/this.m_angularMass;}b2Vec2.SubVV(b2Vec2.AddVV(cB,rB,b2Vec2.s_t0),b2Vec2.AddVV(cA,rA,b2Vec2.s_t1),this.m_linearError);this.m_angularError=aB-aA-this.m_angularOffset;if(data.step.warmStarting){this.m_linearImpulse.SelfMul(data.step.dtRatio);this.m_angularImpulse*=data.step.dtRatio;var P=this.m_linearImpulse;vA.SelfMulSub(mA,P);wA-=iA*(b2Vec2.CrossVV(rA,P)+this.m_angularImpulse);vB.SelfMulAdd(mB,P);wB+=iB*(b2Vec2.CrossVV(rB,P)+this.m_angularImpulse);}else {this.m_linearImpulse.SetZero();this.m_angularImpulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto53.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var h=data.step.dt;var inv_h=data.step.inv_dt;{var Cdot=wB-wA+inv_h*this.m_correctionFactor*this.m_angularError;var impulse=-this.m_angularMass*Cdot;var oldImpulse=this.m_angularImpulse;var maxImpulse=h*this.m_maxTorque;this.m_angularImpulse=b2Clamp(this.m_angularImpulse+impulse,-maxImpulse,maxImpulse);impulse=this.m_angularImpulse-oldImpulse;wA-=iA*impulse;wB+=iB*impulse;}{var rA=this.m_rA;var rB=this.m_rB;var Cdot_v2=b2Vec2.AddVV(b2Vec2.SubVV(b2Vec2.AddVV(vB,b2Vec2.CrossSV(wB,rB,b2Vec2.s_t0),b2Vec2.s_t0),b2Vec2.AddVV(vA,b2Vec2.CrossSV(wA,rA,b2Vec2.s_t1),b2Vec2.s_t1),b2Vec2.s_t2),b2Vec2.MulSV(inv_h*this.m_correctionFactor,this.m_linearError,b2Vec2.s_t3),b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2);var impulse_v2=b2Mat22.MulMV(this.m_linearMass,Cdot_v2,b2MotorJoint.SolveVelocityConstraints_s_impulse_v2).SelfNeg();var oldImpulse_v2=b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);this.m_linearImpulse.SelfAdd(impulse_v2);var _maxImpulse2=h*this.m_maxForce;if(this.m_linearImpulse.LengthSquared()>_maxImpulse2*_maxImpulse2){this.m_linearImpulse.Normalize();this.m_linearImpulse.SelfMul(_maxImpulse2);}b2Vec2.SubVV(this.m_linearImpulse,oldImpulse_v2,impulse_v2);vA.SelfMulSub(mA,impulse_v2);wA-=iA*b2Vec2.CrossVV(rA,impulse_v2);vB.SelfMulAdd(mB,impulse_v2);wB+=iB*b2Vec2.CrossVV(rB,impulse_v2);}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto53.SolvePositionConstraints=function SolvePositionConstraints(data){return true;};_proto53.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2MotorJointDef = new b2MotorJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.linearOffset.Set(%.15f, %.15f);\n",this.m_linearOffset.x,this.m_linearOffset.y);log("  jd.angularOffset = %.15f;\n",this.m_angularOffset);log("  jd.maxForce = %.15f;\n",this.m_maxForce);log("  jd.maxTorque = %.15f;\n",this.m_maxTorque);log("  jd.correctionFactor = %.15f;\n",this.m_correctionFactor);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2MotorJoint;}(b2Joint);b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2=new b2Vec2();b2MotorJoint.SolveVelocityConstraints_s_impulse_v2=new b2Vec2();b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2=new b2Vec2();var b2MouseJointDef=function(_b2JointDef6){_inheritsLoose(b2MouseJointDef,_b2JointDef6);function b2MouseJointDef(){var _this16;_this16=_b2JointDef6.call(this,exports.b2JointType.e_mouseJoint)||this;_this16.target=new b2Vec2();_this16.maxForce=0;_this16.frequencyHz=5;_this16.dampingRatio=0.7;return _this16;}return b2MouseJointDef;}(b2JointDef);var b2MouseJoint=function(_b2Joint6){_inheritsLoose(b2MouseJoint,_b2Joint6);function b2MouseJoint(def){var _this17;_this17=_b2Joint6.call(this,def)||this;_this17.m_localAnchorB=new b2Vec2();_this17.m_targetA=new b2Vec2();_this17.m_frequencyHz=0;_this17.m_dampingRatio=0;_this17.m_beta=0;_this17.m_impulse=new b2Vec2();_this17.m_maxForce=0;_this17.m_gamma=0;_this17.m_indexA=0;_this17.m_indexB=0;_this17.m_rB=new b2Vec2();_this17.m_localCenterB=new b2Vec2();_this17.m_invMassB=0;_this17.m_invIB=0;_this17.m_mass=new b2Mat22();_this17.m_C=new b2Vec2();_this17.m_qB=new b2Rot();_this17.m_lalcB=new b2Vec2();_this17.m_K=new b2Mat22();_this17.m_targetA.Copy(b2Maybe(def.target,b2Vec2.ZERO));b2Transform.MulTXV(_this17.m_bodyB.GetTransform(),_this17.m_targetA,_this17.m_localAnchorB);_this17.m_maxForce=b2Maybe(def.maxForce,0);_this17.m_impulse.SetZero();_this17.m_frequencyHz=b2Maybe(def.frequencyHz,0);_this17.m_dampingRatio=b2Maybe(def.dampingRatio,0);_this17.m_beta=0;_this17.m_gamma=0;return _this17;}var _proto54=b2MouseJoint.prototype;_proto54.SetTarget=function SetTarget(target){if(!this.m_bodyB.IsAwake()){this.m_bodyB.SetAwake(true);}this.m_targetA.Copy(target);};_proto54.GetTarget=function GetTarget(){return this.m_targetA;};_proto54.SetMaxForce=function SetMaxForce(maxForce){this.m_maxForce=maxForce;};_proto54.GetMaxForce=function GetMaxForce(){return this.m_maxForce;};_proto54.SetFrequency=function SetFrequency(hz){this.m_frequencyHz=hz;};_proto54.GetFrequency=function GetFrequency(){return this.m_frequencyHz;};_proto54.SetDampingRatio=function SetDampingRatio(ratio){this.m_dampingRatio=ratio;};_proto54.GetDampingRatio=function GetDampingRatio(){return this.m_dampingRatio;};_proto54.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIB=this.m_bodyB.m_invI;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qB=this.m_qB.SetAngle(aB);var mass=this.m_bodyB.GetMass();var omega=2*b2_pi*this.m_frequencyHz;var d=2*mass*this.m_dampingRatio*omega;var k=mass*(omega*omega);var h=data.step.dt;this.m_gamma=h*(d+h*k);if(this.m_gamma!==0){this.m_gamma=1/this.m_gamma;}this.m_beta=h*k*this.m_gamma;b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var K=this.m_K;K.ex.x=this.m_invMassB+this.m_invIB*this.m_rB.y*this.m_rB.y+this.m_gamma;K.ex.y=-this.m_invIB*this.m_rB.x*this.m_rB.y;K.ey.x=K.ex.y;K.ey.y=this.m_invMassB+this.m_invIB*this.m_rB.x*this.m_rB.x+this.m_gamma;K.GetInverse(this.m_mass);this.m_C.x=cB.x+this.m_rB.x-this.m_targetA.x;this.m_C.y=cB.y+this.m_rB.y-this.m_targetA.y;this.m_C.SelfMul(this.m_beta);wB*=0.98;if(data.step.warmStarting){this.m_impulse.SelfMul(data.step.dtRatio);vB.x+=this.m_invMassB*this.m_impulse.x;vB.y+=this.m_invMassB*this.m_impulse.y;wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,this.m_impulse);}else {this.m_impulse.SetZero();}data.velocities[this.m_indexB].w=wB;};_proto54.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var Cdot=b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2MouseJoint.SolveVelocityConstraints_s_Cdot);var impulse=b2Mat22.MulMV(this.m_mass,b2Vec2.AddVV(Cdot,b2Vec2.AddVV(this.m_C,b2Vec2.MulSV(this.m_gamma,this.m_impulse,b2Vec2.s_t0),b2Vec2.s_t0),b2Vec2.s_t0).SelfNeg(),b2MouseJoint.SolveVelocityConstraints_s_impulse);var oldImpulse=b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);this.m_impulse.SelfAdd(impulse);var maxImpulse=data.step.dt*this.m_maxForce;if(this.m_impulse.LengthSquared()>maxImpulse*maxImpulse){this.m_impulse.SelfMul(maxImpulse/this.m_impulse.Length());}b2Vec2.SubVV(this.m_impulse,oldImpulse,impulse);vB.SelfMulAdd(this.m_invMassB,impulse);wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,impulse);data.velocities[this.m_indexB].w=wB;};_proto54.SolvePositionConstraints=function SolvePositionConstraints(data){return true;};_proto54.GetAnchorA=function GetAnchorA(out){out.x=this.m_targetA.x;out.y=this.m_targetA.y;return out;};_proto54.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto54.GetReactionForce=function GetReactionForce(inv_dt,out){return b2Vec2.MulSV(inv_dt,this.m_impulse,out);};_proto54.GetReactionTorque=function GetReactionTorque(inv_dt){return 0;};_proto54.Dump=function Dump(log){log("Mouse joint dumping is not supported.\n");};_proto54.ShiftOrigin=function ShiftOrigin(newOrigin){this.m_targetA.SelfSub(newOrigin);};return b2MouseJoint;}(b2Joint);b2MouseJoint.SolveVelocityConstraints_s_Cdot=new b2Vec2();b2MouseJoint.SolveVelocityConstraints_s_impulse=new b2Vec2();b2MouseJoint.SolveVelocityConstraints_s_oldImpulse=new b2Vec2();var b2PrismaticJointDef=function(_b2JointDef7){_inheritsLoose(b2PrismaticJointDef,_b2JointDef7);function b2PrismaticJointDef(){var _this18;_this18=_b2JointDef7.call(this,exports.b2JointType.e_prismaticJoint)||this;_this18.localAnchorA=new b2Vec2();_this18.localAnchorB=new b2Vec2();_this18.localAxisA=new b2Vec2(1,0);_this18.referenceAngle=0;_this18.enableLimit=false;_this18.lowerTranslation=0;_this18.upperTranslation=0;_this18.enableMotor=false;_this18.maxMotorForce=0;_this18.motorSpeed=0;return _this18;}var _proto55=b2PrismaticJointDef.prototype;_proto55.Initialize=function Initialize(bA,bB,anchor,axis){this.bodyA=bA;this.bodyB=bB;this.bodyA.GetLocalPoint(anchor,this.localAnchorA);this.bodyB.GetLocalPoint(anchor,this.localAnchorB);this.bodyA.GetLocalVector(axis,this.localAxisA);this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle();};return b2PrismaticJointDef;}(b2JointDef);var b2PrismaticJoint=function(_b2Joint7){_inheritsLoose(b2PrismaticJoint,_b2Joint7);function b2PrismaticJoint(def){var _this19;_this19=_b2Joint7.call(this,def)||this;_this19.m_localAnchorA=new b2Vec2();_this19.m_localAnchorB=new b2Vec2();_this19.m_localXAxisA=new b2Vec2();_this19.m_localYAxisA=new b2Vec2();_this19.m_referenceAngle=0;_this19.m_impulse=new b2Vec3(0,0,0);_this19.m_motorImpulse=0;_this19.m_lowerTranslation=0;_this19.m_upperTranslation=0;_this19.m_maxMotorForce=0;_this19.m_motorSpeed=0;_this19.m_enableLimit=false;_this19.m_enableMotor=false;_this19.m_limitState=exports.b2LimitState.e_inactiveLimit;_this19.m_indexA=0;_this19.m_indexB=0;_this19.m_localCenterA=new b2Vec2();_this19.m_localCenterB=new b2Vec2();_this19.m_invMassA=0;_this19.m_invMassB=0;_this19.m_invIA=0;_this19.m_invIB=0;_this19.m_axis=new b2Vec2(0,0);_this19.m_perp=new b2Vec2(0,0);_this19.m_s1=0;_this19.m_s2=0;_this19.m_a1=0;_this19.m_a2=0;_this19.m_K=new b2Mat33();_this19.m_K3=new b2Mat33();_this19.m_K2=new b2Mat22();_this19.m_motorMass=0;_this19.m_qA=new b2Rot();_this19.m_qB=new b2Rot();_this19.m_lalcA=new b2Vec2();_this19.m_lalcB=new b2Vec2();_this19.m_rA=new b2Vec2();_this19.m_rB=new b2Vec2();_this19.m_localAnchorA.Copy(b2Maybe(def.localAnchorA,b2Vec2.ZERO));_this19.m_localAnchorB.Copy(b2Maybe(def.localAnchorB,b2Vec2.ZERO));_this19.m_localXAxisA.Copy(b2Maybe(def.localAxisA,new b2Vec2(1,0))).SelfNormalize();b2Vec2.CrossOneV(_this19.m_localXAxisA,_this19.m_localYAxisA);_this19.m_referenceAngle=b2Maybe(def.referenceAngle,0);_this19.m_lowerTranslation=b2Maybe(def.lowerTranslation,0);_this19.m_upperTranslation=b2Maybe(def.upperTranslation,0);_this19.m_maxMotorForce=b2Maybe(def.maxMotorForce,0);_this19.m_motorSpeed=b2Maybe(def.motorSpeed,0);_this19.m_enableLimit=b2Maybe(def.enableLimit,false);_this19.m_enableMotor=b2Maybe(def.enableMotor,false);return _this19;}var _proto56=b2PrismaticJoint.prototype;_proto56.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var d=b2Vec2.AddVV(b2Vec2.SubVV(cB,cA,b2Vec2.s_t0),b2Vec2.SubVV(rB,rA,b2Vec2.s_t1),b2PrismaticJoint.InitVelocityConstraints_s_d);var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;{b2Rot.MulRV(qA,this.m_localXAxisA,this.m_axis);this.m_a1=b2Vec2.CrossVV(b2Vec2.AddVV(d,rA,b2Vec2.s_t0),this.m_axis);this.m_a2=b2Vec2.CrossVV(rB,this.m_axis);this.m_motorMass=mA+mB+iA*this.m_a1*this.m_a1+iB*this.m_a2*this.m_a2;if(this.m_motorMass>0){this.m_motorMass=1/this.m_motorMass;}}{b2Rot.MulRV(qA,this.m_localYAxisA,this.m_perp);this.m_s1=b2Vec2.CrossVV(b2Vec2.AddVV(d,rA,b2Vec2.s_t0),this.m_perp);this.m_s2=b2Vec2.CrossVV(rB,this.m_perp);this.m_K.ex.x=mA+mB+iA*this.m_s1*this.m_s1+iB*this.m_s2*this.m_s2;this.m_K.ex.y=iA*this.m_s1+iB*this.m_s2;this.m_K.ex.z=iA*this.m_s1*this.m_a1+iB*this.m_s2*this.m_a2;this.m_K.ey.x=this.m_K.ex.y;this.m_K.ey.y=iA+iB;if(this.m_K.ey.y===0){this.m_K.ey.y=1;}this.m_K.ey.z=iA*this.m_a1+iB*this.m_a2;this.m_K.ez.x=this.m_K.ex.z;this.m_K.ez.y=this.m_K.ey.z;this.m_K.ez.z=mA+mB+iA*this.m_a1*this.m_a1+iB*this.m_a2*this.m_a2;}if(this.m_enableLimit){var jointTranslation=b2Vec2.DotVV(this.m_axis,d);if(b2Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*b2_linearSlop){this.m_limitState=exports.b2LimitState.e_equalLimits;}else if(jointTranslation<=this.m_lowerTranslation){if(this.m_limitState!==exports.b2LimitState.e_atLowerLimit){this.m_limitState=exports.b2LimitState.e_atLowerLimit;this.m_impulse.z=0;}}else if(jointTranslation>=this.m_upperTranslation){if(this.m_limitState!==exports.b2LimitState.e_atUpperLimit){this.m_limitState=exports.b2LimitState.e_atUpperLimit;this.m_impulse.z=0;}}else {this.m_limitState=exports.b2LimitState.e_inactiveLimit;this.m_impulse.z=0;}}else {this.m_limitState=exports.b2LimitState.e_inactiveLimit;this.m_impulse.z=0;}if(!this.m_enableMotor){this.m_motorImpulse=0;}if(data.step.warmStarting){this.m_impulse.SelfMul(data.step.dtRatio);this.m_motorImpulse*=data.step.dtRatio;var P=b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse.x,this.m_perp,b2Vec2.s_t0),b2Vec2.MulSV(this.m_motorImpulse+this.m_impulse.z,this.m_axis,b2Vec2.s_t1),b2PrismaticJoint.InitVelocityConstraints_s_P);var LA=this.m_impulse.x*this.m_s1+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a1;var LB=this.m_impulse.x*this.m_s2+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a2;vA.SelfMulSub(mA,P);wA-=iA*LA;vB.SelfMulAdd(mB,P);wB+=iB*LB;}else {this.m_impulse.SetZero();this.m_motorImpulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto56.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;if(this.m_enableMotor&&this.m_limitState!==exports.b2LimitState.e_equalLimits){var Cdot=b2Vec2.DotVV(this.m_axis,b2Vec2.SubVV(vB,vA,b2Vec2.s_t0))+this.m_a2*wB-this.m_a1*wA;var impulse=this.m_motorMass*(this.m_motorSpeed-Cdot);var oldImpulse=this.m_motorImpulse;var maxImpulse=data.step.dt*this.m_maxMotorForce;this.m_motorImpulse=b2Clamp(this.m_motorImpulse+impulse,-maxImpulse,maxImpulse);impulse=this.m_motorImpulse-oldImpulse;var P=b2Vec2.MulSV(impulse,this.m_axis,b2PrismaticJoint.SolveVelocityConstraints_s_P);var LA=impulse*this.m_a1;var LB=impulse*this.m_a2;vA.SelfMulSub(mA,P);wA-=iA*LA;vB.SelfMulAdd(mB,P);wB+=iB*LB;}var Cdot1_x=b2Vec2.DotVV(this.m_perp,b2Vec2.SubVV(vB,vA,b2Vec2.s_t0))+this.m_s2*wB-this.m_s1*wA;var Cdot1_y=wB-wA;if(this.m_enableLimit&&this.m_limitState!==exports.b2LimitState.e_inactiveLimit){var Cdot2=b2Vec2.DotVV(this.m_axis,b2Vec2.SubVV(vB,vA,b2Vec2.s_t0))+this.m_a2*wB-this.m_a1*wA;var f1=b2PrismaticJoint.SolveVelocityConstraints_s_f1.Copy(this.m_impulse);var df3=this.m_K.Solve33(-Cdot1_x,-Cdot1_y,-Cdot2,b2PrismaticJoint.SolveVelocityConstraints_s_df3);this.m_impulse.SelfAdd(df3);if(this.m_limitState===exports.b2LimitState.e_atLowerLimit){this.m_impulse.z=b2Max(this.m_impulse.z,0);}else if(this.m_limitState===exports.b2LimitState.e_atUpperLimit){this.m_impulse.z=b2Min(this.m_impulse.z,0);}var b_x=-Cdot1_x-(this.m_impulse.z-f1.z)*this.m_K.ez.x;var b_y=-Cdot1_y-(this.m_impulse.z-f1.z)*this.m_K.ez.y;var f2r=this.m_K.Solve22(b_x,b_y,b2PrismaticJoint.SolveVelocityConstraints_s_f2r);f2r.x+=f1.x;f2r.y+=f1.y;this.m_impulse.x=f2r.x;this.m_impulse.y=f2r.y;df3.x=this.m_impulse.x-f1.x;df3.y=this.m_impulse.y-f1.y;df3.z=this.m_impulse.z-f1.z;var _P3=b2Vec2.AddVV(b2Vec2.MulSV(df3.x,this.m_perp,b2Vec2.s_t0),b2Vec2.MulSV(df3.z,this.m_axis,b2Vec2.s_t1),b2PrismaticJoint.SolveVelocityConstraints_s_P);var _LA=df3.x*this.m_s1+df3.y+df3.z*this.m_a1;var _LB=df3.x*this.m_s2+df3.y+df3.z*this.m_a2;vA.SelfMulSub(mA,_P3);wA-=iA*_LA;vB.SelfMulAdd(mB,_P3);wB+=iB*_LB;}else {var df2=this.m_K.Solve22(-Cdot1_x,-Cdot1_y,b2PrismaticJoint.SolveVelocityConstraints_s_df2);this.m_impulse.x+=df2.x;this.m_impulse.y+=df2.y;var _P4=b2Vec2.MulSV(df2.x,this.m_perp,b2PrismaticJoint.SolveVelocityConstraints_s_P);var _LA2=df2.x*this.m_s1+df2.y;var _LB2=df2.x*this.m_s2+df2.y;vA.SelfMulSub(mA,_P4);wA-=iA*_LA2;vB.SelfMulAdd(mB,_P4);wB+=iB*_LB2;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto56.SolvePositionConstraints=function SolvePositionConstraints(data){var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var d=b2Vec2.SubVV(b2Vec2.AddVV(cB,rB,b2Vec2.s_t0),b2Vec2.AddVV(cA,rA,b2Vec2.s_t1),b2PrismaticJoint.SolvePositionConstraints_s_d);var axis=b2Rot.MulRV(qA,this.m_localXAxisA,this.m_axis);var a1=b2Vec2.CrossVV(b2Vec2.AddVV(d,rA,b2Vec2.s_t0),axis);var a2=b2Vec2.CrossVV(rB,axis);var perp=b2Rot.MulRV(qA,this.m_localYAxisA,this.m_perp);var s1=b2Vec2.CrossVV(b2Vec2.AddVV(d,rA,b2Vec2.s_t0),perp);var s2=b2Vec2.CrossVV(rB,perp);var impulse=b2PrismaticJoint.SolvePositionConstraints_s_impulse;var C1_x=b2Vec2.DotVV(perp,d);var C1_y=aB-aA-this.m_referenceAngle;var linearError=b2Abs(C1_x);var angularError=b2Abs(C1_y);var active=false;var C2=0;if(this.m_enableLimit){var translation=b2Vec2.DotVV(axis,d);if(b2Abs(this.m_upperTranslation-this.m_lowerTranslation)<2*b2_linearSlop){C2=b2Clamp(translation,-b2_maxLinearCorrection,b2_maxLinearCorrection);linearError=b2Max(linearError,b2Abs(translation));active=true;}else if(translation<=this.m_lowerTranslation){C2=b2Clamp(translation-this.m_lowerTranslation+b2_linearSlop,-b2_maxLinearCorrection,0);linearError=b2Max(linearError,this.m_lowerTranslation-translation);active=true;}else if(translation>=this.m_upperTranslation){C2=b2Clamp(translation-this.m_upperTranslation-b2_linearSlop,0,b2_maxLinearCorrection);linearError=b2Max(linearError,translation-this.m_upperTranslation);active=true;}}if(active){var k11=mA+mB+iA*s1*s1+iB*s2*s2;var k12=iA*s1+iB*s2;var k13=iA*s1*a1+iB*s2*a2;var k22=iA+iB;if(k22===0){k22=1;}var k23=iA*a1+iB*a2;var k33=mA+mB+iA*a1*a1+iB*a2*a2;var K=this.m_K3;K.ex.SetXYZ(k11,k12,k13);K.ey.SetXYZ(k12,k22,k23);K.ez.SetXYZ(k13,k23,k33);impulse=K.Solve33(-C1_x,-C1_y,-C2,impulse);}else {var _k=mA+mB+iA*s1*s1+iB*s2*s2;var _k2=iA*s1+iB*s2;var _k3=iA+iB;if(_k3===0){_k3=1;}var K2=this.m_K2;K2.ex.Set(_k,_k2);K2.ey.Set(_k2,_k3);var impulse1=K2.Solve(-C1_x,-C1_y,b2PrismaticJoint.SolvePositionConstraints_s_impulse1);impulse.x=impulse1.x;impulse.y=impulse1.y;impulse.z=0;}var P=b2Vec2.AddVV(b2Vec2.MulSV(impulse.x,perp,b2Vec2.s_t0),b2Vec2.MulSV(impulse.z,axis,b2Vec2.s_t1),b2PrismaticJoint.SolvePositionConstraints_s_P);var LA=impulse.x*s1+impulse.y+impulse.z*a1;var LB=impulse.x*s2+impulse.y+impulse.z*a2;cA.SelfMulSub(mA,P);aA-=iA*LA;cB.SelfMulAdd(mB,P);aB+=iB*LB;data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;return linearError<=b2_linearSlop&&angularError<=b2_angularSlop;};_proto56.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto56.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto56.GetReactionForce=function GetReactionForce(inv_dt,out){out.x=inv_dt*(this.m_impulse.x*this.m_perp.x+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.x);out.y=inv_dt*(this.m_impulse.x*this.m_perp.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_axis.y);return out;};_proto56.GetReactionTorque=function GetReactionTorque(inv_dt){return inv_dt*this.m_impulse.y;};_proto56.GetLocalAnchorA=function GetLocalAnchorA(){return this.m_localAnchorA;};_proto56.GetLocalAnchorB=function GetLocalAnchorB(){return this.m_localAnchorB;};_proto56.GetLocalAxisA=function GetLocalAxisA(){return this.m_localXAxisA;};_proto56.GetReferenceAngle=function GetReferenceAngle(){return this.m_referenceAngle;};_proto56.GetJointTranslation=function GetJointTranslation(){var pA=this.m_bodyA.GetWorldPoint(this.m_localAnchorA,b2PrismaticJoint.GetJointTranslation_s_pA);var pB=this.m_bodyB.GetWorldPoint(this.m_localAnchorB,b2PrismaticJoint.GetJointTranslation_s_pB);var d=b2Vec2.SubVV(pB,pA,b2PrismaticJoint.GetJointTranslation_s_d);var axis=this.m_bodyA.GetWorldVector(this.m_localXAxisA,b2PrismaticJoint.GetJointTranslation_s_axis);var translation=b2Vec2.DotVV(d,axis);return translation;};_proto56.GetJointSpeed=function GetJointSpeed(){var bA=this.m_bodyA;var bB=this.m_bodyB;b2Vec2.SubVV(this.m_localAnchorA,bA.m_sweep.localCenter,this.m_lalcA);var rA=b2Rot.MulRV(bA.m_xf.q,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,bB.m_sweep.localCenter,this.m_lalcB);var rB=b2Rot.MulRV(bB.m_xf.q,this.m_lalcB,this.m_rB);var pA=b2Vec2.AddVV(bA.m_sweep.c,rA,b2Vec2.s_t0);var pB=b2Vec2.AddVV(bB.m_sweep.c,rB,b2Vec2.s_t1);var d=b2Vec2.SubVV(pB,pA,b2Vec2.s_t2);var axis=bA.GetWorldVector(this.m_localXAxisA,this.m_axis);var vA=bA.m_linearVelocity;var vB=bB.m_linearVelocity;var wA=bA.m_angularVelocity;var wB=bB.m_angularVelocity;var speed=b2Vec2.DotVV(d,b2Vec2.CrossSV(wA,axis,b2Vec2.s_t0))+b2Vec2.DotVV(axis,b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,rA,b2Vec2.s_t1),b2Vec2.s_t0));return speed;};_proto56.IsLimitEnabled=function IsLimitEnabled(){return this.m_enableLimit;};_proto56.EnableLimit=function EnableLimit(flag){if(flag!==this.m_enableLimit){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableLimit=flag;this.m_impulse.z=0;}};_proto56.GetLowerLimit=function GetLowerLimit(){return this.m_lowerTranslation;};_proto56.GetUpperLimit=function GetUpperLimit(){return this.m_upperTranslation;};_proto56.SetLimits=function SetLimits(lower,upper){if(lower!==this.m_lowerTranslation||upper!==this.m_upperTranslation){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_lowerTranslation=lower;this.m_upperTranslation=upper;this.m_impulse.z=0;}};_proto56.IsMotorEnabled=function IsMotorEnabled(){return this.m_enableMotor;};_proto56.EnableMotor=function EnableMotor(flag){if(flag!==this.m_enableMotor){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableMotor=flag;}};_proto56.SetMotorSpeed=function SetMotorSpeed(speed){if(speed!==this.m_motorSpeed){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_motorSpeed=speed;}};_proto56.GetMotorSpeed=function GetMotorSpeed(){return this.m_motorSpeed;};_proto56.SetMaxMotorForce=function SetMaxMotorForce(force){if(force!==this.m_maxMotorForce){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_maxMotorForce=force;}};_proto56.GetMaxMotorForce=function GetMaxMotorForce(){return this.m_maxMotorForce;};_proto56.GetMotorForce=function GetMotorForce(inv_dt){return inv_dt*this.m_motorImpulse;};_proto56.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.localAxisA.Set(%.15f, %.15f);\n",this.m_localXAxisA.x,this.m_localXAxisA.y);log("  jd.referenceAngle = %.15f;\n",this.m_referenceAngle);log("  jd.enableLimit = %s;\n",this.m_enableLimit?"true":"false");log("  jd.lowerTranslation = %.15f;\n",this.m_lowerTranslation);log("  jd.upperTranslation = %.15f;\n",this.m_upperTranslation);log("  jd.enableMotor = %s;\n",this.m_enableMotor?"true":"false");log("  jd.motorSpeed = %.15f;\n",this.m_motorSpeed);log("  jd.maxMotorForce = %.15f;\n",this.m_maxMotorForce);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2PrismaticJoint;}(b2Joint);b2PrismaticJoint.InitVelocityConstraints_s_d=new b2Vec2();b2PrismaticJoint.InitVelocityConstraints_s_P=new b2Vec2();b2PrismaticJoint.SolveVelocityConstraints_s_P=new b2Vec2();b2PrismaticJoint.SolveVelocityConstraints_s_f2r=new b2Vec2();b2PrismaticJoint.SolveVelocityConstraints_s_f1=new b2Vec3();b2PrismaticJoint.SolveVelocityConstraints_s_df3=new b2Vec3();b2PrismaticJoint.SolveVelocityConstraints_s_df2=new b2Vec2();b2PrismaticJoint.SolvePositionConstraints_s_d=new b2Vec2();b2PrismaticJoint.SolvePositionConstraints_s_impulse=new b2Vec3();b2PrismaticJoint.SolvePositionConstraints_s_impulse1=new b2Vec2();b2PrismaticJoint.SolvePositionConstraints_s_P=new b2Vec2();b2PrismaticJoint.GetJointTranslation_s_pA=new b2Vec2();b2PrismaticJoint.GetJointTranslation_s_pB=new b2Vec2();b2PrismaticJoint.GetJointTranslation_s_d=new b2Vec2();b2PrismaticJoint.GetJointTranslation_s_axis=new b2Vec2();var b2_minPulleyLength=2;var b2PulleyJointDef=function(_b2JointDef8){_inheritsLoose(b2PulleyJointDef,_b2JointDef8);function b2PulleyJointDef(){var _this20;_this20=_b2JointDef8.call(this,exports.b2JointType.e_pulleyJoint)||this;_this20.groundAnchorA=new b2Vec2(-1,1);_this20.groundAnchorB=new b2Vec2(1,1);_this20.localAnchorA=new b2Vec2(-1,0);_this20.localAnchorB=new b2Vec2(1,0);_this20.lengthA=0;_this20.lengthB=0;_this20.ratio=1;_this20.collideConnected=true;return _this20;}var _proto57=b2PulleyJointDef.prototype;_proto57.Initialize=function Initialize(bA,bB,groundA,groundB,anchorA,anchorB,r){this.bodyA=bA;this.bodyB=bB;this.groundAnchorA.Copy(groundA);this.groundAnchorB.Copy(groundB);this.bodyA.GetLocalPoint(anchorA,this.localAnchorA);this.bodyB.GetLocalPoint(anchorB,this.localAnchorB);this.lengthA=b2Vec2.DistanceVV(anchorA,groundA);this.lengthB=b2Vec2.DistanceVV(anchorB,groundB);this.ratio=r;};return b2PulleyJointDef;}(b2JointDef);var b2PulleyJoint=function(_b2Joint8){_inheritsLoose(b2PulleyJoint,_b2Joint8);function b2PulleyJoint(def){var _this21;_this21=_b2Joint8.call(this,def)||this;_this21.m_groundAnchorA=new b2Vec2();_this21.m_groundAnchorB=new b2Vec2();_this21.m_lengthA=0;_this21.m_lengthB=0;_this21.m_localAnchorA=new b2Vec2();_this21.m_localAnchorB=new b2Vec2();_this21.m_constant=0;_this21.m_ratio=0;_this21.m_impulse=0;_this21.m_indexA=0;_this21.m_indexB=0;_this21.m_uA=new b2Vec2();_this21.m_uB=new b2Vec2();_this21.m_rA=new b2Vec2();_this21.m_rB=new b2Vec2();_this21.m_localCenterA=new b2Vec2();_this21.m_localCenterB=new b2Vec2();_this21.m_invMassA=0;_this21.m_invMassB=0;_this21.m_invIA=0;_this21.m_invIB=0;_this21.m_mass=0;_this21.m_qA=new b2Rot();_this21.m_qB=new b2Rot();_this21.m_lalcA=new b2Vec2();_this21.m_lalcB=new b2Vec2();_this21.m_groundAnchorA.Copy(b2Maybe(def.groundAnchorA,new b2Vec2(-1,1)));_this21.m_groundAnchorB.Copy(b2Maybe(def.groundAnchorB,new b2Vec2(1,0)));_this21.m_localAnchorA.Copy(b2Maybe(def.localAnchorA,new b2Vec2(-1,0)));_this21.m_localAnchorB.Copy(b2Maybe(def.localAnchorB,new b2Vec2(1,0)));_this21.m_lengthA=b2Maybe(def.lengthA,0);_this21.m_lengthB=b2Maybe(def.lengthB,0);_this21.m_ratio=b2Maybe(def.ratio,1);_this21.m_constant=b2Maybe(def.lengthA,0)+_this21.m_ratio*b2Maybe(def.lengthB,0);_this21.m_impulse=0;return _this21;}var _proto58=b2PulleyJoint.prototype;_proto58.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);this.m_uA.Copy(cA).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA);this.m_uB.Copy(cB).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);var lengthA=this.m_uA.Length();var lengthB=this.m_uB.Length();if(lengthA>10*b2_linearSlop){this.m_uA.SelfMul(1/lengthA);}else {this.m_uA.SetZero();}if(lengthB>10*b2_linearSlop){this.m_uB.SelfMul(1/lengthB);}else {this.m_uB.SetZero();}var ruA=b2Vec2.CrossVV(this.m_rA,this.m_uA);var ruB=b2Vec2.CrossVV(this.m_rB,this.m_uB);var mA=this.m_invMassA+this.m_invIA*ruA*ruA;var mB=this.m_invMassB+this.m_invIB*ruB*ruB;this.m_mass=mA+this.m_ratio*this.m_ratio*mB;if(this.m_mass>0){this.m_mass=1/this.m_mass;}if(data.step.warmStarting){this.m_impulse*=data.step.dtRatio;var PA=b2Vec2.MulSV(-this.m_impulse,this.m_uA,b2PulleyJoint.InitVelocityConstraints_s_PA);var PB=b2Vec2.MulSV(-this.m_ratio*this.m_impulse,this.m_uB,b2PulleyJoint.InitVelocityConstraints_s_PB);vA.SelfMulAdd(this.m_invMassA,PA);wA+=this.m_invIA*b2Vec2.CrossVV(this.m_rA,PA);vB.SelfMulAdd(this.m_invMassB,PB);wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,PB);}else {this.m_impulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto58.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var vpA=b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2PulleyJoint.SolveVelocityConstraints_s_vpA);var vpB=b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2PulleyJoint.SolveVelocityConstraints_s_vpB);var Cdot=-b2Vec2.DotVV(this.m_uA,vpA)-this.m_ratio*b2Vec2.DotVV(this.m_uB,vpB);var impulse=-this.m_mass*Cdot;this.m_impulse+=impulse;var PA=b2Vec2.MulSV(-impulse,this.m_uA,b2PulleyJoint.SolveVelocityConstraints_s_PA);var PB=b2Vec2.MulSV(-this.m_ratio*impulse,this.m_uB,b2PulleyJoint.SolveVelocityConstraints_s_PB);vA.SelfMulAdd(this.m_invMassA,PA);wA+=this.m_invIA*b2Vec2.CrossVV(this.m_rA,PA);vB.SelfMulAdd(this.m_invMassB,PB);wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,PB);data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto58.SolvePositionConstraints=function SolvePositionConstraints(data){var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var uA=this.m_uA.Copy(cA).SelfAdd(rA).SelfSub(this.m_groundAnchorA);var uB=this.m_uB.Copy(cB).SelfAdd(rB).SelfSub(this.m_groundAnchorB);var lengthA=uA.Length();var lengthB=uB.Length();if(lengthA>10*b2_linearSlop){uA.SelfMul(1/lengthA);}else {uA.SetZero();}if(lengthB>10*b2_linearSlop){uB.SelfMul(1/lengthB);}else {uB.SetZero();}var ruA=b2Vec2.CrossVV(rA,uA);var ruB=b2Vec2.CrossVV(rB,uB);var mA=this.m_invMassA+this.m_invIA*ruA*ruA;var mB=this.m_invMassB+this.m_invIB*ruB*ruB;var mass=mA+this.m_ratio*this.m_ratio*mB;if(mass>0){mass=1/mass;}var C=this.m_constant-lengthA-this.m_ratio*lengthB;var linearError=b2Abs(C);var impulse=-mass*C;var PA=b2Vec2.MulSV(-impulse,uA,b2PulleyJoint.SolvePositionConstraints_s_PA);var PB=b2Vec2.MulSV(-this.m_ratio*impulse,uB,b2PulleyJoint.SolvePositionConstraints_s_PB);cA.SelfMulAdd(this.m_invMassA,PA);aA+=this.m_invIA*b2Vec2.CrossVV(rA,PA);cB.SelfMulAdd(this.m_invMassB,PB);aB+=this.m_invIB*b2Vec2.CrossVV(rB,PB);data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;return linearError<b2_linearSlop;};_proto58.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto58.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto58.GetReactionForce=function GetReactionForce(inv_dt,out){out.x=inv_dt*this.m_impulse*this.m_uB.x;out.y=inv_dt*this.m_impulse*this.m_uB.y;return out;};_proto58.GetReactionTorque=function GetReactionTorque(inv_dt){return 0;};_proto58.GetGroundAnchorA=function GetGroundAnchorA(){return this.m_groundAnchorA;};_proto58.GetGroundAnchorB=function GetGroundAnchorB(){return this.m_groundAnchorB;};_proto58.GetLengthA=function GetLengthA(){return this.m_lengthA;};_proto58.GetLengthB=function GetLengthB(){return this.m_lengthB;};_proto58.GetRatio=function GetRatio(){return this.m_ratio;};_proto58.GetCurrentLengthA=function GetCurrentLengthA(){var p=this.m_bodyA.GetWorldPoint(this.m_localAnchorA,b2PulleyJoint.GetCurrentLengthA_s_p);var s=this.m_groundAnchorA;return b2Vec2.DistanceVV(p,s);};_proto58.GetCurrentLengthB=function GetCurrentLengthB(){var p=this.m_bodyB.GetWorldPoint(this.m_localAnchorB,b2PulleyJoint.GetCurrentLengthB_s_p);var s=this.m_groundAnchorB;return b2Vec2.DistanceVV(p,s);};_proto58.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2PulleyJointDef = new b2PulleyJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.groundAnchorA.Set(%.15f, %.15f);\n",this.m_groundAnchorA.x,this.m_groundAnchorA.y);log("  jd.groundAnchorB.Set(%.15f, %.15f);\n",this.m_groundAnchorB.x,this.m_groundAnchorB.y);log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.lengthA = %.15f;\n",this.m_lengthA);log("  jd.lengthB = %.15f;\n",this.m_lengthB);log("  jd.ratio = %.15f;\n",this.m_ratio);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};_proto58.ShiftOrigin=function ShiftOrigin(newOrigin){this.m_groundAnchorA.SelfSub(newOrigin);this.m_groundAnchorB.SelfSub(newOrigin);};return b2PulleyJoint;}(b2Joint);b2PulleyJoint.InitVelocityConstraints_s_PA=new b2Vec2();b2PulleyJoint.InitVelocityConstraints_s_PB=new b2Vec2();b2PulleyJoint.SolveVelocityConstraints_s_vpA=new b2Vec2();b2PulleyJoint.SolveVelocityConstraints_s_vpB=new b2Vec2();b2PulleyJoint.SolveVelocityConstraints_s_PA=new b2Vec2();b2PulleyJoint.SolveVelocityConstraints_s_PB=new b2Vec2();b2PulleyJoint.SolvePositionConstraints_s_PA=new b2Vec2();b2PulleyJoint.SolvePositionConstraints_s_PB=new b2Vec2();b2PulleyJoint.GetCurrentLengthA_s_p=new b2Vec2();b2PulleyJoint.GetCurrentLengthB_s_p=new b2Vec2();var b2RevoluteJointDef=function(_b2JointDef9){_inheritsLoose(b2RevoluteJointDef,_b2JointDef9);function b2RevoluteJointDef(){var _this22;_this22=_b2JointDef9.call(this,exports.b2JointType.e_revoluteJoint)||this;_this22.localAnchorA=new b2Vec2(0,0);_this22.localAnchorB=new b2Vec2(0,0);_this22.referenceAngle=0;_this22.enableLimit=false;_this22.lowerAngle=0;_this22.upperAngle=0;_this22.enableMotor=false;_this22.motorSpeed=0;_this22.maxMotorTorque=0;return _this22;}var _proto59=b2RevoluteJointDef.prototype;_proto59.Initialize=function Initialize(bA,bB,anchor){this.bodyA=bA;this.bodyB=bB;this.bodyA.GetLocalPoint(anchor,this.localAnchorA);this.bodyB.GetLocalPoint(anchor,this.localAnchorB);this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle();};return b2RevoluteJointDef;}(b2JointDef);var b2RevoluteJoint=function(_b2Joint9){_inheritsLoose(b2RevoluteJoint,_b2Joint9);function b2RevoluteJoint(def){var _this23;_this23=_b2Joint9.call(this,def)||this;_this23.m_localAnchorA=new b2Vec2();_this23.m_localAnchorB=new b2Vec2();_this23.m_impulse=new b2Vec3();_this23.m_motorImpulse=0;_this23.m_enableMotor=false;_this23.m_maxMotorTorque=0;_this23.m_motorSpeed=0;_this23.m_enableLimit=false;_this23.m_referenceAngle=0;_this23.m_lowerAngle=0;_this23.m_upperAngle=0;_this23.m_indexA=0;_this23.m_indexB=0;_this23.m_rA=new b2Vec2();_this23.m_rB=new b2Vec2();_this23.m_localCenterA=new b2Vec2();_this23.m_localCenterB=new b2Vec2();_this23.m_invMassA=0;_this23.m_invMassB=0;_this23.m_invIA=0;_this23.m_invIB=0;_this23.m_mass=new b2Mat33();_this23.m_motorMass=0;_this23.m_limitState=exports.b2LimitState.e_inactiveLimit;_this23.m_qA=new b2Rot();_this23.m_qB=new b2Rot();_this23.m_lalcA=new b2Vec2();_this23.m_lalcB=new b2Vec2();_this23.m_K=new b2Mat22();_this23.m_localAnchorA.Copy(b2Maybe(def.localAnchorA,b2Vec2.ZERO));_this23.m_localAnchorB.Copy(b2Maybe(def.localAnchorB,b2Vec2.ZERO));_this23.m_referenceAngle=b2Maybe(def.referenceAngle,0);_this23.m_impulse.SetZero();_this23.m_motorImpulse=0;_this23.m_lowerAngle=b2Maybe(def.lowerAngle,0);_this23.m_upperAngle=b2Maybe(def.upperAngle,0);_this23.m_maxMotorTorque=b2Maybe(def.maxMotorTorque,0);_this23.m_motorSpeed=b2Maybe(def.motorSpeed,0);_this23.m_enableLimit=b2Maybe(def.enableLimit,false);_this23.m_enableMotor=b2Maybe(def.enableMotor,false);_this23.m_limitState=exports.b2LimitState.e_inactiveLimit;return _this23;}var _proto60=b2RevoluteJoint.prototype;_proto60.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var fixedRotation=iA+iB===0;this.m_mass.ex.x=mA+mB+this.m_rA.y*this.m_rA.y*iA+this.m_rB.y*this.m_rB.y*iB;this.m_mass.ey.x=-this.m_rA.y*this.m_rA.x*iA-this.m_rB.y*this.m_rB.x*iB;this.m_mass.ez.x=-this.m_rA.y*iA-this.m_rB.y*iB;this.m_mass.ex.y=this.m_mass.ey.x;this.m_mass.ey.y=mA+mB+this.m_rA.x*this.m_rA.x*iA+this.m_rB.x*this.m_rB.x*iB;this.m_mass.ez.y=this.m_rA.x*iA+this.m_rB.x*iB;this.m_mass.ex.z=this.m_mass.ez.x;this.m_mass.ey.z=this.m_mass.ez.y;this.m_mass.ez.z=iA+iB;this.m_motorMass=iA+iB;if(this.m_motorMass>0){this.m_motorMass=1/this.m_motorMass;}if(!this.m_enableMotor||fixedRotation){this.m_motorImpulse=0;}if(this.m_enableLimit&&!fixedRotation){var jointAngle=aB-aA-this.m_referenceAngle;if(b2Abs(this.m_upperAngle-this.m_lowerAngle)<2*b2_angularSlop){this.m_limitState=exports.b2LimitState.e_equalLimits;}else if(jointAngle<=this.m_lowerAngle){if(this.m_limitState!==exports.b2LimitState.e_atLowerLimit){this.m_impulse.z=0;}this.m_limitState=exports.b2LimitState.e_atLowerLimit;}else if(jointAngle>=this.m_upperAngle){if(this.m_limitState!==exports.b2LimitState.e_atUpperLimit){this.m_impulse.z=0;}this.m_limitState=exports.b2LimitState.e_atUpperLimit;}else {this.m_limitState=exports.b2LimitState.e_inactiveLimit;this.m_impulse.z=0;}}else {this.m_limitState=exports.b2LimitState.e_inactiveLimit;}if(data.step.warmStarting){this.m_impulse.SelfMul(data.step.dtRatio);this.m_motorImpulse*=data.step.dtRatio;var P=b2RevoluteJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x,this.m_impulse.y);vA.SelfMulSub(mA,P);wA-=iA*(b2Vec2.CrossVV(this.m_rA,P)+this.m_motorImpulse+this.m_impulse.z);vB.SelfMulAdd(mB,P);wB+=iB*(b2Vec2.CrossVV(this.m_rB,P)+this.m_motorImpulse+this.m_impulse.z);}else {this.m_impulse.SetZero();this.m_motorImpulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto60.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var fixedRotation=iA+iB===0;if(this.m_enableMotor&&this.m_limitState!==exports.b2LimitState.e_equalLimits&&!fixedRotation){var Cdot=wB-wA-this.m_motorSpeed;var impulse=-this.m_motorMass*Cdot;var oldImpulse=this.m_motorImpulse;var maxImpulse=data.step.dt*this.m_maxMotorTorque;this.m_motorImpulse=b2Clamp(this.m_motorImpulse+impulse,-maxImpulse,maxImpulse);impulse=this.m_motorImpulse-oldImpulse;wA-=iA*impulse;wB+=iB*impulse;}if(this.m_enableLimit&&this.m_limitState!==exports.b2LimitState.e_inactiveLimit&&!fixedRotation){var Cdot1=b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2Vec2.s_t1),b2RevoluteJoint.SolveVelocityConstraints_s_Cdot1);var Cdot2=wB-wA;var impulse_v3=this.m_mass.Solve33(Cdot1.x,Cdot1.y,Cdot2,b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3).SelfNeg();if(this.m_limitState===exports.b2LimitState.e_equalLimits){this.m_impulse.SelfAdd(impulse_v3);}else if(this.m_limitState===exports.b2LimitState.e_atLowerLimit){var newImpulse=this.m_impulse.z+impulse_v3.z;if(newImpulse<0){var rhs_x=-Cdot1.x+this.m_impulse.z*this.m_mass.ez.x;var rhs_y=-Cdot1.y+this.m_impulse.z*this.m_mass.ez.y;var reduced_v2=this.m_mass.Solve22(rhs_x,rhs_y,b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);impulse_v3.x=reduced_v2.x;impulse_v3.y=reduced_v2.y;impulse_v3.z=-this.m_impulse.z;this.m_impulse.x+=reduced_v2.x;this.m_impulse.y+=reduced_v2.y;this.m_impulse.z=0;}else {this.m_impulse.SelfAdd(impulse_v3);}}else if(this.m_limitState===exports.b2LimitState.e_atUpperLimit){var _newImpulse=this.m_impulse.z+impulse_v3.z;if(_newImpulse>0){var _rhs_x=-Cdot1.x+this.m_impulse.z*this.m_mass.ez.x;var _rhs_y=-Cdot1.y+this.m_impulse.z*this.m_mass.ez.y;var _reduced_v=this.m_mass.Solve22(_rhs_x,_rhs_y,b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);impulse_v3.x=_reduced_v.x;impulse_v3.y=_reduced_v.y;impulse_v3.z=-this.m_impulse.z;this.m_impulse.x+=_reduced_v.x;this.m_impulse.y+=_reduced_v.y;this.m_impulse.z=0;}else {this.m_impulse.SelfAdd(impulse_v3);}}var P=b2RevoluteJoint.SolveVelocityConstraints_s_P.Set(impulse_v3.x,impulse_v3.y);vA.SelfMulSub(mA,P);wA-=iA*(b2Vec2.CrossVV(this.m_rA,P)+impulse_v3.z);vB.SelfMulAdd(mB,P);wB+=iB*(b2Vec2.CrossVV(this.m_rB,P)+impulse_v3.z);}else {var Cdot_v2=b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2Vec2.s_t1),b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2);var impulse_v2=this.m_mass.Solve22(-Cdot_v2.x,-Cdot_v2.y,b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2);this.m_impulse.x+=impulse_v2.x;this.m_impulse.y+=impulse_v2.y;vA.SelfMulSub(mA,impulse_v2);wA-=iA*b2Vec2.CrossVV(this.m_rA,impulse_v2);vB.SelfMulAdd(mB,impulse_v2);wB+=iB*b2Vec2.CrossVV(this.m_rB,impulse_v2);}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto60.SolvePositionConstraints=function SolvePositionConstraints(data){var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);var angularError=0;var positionError=0;var fixedRotation=this.m_invIA+this.m_invIB===0;if(this.m_enableLimit&&this.m_limitState!==exports.b2LimitState.e_inactiveLimit&&!fixedRotation){var angle=aB-aA-this.m_referenceAngle;var limitImpulse=0;if(this.m_limitState===exports.b2LimitState.e_equalLimits){var C=b2Clamp(angle-this.m_lowerAngle,-b2_maxAngularCorrection,b2_maxAngularCorrection);limitImpulse=-this.m_motorMass*C;angularError=b2Abs(C);}else if(this.m_limitState===exports.b2LimitState.e_atLowerLimit){var _C=angle-this.m_lowerAngle;angularError=-_C;_C=b2Clamp(_C+b2_angularSlop,-b2_maxAngularCorrection,0);limitImpulse=-this.m_motorMass*_C;}else if(this.m_limitState===exports.b2LimitState.e_atUpperLimit){var _C2=angle-this.m_upperAngle;angularError=_C2;_C2=b2Clamp(_C2-b2_angularSlop,0,b2_maxAngularCorrection);limitImpulse=-this.m_motorMass*_C2;}aA-=this.m_invIA*limitImpulse;aB+=this.m_invIB*limitImpulse;}{qA.SetAngle(aA);qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var C_v2=b2Vec2.SubVV(b2Vec2.AddVV(cB,rB,b2Vec2.s_t0),b2Vec2.AddVV(cA,rA,b2Vec2.s_t1),b2RevoluteJoint.SolvePositionConstraints_s_C_v2);positionError=C_v2.Length();var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var K=this.m_K;K.ex.x=mA+mB+iA*rA.y*rA.y+iB*rB.y*rB.y;K.ex.y=-iA*rA.x*rA.y-iB*rB.x*rB.y;K.ey.x=K.ex.y;K.ey.y=mA+mB+iA*rA.x*rA.x+iB*rB.x*rB.x;var impulse=K.Solve(C_v2.x,C_v2.y,b2RevoluteJoint.SolvePositionConstraints_s_impulse).SelfNeg();cA.SelfMulSub(mA,impulse);aA-=iA*b2Vec2.CrossVV(rA,impulse);cB.SelfMulAdd(mB,impulse);aB+=iB*b2Vec2.CrossVV(rB,impulse);}data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;return positionError<=b2_linearSlop&&angularError<=b2_angularSlop;};_proto60.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto60.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto60.GetReactionForce=function GetReactionForce(inv_dt,out){out.x=inv_dt*this.m_impulse.x;out.y=inv_dt*this.m_impulse.y;return out;};_proto60.GetReactionTorque=function GetReactionTorque(inv_dt){return inv_dt*this.m_impulse.z;};_proto60.GetLocalAnchorA=function GetLocalAnchorA(){return this.m_localAnchorA;};_proto60.GetLocalAnchorB=function GetLocalAnchorB(){return this.m_localAnchorB;};_proto60.GetReferenceAngle=function GetReferenceAngle(){return this.m_referenceAngle;};_proto60.GetJointAngle=function GetJointAngle(){return this.m_bodyB.m_sweep.a-this.m_bodyA.m_sweep.a-this.m_referenceAngle;};_proto60.GetJointSpeed=function GetJointSpeed(){return this.m_bodyB.m_angularVelocity-this.m_bodyA.m_angularVelocity;};_proto60.IsMotorEnabled=function IsMotorEnabled(){return this.m_enableMotor;};_proto60.EnableMotor=function EnableMotor(flag){if(flag!==this.m_enableMotor){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableMotor=flag;}};_proto60.GetMotorTorque=function GetMotorTorque(inv_dt){return inv_dt*this.m_motorImpulse;};_proto60.GetMotorSpeed=function GetMotorSpeed(){return this.m_motorSpeed;};_proto60.SetMaxMotorTorque=function SetMaxMotorTorque(torque){if(torque!==this.m_maxMotorTorque){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_maxMotorTorque=torque;}};_proto60.GetMaxMotorTorque=function GetMaxMotorTorque(){return this.m_maxMotorTorque;};_proto60.IsLimitEnabled=function IsLimitEnabled(){return this.m_enableLimit;};_proto60.EnableLimit=function EnableLimit(flag){if(flag!==this.m_enableLimit){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableLimit=flag;this.m_impulse.z=0;}};_proto60.GetLowerLimit=function GetLowerLimit(){return this.m_lowerAngle;};_proto60.GetUpperLimit=function GetUpperLimit(){return this.m_upperAngle;};_proto60.SetLimits=function SetLimits(lower,upper){if(lower!==this.m_lowerAngle||upper!==this.m_upperAngle){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_impulse.z=0;this.m_lowerAngle=lower;this.m_upperAngle=upper;}};_proto60.SetMotorSpeed=function SetMotorSpeed(speed){if(speed!==this.m_motorSpeed){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_motorSpeed=speed;}};_proto60.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.referenceAngle = %.15f;\n",this.m_referenceAngle);log("  jd.enableLimit = %s;\n",this.m_enableLimit?"true":"false");log("  jd.lowerAngle = %.15f;\n",this.m_lowerAngle);log("  jd.upperAngle = %.15f;\n",this.m_upperAngle);log("  jd.enableMotor = %s;\n",this.m_enableMotor?"true":"false");log("  jd.motorSpeed = %.15f;\n",this.m_motorSpeed);log("  jd.maxMotorTorque = %.15f;\n",this.m_maxMotorTorque);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2RevoluteJoint;}(b2Joint);b2RevoluteJoint.InitVelocityConstraints_s_P=new b2Vec2();b2RevoluteJoint.SolveVelocityConstraints_s_P=new b2Vec2();b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2=new b2Vec2();b2RevoluteJoint.SolveVelocityConstraints_s_Cdot1=new b2Vec2();b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3=new b2Vec3();b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2=new b2Vec2();b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2=new b2Vec2();b2RevoluteJoint.SolvePositionConstraints_s_C_v2=new b2Vec2();b2RevoluteJoint.SolvePositionConstraints_s_impulse=new b2Vec2();var b2RopeJointDef=function(_b2JointDef10){_inheritsLoose(b2RopeJointDef,_b2JointDef10);function b2RopeJointDef(){var _this24;_this24=_b2JointDef10.call(this,exports.b2JointType.e_ropeJoint)||this;_this24.localAnchorA=new b2Vec2(-1,0);_this24.localAnchorB=new b2Vec2(1,0);_this24.maxLength=0;return _this24;}return b2RopeJointDef;}(b2JointDef);var b2RopeJoint=function(_b2Joint10){_inheritsLoose(b2RopeJoint,_b2Joint10);function b2RopeJoint(def){var _this25;_this25=_b2Joint10.call(this,def)||this;_this25.m_localAnchorA=new b2Vec2();_this25.m_localAnchorB=new b2Vec2();_this25.m_maxLength=0;_this25.m_length=0;_this25.m_impulse=0;_this25.m_indexA=0;_this25.m_indexB=0;_this25.m_u=new b2Vec2();_this25.m_rA=new b2Vec2();_this25.m_rB=new b2Vec2();_this25.m_localCenterA=new b2Vec2();_this25.m_localCenterB=new b2Vec2();_this25.m_invMassA=0;_this25.m_invMassB=0;_this25.m_invIA=0;_this25.m_invIB=0;_this25.m_mass=0;_this25.m_state=exports.b2LimitState.e_inactiveLimit;_this25.m_qA=new b2Rot();_this25.m_qB=new b2Rot();_this25.m_lalcA=new b2Vec2();_this25.m_lalcB=new b2Vec2();_this25.m_localAnchorA.Copy(b2Maybe(def.localAnchorA,new b2Vec2(-1,0)));_this25.m_localAnchorB.Copy(b2Maybe(def.localAnchorB,new b2Vec2(1,0)));_this25.m_maxLength=b2Maybe(def.maxLength,0);return _this25;}var _proto61=b2RopeJoint.prototype;_proto61.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);this.m_u.Copy(cB).SelfAdd(this.m_rB).SelfSub(cA).SelfSub(this.m_rA);this.m_length=this.m_u.Length();var C=this.m_length-this.m_maxLength;if(C>0){this.m_state=exports.b2LimitState.e_atUpperLimit;}else {this.m_state=exports.b2LimitState.e_inactiveLimit;}if(this.m_length>b2_linearSlop){this.m_u.SelfMul(1/this.m_length);}else {this.m_u.SetZero();this.m_mass=0;this.m_impulse=0;return;}var crA=b2Vec2.CrossVV(this.m_rA,this.m_u);var crB=b2Vec2.CrossVV(this.m_rB,this.m_u);var invMass=this.m_invMassA+this.m_invIA*crA*crA+this.m_invMassB+this.m_invIB*crB*crB;this.m_mass=invMass!==0?1/invMass:0;if(data.step.warmStarting){this.m_impulse*=data.step.dtRatio;var P=b2Vec2.MulSV(this.m_impulse,this.m_u,b2RopeJoint.InitVelocityConstraints_s_P);vA.SelfMulSub(this.m_invMassA,P);wA-=this.m_invIA*b2Vec2.CrossVV(this.m_rA,P);vB.SelfMulAdd(this.m_invMassB,P);wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,P);}else {this.m_impulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto61.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var vpA=b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2RopeJoint.SolveVelocityConstraints_s_vpA);var vpB=b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2RopeJoint.SolveVelocityConstraints_s_vpB);var C=this.m_length-this.m_maxLength;var Cdot=b2Vec2.DotVV(this.m_u,b2Vec2.SubVV(vpB,vpA,b2Vec2.s_t0));if(C<0){Cdot+=data.step.inv_dt*C;}var impulse=-this.m_mass*Cdot;var oldImpulse=this.m_impulse;this.m_impulse=b2Min(0,this.m_impulse+impulse);impulse=this.m_impulse-oldImpulse;var P=b2Vec2.MulSV(impulse,this.m_u,b2RopeJoint.SolveVelocityConstraints_s_P);vA.SelfMulSub(this.m_invMassA,P);wA-=this.m_invIA*b2Vec2.CrossVV(this.m_rA,P);vB.SelfMulAdd(this.m_invMassB,P);wB+=this.m_invIB*b2Vec2.CrossVV(this.m_rB,P);data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto61.SolvePositionConstraints=function SolvePositionConstraints(data){var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var u=this.m_u.Copy(cB).SelfAdd(rB).SelfSub(cA).SelfSub(rA);var length=u.Normalize();var C=length-this.m_maxLength;C=b2Clamp(C,0,b2_maxLinearCorrection);var impulse=-this.m_mass*C;var P=b2Vec2.MulSV(impulse,u,b2RopeJoint.SolvePositionConstraints_s_P);cA.SelfMulSub(this.m_invMassA,P);aA-=this.m_invIA*b2Vec2.CrossVV(rA,P);cB.SelfMulAdd(this.m_invMassB,P);aB+=this.m_invIB*b2Vec2.CrossVV(rB,P);data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;return length-this.m_maxLength<b2_linearSlop;};_proto61.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto61.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto61.GetReactionForce=function GetReactionForce(inv_dt,out){return b2Vec2.MulSV(inv_dt*this.m_impulse,this.m_u,out);};_proto61.GetReactionTorque=function GetReactionTorque(inv_dt){return 0;};_proto61.GetLocalAnchorA=function GetLocalAnchorA(){return this.m_localAnchorA;};_proto61.GetLocalAnchorB=function GetLocalAnchorB(){return this.m_localAnchorB;};_proto61.SetMaxLength=function SetMaxLength(length){this.m_maxLength=length;};_proto61.GetMaxLength=function GetMaxLength(){return this.m_maxLength;};_proto61.GetLimitState=function GetLimitState(){return this.m_state;};_proto61.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2RopeJointDef = new b2RopeJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.maxLength = %.15f;\n",this.m_maxLength);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2RopeJoint;}(b2Joint);b2RopeJoint.InitVelocityConstraints_s_P=new b2Vec2();b2RopeJoint.SolveVelocityConstraints_s_vpA=new b2Vec2();b2RopeJoint.SolveVelocityConstraints_s_vpB=new b2Vec2();b2RopeJoint.SolveVelocityConstraints_s_P=new b2Vec2();b2RopeJoint.SolvePositionConstraints_s_P=new b2Vec2();var b2WeldJointDef=function(_b2JointDef11){_inheritsLoose(b2WeldJointDef,_b2JointDef11);function b2WeldJointDef(){var _this26;_this26=_b2JointDef11.call(this,exports.b2JointType.e_weldJoint)||this;_this26.localAnchorA=new b2Vec2();_this26.localAnchorB=new b2Vec2();_this26.referenceAngle=0;_this26.frequencyHz=0;_this26.dampingRatio=0;return _this26;}var _proto62=b2WeldJointDef.prototype;_proto62.Initialize=function Initialize(bA,bB,anchor){this.bodyA=bA;this.bodyB=bB;this.bodyA.GetLocalPoint(anchor,this.localAnchorA);this.bodyB.GetLocalPoint(anchor,this.localAnchorB);this.referenceAngle=this.bodyB.GetAngle()-this.bodyA.GetAngle();};return b2WeldJointDef;}(b2JointDef);var b2WeldJoint=function(_b2Joint11){_inheritsLoose(b2WeldJoint,_b2Joint11);function b2WeldJoint(def){var _this27;_this27=_b2Joint11.call(this,def)||this;_this27.m_frequencyHz=0;_this27.m_dampingRatio=0;_this27.m_bias=0;_this27.m_localAnchorA=new b2Vec2();_this27.m_localAnchorB=new b2Vec2();_this27.m_referenceAngle=0;_this27.m_gamma=0;_this27.m_impulse=new b2Vec3(0,0,0);_this27.m_indexA=0;_this27.m_indexB=0;_this27.m_rA=new b2Vec2();_this27.m_rB=new b2Vec2();_this27.m_localCenterA=new b2Vec2();_this27.m_localCenterB=new b2Vec2();_this27.m_invMassA=0;_this27.m_invMassB=0;_this27.m_invIA=0;_this27.m_invIB=0;_this27.m_mass=new b2Mat33();_this27.m_qA=new b2Rot();_this27.m_qB=new b2Rot();_this27.m_lalcA=new b2Vec2();_this27.m_lalcB=new b2Vec2();_this27.m_K=new b2Mat33();_this27.m_frequencyHz=b2Maybe(def.frequencyHz,0);_this27.m_dampingRatio=b2Maybe(def.dampingRatio,0);_this27.m_localAnchorA.Copy(b2Maybe(def.localAnchorA,b2Vec2.ZERO));_this27.m_localAnchorB.Copy(b2Maybe(def.localAnchorB,b2Vec2.ZERO));_this27.m_referenceAngle=b2Maybe(def.referenceAngle,0);_this27.m_impulse.SetZero();return _this27;}var _proto63=b2WeldJoint.prototype;_proto63.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var K=this.m_K;K.ex.x=mA+mB+this.m_rA.y*this.m_rA.y*iA+this.m_rB.y*this.m_rB.y*iB;K.ey.x=-this.m_rA.y*this.m_rA.x*iA-this.m_rB.y*this.m_rB.x*iB;K.ez.x=-this.m_rA.y*iA-this.m_rB.y*iB;K.ex.y=K.ey.x;K.ey.y=mA+mB+this.m_rA.x*this.m_rA.x*iA+this.m_rB.x*this.m_rB.x*iB;K.ez.y=this.m_rA.x*iA+this.m_rB.x*iB;K.ex.z=K.ez.x;K.ey.z=K.ez.y;K.ez.z=iA+iB;if(this.m_frequencyHz>0){K.GetInverse22(this.m_mass);var invM=iA+iB;var m=invM>0?1/invM:0;var C=aB-aA-this.m_referenceAngle;var omega=2*b2_pi*this.m_frequencyHz;var d=2*m*this.m_dampingRatio*omega;var k=m*omega*omega;var h=data.step.dt;this.m_gamma=h*(d+h*k);this.m_gamma=this.m_gamma!==0?1/this.m_gamma:0;this.m_bias=C*h*k*this.m_gamma;invM+=this.m_gamma;this.m_mass.ez.z=invM!==0?1/invM:0;}else {K.GetSymInverse33(this.m_mass);this.m_gamma=0;this.m_bias=0;}if(data.step.warmStarting){this.m_impulse.SelfMul(data.step.dtRatio);var P=b2WeldJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x,this.m_impulse.y);vA.SelfMulSub(mA,P);wA-=iA*(b2Vec2.CrossVV(this.m_rA,P)+this.m_impulse.z);vB.SelfMulAdd(mB,P);wB+=iB*(b2Vec2.CrossVV(this.m_rB,P)+this.m_impulse.z);}else {this.m_impulse.SetZero();}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto63.SolveVelocityConstraints=function SolveVelocityConstraints(data){var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;if(this.m_frequencyHz>0){var Cdot2=wB-wA;var impulse2=-this.m_mass.ez.z*(Cdot2+this.m_bias+this.m_gamma*this.m_impulse.z);this.m_impulse.z+=impulse2;wA-=iA*impulse2;wB+=iB*impulse2;var Cdot1=b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2Vec2.s_t1),b2WeldJoint.SolveVelocityConstraints_s_Cdot1);var impulse1=b2Mat33.MulM33XY(this.m_mass,Cdot1.x,Cdot1.y,b2WeldJoint.SolveVelocityConstraints_s_impulse1).SelfNeg();this.m_impulse.x+=impulse1.x;this.m_impulse.y+=impulse1.y;var P=impulse1;vA.SelfMulSub(mA,P);wA-=iA*b2Vec2.CrossVV(this.m_rA,P);vB.SelfMulAdd(mB,P);wB+=iB*b2Vec2.CrossVV(this.m_rB,P);}else {var _Cdot=b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,this.m_rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,this.m_rA,b2Vec2.s_t1),b2WeldJoint.SolveVelocityConstraints_s_Cdot1);var _Cdot2=wB-wA;var impulse=b2Mat33.MulM33XYZ(this.m_mass,_Cdot.x,_Cdot.y,_Cdot2,b2WeldJoint.SolveVelocityConstraints_s_impulse).SelfNeg();this.m_impulse.SelfAdd(impulse);var _P5=b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x,impulse.y);vA.SelfMulSub(mA,_P5);wA-=iA*(b2Vec2.CrossVV(this.m_rA,_P5)+impulse.z);vB.SelfMulAdd(mB,_P5);wB+=iB*(b2Vec2.CrossVV(this.m_rB,_P5)+impulse.z);}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto63.SolvePositionConstraints=function SolvePositionConstraints(data){var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var positionError,angularError;var K=this.m_K;K.ex.x=mA+mB+rA.y*rA.y*iA+rB.y*rB.y*iB;K.ey.x=-rA.y*rA.x*iA-rB.y*rB.x*iB;K.ez.x=-rA.y*iA-rB.y*iB;K.ex.y=K.ey.x;K.ey.y=mA+mB+rA.x*rA.x*iA+rB.x*rB.x*iB;K.ez.y=rA.x*iA+rB.x*iB;K.ex.z=K.ez.x;K.ey.z=K.ez.y;K.ez.z=iA+iB;if(this.m_frequencyHz>0){var C1=b2Vec2.SubVV(b2Vec2.AddVV(cB,rB,b2Vec2.s_t0),b2Vec2.AddVV(cA,rA,b2Vec2.s_t1),b2WeldJoint.SolvePositionConstraints_s_C1);positionError=C1.Length();angularError=0;var P=K.Solve22(C1.x,C1.y,b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();cA.SelfMulSub(mA,P);aA-=iA*b2Vec2.CrossVV(rA,P);cB.SelfMulAdd(mB,P);aB+=iB*b2Vec2.CrossVV(rB,P);}else {var _C3=b2Vec2.SubVV(b2Vec2.AddVV(cB,rB,b2Vec2.s_t0),b2Vec2.AddVV(cA,rA,b2Vec2.s_t1),b2WeldJoint.SolvePositionConstraints_s_C1);var C2=aB-aA-this.m_referenceAngle;positionError=_C3.Length();angularError=b2Abs(C2);var impulse=K.Solve33(_C3.x,_C3.y,C2,b2WeldJoint.SolvePositionConstraints_s_impulse).SelfNeg();var _P6=b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x,impulse.y);cA.SelfMulSub(mA,_P6);aA-=iA*(b2Vec2.CrossVV(this.m_rA,_P6)+impulse.z);cB.SelfMulAdd(mB,_P6);aB+=iB*(b2Vec2.CrossVV(this.m_rB,_P6)+impulse.z);}data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;return positionError<=b2_linearSlop&&angularError<=b2_angularSlop;};_proto63.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto63.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto63.GetReactionForce=function GetReactionForce(inv_dt,out){out.x=inv_dt*this.m_impulse.x;out.y=inv_dt*this.m_impulse.y;return out;};_proto63.GetReactionTorque=function GetReactionTorque(inv_dt){return inv_dt*this.m_impulse.z;};_proto63.GetLocalAnchorA=function GetLocalAnchorA(){return this.m_localAnchorA;};_proto63.GetLocalAnchorB=function GetLocalAnchorB(){return this.m_localAnchorB;};_proto63.GetReferenceAngle=function GetReferenceAngle(){return this.m_referenceAngle;};_proto63.SetFrequency=function SetFrequency(hz){this.m_frequencyHz=hz;};_proto63.GetFrequency=function GetFrequency(){return this.m_frequencyHz;};_proto63.SetDampingRatio=function SetDampingRatio(ratio){this.m_dampingRatio=ratio;};_proto63.GetDampingRatio=function GetDampingRatio(){return this.m_dampingRatio;};_proto63.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2WeldJointDef = new b2WeldJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.referenceAngle = %.15f;\n",this.m_referenceAngle);log("  jd.frequencyHz = %.15f;\n",this.m_frequencyHz);log("  jd.dampingRatio = %.15f;\n",this.m_dampingRatio);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2WeldJoint;}(b2Joint);b2WeldJoint.InitVelocityConstraints_s_P=new b2Vec2();b2WeldJoint.SolveVelocityConstraints_s_Cdot1=new b2Vec2();b2WeldJoint.SolveVelocityConstraints_s_impulse1=new b2Vec2();b2WeldJoint.SolveVelocityConstraints_s_impulse=new b2Vec3();b2WeldJoint.SolveVelocityConstraints_s_P=new b2Vec2();b2WeldJoint.SolvePositionConstraints_s_C1=new b2Vec2();b2WeldJoint.SolvePositionConstraints_s_P=new b2Vec2();b2WeldJoint.SolvePositionConstraints_s_impulse=new b2Vec3();var b2WheelJointDef=function(_b2JointDef12){_inheritsLoose(b2WheelJointDef,_b2JointDef12);function b2WheelJointDef(){var _this28;_this28=_b2JointDef12.call(this,exports.b2JointType.e_wheelJoint)||this;_this28.localAnchorA=new b2Vec2(0,0);_this28.localAnchorB=new b2Vec2(0,0);_this28.localAxisA=new b2Vec2(1,0);_this28.enableMotor=false;_this28.maxMotorTorque=0;_this28.motorSpeed=0;_this28.frequencyHz=2;_this28.dampingRatio=0.7;return _this28;}var _proto64=b2WheelJointDef.prototype;_proto64.Initialize=function Initialize(bA,bB,anchor,axis){this.bodyA=bA;this.bodyB=bB;this.bodyA.GetLocalPoint(anchor,this.localAnchorA);this.bodyB.GetLocalPoint(anchor,this.localAnchorB);this.bodyA.GetLocalVector(axis,this.localAxisA);};return b2WheelJointDef;}(b2JointDef);var b2WheelJoint=function(_b2Joint12){_inheritsLoose(b2WheelJoint,_b2Joint12);function b2WheelJoint(def){var _this29;_this29=_b2Joint12.call(this,def)||this;_this29.m_frequencyHz=0;_this29.m_dampingRatio=0;_this29.m_localAnchorA=new b2Vec2();_this29.m_localAnchorB=new b2Vec2();_this29.m_localXAxisA=new b2Vec2();_this29.m_localYAxisA=new b2Vec2();_this29.m_impulse=0;_this29.m_motorImpulse=0;_this29.m_springImpulse=0;_this29.m_maxMotorTorque=0;_this29.m_motorSpeed=0;_this29.m_enableMotor=false;_this29.m_indexA=0;_this29.m_indexB=0;_this29.m_localCenterA=new b2Vec2();_this29.m_localCenterB=new b2Vec2();_this29.m_invMassA=0;_this29.m_invMassB=0;_this29.m_invIA=0;_this29.m_invIB=0;_this29.m_ax=new b2Vec2();_this29.m_ay=new b2Vec2();_this29.m_sAx=0;_this29.m_sBx=0;_this29.m_sAy=0;_this29.m_sBy=0;_this29.m_mass=0;_this29.m_motorMass=0;_this29.m_springMass=0;_this29.m_bias=0;_this29.m_gamma=0;_this29.m_qA=new b2Rot();_this29.m_qB=new b2Rot();_this29.m_lalcA=new b2Vec2();_this29.m_lalcB=new b2Vec2();_this29.m_rA=new b2Vec2();_this29.m_rB=new b2Vec2();_this29.m_frequencyHz=b2Maybe(def.frequencyHz,2);_this29.m_dampingRatio=b2Maybe(def.dampingRatio,0.7);_this29.m_localAnchorA.Copy(b2Maybe(def.localAnchorA,b2Vec2.ZERO));_this29.m_localAnchorB.Copy(b2Maybe(def.localAnchorB,b2Vec2.ZERO));_this29.m_localXAxisA.Copy(b2Maybe(def.localAxisA,b2Vec2.UNITX));b2Vec2.CrossOneV(_this29.m_localXAxisA,_this29.m_localYAxisA);_this29.m_maxMotorTorque=b2Maybe(def.maxMotorTorque,0);_this29.m_motorSpeed=b2Maybe(def.motorSpeed,0);_this29.m_enableMotor=b2Maybe(def.enableMotor,false);_this29.m_ax.SetZero();_this29.m_ay.SetZero();return _this29;}var _proto65=b2WheelJoint.prototype;_proto65.GetMotorSpeed=function GetMotorSpeed(){return this.m_motorSpeed;};_proto65.GetMaxMotorTorque=function GetMaxMotorTorque(){return this.m_maxMotorTorque;};_proto65.SetSpringFrequencyHz=function SetSpringFrequencyHz(hz){this.m_frequencyHz=hz;};_proto65.GetSpringFrequencyHz=function GetSpringFrequencyHz(){return this.m_frequencyHz;};_proto65.SetSpringDampingRatio=function SetSpringDampingRatio(ratio){this.m_dampingRatio=ratio;};_proto65.GetSpringDampingRatio=function GetSpringDampingRatio(){return this.m_dampingRatio;};_proto65.InitVelocityConstraints=function InitVelocityConstraints(data){this.m_indexA=this.m_bodyA.m_islandIndex;this.m_indexB=this.m_bodyB.m_islandIndex;this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);this.m_invMassA=this.m_bodyA.m_invMass;this.m_invMassB=this.m_bodyB.m_invMass;this.m_invIA=this.m_bodyA.m_invI;this.m_invIB=this.m_bodyB.m_invI;var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var d=b2Vec2.SubVV(b2Vec2.AddVV(cB,rB,b2Vec2.s_t0),b2Vec2.AddVV(cA,rA,b2Vec2.s_t1),b2WheelJoint.InitVelocityConstraints_s_d);{b2Rot.MulRV(qA,this.m_localYAxisA,this.m_ay);this.m_sAy=b2Vec2.CrossVV(b2Vec2.AddVV(d,rA,b2Vec2.s_t0),this.m_ay);this.m_sBy=b2Vec2.CrossVV(rB,this.m_ay);this.m_mass=mA+mB+iA*this.m_sAy*this.m_sAy+iB*this.m_sBy*this.m_sBy;if(this.m_mass>0){this.m_mass=1/this.m_mass;}}this.m_springMass=0;this.m_bias=0;this.m_gamma=0;if(this.m_frequencyHz>0){b2Rot.MulRV(qA,this.m_localXAxisA,this.m_ax);this.m_sAx=b2Vec2.CrossVV(b2Vec2.AddVV(d,rA,b2Vec2.s_t0),this.m_ax);this.m_sBx=b2Vec2.CrossVV(rB,this.m_ax);var invMass=mA+mB+iA*this.m_sAx*this.m_sAx+iB*this.m_sBx*this.m_sBx;if(invMass>0){this.m_springMass=1/invMass;var C=b2Vec2.DotVV(d,this.m_ax);var omega=2*b2_pi*this.m_frequencyHz;var damp=2*this.m_springMass*this.m_dampingRatio*omega;var k=this.m_springMass*omega*omega;var h=data.step.dt;this.m_gamma=h*(damp+h*k);if(this.m_gamma>0){this.m_gamma=1/this.m_gamma;}this.m_bias=C*h*k*this.m_gamma;this.m_springMass=invMass+this.m_gamma;if(this.m_springMass>0){this.m_springMass=1/this.m_springMass;}}}else {this.m_springImpulse=0;}if(this.m_enableMotor){this.m_motorMass=iA+iB;if(this.m_motorMass>0){this.m_motorMass=1/this.m_motorMass;}}else {this.m_motorMass=0;this.m_motorImpulse=0;}if(data.step.warmStarting){this.m_impulse*=data.step.dtRatio;this.m_springImpulse*=data.step.dtRatio;this.m_motorImpulse*=data.step.dtRatio;var P=b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse,this.m_ay,b2Vec2.s_t0),b2Vec2.MulSV(this.m_springImpulse,this.m_ax,b2Vec2.s_t1),b2WheelJoint.InitVelocityConstraints_s_P);var LA=this.m_impulse*this.m_sAy+this.m_springImpulse*this.m_sAx+this.m_motorImpulse;var LB=this.m_impulse*this.m_sBy+this.m_springImpulse*this.m_sBx+this.m_motorImpulse;vA.SelfMulSub(this.m_invMassA,P);wA-=this.m_invIA*LA;vB.SelfMulAdd(this.m_invMassB,P);wB+=this.m_invIB*LB;}else {this.m_impulse=0;this.m_springImpulse=0;this.m_motorImpulse=0;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto65.SolveVelocityConstraints=function SolveVelocityConstraints(data){var mA=this.m_invMassA,mB=this.m_invMassB;var iA=this.m_invIA,iB=this.m_invIB;var vA=data.velocities[this.m_indexA].v;var wA=data.velocities[this.m_indexA].w;var vB=data.velocities[this.m_indexB].v;var wB=data.velocities[this.m_indexB].w;{var Cdot=b2Vec2.DotVV(this.m_ax,b2Vec2.SubVV(vB,vA,b2Vec2.s_t0))+this.m_sBx*wB-this.m_sAx*wA;var impulse=-this.m_springMass*(Cdot+this.m_bias+this.m_gamma*this.m_springImpulse);this.m_springImpulse+=impulse;var P=b2Vec2.MulSV(impulse,this.m_ax,b2WheelJoint.SolveVelocityConstraints_s_P);var LA=impulse*this.m_sAx;var LB=impulse*this.m_sBx;vA.SelfMulSub(mA,P);wA-=iA*LA;vB.SelfMulAdd(mB,P);wB+=iB*LB;}{var _Cdot3=wB-wA-this.m_motorSpeed;var _impulse=-this.m_motorMass*_Cdot3;var oldImpulse=this.m_motorImpulse;var maxImpulse=data.step.dt*this.m_maxMotorTorque;this.m_motorImpulse=b2Clamp(this.m_motorImpulse+_impulse,-maxImpulse,maxImpulse);_impulse=this.m_motorImpulse-oldImpulse;wA-=iA*_impulse;wB+=iB*_impulse;}{var _Cdot4=b2Vec2.DotVV(this.m_ay,b2Vec2.SubVV(vB,vA,b2Vec2.s_t0))+this.m_sBy*wB-this.m_sAy*wA;var _impulse2=-this.m_mass*_Cdot4;this.m_impulse+=_impulse2;var _P7=b2Vec2.MulSV(_impulse2,this.m_ay,b2WheelJoint.SolveVelocityConstraints_s_P);var _LA3=_impulse2*this.m_sAy;var _LB3=_impulse2*this.m_sBy;vA.SelfMulSub(mA,_P7);wA-=iA*_LA3;vB.SelfMulAdd(mB,_P7);wB+=iB*_LB3;}data.velocities[this.m_indexA].w=wA;data.velocities[this.m_indexB].w=wB;};_proto65.SolvePositionConstraints=function SolvePositionConstraints(data){var cA=data.positions[this.m_indexA].c;var aA=data.positions[this.m_indexA].a;var cB=data.positions[this.m_indexB].c;var aB=data.positions[this.m_indexB].a;var qA=this.m_qA.SetAngle(aA),qB=this.m_qB.SetAngle(aB);b2Vec2.SubVV(this.m_localAnchorA,this.m_localCenterA,this.m_lalcA);var rA=b2Rot.MulRV(qA,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,this.m_localCenterB,this.m_lalcB);var rB=b2Rot.MulRV(qB,this.m_lalcB,this.m_rB);var d=b2Vec2.AddVV(b2Vec2.SubVV(cB,cA,b2Vec2.s_t0),b2Vec2.SubVV(rB,rA,b2Vec2.s_t1),b2WheelJoint.SolvePositionConstraints_s_d);var ay=b2Rot.MulRV(qA,this.m_localYAxisA,this.m_ay);var sAy=b2Vec2.CrossVV(b2Vec2.AddVV(d,rA,b2Vec2.s_t0),ay);var sBy=b2Vec2.CrossVV(rB,ay);var C=b2Vec2.DotVV(d,this.m_ay);var k=this.m_invMassA+this.m_invMassB+this.m_invIA*this.m_sAy*this.m_sAy+this.m_invIB*this.m_sBy*this.m_sBy;var impulse;if(k!==0){impulse=-C/k;}else {impulse=0;}var P=b2Vec2.MulSV(impulse,ay,b2WheelJoint.SolvePositionConstraints_s_P);var LA=impulse*sAy;var LB=impulse*sBy;cA.SelfMulSub(this.m_invMassA,P);aA-=this.m_invIA*LA;cB.SelfMulAdd(this.m_invMassB,P);aB+=this.m_invIB*LB;data.positions[this.m_indexA].a=aA;data.positions[this.m_indexB].a=aB;return b2Abs(C)<=b2_linearSlop;};_proto65.GetDefinition=function GetDefinition(def){return def;};_proto65.GetAnchorA=function GetAnchorA(out){return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,out);};_proto65.GetAnchorB=function GetAnchorB(out){return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,out);};_proto65.GetReactionForce=function GetReactionForce(inv_dt,out){out.x=inv_dt*(this.m_impulse*this.m_ay.x+this.m_springImpulse*this.m_ax.x);out.y=inv_dt*(this.m_impulse*this.m_ay.y+this.m_springImpulse*this.m_ax.y);return out;};_proto65.GetReactionTorque=function GetReactionTorque(inv_dt){return inv_dt*this.m_motorImpulse;};_proto65.GetLocalAnchorA=function GetLocalAnchorA(){return this.m_localAnchorA;};_proto65.GetLocalAnchorB=function GetLocalAnchorB(){return this.m_localAnchorB;};_proto65.GetLocalAxisA=function GetLocalAxisA(){return this.m_localXAxisA;};_proto65.GetJointTranslation=function GetJointTranslation(){return this.GetPrismaticJointTranslation();};_proto65.GetJointLinearSpeed=function GetJointLinearSpeed(){return this.GetPrismaticJointSpeed();};_proto65.GetJointAngle=function GetJointAngle(){return this.GetRevoluteJointAngle();};_proto65.GetJointAngularSpeed=function GetJointAngularSpeed(){return this.GetRevoluteJointSpeed();};_proto65.GetPrismaticJointTranslation=function GetPrismaticJointTranslation(){var bA=this.m_bodyA;var bB=this.m_bodyB;var pA=bA.GetWorldPoint(this.m_localAnchorA,new b2Vec2());var pB=bB.GetWorldPoint(this.m_localAnchorB,new b2Vec2());var d=b2Vec2.SubVV(pB,pA,new b2Vec2());var axis=bA.GetWorldVector(this.m_localXAxisA,new b2Vec2());var translation=b2Vec2.DotVV(d,axis);return translation;};_proto65.GetPrismaticJointSpeed=function GetPrismaticJointSpeed(){var bA=this.m_bodyA;var bB=this.m_bodyB;b2Vec2.SubVV(this.m_localAnchorA,bA.m_sweep.localCenter,this.m_lalcA);var rA=b2Rot.MulRV(bA.m_xf.q,this.m_lalcA,this.m_rA);b2Vec2.SubVV(this.m_localAnchorB,bB.m_sweep.localCenter,this.m_lalcB);var rB=b2Rot.MulRV(bB.m_xf.q,this.m_lalcB,this.m_rB);var pA=b2Vec2.AddVV(bA.m_sweep.c,rA,b2Vec2.s_t0);var pB=b2Vec2.AddVV(bB.m_sweep.c,rB,b2Vec2.s_t1);var d=b2Vec2.SubVV(pB,pA,b2Vec2.s_t2);var axis=bA.GetWorldVector(this.m_localXAxisA,new b2Vec2());var vA=bA.m_linearVelocity;var vB=bB.m_linearVelocity;var wA=bA.m_angularVelocity;var wB=bB.m_angularVelocity;var speed=b2Vec2.DotVV(d,b2Vec2.CrossSV(wA,axis,b2Vec2.s_t0))+b2Vec2.DotVV(axis,b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,rA,b2Vec2.s_t1),b2Vec2.s_t0));return speed;};_proto65.GetRevoluteJointAngle=function GetRevoluteJointAngle(){return this.m_bodyB.m_sweep.a-this.m_bodyA.m_sweep.a;};_proto65.GetRevoluteJointSpeed=function GetRevoluteJointSpeed(){var wA=this.m_bodyA.m_angularVelocity;var wB=this.m_bodyB.m_angularVelocity;return wB-wA;};_proto65.IsMotorEnabled=function IsMotorEnabled(){return this.m_enableMotor;};_proto65.EnableMotor=function EnableMotor(flag){if(flag!==this.m_enableMotor){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_enableMotor=flag;}};_proto65.SetMotorSpeed=function SetMotorSpeed(speed){if(speed!==this.m_motorSpeed){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_motorSpeed=speed;}};_proto65.SetMaxMotorTorque=function SetMaxMotorTorque(force){if(force!==this.m_maxMotorTorque){this.m_bodyA.SetAwake(true);this.m_bodyB.SetAwake(true);this.m_maxMotorTorque=force;}};_proto65.GetMotorTorque=function GetMotorTorque(inv_dt){return inv_dt*this.m_motorImpulse;};_proto65.Dump=function Dump(log){var indexA=this.m_bodyA.m_islandIndex;var indexB=this.m_bodyB.m_islandIndex;log("  const jd: b2WheelJointDef = new b2WheelJointDef();\n");log("  jd.bodyA = bodies[%d];\n",indexA);log("  jd.bodyB = bodies[%d];\n",indexB);log("  jd.collideConnected = %s;\n",this.m_collideConnected?"true":"false");log("  jd.localAnchorA.Set(%.15f, %.15f);\n",this.m_localAnchorA.x,this.m_localAnchorA.y);log("  jd.localAnchorB.Set(%.15f, %.15f);\n",this.m_localAnchorB.x,this.m_localAnchorB.y);log("  jd.localAxisA.Set(%.15f, %.15f);\n",this.m_localXAxisA.x,this.m_localXAxisA.y);log("  jd.enableMotor = %s;\n",this.m_enableMotor?"true":"false");log("  jd.motorSpeed = %.15f;\n",this.m_motorSpeed);log("  jd.maxMotorTorque = %.15f;\n",this.m_maxMotorTorque);log("  jd.frequencyHz = %.15f;\n",this.m_frequencyHz);log("  jd.dampingRatio = %.15f;\n",this.m_dampingRatio);log("  joints[%d] = this.m_world.CreateJoint(jd);\n",this.m_index);};return b2WheelJoint;}(b2Joint);b2WheelJoint.InitVelocityConstraints_s_d=new b2Vec2();b2WheelJoint.InitVelocityConstraints_s_P=new b2Vec2();b2WheelJoint.SolveVelocityConstraints_s_P=new b2Vec2();b2WheelJoint.SolvePositionConstraints_s_d=new b2Vec2();b2WheelJoint.SolvePositionConstraints_s_P=new b2Vec2();function b2MixFriction(friction1,friction2){return b2Sqrt(friction1*friction2);}function b2MixRestitution(restitution1,restitution2){return restitution1>restitution2?restitution1:restitution2;}var b2ContactEdge=function(){function b2ContactEdge(contact){this._other=null;this.prev=null;this.next=null;this.contact=contact;}var _proto66=b2ContactEdge.prototype;_proto66.Reset=function Reset(){this._other=null;this.prev=null;this.next=null;};_createClass(b2ContactEdge,[{key:"other",get:function get(){if(this._other===null){throw new Error();}return this._other;},set:function set(value){if(this._other!==null){throw new Error();}this._other=value;}}]);return b2ContactEdge;}();var b2Contact=function(){function b2Contact(){this.m_islandFlag=false;this.m_touchingFlag=false;this.m_enabledFlag=false;this.m_filterFlag=false;this.m_bulletHitFlag=false;this.m_toiFlag=false;this.m_prev=null;this.m_next=null;this.m_nodeA=new b2ContactEdge(this);this.m_nodeB=new b2ContactEdge(this);this.m_indexA=0;this.m_indexB=0;this.m_manifold=new b2Manifold();this.m_toiCount=0;this.m_toi=0;this.m_friction=0;this.m_restitution=0;this.m_tangentSpeed=0;this.m_oldManifold=new b2Manifold();}var _proto67=b2Contact.prototype;_proto67.GetManifold=function GetManifold(){return this.m_manifold;};_proto67.GetWorldManifold=function GetWorldManifold(worldManifold){var bodyA=this.m_fixtureA.GetBody();var bodyB=this.m_fixtureB.GetBody();var shapeA=this.GetShapeA();var shapeB=this.GetShapeB();worldManifold.Initialize(this.m_manifold,bodyA.GetTransform(),shapeA.m_radius,bodyB.GetTransform(),shapeB.m_radius);};_proto67.IsTouching=function IsTouching(){return this.m_touchingFlag;};_proto67.SetEnabled=function SetEnabled(flag){this.m_enabledFlag=flag;};_proto67.IsEnabled=function IsEnabled(){return this.m_enabledFlag;};_proto67.GetNext=function GetNext(){return this.m_next;};_proto67.GetFixtureA=function GetFixtureA(){return this.m_fixtureA;};_proto67.GetChildIndexA=function GetChildIndexA(){return this.m_indexA;};_proto67.GetShapeA=function GetShapeA(){return this.m_fixtureA.GetShape();};_proto67.GetFixtureB=function GetFixtureB(){return this.m_fixtureB;};_proto67.GetChildIndexB=function GetChildIndexB(){return this.m_indexB;};_proto67.GetShapeB=function GetShapeB(){return this.m_fixtureB.GetShape();};_proto67.FlagForFiltering=function FlagForFiltering(){this.m_filterFlag=true;};_proto67.SetFriction=function SetFriction(friction){this.m_friction=friction;};_proto67.GetFriction=function GetFriction(){return this.m_friction;};_proto67.ResetFriction=function ResetFriction(){this.m_friction=b2MixFriction(this.m_fixtureA.m_friction,this.m_fixtureB.m_friction);};_proto67.SetRestitution=function SetRestitution(restitution){this.m_restitution=restitution;};_proto67.GetRestitution=function GetRestitution(){return this.m_restitution;};_proto67.ResetRestitution=function ResetRestitution(){this.m_restitution=b2MixRestitution(this.m_fixtureA.m_restitution,this.m_fixtureB.m_restitution);};_proto67.SetTangentSpeed=function SetTangentSpeed(speed){this.m_tangentSpeed=speed;};_proto67.GetTangentSpeed=function GetTangentSpeed(){return this.m_tangentSpeed;};_proto67.Reset=function Reset(fixtureA,indexA,fixtureB,indexB){this.m_islandFlag=false;this.m_touchingFlag=false;this.m_enabledFlag=true;this.m_filterFlag=false;this.m_bulletHitFlag=false;this.m_toiFlag=false;this.m_fixtureA=fixtureA;this.m_fixtureB=fixtureB;this.m_indexA=indexA;this.m_indexB=indexB;this.m_manifold.pointCount=0;this.m_prev=null;this.m_next=null;this.m_nodeA.Reset();this.m_nodeB.Reset();this.m_toiCount=0;this.m_friction=b2MixFriction(this.m_fixtureA.m_friction,this.m_fixtureB.m_friction);this.m_restitution=b2MixRestitution(this.m_fixtureA.m_restitution,this.m_fixtureB.m_restitution);};_proto67.Update=function Update(listener){var tManifold=this.m_oldManifold;this.m_oldManifold=this.m_manifold;this.m_manifold=tManifold;this.m_enabledFlag=true;var touching=false;var wasTouching=this.m_touchingFlag;var sensorA=this.m_fixtureA.IsSensor();var sensorB=this.m_fixtureB.IsSensor();var sensor=sensorA||sensorB;var bodyA=this.m_fixtureA.GetBody();var bodyB=this.m_fixtureB.GetBody();var xfA=bodyA.GetTransform();var xfB=bodyB.GetTransform();if(sensor){var shapeA=this.GetShapeA();var shapeB=this.GetShapeB();touching=b2TestOverlapShape(shapeA,this.m_indexA,shapeB,this.m_indexB,xfA,xfB);this.m_manifold.pointCount=0;}else {this.Evaluate(this.m_manifold,xfA,xfB);touching=this.m_manifold.pointCount>0;for(var i=0;i<this.m_manifold.pointCount;++i){var mp2=this.m_manifold.points[i];mp2.normalImpulse=0;mp2.tangentImpulse=0;var id2=mp2.id;for(var j=0;j<this.m_oldManifold.pointCount;++j){var mp1=this.m_oldManifold.points[j];if(mp1.id.key===id2.key){mp2.normalImpulse=mp1.normalImpulse;mp2.tangentImpulse=mp1.tangentImpulse;break;}}}if(touching!==wasTouching){bodyA.SetAwake(true);bodyB.SetAwake(true);}}this.m_touchingFlag=touching;if(!wasTouching&&touching&&listener){listener.BeginContact(this);}if(wasTouching&&!touching&&listener){listener.EndContact(this);}if(!sensor&&touching&&listener){listener.PreSolve(this,this.m_oldManifold);}};_proto67.ComputeTOI=function ComputeTOI(sweepA,sweepB){var input=b2Contact.ComputeTOI_s_input;input.proxyA.SetShape(this.GetShapeA(),this.m_indexA);input.proxyB.SetShape(this.GetShapeB(),this.m_indexB);input.sweepA.Copy(sweepA);input.sweepB.Copy(sweepB);input.tMax=b2_linearSlop;var output=b2Contact.ComputeTOI_s_output;b2TimeOfImpact(output,input);return output.t;};return b2Contact;}();b2Contact.ComputeTOI_s_input=new b2TOIInput();b2Contact.ComputeTOI_s_output=new b2TOIOutput();var b2CircleContact=function(_b2Contact){_inheritsLoose(b2CircleContact,_b2Contact);function b2CircleContact(){return _b2Contact.apply(this,arguments)||this;}b2CircleContact.Create=function Create(){return new b2CircleContact();};b2CircleContact.Destroy=function Destroy(contact){};var _proto68=b2CircleContact.prototype;_proto68.Evaluate=function Evaluate(manifold,xfA,xfB){b2CollideCircles(manifold,this.GetShapeA(),xfA,this.GetShapeB(),xfB);};return b2CircleContact;}(b2Contact);var b2PolygonContact=function(_b2Contact2){_inheritsLoose(b2PolygonContact,_b2Contact2);function b2PolygonContact(){return _b2Contact2.apply(this,arguments)||this;}b2PolygonContact.Create=function Create(){return new b2PolygonContact();};b2PolygonContact.Destroy=function Destroy(contact){};var _proto69=b2PolygonContact.prototype;_proto69.Evaluate=function Evaluate(manifold,xfA,xfB){b2CollidePolygons(manifold,this.GetShapeA(),xfA,this.GetShapeB(),xfB);};return b2PolygonContact;}(b2Contact);var b2PolygonAndCircleContact=function(_b2Contact3){_inheritsLoose(b2PolygonAndCircleContact,_b2Contact3);function b2PolygonAndCircleContact(){return _b2Contact3.apply(this,arguments)||this;}b2PolygonAndCircleContact.Create=function Create(){return new b2PolygonAndCircleContact();};b2PolygonAndCircleContact.Destroy=function Destroy(contact){};var _proto70=b2PolygonAndCircleContact.prototype;_proto70.Evaluate=function Evaluate(manifold,xfA,xfB){b2CollidePolygonAndCircle(manifold,this.GetShapeA(),xfA,this.GetShapeB(),xfB);};return b2PolygonAndCircleContact;}(b2Contact);var b2EdgeAndCircleContact=function(_b2Contact4){_inheritsLoose(b2EdgeAndCircleContact,_b2Contact4);function b2EdgeAndCircleContact(){return _b2Contact4.apply(this,arguments)||this;}b2EdgeAndCircleContact.Create=function Create(){return new b2EdgeAndCircleContact();};b2EdgeAndCircleContact.Destroy=function Destroy(contact){};var _proto71=b2EdgeAndCircleContact.prototype;_proto71.Evaluate=function Evaluate(manifold,xfA,xfB){b2CollideEdgeAndCircle(manifold,this.GetShapeA(),xfA,this.GetShapeB(),xfB);};return b2EdgeAndCircleContact;}(b2Contact);var b2EdgeAndPolygonContact=function(_b2Contact5){_inheritsLoose(b2EdgeAndPolygonContact,_b2Contact5);function b2EdgeAndPolygonContact(){return _b2Contact5.apply(this,arguments)||this;}b2EdgeAndPolygonContact.Create=function Create(){return new b2EdgeAndPolygonContact();};b2EdgeAndPolygonContact.Destroy=function Destroy(contact){};var _proto72=b2EdgeAndPolygonContact.prototype;_proto72.Evaluate=function Evaluate(manifold,xfA,xfB){b2CollideEdgeAndPolygon(manifold,this.GetShapeA(),xfA,this.GetShapeB(),xfB);};return b2EdgeAndPolygonContact;}(b2Contact);var b2ChainAndCircleContact=function(_b2Contact6){_inheritsLoose(b2ChainAndCircleContact,_b2Contact6);function b2ChainAndCircleContact(){return _b2Contact6.apply(this,arguments)||this;}b2ChainAndCircleContact.Create=function Create(){return new b2ChainAndCircleContact();};b2ChainAndCircleContact.Destroy=function Destroy(contact){};var _proto73=b2ChainAndCircleContact.prototype;_proto73.Evaluate=function Evaluate(manifold,xfA,xfB){var edge=b2ChainAndCircleContact.Evaluate_s_edge;this.GetShapeA().GetChildEdge(edge,this.m_indexA);b2CollideEdgeAndCircle(manifold,edge,xfA,this.GetShapeB(),xfB);};return b2ChainAndCircleContact;}(b2Contact);b2ChainAndCircleContact.Evaluate_s_edge=new b2EdgeShape();var b2ChainAndPolygonContact=function(_b2Contact7){_inheritsLoose(b2ChainAndPolygonContact,_b2Contact7);function b2ChainAndPolygonContact(){return _b2Contact7.apply(this,arguments)||this;}b2ChainAndPolygonContact.Create=function Create(){return new b2ChainAndPolygonContact();};b2ChainAndPolygonContact.Destroy=function Destroy(contact){};var _proto74=b2ChainAndPolygonContact.prototype;_proto74.Evaluate=function Evaluate(manifold,xfA,xfB){var edge=b2ChainAndPolygonContact.Evaluate_s_edge;this.GetShapeA().GetChildEdge(edge,this.m_indexA);b2CollideEdgeAndPolygon(manifold,edge,xfA,this.GetShapeB(),xfB);};return b2ChainAndPolygonContact;}(b2Contact);b2ChainAndPolygonContact.Evaluate_s_edge=new b2EdgeShape();var b2ContactRegister=function b2ContactRegister(){this.pool=[];this.createFcn=null;this.destroyFcn=null;this.primary=false;};var b2ContactFactory=function(){function b2ContactFactory(){this.m_registers=[];this.InitializeRegisters();}var _proto75=b2ContactFactory.prototype;_proto75.AddType=function AddType(createFcn,destroyFcn,typeA,typeB){var pool=[];function poolCreateFcn(){return pool.pop()||createFcn();}function poolDestroyFcn(contact){pool.push(contact);}this.m_registers[typeA][typeB].pool=pool;this.m_registers[typeA][typeB].createFcn=poolCreateFcn;this.m_registers[typeA][typeB].destroyFcn=poolDestroyFcn;this.m_registers[typeA][typeB].primary=true;if(typeA!==typeB){this.m_registers[typeB][typeA].pool=pool;this.m_registers[typeB][typeA].createFcn=poolCreateFcn;this.m_registers[typeB][typeA].destroyFcn=poolDestroyFcn;this.m_registers[typeB][typeA].primary=false;}};_proto75.InitializeRegisters=function InitializeRegisters(){for(var i=0;i<exports.b2ShapeType.e_shapeTypeCount;i++){this.m_registers[i]=[];for(var j=0;j<exports.b2ShapeType.e_shapeTypeCount;j++){this.m_registers[i][j]=new b2ContactRegister();}}this.AddType(b2CircleContact.Create,b2CircleContact.Destroy,exports.b2ShapeType.e_circleShape,exports.b2ShapeType.e_circleShape);this.AddType(b2PolygonAndCircleContact.Create,b2PolygonAndCircleContact.Destroy,exports.b2ShapeType.e_polygonShape,exports.b2ShapeType.e_circleShape);this.AddType(b2PolygonContact.Create,b2PolygonContact.Destroy,exports.b2ShapeType.e_polygonShape,exports.b2ShapeType.e_polygonShape);this.AddType(b2EdgeAndCircleContact.Create,b2EdgeAndCircleContact.Destroy,exports.b2ShapeType.e_edgeShape,exports.b2ShapeType.e_circleShape);this.AddType(b2EdgeAndPolygonContact.Create,b2EdgeAndPolygonContact.Destroy,exports.b2ShapeType.e_edgeShape,exports.b2ShapeType.e_polygonShape);this.AddType(b2ChainAndCircleContact.Create,b2ChainAndCircleContact.Destroy,exports.b2ShapeType.e_chainShape,exports.b2ShapeType.e_circleShape);this.AddType(b2ChainAndPolygonContact.Create,b2ChainAndPolygonContact.Destroy,exports.b2ShapeType.e_chainShape,exports.b2ShapeType.e_polygonShape);};_proto75.Create=function Create(fixtureA,indexA,fixtureB,indexB){var typeA=fixtureA.GetType();var typeB=fixtureB.GetType();var reg=this.m_registers[typeA][typeB];if(reg.createFcn){var c=reg.createFcn();if(reg.primary){c.Reset(fixtureA,indexA,fixtureB,indexB);}else {c.Reset(fixtureB,indexB,fixtureA,indexA);}return c;}else {return null;}};_proto75.Destroy=function Destroy(contact){var typeA=contact.m_fixtureA.GetType();var typeB=contact.m_fixtureB.GetType();var reg=this.m_registers[typeA][typeB];if(reg.destroyFcn){reg.destroyFcn(contact);}};return b2ContactFactory;}();var b2DestructionListener=function(){function b2DestructionListener(){}var _proto76=b2DestructionListener.prototype;_proto76.SayGoodbyeJoint=function SayGoodbyeJoint(joint){};_proto76.SayGoodbyeFixture=function SayGoodbyeFixture(fixture){};_proto76.SayGoodbyeParticleGroup=function SayGoodbyeParticleGroup(group){};_proto76.SayGoodbyeParticle=function SayGoodbyeParticle(system,index){};return b2DestructionListener;}();var b2ContactFilter=function(){function b2ContactFilter(){}var _proto77=b2ContactFilter.prototype;_proto77.ShouldCollide=function ShouldCollide(fixtureA,fixtureB){var bodyA=fixtureA.GetBody();var bodyB=fixtureB.GetBody();if(bodyB.GetType()===exports.b2BodyType.b2_staticBody&&bodyA.GetType()===exports.b2BodyType.b2_staticBody){return false;}if(!bodyB.ShouldCollideConnected(bodyA)){return false;}var filter1=fixtureA.GetFilterData();var filter2=fixtureB.GetFilterData();if(filter1.groupIndex===filter2.groupIndex&&filter1.groupIndex!==0){return filter1.groupIndex>0;}var collide=(filter1.maskBits&filter2.categoryBits)!==0&&(filter1.categoryBits&filter2.maskBits)!==0;return collide;};_proto77.ShouldCollideFixtureParticle=function ShouldCollideFixtureParticle(fixture,system,index){return true;};_proto77.ShouldCollideParticleParticle=function ShouldCollideParticleParticle(system,indexA,indexB){return true;};return b2ContactFilter;}();b2ContactFilter.b2_defaultFilter=new b2ContactFilter();var b2ContactImpulse=function b2ContactImpulse(){this.normalImpulses=b2MakeNumberArray(b2_maxManifoldPoints);this.tangentImpulses=b2MakeNumberArray(b2_maxManifoldPoints);this.count=0;};var b2ContactListener=function(){function b2ContactListener(){}var _proto78=b2ContactListener.prototype;_proto78.BeginContact=function BeginContact(contact){};_proto78.EndContact=function EndContact(contact){};_proto78.BeginContactFixtureParticle=function BeginContactFixtureParticle(system,contact){};_proto78.EndContactFixtureParticle=function EndContactFixtureParticle(system,contact){};_proto78.BeginContactParticleParticle=function BeginContactParticleParticle(system,contact){};_proto78.EndContactParticleParticle=function EndContactParticleParticle(system,contact){};_proto78.PreSolve=function PreSolve(contact,oldManifold){};_proto78.PostSolve=function PostSolve(contact,impulse){};return b2ContactListener;}();b2ContactListener.b2_defaultListener=new b2ContactListener();var b2QueryCallback=function(){function b2QueryCallback(){}var _proto79=b2QueryCallback.prototype;_proto79.ReportFixture=function ReportFixture(fixture){return true;};_proto79.ReportParticle=function ReportParticle(system,index){return false;};_proto79.ShouldQueryParticleSystem=function ShouldQueryParticleSystem(system){return true;};return b2QueryCallback;}();var b2RayCastCallback=function(){function b2RayCastCallback(){}var _proto80=b2RayCastCallback.prototype;_proto80.ReportFixture=function ReportFixture(fixture,point,normal,fraction){return fraction;};_proto80.ReportParticle=function ReportParticle(system,index,point,normal,fraction){return 0;};_proto80.ShouldQueryParticleSystem=function ShouldQueryParticleSystem(system){return true;};return b2RayCastCallback;}();var b2ContactManager=function(){function b2ContactManager(){this.m_broadPhase=new b2BroadPhase();this.m_contactList=null;this.m_contactCount=0;this.m_contactFilter=b2ContactFilter.b2_defaultFilter;this.m_contactListener=b2ContactListener.b2_defaultListener;this.m_contactFactory=new b2ContactFactory();}var _proto81=b2ContactManager.prototype;_proto81.AddPair=function AddPair(proxyA,proxyB){var fixtureA=proxyA.fixture;var fixtureB=proxyB.fixture;var indexA=proxyA.childIndex;var indexB=proxyB.childIndex;var bodyA=fixtureA.GetBody();var bodyB=fixtureB.GetBody();if(bodyA===bodyB){return;}var edge=bodyB.GetContactList();while(edge){if(edge.other===bodyA){var fA=edge.contact.GetFixtureA();var fB=edge.contact.GetFixtureB();var iA=edge.contact.GetChildIndexA();var iB=edge.contact.GetChildIndexB();if(fA===fixtureA&&fB===fixtureB&&iA===indexA&&iB===indexB){return;}if(fA===fixtureB&&fB===fixtureA&&iA===indexB&&iB===indexA){return;}}edge=edge.next;}if(this.m_contactFilter&&!this.m_contactFilter.ShouldCollide(fixtureA,fixtureB)){return;}var c=this.m_contactFactory.Create(fixtureA,indexA,fixtureB,indexB);if(c===null){return;}fixtureA=c.GetFixtureA();fixtureB=c.GetFixtureB();indexA=c.GetChildIndexA();indexB=c.GetChildIndexB();bodyA=fixtureA.m_body;bodyB=fixtureB.m_body;c.m_prev=null;c.m_next=this.m_contactList;if(this.m_contactList!==null){this.m_contactList.m_prev=c;}this.m_contactList=c;c.m_nodeA.other=bodyB;c.m_nodeA.prev=null;c.m_nodeA.next=bodyA.m_contactList;if(bodyA.m_contactList!==null){bodyA.m_contactList.prev=c.m_nodeA;}bodyA.m_contactList=c.m_nodeA;c.m_nodeB.other=bodyA;c.m_nodeB.prev=null;c.m_nodeB.next=bodyB.m_contactList;if(bodyB.m_contactList!==null){bodyB.m_contactList.prev=c.m_nodeB;}bodyB.m_contactList=c.m_nodeB;if(!fixtureA.IsSensor()&&!fixtureB.IsSensor()){bodyA.SetAwake(true);bodyB.SetAwake(true);}++this.m_contactCount;};_proto81.FindNewContacts=function FindNewContacts(){var _this30=this;this.m_broadPhase.UpdatePairs(function(proxyA,proxyB){_this30.AddPair(proxyA,proxyB);});};_proto81.Destroy=function Destroy(c){var fixtureA=c.GetFixtureA();var fixtureB=c.GetFixtureB();var bodyA=fixtureA.GetBody();var bodyB=fixtureB.GetBody();if(this.m_contactListener&&c.IsTouching()){this.m_contactListener.EndContact(c);}if(c.m_prev){c.m_prev.m_next=c.m_next;}if(c.m_next){c.m_next.m_prev=c.m_prev;}if(c===this.m_contactList){this.m_contactList=c.m_next;}if(c.m_nodeA.prev){c.m_nodeA.prev.next=c.m_nodeA.next;}if(c.m_nodeA.next){c.m_nodeA.next.prev=c.m_nodeA.prev;}if(c.m_nodeA===bodyA.m_contactList){bodyA.m_contactList=c.m_nodeA.next;}if(c.m_nodeB.prev){c.m_nodeB.prev.next=c.m_nodeB.next;}if(c.m_nodeB.next){c.m_nodeB.next.prev=c.m_nodeB.prev;}if(c.m_nodeB===bodyB.m_contactList){bodyB.m_contactList=c.m_nodeB.next;}if(c.m_manifold.pointCount>0&&!fixtureA.IsSensor()&&!fixtureB.IsSensor()){fixtureA.GetBody().SetAwake(true);fixtureB.GetBody().SetAwake(true);}this.m_contactFactory.Destroy(c);--this.m_contactCount;};_proto81.Collide=function Collide(){var c=this.m_contactList;while(c){var fixtureA=c.GetFixtureA();var fixtureB=c.GetFixtureB();var indexA=c.GetChildIndexA();var indexB=c.GetChildIndexB();var bodyA=fixtureA.GetBody();var bodyB=fixtureB.GetBody();if(c.m_filterFlag){if(this.m_contactFilter&&!this.m_contactFilter.ShouldCollide(fixtureA,fixtureB)){var cNuke=c;c=cNuke.m_next;this.Destroy(cNuke);continue;}c.m_filterFlag=false;}var activeA=bodyA.IsAwake()&&bodyA.m_type!==exports.b2BodyType.b2_staticBody;var activeB=bodyB.IsAwake()&&bodyB.m_type!==exports.b2BodyType.b2_staticBody;if(!activeA&&!activeB){c=c.m_next;continue;}var treeNodeA=fixtureA.m_proxies[indexA].treeNode;var treeNodeB=fixtureB.m_proxies[indexB].treeNode;var overlap=b2TestOverlapAABB(treeNodeA.aabb,treeNodeB.aabb);if(!overlap){var _cNuke=c;c=_cNuke.m_next;this.Destroy(_cNuke);continue;}c.Update(this.m_contactListener);c=c.m_next;}};return b2ContactManager;}();var b2Profile=function(){function b2Profile(){this.step=0;this.collide=0;this.solve=0;this.solveInit=0;this.solveVelocity=0;this.solvePosition=0;this.broadphase=0;this.solveTOI=0;}var _proto82=b2Profile.prototype;_proto82.Reset=function Reset(){this.step=0;this.collide=0;this.solve=0;this.solveInit=0;this.solveVelocity=0;this.solvePosition=0;this.broadphase=0;this.solveTOI=0;return this;};return b2Profile;}();var b2TimeStep=function(){function b2TimeStep(){this.dt=0;this.inv_dt=0;this.dtRatio=0;this.velocityIterations=0;this.positionIterations=0;this.particleIterations=0;this.warmStarting=false;}var _proto83=b2TimeStep.prototype;_proto83.Copy=function Copy(step){this.dt=step.dt;this.inv_dt=step.inv_dt;this.dtRatio=step.dtRatio;this.positionIterations=step.positionIterations;this.velocityIterations=step.velocityIterations;this.particleIterations=step.particleIterations;this.warmStarting=step.warmStarting;return this;};return b2TimeStep;}();var b2Position=function(){function b2Position(){this.c=new b2Vec2();this.a=0;}b2Position.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2Position();});};return b2Position;}();var b2Velocity=function(){function b2Velocity(){this.v=new b2Vec2();this.w=0;}b2Velocity.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2Velocity();});};return b2Velocity;}();var b2SolverData=function b2SolverData(){this.step=new b2TimeStep();};var g_blockSolve=false;var b2VelocityConstraintPoint=function(){function b2VelocityConstraintPoint(){this.rA=new b2Vec2();this.rB=new b2Vec2();this.normalImpulse=0;this.tangentImpulse=0;this.normalMass=0;this.tangentMass=0;this.velocityBias=0;}b2VelocityConstraintPoint.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2VelocityConstraintPoint();});};return b2VelocityConstraintPoint;}();var b2ContactVelocityConstraint=function(){function b2ContactVelocityConstraint(){this.points=b2VelocityConstraintPoint.MakeArray(b2_maxManifoldPoints);this.normal=new b2Vec2();this.tangent=new b2Vec2();this.normalMass=new b2Mat22();this.K=new b2Mat22();this.indexA=0;this.indexB=0;this.invMassA=0;this.invMassB=0;this.invIA=0;this.invIB=0;this.friction=0;this.restitution=0;this.tangentSpeed=0;this.pointCount=0;this.contactIndex=0;}b2ContactVelocityConstraint.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2ContactVelocityConstraint();});};return b2ContactVelocityConstraint;}();var b2ContactPositionConstraint=function(){function b2ContactPositionConstraint(){this.localPoints=b2Vec2.MakeArray(b2_maxManifoldPoints);this.localNormal=new b2Vec2();this.localPoint=new b2Vec2();this.indexA=0;this.indexB=0;this.invMassA=0;this.invMassB=0;this.localCenterA=new b2Vec2();this.localCenterB=new b2Vec2();this.invIA=0;this.invIB=0;this.type=exports.b2ManifoldType.e_unknown;this.radiusA=0;this.radiusB=0;this.pointCount=0;}b2ContactPositionConstraint.MakeArray=function MakeArray(length){return b2MakeArray(length,function(i){return new b2ContactPositionConstraint();});};return b2ContactPositionConstraint;}();var b2ContactSolverDef=function b2ContactSolverDef(){this.step=new b2TimeStep();this.count=0;};var b2PositionSolverManifold=function(){function b2PositionSolverManifold(){this.normal=new b2Vec2();this.point=new b2Vec2();this.separation=0;}var _proto84=b2PositionSolverManifold.prototype;_proto84.Initialize=function Initialize(pc,xfA,xfB,index){var pointA=b2PositionSolverManifold.Initialize_s_pointA;var pointB=b2PositionSolverManifold.Initialize_s_pointB;var planePoint=b2PositionSolverManifold.Initialize_s_planePoint;var clipPoint=b2PositionSolverManifold.Initialize_s_clipPoint;switch(pc.type){case exports.b2ManifoldType.e_circles:{b2Transform.MulXV(xfA,pc.localPoint,pointA);b2Transform.MulXV(xfB,pc.localPoints[0],pointB);b2Vec2.SubVV(pointB,pointA,this.normal).SelfNormalize();b2Vec2.MidVV(pointA,pointB,this.point);this.separation=b2Vec2.DotVV(b2Vec2.SubVV(pointB,pointA,b2Vec2.s_t0),this.normal)-pc.radiusA-pc.radiusB;break;}case exports.b2ManifoldType.e_faceA:{b2Rot.MulRV(xfA.q,pc.localNormal,this.normal);b2Transform.MulXV(xfA,pc.localPoint,planePoint);b2Transform.MulXV(xfB,pc.localPoints[index],clipPoint);this.separation=b2Vec2.DotVV(b2Vec2.SubVV(clipPoint,planePoint,b2Vec2.s_t0),this.normal)-pc.radiusA-pc.radiusB;this.point.Copy(clipPoint);break;}case exports.b2ManifoldType.e_faceB:{b2Rot.MulRV(xfB.q,pc.localNormal,this.normal);b2Transform.MulXV(xfB,pc.localPoint,planePoint);b2Transform.MulXV(xfA,pc.localPoints[index],clipPoint);this.separation=b2Vec2.DotVV(b2Vec2.SubVV(clipPoint,planePoint,b2Vec2.s_t0),this.normal)-pc.radiusA-pc.radiusB;this.point.Copy(clipPoint);this.normal.SelfNeg();break;}}};return b2PositionSolverManifold;}();b2PositionSolverManifold.Initialize_s_pointA=new b2Vec2();b2PositionSolverManifold.Initialize_s_pointB=new b2Vec2();b2PositionSolverManifold.Initialize_s_planePoint=new b2Vec2();b2PositionSolverManifold.Initialize_s_clipPoint=new b2Vec2();var b2ContactSolver=function(){function b2ContactSolver(){this.m_step=new b2TimeStep();this.m_positionConstraints=b2ContactPositionConstraint.MakeArray(1024);this.m_velocityConstraints=b2ContactVelocityConstraint.MakeArray(1024);this.m_count=0;}var _proto85=b2ContactSolver.prototype;_proto85.Initialize=function Initialize(def){this.m_step.Copy(def.step);this.m_count=def.count;if(this.m_positionConstraints.length<this.m_count){var new_length=b2Max(this.m_positionConstraints.length*2,this.m_count);while(this.m_positionConstraints.length<new_length){this.m_positionConstraints[this.m_positionConstraints.length]=new b2ContactPositionConstraint();}}if(this.m_velocityConstraints.length<this.m_count){var _new_length=b2Max(this.m_velocityConstraints.length*2,this.m_count);while(this.m_velocityConstraints.length<_new_length){this.m_velocityConstraints[this.m_velocityConstraints.length]=new b2ContactVelocityConstraint();}}this.m_positions=def.positions;this.m_velocities=def.velocities;this.m_contacts=def.contacts;for(var i=0;i<this.m_count;++i){var contact=this.m_contacts[i];var fixtureA=contact.m_fixtureA;var fixtureB=contact.m_fixtureB;var shapeA=fixtureA.GetShape();var shapeB=fixtureB.GetShape();var radiusA=shapeA.m_radius;var radiusB=shapeB.m_radius;var bodyA=fixtureA.GetBody();var bodyB=fixtureB.GetBody();var manifold=contact.GetManifold();var pointCount=manifold.pointCount;var vc=this.m_velocityConstraints[i];vc.friction=contact.m_friction;vc.restitution=contact.m_restitution;vc.tangentSpeed=contact.m_tangentSpeed;vc.indexA=bodyA.m_islandIndex;vc.indexB=bodyB.m_islandIndex;vc.invMassA=bodyA.m_invMass;vc.invMassB=bodyB.m_invMass;vc.invIA=bodyA.m_invI;vc.invIB=bodyB.m_invI;vc.contactIndex=i;vc.pointCount=pointCount;vc.K.SetZero();vc.normalMass.SetZero();var pc=this.m_positionConstraints[i];pc.indexA=bodyA.m_islandIndex;pc.indexB=bodyB.m_islandIndex;pc.invMassA=bodyA.m_invMass;pc.invMassB=bodyB.m_invMass;pc.localCenterA.Copy(bodyA.m_sweep.localCenter);pc.localCenterB.Copy(bodyB.m_sweep.localCenter);pc.invIA=bodyA.m_invI;pc.invIB=bodyB.m_invI;pc.localNormal.Copy(manifold.localNormal);pc.localPoint.Copy(manifold.localPoint);pc.pointCount=pointCount;pc.radiusA=radiusA;pc.radiusB=radiusB;pc.type=manifold.type;for(var j=0;j<pointCount;++j){var cp=manifold.points[j];var vcp=vc.points[j];if(this.m_step.warmStarting){vcp.normalImpulse=this.m_step.dtRatio*cp.normalImpulse;vcp.tangentImpulse=this.m_step.dtRatio*cp.tangentImpulse;}else {vcp.normalImpulse=0;vcp.tangentImpulse=0;}vcp.rA.SetZero();vcp.rB.SetZero();vcp.normalMass=0;vcp.tangentMass=0;vcp.velocityBias=0;pc.localPoints[j].Copy(cp.localPoint);}}return this;};_proto85.InitializeVelocityConstraints=function InitializeVelocityConstraints(){var xfA=b2ContactSolver.InitializeVelocityConstraints_s_xfA;var xfB=b2ContactSolver.InitializeVelocityConstraints_s_xfB;var worldManifold=b2ContactSolver.InitializeVelocityConstraints_s_worldManifold;var k_maxConditionNumber=1000;for(var i=0;i<this.m_count;++i){var vc=this.m_velocityConstraints[i];var pc=this.m_positionConstraints[i];var radiusA=pc.radiusA;var radiusB=pc.radiusB;var manifold=this.m_contacts[vc.contactIndex].GetManifold();var indexA=vc.indexA;var indexB=vc.indexB;var mA=vc.invMassA;var mB=vc.invMassB;var iA=vc.invIA;var iB=vc.invIB;var localCenterA=pc.localCenterA;var localCenterB=pc.localCenterB;var cA=this.m_positions[indexA].c;var aA=this.m_positions[indexA].a;var vA=this.m_velocities[indexA].v;var wA=this.m_velocities[indexA].w;var cB=this.m_positions[indexB].c;var aB=this.m_positions[indexB].a;var vB=this.m_velocities[indexB].v;var wB=this.m_velocities[indexB].w;xfA.q.SetAngle(aA);xfB.q.SetAngle(aB);b2Vec2.SubVV(cA,b2Rot.MulRV(xfA.q,localCenterA,b2Vec2.s_t0),xfA.p);b2Vec2.SubVV(cB,b2Rot.MulRV(xfB.q,localCenterB,b2Vec2.s_t0),xfB.p);worldManifold.Initialize(manifold,xfA,radiusA,xfB,radiusB);vc.normal.Copy(worldManifold.normal);b2Vec2.CrossVOne(vc.normal,vc.tangent);var pointCount=vc.pointCount;for(var j=0;j<pointCount;++j){var vcp=vc.points[j];b2Vec2.SubVV(worldManifold.points[j],cA,vcp.rA);b2Vec2.SubVV(worldManifold.points[j],cB,vcp.rB);var rnA=b2Vec2.CrossVV(vcp.rA,vc.normal);var rnB=b2Vec2.CrossVV(vcp.rB,vc.normal);var kNormal=mA+mB+iA*rnA*rnA+iB*rnB*rnB;vcp.normalMass=kNormal>0?1/kNormal:0;var tangent=vc.tangent;var rtA=b2Vec2.CrossVV(vcp.rA,tangent);var rtB=b2Vec2.CrossVV(vcp.rB,tangent);var kTangent=mA+mB+iA*rtA*rtA+iB*rtB*rtB;vcp.tangentMass=kTangent>0?1/kTangent:0;vcp.velocityBias=0;var vRel=b2Vec2.DotVV(vc.normal,b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,vcp.rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,vcp.rA,b2Vec2.s_t1),b2Vec2.s_t0));if(vRel<-b2_velocityThreshold){vcp.velocityBias+=-vc.restitution*vRel;}}if(vc.pointCount===2&&g_blockSolve){var vcp1=vc.points[0];var vcp2=vc.points[1];var rn1A=b2Vec2.CrossVV(vcp1.rA,vc.normal);var rn1B=b2Vec2.CrossVV(vcp1.rB,vc.normal);var rn2A=b2Vec2.CrossVV(vcp2.rA,vc.normal);var rn2B=b2Vec2.CrossVV(vcp2.rB,vc.normal);var k11=mA+mB+iA*rn1A*rn1A+iB*rn1B*rn1B;var k22=mA+mB+iA*rn2A*rn2A+iB*rn2B*rn2B;var k12=mA+mB+iA*rn1A*rn2A+iB*rn1B*rn2B;if(k11*k11<k_maxConditionNumber*(k11*k22-k12*k12)){vc.K.ex.Set(k11,k12);vc.K.ey.Set(k12,k22);vc.K.GetInverse(vc.normalMass);}else {vc.pointCount=1;}}}};_proto85.WarmStart=function WarmStart(){var P=b2ContactSolver.WarmStart_s_P;for(var i=0;i<this.m_count;++i){var vc=this.m_velocityConstraints[i];var indexA=vc.indexA;var indexB=vc.indexB;var mA=vc.invMassA;var iA=vc.invIA;var mB=vc.invMassB;var iB=vc.invIB;var pointCount=vc.pointCount;var vA=this.m_velocities[indexA].v;var wA=this.m_velocities[indexA].w;var vB=this.m_velocities[indexB].v;var wB=this.m_velocities[indexB].w;var normal=vc.normal;var tangent=vc.tangent;for(var j=0;j<pointCount;++j){var vcp=vc.points[j];b2Vec2.AddVV(b2Vec2.MulSV(vcp.normalImpulse,normal,b2Vec2.s_t0),b2Vec2.MulSV(vcp.tangentImpulse,tangent,b2Vec2.s_t1),P);wA-=iA*b2Vec2.CrossVV(vcp.rA,P);vA.SelfMulSub(mA,P);wB+=iB*b2Vec2.CrossVV(vcp.rB,P);vB.SelfMulAdd(mB,P);}this.m_velocities[indexA].w=wA;this.m_velocities[indexB].w=wB;}};_proto85.SolveVelocityConstraints=function SolveVelocityConstraints(){var dv=b2ContactSolver.SolveVelocityConstraints_s_dv;var dv1=b2ContactSolver.SolveVelocityConstraints_s_dv1;var dv2=b2ContactSolver.SolveVelocityConstraints_s_dv2;var P=b2ContactSolver.SolveVelocityConstraints_s_P;var a=b2ContactSolver.SolveVelocityConstraints_s_a;var b=b2ContactSolver.SolveVelocityConstraints_s_b;var x=b2ContactSolver.SolveVelocityConstraints_s_x;var d=b2ContactSolver.SolveVelocityConstraints_s_d;var P1=b2ContactSolver.SolveVelocityConstraints_s_P1;var P2=b2ContactSolver.SolveVelocityConstraints_s_P2;var P1P2=b2ContactSolver.SolveVelocityConstraints_s_P1P2;for(var i=0;i<this.m_count;++i){var vc=this.m_velocityConstraints[i];var indexA=vc.indexA;var indexB=vc.indexB;var mA=vc.invMassA;var iA=vc.invIA;var mB=vc.invMassB;var iB=vc.invIB;var pointCount=vc.pointCount;var vA=this.m_velocities[indexA].v;var wA=this.m_velocities[indexA].w;var vB=this.m_velocities[indexB].v;var wB=this.m_velocities[indexB].w;var normal=vc.normal;var tangent=vc.tangent;var friction=vc.friction;for(var j=0;j<pointCount;++j){var vcp=vc.points[j];b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,vcp.rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,vcp.rA,b2Vec2.s_t1),dv);var vt=b2Vec2.DotVV(dv,tangent)-vc.tangentSpeed;var lambda=vcp.tangentMass*-vt;var maxFriction=friction*vcp.normalImpulse;var newImpulse=b2Clamp(vcp.tangentImpulse+lambda,-maxFriction,maxFriction);lambda=newImpulse-vcp.tangentImpulse;vcp.tangentImpulse=newImpulse;b2Vec2.MulSV(lambda,tangent,P);vA.SelfMulSub(mA,P);wA-=iA*b2Vec2.CrossVV(vcp.rA,P);vB.SelfMulAdd(mB,P);wB+=iB*b2Vec2.CrossVV(vcp.rB,P);}if(vc.pointCount===1||g_blockSolve===false){for(var _j3=0;_j3<pointCount;++_j3){var _vcp=vc.points[_j3];b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,_vcp.rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,_vcp.rA,b2Vec2.s_t1),dv);var vn=b2Vec2.DotVV(dv,normal);var _lambda=-_vcp.normalMass*(vn-_vcp.velocityBias);var _newImpulse2=b2Max(_vcp.normalImpulse+_lambda,0);_lambda=_newImpulse2-_vcp.normalImpulse;_vcp.normalImpulse=_newImpulse2;b2Vec2.MulSV(_lambda,normal,P);vA.SelfMulSub(mA,P);wA-=iA*b2Vec2.CrossVV(_vcp.rA,P);vB.SelfMulAdd(mB,P);wB+=iB*b2Vec2.CrossVV(_vcp.rB,P);}}else {var cp1=vc.points[0];var cp2=vc.points[1];a.Set(cp1.normalImpulse,cp2.normalImpulse);b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,cp1.rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,cp1.rA,b2Vec2.s_t1),dv1);b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB,wB,cp2.rB,b2Vec2.s_t0),b2Vec2.AddVCrossSV(vA,wA,cp2.rA,b2Vec2.s_t1),dv2);var vn1=b2Vec2.DotVV(dv1,normal);var vn2=b2Vec2.DotVV(dv2,normal);b.x=vn1-cp1.velocityBias;b.y=vn2-cp2.velocityBias;b.SelfSub(b2Mat22.MulMV(vc.K,a,b2Vec2.s_t0));for(;;){b2Mat22.MulMV(vc.normalMass,b,x).SelfNeg();if(x.x>=0&&x.y>=0){b2Vec2.SubVV(x,a,d);b2Vec2.MulSV(d.x,normal,P1);b2Vec2.MulSV(d.y,normal,P2);b2Vec2.AddVV(P1,P2,P1P2);vA.SelfMulSub(mA,P1P2);wA-=iA*(b2Vec2.CrossVV(cp1.rA,P1)+b2Vec2.CrossVV(cp2.rA,P2));vB.SelfMulAdd(mB,P1P2);wB+=iB*(b2Vec2.CrossVV(cp1.rB,P1)+b2Vec2.CrossVV(cp2.rB,P2));cp1.normalImpulse=x.x;cp2.normalImpulse=x.y;break;}x.x=-cp1.normalMass*b.x;x.y=0;vn1=0;vn2=vc.K.ex.y*x.x+b.y;if(x.x>=0&&vn2>=0){b2Vec2.SubVV(x,a,d);b2Vec2.MulSV(d.x,normal,P1);b2Vec2.MulSV(d.y,normal,P2);b2Vec2.AddVV(P1,P2,P1P2);vA.SelfMulSub(mA,P1P2);wA-=iA*(b2Vec2.CrossVV(cp1.rA,P1)+b2Vec2.CrossVV(cp2.rA,P2));vB.SelfMulAdd(mB,P1P2);wB+=iB*(b2Vec2.CrossVV(cp1.rB,P1)+b2Vec2.CrossVV(cp2.rB,P2));cp1.normalImpulse=x.x;cp2.normalImpulse=x.y;break;}x.x=0;x.y=-cp2.normalMass*b.y;vn1=vc.K.ey.x*x.y+b.x;vn2=0;if(x.y>=0&&vn1>=0){b2Vec2.SubVV(x,a,d);b2Vec2.MulSV(d.x,normal,P1);b2Vec2.MulSV(d.y,normal,P2);b2Vec2.AddVV(P1,P2,P1P2);vA.SelfMulSub(mA,P1P2);wA-=iA*(b2Vec2.CrossVV(cp1.rA,P1)+b2Vec2.CrossVV(cp2.rA,P2));vB.SelfMulAdd(mB,P1P2);wB+=iB*(b2Vec2.CrossVV(cp1.rB,P1)+b2Vec2.CrossVV(cp2.rB,P2));cp1.normalImpulse=x.x;cp2.normalImpulse=x.y;break;}x.x=0;x.y=0;vn1=b.x;vn2=b.y;if(vn1>=0&&vn2>=0){b2Vec2.SubVV(x,a,d);b2Vec2.MulSV(d.x,normal,P1);b2Vec2.MulSV(d.y,normal,P2);b2Vec2.AddVV(P1,P2,P1P2);vA.SelfMulSub(mA,P1P2);wA-=iA*(b2Vec2.CrossVV(cp1.rA,P1)+b2Vec2.CrossVV(cp2.rA,P2));vB.SelfMulAdd(mB,P1P2);wB+=iB*(b2Vec2.CrossVV(cp1.rB,P1)+b2Vec2.CrossVV(cp2.rB,P2));cp1.normalImpulse=x.x;cp2.normalImpulse=x.y;break;}break;}}this.m_velocities[indexA].w=wA;this.m_velocities[indexB].w=wB;}};_proto85.StoreImpulses=function StoreImpulses(){for(var i=0;i<this.m_count;++i){var vc=this.m_velocityConstraints[i];var manifold=this.m_contacts[vc.contactIndex].GetManifold();for(var j=0;j<vc.pointCount;++j){manifold.points[j].normalImpulse=vc.points[j].normalImpulse;manifold.points[j].tangentImpulse=vc.points[j].tangentImpulse;}}};_proto85.SolvePositionConstraints=function SolvePositionConstraints(){var xfA=b2ContactSolver.SolvePositionConstraints_s_xfA;var xfB=b2ContactSolver.SolvePositionConstraints_s_xfB;var psm=b2ContactSolver.SolvePositionConstraints_s_psm;var rA=b2ContactSolver.SolvePositionConstraints_s_rA;var rB=b2ContactSolver.SolvePositionConstraints_s_rB;var P=b2ContactSolver.SolvePositionConstraints_s_P;var minSeparation=0;for(var i=0;i<this.m_count;++i){var pc=this.m_positionConstraints[i];var indexA=pc.indexA;var indexB=pc.indexB;var localCenterA=pc.localCenterA;var mA=pc.invMassA;var iA=pc.invIA;var localCenterB=pc.localCenterB;var mB=pc.invMassB;var iB=pc.invIB;var pointCount=pc.pointCount;var cA=this.m_positions[indexA].c;var aA=this.m_positions[indexA].a;var cB=this.m_positions[indexB].c;var aB=this.m_positions[indexB].a;for(var j=0;j<pointCount;++j){xfA.q.SetAngle(aA);xfB.q.SetAngle(aB);b2Vec2.SubVV(cA,b2Rot.MulRV(xfA.q,localCenterA,b2Vec2.s_t0),xfA.p);b2Vec2.SubVV(cB,b2Rot.MulRV(xfB.q,localCenterB,b2Vec2.s_t0),xfB.p);psm.Initialize(pc,xfA,xfB,j);var normal=psm.normal;var point=psm.point;var separation=psm.separation;b2Vec2.SubVV(point,cA,rA);b2Vec2.SubVV(point,cB,rB);minSeparation=b2Min(minSeparation,separation);var C=b2Clamp(b2_baumgarte*(separation+b2_linearSlop),-b2_maxLinearCorrection,0);var rnA=b2Vec2.CrossVV(rA,normal);var rnB=b2Vec2.CrossVV(rB,normal);var K=mA+mB+iA*rnA*rnA+iB*rnB*rnB;var impulse=K>0?-C/K:0;b2Vec2.MulSV(impulse,normal,P);cA.SelfMulSub(mA,P);aA-=iA*b2Vec2.CrossVV(rA,P);cB.SelfMulAdd(mB,P);aB+=iB*b2Vec2.CrossVV(rB,P);}this.m_positions[indexA].a=aA;this.m_positions[indexB].a=aB;}return minSeparation>-3*b2_linearSlop;};_proto85.SolveTOIPositionConstraints=function SolveTOIPositionConstraints(toiIndexA,toiIndexB){var xfA=b2ContactSolver.SolveTOIPositionConstraints_s_xfA;var xfB=b2ContactSolver.SolveTOIPositionConstraints_s_xfB;var psm=b2ContactSolver.SolveTOIPositionConstraints_s_psm;var rA=b2ContactSolver.SolveTOIPositionConstraints_s_rA;var rB=b2ContactSolver.SolveTOIPositionConstraints_s_rB;var P=b2ContactSolver.SolveTOIPositionConstraints_s_P;var minSeparation=0;for(var i=0;i<this.m_count;++i){var pc=this.m_positionConstraints[i];var indexA=pc.indexA;var indexB=pc.indexB;var localCenterA=pc.localCenterA;var localCenterB=pc.localCenterB;var pointCount=pc.pointCount;var mA=0;var iA=0;if(indexA===toiIndexA||indexA===toiIndexB){mA=pc.invMassA;iA=pc.invIA;}var mB=0;var iB=0;if(indexB===toiIndexA||indexB===toiIndexB){mB=pc.invMassB;iB=pc.invIB;}var cA=this.m_positions[indexA].c;var aA=this.m_positions[indexA].a;var cB=this.m_positions[indexB].c;var aB=this.m_positions[indexB].a;for(var j=0;j<pointCount;++j){xfA.q.SetAngle(aA);xfB.q.SetAngle(aB);b2Vec2.SubVV(cA,b2Rot.MulRV(xfA.q,localCenterA,b2Vec2.s_t0),xfA.p);b2Vec2.SubVV(cB,b2Rot.MulRV(xfB.q,localCenterB,b2Vec2.s_t0),xfB.p);psm.Initialize(pc,xfA,xfB,j);var normal=psm.normal;var point=psm.point;var separation=psm.separation;b2Vec2.SubVV(point,cA,rA);b2Vec2.SubVV(point,cB,rB);minSeparation=b2Min(minSeparation,separation);var C=b2Clamp(b2_toiBaumgarte*(separation+b2_linearSlop),-b2_maxLinearCorrection,0);var rnA=b2Vec2.CrossVV(rA,normal);var rnB=b2Vec2.CrossVV(rB,normal);var K=mA+mB+iA*rnA*rnA+iB*rnB*rnB;var impulse=K>0?-C/K:0;b2Vec2.MulSV(impulse,normal,P);cA.SelfMulSub(mA,P);aA-=iA*b2Vec2.CrossVV(rA,P);cB.SelfMulAdd(mB,P);aB+=iB*b2Vec2.CrossVV(rB,P);}this.m_positions[indexA].a=aA;this.m_positions[indexB].a=aB;}return minSeparation>=-1.5*b2_linearSlop;};return b2ContactSolver;}();b2ContactSolver.InitializeVelocityConstraints_s_xfA=new b2Transform();b2ContactSolver.InitializeVelocityConstraints_s_xfB=new b2Transform();b2ContactSolver.InitializeVelocityConstraints_s_worldManifold=new b2WorldManifold();b2ContactSolver.WarmStart_s_P=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_dv=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_dv1=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_dv2=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_P=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_a=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_b=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_x=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_d=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_P1=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_P2=new b2Vec2();b2ContactSolver.SolveVelocityConstraints_s_P1P2=new b2Vec2();b2ContactSolver.SolvePositionConstraints_s_xfA=new b2Transform();b2ContactSolver.SolvePositionConstraints_s_xfB=new b2Transform();b2ContactSolver.SolvePositionConstraints_s_psm=new b2PositionSolverManifold();b2ContactSolver.SolvePositionConstraints_s_rA=new b2Vec2();b2ContactSolver.SolvePositionConstraints_s_rB=new b2Vec2();b2ContactSolver.SolvePositionConstraints_s_P=new b2Vec2();b2ContactSolver.SolveTOIPositionConstraints_s_xfA=new b2Transform();b2ContactSolver.SolveTOIPositionConstraints_s_xfB=new b2Transform();b2ContactSolver.SolveTOIPositionConstraints_s_psm=new b2PositionSolverManifold();b2ContactSolver.SolveTOIPositionConstraints_s_rA=new b2Vec2();b2ContactSolver.SolveTOIPositionConstraints_s_rB=new b2Vec2();b2ContactSolver.SolveTOIPositionConstraints_s_P=new b2Vec2();var b2Island=function(){function b2Island(){this.m_bodies=[];this.m_contacts=[];this.m_joints=[];this.m_positions=b2Position.MakeArray(1024);this.m_velocities=b2Velocity.MakeArray(1024);this.m_bodyCount=0;this.m_jointCount=0;this.m_contactCount=0;this.m_bodyCapacity=0;this.m_contactCapacity=0;this.m_jointCapacity=0;}var _proto86=b2Island.prototype;_proto86.Initialize=function Initialize(bodyCapacity,contactCapacity,jointCapacity,listener){this.m_bodyCapacity=bodyCapacity;this.m_contactCapacity=contactCapacity;this.m_jointCapacity=jointCapacity;this.m_bodyCount=0;this.m_contactCount=0;this.m_jointCount=0;this.m_listener=listener;if(this.m_positions.length<bodyCapacity){var new_length=b2Max(this.m_positions.length*2,bodyCapacity);while(this.m_positions.length<new_length){this.m_positions[this.m_positions.length]=new b2Position();}}if(this.m_velocities.length<bodyCapacity){var _new_length2=b2Max(this.m_velocities.length*2,bodyCapacity);while(this.m_velocities.length<_new_length2){this.m_velocities[this.m_velocities.length]=new b2Velocity();}}};_proto86.Clear=function Clear(){this.m_bodyCount=0;this.m_contactCount=0;this.m_jointCount=0;};_proto86.AddBody=function AddBody(body){body.m_islandIndex=this.m_bodyCount;this.m_bodies[this.m_bodyCount++]=body;};_proto86.AddContact=function AddContact(contact){this.m_contacts[this.m_contactCount++]=contact;};_proto86.AddJoint=function AddJoint(joint){this.m_joints[this.m_jointCount++]=joint;};_proto86.Solve=function Solve(profile,step,gravity,allowSleep){var timer=b2Island.s_timer.Reset();var h=step.dt;for(var i=0;i<this.m_bodyCount;++i){var b=this.m_bodies[i];this.m_positions[i].c.Copy(b.m_sweep.c);var a=b.m_sweep.a;var v=this.m_velocities[i].v.Copy(b.m_linearVelocity);var w=b.m_angularVelocity;b.m_sweep.c0.Copy(b.m_sweep.c);b.m_sweep.a0=b.m_sweep.a;if(b.m_type===exports.b2BodyType.b2_dynamicBody){v.x+=h*(b.m_gravityScale*gravity.x+b.m_invMass*b.m_force.x);v.y+=h*(b.m_gravityScale*gravity.y+b.m_invMass*b.m_force.y);w+=h*b.m_invI*b.m_torque;v.SelfMul(1.0/(1.0+h*b.m_linearDamping));w*=1.0/(1.0+h*b.m_angularDamping);}this.m_positions[i].a=a;this.m_velocities[i].w=w;}timer.Reset();var solverData=b2Island.s_solverData;solverData.step.Copy(step);solverData.positions=this.m_positions;solverData.velocities=this.m_velocities;var contactSolverDef=b2Island.s_contactSolverDef;contactSolverDef.step.Copy(step);contactSolverDef.contacts=this.m_contacts;contactSolverDef.count=this.m_contactCount;contactSolverDef.positions=this.m_positions;contactSolverDef.velocities=this.m_velocities;var contactSolver=b2Island.s_contactSolver.Initialize(contactSolverDef);contactSolver.InitializeVelocityConstraints();if(step.warmStarting){contactSolver.WarmStart();}for(var _i15=0;_i15<this.m_jointCount;++_i15){this.m_joints[_i15].InitVelocityConstraints(solverData);}profile.solveInit=timer.GetMilliseconds();timer.Reset();for(var _i16=0;_i16<step.velocityIterations;++_i16){for(var j=0;j<this.m_jointCount;++j){this.m_joints[j].SolveVelocityConstraints(solverData);}contactSolver.SolveVelocityConstraints();}contactSolver.StoreImpulses();profile.solveVelocity=timer.GetMilliseconds();for(var _i17=0;_i17<this.m_bodyCount;++_i17){var c=this.m_positions[_i17].c;var _a=this.m_positions[_i17].a;var _v3=this.m_velocities[_i17].v;var _w=this.m_velocities[_i17].w;var translation=b2Vec2.MulSV(h,_v3,b2Island.s_translation);if(b2Vec2.DotVV(translation,translation)>b2_maxTranslationSquared){var ratio=b2_maxTranslation/translation.Length();_v3.SelfMul(ratio);}var rotation=h*_w;if(rotation*rotation>b2_maxRotationSquared){var _ratio=b2_maxRotation/b2Abs(rotation);_w*=_ratio;}c.x+=h*_v3.x;c.y+=h*_v3.y;_a+=h*_w;this.m_positions[_i17].a=_a;this.m_velocities[_i17].w=_w;}timer.Reset();var positionSolved=false;for(var _i18=0;_i18<step.positionIterations;++_i18){var contactsOkay=contactSolver.SolvePositionConstraints();var jointsOkay=true;for(var _j4=0;_j4<this.m_jointCount;++_j4){var jointOkay=this.m_joints[_j4].SolvePositionConstraints(solverData);jointsOkay=jointsOkay&&jointOkay;}if(contactsOkay&&jointsOkay){positionSolved=true;break;}}for(var _i19=0;_i19<this.m_bodyCount;++_i19){var body=this.m_bodies[_i19];body.m_sweep.c.Copy(this.m_positions[_i19].c);body.m_sweep.a=this.m_positions[_i19].a;body.m_linearVelocity.Copy(this.m_velocities[_i19].v);body.m_angularVelocity=this.m_velocities[_i19].w;body.SynchronizeTransform();}profile.solvePosition=timer.GetMilliseconds();this.Report(contactSolver.m_velocityConstraints);if(allowSleep){var minSleepTime=b2_maxFloat;var linTolSqr=b2_linearSleepTolerance*b2_linearSleepTolerance;var angTolSqr=b2_angularSleepTolerance*b2_angularSleepTolerance;for(var _i20=0;_i20<this.m_bodyCount;++_i20){var _b=this.m_bodies[_i20];if(_b.GetType()===exports.b2BodyType.b2_staticBody){continue;}if(!_b.m_autoSleepFlag||_b.m_angularVelocity*_b.m_angularVelocity>angTolSqr||b2Vec2.DotVV(_b.m_linearVelocity,_b.m_linearVelocity)>linTolSqr){_b.m_sleepTime=0;minSleepTime=0;}else {_b.m_sleepTime+=h;minSleepTime=b2Min(minSleepTime,_b.m_sleepTime);}}if(minSleepTime>=b2_timeToSleep&&positionSolved){for(var _i21=0;_i21<this.m_bodyCount;++_i21){var _b2=this.m_bodies[_i21];_b2.SetAwake(false);}}}};_proto86.SolveTOI=function SolveTOI(subStep,toiIndexA,toiIndexB){for(var i=0;i<this.m_bodyCount;++i){var b=this.m_bodies[i];this.m_positions[i].c.Copy(b.m_sweep.c);this.m_positions[i].a=b.m_sweep.a;this.m_velocities[i].v.Copy(b.m_linearVelocity);this.m_velocities[i].w=b.m_angularVelocity;}var contactSolverDef=b2Island.s_contactSolverDef;contactSolverDef.contacts=this.m_contacts;contactSolverDef.count=this.m_contactCount;contactSolverDef.step.Copy(subStep);contactSolverDef.positions=this.m_positions;contactSolverDef.velocities=this.m_velocities;var contactSolver=b2Island.s_contactSolver.Initialize(contactSolverDef);for(var _i22=0;_i22<subStep.positionIterations;++_i22){var contactsOkay=contactSolver.SolveTOIPositionConstraints(toiIndexA,toiIndexB);if(contactsOkay){break;}}this.m_bodies[toiIndexA].m_sweep.c0.Copy(this.m_positions[toiIndexA].c);this.m_bodies[toiIndexA].m_sweep.a0=this.m_positions[toiIndexA].a;this.m_bodies[toiIndexB].m_sweep.c0.Copy(this.m_positions[toiIndexB].c);this.m_bodies[toiIndexB].m_sweep.a0=this.m_positions[toiIndexB].a;contactSolver.InitializeVelocityConstraints();for(var _i23=0;_i23<subStep.velocityIterations;++_i23){contactSolver.SolveVelocityConstraints();}var h=subStep.dt;for(var _i24=0;_i24<this.m_bodyCount;++_i24){var c=this.m_positions[_i24].c;var a=this.m_positions[_i24].a;var v=this.m_velocities[_i24].v;var w=this.m_velocities[_i24].w;var translation=b2Vec2.MulSV(h,v,b2Island.s_translation);if(b2Vec2.DotVV(translation,translation)>b2_maxTranslationSquared){var ratio=b2_maxTranslation/translation.Length();v.SelfMul(ratio);}var rotation=h*w;if(rotation*rotation>b2_maxRotationSquared){var _ratio2=b2_maxRotation/b2Abs(rotation);w*=_ratio2;}c.SelfMulAdd(h,v);a+=h*w;this.m_positions[_i24].a=a;this.m_velocities[_i24].w=w;var body=this.m_bodies[_i24];body.m_sweep.c.Copy(c);body.m_sweep.a=a;body.m_linearVelocity.Copy(v);body.m_angularVelocity=w;body.SynchronizeTransform();}this.Report(contactSolver.m_velocityConstraints);};_proto86.Report=function Report(constraints){if(this.m_listener===null){return;}for(var i=0;i<this.m_contactCount;++i){var c=this.m_contacts[i];if(!c){continue;}var vc=constraints[i];var impulse=b2Island.s_impulse;impulse.count=vc.pointCount;for(var j=0;j<vc.pointCount;++j){impulse.normalImpulses[j]=vc.points[j].normalImpulse;impulse.tangentImpulses[j]=vc.points[j].tangentImpulse;}this.m_listener.PostSolve(c,impulse);}};return b2Island;}();b2Island.s_timer=new b2Timer();b2Island.s_solverData=new b2SolverData();b2Island.s_contactSolverDef=new b2ContactSolverDef();b2Island.s_contactSolver=new b2ContactSolver();b2Island.s_translation=new b2Vec2();b2Island.s_impulse=new b2ContactImpulse();(function(b2ParticleFlag){b2ParticleFlag[b2ParticleFlag["b2_waterParticle"]=0]="b2_waterParticle";b2ParticleFlag[b2ParticleFlag["b2_zombieParticle"]=2]="b2_zombieParticle";b2ParticleFlag[b2ParticleFlag["b2_wallParticle"]=4]="b2_wallParticle";b2ParticleFlag[b2ParticleFlag["b2_springParticle"]=8]="b2_springParticle";b2ParticleFlag[b2ParticleFlag["b2_elasticParticle"]=16]="b2_elasticParticle";b2ParticleFlag[b2ParticleFlag["b2_viscousParticle"]=32]="b2_viscousParticle";b2ParticleFlag[b2ParticleFlag["b2_powderParticle"]=64]="b2_powderParticle";b2ParticleFlag[b2ParticleFlag["b2_tensileParticle"]=128]="b2_tensileParticle";b2ParticleFlag[b2ParticleFlag["b2_colorMixingParticle"]=256]="b2_colorMixingParticle";b2ParticleFlag[b2ParticleFlag["b2_destructionListenerParticle"]=512]="b2_destructionListenerParticle";b2ParticleFlag[b2ParticleFlag["b2_barrierParticle"]=1024]="b2_barrierParticle";b2ParticleFlag[b2ParticleFlag["b2_staticPressureParticle"]=2048]="b2_staticPressureParticle";b2ParticleFlag[b2ParticleFlag["b2_reactiveParticle"]=4096]="b2_reactiveParticle";b2ParticleFlag[b2ParticleFlag["b2_repulsiveParticle"]=8192]="b2_repulsiveParticle";b2ParticleFlag[b2ParticleFlag["b2_fixtureContactListenerParticle"]=16384]="b2_fixtureContactListenerParticle";b2ParticleFlag[b2ParticleFlag["b2_particleContactListenerParticle"]=32768]="b2_particleContactListenerParticle";b2ParticleFlag[b2ParticleFlag["b2_fixtureContactFilterParticle"]=65536]="b2_fixtureContactFilterParticle";b2ParticleFlag[b2ParticleFlag["b2_particleContactFilterParticle"]=131072]="b2_particleContactFilterParticle";})(exports.b2ParticleFlag||(exports.b2ParticleFlag={}));var b2ParticleDef=function b2ParticleDef(){this.flags=0;this.position=new b2Vec2();this.velocity=new b2Vec2();this.color=new b2Color(0,0,0,0);this.lifetime=0.0;this.userData=null;this.group=null;};function b2CalculateParticleIterations(gravity,radius,timeStep){var B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS=8;var B2_RADIUS_THRESHOLD=0.01;var iterations=Math.ceil(Math.sqrt(gravity/(B2_RADIUS_THRESHOLD*radius))*timeStep);return b2Clamp(iterations,1,B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS);}var b2ParticleHandle=function(){function b2ParticleHandle(){this.m_index=b2_invalidParticleIndex;}var _proto87=b2ParticleHandle.prototype;_proto87.GetIndex=function GetIndex(){return this.m_index;};_proto87.SetIndex=function SetIndex(index){this.m_index=index;};return b2ParticleHandle;}();(function(b2ParticleGroupFlag){b2ParticleGroupFlag[b2ParticleGroupFlag["b2_solidParticleGroup"]=1]="b2_solidParticleGroup";b2ParticleGroupFlag[b2ParticleGroupFlag["b2_rigidParticleGroup"]=2]="b2_rigidParticleGroup";b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupCanBeEmpty"]=4]="b2_particleGroupCanBeEmpty";b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupWillBeDestroyed"]=8]="b2_particleGroupWillBeDestroyed";b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupNeedsUpdateDepth"]=16]="b2_particleGroupNeedsUpdateDepth";b2ParticleGroupFlag[b2ParticleGroupFlag["b2_particleGroupInternalMask"]=24]="b2_particleGroupInternalMask";})(exports.b2ParticleGroupFlag||(exports.b2ParticleGroupFlag={}));var b2ParticleGroupDef=function b2ParticleGroupDef(){this.flags=0;this.groupFlags=0;this.position=new b2Vec2();this.angle=0.0;this.linearVelocity=new b2Vec2();this.angularVelocity=0.0;this.color=new b2Color();this.strength=1.0;this.shapeCount=0;this.stride=0;this.particleCount=0;this.lifetime=0;this.userData=null;this.group=null;};var b2ParticleGroup=function(){function b2ParticleGroup(system){this.m_firstIndex=0;this.m_lastIndex=0;this.m_groupFlags=0;this.m_strength=1.0;this.m_prev=null;this.m_next=null;this.m_timestamp=-1;this.m_mass=0.0;this.m_inertia=0.0;this.m_center=new b2Vec2();this.m_linearVelocity=new b2Vec2();this.m_angularVelocity=0.0;this.m_transform=new b2Transform();this.m_userData=null;this.m_system=system;}var _proto88=b2ParticleGroup.prototype;_proto88.GetNext=function GetNext(){return this.m_next;};_proto88.GetParticleSystem=function GetParticleSystem(){return this.m_system;};_proto88.GetParticleCount=function GetParticleCount(){return this.m_lastIndex-this.m_firstIndex;};_proto88.GetBufferIndex=function GetBufferIndex(){return this.m_firstIndex;};_proto88.ContainsParticle=function ContainsParticle(index){return this.m_firstIndex<=index&&index<this.m_lastIndex;};_proto88.GetAllParticleFlags=function GetAllParticleFlags(){if(!this.m_system.m_flagsBuffer.data){throw new Error();}var flags=0;for(var i=this.m_firstIndex;i<this.m_lastIndex;i++){flags|=this.m_system.m_flagsBuffer.data[i];}return flags;};_proto88.GetGroupFlags=function GetGroupFlags(){return this.m_groupFlags;};_proto88.SetGroupFlags=function SetGroupFlags(flags){flags|=this.m_groupFlags&exports.b2ParticleGroupFlag.b2_particleGroupInternalMask;this.m_system.SetGroupFlags(this,flags);};_proto88.GetMass=function GetMass(){this.UpdateStatistics();return this.m_mass;};_proto88.GetInertia=function GetInertia(){this.UpdateStatistics();return this.m_inertia;};_proto88.GetCenter=function GetCenter(){this.UpdateStatistics();return this.m_center;};_proto88.GetLinearVelocity=function GetLinearVelocity(){this.UpdateStatistics();return this.m_linearVelocity;};_proto88.GetAngularVelocity=function GetAngularVelocity(){this.UpdateStatistics();return this.m_angularVelocity;};_proto88.GetTransform=function GetTransform(){return this.m_transform;};_proto88.GetPosition=function GetPosition(){return this.m_transform.p;};_proto88.GetAngle=function GetAngle(){return this.m_transform.q.GetAngle();};_proto88.GetLinearVelocityFromWorldPoint=function GetLinearVelocityFromWorldPoint(worldPoint,out){var s_t0=b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;this.UpdateStatistics();return b2Vec2.AddVCrossSV(this.m_linearVelocity,this.m_angularVelocity,b2Vec2.SubVV(worldPoint,this.m_center,s_t0),out);};_proto88.GetUserData=function GetUserData(){return this.m_userData;};_proto88.SetUserData=function SetUserData(data){this.m_userData=data;};_proto88.ApplyForce=function ApplyForce(force){this.m_system.ApplyForce(this.m_firstIndex,this.m_lastIndex,force);};_proto88.ApplyLinearImpulse=function ApplyLinearImpulse(impulse){this.m_system.ApplyLinearImpulse(this.m_firstIndex,this.m_lastIndex,impulse);};_proto88.DestroyParticles=function DestroyParticles(callDestructionListener){if(this.m_system.m_world.IsLocked()){throw new Error();}for(var i=this.m_firstIndex;i<this.m_lastIndex;i++){this.m_system.DestroyParticle(i,callDestructionListener);}};_proto88.UpdateStatistics=function UpdateStatistics(){if(!this.m_system.m_positionBuffer.data){throw new Error();}if(!this.m_system.m_velocityBuffer.data){throw new Error();}var p=new b2Vec2();var v=new b2Vec2();if(this.m_timestamp!==this.m_system.m_timestamp){var m=this.m_system.GetParticleMass();this.m_mass=m*(this.m_lastIndex-this.m_firstIndex);this.m_center.SetZero();this.m_linearVelocity.SetZero();for(var i=this.m_firstIndex;i<this.m_lastIndex;i++){this.m_center.SelfMulAdd(m,this.m_system.m_positionBuffer.data[i]);this.m_linearVelocity.SelfMulAdd(m,this.m_system.m_velocityBuffer.data[i]);}if(this.m_mass>0){var inv_mass=1/this.m_mass;this.m_center.SelfMul(inv_mass);this.m_linearVelocity.SelfMul(inv_mass);}this.m_inertia=0;this.m_angularVelocity=0;for(var _i25=this.m_firstIndex;_i25<this.m_lastIndex;_i25++){b2Vec2.SubVV(this.m_system.m_positionBuffer.data[_i25],this.m_center,p);b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[_i25],this.m_linearVelocity,v);this.m_inertia+=m*b2Vec2.DotVV(p,p);this.m_angularVelocity+=m*b2Vec2.CrossVV(p,v);}if(this.m_inertia>0){this.m_angularVelocity*=1/this.m_inertia;}this.m_timestamp=this.m_system.m_timestamp;}};return b2ParticleGroup;}();b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0=new b2Vec2();var b2StackQueue=function(){function b2StackQueue(capacity){this.m_buffer=[];this.m_front=0;this.m_back=0;this.m_buffer.fill(null,0,capacity);}var _proto89=b2StackQueue.prototype;_proto89.Push=function Push(item){if(this.m_back>=this.m_capacity){for(var i=this.m_front;i<this.m_back;i++){this.m_buffer[i-this.m_front]=this.m_buffer[i];}this.m_back-=this.m_front;this.m_front=0;}this.m_buffer[this.m_back]=item;this.m_back++;};_proto89.Pop=function Pop(){this.m_buffer[this.m_front]=null;this.m_front++;};_proto89.Empty=function Empty(){return this.m_front===this.m_back;};_proto89.Front=function Front(){var item=this.m_buffer[this.m_front];if(!item){throw new Error();}return item;};_createClass(b2StackQueue,[{key:"m_capacity",get:function get(){return this.m_buffer.length;}}]);return b2StackQueue;}();var b2VoronoiDiagram=function(){function b2VoronoiDiagram(generatorCapacity){this.m_generatorCapacity=0;this.m_generatorCount=0;this.m_countX=0;this.m_countY=0;this.m_diagram=[];this.m_generatorBuffer=b2MakeArray(generatorCapacity,function(index){return new b2VoronoiDiagram_Generator();});this.m_generatorCapacity=generatorCapacity;}var _proto90=b2VoronoiDiagram.prototype;_proto90.AddGenerator=function AddGenerator(center,tag,necessary){var g=this.m_generatorBuffer[this.m_generatorCount++];g.center.Copy(center);g.tag=tag;g.necessary=necessary;};_proto90.Generate=function Generate(radius,margin){var inverseRadius=1/radius;var lower=new b2Vec2(+b2_maxFloat,+b2_maxFloat);var upper=new b2Vec2(-b2_maxFloat,-b2_maxFloat);var necessary_count=0;for(var k=0;k<this.m_generatorCount;k++){var g=this.m_generatorBuffer[k];if(g.necessary){b2Vec2.MinV(lower,g.center,lower);b2Vec2.MaxV(upper,g.center,upper);++necessary_count;}}if(necessary_count===0){this.m_countX=0;this.m_countY=0;return;}lower.x-=margin;lower.y-=margin;upper.x+=margin;upper.y+=margin;this.m_countX=1+Math.floor(inverseRadius*(upper.x-lower.x));this.m_countY=1+Math.floor(inverseRadius*(upper.y-lower.y));this.m_diagram=[];var queue=new b2StackQueue(4*this.m_countX*this.m_countY);for(var _k4=0;_k4<this.m_generatorCount;_k4++){var _g=this.m_generatorBuffer[_k4];_g.center.SelfSub(lower).SelfMul(inverseRadius);var x=Math.floor(_g.center.x);var y=Math.floor(_g.center.y);if(x>=0&&y>=0&&x<this.m_countX&&y<this.m_countY){queue.Push(new b2VoronoiDiagram_Task(x,y,x+y*this.m_countX,_g));}}while(!queue.Empty()){var task=queue.Front();var _x=task.m_x;var _y=task.m_y;var i=task.m_i;var _g2=task.m_generator;queue.Pop();if(!this.m_diagram[i]){this.m_diagram[i]=_g2;if(_x>0){queue.Push(new b2VoronoiDiagram_Task(_x-1,_y,i-1,_g2));}if(_y>0){queue.Push(new b2VoronoiDiagram_Task(_x,_y-1,i-this.m_countX,_g2));}if(_x<this.m_countX-1){queue.Push(new b2VoronoiDiagram_Task(_x+1,_y,i+1,_g2));}if(_y<this.m_countY-1){queue.Push(new b2VoronoiDiagram_Task(_x,_y+1,i+this.m_countX,_g2));}}}for(var _y2=0;_y2<this.m_countY;_y2++){for(var _x2=0;_x2<this.m_countX-1;_x2++){var _i26=_x2+_y2*this.m_countX;var a=this.m_diagram[_i26];var b=this.m_diagram[_i26+1];if(a!==b){queue.Push(new b2VoronoiDiagram_Task(_x2,_y2,_i26,b));queue.Push(new b2VoronoiDiagram_Task(_x2+1,_y2,_i26+1,a));}}}for(var _y3=0;_y3<this.m_countY-1;_y3++){for(var _x3=0;_x3<this.m_countX;_x3++){var _i27=_x3+_y3*this.m_countX;var _a2=this.m_diagram[_i27];var _b3=this.m_diagram[_i27+this.m_countX];if(_a2!==_b3){queue.Push(new b2VoronoiDiagram_Task(_x3,_y3,_i27,_b3));queue.Push(new b2VoronoiDiagram_Task(_x3,_y3+1,_i27+this.m_countX,_a2));}}}while(!queue.Empty()){var _task=queue.Front();var _x4=_task.m_x;var _y4=_task.m_y;var _i28=_task.m_i;var _k5=_task.m_generator;queue.Pop();var _a3=this.m_diagram[_i28];var _b4=_k5;if(_a3!==_b4){var ax=_a3.center.x-_x4;var ay=_a3.center.y-_y4;var bx=_b4.center.x-_x4;var by=_b4.center.y-_y4;var a2=ax*ax+ay*ay;var b2=bx*bx+by*by;if(a2>b2){this.m_diagram[_i28]=_b4;if(_x4>0){queue.Push(new b2VoronoiDiagram_Task(_x4-1,_y4,_i28-1,_b4));}if(_y4>0){queue.Push(new b2VoronoiDiagram_Task(_x4,_y4-1,_i28-this.m_countX,_b4));}if(_x4<this.m_countX-1){queue.Push(new b2VoronoiDiagram_Task(_x4+1,_y4,_i28+1,_b4));}if(_y4<this.m_countY-1){queue.Push(new b2VoronoiDiagram_Task(_x4,_y4+1,_i28+this.m_countX,_b4));}}}}};_proto90.GetNodes=function GetNodes(callback){for(var y=0;y<this.m_countY-1;y++){for(var x=0;x<this.m_countX-1;x++){var i=x+y*this.m_countX;var a=this.m_diagram[i];var b=this.m_diagram[i+1];var c=this.m_diagram[i+this.m_countX];var d=this.m_diagram[i+1+this.m_countX];if(b!==c){if(a!==b&&a!==c&&(a.necessary||b.necessary||c.necessary)){callback(a.tag,b.tag,c.tag);}if(d!==b&&d!==c&&(a.necessary||b.necessary||c.necessary)){callback(b.tag,d.tag,c.tag);}}}}};return b2VoronoiDiagram;}();var b2VoronoiDiagram_Generator=function b2VoronoiDiagram_Generator(){this.center=new b2Vec2();this.tag=0;this.necessary=false;};var b2VoronoiDiagram_Task=function b2VoronoiDiagram_Task(x,y,i,g){this.m_x=x;this.m_y=y;this.m_i=i;this.m_generator=g;};function std_iter_swap$1(array,a,b){var tmp=array[a];array[a]=array[b];array[b]=tmp;}function default_compare$1(a,b){return a<b;}function std_sort$1(array,first,len,cmp){if(first===void 0){first=0;}if(len===void 0){len=array.length-first;}if(cmp===void 0){cmp=default_compare$1;}var left=first;var stack=[];var pos=0;for(;;){for(;left+1<len;len++){var pivot=array[left+Math.floor(Math.random()*(len-left))];stack[pos++]=len;for(var right=left-1;;){while(cmp(array[++right],pivot)){}while(cmp(pivot,array[--len])){}if(right>=len){break;}std_iter_swap$1(array,right,len);}}if(pos===0){break;}left=len;len=stack[--pos];}return array;}function std_stable_sort(array,first,len,cmp){if(first===void 0){first=0;}if(len===void 0){len=array.length-first;}if(cmp===void 0){cmp=default_compare$1;}return std_sort$1(array,first,len,cmp);}function std_remove_if(array,predicate,length){if(length===void 0){length=array.length;}var l=0;for(var c=0;c<length;++c){if(predicate(array[c])){continue;}if(c===l){++l;continue;}std_iter_swap$1(array,l++,c);}return l;}function std_lower_bound(array,first,last,val,cmp){var count=last-first;while(count>0){var step=Math.floor(count/2);var it=first+step;if(cmp(array[it],val)){first=++it;count-=step+1;}else {count=step;}}return first;}function std_upper_bound(array,first,last,val,cmp){var count=last-first;while(count>0){var step=Math.floor(count/2);var it=first+step;if(!cmp(val,array[it])){first=++it;count-=step+1;}else {count=step;}}return first;}function std_rotate(array,first,n_first,last){var next=n_first;while(first!==next){std_iter_swap$1(array,first++,next++);if(next===last){next=n_first;}else if(first===n_first){n_first=next;}}}function std_unique(array,first,last,cmp){if(first===last){return last;}var result=first;while(++first!==last){if(!cmp(array[result],array[first])){std_iter_swap$1(array,++result,first);}}return ++result;}var b2GrowableBuffer=function(){function b2GrowableBuffer(allocator){this.data=[];this.count=0;this.capacity=0;this.allocator=allocator;}var _proto91=b2GrowableBuffer.prototype;_proto91.Append=function Append(){if(this.count>=this.capacity){this.Grow();}return this.count++;};_proto91.Reserve=function Reserve(newCapacity){if(this.capacity>=newCapacity){return;}for(var i=this.capacity;i<newCapacity;++i){this.data[i]=this.allocator();}this.capacity=newCapacity;};_proto91.Grow=function Grow(){var newCapacity=this.capacity?2*this.capacity:b2_minParticleSystemBufferCapacity;this.Reserve(newCapacity);};_proto91.Free=function Free(){if(this.data.length===0){return;}this.data=[];this.capacity=0;this.count=0;};_proto91.Shorten=function Shorten(newEnd){};_proto91.Data=function Data(){return this.data;};_proto91.GetCount=function GetCount(){return this.count;};_proto91.SetCount=function SetCount(newCount){this.count=newCount;};_proto91.GetCapacity=function GetCapacity(){return this.capacity;};_proto91.RemoveIf=function RemoveIf(pred){this.count=std_remove_if(this.data,pred,this.count);};_proto91.Unique=function Unique(pred){this.count=std_unique(this.data,0,this.count,pred);};return b2GrowableBuffer;}();var b2FixtureParticleQueryCallback=function(_b2QueryCallback){_inheritsLoose(b2FixtureParticleQueryCallback,_b2QueryCallback);function b2FixtureParticleQueryCallback(system){var _this31;_this31=_b2QueryCallback.call(this)||this;_this31.m_system=system;return _this31;}var _proto92=b2FixtureParticleQueryCallback.prototype;_proto92.ShouldQueryParticleSystem=function ShouldQueryParticleSystem(system){return false;};_proto92.ReportFixture=function ReportFixture(fixture){if(fixture.IsSensor()){return true;}var shape=fixture.GetShape();var childCount=shape.GetChildCount();for(var childIndex=0;childIndex<childCount;childIndex++){var aabb=fixture.GetAABB(childIndex);var enumerator=this.m_system.GetInsideBoundsEnumerator(aabb);var index=void 0;while((index=enumerator.GetNext())>=0){this.ReportFixtureAndParticle(fixture,childIndex,index);}}return true;};_proto92.ReportParticle=function ReportParticle(system,index){return false;};_proto92.ReportFixtureAndParticle=function ReportFixtureAndParticle(fixture,childIndex,index){};return b2FixtureParticleQueryCallback;}(b2QueryCallback);var b2ParticleContact=function(){function b2ParticleContact(){this.indexA=0;this.indexB=0;this.weight=0;this.normal=new b2Vec2();this.flags=0;}var _proto93=b2ParticleContact.prototype;_proto93.SetIndices=function SetIndices(a,b){this.indexA=a;this.indexB=b;};_proto93.SetWeight=function SetWeight(w){this.weight=w;};_proto93.SetNormal=function SetNormal(n){this.normal.Copy(n);};_proto93.SetFlags=function SetFlags(f){this.flags=f;};_proto93.GetIndexA=function GetIndexA(){return this.indexA;};_proto93.GetIndexB=function GetIndexB(){return this.indexB;};_proto93.GetWeight=function GetWeight(){return this.weight;};_proto93.GetNormal=function GetNormal(){return this.normal;};_proto93.GetFlags=function GetFlags(){return this.flags;};_proto93.IsEqual=function IsEqual(rhs){return this.indexA===rhs.indexA&&this.indexB===rhs.indexB&&this.flags===rhs.flags&&this.weight===rhs.weight&&this.normal.x===rhs.normal.x&&this.normal.y===rhs.normal.y;};_proto93.IsNotEqual=function IsNotEqual(rhs){return !this.IsEqual(rhs);};_proto93.ApproximatelyEqual=function ApproximatelyEqual(rhs){var MAX_WEIGHT_DIFF=0.01;var MAX_NORMAL_DIFF_SQ=0.01*0.01;return this.indexA===rhs.indexA&&this.indexB===rhs.indexB&&this.flags===rhs.flags&&b2Abs(this.weight-rhs.weight)<MAX_WEIGHT_DIFF&&b2Vec2.DistanceSquaredVV(this.normal,rhs.normal)<MAX_NORMAL_DIFF_SQ;};return b2ParticleContact;}();var b2ParticleBodyContact=function b2ParticleBodyContact(){this.index=0;this.weight=0.0;this.normal=new b2Vec2();this.mass=0.0;};var b2ParticlePair=function b2ParticlePair(){this.indexA=0;this.indexB=0;this.flags=0;this.strength=0.0;this.distance=0.0;};var b2ParticleTriad=function b2ParticleTriad(){this.indexA=0;this.indexB=0;this.indexC=0;this.flags=0;this.strength=0.0;this.pa=new b2Vec2(0.0,0.0);this.pb=new b2Vec2(0.0,0.0);this.pc=new b2Vec2(0.0,0.0);this.ka=0.0;this.kb=0.0;this.kc=0.0;this.s=0.0;};var b2ParticleSystemDef=function(){function b2ParticleSystemDef(){this.strictContactCheck=false;this.density=1.0;this.gravityScale=1.0;this.radius=1.0;this.maxCount=0;this.pressureStrength=0.005;this.dampingStrength=1.0;this.elasticStrength=0.25;this.springStrength=0.25;this.viscousStrength=0.25;this.surfaceTensionPressureStrength=0.2;this.surfaceTensionNormalStrength=0.2;this.repulsiveStrength=1.0;this.powderStrength=0.5;this.ejectionStrength=0.5;this.staticPressureStrength=0.2;this.staticPressureRelaxation=0.2;this.staticPressureIterations=8;this.colorMixingStrength=0.5;this.destroyByAge=true;this.lifetimeGranularity=1.0/60.0;}var _proto94=b2ParticleSystemDef.prototype;_proto94.Copy=function Copy(def){this.strictContactCheck=def.strictContactCheck;this.density=def.density;this.gravityScale=def.gravityScale;this.radius=def.radius;this.maxCount=def.maxCount;this.pressureStrength=def.pressureStrength;this.dampingStrength=def.dampingStrength;this.elasticStrength=def.elasticStrength;this.springStrength=def.springStrength;this.viscousStrength=def.viscousStrength;this.surfaceTensionPressureStrength=def.surfaceTensionPressureStrength;this.surfaceTensionNormalStrength=def.surfaceTensionNormalStrength;this.repulsiveStrength=def.repulsiveStrength;this.powderStrength=def.powderStrength;this.ejectionStrength=def.ejectionStrength;this.staticPressureStrength=def.staticPressureStrength;this.staticPressureRelaxation=def.staticPressureRelaxation;this.staticPressureIterations=def.staticPressureIterations;this.colorMixingStrength=def.colorMixingStrength;this.destroyByAge=def.destroyByAge;this.lifetimeGranularity=def.lifetimeGranularity;return this;};_proto94.Clone=function Clone(){return new b2ParticleSystemDef().Copy(this);};return b2ParticleSystemDef;}();var b2ParticleSystem=function(){function b2ParticleSystem(def,world){this.m_paused=false;this.m_timestamp=0;this.m_allParticleFlags=0;this.m_needsUpdateAllParticleFlags=false;this.m_allGroupFlags=0;this.m_needsUpdateAllGroupFlags=false;this.m_hasForce=false;this.m_iterationIndex=0;this.m_inverseDensity=0.0;this.m_particleDiameter=0.0;this.m_inverseDiameter=0.0;this.m_squaredDiameter=0.0;this.m_count=0;this.m_internalAllocatedCapacity=0;this.m_handleIndexBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_flagsBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_positionBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_velocityBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_forceBuffer=[];this.m_weightBuffer=[];this.m_staticPressureBuffer=[];this.m_accumulationBuffer=[];this.m_accumulation2Buffer=[];this.m_depthBuffer=[];this.m_colorBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_groupBuffer=[];this.m_userDataBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_stuckThreshold=0;this.m_lastBodyContactStepBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_bodyContactCountBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_consecutiveContactStepsBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_stuckParticleBuffer=new b2GrowableBuffer(function(){return 0;});this.m_proxyBuffer=new b2GrowableBuffer(function(){return new b2ParticleSystem_Proxy();});this.m_contactBuffer=new b2GrowableBuffer(function(){return new b2ParticleContact();});this.m_bodyContactBuffer=new b2GrowableBuffer(function(){return new b2ParticleBodyContact();});this.m_pairBuffer=new b2GrowableBuffer(function(){return new b2ParticlePair();});this.m_triadBuffer=new b2GrowableBuffer(function(){return new b2ParticleTriad();});this.m_expirationTimeBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_indexByExpirationTimeBuffer=new b2ParticleSystem_UserOverridableBuffer();this.m_timeElapsed=0;this.m_expirationTimeBufferRequiresSorting=false;this.m_groupCount=0;this.m_groupList=null;this.m_def=new b2ParticleSystemDef();this.m_prev=null;this.m_next=null;this.UpdateBodyContacts_callback=null;this.SolveCollision_callback=null;this.SetStrictContactCheck(def.strictContactCheck);this.SetDensity(def.density);this.SetGravityScale(def.gravityScale);this.SetRadius(def.radius);this.SetMaxParticleCount(def.maxCount);this.m_def=def.Clone();this.m_world=world;this.SetDestructionByAge(this.m_def.destroyByAge);}b2ParticleSystem.computeTag=function computeTag(x,y){return (y+b2ParticleSystem.yOffset>>>0<<b2ParticleSystem.yShift)+(b2ParticleSystem.xScale*x+b2ParticleSystem.xOffset>>>0)>>>0;};b2ParticleSystem.computeRelativeTag=function computeRelativeTag(tag,x,y){return tag+(y<<b2ParticleSystem.yShift)+(x<<b2ParticleSystem.xShift)>>>0;};var _proto95=b2ParticleSystem.prototype;_proto95.Drop=function Drop(){while(this.m_groupList){this.DestroyParticleGroup(this.m_groupList);}this.FreeUserOverridableBuffer(this.m_handleIndexBuffer);this.FreeUserOverridableBuffer(this.m_flagsBuffer);this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer);this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer);this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer);this.FreeUserOverridableBuffer(this.m_positionBuffer);this.FreeUserOverridableBuffer(this.m_velocityBuffer);this.FreeUserOverridableBuffer(this.m_colorBuffer);this.FreeUserOverridableBuffer(this.m_userDataBuffer);this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer);this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer);this.FreeBuffer(this.m_forceBuffer,this.m_internalAllocatedCapacity);this.FreeBuffer(this.m_weightBuffer,this.m_internalAllocatedCapacity);this.FreeBuffer(this.m_staticPressureBuffer,this.m_internalAllocatedCapacity);this.FreeBuffer(this.m_accumulationBuffer,this.m_internalAllocatedCapacity);this.FreeBuffer(this.m_accumulation2Buffer,this.m_internalAllocatedCapacity);this.FreeBuffer(this.m_depthBuffer,this.m_internalAllocatedCapacity);this.FreeBuffer(this.m_groupBuffer,this.m_internalAllocatedCapacity);};_proto95.CreateParticle=function CreateParticle(def){if(this.m_world.IsLocked()){throw new Error();}if(this.m_count>=this.m_internalAllocatedCapacity){var capacity=this.m_count?2*this.m_count:b2_minParticleSystemBufferCapacity;this.ReallocateInternalAllocatedBuffers(capacity);}if(this.m_count>=this.m_internalAllocatedCapacity){if(this.m_def.destroyByAge){this.DestroyOldestParticle(0,false);this.SolveZombie();}else {return b2_invalidParticleIndex;}}var index=this.m_count++;this.m_flagsBuffer.data[index]=0;if(this.m_lastBodyContactStepBuffer.data){this.m_lastBodyContactStepBuffer.data[index]=0;}if(this.m_bodyContactCountBuffer.data){this.m_bodyContactCountBuffer.data[index]=0;}if(this.m_consecutiveContactStepsBuffer.data){this.m_consecutiveContactStepsBuffer.data[index]=0;}this.m_positionBuffer.data[index]=(this.m_positionBuffer.data[index]||new b2Vec2()).Copy(b2Maybe(def.position,b2Vec2.ZERO));this.m_velocityBuffer.data[index]=(this.m_velocityBuffer.data[index]||new b2Vec2()).Copy(b2Maybe(def.velocity,b2Vec2.ZERO));this.m_weightBuffer[index]=0;this.m_forceBuffer[index]=(this.m_forceBuffer[index]||new b2Vec2()).SetZero();if(this.m_staticPressureBuffer){this.m_staticPressureBuffer[index]=0;}if(this.m_depthBuffer){this.m_depthBuffer[index]=0;}var color=new b2Color().Copy(b2Maybe(def.color,b2Color.ZERO));if(this.m_colorBuffer.data||!color.IsZero()){this.m_colorBuffer.data=this.RequestBuffer(this.m_colorBuffer.data);this.m_colorBuffer.data[index]=(this.m_colorBuffer.data[index]||new b2Color()).Copy(color);}if(this.m_userDataBuffer.data||def.userData){this.m_userDataBuffer.data=this.RequestBuffer(this.m_userDataBuffer.data);this.m_userDataBuffer.data[index]=def.userData;}if(this.m_handleIndexBuffer.data){this.m_handleIndexBuffer.data[index]=null;}var proxy=this.m_proxyBuffer.data[this.m_proxyBuffer.Append()];var lifetime=b2Maybe(def.lifetime,0.0);var finiteLifetime=lifetime>0.0;if(this.m_expirationTimeBuffer.data||finiteLifetime){this.SetParticleLifetime(index,finiteLifetime?lifetime:this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed()));this.m_indexByExpirationTimeBuffer.data[index]=index;}proxy.index=index;var group=b2Maybe(def.group,null);this.m_groupBuffer[index]=group;if(group){if(group.m_firstIndex<group.m_lastIndex){this.RotateBuffer(group.m_firstIndex,group.m_lastIndex,index);group.m_lastIndex=index+1;}else {group.m_firstIndex=index;group.m_lastIndex=index+1;}}this.SetParticleFlags(index,b2Maybe(def.flags,0));return index;};_proto95.GetParticleHandleFromIndex=function GetParticleHandleFromIndex(index){this.m_handleIndexBuffer.data=this.RequestBuffer(this.m_handleIndexBuffer.data);var handle=this.m_handleIndexBuffer.data[index];if(handle){return handle;}handle=new b2ParticleHandle();handle.SetIndex(index);this.m_handleIndexBuffer.data[index]=handle;return handle;};_proto95.DestroyParticle=function DestroyParticle(index,callDestructionListener){if(callDestructionListener===void 0){callDestructionListener=false;}var flags=exports.b2ParticleFlag.b2_zombieParticle;if(callDestructionListener){flags|=exports.b2ParticleFlag.b2_destructionListenerParticle;}this.SetParticleFlags(index,this.m_flagsBuffer.data[index]|flags);};_proto95.DestroyOldestParticle=function DestroyOldestParticle(index,callDestructionListener){if(callDestructionListener===void 0){callDestructionListener=false;}var particleCount=this.GetParticleCount();var oldestFiniteLifetimeParticle=this.m_indexByExpirationTimeBuffer.data[particleCount-(index+1)];var oldestInfiniteLifetimeParticle=this.m_indexByExpirationTimeBuffer.data[index];this.DestroyParticle(this.m_expirationTimeBuffer.data[oldestFiniteLifetimeParticle]>0.0?oldestFiniteLifetimeParticle:oldestInfiniteLifetimeParticle,callDestructionListener);};_proto95.DestroyParticlesInShape=function DestroyParticlesInShape(shape,xf,callDestructionListener){if(callDestructionListener===void 0){callDestructionListener=false;}var s_aabb=b2ParticleSystem.DestroyParticlesInShape_s_aabb;if(this.m_world.IsLocked()){throw new Error();}var callback=new b2ParticleSystem_DestroyParticlesInShapeCallback(this,shape,xf,callDestructionListener);var aabb=s_aabb;shape.ComputeAABB(aabb,xf,0);this.m_world.QueryAABB(callback,aabb);return callback.Destroyed();};_proto95.CreateParticleGroup=function CreateParticleGroup(groupDef){var s_transform=b2ParticleSystem.CreateParticleGroup_s_transform;if(this.m_world.IsLocked()){throw new Error();}var transform=s_transform;transform.SetPositionAngle(b2Maybe(groupDef.position,b2Vec2.ZERO),b2Maybe(groupDef.angle,0));var firstIndex=this.m_count;if(groupDef.shape){this.CreateParticlesWithShapeForGroup(groupDef.shape,groupDef,transform);}if(groupDef.shapes){this.CreateParticlesWithShapesForGroup(groupDef.shapes,b2Maybe(groupDef.shapeCount,groupDef.shapes.length),groupDef,transform);}if(groupDef.positionData){var count=b2Maybe(groupDef.particleCount,groupDef.positionData.length);for(var i=0;i<count;i++){var p=groupDef.positionData[i];this.CreateParticleForGroup(groupDef,transform,p);}}var lastIndex=this.m_count;var group=new b2ParticleGroup(this);group.m_firstIndex=firstIndex;group.m_lastIndex=lastIndex;group.m_strength=b2Maybe(groupDef.strength,1);group.m_userData=groupDef.userData;group.m_transform.Copy(transform);group.m_prev=null;group.m_next=this.m_groupList;if(this.m_groupList){this.m_groupList.m_prev=group;}this.m_groupList=group;++this.m_groupCount;for(var _i29=firstIndex;_i29<lastIndex;_i29++){this.m_groupBuffer[_i29]=group;}this.SetGroupFlags(group,b2Maybe(groupDef.groupFlags,0));var filter=new b2ParticleSystem_ConnectionFilter();this.UpdateContacts(true);this.UpdatePairsAndTriads(firstIndex,lastIndex,filter);if(groupDef.group){this.JoinParticleGroups(groupDef.group,group);group=groupDef.group;}return group;};_proto95.JoinParticleGroups=function JoinParticleGroups(groupA,groupB){if(this.m_world.IsLocked()){throw new Error();}this.RotateBuffer(groupB.m_firstIndex,groupB.m_lastIndex,this.m_count);this.RotateBuffer(groupA.m_firstIndex,groupA.m_lastIndex,groupB.m_firstIndex);var filter=new b2ParticleSystem_JoinParticleGroupsFilter(groupB.m_firstIndex);this.UpdateContacts(true);this.UpdatePairsAndTriads(groupA.m_firstIndex,groupB.m_lastIndex,filter);for(var i=groupB.m_firstIndex;i<groupB.m_lastIndex;i++){this.m_groupBuffer[i]=groupA;}var groupFlags=groupA.m_groupFlags|groupB.m_groupFlags;this.SetGroupFlags(groupA,groupFlags);groupA.m_lastIndex=groupB.m_lastIndex;groupB.m_firstIndex=groupB.m_lastIndex;this.DestroyParticleGroup(groupB);};_proto95.SplitParticleGroup=function SplitParticleGroup(group){this.UpdateContacts(true);var particleCount=group.GetParticleCount();var nodeBuffer=b2MakeArray(particleCount,function(index){return new b2ParticleSystem_ParticleListNode();});b2ParticleSystem.InitializeParticleLists(group,nodeBuffer);this.MergeParticleListsInContact(group,nodeBuffer);var survivingList=b2ParticleSystem.FindLongestParticleList(group,nodeBuffer);this.MergeZombieParticleListNodes(group,nodeBuffer,survivingList);this.CreateParticleGroupsFromParticleList(group,nodeBuffer,survivingList);this.UpdatePairsAndTriadsWithParticleList(group,nodeBuffer);};_proto95.GetParticleGroupList=function GetParticleGroupList(){return this.m_groupList;};_proto95.GetParticleGroupCount=function GetParticleGroupCount(){return this.m_groupCount;};_proto95.GetParticleCount=function GetParticleCount(){return this.m_count;};_proto95.GetMaxParticleCount=function GetMaxParticleCount(){return this.m_def.maxCount;};_proto95.SetMaxParticleCount=function SetMaxParticleCount(count){this.m_def.maxCount=count;};_proto95.GetAllParticleFlags=function GetAllParticleFlags(){return this.m_allParticleFlags;};_proto95.GetAllGroupFlags=function GetAllGroupFlags(){return this.m_allGroupFlags;};_proto95.SetPaused=function SetPaused(paused){this.m_paused=paused;};_proto95.GetPaused=function GetPaused(){return this.m_paused;};_proto95.SetDensity=function SetDensity(density){this.m_def.density=density;this.m_inverseDensity=1/this.m_def.density;};_proto95.GetDensity=function GetDensity(){return this.m_def.density;};_proto95.SetGravityScale=function SetGravityScale(gravityScale){this.m_def.gravityScale=gravityScale;};_proto95.GetGravityScale=function GetGravityScale(){return this.m_def.gravityScale;};_proto95.SetDamping=function SetDamping(damping){this.m_def.dampingStrength=damping;};_proto95.GetDamping=function GetDamping(){return this.m_def.dampingStrength;};_proto95.SetStaticPressureIterations=function SetStaticPressureIterations(iterations){this.m_def.staticPressureIterations=iterations;};_proto95.GetStaticPressureIterations=function GetStaticPressureIterations(){return this.m_def.staticPressureIterations;};_proto95.SetRadius=function SetRadius(radius){this.m_particleDiameter=2*radius;this.m_squaredDiameter=this.m_particleDiameter*this.m_particleDiameter;this.m_inverseDiameter=1/this.m_particleDiameter;};_proto95.GetRadius=function GetRadius(){return this.m_particleDiameter/2;};_proto95.GetPositionBuffer=function GetPositionBuffer(){return this.m_positionBuffer.data;};_proto95.GetVelocityBuffer=function GetVelocityBuffer(){return this.m_velocityBuffer.data;};_proto95.GetColorBuffer=function GetColorBuffer(){this.m_colorBuffer.data=this.RequestBuffer(this.m_colorBuffer.data);return this.m_colorBuffer.data;};_proto95.GetGroupBuffer=function GetGroupBuffer(){return this.m_groupBuffer;};_proto95.GetWeightBuffer=function GetWeightBuffer(){return this.m_weightBuffer;};_proto95.GetUserDataBuffer=function GetUserDataBuffer(){this.m_userDataBuffer.data=this.RequestBuffer(this.m_userDataBuffer.data);return this.m_userDataBuffer.data;};_proto95.GetFlagsBuffer=function GetFlagsBuffer(){return this.m_flagsBuffer.data;};_proto95.SetParticleFlags=function SetParticleFlags(index,newFlags){var oldFlags=this.m_flagsBuffer.data[index];if(oldFlags&~newFlags){this.m_needsUpdateAllParticleFlags=true;}if(~this.m_allParticleFlags&newFlags){if(newFlags&exports.b2ParticleFlag.b2_tensileParticle){this.m_accumulation2Buffer=this.RequestBuffer(this.m_accumulation2Buffer);}if(newFlags&exports.b2ParticleFlag.b2_colorMixingParticle){this.m_colorBuffer.data=this.RequestBuffer(this.m_colorBuffer.data);}this.m_allParticleFlags|=newFlags;}this.m_flagsBuffer.data[index]=newFlags;};_proto95.GetParticleFlags=function GetParticleFlags(index){return this.m_flagsBuffer.data[index];};_proto95.SetFlagsBuffer=function SetFlagsBuffer(buffer){this.SetUserOverridableBuffer(this.m_flagsBuffer,buffer);};_proto95.SetPositionBuffer=function SetPositionBuffer(buffer){if(buffer instanceof Float32Array){if(buffer.length%2!==0){throw new Error();}var count=buffer.length/2;var array=new Array(count);for(var i=0;i<count;++i){array[i]=new b2Vec2(buffer.subarray(i*2,i*2+2));}buffer=array;}this.SetUserOverridableBuffer(this.m_positionBuffer,buffer);};_proto95.SetVelocityBuffer=function SetVelocityBuffer(buffer){if(buffer instanceof Float32Array){if(buffer.length%2!==0){throw new Error();}var count=buffer.length/2;var array=new Array(count);for(var i=0;i<count;++i){array[i]=new b2Vec2(buffer.subarray(i*2,i*2+2));}buffer=array;}this.SetUserOverridableBuffer(this.m_velocityBuffer,buffer);};_proto95.SetColorBuffer=function SetColorBuffer(buffer){if(buffer instanceof Float32Array){if(buffer.length%4!==0){throw new Error();}var count=buffer.length/4;var array=new Array(count);for(var i=0;i<count;++i){array[i]=new b2Color(buffer.subarray(i*4,i*4+4));}buffer=array;}this.SetUserOverridableBuffer(this.m_colorBuffer,buffer);};_proto95.SetUserDataBuffer=function SetUserDataBuffer(buffer){this.SetUserOverridableBuffer(this.m_userDataBuffer,buffer);};_proto95.GetContacts=function GetContacts(){return this.m_contactBuffer.data;};_proto95.GetContactCount=function GetContactCount(){return this.m_contactBuffer.count;};_proto95.GetBodyContacts=function GetBodyContacts(){return this.m_bodyContactBuffer.data;};_proto95.GetBodyContactCount=function GetBodyContactCount(){return this.m_bodyContactBuffer.count;};_proto95.GetPairs=function GetPairs(){return this.m_pairBuffer.data;};_proto95.GetPairCount=function GetPairCount(){return this.m_pairBuffer.count;};_proto95.GetTriads=function GetTriads(){return this.m_triadBuffer.data;};_proto95.GetTriadCount=function GetTriadCount(){return this.m_triadBuffer.count;};_proto95.SetStuckThreshold=function SetStuckThreshold(steps){this.m_stuckThreshold=steps;if(steps>0){this.m_lastBodyContactStepBuffer.data=this.RequestBuffer(this.m_lastBodyContactStepBuffer.data);this.m_bodyContactCountBuffer.data=this.RequestBuffer(this.m_bodyContactCountBuffer.data);this.m_consecutiveContactStepsBuffer.data=this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data);}};_proto95.GetStuckCandidates=function GetStuckCandidates(){return this.m_stuckParticleBuffer.Data();};_proto95.GetStuckCandidateCount=function GetStuckCandidateCount(){return this.m_stuckParticleBuffer.GetCount();};_proto95.ComputeCollisionEnergy=function ComputeCollisionEnergy(){var s_v=b2ParticleSystem.ComputeCollisionEnergy_s_v;var vel_data=this.m_velocityBuffer.data;var sum_v2=0;for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];var a=contact.indexA;var b=contact.indexB;var n=contact.normal;var v=b2Vec2.SubVV(vel_data[b],vel_data[a],s_v);var vn=b2Vec2.DotVV(v,n);if(vn<0){sum_v2+=vn*vn;}}return 0.5*this.GetParticleMass()*sum_v2;};_proto95.SetStrictContactCheck=function SetStrictContactCheck(enabled){this.m_def.strictContactCheck=enabled;};_proto95.GetStrictContactCheck=function GetStrictContactCheck(){return this.m_def.strictContactCheck;};_proto95.SetParticleLifetime=function SetParticleLifetime(index,lifetime){var initializeExpirationTimes=this.m_indexByExpirationTimeBuffer.data===null;this.m_expirationTimeBuffer.data=this.RequestBuffer(this.m_expirationTimeBuffer.data);this.m_indexByExpirationTimeBuffer.data=this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);if(initializeExpirationTimes){var particleCount=this.GetParticleCount();for(var i=0;i<particleCount;++i){this.m_indexByExpirationTimeBuffer.data[i]=i;}}var quantizedLifetime=lifetime/this.m_def.lifetimeGranularity;var newExpirationTime=quantizedLifetime>0.0?this.GetQuantizedTimeElapsed()+quantizedLifetime:quantizedLifetime;if(newExpirationTime!==this.m_expirationTimeBuffer.data[index]){this.m_expirationTimeBuffer.data[index]=newExpirationTime;this.m_expirationTimeBufferRequiresSorting=true;}};_proto95.GetParticleLifetime=function GetParticleLifetime(index){return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[index]);};_proto95.SetDestructionByAge=function SetDestructionByAge(enable){if(enable){this.GetExpirationTimeBuffer();}this.m_def.destroyByAge=enable;};_proto95.GetDestructionByAge=function GetDestructionByAge(){return this.m_def.destroyByAge;};_proto95.GetExpirationTimeBuffer=function GetExpirationTimeBuffer(){this.m_expirationTimeBuffer.data=this.RequestBuffer(this.m_expirationTimeBuffer.data);return this.m_expirationTimeBuffer.data;};_proto95.ExpirationTimeToLifetime=function ExpirationTimeToLifetime(expirationTime){return (expirationTime>0?expirationTime-this.GetQuantizedTimeElapsed():expirationTime)*this.m_def.lifetimeGranularity;};_proto95.GetIndexByExpirationTimeBuffer=function GetIndexByExpirationTimeBuffer(){if(this.GetParticleCount()){this.SetParticleLifetime(0,this.GetParticleLifetime(0));}else {this.m_indexByExpirationTimeBuffer.data=this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);}return this.m_indexByExpirationTimeBuffer.data;};_proto95.ParticleApplyLinearImpulse=function ParticleApplyLinearImpulse(index,impulse){this.ApplyLinearImpulse(index,index+1,impulse);};_proto95.ApplyLinearImpulse=function ApplyLinearImpulse(firstIndex,lastIndex,impulse){var vel_data=this.m_velocityBuffer.data;var numParticles=lastIndex-firstIndex;var totalMass=numParticles*this.GetParticleMass();var velocityDelta=new b2Vec2().Copy(impulse).SelfMul(1/totalMass);for(var i=firstIndex;i<lastIndex;i++){vel_data[i].SelfAdd(velocityDelta);}};b2ParticleSystem.IsSignificantForce=function IsSignificantForce(force){return force.x!==0||force.y!==0;};_proto95.ParticleApplyForce=function ParticleApplyForce(index,force){if(b2ParticleSystem.IsSignificantForce(force)&&this.ForceCanBeApplied(this.m_flagsBuffer.data[index])){this.PrepareForceBuffer();this.m_forceBuffer[index].SelfAdd(force);}};_proto95.ApplyForce=function ApplyForce(firstIndex,lastIndex,force){var distributedForce=new b2Vec2().Copy(force).SelfMul(1/(lastIndex-firstIndex));if(b2ParticleSystem.IsSignificantForce(distributedForce)){this.PrepareForceBuffer();for(var i=firstIndex;i<lastIndex;i++){this.m_forceBuffer[i].SelfAdd(distributedForce);}}};_proto95.GetNext=function GetNext(){return this.m_next;};_proto95.QueryAABB=function QueryAABB(callback,aabb){if(this.m_proxyBuffer.count===0){return;}var beginProxy=0;var endProxy=this.m_proxyBuffer.count;var firstProxy=std_lower_bound(this.m_proxyBuffer.data,beginProxy,endProxy,b2ParticleSystem.computeTag(this.m_inverseDiameter*aabb.lowerBound.x,this.m_inverseDiameter*aabb.lowerBound.y),b2ParticleSystem_Proxy.CompareProxyTag);var lastProxy=std_upper_bound(this.m_proxyBuffer.data,firstProxy,endProxy,b2ParticleSystem.computeTag(this.m_inverseDiameter*aabb.upperBound.x,this.m_inverseDiameter*aabb.upperBound.y),b2ParticleSystem_Proxy.CompareTagProxy);var pos_data=this.m_positionBuffer.data;for(var k=firstProxy;k<lastProxy;++k){var proxy=this.m_proxyBuffer.data[k];var i=proxy.index;var p=pos_data[i];if(aabb.lowerBound.x<p.x&&p.x<aabb.upperBound.x&&aabb.lowerBound.y<p.y&&p.y<aabb.upperBound.y){if(!callback.ReportParticle(this,i)){break;}}}};_proto95.QueryShapeAABB=function QueryShapeAABB(callback,shape,xf,childIndex){if(childIndex===void 0){childIndex=0;}var s_aabb=b2ParticleSystem.QueryShapeAABB_s_aabb;var aabb=s_aabb;shape.ComputeAABB(aabb,xf,childIndex);this.QueryAABB(callback,aabb);};_proto95.QueryPointAABB=function QueryPointAABB(callback,point,slop){if(slop===void 0){slop=b2_linearSlop;}var s_aabb=b2ParticleSystem.QueryPointAABB_s_aabb;var aabb=s_aabb;aabb.lowerBound.Set(point.x-slop,point.y-slop);aabb.upperBound.Set(point.x+slop,point.y+slop);this.QueryAABB(callback,aabb);};_proto95.RayCast=function RayCast(callback,point1,point2){var s_aabb=b2ParticleSystem.RayCast_s_aabb;var s_p=b2ParticleSystem.RayCast_s_p;var s_v=b2ParticleSystem.RayCast_s_v;var s_n=b2ParticleSystem.RayCast_s_n;var s_point=b2ParticleSystem.RayCast_s_point;if(this.m_proxyBuffer.count===0){return;}var pos_data=this.m_positionBuffer.data;var aabb=s_aabb;b2Vec2.MinV(point1,point2,aabb.lowerBound);b2Vec2.MaxV(point1,point2,aabb.upperBound);var fraction=1;var v=b2Vec2.SubVV(point2,point1,s_v);var v2=b2Vec2.DotVV(v,v);var enumerator=this.GetInsideBoundsEnumerator(aabb);var i;while((i=enumerator.GetNext())>=0){var p=b2Vec2.SubVV(point1,pos_data[i],s_p);var pv=b2Vec2.DotVV(p,v);var p2=b2Vec2.DotVV(p,p);var determinant=pv*pv-v2*(p2-this.m_squaredDiameter);if(determinant>=0){var sqrtDeterminant=b2Sqrt(determinant);var t=(-pv-sqrtDeterminant)/v2;if(t>fraction){continue;}if(t<0){t=(-pv+sqrtDeterminant)/v2;if(t<0||t>fraction){continue;}}var n=b2Vec2.AddVMulSV(p,t,v,s_n);n.Normalize();var f=callback.ReportParticle(this,i,b2Vec2.AddVMulSV(point1,t,v,s_point),n,t);fraction=b2Min(fraction,f);if(fraction<=0){break;}}}};_proto95.ComputeAABB=function ComputeAABB(aabb){var particleCount=this.GetParticleCount();aabb.lowerBound.x=+b2_maxFloat;aabb.lowerBound.y=+b2_maxFloat;aabb.upperBound.x=-b2_maxFloat;aabb.upperBound.y=-b2_maxFloat;var pos_data=this.m_positionBuffer.data;for(var i=0;i<particleCount;i++){var p=pos_data[i];b2Vec2.MinV(aabb.lowerBound,p,aabb.lowerBound);b2Vec2.MaxV(aabb.upperBound,p,aabb.upperBound);}aabb.lowerBound.x-=this.m_particleDiameter;aabb.lowerBound.y-=this.m_particleDiameter;aabb.upperBound.x+=this.m_particleDiameter;aabb.upperBound.y+=this.m_particleDiameter;};_proto95.FreeBuffer=function FreeBuffer(b,capacity){if(b===null){return;}b.length=0;};_proto95.FreeUserOverridableBuffer=function FreeUserOverridableBuffer(b){if(b.userSuppliedCapacity===0){this.FreeBuffer(b.data,this.m_internalAllocatedCapacity);}};_proto95.ReallocateBuffer3=function ReallocateBuffer3(oldBuffer,oldCapacity,newCapacity){if(newCapacity<=oldCapacity){throw new Error();}var newBuffer=oldBuffer?oldBuffer.slice():[];newBuffer.length=newCapacity;return newBuffer;};_proto95.ReallocateBuffer5=function ReallocateBuffer5(buffer,userSuppliedCapacity,oldCapacity,newCapacity,deferred){if(newCapacity<=oldCapacity){throw new Error();}if(!(!userSuppliedCapacity||newCapacity<=userSuppliedCapacity)){throw new Error();}if((!deferred||buffer)&&!userSuppliedCapacity){buffer=this.ReallocateBuffer3(buffer,oldCapacity,newCapacity);}return buffer;};_proto95.ReallocateBuffer4=function ReallocateBuffer4(buffer,oldCapacity,newCapacity,deferred){return this.ReallocateBuffer5(buffer.data,buffer.userSuppliedCapacity,oldCapacity,newCapacity,deferred);};_proto95.RequestBuffer=function RequestBuffer(buffer){if(!buffer){if(this.m_internalAllocatedCapacity===0){this.ReallocateInternalAllocatedBuffers(b2_minParticleSystemBufferCapacity);}buffer=[];buffer.length=this.m_internalAllocatedCapacity;}return buffer;};_proto95.ReallocateHandleBuffers=function ReallocateHandleBuffers(newCapacity){this.m_handleIndexBuffer.data=this.ReallocateBuffer4(this.m_handleIndexBuffer,this.m_internalAllocatedCapacity,newCapacity,true);};_proto95.ReallocateInternalAllocatedBuffers=function ReallocateInternalAllocatedBuffers(capacity){function LimitCapacity(capacity,maxCount){return maxCount&&capacity>maxCount?maxCount:capacity;}capacity=LimitCapacity(capacity,this.m_def.maxCount);capacity=LimitCapacity(capacity,this.m_flagsBuffer.userSuppliedCapacity);capacity=LimitCapacity(capacity,this.m_positionBuffer.userSuppliedCapacity);capacity=LimitCapacity(capacity,this.m_velocityBuffer.userSuppliedCapacity);capacity=LimitCapacity(capacity,this.m_colorBuffer.userSuppliedCapacity);capacity=LimitCapacity(capacity,this.m_userDataBuffer.userSuppliedCapacity);if(this.m_internalAllocatedCapacity<capacity){this.ReallocateHandleBuffers(capacity);this.m_flagsBuffer.data=this.ReallocateBuffer4(this.m_flagsBuffer,this.m_internalAllocatedCapacity,capacity,false);var stuck=this.m_stuckThreshold>0;this.m_lastBodyContactStepBuffer.data=this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer,this.m_internalAllocatedCapacity,capacity,stuck);this.m_bodyContactCountBuffer.data=this.ReallocateBuffer4(this.m_bodyContactCountBuffer,this.m_internalAllocatedCapacity,capacity,stuck);this.m_consecutiveContactStepsBuffer.data=this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer,this.m_internalAllocatedCapacity,capacity,stuck);this.m_positionBuffer.data=this.ReallocateBuffer4(this.m_positionBuffer,this.m_internalAllocatedCapacity,capacity,false);this.m_velocityBuffer.data=this.ReallocateBuffer4(this.m_velocityBuffer,this.m_internalAllocatedCapacity,capacity,false);this.m_forceBuffer=this.ReallocateBuffer5(this.m_forceBuffer,0,this.m_internalAllocatedCapacity,capacity,false);this.m_weightBuffer=this.ReallocateBuffer5(this.m_weightBuffer,0,this.m_internalAllocatedCapacity,capacity,false);this.m_staticPressureBuffer=this.ReallocateBuffer5(this.m_staticPressureBuffer,0,this.m_internalAllocatedCapacity,capacity,true);this.m_accumulationBuffer=this.ReallocateBuffer5(this.m_accumulationBuffer,0,this.m_internalAllocatedCapacity,capacity,false);this.m_accumulation2Buffer=this.ReallocateBuffer5(this.m_accumulation2Buffer,0,this.m_internalAllocatedCapacity,capacity,true);this.m_depthBuffer=this.ReallocateBuffer5(this.m_depthBuffer,0,this.m_internalAllocatedCapacity,capacity,true);this.m_colorBuffer.data=this.ReallocateBuffer4(this.m_colorBuffer,this.m_internalAllocatedCapacity,capacity,true);this.m_groupBuffer=this.ReallocateBuffer5(this.m_groupBuffer,0,this.m_internalAllocatedCapacity,capacity,false);this.m_userDataBuffer.data=this.ReallocateBuffer4(this.m_userDataBuffer,this.m_internalAllocatedCapacity,capacity,true);this.m_expirationTimeBuffer.data=this.ReallocateBuffer4(this.m_expirationTimeBuffer,this.m_internalAllocatedCapacity,capacity,true);this.m_indexByExpirationTimeBuffer.data=this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer,this.m_internalAllocatedCapacity,capacity,false);this.m_internalAllocatedCapacity=capacity;}};_proto95.CreateParticleForGroup=function CreateParticleForGroup(groupDef,xf,p){var particleDef=new b2ParticleDef();particleDef.flags=b2Maybe(groupDef.flags,0);b2Transform.MulXV(xf,p,particleDef.position);b2Vec2.AddVV(b2Maybe(groupDef.linearVelocity,b2Vec2.ZERO),b2Vec2.CrossSV(b2Maybe(groupDef.angularVelocity,0),b2Vec2.SubVV(particleDef.position,b2Maybe(groupDef.position,b2Vec2.ZERO),b2Vec2.s_t0),b2Vec2.s_t0),particleDef.velocity);particleDef.color.Copy(b2Maybe(groupDef.color,b2Color.ZERO));particleDef.lifetime=b2Maybe(groupDef.lifetime,0);particleDef.userData=groupDef.userData;this.CreateParticle(particleDef);};_proto95.CreateParticlesStrokeShapeForGroup=function CreateParticlesStrokeShapeForGroup(shape,groupDef,xf){var s_edge=b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge;var s_d=b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d;var s_p=b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p;var stride=b2Maybe(groupDef.stride,0);if(stride===0){stride=this.GetParticleStride();}var positionOnEdge=0;var childCount=shape.GetChildCount();for(var childIndex=0;childIndex<childCount;childIndex++){var edge=null;if(shape.GetType()===exports.b2ShapeType.e_edgeShape){edge=shape;}else {edge=s_edge;shape.GetChildEdge(edge,childIndex);}var d=b2Vec2.SubVV(edge.m_vertex2,edge.m_vertex1,s_d);var edgeLength=d.Length();while(positionOnEdge<edgeLength){var p=b2Vec2.AddVMulSV(edge.m_vertex1,positionOnEdge/edgeLength,d,s_p);this.CreateParticleForGroup(groupDef,xf,p);positionOnEdge+=stride;}positionOnEdge-=edgeLength;}};_proto95.CreateParticlesFillShapeForGroup=function CreateParticlesFillShapeForGroup(shape,groupDef,xf){var s_aabb=b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb;var s_p=b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p;var stride=b2Maybe(groupDef.stride,0);if(stride===0){stride=this.GetParticleStride();}var identity=b2Transform.IDENTITY;var aabb=s_aabb;shape.ComputeAABB(aabb,identity,0);for(var y=Math.floor(aabb.lowerBound.y/stride)*stride;y<aabb.upperBound.y;y+=stride){for(var x=Math.floor(aabb.lowerBound.x/stride)*stride;x<aabb.upperBound.x;x+=stride){var p=s_p.Set(x,y);if(shape.TestPoint(identity,p)){this.CreateParticleForGroup(groupDef,xf,p);}}}};_proto95.CreateParticlesWithShapeForGroup=function CreateParticlesWithShapeForGroup(shape,groupDef,xf){switch(shape.GetType()){case exports.b2ShapeType.e_edgeShape:case exports.b2ShapeType.e_chainShape:this.CreateParticlesStrokeShapeForGroup(shape,groupDef,xf);break;case exports.b2ShapeType.e_polygonShape:case exports.b2ShapeType.e_circleShape:this.CreateParticlesFillShapeForGroup(shape,groupDef,xf);break;}};_proto95.CreateParticlesWithShapesForGroup=function CreateParticlesWithShapesForGroup(shapes,shapeCount,groupDef,xf){var compositeShape=new b2ParticleSystem_CompositeShape(shapes,shapeCount);this.CreateParticlesFillShapeForGroup(compositeShape,groupDef,xf);};_proto95.CloneParticle=function CloneParticle(oldIndex,group){var def=new b2ParticleDef();def.flags=this.m_flagsBuffer.data[oldIndex];def.position.Copy(this.m_positionBuffer.data[oldIndex]);def.velocity.Copy(this.m_velocityBuffer.data[oldIndex]);if(this.m_colorBuffer.data){def.color.Copy(this.m_colorBuffer.data[oldIndex]);}if(this.m_userDataBuffer.data){def.userData=this.m_userDataBuffer.data[oldIndex];}def.group=group;var newIndex=this.CreateParticle(def);if(this.m_handleIndexBuffer.data){var handle=this.m_handleIndexBuffer.data[oldIndex];if(handle){handle.SetIndex(newIndex);}this.m_handleIndexBuffer.data[newIndex]=handle;this.m_handleIndexBuffer.data[oldIndex]=null;}if(this.m_lastBodyContactStepBuffer.data){this.m_lastBodyContactStepBuffer.data[newIndex]=this.m_lastBodyContactStepBuffer.data[oldIndex];}if(this.m_bodyContactCountBuffer.data){this.m_bodyContactCountBuffer.data[newIndex]=this.m_bodyContactCountBuffer.data[oldIndex];}if(this.m_consecutiveContactStepsBuffer.data){this.m_consecutiveContactStepsBuffer.data[newIndex]=this.m_consecutiveContactStepsBuffer.data[oldIndex];}if(this.m_hasForce){this.m_forceBuffer[newIndex].Copy(this.m_forceBuffer[oldIndex]);}if(this.m_staticPressureBuffer){this.m_staticPressureBuffer[newIndex]=this.m_staticPressureBuffer[oldIndex];}if(this.m_depthBuffer){this.m_depthBuffer[newIndex]=this.m_depthBuffer[oldIndex];}if(this.m_expirationTimeBuffer.data){this.m_expirationTimeBuffer.data[newIndex]=this.m_expirationTimeBuffer.data[oldIndex];}return newIndex;};_proto95.DestroyParticlesInGroup=function DestroyParticlesInGroup(group,callDestructionListener){if(callDestructionListener===void 0){callDestructionListener=false;}for(var i=group.m_firstIndex;i<group.m_lastIndex;i++){this.DestroyParticle(i,callDestructionListener);}};_proto95.DestroyParticleGroup=function DestroyParticleGroup(group){if(this.m_world.m_destructionListener){this.m_world.m_destructionListener.SayGoodbyeParticleGroup(group);}this.SetGroupFlags(group,0);for(var i=group.m_firstIndex;i<group.m_lastIndex;i++){this.m_groupBuffer[i]=null;}if(group.m_prev){group.m_prev.m_next=group.m_next;}if(group.m_next){group.m_next.m_prev=group.m_prev;}if(group===this.m_groupList){this.m_groupList=group.m_next;}--this.m_groupCount;};b2ParticleSystem.ParticleCanBeConnected=function ParticleCanBeConnected(flags,group){return (flags&(exports.b2ParticleFlag.b2_wallParticle|exports.b2ParticleFlag.b2_springParticle|exports.b2ParticleFlag.b2_elasticParticle))!==0||group!==null&&(group.GetGroupFlags()&exports.b2ParticleGroupFlag.b2_rigidParticleGroup)!==0;};_proto95.UpdatePairsAndTriads=function UpdatePairsAndTriads(firstIndex,lastIndex,filter){var s_dab=b2ParticleSystem.UpdatePairsAndTriads_s_dab;var s_dbc=b2ParticleSystem.UpdatePairsAndTriads_s_dbc;var s_dca=b2ParticleSystem.UpdatePairsAndTriads_s_dca;var pos_data=this.m_positionBuffer.data;var particleFlags=0;for(var i=firstIndex;i<lastIndex;i++){particleFlags|=this.m_flagsBuffer.data[i];}if(particleFlags&b2ParticleSystem.k_pairFlags){for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];var a=contact.indexA;var b=contact.indexB;var af=this.m_flagsBuffer.data[a];var bf=this.m_flagsBuffer.data[b];var groupA=this.m_groupBuffer[a];var groupB=this.m_groupBuffer[b];if(a>=firstIndex&&a<lastIndex&&b>=firstIndex&&b<lastIndex&&!((af|bf)&exports.b2ParticleFlag.b2_zombieParticle)&&(af|bf)&b2ParticleSystem.k_pairFlags&&(filter.IsNecessary(a)||filter.IsNecessary(b))&&b2ParticleSystem.ParticleCanBeConnected(af,groupA)&&b2ParticleSystem.ParticleCanBeConnected(bf,groupB)&&filter.ShouldCreatePair(a,b)){var pair=this.m_pairBuffer.data[this.m_pairBuffer.Append()];pair.indexA=a;pair.indexB=b;pair.flags=contact.flags;pair.strength=b2Min(groupA?groupA.m_strength:1,groupB?groupB.m_strength:1);pair.distance=b2Vec2.DistanceVV(pos_data[a],pos_data[b]);}std_stable_sort(this.m_pairBuffer.data,0,this.m_pairBuffer.count,b2ParticleSystem.ComparePairIndices);this.m_pairBuffer.Unique(b2ParticleSystem.MatchPairIndices);}}if(particleFlags&b2ParticleSystem.k_triadFlags){var diagram=new b2VoronoiDiagram(lastIndex-firstIndex);for(var _i30=firstIndex;_i30<lastIndex;_i30++){var flags=this.m_flagsBuffer.data[_i30];var group=this.m_groupBuffer[_i30];if(!(flags&exports.b2ParticleFlag.b2_zombieParticle)&&b2ParticleSystem.ParticleCanBeConnected(flags,group)){diagram.AddGenerator(pos_data[_i30],_i30,filter.IsNecessary(_i30));}}var stride=this.GetParticleStride();diagram.Generate(stride/2,stride*2);var system=this;var callback=function callback(a,b,c){var af=system.m_flagsBuffer.data[a];var bf=system.m_flagsBuffer.data[b];var cf=system.m_flagsBuffer.data[c];if((af|bf|cf)&b2ParticleSystem.k_triadFlags&&filter.ShouldCreateTriad(a,b,c)){var pa=pos_data[a];var pb=pos_data[b];var pc=pos_data[c];var dab=b2Vec2.SubVV(pa,pb,s_dab);var dbc=b2Vec2.SubVV(pb,pc,s_dbc);var dca=b2Vec2.SubVV(pc,pa,s_dca);var maxDistanceSquared=b2_maxTriadDistanceSquared*system.m_squaredDiameter;if(b2Vec2.DotVV(dab,dab)>maxDistanceSquared||b2Vec2.DotVV(dbc,dbc)>maxDistanceSquared||b2Vec2.DotVV(dca,dca)>maxDistanceSquared){return;}var _groupA=system.m_groupBuffer[a];var _groupB=system.m_groupBuffer[b];var groupC=system.m_groupBuffer[c];var triad=system.m_triadBuffer.data[system.m_triadBuffer.Append()];triad.indexA=a;triad.indexB=b;triad.indexC=c;triad.flags=af|bf|cf;triad.strength=b2Min(b2Min(_groupA?_groupA.m_strength:1,_groupB?_groupB.m_strength:1),groupC?groupC.m_strength:1);var midPoint_x=(pa.x+pb.x+pc.x)/3.0;var midPoint_y=(pa.y+pb.y+pc.y)/3.0;triad.pa.x=pa.x-midPoint_x;triad.pa.y=pa.y-midPoint_y;triad.pb.x=pb.x-midPoint_x;triad.pb.y=pb.y-midPoint_y;triad.pc.x=pc.x-midPoint_x;triad.pc.y=pc.y-midPoint_y;triad.ka=-b2Vec2.DotVV(dca,dab);triad.kb=-b2Vec2.DotVV(dab,dbc);triad.kc=-b2Vec2.DotVV(dbc,dca);triad.s=b2Vec2.CrossVV(pa,pb)+b2Vec2.CrossVV(pb,pc)+b2Vec2.CrossVV(pc,pa);}};diagram.GetNodes(callback);std_stable_sort(this.m_triadBuffer.data,0,this.m_triadBuffer.count,b2ParticleSystem.CompareTriadIndices);this.m_triadBuffer.Unique(b2ParticleSystem.MatchTriadIndices);}};_proto95.UpdatePairsAndTriadsWithReactiveParticles=function UpdatePairsAndTriadsWithReactiveParticles(){var filter=new b2ParticleSystem_ReactiveFilter(this.m_flagsBuffer);this.UpdatePairsAndTriads(0,this.m_count,filter);for(var i=0;i<this.m_count;i++){this.m_flagsBuffer.data[i]&=~exports.b2ParticleFlag.b2_reactiveParticle;}this.m_allParticleFlags&=~exports.b2ParticleFlag.b2_reactiveParticle;};b2ParticleSystem.ComparePairIndices=function ComparePairIndices(a,b){var diffA=a.indexA-b.indexA;if(diffA!==0){return diffA<0;}return a.indexB<b.indexB;};b2ParticleSystem.MatchPairIndices=function MatchPairIndices(a,b){return a.indexA===b.indexA&&a.indexB===b.indexB;};b2ParticleSystem.CompareTriadIndices=function CompareTriadIndices(a,b){var diffA=a.indexA-b.indexA;if(diffA!==0){return diffA<0;}var diffB=a.indexB-b.indexB;if(diffB!==0){return diffB<0;}return a.indexC<b.indexC;};b2ParticleSystem.MatchTriadIndices=function MatchTriadIndices(a,b){return a.indexA===b.indexA&&a.indexB===b.indexB&&a.indexC===b.indexC;};b2ParticleSystem.InitializeParticleLists=function InitializeParticleLists(group,nodeBuffer){var bufferIndex=group.GetBufferIndex();var particleCount=group.GetParticleCount();for(var i=0;i<particleCount;i++){var node=nodeBuffer[i];node.list=node;node.next=null;node.count=1;node.index=i+bufferIndex;}};_proto95.MergeParticleListsInContact=function MergeParticleListsInContact(group,nodeBuffer){var bufferIndex=group.GetBufferIndex();for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];var a=contact.indexA;var b=contact.indexB;if(!group.ContainsParticle(a)||!group.ContainsParticle(b)){continue;}var listA=nodeBuffer[a-bufferIndex].list;var listB=nodeBuffer[b-bufferIndex].list;if(listA===listB){continue;}if(listA.count<listB.count){var _tmp=listA;listA=listB;listB=_tmp;}b2ParticleSystem.MergeParticleLists(listA,listB);}};b2ParticleSystem.MergeParticleLists=function MergeParticleLists(listA,listB){for(var b=listB;;){b.list=listA;var nextB=b.next;if(nextB){b=nextB;}else {b.next=listA.next;break;}}listA.next=listB;listA.count+=listB.count;listB.count=0;};b2ParticleSystem.FindLongestParticleList=function FindLongestParticleList(group,nodeBuffer){var particleCount=group.GetParticleCount();var result=nodeBuffer[0];for(var i=0;i<particleCount;i++){var node=nodeBuffer[i];if(result.count<node.count){result=node;}}return result;};_proto95.MergeZombieParticleListNodes=function MergeZombieParticleListNodes(group,nodeBuffer,survivingList){var particleCount=group.GetParticleCount();for(var i=0;i<particleCount;i++){var node=nodeBuffer[i];if(node!==survivingList&&this.m_flagsBuffer.data[node.index]&exports.b2ParticleFlag.b2_zombieParticle){b2ParticleSystem.MergeParticleListAndNode(survivingList,node);}}};b2ParticleSystem.MergeParticleListAndNode=function MergeParticleListAndNode(list,node){node.list=list;node.next=list.next;list.next=node;list.count++;node.count=0;};_proto95.CreateParticleGroupsFromParticleList=function CreateParticleGroupsFromParticleList(group,nodeBuffer,survivingList){var particleCount=group.GetParticleCount();var def=new b2ParticleGroupDef();def.groupFlags=group.GetGroupFlags();def.userData=group.GetUserData();for(var i=0;i<particleCount;i++){var list=nodeBuffer[i];if(!list.count||list===survivingList){continue;}var newGroup=this.CreateParticleGroup(def);for(var node=list;node;node=node.next){var oldIndex=node.index;var newIndex=this.CloneParticle(oldIndex,newGroup);this.m_flagsBuffer.data[oldIndex]|=exports.b2ParticleFlag.b2_zombieParticle;node.index=newIndex;}}};_proto95.UpdatePairsAndTriadsWithParticleList=function UpdatePairsAndTriadsWithParticleList(group,nodeBuffer){var bufferIndex=group.GetBufferIndex();for(var k=0;k<this.m_pairBuffer.count;k++){var pair=this.m_pairBuffer.data[k];var a=pair.indexA;var b=pair.indexB;if(group.ContainsParticle(a)){pair.indexA=nodeBuffer[a-bufferIndex].index;}if(group.ContainsParticle(b)){pair.indexB=nodeBuffer[b-bufferIndex].index;}}for(var _k6=0;_k6<this.m_triadBuffer.count;_k6++){var triad=this.m_triadBuffer.data[_k6];var _a4=triad.indexA;var _b5=triad.indexB;var c=triad.indexC;if(group.ContainsParticle(_a4)){triad.indexA=nodeBuffer[_a4-bufferIndex].index;}if(group.ContainsParticle(_b5)){triad.indexB=nodeBuffer[_b5-bufferIndex].index;}if(group.ContainsParticle(c)){triad.indexC=nodeBuffer[c-bufferIndex].index;}}};_proto95.ComputeDepth=function ComputeDepth(){var contactGroups=[];var contactGroupsCount=0;for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];var a=contact.indexA;var b=contact.indexB;var groupA=this.m_groupBuffer[a];var groupB=this.m_groupBuffer[b];if(groupA&&groupA===groupB&&groupA.m_groupFlags&exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth){contactGroups[contactGroupsCount++]=contact;}}var groupsToUpdate=[];var groupsToUpdateCount=0;for(var group=this.m_groupList;group;group=group.GetNext()){if(group.m_groupFlags&exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth){groupsToUpdate[groupsToUpdateCount++]=group;this.SetGroupFlags(group,group.m_groupFlags&~exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);for(var i=group.m_firstIndex;i<group.m_lastIndex;i++){this.m_accumulationBuffer[i]=0;}}}for(var _k7=0;_k7<contactGroupsCount;_k7++){var _contact=contactGroups[_k7];var _a5=_contact.indexA;var _b6=_contact.indexB;var w=_contact.weight;this.m_accumulationBuffer[_a5]+=w;this.m_accumulationBuffer[_b6]+=w;}for(var _i31=0;_i31<groupsToUpdateCount;_i31++){var _group=groupsToUpdate[_i31];for(var _i32=_group.m_firstIndex;_i32<_group.m_lastIndex;_i32++){var _w2=this.m_accumulationBuffer[_i32];this.m_depthBuffer[_i32]=_w2<0.8?0:b2_maxFloat;}}var iterationCount=b2Sqrt(this.m_count)>>0;for(var t=0;t<iterationCount;t++){var updated=false;for(var _k8=0;_k8<contactGroupsCount;_k8++){var _contact2=contactGroups[_k8];var _a6=_contact2.indexA;var _b7=_contact2.indexB;var r=1-_contact2.weight;var ap0=this.m_depthBuffer[_a6];var bp0=this.m_depthBuffer[_b7];var ap1=bp0+r;var bp1=ap0+r;if(ap0>ap1){this.m_depthBuffer[_a6]=ap1;updated=true;}if(bp0>bp1){this.m_depthBuffer[_b7]=bp1;updated=true;}}if(!updated){break;}}for(var _i33=0;_i33<groupsToUpdateCount;_i33++){var _group2=groupsToUpdate[_i33];for(var _i34=_group2.m_firstIndex;_i34<_group2.m_lastIndex;_i34++){if(this.m_depthBuffer[_i34]<b2_maxFloat){this.m_depthBuffer[_i34]*=this.m_particleDiameter;}else {this.m_depthBuffer[_i34]=0;}}}};_proto95.GetInsideBoundsEnumerator=function GetInsideBoundsEnumerator(aabb){var lowerTag=b2ParticleSystem.computeTag(this.m_inverseDiameter*aabb.lowerBound.x-1,this.m_inverseDiameter*aabb.lowerBound.y-1);var upperTag=b2ParticleSystem.computeTag(this.m_inverseDiameter*aabb.upperBound.x+1,this.m_inverseDiameter*aabb.upperBound.y+1);var beginProxy=0;var endProxy=this.m_proxyBuffer.count;var firstProxy=std_lower_bound(this.m_proxyBuffer.data,beginProxy,endProxy,lowerTag,b2ParticleSystem_Proxy.CompareProxyTag);var lastProxy=std_upper_bound(this.m_proxyBuffer.data,beginProxy,endProxy,upperTag,b2ParticleSystem_Proxy.CompareTagProxy);return new b2ParticleSystem_InsideBoundsEnumerator(this,lowerTag,upperTag,firstProxy,lastProxy);};_proto95.UpdateAllParticleFlags=function UpdateAllParticleFlags(){this.m_allParticleFlags=0;for(var i=0;i<this.m_count;i++){this.m_allParticleFlags|=this.m_flagsBuffer.data[i];}this.m_needsUpdateAllParticleFlags=false;};_proto95.UpdateAllGroupFlags=function UpdateAllGroupFlags(){this.m_allGroupFlags=0;for(var group=this.m_groupList;group;group=group.GetNext()){this.m_allGroupFlags|=group.m_groupFlags;}this.m_needsUpdateAllGroupFlags=false;};_proto95.AddContact=function AddContact(a,b,contacts){var flags_data=this.m_flagsBuffer.data;var pos_data=this.m_positionBuffer.data;var d=b2Vec2.SubVV(pos_data[b],pos_data[a],b2ParticleSystem.AddContact_s_d);var distBtParticlesSq=b2Vec2.DotVV(d,d);if(0<distBtParticlesSq&&distBtParticlesSq<this.m_squaredDiameter){var invD=b2InvSqrt(distBtParticlesSq);var contact=this.m_contactBuffer.data[this.m_contactBuffer.Append()];contact.indexA=a;contact.indexB=b;contact.flags=flags_data[a]|flags_data[b];contact.weight=1-distBtParticlesSq*invD*this.m_inverseDiameter;contact.normal.x=invD*d.x;contact.normal.y=invD*d.y;}};_proto95.FindContacts_Reference=function FindContacts_Reference(contacts){var beginProxy=0;var endProxy=this.m_proxyBuffer.count;this.m_contactBuffer.count=0;for(var a=beginProxy,c=beginProxy;a<endProxy;a++){var rightTag=b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag,1,0);for(var b=a+1;b<endProxy;b++){if(rightTag<this.m_proxyBuffer.data[b].tag){break;}this.AddContact(this.m_proxyBuffer.data[a].index,this.m_proxyBuffer.data[b].index,this.m_contactBuffer);}var bottomLeftTag=b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag,-1,1);for(;c<endProxy;c++){if(bottomLeftTag<=this.m_proxyBuffer.data[c].tag){break;}}var bottomRightTag=b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag,1,1);for(var _b8=c;_b8<endProxy;_b8++){if(bottomRightTag<this.m_proxyBuffer.data[_b8].tag){break;}this.AddContact(this.m_proxyBuffer.data[a].index,this.m_proxyBuffer.data[_b8].index,this.m_contactBuffer);}}};_proto95.FindContacts=function FindContacts(contacts){this.FindContacts_Reference(contacts);};_proto95.UpdateProxies_Reference=function UpdateProxies_Reference(proxies){var pos_data=this.m_positionBuffer.data;var inv_diam=this.m_inverseDiameter;for(var k=0;k<this.m_proxyBuffer.count;++k){var proxy=this.m_proxyBuffer.data[k];var i=proxy.index;var p=pos_data[i];proxy.tag=b2ParticleSystem.computeTag(inv_diam*p.x,inv_diam*p.y);}};_proto95.UpdateProxies=function UpdateProxies(proxies){this.UpdateProxies_Reference(proxies);};_proto95.SortProxies=function SortProxies(proxies){std_sort$1(this.m_proxyBuffer.data,0,this.m_proxyBuffer.count,b2ParticleSystem_Proxy.CompareProxyProxy);};_proto95.FilterContacts=function FilterContacts(contacts){var contactFilter=this.GetParticleContactFilter();if(contactFilter===null){return;}var system=this;var predicate=function predicate(contact){return (contact.flags&exports.b2ParticleFlag.b2_particleContactFilterParticle)!==0&&!contactFilter.ShouldCollideParticleParticle(system,contact.indexA,contact.indexB);};this.m_contactBuffer.RemoveIf(predicate);};_proto95.NotifyContactListenerPreContact=function NotifyContactListenerPreContact(particlePairs){var contactListener=this.GetParticleContactListener();if(contactListener===null){return;}particlePairs.Initialize(this.m_contactBuffer,this.m_flagsBuffer);throw new Error();};_proto95.NotifyContactListenerPostContact=function NotifyContactListenerPostContact(particlePairs){var contactListener=this.GetParticleContactListener();if(contactListener===null){return;}for(var k=0;k<this.m_contactBuffer.count;++k){var contact=this.m_contactBuffer.data[k];{contactListener.BeginContactParticleParticle(this,contact);}}throw new Error();};b2ParticleSystem.b2ParticleContactIsZombie=function b2ParticleContactIsZombie(contact){return (contact.flags&exports.b2ParticleFlag.b2_zombieParticle)===exports.b2ParticleFlag.b2_zombieParticle;};_proto95.UpdateContacts=function UpdateContacts(exceptZombie){this.UpdateProxies(this.m_proxyBuffer);this.SortProxies(this.m_proxyBuffer);var particlePairs=new b2ParticlePairSet();this.NotifyContactListenerPreContact(particlePairs);this.FindContacts(this.m_contactBuffer);this.FilterContacts(this.m_contactBuffer);this.NotifyContactListenerPostContact(particlePairs);if(exceptZombie){this.m_contactBuffer.RemoveIf(b2ParticleSystem.b2ParticleContactIsZombie);}};_proto95.NotifyBodyContactListenerPreContact=function NotifyBodyContactListenerPreContact(fixtureSet){var contactListener=this.GetFixtureContactListener();if(contactListener===null){return;}fixtureSet.Initialize(this.m_bodyContactBuffer,this.m_flagsBuffer);throw new Error();};_proto95.NotifyBodyContactListenerPostContact=function NotifyBodyContactListenerPostContact(fixtureSet){var contactListener=this.GetFixtureContactListener();if(contactListener===null){return;}for(var k=0;k<this.m_bodyContactBuffer.count;k++){var contact=this.m_bodyContactBuffer.data[k];{contactListener.BeginContactFixtureParticle(this,contact);}}throw new Error();};_proto95.UpdateBodyContacts=function UpdateBodyContacts(){var s_aabb=b2ParticleSystem.UpdateBodyContacts_s_aabb;var fixtureSet=new b2ParticleSystem_FixtureParticleSet();this.NotifyBodyContactListenerPreContact(fixtureSet);if(this.m_stuckThreshold>0){var particleCount=this.GetParticleCount();for(var i=0;i<particleCount;i++){this.m_bodyContactCountBuffer.data[i]=0;if(this.m_timestamp>this.m_lastBodyContactStepBuffer.data[i]+1){this.m_consecutiveContactStepsBuffer.data[i]=0;}}}this.m_bodyContactBuffer.SetCount(0);this.m_stuckParticleBuffer.SetCount(0);var aabb=s_aabb;this.ComputeAABB(aabb);if(this.UpdateBodyContacts_callback===null){this.UpdateBodyContacts_callback=new b2ParticleSystem_UpdateBodyContactsCallback(this);}var callback=this.UpdateBodyContacts_callback;callback.m_contactFilter=this.GetFixtureContactFilter();this.m_world.QueryAABB(callback,aabb);if(this.m_def.strictContactCheck){this.RemoveSpuriousBodyContacts();}this.NotifyBodyContactListenerPostContact(fixtureSet);};_proto95.Solve=function Solve(step){var s_subStep=b2ParticleSystem.Solve_s_subStep;if(this.m_count===0){return;}if(this.m_expirationTimeBuffer.data){this.SolveLifetimes(step);}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_zombieParticle){this.SolveZombie();}if(this.m_needsUpdateAllParticleFlags){this.UpdateAllParticleFlags();}if(this.m_needsUpdateAllGroupFlags){this.UpdateAllGroupFlags();}if(this.m_paused){return;}for(this.m_iterationIndex=0;this.m_iterationIndex<step.particleIterations;this.m_iterationIndex++){++this.m_timestamp;var subStep=s_subStep.Copy(step);subStep.dt/=step.particleIterations;subStep.inv_dt*=step.particleIterations;this.UpdateContacts(false);this.UpdateBodyContacts();this.ComputeWeight();if(this.m_allGroupFlags&exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth){this.ComputeDepth();}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_reactiveParticle){this.UpdatePairsAndTriadsWithReactiveParticles();}if(this.m_hasForce){this.SolveForce(subStep);}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_viscousParticle){this.SolveViscous();}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_repulsiveParticle){this.SolveRepulsive(subStep);}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_powderParticle){this.SolvePowder(subStep);}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_tensileParticle){this.SolveTensile(subStep);}if(this.m_allGroupFlags&exports.b2ParticleGroupFlag.b2_solidParticleGroup){this.SolveSolid(subStep);}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_colorMixingParticle){this.SolveColorMixing();}this.SolveGravity(subStep);if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_staticPressureParticle){this.SolveStaticPressure(subStep);}this.SolvePressure(subStep);this.SolveDamping(subStep);if(this.m_allParticleFlags&b2ParticleSystem.k_extraDampingFlags){this.SolveExtraDamping();}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_elasticParticle){this.SolveElastic(subStep);}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_springParticle){this.SolveSpring(subStep);}this.LimitVelocity(subStep);if(this.m_allGroupFlags&exports.b2ParticleGroupFlag.b2_rigidParticleGroup){this.SolveRigidDamping();}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_barrierParticle){this.SolveBarrier(subStep);}this.SolveCollision(subStep);if(this.m_allGroupFlags&exports.b2ParticleGroupFlag.b2_rigidParticleGroup){this.SolveRigid(subStep);}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_wallParticle){this.SolveWall();}for(var i=0;i<this.m_count;i++){this.m_positionBuffer.data[i].SelfMulAdd(subStep.dt,this.m_velocityBuffer.data[i]);}}};_proto95.SolveCollision=function SolveCollision(step){var s_aabb=b2ParticleSystem.SolveCollision_s_aabb;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;var aabb=s_aabb;aabb.lowerBound.x=+b2_maxFloat;aabb.lowerBound.y=+b2_maxFloat;aabb.upperBound.x=-b2_maxFloat;aabb.upperBound.y=-b2_maxFloat;for(var i=0;i<this.m_count;i++){var v=vel_data[i];var p1=pos_data[i];var p2_x=p1.x+step.dt*v.x;var p2_y=p1.y+step.dt*v.y;aabb.lowerBound.x=b2Min(aabb.lowerBound.x,b2Min(p1.x,p2_x));aabb.lowerBound.y=b2Min(aabb.lowerBound.y,b2Min(p1.y,p2_y));aabb.upperBound.x=b2Max(aabb.upperBound.x,b2Max(p1.x,p2_x));aabb.upperBound.y=b2Max(aabb.upperBound.y,b2Max(p1.y,p2_y));}if(this.SolveCollision_callback===null){this.SolveCollision_callback=new b2ParticleSystem_SolveCollisionCallback(this,step);}var callback=this.SolveCollision_callback;callback.m_step=step;this.m_world.QueryAABB(callback,aabb);};_proto95.LimitVelocity=function LimitVelocity(step){var vel_data=this.m_velocityBuffer.data;var criticalVelocitySquared=this.GetCriticalVelocitySquared(step);for(var i=0;i<this.m_count;i++){var v=vel_data[i];var v2=b2Vec2.DotVV(v,v);if(v2>criticalVelocitySquared){v.SelfMul(b2Sqrt(criticalVelocitySquared/v2));}}};_proto95.SolveGravity=function SolveGravity(step){var s_gravity=b2ParticleSystem.SolveGravity_s_gravity;var vel_data=this.m_velocityBuffer.data;var gravity=b2Vec2.MulSV(step.dt*this.m_def.gravityScale,this.m_world.GetGravity(),s_gravity);for(var i=0;i<this.m_count;i++){vel_data[i].SelfAdd(gravity);}};_proto95.SolveBarrier=function SolveBarrier(step){var s_aabb=b2ParticleSystem.SolveBarrier_s_aabb;var s_va=b2ParticleSystem.SolveBarrier_s_va;var s_vb=b2ParticleSystem.SolveBarrier_s_vb;var s_pba=b2ParticleSystem.SolveBarrier_s_pba;var s_vba=b2ParticleSystem.SolveBarrier_s_vba;var s_vc=b2ParticleSystem.SolveBarrier_s_vc;var s_pca=b2ParticleSystem.SolveBarrier_s_pca;var s_vca=b2ParticleSystem.SolveBarrier_s_vca;var s_qba=b2ParticleSystem.SolveBarrier_s_qba;var s_qca=b2ParticleSystem.SolveBarrier_s_qca;var s_dv=b2ParticleSystem.SolveBarrier_s_dv;var s_f=b2ParticleSystem.SolveBarrier_s_f;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;for(var i=0;i<this.m_count;i++){var flags=this.m_flagsBuffer.data[i];if((flags&b2ParticleSystem.k_barrierWallFlags)!==0){vel_data[i].SetZero();}}var tmax=b2_barrierCollisionTime*step.dt;var mass=this.GetParticleMass();for(var k=0;k<this.m_pairBuffer.count;k++){var pair=this.m_pairBuffer.data[k];if(pair.flags&exports.b2ParticleFlag.b2_barrierParticle){var a=pair.indexA;var b=pair.indexB;var pa=pos_data[a];var pb=pos_data[b];var aabb=s_aabb;b2Vec2.MinV(pa,pb,aabb.lowerBound);b2Vec2.MaxV(pa,pb,aabb.upperBound);var aGroup=this.m_groupBuffer[a];var bGroup=this.m_groupBuffer[b];var va=this.GetLinearVelocity(aGroup,a,pa,s_va);var vb=this.GetLinearVelocity(bGroup,b,pb,s_vb);var pba=b2Vec2.SubVV(pb,pa,s_pba);var vba=b2Vec2.SubVV(vb,va,s_vba);var enumerator=this.GetInsideBoundsEnumerator(aabb);var c=void 0;while((c=enumerator.GetNext())>=0){var pc=pos_data[c];var cGroup=this.m_groupBuffer[c];if(aGroup!==cGroup&&bGroup!==cGroup){var vc=this.GetLinearVelocity(cGroup,c,pc,s_vc);var pca=b2Vec2.SubVV(pc,pa,s_pca);var vca=b2Vec2.SubVV(vc,va,s_vca);var e2=b2Vec2.CrossVV(vba,vca);var e1=b2Vec2.CrossVV(pba,vca)-b2Vec2.CrossVV(pca,vba);var e0=b2Vec2.CrossVV(pba,pca);var s=void 0,t=void 0;var qba=s_qba,qca=s_qca;if(e2===0){if(e1===0){continue;}t=-e0/e1;if(!(t>=0&&t<tmax)){continue;}b2Vec2.AddVMulSV(pba,t,vba,qba);b2Vec2.AddVMulSV(pca,t,vca,qca);s=b2Vec2.DotVV(qba,qca)/b2Vec2.DotVV(qba,qba);if(!(s>=0&&s<=1)){continue;}}else {var det=e1*e1-4*e0*e2;if(det<0){continue;}var sqrtDet=b2Sqrt(det);var t1=(-e1-sqrtDet)/(2*e2);var t2=(-e1+sqrtDet)/(2*e2);if(t1>t2){var tmp=t1;t1=t2;t2=tmp;}t=t1;b2Vec2.AddVMulSV(pba,t,vba,qba);b2Vec2.AddVMulSV(pca,t,vca,qca);s=b2Vec2.DotVV(qba,qca)/b2Vec2.DotVV(qba,qba);if(!(t>=0&&t<tmax&&s>=0&&s<=1)){t=t2;if(!(t>=0&&t<tmax)){continue;}b2Vec2.AddVMulSV(pba,t,vba,qba);b2Vec2.AddVMulSV(pca,t,vca,qca);s=b2Vec2.DotVV(qba,qca)/b2Vec2.DotVV(qba,qba);if(!(s>=0&&s<=1)){continue;}}}var dv=s_dv;dv.x=va.x+s*vba.x-vc.x;dv.y=va.y+s*vba.y-vc.y;var f=b2Vec2.MulSV(mass,dv,s_f);if(cGroup&&this.IsRigidGroup(cGroup)){var _mass=cGroup.GetMass();var inertia=cGroup.GetInertia();if(_mass>0){cGroup.m_linearVelocity.SelfMulAdd(1/_mass,f);}if(inertia>0){cGroup.m_angularVelocity+=b2Vec2.CrossVV(b2Vec2.SubVV(pc,cGroup.GetCenter(),b2Vec2.s_t0),f)/inertia;}}else {vel_data[c].SelfAdd(dv);}this.ParticleApplyForce(c,f.SelfMul(-step.inv_dt));}}}}};_proto95.SolveStaticPressure=function SolveStaticPressure(step){this.m_staticPressureBuffer=this.RequestBuffer(this.m_staticPressureBuffer);var criticalPressure=this.GetCriticalPressure(step);var pressurePerWeight=this.m_def.staticPressureStrength*criticalPressure;var maxPressure=b2_maxParticlePressure*criticalPressure;var relaxation=this.m_def.staticPressureRelaxation;for(var t=0;t<this.m_def.staticPressureIterations;t++){for(var i=0;i<this.m_count;i++){this.m_accumulationBuffer[i]=0;}for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];if(contact.flags&exports.b2ParticleFlag.b2_staticPressureParticle){var a=contact.indexA;var b=contact.indexB;var w=contact.weight;this.m_accumulationBuffer[a]+=w*this.m_staticPressureBuffer[b];this.m_accumulationBuffer[b]+=w*this.m_staticPressureBuffer[a];}}for(var _i35=0;_i35<this.m_count;_i35++){var _w3=this.m_weightBuffer[_i35];if(this.m_flagsBuffer.data[_i35]&exports.b2ParticleFlag.b2_staticPressureParticle){var wh=this.m_accumulationBuffer[_i35];var h=(wh+pressurePerWeight*(_w3-b2_minParticleWeight))/(_w3+relaxation);this.m_staticPressureBuffer[_i35]=b2Clamp(h,0.0,maxPressure);}else {this.m_staticPressureBuffer[_i35]=0;}}}};_proto95.ComputeWeight=function ComputeWeight(){for(var k=0;k<this.m_count;k++){this.m_weightBuffer[k]=0;}for(var _k9=0;_k9<this.m_bodyContactBuffer.count;_k9++){var contact=this.m_bodyContactBuffer.data[_k9];var a=contact.index;var w=contact.weight;this.m_weightBuffer[a]+=w;}for(var _k10=0;_k10<this.m_contactBuffer.count;_k10++){var _contact3=this.m_contactBuffer.data[_k10];var _a7=_contact3.indexA;var b=_contact3.indexB;var _w4=_contact3.weight;this.m_weightBuffer[_a7]+=_w4;this.m_weightBuffer[b]+=_w4;}};_proto95.SolvePressure=function SolvePressure(step){var s_f=b2ParticleSystem.SolvePressure_s_f;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;var criticalPressure=this.GetCriticalPressure(step);var pressurePerWeight=this.m_def.pressureStrength*criticalPressure;var maxPressure=b2_maxParticlePressure*criticalPressure;for(var i=0;i<this.m_count;i++){var w=this.m_weightBuffer[i];var h=pressurePerWeight*b2Max(0.0,w-b2_minParticleWeight);this.m_accumulationBuffer[i]=b2Min(h,maxPressure);}if(this.m_allParticleFlags&b2ParticleSystem.k_noPressureFlags){for(var _i36=0;_i36<this.m_count;_i36++){if(this.m_flagsBuffer.data[_i36]&b2ParticleSystem.k_noPressureFlags){this.m_accumulationBuffer[_i36]=0;}}}if(this.m_allParticleFlags&exports.b2ParticleFlag.b2_staticPressureParticle){for(var _i37=0;_i37<this.m_count;_i37++){if(this.m_flagsBuffer.data[_i37]&exports.b2ParticleFlag.b2_staticPressureParticle){this.m_accumulationBuffer[_i37]+=this.m_staticPressureBuffer[_i37];}}}var velocityPerPressure=step.dt/(this.m_def.density*this.m_particleDiameter);var inv_mass=this.GetParticleInvMass();for(var k=0;k<this.m_bodyContactBuffer.count;k++){var contact=this.m_bodyContactBuffer.data[k];var a=contact.index;var b=contact.body;var _w5=contact.weight;var m=contact.mass;var n=contact.normal;var p=pos_data[a];var _h=this.m_accumulationBuffer[a]+pressurePerWeight*_w5;var f=b2Vec2.MulSV(velocityPerPressure*_w5*m*_h,n,s_f);vel_data[a].SelfMulSub(inv_mass,f);b.ApplyLinearImpulse(f,p,true);}for(var _k11=0;_k11<this.m_contactBuffer.count;_k11++){var _contact4=this.m_contactBuffer.data[_k11];var _a8=_contact4.indexA;var _b9=_contact4.indexB;var _w6=_contact4.weight;var _n=_contact4.normal;var _h2=this.m_accumulationBuffer[_a8]+this.m_accumulationBuffer[_b9];var _f2=b2Vec2.MulSV(velocityPerPressure*_w6*_h2,_n,s_f);vel_data[_a8].SelfSub(_f2);vel_data[_b9].SelfAdd(_f2);}};_proto95.SolveDamping=function SolveDamping(step){var s_v=b2ParticleSystem.SolveDamping_s_v;var s_f=b2ParticleSystem.SolveDamping_s_f;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;var linearDamping=this.m_def.dampingStrength;var quadraticDamping=1/this.GetCriticalVelocity(step);var inv_mass=this.GetParticleInvMass();for(var k=0;k<this.m_bodyContactBuffer.count;k++){var contact=this.m_bodyContactBuffer.data[k];var a=contact.index;var b=contact.body;var w=contact.weight;var m=contact.mass;var n=contact.normal;var p=pos_data[a];var v=b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p,b2Vec2.s_t0),vel_data[a],s_v);var vn=b2Vec2.DotVV(v,n);if(vn<0){var damping=b2Max(linearDamping*w,b2Min(-quadraticDamping*vn,0.5));var f=b2Vec2.MulSV(damping*m*vn,n,s_f);vel_data[a].SelfMulAdd(inv_mass,f);b.ApplyLinearImpulse(f.SelfNeg(),p,true);}}for(var _k12=0;_k12<this.m_contactBuffer.count;_k12++){var _contact5=this.m_contactBuffer.data[_k12];var _a9=_contact5.indexA;var _b10=_contact5.indexB;var _w7=_contact5.weight;var _n2=_contact5.normal;var _v4=b2Vec2.SubVV(vel_data[_b10],vel_data[_a9],s_v);var _vn=b2Vec2.DotVV(_v4,_n2);if(_vn<0){var _damping=b2Max(linearDamping*_w7,b2Min(-quadraticDamping*_vn,0.5));var _f3=b2Vec2.MulSV(_damping*_vn,_n2,s_f);vel_data[_a9].SelfAdd(_f3);vel_data[_b10].SelfSub(_f3);}}};_proto95.SolveRigidDamping=function SolveRigidDamping(){var s_t0=b2ParticleSystem.SolveRigidDamping_s_t0;var s_t1=b2ParticleSystem.SolveRigidDamping_s_t1;var s_p=b2ParticleSystem.SolveRigidDamping_s_p;var s_v=b2ParticleSystem.SolveRigidDamping_s_v;var invMassA=[0.0],invInertiaA=[0.0],tangentDistanceA=[0.0];var invMassB=[0.0],invInertiaB=[0.0],tangentDistanceB=[0.0];var pos_data=this.m_positionBuffer.data;var damping=this.m_def.dampingStrength;for(var k=0;k<this.m_bodyContactBuffer.count;k++){var contact=this.m_bodyContactBuffer.data[k];var a=contact.index;var aGroup=this.m_groupBuffer[a];if(aGroup&&this.IsRigidGroup(aGroup)){var b=contact.body;var n=contact.normal;var w=contact.weight;var p=pos_data[a];var v=b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p,s_t0),aGroup.GetLinearVelocityFromWorldPoint(p,s_t1),s_v);var vn=b2Vec2.DotVV(v,n);if(vn<0){this.InitDampingParameterWithRigidGroupOrParticle(invMassA,invInertiaA,tangentDistanceA,true,aGroup,a,p,n);this.InitDampingParameter(invMassB,invInertiaB,tangentDistanceB,b.GetMass(),b.GetInertia()-b.GetMass()*b.GetLocalCenter().LengthSquared(),b.GetWorldCenter(),p,n);var f=damping*b2Min(w,1.0)*this.ComputeDampingImpulse(invMassA[0],invInertiaA[0],tangentDistanceA[0],invMassB[0],invInertiaB[0],tangentDistanceB[0],vn);this.ApplyDamping(invMassA[0],invInertiaA[0],tangentDistanceA[0],true,aGroup,a,f,n);b.ApplyLinearImpulse(b2Vec2.MulSV(-f,n,b2Vec2.s_t0),p,true);}}}for(var _k13=0;_k13<this.m_contactBuffer.count;_k13++){var _contact6=this.m_contactBuffer.data[_k13];var _a10=_contact6.indexA;var _b11=_contact6.indexB;var _n3=_contact6.normal;var _w8=_contact6.weight;var _aGroup=this.m_groupBuffer[_a10];var bGroup=this.m_groupBuffer[_b11];var aRigid=this.IsRigidGroup(_aGroup);var bRigid=this.IsRigidGroup(bGroup);if(_aGroup!==bGroup&&(aRigid||bRigid)){var _p=b2Vec2.MidVV(pos_data[_a10],pos_data[_b11],s_p);var _v5=b2Vec2.SubVV(this.GetLinearVelocity(bGroup,_b11,_p,s_t0),this.GetLinearVelocity(_aGroup,_a10,_p,s_t1),s_v);var _vn2=b2Vec2.DotVV(_v5,_n3);if(_vn2<0){this.InitDampingParameterWithRigidGroupOrParticle(invMassA,invInertiaA,tangentDistanceA,aRigid,_aGroup,_a10,_p,_n3);this.InitDampingParameterWithRigidGroupOrParticle(invMassB,invInertiaB,tangentDistanceB,bRigid,bGroup,_b11,_p,_n3);var _f4=damping*_w8*this.ComputeDampingImpulse(invMassA[0],invInertiaA[0],tangentDistanceA[0],invMassB[0],invInertiaB[0],tangentDistanceB[0],_vn2);this.ApplyDamping(invMassA[0],invInertiaA[0],tangentDistanceA[0],aRigid,_aGroup,_a10,_f4,_n3);this.ApplyDamping(invMassB[0],invInertiaB[0],tangentDistanceB[0],bRigid,bGroup,_b11,-_f4,_n3);}}}};_proto95.SolveExtraDamping=function SolveExtraDamping(){var s_v=b2ParticleSystem.SolveExtraDamping_s_v;var s_f=b2ParticleSystem.SolveExtraDamping_s_f;var vel_data=this.m_velocityBuffer.data;var pos_data=this.m_positionBuffer.data;var inv_mass=this.GetParticleInvMass();for(var k=0;k<this.m_bodyContactBuffer.count;k++){var contact=this.m_bodyContactBuffer.data[k];var a=contact.index;if(this.m_flagsBuffer.data[a]&b2ParticleSystem.k_extraDampingFlags){var b=contact.body;var m=contact.mass;var n=contact.normal;var p=pos_data[a];var v=b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p,b2Vec2.s_t0),vel_data[a],s_v);var vn=b2Vec2.DotVV(v,n);if(vn<0){var f=b2Vec2.MulSV(0.5*m*vn,n,s_f);vel_data[a].SelfMulAdd(inv_mass,f);b.ApplyLinearImpulse(f.SelfNeg(),p,true);}}}};_proto95.SolveWall=function SolveWall(){var vel_data=this.m_velocityBuffer.data;for(var i=0;i<this.m_count;i++){if(this.m_flagsBuffer.data[i]&exports.b2ParticleFlag.b2_wallParticle){vel_data[i].SetZero();}}};_proto95.SolveRigid=function SolveRigid(step){var s_position=b2ParticleSystem.SolveRigid_s_position;var s_rotation=b2ParticleSystem.SolveRigid_s_rotation;var s_transform=b2ParticleSystem.SolveRigid_s_transform;var s_velocityTransform=b2ParticleSystem.SolveRigid_s_velocityTransform;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;for(var group=this.m_groupList;group;group=group.GetNext()){if(group.m_groupFlags&exports.b2ParticleGroupFlag.b2_rigidParticleGroup){group.UpdateStatistics();var rotation=s_rotation;rotation.SetAngle(step.dt*group.m_angularVelocity);var position=b2Vec2.AddVV(group.m_center,b2Vec2.SubVV(b2Vec2.MulSV(step.dt,group.m_linearVelocity,b2Vec2.s_t0),b2Rot.MulRV(rotation,group.m_center,b2Vec2.s_t1),b2Vec2.s_t0),s_position);var transform=s_transform;transform.SetPositionRotation(position,rotation);b2Transform.MulXX(transform,group.m_transform,group.m_transform);var velocityTransform=s_velocityTransform;velocityTransform.p.x=step.inv_dt*transform.p.x;velocityTransform.p.y=step.inv_dt*transform.p.y;velocityTransform.q.s=step.inv_dt*transform.q.s;velocityTransform.q.c=step.inv_dt*(transform.q.c-1);for(var i=group.m_firstIndex;i<group.m_lastIndex;i++){b2Transform.MulXV(velocityTransform,pos_data[i],vel_data[i]);}}}};_proto95.SolveElastic=function SolveElastic(step){var s_pa=b2ParticleSystem.SolveElastic_s_pa;var s_pb=b2ParticleSystem.SolveElastic_s_pb;var s_pc=b2ParticleSystem.SolveElastic_s_pc;var s_r=b2ParticleSystem.SolveElastic_s_r;var s_t0=b2ParticleSystem.SolveElastic_s_t0;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;var elasticStrength=step.inv_dt*this.m_def.elasticStrength;for(var k=0;k<this.m_triadBuffer.count;k++){var triad=this.m_triadBuffer.data[k];if(triad.flags&exports.b2ParticleFlag.b2_elasticParticle){var a=triad.indexA;var b=triad.indexB;var c=triad.indexC;var oa=triad.pa;var ob=triad.pb;var oc=triad.pc;var pa=s_pa.Copy(pos_data[a]);var pb=s_pb.Copy(pos_data[b]);var pc=s_pc.Copy(pos_data[c]);var va=vel_data[a];var vb=vel_data[b];var vc=vel_data[c];pa.SelfMulAdd(step.dt,va);pb.SelfMulAdd(step.dt,vb);pc.SelfMulAdd(step.dt,vc);var midPoint_x=(pa.x+pb.x+pc.x)/3.0;var midPoint_y=(pa.y+pb.y+pc.y)/3.0;pa.x-=midPoint_x;pa.y-=midPoint_y;pb.x-=midPoint_x;pb.y-=midPoint_y;pc.x-=midPoint_x;pc.y-=midPoint_y;var r=s_r;r.s=b2Vec2.CrossVV(oa,pa)+b2Vec2.CrossVV(ob,pb)+b2Vec2.CrossVV(oc,pc);r.c=b2Vec2.DotVV(oa,pa)+b2Vec2.DotVV(ob,pb)+b2Vec2.DotVV(oc,pc);var r2=r.s*r.s+r.c*r.c;var invR=b2InvSqrt(r2);if(!isFinite(invR)){invR=1.98177537e+019;}r.s*=invR;r.c*=invR;var strength=elasticStrength*triad.strength;b2Rot.MulRV(r,oa,s_t0);b2Vec2.SubVV(s_t0,pa,s_t0);b2Vec2.MulSV(strength,s_t0,s_t0);va.SelfAdd(s_t0);b2Rot.MulRV(r,ob,s_t0);b2Vec2.SubVV(s_t0,pb,s_t0);b2Vec2.MulSV(strength,s_t0,s_t0);vb.SelfAdd(s_t0);b2Rot.MulRV(r,oc,s_t0);b2Vec2.SubVV(s_t0,pc,s_t0);b2Vec2.MulSV(strength,s_t0,s_t0);vc.SelfAdd(s_t0);}}};_proto95.SolveSpring=function SolveSpring(step){var s_pa=b2ParticleSystem.SolveSpring_s_pa;var s_pb=b2ParticleSystem.SolveSpring_s_pb;var s_d=b2ParticleSystem.SolveSpring_s_d;var s_f=b2ParticleSystem.SolveSpring_s_f;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;var springStrength=step.inv_dt*this.m_def.springStrength;for(var k=0;k<this.m_pairBuffer.count;k++){var pair=this.m_pairBuffer.data[k];if(pair.flags&exports.b2ParticleFlag.b2_springParticle){var a=pair.indexA;var b=pair.indexB;var pa=s_pa.Copy(pos_data[a]);var pb=s_pb.Copy(pos_data[b]);var va=vel_data[a];var vb=vel_data[b];pa.SelfMulAdd(step.dt,va);pb.SelfMulAdd(step.dt,vb);var d=b2Vec2.SubVV(pb,pa,s_d);var r0=pair.distance;var r1=d.Length();var strength=springStrength*pair.strength;var f=b2Vec2.MulSV(strength*(r0-r1)/r1,d,s_f);va.SelfSub(f);vb.SelfAdd(f);}}};_proto95.SolveTensile=function SolveTensile(step){var s_weightedNormal=b2ParticleSystem.SolveTensile_s_weightedNormal;var s_s=b2ParticleSystem.SolveTensile_s_s;var s_f=b2ParticleSystem.SolveTensile_s_f;var vel_data=this.m_velocityBuffer.data;for(var i=0;i<this.m_count;i++){this.m_accumulation2Buffer[i]=new b2Vec2();this.m_accumulation2Buffer[i].SetZero();}for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];if(contact.flags&exports.b2ParticleFlag.b2_tensileParticle){var a=contact.indexA;var b=contact.indexB;var w=contact.weight;var n=contact.normal;var weightedNormal=b2Vec2.MulSV((1-w)*w,n,s_weightedNormal);this.m_accumulation2Buffer[a].SelfSub(weightedNormal);this.m_accumulation2Buffer[b].SelfAdd(weightedNormal);}}var criticalVelocity=this.GetCriticalVelocity(step);var pressureStrength=this.m_def.surfaceTensionPressureStrength*criticalVelocity;var normalStrength=this.m_def.surfaceTensionNormalStrength*criticalVelocity;var maxVelocityVariation=b2_maxParticleForce*criticalVelocity;for(var _k14=0;_k14<this.m_contactBuffer.count;_k14++){var _contact7=this.m_contactBuffer.data[_k14];if(_contact7.flags&exports.b2ParticleFlag.b2_tensileParticle){var _a11=_contact7.indexA;var _b12=_contact7.indexB;var _w9=_contact7.weight;var _n4=_contact7.normal;var h=this.m_weightBuffer[_a11]+this.m_weightBuffer[_b12];var s=b2Vec2.SubVV(this.m_accumulation2Buffer[_b12],this.m_accumulation2Buffer[_a11],s_s);var fn=b2Min(pressureStrength*(h-2)+normalStrength*b2Vec2.DotVV(s,_n4),maxVelocityVariation)*_w9;var f=b2Vec2.MulSV(fn,_n4,s_f);vel_data[_a11].SelfSub(f);vel_data[_b12].SelfAdd(f);}}};_proto95.SolveViscous=function SolveViscous(){var s_v=b2ParticleSystem.SolveViscous_s_v;var s_f=b2ParticleSystem.SolveViscous_s_f;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;var viscousStrength=this.m_def.viscousStrength;var inv_mass=this.GetParticleInvMass();for(var k=0;k<this.m_bodyContactBuffer.count;k++){var contact=this.m_bodyContactBuffer.data[k];var a=contact.index;if(this.m_flagsBuffer.data[a]&exports.b2ParticleFlag.b2_viscousParticle){var b=contact.body;var w=contact.weight;var m=contact.mass;var p=pos_data[a];var v=b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p,b2Vec2.s_t0),vel_data[a],s_v);var f=b2Vec2.MulSV(viscousStrength*m*w,v,s_f);vel_data[a].SelfMulAdd(inv_mass,f);b.ApplyLinearImpulse(f.SelfNeg(),p,true);}}for(var _k15=0;_k15<this.m_contactBuffer.count;_k15++){var _contact8=this.m_contactBuffer.data[_k15];if(_contact8.flags&exports.b2ParticleFlag.b2_viscousParticle){var _a12=_contact8.indexA;var _b13=_contact8.indexB;var _w10=_contact8.weight;var _v6=b2Vec2.SubVV(vel_data[_b13],vel_data[_a12],s_v);var _f5=b2Vec2.MulSV(viscousStrength*_w10,_v6,s_f);vel_data[_a12].SelfAdd(_f5);vel_data[_b13].SelfSub(_f5);}}};_proto95.SolveRepulsive=function SolveRepulsive(step){var s_f=b2ParticleSystem.SolveRepulsive_s_f;var vel_data=this.m_velocityBuffer.data;var repulsiveStrength=this.m_def.repulsiveStrength*this.GetCriticalVelocity(step);for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];if(contact.flags&exports.b2ParticleFlag.b2_repulsiveParticle){var a=contact.indexA;var b=contact.indexB;if(this.m_groupBuffer[a]!==this.m_groupBuffer[b]){var w=contact.weight;var n=contact.normal;var f=b2Vec2.MulSV(repulsiveStrength*w,n,s_f);vel_data[a].SelfSub(f);vel_data[b].SelfAdd(f);}}}};_proto95.SolvePowder=function SolvePowder(step){var s_f=b2ParticleSystem.SolvePowder_s_f;var pos_data=this.m_positionBuffer.data;var vel_data=this.m_velocityBuffer.data;var powderStrength=this.m_def.powderStrength*this.GetCriticalVelocity(step);var minWeight=1.0-b2_particleStride;var inv_mass=this.GetParticleInvMass();for(var k=0;k<this.m_bodyContactBuffer.count;k++){var contact=this.m_bodyContactBuffer.data[k];var a=contact.index;if(this.m_flagsBuffer.data[a]&exports.b2ParticleFlag.b2_powderParticle){var w=contact.weight;if(w>minWeight){var b=contact.body;var m=contact.mass;var p=pos_data[a];var n=contact.normal;var f=b2Vec2.MulSV(powderStrength*m*(w-minWeight),n,s_f);vel_data[a].SelfMulSub(inv_mass,f);b.ApplyLinearImpulse(f,p,true);}}}for(var _k16=0;_k16<this.m_contactBuffer.count;_k16++){var _contact9=this.m_contactBuffer.data[_k16];if(_contact9.flags&exports.b2ParticleFlag.b2_powderParticle){var _w11=_contact9.weight;if(_w11>minWeight){var _a13=_contact9.indexA;var _b14=_contact9.indexB;var _n5=_contact9.normal;var _f6=b2Vec2.MulSV(powderStrength*(_w11-minWeight),_n5,s_f);vel_data[_a13].SelfSub(_f6);vel_data[_b14].SelfAdd(_f6);}}}};_proto95.SolveSolid=function SolveSolid(step){var s_f=b2ParticleSystem.SolveSolid_s_f;var vel_data=this.m_velocityBuffer.data;this.m_depthBuffer=this.RequestBuffer(this.m_depthBuffer);var ejectionStrength=step.inv_dt*this.m_def.ejectionStrength;for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];var a=contact.indexA;var b=contact.indexB;if(this.m_groupBuffer[a]!==this.m_groupBuffer[b]){var w=contact.weight;var n=contact.normal;var h=this.m_depthBuffer[a]+this.m_depthBuffer[b];var f=b2Vec2.MulSV(ejectionStrength*h*w,n,s_f);vel_data[a].SelfSub(f);vel_data[b].SelfAdd(f);}}};_proto95.SolveForce=function SolveForce(step){var vel_data=this.m_velocityBuffer.data;var velocityPerForce=step.dt*this.GetParticleInvMass();for(var i=0;i<this.m_count;i++){vel_data[i].SelfMulAdd(velocityPerForce,this.m_forceBuffer[i]);}this.m_hasForce=false;};_proto95.SolveColorMixing=function SolveColorMixing(){var colorMixing=0.5*this.m_def.colorMixingStrength;if(colorMixing){for(var k=0;k<this.m_contactBuffer.count;k++){var contact=this.m_contactBuffer.data[k];var a=contact.indexA;var b=contact.indexB;if(this.m_flagsBuffer.data[a]&this.m_flagsBuffer.data[b]&exports.b2ParticleFlag.b2_colorMixingParticle){var colorA=this.m_colorBuffer.data[a];var colorB=this.m_colorBuffer.data[b];b2Color.MixColors(colorA,colorB,colorMixing);}}}};_proto95.SolveZombie=function SolveZombie(){var newCount=0;var newIndices=[];for(var i=0;i<this.m_count;i++){newIndices[i]=b2_invalidParticleIndex;}var allParticleFlags=0;for(var _i38=0;_i38<this.m_count;_i38++){var flags=this.m_flagsBuffer.data[_i38];if(flags&exports.b2ParticleFlag.b2_zombieParticle){var destructionListener=this.m_world.m_destructionListener;if(flags&exports.b2ParticleFlag.b2_destructionListenerParticle&&destructionListener){destructionListener.SayGoodbyeParticle(this,_i38);}if(this.m_handleIndexBuffer.data){var handle=this.m_handleIndexBuffer.data[_i38];if(handle){handle.SetIndex(b2_invalidParticleIndex);this.m_handleIndexBuffer.data[_i38]=null;}}newIndices[_i38]=b2_invalidParticleIndex;}else {newIndices[_i38]=newCount;if(_i38!==newCount){if(this.m_handleIndexBuffer.data){var _handle=this.m_handleIndexBuffer.data[_i38];if(_handle){_handle.SetIndex(newCount);}this.m_handleIndexBuffer.data[newCount]=_handle;}this.m_flagsBuffer.data[newCount]=this.m_flagsBuffer.data[_i38];if(this.m_lastBodyContactStepBuffer.data){this.m_lastBodyContactStepBuffer.data[newCount]=this.m_lastBodyContactStepBuffer.data[_i38];}if(this.m_bodyContactCountBuffer.data){this.m_bodyContactCountBuffer.data[newCount]=this.m_bodyContactCountBuffer.data[_i38];}if(this.m_consecutiveContactStepsBuffer.data){this.m_consecutiveContactStepsBuffer.data[newCount]=this.m_consecutiveContactStepsBuffer.data[_i38];}this.m_positionBuffer.data[newCount].Copy(this.m_positionBuffer.data[_i38]);this.m_velocityBuffer.data[newCount].Copy(this.m_velocityBuffer.data[_i38]);this.m_groupBuffer[newCount]=this.m_groupBuffer[_i38];if(this.m_hasForce){this.m_forceBuffer[newCount].Copy(this.m_forceBuffer[_i38]);}if(this.m_staticPressureBuffer){this.m_staticPressureBuffer[newCount]=this.m_staticPressureBuffer[_i38];}if(this.m_depthBuffer){this.m_depthBuffer[newCount]=this.m_depthBuffer[_i38];}if(this.m_colorBuffer.data){this.m_colorBuffer.data[newCount].Copy(this.m_colorBuffer.data[_i38]);}if(this.m_userDataBuffer.data){this.m_userDataBuffer.data[newCount]=this.m_userDataBuffer.data[_i38];}if(this.m_expirationTimeBuffer.data){this.m_expirationTimeBuffer.data[newCount]=this.m_expirationTimeBuffer.data[_i38];}}newCount++;allParticleFlags|=flags;}}var Test={IsProxyInvalid:function IsProxyInvalid(proxy){return proxy.index<0;},IsContactInvalid:function IsContactInvalid(contact){return contact.indexA<0||contact.indexB<0;},IsBodyContactInvalid:function IsBodyContactInvalid(contact){return contact.index<0;},IsPairInvalid:function IsPairInvalid(pair){return pair.indexA<0||pair.indexB<0;},IsTriadInvalid:function IsTriadInvalid(triad){return triad.indexA<0||triad.indexB<0||triad.indexC<0;}};for(var k=0;k<this.m_proxyBuffer.count;k++){var proxy=this.m_proxyBuffer.data[k];proxy.index=newIndices[proxy.index];}this.m_proxyBuffer.RemoveIf(Test.IsProxyInvalid);for(var _k17=0;_k17<this.m_contactBuffer.count;_k17++){var contact=this.m_contactBuffer.data[_k17];contact.indexA=newIndices[contact.indexA];contact.indexB=newIndices[contact.indexB];}this.m_contactBuffer.RemoveIf(Test.IsContactInvalid);for(var _k18=0;_k18<this.m_bodyContactBuffer.count;_k18++){var _contact10=this.m_bodyContactBuffer.data[_k18];_contact10.index=newIndices[_contact10.index];}this.m_bodyContactBuffer.RemoveIf(Test.IsBodyContactInvalid);for(var _k19=0;_k19<this.m_pairBuffer.count;_k19++){var pair=this.m_pairBuffer.data[_k19];pair.indexA=newIndices[pair.indexA];pair.indexB=newIndices[pair.indexB];}this.m_pairBuffer.RemoveIf(Test.IsPairInvalid);for(var _k20=0;_k20<this.m_triadBuffer.count;_k20++){var triad=this.m_triadBuffer.data[_k20];triad.indexA=newIndices[triad.indexA];triad.indexB=newIndices[triad.indexB];triad.indexC=newIndices[triad.indexC];}this.m_triadBuffer.RemoveIf(Test.IsTriadInvalid);if(this.m_indexByExpirationTimeBuffer.data){var writeOffset=0;for(var readOffset=0;readOffset<this.m_count;readOffset++){var newIndex=newIndices[this.m_indexByExpirationTimeBuffer.data[readOffset]];if(newIndex!==b2_invalidParticleIndex){this.m_indexByExpirationTimeBuffer.data[writeOffset++]=newIndex;}}}for(var group=this.m_groupList;group;group=group.GetNext()){var firstIndex=newCount;var lastIndex=0;var modified=false;for(var _i39=group.m_firstIndex;_i39<group.m_lastIndex;_i39++){var j=newIndices[_i39];if(j>=0){firstIndex=b2Min(firstIndex,j);lastIndex=b2Max(lastIndex,j+1);}else {modified=true;}}if(firstIndex<lastIndex){group.m_firstIndex=firstIndex;group.m_lastIndex=lastIndex;if(modified){if(group.m_groupFlags&exports.b2ParticleGroupFlag.b2_solidParticleGroup){this.SetGroupFlags(group,group.m_groupFlags|exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);}}}else {group.m_firstIndex=0;group.m_lastIndex=0;if(!(group.m_groupFlags&exports.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty)){this.SetGroupFlags(group,group.m_groupFlags|exports.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed);}}}this.m_count=newCount;this.m_allParticleFlags=allParticleFlags;this.m_needsUpdateAllParticleFlags=false;for(var _group3=this.m_groupList;_group3;){var next=_group3.GetNext();if(_group3.m_groupFlags&exports.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed){this.DestroyParticleGroup(_group3);}_group3=next;}};_proto95.SolveLifetimes=function SolveLifetimes(step){this.m_timeElapsed=this.LifetimeToExpirationTime(step.dt);var quantizedTimeElapsed=this.GetQuantizedTimeElapsed();var expirationTimes=this.m_expirationTimeBuffer.data;var expirationTimeIndices=this.m_indexByExpirationTimeBuffer.data;var particleCount=this.GetParticleCount();if(this.m_expirationTimeBufferRequiresSorting){var ExpirationTimeComparator=function ExpirationTimeComparator(particleIndexA,particleIndexB){var expirationTimeA=expirationTimes[particleIndexA];var expirationTimeB=expirationTimes[particleIndexB];var infiniteExpirationTimeA=expirationTimeA<=0.0;var infiniteExpirationTimeB=expirationTimeB<=0.0;return infiniteExpirationTimeA===infiniteExpirationTimeB?expirationTimeA>expirationTimeB:infiniteExpirationTimeA;};std_sort$1(expirationTimeIndices,0,particleCount,ExpirationTimeComparator);this.m_expirationTimeBufferRequiresSorting=false;}for(var i=particleCount-1;i>=0;--i){var particleIndex=expirationTimeIndices[i];var expirationTime=expirationTimes[particleIndex];if(quantizedTimeElapsed<expirationTime||expirationTime<=0){break;}this.DestroyParticle(particleIndex);}};_proto95.RotateBuffer=function RotateBuffer(start,mid,end){if(start===mid||mid===end){return;}function newIndices(i){if(i<start){return i;}else if(i<mid){return i+end-mid;}else if(i<end){return i+start-mid;}else {return i;}}std_rotate(this.m_flagsBuffer.data,start,mid,end);if(this.m_lastBodyContactStepBuffer.data){std_rotate(this.m_lastBodyContactStepBuffer.data,start,mid,end);}if(this.m_bodyContactCountBuffer.data){std_rotate(this.m_bodyContactCountBuffer.data,start,mid,end);}if(this.m_consecutiveContactStepsBuffer.data){std_rotate(this.m_consecutiveContactStepsBuffer.data,start,mid,end);}std_rotate(this.m_positionBuffer.data,start,mid,end);std_rotate(this.m_velocityBuffer.data,start,mid,end);std_rotate(this.m_groupBuffer,start,mid,end);if(this.m_hasForce){std_rotate(this.m_forceBuffer,start,mid,end);}if(this.m_staticPressureBuffer){std_rotate(this.m_staticPressureBuffer,start,mid,end);}if(this.m_depthBuffer){std_rotate(this.m_depthBuffer,start,mid,end);}if(this.m_colorBuffer.data){std_rotate(this.m_colorBuffer.data,start,mid,end);}if(this.m_userDataBuffer.data){std_rotate(this.m_userDataBuffer.data,start,mid,end);}if(this.m_handleIndexBuffer.data){std_rotate(this.m_handleIndexBuffer.data,start,mid,end);for(var i=start;i<end;++i){var handle=this.m_handleIndexBuffer.data[i];if(handle){handle.SetIndex(newIndices(handle.GetIndex()));}}}if(this.m_expirationTimeBuffer.data){std_rotate(this.m_expirationTimeBuffer.data,start,mid,end);var particleCount=this.GetParticleCount();var indexByExpirationTime=this.m_indexByExpirationTimeBuffer.data;for(var _i40=0;_i40<particleCount;++_i40){indexByExpirationTime[_i40]=newIndices(indexByExpirationTime[_i40]);}}for(var k=0;k<this.m_proxyBuffer.count;k++){var proxy=this.m_proxyBuffer.data[k];proxy.index=newIndices(proxy.index);}for(var _k21=0;_k21<this.m_contactBuffer.count;_k21++){var contact=this.m_contactBuffer.data[_k21];contact.indexA=newIndices(contact.indexA);contact.indexB=newIndices(contact.indexB);}for(var _k22=0;_k22<this.m_bodyContactBuffer.count;_k22++){var _contact11=this.m_bodyContactBuffer.data[_k22];_contact11.index=newIndices(_contact11.index);}for(var _k23=0;_k23<this.m_pairBuffer.count;_k23++){var pair=this.m_pairBuffer.data[_k23];pair.indexA=newIndices(pair.indexA);pair.indexB=newIndices(pair.indexB);}for(var _k24=0;_k24<this.m_triadBuffer.count;_k24++){var triad=this.m_triadBuffer.data[_k24];triad.indexA=newIndices(triad.indexA);triad.indexB=newIndices(triad.indexB);triad.indexC=newIndices(triad.indexC);}for(var group=this.m_groupList;group;group=group.GetNext()){group.m_firstIndex=newIndices(group.m_firstIndex);group.m_lastIndex=newIndices(group.m_lastIndex-1)+1;}};_proto95.GetCriticalVelocity=function GetCriticalVelocity(step){return this.m_particleDiameter*step.inv_dt;};_proto95.GetCriticalVelocitySquared=function GetCriticalVelocitySquared(step){var velocity=this.GetCriticalVelocity(step);return velocity*velocity;};_proto95.GetCriticalPressure=function GetCriticalPressure(step){return this.m_def.density*this.GetCriticalVelocitySquared(step);};_proto95.GetParticleStride=function GetParticleStride(){return b2_particleStride*this.m_particleDiameter;};_proto95.GetParticleMass=function GetParticleMass(){var stride=this.GetParticleStride();return this.m_def.density*stride*stride;};_proto95.GetParticleInvMass=function GetParticleInvMass(){var inverseStride=this.m_inverseDiameter*(1.0/b2_particleStride);return this.m_inverseDensity*inverseStride*inverseStride;};_proto95.GetFixtureContactFilter=function GetFixtureContactFilter(){return this.m_allParticleFlags&exports.b2ParticleFlag.b2_fixtureContactFilterParticle?this.m_world.m_contactManager.m_contactFilter:null;};_proto95.GetParticleContactFilter=function GetParticleContactFilter(){return this.m_allParticleFlags&exports.b2ParticleFlag.b2_particleContactFilterParticle?this.m_world.m_contactManager.m_contactFilter:null;};_proto95.GetFixtureContactListener=function GetFixtureContactListener(){return this.m_allParticleFlags&exports.b2ParticleFlag.b2_fixtureContactListenerParticle?this.m_world.m_contactManager.m_contactListener:null;};_proto95.GetParticleContactListener=function GetParticleContactListener(){return this.m_allParticleFlags&exports.b2ParticleFlag.b2_particleContactListenerParticle?this.m_world.m_contactManager.m_contactListener:null;};_proto95.SetUserOverridableBuffer=function SetUserOverridableBuffer(buffer,data){buffer.data=data;buffer.userSuppliedCapacity=data.length;};_proto95.SetGroupFlags=function SetGroupFlags(group,newFlags){var oldFlags=group.m_groupFlags;if((oldFlags^newFlags)&exports.b2ParticleGroupFlag.b2_solidParticleGroup){newFlags|=exports.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth;}if(oldFlags&~newFlags){this.m_needsUpdateAllGroupFlags=true;}if(~this.m_allGroupFlags&newFlags){if(newFlags&exports.b2ParticleGroupFlag.b2_solidParticleGroup){this.m_depthBuffer=this.RequestBuffer(this.m_depthBuffer);}this.m_allGroupFlags|=newFlags;}group.m_groupFlags=newFlags;};b2ParticleSystem.BodyContactCompare=function BodyContactCompare(lhs,rhs){if(lhs.index===rhs.index){return lhs.weight>rhs.weight;}return lhs.index<rhs.index;};_proto95.RemoveSpuriousBodyContacts=function RemoveSpuriousBodyContacts(){std_sort$1(this.m_bodyContactBuffer.data,0,this.m_bodyContactBuffer.count,b2ParticleSystem.BodyContactCompare);var s_n=b2ParticleSystem.RemoveSpuriousBodyContacts_s_n;var s_pos=b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos;var s_normal=b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal;var k_maxContactsPerPoint=3;var system=this;var lastIndex=-1;var currentContacts=0;var b2ParticleBodyContactRemovePredicate=function b2ParticleBodyContactRemovePredicate(contact){if(contact.index!==lastIndex){currentContacts=0;lastIndex=contact.index;}if(currentContacts++>k_maxContactsPerPoint){return true;}var n=s_n.Copy(contact.normal);n.SelfMul(system.m_particleDiameter*(1-contact.weight));var pos=b2Vec2.AddVV(system.m_positionBuffer.data[contact.index],n,s_pos);if(!contact.fixture.TestPoint(pos)){var childCount=contact.fixture.GetShape().GetChildCount();for(var childIndex=0;childIndex<childCount;childIndex++){var normal=s_normal;var distance=contact.fixture.ComputeDistance(pos,normal,childIndex);if(distance<b2_linearSlop){return false;}}return true;}return false;};this.m_bodyContactBuffer.count=std_remove_if(this.m_bodyContactBuffer.data,b2ParticleBodyContactRemovePredicate,this.m_bodyContactBuffer.count);};_proto95.DetectStuckParticle=function DetectStuckParticle(particle){if(this.m_stuckThreshold<=0){return;}++this.m_bodyContactCountBuffer.data[particle];if(this.m_bodyContactCountBuffer.data[particle]===2){++this.m_consecutiveContactStepsBuffer.data[particle];if(this.m_consecutiveContactStepsBuffer.data[particle]>this.m_stuckThreshold){this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()]=particle;}}this.m_lastBodyContactStepBuffer.data[particle]=this.m_timestamp;};_proto95.ValidateParticleIndex=function ValidateParticleIndex(index){return index>=0&&index<this.GetParticleCount()&&index!==b2_invalidParticleIndex;};_proto95.GetQuantizedTimeElapsed=function GetQuantizedTimeElapsed(){return Math.floor(this.m_timeElapsed/0x100000000);};_proto95.LifetimeToExpirationTime=function LifetimeToExpirationTime(lifetime){return this.m_timeElapsed+Math.floor(lifetime/this.m_def.lifetimeGranularity*0x100000000);};_proto95.ForceCanBeApplied=function ForceCanBeApplied(flags){return !(flags&exports.b2ParticleFlag.b2_wallParticle);};_proto95.PrepareForceBuffer=function PrepareForceBuffer(){if(!this.m_hasForce){for(var i=0;i<this.m_count;i++){this.m_forceBuffer[i].SetZero();}this.m_hasForce=true;}};_proto95.IsRigidGroup=function IsRigidGroup(group){return group!==null&&(group.m_groupFlags&exports.b2ParticleGroupFlag.b2_rigidParticleGroup)!==0;};_proto95.GetLinearVelocity=function GetLinearVelocity(group,particleIndex,point,out){if(group&&this.IsRigidGroup(group)){return group.GetLinearVelocityFromWorldPoint(point,out);}else {return out.Copy(this.m_velocityBuffer.data[particleIndex]);}};_proto95.InitDampingParameter=function InitDampingParameter(invMass,invInertia,tangentDistance,mass,inertia,center,point,normal){invMass[0]=mass>0?1/mass:0;invInertia[0]=inertia>0?1/inertia:0;tangentDistance[0]=b2Vec2.CrossVV(b2Vec2.SubVV(point,center,b2Vec2.s_t0),normal);};_proto95.InitDampingParameterWithRigidGroupOrParticle=function InitDampingParameterWithRigidGroupOrParticle(invMass,invInertia,tangentDistance,isRigidGroup,group,particleIndex,point,normal){if(group&&isRigidGroup){this.InitDampingParameter(invMass,invInertia,tangentDistance,group.GetMass(),group.GetInertia(),group.GetCenter(),point,normal);}else {var flags=this.m_flagsBuffer.data[particleIndex];this.InitDampingParameter(invMass,invInertia,tangentDistance,flags&exports.b2ParticleFlag.b2_wallParticle?0:this.GetParticleMass(),0,point,point,normal);}};_proto95.ComputeDampingImpulse=function ComputeDampingImpulse(invMassA,invInertiaA,tangentDistanceA,invMassB,invInertiaB,tangentDistanceB,normalVelocity){var invMass=invMassA+invInertiaA*tangentDistanceA*tangentDistanceA+invMassB+invInertiaB*tangentDistanceB*tangentDistanceB;return invMass>0?normalVelocity/invMass:0;};_proto95.ApplyDamping=function ApplyDamping(invMass,invInertia,tangentDistance,isRigidGroup,group,particleIndex,impulse,normal){if(group&&isRigidGroup){group.m_linearVelocity.SelfMulAdd(impulse*invMass,normal);group.m_angularVelocity+=impulse*tangentDistance*invInertia;}else {this.m_velocityBuffer.data[particleIndex].SelfMulAdd(impulse*invMass,normal);}};return b2ParticleSystem;}();b2ParticleSystem.xTruncBits=12;b2ParticleSystem.yTruncBits=12;b2ParticleSystem.tagBits=8*4;b2ParticleSystem.yOffset=1<<b2ParticleSystem.yTruncBits-1;b2ParticleSystem.yShift=b2ParticleSystem.tagBits-b2ParticleSystem.yTruncBits;b2ParticleSystem.xShift=b2ParticleSystem.tagBits-b2ParticleSystem.yTruncBits-b2ParticleSystem.xTruncBits;b2ParticleSystem.xScale=1<<b2ParticleSystem.xShift;b2ParticleSystem.xOffset=b2ParticleSystem.xScale*(1<<b2ParticleSystem.xTruncBits-1);b2ParticleSystem.yMask=(1<<b2ParticleSystem.yTruncBits)-1<<b2ParticleSystem.yShift;b2ParticleSystem.xMask=~b2ParticleSystem.yMask;b2ParticleSystem.DestroyParticlesInShape_s_aabb=new b2AABB();b2ParticleSystem.CreateParticleGroup_s_transform=new b2Transform();b2ParticleSystem.ComputeCollisionEnergy_s_v=new b2Vec2();b2ParticleSystem.QueryShapeAABB_s_aabb=new b2AABB();b2ParticleSystem.QueryPointAABB_s_aabb=new b2AABB();b2ParticleSystem.RayCast_s_aabb=new b2AABB();b2ParticleSystem.RayCast_s_p=new b2Vec2();b2ParticleSystem.RayCast_s_v=new b2Vec2();b2ParticleSystem.RayCast_s_n=new b2Vec2();b2ParticleSystem.RayCast_s_point=new b2Vec2();b2ParticleSystem.k_pairFlags=exports.b2ParticleFlag.b2_springParticle;b2ParticleSystem.k_triadFlags=exports.b2ParticleFlag.b2_elasticParticle;b2ParticleSystem.k_noPressureFlags=exports.b2ParticleFlag.b2_powderParticle|exports.b2ParticleFlag.b2_tensileParticle;b2ParticleSystem.k_extraDampingFlags=exports.b2ParticleFlag.b2_staticPressureParticle;b2ParticleSystem.k_barrierWallFlags=exports.b2ParticleFlag.b2_barrierParticle|exports.b2ParticleFlag.b2_wallParticle;b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge=new b2EdgeShape();b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d=new b2Vec2();b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p=new b2Vec2();b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb=new b2AABB();b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p=new b2Vec2();b2ParticleSystem.UpdatePairsAndTriads_s_dab=new b2Vec2();b2ParticleSystem.UpdatePairsAndTriads_s_dbc=new b2Vec2();b2ParticleSystem.UpdatePairsAndTriads_s_dca=new b2Vec2();b2ParticleSystem.AddContact_s_d=new b2Vec2();b2ParticleSystem.UpdateBodyContacts_s_aabb=new b2AABB();b2ParticleSystem.Solve_s_subStep=new b2TimeStep();b2ParticleSystem.SolveCollision_s_aabb=new b2AABB();b2ParticleSystem.SolveGravity_s_gravity=new b2Vec2();b2ParticleSystem.SolveBarrier_s_aabb=new b2AABB();b2ParticleSystem.SolveBarrier_s_va=new b2Vec2();b2ParticleSystem.SolveBarrier_s_vb=new b2Vec2();b2ParticleSystem.SolveBarrier_s_pba=new b2Vec2();b2ParticleSystem.SolveBarrier_s_vba=new b2Vec2();b2ParticleSystem.SolveBarrier_s_vc=new b2Vec2();b2ParticleSystem.SolveBarrier_s_pca=new b2Vec2();b2ParticleSystem.SolveBarrier_s_vca=new b2Vec2();b2ParticleSystem.SolveBarrier_s_qba=new b2Vec2();b2ParticleSystem.SolveBarrier_s_qca=new b2Vec2();b2ParticleSystem.SolveBarrier_s_dv=new b2Vec2();b2ParticleSystem.SolveBarrier_s_f=new b2Vec2();b2ParticleSystem.SolvePressure_s_f=new b2Vec2();b2ParticleSystem.SolveDamping_s_v=new b2Vec2();b2ParticleSystem.SolveDamping_s_f=new b2Vec2();b2ParticleSystem.SolveRigidDamping_s_t0=new b2Vec2();b2ParticleSystem.SolveRigidDamping_s_t1=new b2Vec2();b2ParticleSystem.SolveRigidDamping_s_p=new b2Vec2();b2ParticleSystem.SolveRigidDamping_s_v=new b2Vec2();b2ParticleSystem.SolveExtraDamping_s_v=new b2Vec2();b2ParticleSystem.SolveExtraDamping_s_f=new b2Vec2();b2ParticleSystem.SolveRigid_s_position=new b2Vec2();b2ParticleSystem.SolveRigid_s_rotation=new b2Rot();b2ParticleSystem.SolveRigid_s_transform=new b2Transform();b2ParticleSystem.SolveRigid_s_velocityTransform=new b2Transform();b2ParticleSystem.SolveElastic_s_pa=new b2Vec2();b2ParticleSystem.SolveElastic_s_pb=new b2Vec2();b2ParticleSystem.SolveElastic_s_pc=new b2Vec2();b2ParticleSystem.SolveElastic_s_r=new b2Rot();b2ParticleSystem.SolveElastic_s_t0=new b2Vec2();b2ParticleSystem.SolveSpring_s_pa=new b2Vec2();b2ParticleSystem.SolveSpring_s_pb=new b2Vec2();b2ParticleSystem.SolveSpring_s_d=new b2Vec2();b2ParticleSystem.SolveSpring_s_f=new b2Vec2();b2ParticleSystem.SolveTensile_s_weightedNormal=new b2Vec2();b2ParticleSystem.SolveTensile_s_s=new b2Vec2();b2ParticleSystem.SolveTensile_s_f=new b2Vec2();b2ParticleSystem.SolveViscous_s_v=new b2Vec2();b2ParticleSystem.SolveViscous_s_f=new b2Vec2();b2ParticleSystem.SolveRepulsive_s_f=new b2Vec2();b2ParticleSystem.SolvePowder_s_f=new b2Vec2();b2ParticleSystem.SolveSolid_s_f=new b2Vec2();b2ParticleSystem.RemoveSpuriousBodyContacts_s_n=new b2Vec2();b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos=new b2Vec2();b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal=new b2Vec2();var b2ParticleSystem_UserOverridableBuffer=function(){function b2ParticleSystem_UserOverridableBuffer(){this._data=null;this.userSuppliedCapacity=0;}_createClass(b2ParticleSystem_UserOverridableBuffer,[{key:"data",get:function get(){return this._data;},set:function set(value){this._data=value;}}]);return b2ParticleSystem_UserOverridableBuffer;}();var b2ParticleSystem_Proxy=function(){function b2ParticleSystem_Proxy(){this.index=b2_invalidParticleIndex;this.tag=0;}b2ParticleSystem_Proxy.CompareProxyProxy=function CompareProxyProxy(a,b){return a.tag<b.tag;};b2ParticleSystem_Proxy.CompareTagProxy=function CompareTagProxy(a,b){return a<b.tag;};b2ParticleSystem_Proxy.CompareProxyTag=function CompareProxyTag(a,b){return a.tag<b;};return b2ParticleSystem_Proxy;}();var b2ParticleSystem_InsideBoundsEnumerator=function(){function b2ParticleSystem_InsideBoundsEnumerator(system,lower,upper,first,last){this.m_system=system;this.m_xLower=(lower&b2ParticleSystem.xMask)>>>0;this.m_xUpper=(upper&b2ParticleSystem.xMask)>>>0;this.m_yLower=(lower&b2ParticleSystem.yMask)>>>0;this.m_yUpper=(upper&b2ParticleSystem.yMask)>>>0;this.m_first=first;this.m_last=last;}var _proto96=b2ParticleSystem_InsideBoundsEnumerator.prototype;_proto96.GetNext=function GetNext(){while(this.m_first<this.m_last){var xTag=(this.m_system.m_proxyBuffer.data[this.m_first].tag&b2ParticleSystem.xMask)>>>0;if(xTag>=this.m_xLower&&xTag<=this.m_xUpper){return this.m_system.m_proxyBuffer.data[this.m_first++].index;}this.m_first++;}return b2_invalidParticleIndex;};return b2ParticleSystem_InsideBoundsEnumerator;}();var b2ParticleSystem_ParticleListNode=function b2ParticleSystem_ParticleListNode(){this.next=null;this.count=0;this.index=0;};var b2ParticleSystem_FixedSetAllocator=function(){function b2ParticleSystem_FixedSetAllocator(){}var _proto97=b2ParticleSystem_FixedSetAllocator.prototype;_proto97.Allocate=function Allocate(itemSize,count){return count;};_proto97.Clear=function Clear(){};_proto97.GetCount=function GetCount(){return 0;};_proto97.Invalidate=function Invalidate(itemIndex){};_proto97.GetValidBuffer=function GetValidBuffer(){return [];};_proto97.GetBuffer=function GetBuffer(){return [];};_proto97.SetCount=function SetCount(count){};return b2ParticleSystem_FixedSetAllocator;}();var b2ParticleSystem_FixtureParticle=function b2ParticleSystem_FixtureParticle(fixture,particle){this.second=b2_invalidParticleIndex;this.first=fixture;this.second=particle;};var b2ParticleSystem_FixtureParticleSet=function(_b2ParticleSystem_Fix){_inheritsLoose(b2ParticleSystem_FixtureParticleSet,_b2ParticleSystem_Fix);function b2ParticleSystem_FixtureParticleSet(){return _b2ParticleSystem_Fix.apply(this,arguments)||this;}var _proto98=b2ParticleSystem_FixtureParticleSet.prototype;_proto98.Initialize=function Initialize(bodyContactBuffer,flagsBuffer){};_proto98.Find=function Find(pair){return b2_invalidParticleIndex;};return b2ParticleSystem_FixtureParticleSet;}(b2ParticleSystem_FixedSetAllocator);var b2ParticleSystem_ParticlePair=function b2ParticleSystem_ParticlePair(particleA,particleB){this.first=b2_invalidParticleIndex;this.second=b2_invalidParticleIndex;this.first=particleA;this.second=particleB;};var b2ParticlePairSet=function(_b2ParticleSystem_Fix2){_inheritsLoose(b2ParticlePairSet,_b2ParticleSystem_Fix2);function b2ParticlePairSet(){return _b2ParticleSystem_Fix2.apply(this,arguments)||this;}var _proto99=b2ParticlePairSet.prototype;_proto99.Initialize=function Initialize(contactBuffer,flagsBuffer){};_proto99.Find=function Find(pair){return b2_invalidParticleIndex;};return b2ParticlePairSet;}(b2ParticleSystem_FixedSetAllocator);var b2ParticleSystem_ConnectionFilter=function(){function b2ParticleSystem_ConnectionFilter(){}var _proto100=b2ParticleSystem_ConnectionFilter.prototype;_proto100.IsNecessary=function IsNecessary(index){return true;};_proto100.ShouldCreatePair=function ShouldCreatePair(a,b){return true;};_proto100.ShouldCreateTriad=function ShouldCreateTriad(a,b,c){return true;};return b2ParticleSystem_ConnectionFilter;}();var b2ParticleSystem_DestroyParticlesInShapeCallback=function(_b2QueryCallback2){_inheritsLoose(b2ParticleSystem_DestroyParticlesInShapeCallback,_b2QueryCallback2);function b2ParticleSystem_DestroyParticlesInShapeCallback(system,shape,xf,callDestructionListener){var _this32;_this32=_b2QueryCallback2.call(this)||this;_this32.m_callDestructionListener=false;_this32.m_destroyed=0;_this32.m_system=system;_this32.m_shape=shape;_this32.m_xf=xf;_this32.m_callDestructionListener=callDestructionListener;_this32.m_destroyed=0;return _this32;}var _proto101=b2ParticleSystem_DestroyParticlesInShapeCallback.prototype;_proto101.ReportFixture=function ReportFixture(fixture){return false;};_proto101.ReportParticle=function ReportParticle(particleSystem,index){if(particleSystem!==this.m_system){return false;}if(this.m_shape.TestPoint(this.m_xf,this.m_system.m_positionBuffer.data[index])){this.m_system.DestroyParticle(index,this.m_callDestructionListener);this.m_destroyed++;}return true;};_proto101.Destroyed=function Destroyed(){return this.m_destroyed;};return b2ParticleSystem_DestroyParticlesInShapeCallback;}(b2QueryCallback);var b2ParticleSystem_JoinParticleGroupsFilter=function(_b2ParticleSystem_Con){_inheritsLoose(b2ParticleSystem_JoinParticleGroupsFilter,_b2ParticleSystem_Con);function b2ParticleSystem_JoinParticleGroupsFilter(threshold){var _this33;_this33=_b2ParticleSystem_Con.call(this)||this;_this33.m_threshold=0;_this33.m_threshold=threshold;return _this33;}var _proto102=b2ParticleSystem_JoinParticleGroupsFilter.prototype;_proto102.ShouldCreatePair=function ShouldCreatePair(a,b){return a<this.m_threshold&&this.m_threshold<=b||b<this.m_threshold&&this.m_threshold<=a;};_proto102.ShouldCreateTriad=function ShouldCreateTriad(a,b,c){return (a<this.m_threshold||b<this.m_threshold||c<this.m_threshold)&&(this.m_threshold<=a||this.m_threshold<=b||this.m_threshold<=c);};return b2ParticleSystem_JoinParticleGroupsFilter;}(b2ParticleSystem_ConnectionFilter);var b2ParticleSystem_CompositeShape=function(_b2Shape5){_inheritsLoose(b2ParticleSystem_CompositeShape,_b2Shape5);function b2ParticleSystem_CompositeShape(shapes,shapeCount){var _this34;if(shapeCount===void 0){shapeCount=shapes.length;}_this34=_b2Shape5.call(this,exports.b2ShapeType.e_unknown,0)||this;_this34.m_shapeCount=0;_this34.m_shapes=shapes;_this34.m_shapeCount=shapeCount;return _this34;}var _proto103=b2ParticleSystem_CompositeShape.prototype;_proto103.Clone=function Clone(){throw new Error();};_proto103.GetChildCount=function GetChildCount(){return 1;};_proto103.TestPoint=function TestPoint(xf,p){for(var i=0;i<this.m_shapeCount;i++){if(this.m_shapes[i].TestPoint(xf,p)){return true;}}return false;};_proto103.ComputeDistance=function ComputeDistance(xf,p,normal,childIndex){return 0;};_proto103.RayCast=function RayCast(output,input,xf,childIndex){return false;};_proto103.ComputeAABB=function ComputeAABB(aabb,xf,childIndex){var s_subaabb=new b2AABB();aabb.lowerBound.x=+b2_maxFloat;aabb.lowerBound.y=+b2_maxFloat;aabb.upperBound.x=-b2_maxFloat;aabb.upperBound.y=-b2_maxFloat;for(var i=0;i<this.m_shapeCount;i++){var childCount=this.m_shapes[i].GetChildCount();for(var j=0;j<childCount;j++){var subaabb=s_subaabb;this.m_shapes[i].ComputeAABB(subaabb,xf,j);aabb.Combine1(subaabb);}}};_proto103.ComputeMass=function ComputeMass(massData,density){};_proto103.SetupDistanceProxy=function SetupDistanceProxy(proxy,index){};_proto103.ComputeSubmergedArea=function ComputeSubmergedArea(normal,offset,xf,c){return 0;};_proto103.Dump=function Dump(log){};return b2ParticleSystem_CompositeShape;}(b2Shape);var b2ParticleSystem_ReactiveFilter=function(_b2ParticleSystem_Con2){_inheritsLoose(b2ParticleSystem_ReactiveFilter,_b2ParticleSystem_Con2);function b2ParticleSystem_ReactiveFilter(flagsBuffer){var _this35;_this35=_b2ParticleSystem_Con2.call(this)||this;_this35.m_flagsBuffer=flagsBuffer;return _this35;}var _proto104=b2ParticleSystem_ReactiveFilter.prototype;_proto104.IsNecessary=function IsNecessary(index){return (this.m_flagsBuffer.data[index]&exports.b2ParticleFlag.b2_reactiveParticle)!==0;};return b2ParticleSystem_ReactiveFilter;}(b2ParticleSystem_ConnectionFilter);var b2ParticleSystem_UpdateBodyContactsCallback=function(_b2FixtureParticleQue){_inheritsLoose(b2ParticleSystem_UpdateBodyContactsCallback,_b2FixtureParticleQue);function b2ParticleSystem_UpdateBodyContactsCallback(system,contactFilter){var _this36;if(contactFilter===void 0){contactFilter=null;}_this36=_b2FixtureParticleQue.call(this,system)||this;_this36.m_contactFilter=null;_this36.m_contactFilter=contactFilter;return _this36;}var _proto105=b2ParticleSystem_UpdateBodyContactsCallback.prototype;_proto105.ShouldCollideFixtureParticle=function ShouldCollideFixtureParticle(fixture,particleSystem,particleIndex){if(this.m_contactFilter){var flags=this.m_system.GetFlagsBuffer();if(flags[particleIndex]&exports.b2ParticleFlag.b2_fixtureContactFilterParticle){return this.m_contactFilter.ShouldCollideFixtureParticle(fixture,this.m_system,particleIndex);}}return true;};_proto105.ReportFixtureAndParticle=function ReportFixtureAndParticle(fixture,childIndex,a){var s_n=b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n;var s_rp=b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;var ap=this.m_system.m_positionBuffer.data[a];var n=s_n;var d=fixture.ComputeDistance(ap,n,childIndex);if(d<this.m_system.m_particleDiameter&&this.ShouldCollideFixtureParticle(fixture,this.m_system,a)){var b=fixture.GetBody();var bp=b.GetWorldCenter();var bm=b.GetMass();var bI=b.GetInertia()-bm*b.GetLocalCenter().LengthSquared();var invBm=bm>0?1/bm:0;var invBI=bI>0?1/bI:0;var invAm=this.m_system.m_flagsBuffer.data[a]&exports.b2ParticleFlag.b2_wallParticle?0:this.m_system.GetParticleInvMass();var rp=b2Vec2.SubVV(ap,bp,s_rp);var rpn=b2Vec2.CrossVV(rp,n);var invM=invAm+invBm+invBI*rpn*rpn;var contact=this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];contact.index=a;contact.body=b;contact.fixture=fixture;contact.weight=1-d*this.m_system.m_inverseDiameter;contact.normal.Copy(n.SelfNeg());contact.mass=invM>0?1/invM:0;this.m_system.DetectStuckParticle(a);}};return b2ParticleSystem_UpdateBodyContactsCallback;}(b2FixtureParticleQueryCallback);b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n=new b2Vec2();b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp=new b2Vec2();var b2ParticleSystem_SolveCollisionCallback=function(_b2FixtureParticleQue2){_inheritsLoose(b2ParticleSystem_SolveCollisionCallback,_b2FixtureParticleQue2);function b2ParticleSystem_SolveCollisionCallback(system,step){var _this37;_this37=_b2FixtureParticleQue2.call(this,system)||this;_this37.m_step=step;return _this37;}var _proto106=b2ParticleSystem_SolveCollisionCallback.prototype;_proto106.ReportFixtureAndParticle=function ReportFixtureAndParticle(fixture,childIndex,a){var s_p1=b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p1;var s_output=b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_output;var s_input=b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_input;var s_p=b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p;var s_v=b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_v;var s_f=b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_f;var body=fixture.GetBody();var ap=this.m_system.m_positionBuffer.data[a];var av=this.m_system.m_velocityBuffer.data[a];var output=s_output;var input=s_input;if(this.m_system.m_iterationIndex===0){var p1=b2Transform.MulTXV(body.m_xf0,ap,s_p1);if(fixture.GetShape().GetType()===exports.b2ShapeType.e_circleShape){p1.SelfSub(body.GetLocalCenter());b2Rot.MulRV(body.m_xf0.q,p1,p1);b2Rot.MulTRV(body.m_xf.q,p1,p1);p1.SelfAdd(body.GetLocalCenter());}b2Transform.MulXV(body.m_xf,p1,input.p1);}else {input.p1.Copy(ap);}b2Vec2.AddVMulSV(ap,this.m_step.dt,av,input.p2);input.maxFraction=1;if(fixture.RayCast(output,input,childIndex)){var n=output.normal;var p=s_p;p.x=(1-output.fraction)*input.p1.x+output.fraction*input.p2.x+b2_linearSlop*n.x;p.y=(1-output.fraction)*input.p1.y+output.fraction*input.p2.y+b2_linearSlop*n.y;var v=s_v;v.x=this.m_step.inv_dt*(p.x-ap.x);v.y=this.m_step.inv_dt*(p.y-ap.y);this.m_system.m_velocityBuffer.data[a].Copy(v);var f=s_f;f.x=this.m_step.inv_dt*this.m_system.GetParticleMass()*(av.x-v.x);f.y=this.m_step.inv_dt*this.m_system.GetParticleMass()*(av.y-v.y);this.m_system.ParticleApplyForce(a,f);}};_proto106.ReportParticle=function ReportParticle(system,index){return false;};return b2ParticleSystem_SolveCollisionCallback;}(b2FixtureParticleQueryCallback);b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p1=new b2Vec2();b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_output=new b2RayCastOutput();b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_input=new b2RayCastInput();b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p=new b2Vec2();b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_v=new b2Vec2();b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_f=new b2Vec2();var b2World=function(){function b2World(gravity){this.m_newFixture=false;this.m_locked=false;this.m_clearForces=true;this.m_contactManager=new b2ContactManager();this.m_bodyList=null;this.m_jointList=null;this.m_particleSystemList=null;this.m_bodyCount=0;this.m_jointCount=0;this.m_gravity=new b2Vec2();this.m_allowSleep=true;this.m_destructionListener=null;this.m_debugDraw=null;this.m_inv_dt0=0;this.m_warmStarting=true;this.m_continuousPhysics=true;this.m_subStepping=false;this.m_stepComplete=true;this.m_profile=new b2Profile();this.m_island=new b2Island();this.s_stack=[];this.m_controllerList=null;this.m_controllerCount=0;this.m_gravity.Copy(gravity);}var _proto107=b2World.prototype;_proto107.SetDestructionListener=function SetDestructionListener(listener){this.m_destructionListener=listener;};_proto107.SetContactFilter=function SetContactFilter(filter){this.m_contactManager.m_contactFilter=filter;};_proto107.SetContactListener=function SetContactListener(listener){this.m_contactManager.m_contactListener=listener;};_proto107.SetDebugDraw=function SetDebugDraw(debugDraw){this.m_debugDraw=debugDraw;};_proto107.CreateBody=function CreateBody(def){if(def===void 0){def={};}if(this.IsLocked()){throw new Error();}var b=new b2Body(def,this);b.m_prev=null;b.m_next=this.m_bodyList;if(this.m_bodyList){this.m_bodyList.m_prev=b;}this.m_bodyList=b;++this.m_bodyCount;return b;};_proto107.DestroyBody=function DestroyBody(b){if(this.IsLocked()){throw new Error();}var je=b.m_jointList;while(je){var je0=je;je=je.next;if(this.m_destructionListener){this.m_destructionListener.SayGoodbyeJoint(je0.joint);}this.DestroyJoint(je0.joint);b.m_jointList=je;}b.m_jointList=null;var coe=b.m_controllerList;while(coe){var coe0=coe;coe=coe.nextController;coe0.controller.RemoveBody(b);}var ce=b.m_contactList;while(ce){var ce0=ce;ce=ce.next;this.m_contactManager.Destroy(ce0.contact);}b.m_contactList=null;var f=b.m_fixtureList;while(f){var f0=f;f=f.m_next;if(this.m_destructionListener){this.m_destructionListener.SayGoodbyeFixture(f0);}f0.DestroyProxies();f0.Reset();b.m_fixtureList=f;b.m_fixtureCount-=1;}b.m_fixtureList=null;b.m_fixtureCount=0;if(b.m_prev){b.m_prev.m_next=b.m_next;}if(b.m_next){b.m_next.m_prev=b.m_prev;}if(b===this.m_bodyList){this.m_bodyList=b.m_next;}--this.m_bodyCount;};b2World._Joint_Create=function _Joint_Create(def){switch(def.type){case exports.b2JointType.e_distanceJoint:return new b2DistanceJoint(def);case exports.b2JointType.e_mouseJoint:return new b2MouseJoint(def);case exports.b2JointType.e_prismaticJoint:return new b2PrismaticJoint(def);case exports.b2JointType.e_revoluteJoint:return new b2RevoluteJoint(def);case exports.b2JointType.e_pulleyJoint:return new b2PulleyJoint(def);case exports.b2JointType.e_gearJoint:return new b2GearJoint(def);case exports.b2JointType.e_wheelJoint:return new b2WheelJoint(def);case exports.b2JointType.e_weldJoint:return new b2WeldJoint(def);case exports.b2JointType.e_frictionJoint:return new b2FrictionJoint(def);case exports.b2JointType.e_ropeJoint:return new b2RopeJoint(def);case exports.b2JointType.e_motorJoint:return new b2MotorJoint(def);case exports.b2JointType.e_areaJoint:return new b2AreaJoint(def);}throw new Error();};b2World._Joint_Destroy=function _Joint_Destroy(joint){};_proto107.CreateJoint=function CreateJoint(def){if(this.IsLocked()){throw new Error();}var j=b2World._Joint_Create(def);j.m_prev=null;j.m_next=this.m_jointList;if(this.m_jointList){this.m_jointList.m_prev=j;}this.m_jointList=j;++this.m_jointCount;j.m_edgeA.prev=null;j.m_edgeA.next=j.m_bodyA.m_jointList;if(j.m_bodyA.m_jointList){j.m_bodyA.m_jointList.prev=j.m_edgeA;}j.m_bodyA.m_jointList=j.m_edgeA;j.m_edgeB.prev=null;j.m_edgeB.next=j.m_bodyB.m_jointList;if(j.m_bodyB.m_jointList){j.m_bodyB.m_jointList.prev=j.m_edgeB;}j.m_bodyB.m_jointList=j.m_edgeB;var bodyA=j.m_bodyA;var bodyB=j.m_bodyB;var collideConnected=j.m_collideConnected;if(!collideConnected){var edge=bodyB.GetContactList();while(edge){if(edge.other===bodyA){edge.contact.FlagForFiltering();}edge=edge.next;}}return j;};_proto107.DestroyJoint=function DestroyJoint(j){if(this.IsLocked()){throw new Error();}if(j.m_prev){j.m_prev.m_next=j.m_next;}if(j.m_next){j.m_next.m_prev=j.m_prev;}if(j===this.m_jointList){this.m_jointList=j.m_next;}var bodyA=j.m_bodyA;var bodyB=j.m_bodyB;var collideConnected=j.m_collideConnected;bodyA.SetAwake(true);bodyB.SetAwake(true);if(j.m_edgeA.prev){j.m_edgeA.prev.next=j.m_edgeA.next;}if(j.m_edgeA.next){j.m_edgeA.next.prev=j.m_edgeA.prev;}if(j.m_edgeA===bodyA.m_jointList){bodyA.m_jointList=j.m_edgeA.next;}j.m_edgeA.Reset();if(j.m_edgeB.prev){j.m_edgeB.prev.next=j.m_edgeB.next;}if(j.m_edgeB.next){j.m_edgeB.next.prev=j.m_edgeB.prev;}if(j.m_edgeB===bodyB.m_jointList){bodyB.m_jointList=j.m_edgeB.next;}j.m_edgeB.Reset();b2World._Joint_Destroy(j);--this.m_jointCount;if(!collideConnected){var edge=bodyB.GetContactList();while(edge){if(edge.other===bodyA){edge.contact.FlagForFiltering();}edge=edge.next;}}};_proto107.CreateParticleSystem=function CreateParticleSystem(def){if(this.IsLocked()){throw new Error();}var p=new b2ParticleSystem(def,this);p.m_prev=null;p.m_next=this.m_particleSystemList;if(this.m_particleSystemList){this.m_particleSystemList.m_prev=p;}this.m_particleSystemList=p;return p;};_proto107.DestroyParticleSystem=function DestroyParticleSystem(p){if(this.IsLocked()){throw new Error();}if(p.m_prev){p.m_prev.m_next=p.m_next;}if(p.m_next){p.m_next.m_prev=p.m_prev;}if(p===this.m_particleSystemList){this.m_particleSystemList=p.m_next;}};_proto107.CalculateReasonableParticleIterations=function CalculateReasonableParticleIterations(timeStep){if(this.m_particleSystemList===null){return 1;}function GetSmallestRadius(world){var smallestRadius=b2_maxFloat;for(var system=world.GetParticleSystemList();system!==null;system=system.m_next){smallestRadius=b2Min(smallestRadius,system.GetRadius());}return smallestRadius;}return b2CalculateParticleIterations(this.m_gravity.Length(),GetSmallestRadius(this),timeStep);};_proto107.Step=function Step(dt,velocityIterations,positionIterations,particleIterations){if(particleIterations===void 0){particleIterations=this.CalculateReasonableParticleIterations(dt);}var stepTimer=b2World.Step_s_stepTimer.Reset();if(this.m_newFixture){this.m_contactManager.FindNewContacts();this.m_newFixture=false;}this.m_locked=true;var step=b2World.Step_s_step;step.dt=dt;step.velocityIterations=velocityIterations;step.positionIterations=positionIterations;step.particleIterations=particleIterations;if(dt>0){step.inv_dt=1/dt;}else {step.inv_dt=0;}step.dtRatio=this.m_inv_dt0*dt;step.warmStarting=this.m_warmStarting;var timer=b2World.Step_s_timer.Reset();this.m_contactManager.Collide();this.m_profile.collide=timer.GetMilliseconds();if(this.m_stepComplete&&step.dt>0){var _timer=b2World.Step_s_timer.Reset();for(var p=this.m_particleSystemList;p;p=p.m_next){p.Solve(step);}this.Solve(step);this.m_profile.solve=_timer.GetMilliseconds();}if(this.m_continuousPhysics&&step.dt>0){var _timer2=b2World.Step_s_timer.Reset();this.SolveTOI(step);this.m_profile.solveTOI=_timer2.GetMilliseconds();}if(step.dt>0){this.m_inv_dt0=step.inv_dt;}if(this.m_clearForces){this.ClearForces();}this.m_locked=false;this.m_profile.step=stepTimer.GetMilliseconds();};_proto107.ClearForces=function ClearForces(){for(var body=this.m_bodyList;body;body=body.m_next){body.m_force.SetZero();body.m_torque=0;}};_proto107.DrawParticleSystem=function DrawParticleSystem(system){if(this.m_debugDraw===null){return;}var particleCount=system.GetParticleCount();if(particleCount){var radius=system.GetRadius();var positionBuffer=system.GetPositionBuffer();if(system.m_colorBuffer.data){var colorBuffer=system.GetColorBuffer();this.m_debugDraw.DrawParticles(positionBuffer,radius,colorBuffer,particleCount);}else {this.m_debugDraw.DrawParticles(positionBuffer,radius,null,particleCount);}}};_proto107.DrawDebugData=function DrawDebugData(){if(this.m_debugDraw===null){return;}var flags=this.m_debugDraw.GetFlags();var color=b2World.DrawDebugData_s_color.SetRGB(0,0,0);if(flags&exports.b2DrawFlags.e_shapeBit){for(var b=this.m_bodyList;b;b=b.m_next){var xf=b.m_xf;this.m_debugDraw.PushTransform(xf);for(var f=b.GetFixtureList();f;f=f.m_next){if(!b.IsActive()){color.SetRGB(0.5,0.5,0.3);this.DrawShape(f,color);}else if(b.GetType()===exports.b2BodyType.b2_staticBody){color.SetRGB(0.5,0.9,0.5);this.DrawShape(f,color);}else if(b.GetType()===exports.b2BodyType.b2_kinematicBody){color.SetRGB(0.5,0.5,0.9);this.DrawShape(f,color);}else if(!b.IsAwake()){color.SetRGB(0.6,0.6,0.6);this.DrawShape(f,color);}else {color.SetRGB(0.9,0.7,0.7);this.DrawShape(f,color);}}this.m_debugDraw.PopTransform(xf);}}if(flags&exports.b2DrawFlags.e_particleBit){for(var p=this.m_particleSystemList;p;p=p.m_next){this.DrawParticleSystem(p);}}if(flags&exports.b2DrawFlags.e_jointBit){for(var j=this.m_jointList;j;j=j.m_next){this.DrawJoint(j);}}if(flags&exports.b2DrawFlags.e_aabbBit){color.SetRGB(0.9,0.3,0.9);var vs=b2World.DrawDebugData_s_vs;for(var _b15=this.m_bodyList;_b15;_b15=_b15.m_next){if(!_b15.IsActive()){continue;}for(var _f7=_b15.GetFixtureList();_f7;_f7=_f7.m_next){for(var i=0;i<_f7.m_proxyCount;++i){var proxy=_f7.m_proxies[i];var aabb=proxy.treeNode.aabb;vs[0].Set(aabb.lowerBound.x,aabb.lowerBound.y);vs[1].Set(aabb.upperBound.x,aabb.lowerBound.y);vs[2].Set(aabb.upperBound.x,aabb.upperBound.y);vs[3].Set(aabb.lowerBound.x,aabb.upperBound.y);this.m_debugDraw.DrawPolygon(vs,4,color);}}}}if(flags&exports.b2DrawFlags.e_centerOfMassBit){for(var _b16=this.m_bodyList;_b16;_b16=_b16.m_next){var _xf=b2World.DrawDebugData_s_xf;_xf.q.Copy(_b16.m_xf.q);_xf.p.Copy(_b16.GetWorldCenter());this.m_debugDraw.DrawTransform(_xf);}}if(flags&exports.b2DrawFlags.e_controllerBit){for(var c=this.m_controllerList;c;c=c.m_next){c.Draw(this.m_debugDraw);}}};_proto107.QueryAABB=function QueryAABB(){if((arguments.length<=0?undefined:arguments[0])instanceof b2QueryCallback){this._QueryAABB(arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1]);}else {this._QueryAABB(null,arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1]);}};_proto107._QueryAABB=function _QueryAABB(callback,aabb,fn){this.m_contactManager.m_broadPhase.Query(aabb,function(proxy){var fixture_proxy=proxy.userData;var fixture=fixture_proxy.fixture;if(callback){return callback.ReportFixture(fixture);}else if(fn){return fn(fixture);}return true;});if(callback instanceof b2QueryCallback){for(var p=this.m_particleSystemList;p;p=p.m_next){if(callback.ShouldQueryParticleSystem(p)){p.QueryAABB(callback,aabb);}}}};_proto107.QueryAllAABB=function QueryAllAABB(aabb,out){if(out===void 0){out=[];}this.QueryAABB(aabb,function(fixture){out.push(fixture);return true;});return out;};_proto107.QueryPointAABB=function QueryPointAABB(){if((arguments.length<=0?undefined:arguments[0])instanceof b2QueryCallback){this._QueryPointAABB(arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1]);}else {this._QueryPointAABB(null,arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1]);}};_proto107._QueryPointAABB=function _QueryPointAABB(callback,point,fn){this.m_contactManager.m_broadPhase.QueryPoint(point,function(proxy){var fixture_proxy=proxy.userData;var fixture=fixture_proxy.fixture;if(callback){return callback.ReportFixture(fixture);}else if(fn){return fn(fixture);}return true;});if(callback instanceof b2QueryCallback){for(var p=this.m_particleSystemList;p;p=p.m_next){if(callback.ShouldQueryParticleSystem(p)){p.QueryPointAABB(callback,point);}}}};_proto107.QueryAllPointAABB=function QueryAllPointAABB(point,out){if(out===void 0){out=[];}this.QueryPointAABB(point,function(fixture){out.push(fixture);return true;});return out;};_proto107.QueryFixtureShape=function QueryFixtureShape(){if((arguments.length<=0?undefined:arguments[0])instanceof b2QueryCallback){this._QueryFixtureShape(arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1],arguments.length<=2?undefined:arguments[2],arguments.length<=3?undefined:arguments[3]);}else {this._QueryFixtureShape(null,arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1],arguments.length<=2?undefined:arguments[2],arguments.length<=3?undefined:arguments[3]);}};_proto107._QueryFixtureShape=function _QueryFixtureShape(callback,shape,index,transform,fn){var aabb=b2World.QueryFixtureShape_s_aabb;shape.ComputeAABB(aabb,transform,index);this.m_contactManager.m_broadPhase.Query(aabb,function(proxy){var fixture_proxy=proxy.userData;var fixture=fixture_proxy.fixture;if(b2TestOverlapShape(shape,index,fixture.GetShape(),fixture_proxy.childIndex,transform,fixture.GetBody().GetTransform())){if(callback){return callback.ReportFixture(fixture);}else if(fn){return fn(fixture);}}return true;});if(callback instanceof b2QueryCallback){for(var p=this.m_particleSystemList;p;p=p.m_next){if(callback.ShouldQueryParticleSystem(p)){p.QueryAABB(callback,aabb);}}}};_proto107.QueryAllFixtureShape=function QueryAllFixtureShape(shape,index,transform,out){if(out===void 0){out=[];}this.QueryFixtureShape(shape,index,transform,function(fixture){out.push(fixture);return true;});return out;};_proto107.QueryFixturePoint=function QueryFixturePoint(){if((arguments.length<=0?undefined:arguments[0])instanceof b2QueryCallback){this._QueryFixturePoint(arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1]);}else {this._QueryFixturePoint(null,arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1]);}};_proto107._QueryFixturePoint=function _QueryFixturePoint(callback,point,fn){this.m_contactManager.m_broadPhase.QueryPoint(point,function(proxy){var fixture_proxy=proxy.userData;var fixture=fixture_proxy.fixture;if(fixture.TestPoint(point)){if(callback){return callback.ReportFixture(fixture);}else if(fn){return fn(fixture);}}return true;});if(callback){for(var p=this.m_particleSystemList;p;p=p.m_next){if(callback.ShouldQueryParticleSystem(p)){p.QueryPointAABB(callback,point);}}}};_proto107.QueryAllFixturePoint=function QueryAllFixturePoint(point,out){if(out===void 0){out=[];}this.QueryFixturePoint(point,function(fixture){out.push(fixture);return true;});return out;};_proto107.RayCast=function RayCast(){if((arguments.length<=0?undefined:arguments[0])instanceof b2RayCastCallback){this._RayCast(arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1],arguments.length<=2?undefined:arguments[2]);}else {this._RayCast(null,arguments.length<=0?undefined:arguments[0],arguments.length<=1?undefined:arguments[1],arguments.length<=2?undefined:arguments[2]);}};_proto107._RayCast=function _RayCast(callback,point1,point2,fn){var input=b2World.RayCast_s_input;input.maxFraction=1;input.p1.Copy(point1);input.p2.Copy(point2);this.m_contactManager.m_broadPhase.RayCast(input,function(input,proxy){var fixture_proxy=proxy.userData;var fixture=fixture_proxy.fixture;var index=fixture_proxy.childIndex;var output=b2World.RayCast_s_output;var hit=fixture.RayCast(output,input,index);if(hit){var fraction=output.fraction;var point=b2World.RayCast_s_point;point.Set((1-fraction)*point1.x+fraction*point2.x,(1-fraction)*point1.y+fraction*point2.y);if(callback){return callback.ReportFixture(fixture,point,output.normal,fraction);}else if(fn){return fn(fixture,point,output.normal,fraction);}}return input.maxFraction;});if(callback){for(var p=this.m_particleSystemList;p;p=p.m_next){if(callback.ShouldQueryParticleSystem(p)){p.RayCast(callback,point1,point2);}}}};_proto107.RayCastOne=function RayCastOne(point1,point2){var result=null;var min_fraction=1;this.RayCast(point1,point2,function(fixture,point,normal,fraction){if(fraction<min_fraction){min_fraction=fraction;result=fixture;}return min_fraction;});return result;};_proto107.RayCastAll=function RayCastAll(point1,point2,out){if(out===void 0){out=[];}this.RayCast(point1,point2,function(fixture,point,normal,fraction){out.push(fixture);return 1;});return out;};_proto107.GetBodyList=function GetBodyList(){return this.m_bodyList;};_proto107.GetJointList=function GetJointList(){return this.m_jointList;};_proto107.GetParticleSystemList=function GetParticleSystemList(){return this.m_particleSystemList;};_proto107.GetContactList=function GetContactList(){return this.m_contactManager.m_contactList;};_proto107.SetAllowSleeping=function SetAllowSleeping(flag){if(flag===this.m_allowSleep){return;}this.m_allowSleep=flag;if(!this.m_allowSleep){for(var b=this.m_bodyList;b;b=b.m_next){b.SetAwake(true);}}};_proto107.GetAllowSleeping=function GetAllowSleeping(){return this.m_allowSleep;};_proto107.SetWarmStarting=function SetWarmStarting(flag){this.m_warmStarting=flag;};_proto107.GetWarmStarting=function GetWarmStarting(){return this.m_warmStarting;};_proto107.SetContinuousPhysics=function SetContinuousPhysics(flag){this.m_continuousPhysics=flag;};_proto107.GetContinuousPhysics=function GetContinuousPhysics(){return this.m_continuousPhysics;};_proto107.SetSubStepping=function SetSubStepping(flag){this.m_subStepping=flag;};_proto107.GetSubStepping=function GetSubStepping(){return this.m_subStepping;};_proto107.GetProxyCount=function GetProxyCount(){return this.m_contactManager.m_broadPhase.GetProxyCount();};_proto107.GetBodyCount=function GetBodyCount(){return this.m_bodyCount;};_proto107.GetJointCount=function GetJointCount(){return this.m_jointCount;};_proto107.GetContactCount=function GetContactCount(){return this.m_contactManager.m_contactCount;};_proto107.GetTreeHeight=function GetTreeHeight(){return this.m_contactManager.m_broadPhase.GetTreeHeight();};_proto107.GetTreeBalance=function GetTreeBalance(){return this.m_contactManager.m_broadPhase.GetTreeBalance();};_proto107.GetTreeQuality=function GetTreeQuality(){return this.m_contactManager.m_broadPhase.GetTreeQuality();};_proto107.SetGravity=function SetGravity(gravity,wake){if(wake===void 0){wake=true;}if(!b2Vec2.IsEqualToV(this.m_gravity,gravity)){this.m_gravity.Copy(gravity);if(wake){for(var b=this.m_bodyList;b;b=b.m_next){b.SetAwake(true);}}}};_proto107.GetGravity=function GetGravity(){return this.m_gravity;};_proto107.IsLocked=function IsLocked(){return this.m_locked;};_proto107.SetAutoClearForces=function SetAutoClearForces(flag){this.m_clearForces=flag;};_proto107.GetAutoClearForces=function GetAutoClearForces(){return this.m_clearForces;};_proto107.ShiftOrigin=function ShiftOrigin(newOrigin){if(this.IsLocked()){throw new Error();}for(var b=this.m_bodyList;b;b=b.m_next){b.m_xf.p.SelfSub(newOrigin);b.m_sweep.c0.SelfSub(newOrigin);b.m_sweep.c.SelfSub(newOrigin);}for(var j=this.m_jointList;j;j=j.m_next){j.ShiftOrigin(newOrigin);}this.m_contactManager.m_broadPhase.ShiftOrigin(newOrigin);};_proto107.GetContactManager=function GetContactManager(){return this.m_contactManager;};_proto107.GetProfile=function GetProfile(){return this.m_profile;};_proto107.Dump=function Dump(log){if(this.m_locked){return;}log("const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\n",this.m_gravity.x,this.m_gravity.y);log("this.m_world.SetGravity(g);\n");log("const bodies: b2Body[] = [];\n");log("const joints: b2Joint[] = [];\n");var i=0;for(var b=this.m_bodyList;b;b=b.m_next){b.m_islandIndex=i;b.Dump(log);++i;}i=0;for(var j=this.m_jointList;j;j=j.m_next){j.m_index=i;++i;}for(var _j5=this.m_jointList;_j5;_j5=_j5.m_next){if(_j5.m_type===exports.b2JointType.e_gearJoint){continue;}log("{\n");_j5.Dump(log);log("}\n");}for(var _j6=this.m_jointList;_j6;_j6=_j6.m_next){if(_j6.m_type!==exports.b2JointType.e_gearJoint){continue;}log("{\n");_j6.Dump(log);log("}\n");}};_proto107.DrawJoint=function DrawJoint(joint){if(this.m_debugDraw===null){return;}var bodyA=joint.GetBodyA();var bodyB=joint.GetBodyB();var xf1=bodyA.m_xf;var xf2=bodyB.m_xf;var x1=xf1.p;var x2=xf2.p;var p1=joint.GetAnchorA(b2World.DrawJoint_s_p1);var p2=joint.GetAnchorB(b2World.DrawJoint_s_p2);var color=b2World.DrawJoint_s_color.SetRGB(0.5,0.8,0.8);switch(joint.m_type){case exports.b2JointType.e_distanceJoint:this.m_debugDraw.DrawSegment(p1,p2,color);break;case exports.b2JointType.e_pulleyJoint:{var pulley=joint;var s1=pulley.GetGroundAnchorA();var s2=pulley.GetGroundAnchorB();this.m_debugDraw.DrawSegment(s1,p1,color);this.m_debugDraw.DrawSegment(s2,p2,color);this.m_debugDraw.DrawSegment(s1,s2,color);break;}case exports.b2JointType.e_mouseJoint:{var c=b2World.DrawJoint_s_c;c.Set(0.0,1.0,0.0);this.m_debugDraw.DrawPoint(p1,4.0,c);this.m_debugDraw.DrawPoint(p2,4.0,c);c.Set(0.8,0.8,0.8);this.m_debugDraw.DrawSegment(p1,p2,c);break;}default:this.m_debugDraw.DrawSegment(x1,p1,color);this.m_debugDraw.DrawSegment(p1,p2,color);this.m_debugDraw.DrawSegment(x2,p2,color);}};_proto107.DrawShape=function DrawShape(fixture,color){if(this.m_debugDraw===null){return;}var shape=fixture.GetShape();switch(shape.m_type){case exports.b2ShapeType.e_circleShape:{var circle=shape;var center=circle.m_p;var radius=circle.m_radius;var axis=b2Vec2.UNITX;this.m_debugDraw.DrawSolidCircle(center,radius,axis,color);break;}case exports.b2ShapeType.e_edgeShape:{var edge=shape;var v1=edge.m_vertex1;var v2=edge.m_vertex2;this.m_debugDraw.DrawSegment(v1,v2,color);break;}case exports.b2ShapeType.e_chainShape:{var chain=shape;var count=chain.m_count;var vertices=chain.m_vertices;var ghostColor=b2World.DrawShape_s_ghostColor.SetRGBA(0.75*color.r,0.75*color.g,0.75*color.b,color.a);var _v7=vertices[0];this.m_debugDraw.DrawPoint(_v7,4.0,color);if(chain.m_hasPrevVertex){var vp=chain.m_prevVertex;this.m_debugDraw.DrawSegment(vp,_v7,ghostColor);this.m_debugDraw.DrawCircle(vp,0.1,ghostColor);}for(var i=1;i<count;++i){var _v8=vertices[i];this.m_debugDraw.DrawSegment(_v7,_v8,color);this.m_debugDraw.DrawPoint(_v8,4.0,color);_v7=_v8;}if(chain.m_hasNextVertex){var vn=chain.m_nextVertex;this.m_debugDraw.DrawSegment(vn,_v7,ghostColor);this.m_debugDraw.DrawCircle(vn,0.1,ghostColor);}break;}case exports.b2ShapeType.e_polygonShape:{var poly=shape;var vertexCount=poly.m_count;var _vertices4=poly.m_vertices;this.m_debugDraw.DrawSolidPolygon(_vertices4,vertexCount,color);break;}}};_proto107.Solve=function Solve(step){for(var b=this.m_bodyList;b;b=b.m_next){b.m_xf0.Copy(b.m_xf);}for(var controller=this.m_controllerList;controller;controller=controller.m_next){controller.Step(step);}this.m_profile.solveInit=0;this.m_profile.solveVelocity=0;this.m_profile.solvePosition=0;var island=this.m_island;island.Initialize(this.m_bodyCount,this.m_contactManager.m_contactCount,this.m_jointCount,this.m_contactManager.m_contactListener);for(var _b17=this.m_bodyList;_b17;_b17=_b17.m_next){_b17.m_islandFlag=false;}for(var c=this.m_contactManager.m_contactList;c;c=c.m_next){c.m_islandFlag=false;}for(var j=this.m_jointList;j;j=j.m_next){j.m_islandFlag=false;}var stack=this.s_stack;for(var seed=this.m_bodyList;seed;seed=seed.m_next){if(seed.m_islandFlag){continue;}if(!seed.IsAwake()||!seed.IsActive()){continue;}if(seed.GetType()===exports.b2BodyType.b2_staticBody){continue;}island.Clear();var stackCount=0;stack[stackCount++]=seed;seed.m_islandFlag=true;while(stackCount>0){var _b18=stack[--stackCount];if(!_b18){throw new Error();}island.AddBody(_b18);_b18.m_awakeFlag=true;if(_b18.GetType()===exports.b2BodyType.b2_staticBody){continue;}for(var ce=_b18.m_contactList;ce;ce=ce.next){var contact=ce.contact;if(contact.m_islandFlag){continue;}if(!contact.IsEnabled()||!contact.IsTouching()){continue;}var sensorA=contact.m_fixtureA.m_isSensor;var sensorB=contact.m_fixtureB.m_isSensor;if(sensorA||sensorB){continue;}island.AddContact(contact);contact.m_islandFlag=true;var other=ce.other;if(other.m_islandFlag){continue;}stack[stackCount++]=other;other.m_islandFlag=true;}for(var je=_b18.m_jointList;je;je=je.next){if(je.joint.m_islandFlag){continue;}var _other=je.other;if(!_other.IsActive()){continue;}island.AddJoint(je.joint);je.joint.m_islandFlag=true;if(_other.m_islandFlag){continue;}stack[stackCount++]=_other;_other.m_islandFlag=true;}}var profile=new b2Profile();island.Solve(profile,step,this.m_gravity,this.m_allowSleep);this.m_profile.solveInit+=profile.solveInit;this.m_profile.solveVelocity+=profile.solveVelocity;this.m_profile.solvePosition+=profile.solvePosition;for(var i=0;i<island.m_bodyCount;++i){var _b19=island.m_bodies[i];if(_b19.GetType()===exports.b2BodyType.b2_staticBody){_b19.m_islandFlag=false;}}}for(var _i41=0;_i41<stack.length;++_i41){if(!stack[_i41]){break;}stack[_i41]=null;}var timer=new b2Timer();for(var _b20=this.m_bodyList;_b20;_b20=_b20.m_next){if(!_b20.m_islandFlag){continue;}if(_b20.GetType()===exports.b2BodyType.b2_staticBody){continue;}_b20.SynchronizeFixtures();}this.m_contactManager.FindNewContacts();this.m_profile.broadphase=timer.GetMilliseconds();};_proto107.SolveTOI=function SolveTOI(step){var island=this.m_island;island.Initialize(2*b2_maxTOIContacts,b2_maxTOIContacts,0,this.m_contactManager.m_contactListener);if(this.m_stepComplete){for(var b=this.m_bodyList;b;b=b.m_next){b.m_islandFlag=false;b.m_sweep.alpha0=0;}for(var c=this.m_contactManager.m_contactList;c;c=c.m_next){c.m_toiFlag=false;c.m_islandFlag=false;c.m_toiCount=0;c.m_toi=1;}}for(;;){var minContact=null;var minAlpha=1;for(var _c=this.m_contactManager.m_contactList;_c;_c=_c.m_next){if(!_c.IsEnabled()){continue;}if(_c.m_toiCount>b2_maxSubSteps){continue;}var alpha=1;if(_c.m_toiFlag){alpha=_c.m_toi;}else {var _fA=_c.GetFixtureA();var _fB=_c.GetFixtureB();if(_fA.IsSensor()||_fB.IsSensor()){continue;}var _bA=_fA.GetBody();var _bB=_fB.GetBody();var typeA=_bA.m_type;var typeB=_bB.m_type;var activeA=_bA.IsAwake()&&typeA!==exports.b2BodyType.b2_staticBody;var activeB=_bB.IsAwake()&&typeB!==exports.b2BodyType.b2_staticBody;if(!activeA&&!activeB){continue;}var collideA=_bA.IsBullet()||typeA!==exports.b2BodyType.b2_dynamicBody;var collideB=_bB.IsBullet()||typeB!==exports.b2BodyType.b2_dynamicBody;if(!collideA&&!collideB){continue;}var alpha0=_bA.m_sweep.alpha0;if(_bA.m_sweep.alpha0<_bB.m_sweep.alpha0){alpha0=_bB.m_sweep.alpha0;_bA.m_sweep.Advance(alpha0);}else if(_bB.m_sweep.alpha0<_bA.m_sweep.alpha0){alpha0=_bA.m_sweep.alpha0;_bB.m_sweep.Advance(alpha0);}var indexA=_c.GetChildIndexA();var indexB=_c.GetChildIndexB();var input=b2World.SolveTOI_s_toi_input;input.proxyA.SetShape(_fA.GetShape(),indexA);input.proxyB.SetShape(_fB.GetShape(),indexB);input.sweepA.Copy(_bA.m_sweep);input.sweepB.Copy(_bB.m_sweep);input.tMax=1;var output=b2World.SolveTOI_s_toi_output;b2TimeOfImpact(output,input);var beta=output.t;if(output.state===exports.b2TOIOutputState.e_touching){alpha=b2Min(alpha0+(1-alpha0)*beta,1);}else {alpha=1;}_c.m_toi=alpha;_c.m_toiFlag=true;}if(alpha<minAlpha){minContact=_c;minAlpha=alpha;}}if(minContact===null||1-10*b2_epsilon<minAlpha){this.m_stepComplete=true;break;}var fA=minContact.GetFixtureA();var fB=minContact.GetFixtureB();var bA=fA.GetBody();var bB=fB.GetBody();var backup1=b2World.SolveTOI_s_backup1.Copy(bA.m_sweep);var backup2=b2World.SolveTOI_s_backup2.Copy(bB.m_sweep);bA.Advance(minAlpha);bB.Advance(minAlpha);minContact.Update(this.m_contactManager.m_contactListener);minContact.m_toiFlag=false;++minContact.m_toiCount;if(!minContact.IsEnabled()||!minContact.IsTouching()){minContact.SetEnabled(false);bA.m_sweep.Copy(backup1);bB.m_sweep.Copy(backup2);bA.SynchronizeTransform();bB.SynchronizeTransform();continue;}bA.SetAwake(true);bB.SetAwake(true);island.Clear();island.AddBody(bA);island.AddBody(bB);island.AddContact(minContact);bA.m_islandFlag=true;bB.m_islandFlag=true;minContact.m_islandFlag=true;for(var i=0;i<2;++i){var body=i===0?bA:bB;if(body.m_type===exports.b2BodyType.b2_dynamicBody){for(var ce=body.m_contactList;ce;ce=ce.next){if(island.m_bodyCount===island.m_bodyCapacity){break;}if(island.m_contactCount===island.m_contactCapacity){break;}var contact=ce.contact;if(contact.m_islandFlag){continue;}var other=ce.other;if(other.m_type===exports.b2BodyType.b2_dynamicBody&&!body.IsBullet()&&!other.IsBullet()){continue;}var sensorA=contact.m_fixtureA.m_isSensor;var sensorB=contact.m_fixtureB.m_isSensor;if(sensorA||sensorB){continue;}var backup=b2World.SolveTOI_s_backup.Copy(other.m_sweep);if(!other.m_islandFlag){other.Advance(minAlpha);}contact.Update(this.m_contactManager.m_contactListener);if(!contact.IsEnabled()){other.m_sweep.Copy(backup);other.SynchronizeTransform();continue;}if(!contact.IsTouching()){other.m_sweep.Copy(backup);other.SynchronizeTransform();continue;}contact.m_islandFlag=true;island.AddContact(contact);if(other.m_islandFlag){continue;}other.m_islandFlag=true;if(other.m_type!==exports.b2BodyType.b2_staticBody){other.SetAwake(true);}island.AddBody(other);}}}var subStep=b2World.SolveTOI_s_subStep;subStep.dt=(1-minAlpha)*step.dt;subStep.inv_dt=1/subStep.dt;subStep.dtRatio=1;subStep.positionIterations=20;subStep.velocityIterations=step.velocityIterations;subStep.particleIterations=step.particleIterations;subStep.warmStarting=false;island.SolveTOI(subStep,bA.m_islandIndex,bB.m_islandIndex);for(var _i42=0;_i42<island.m_bodyCount;++_i42){var _body3=island.m_bodies[_i42];_body3.m_islandFlag=false;if(_body3.m_type!==exports.b2BodyType.b2_dynamicBody){continue;}_body3.SynchronizeFixtures();for(var _ce=_body3.m_contactList;_ce;_ce=_ce.next){_ce.contact.m_toiFlag=false;_ce.contact.m_islandFlag=false;}}this.m_contactManager.FindNewContacts();if(this.m_subStepping){this.m_stepComplete=false;break;}}};_proto107.AddController=function AddController(controller){controller.m_next=this.m_controllerList;controller.m_prev=null;if(this.m_controllerList){this.m_controllerList.m_prev=controller;}this.m_controllerList=controller;++this.m_controllerCount;return controller;};_proto107.RemoveController=function RemoveController(controller){if(controller.m_prev){controller.m_prev.m_next=controller.m_next;}if(controller.m_next){controller.m_next.m_prev=controller.m_prev;}if(this.m_controllerList===controller){this.m_controllerList=controller.m_next;}--this.m_controllerCount;controller.m_prev=null;controller.m_next=null;return controller;};return b2World;}();b2World.Step_s_step=new b2TimeStep();b2World.Step_s_stepTimer=new b2Timer();b2World.Step_s_timer=new b2Timer();b2World.DrawDebugData_s_color=new b2Color(0,0,0);b2World.DrawDebugData_s_vs=b2Vec2.MakeArray(4);b2World.DrawDebugData_s_xf=new b2Transform();b2World.QueryFixtureShape_s_aabb=new b2AABB();b2World.RayCast_s_input=new b2RayCastInput();b2World.RayCast_s_output=new b2RayCastOutput();b2World.RayCast_s_point=new b2Vec2();b2World.DrawJoint_s_p1=new b2Vec2();b2World.DrawJoint_s_p2=new b2Vec2();b2World.DrawJoint_s_color=new b2Color(0.5,0.8,0.8);b2World.DrawJoint_s_c=new b2Color();b2World.DrawShape_s_ghostColor=new b2Color();b2World.SolveTOI_s_subStep=new b2TimeStep();b2World.SolveTOI_s_backup=new b2Sweep();b2World.SolveTOI_s_backup1=new b2Sweep();b2World.SolveTOI_s_backup2=new b2Sweep();b2World.SolveTOI_s_toi_input=new b2TOIInput();b2World.SolveTOI_s_toi_output=new b2TOIOutput();var b2ControllerEdge=function b2ControllerEdge(controller,body){this.prevBody=null;this.nextBody=null;this.prevController=null;this.nextController=null;this.controller=controller;this.body=body;};var b2Controller=function(){function b2Controller(){this.m_bodyList=null;this.m_bodyCount=0;this.m_prev=null;this.m_next=null;}var _proto108=b2Controller.prototype;_proto108.GetNext=function GetNext(){return this.m_next;};_proto108.GetPrev=function GetPrev(){return this.m_prev;};_proto108.GetBodyList=function GetBodyList(){return this.m_bodyList;};_proto108.AddBody=function AddBody(body){var edge=new b2ControllerEdge(this,body);edge.nextBody=this.m_bodyList;edge.prevBody=null;if(this.m_bodyList){this.m_bodyList.prevBody=edge;}this.m_bodyList=edge;++this.m_bodyCount;edge.nextController=body.m_controllerList;edge.prevController=null;if(body.m_controllerList){body.m_controllerList.prevController=edge;}body.m_controllerList=edge;++body.m_controllerCount;};_proto108.RemoveBody=function RemoveBody(body){if(this.m_bodyCount<=0){throw new Error();}var edge=this.m_bodyList;while(edge&&edge.body!==body){edge=edge.nextBody;}if(edge===null){throw new Error();}if(edge.prevBody){edge.prevBody.nextBody=edge.nextBody;}if(edge.nextBody){edge.nextBody.prevBody=edge.prevBody;}if(this.m_bodyList===edge){this.m_bodyList=edge.nextBody;}--this.m_bodyCount;if(edge.nextController){edge.nextController.prevController=edge.prevController;}if(edge.prevController){edge.prevController.nextController=edge.nextController;}if(body.m_controllerList===edge){body.m_controllerList=edge.nextController;}--body.m_controllerCount;};_proto108.Clear=function Clear(){while(this.m_bodyList){this.RemoveBody(this.m_bodyList.body);}this.m_bodyCount=0;};return b2Controller;}();var b2BuoyancyController=function(_b2Controller){_inheritsLoose(b2BuoyancyController,_b2Controller);function b2BuoyancyController(){var _this38;_this38=_b2Controller.apply(this,arguments)||this;_this38.normal=new b2Vec2(0,1);_this38.offset=0;_this38.density=0;_this38.velocity=new b2Vec2(0,0);_this38.linearDrag=0;_this38.angularDrag=0;_this38.useDensity=false;_this38.useWorldGravity=true;_this38.gravity=new b2Vec2(0,0);return _this38;}var _proto109=b2BuoyancyController.prototype;_proto109.Step=function Step(step){if(!this.m_bodyList){return;}if(this.useWorldGravity){this.gravity.Copy(this.m_bodyList.body.GetWorld().GetGravity());}for(var i=this.m_bodyList;i;i=i.nextBody){var body=i.body;if(!body.IsAwake()){continue;}var areac=new b2Vec2();var massc=new b2Vec2();var area=0;var mass=0;for(var fixture=body.GetFixtureList();fixture;fixture=fixture.m_next){var sc=new b2Vec2();var sarea=fixture.GetShape().ComputeSubmergedArea(this.normal,this.offset,body.GetTransform(),sc);area+=sarea;areac.x+=sarea*sc.x;areac.y+=sarea*sc.y;var shapeDensity=0;if(this.useDensity){shapeDensity=fixture.GetDensity();}else {shapeDensity=1;}mass+=sarea*shapeDensity;massc.x+=sarea*sc.x*shapeDensity;massc.y+=sarea*sc.y*shapeDensity;}areac.x/=area;areac.y/=area;massc.x/=mass;massc.y/=mass;if(area<b2_epsilon){continue;}var buoyancyForce=this.gravity.Clone().SelfNeg();buoyancyForce.SelfMul(this.density*area);body.ApplyForce(buoyancyForce,massc);var dragForce=body.GetLinearVelocityFromWorldPoint(areac,new b2Vec2());dragForce.SelfSub(this.velocity);dragForce.SelfMul(-this.linearDrag*area);body.ApplyForce(dragForce,areac);body.ApplyTorque(-body.GetInertia()/body.GetMass()*area*body.GetAngularVelocity()*this.angularDrag);}};_proto109.Draw=function Draw(debugDraw){var r=100;var p1=new b2Vec2();var p2=new b2Vec2();p1.x=this.normal.x*this.offset+this.normal.y*r;p1.y=this.normal.y*this.offset-this.normal.x*r;p2.x=this.normal.x*this.offset-this.normal.y*r;p2.y=this.normal.y*this.offset+this.normal.x*r;var color=new b2Color(0,0,0.8);debugDraw.DrawSegment(p1,p2,color);};return b2BuoyancyController;}(b2Controller);var b2ConstantAccelController=function(_b2Controller2){_inheritsLoose(b2ConstantAccelController,_b2Controller2);function b2ConstantAccelController(){var _this39;_this39=_b2Controller2.apply(this,arguments)||this;_this39.A=new b2Vec2(0,0);return _this39;}var _proto110=b2ConstantAccelController.prototype;_proto110.Step=function Step(step){var dtA=b2Vec2.MulSV(step.dt,this.A,b2ConstantAccelController.Step_s_dtA);for(var i=this.m_bodyList;i;i=i.nextBody){var body=i.body;if(!body.IsAwake()){continue;}body.SetLinearVelocity(b2Vec2.AddVV(body.GetLinearVelocity(),dtA,b2Vec2.s_t0));}};_proto110.Draw=function Draw(draw){};return b2ConstantAccelController;}(b2Controller);b2ConstantAccelController.Step_s_dtA=new b2Vec2();var b2ConstantForceController=function(_b2Controller3){_inheritsLoose(b2ConstantForceController,_b2Controller3);function b2ConstantForceController(){var _this40;_this40=_b2Controller3.apply(this,arguments)||this;_this40.F=new b2Vec2(0,0);return _this40;}var _proto111=b2ConstantForceController.prototype;_proto111.Step=function Step(step){for(var i=this.m_bodyList;i;i=i.nextBody){var body=i.body;if(!body.IsAwake()){continue;}body.ApplyForce(this.F,body.GetWorldCenter());}};_proto111.Draw=function Draw(draw){};return b2ConstantForceController;}(b2Controller);var b2GravityController=function(_b2Controller4){_inheritsLoose(b2GravityController,_b2Controller4);function b2GravityController(){var _this41;_this41=_b2Controller4.apply(this,arguments)||this;_this41.G=1;_this41.invSqr=true;return _this41;}var _proto112=b2GravityController.prototype;_proto112.Step=function Step(step){if(this.invSqr){for(var i=this.m_bodyList;i;i=i.nextBody){var body1=i.body;var p1=body1.GetWorldCenter();var mass1=body1.GetMass();for(var j=this.m_bodyList;j&&j!==i;j=j.nextBody){var body2=j.body;var p2=body2.GetWorldCenter();var mass2=body2.GetMass();var dx=p2.x-p1.x;var dy=p2.y-p1.y;var r2=dx*dx+dy*dy;if(r2<b2_epsilon){continue;}var f=b2GravityController.Step_s_f.Set(dx,dy);f.SelfMul(this.G/r2/b2Sqrt(r2)*mass1*mass2);if(body1.IsAwake()){body1.ApplyForce(f,p1);}if(body2.IsAwake()){body2.ApplyForce(f.SelfMul(-1),p2);}}}}else {for(var _i43=this.m_bodyList;_i43;_i43=_i43.nextBody){var _body4=_i43.body;var _p2=_body4.GetWorldCenter();var _mass2=_body4.GetMass();for(var _j7=this.m_bodyList;_j7&&_j7!==_i43;_j7=_j7.nextBody){var _body5=_j7.body;var _p3=_body5.GetWorldCenter();var _mass3=_body5.GetMass();var _dx=_p3.x-_p2.x;var _dy=_p3.y-_p2.y;var _r=_dx*_dx+_dy*_dy;if(_r<b2_epsilon){continue;}var _f8=b2GravityController.Step_s_f.Set(_dx,_dy);_f8.SelfMul(this.G/_r*_mass2*_mass3);if(_body4.IsAwake()){_body4.ApplyForce(_f8,_p2);}if(_body5.IsAwake()){_body5.ApplyForce(_f8.SelfMul(-1),_p3);}}}}};_proto112.Draw=function Draw(draw){};return b2GravityController;}(b2Controller);b2GravityController.Step_s_f=new b2Vec2();var b2TensorDampingController=function(_b2Controller5){_inheritsLoose(b2TensorDampingController,_b2Controller5);function b2TensorDampingController(){var _this42;_this42=_b2Controller5.apply(this,arguments)||this;_this42.T=new b2Mat22();_this42.maxTimestep=0;return _this42;}var _proto113=b2TensorDampingController.prototype;_proto113.Step=function Step(step){var timestep=step.dt;if(timestep<=b2_epsilon){return;}if(timestep>this.maxTimestep&&this.maxTimestep>0){timestep=this.maxTimestep;}for(var i=this.m_bodyList;i;i=i.nextBody){var body=i.body;if(!body.IsAwake()){continue;}var damping=body.GetWorldVector(b2Mat22.MulMV(this.T,body.GetLocalVector(body.GetLinearVelocity(),b2Vec2.s_t0),b2Vec2.s_t1),b2TensorDampingController.Step_s_damping);body.SetLinearVelocity(b2Vec2.AddVV(body.GetLinearVelocity(),b2Vec2.MulSV(timestep,damping,b2Vec2.s_t0),b2Vec2.s_t1));}};_proto113.Draw=function Draw(draw){};_proto113.SetAxisAligned=function SetAxisAligned(xDamping,yDamping){this.T.ex.x=-xDamping;this.T.ex.y=0;this.T.ey.x=0;this.T.ey.y=-yDamping;if(xDamping>0||yDamping>0){this.maxTimestep=1/b2Max(xDamping,yDamping);}else {this.maxTimestep=0;}};return b2TensorDampingController;}(b2Controller);b2TensorDampingController.Step_s_damping=new b2Vec2();var b2RopeDef=function b2RopeDef(){this.vertices=[];this.count=0;this.masses=[];this.gravity=new b2Vec2(0,0);this.damping=0.1;this.k2=0.9;this.k3=0.1;};var b2Rope=function(){function b2Rope(){this.m_count=0;this.m_ps=[];this.m_p0s=[];this.m_vs=[];this.m_ims=[];this.m_Ls=[];this.m_as=[];this.m_gravity=new b2Vec2();this.m_damping=0;this.m_k2=1;this.m_k3=0.1;}var _proto114=b2Rope.prototype;_proto114.GetVertexCount=function GetVertexCount(){return this.m_count;};_proto114.GetVertices=function GetVertices(){return this.m_ps;};_proto114.Initialize=function Initialize(def){this.m_count=def.count;this.m_ps=b2Vec2.MakeArray(this.m_count);this.m_p0s=b2Vec2.MakeArray(this.m_count);this.m_vs=b2Vec2.MakeArray(this.m_count);this.m_ims=b2MakeNumberArray(this.m_count);for(var i=0;i<this.m_count;++i){this.m_ps[i].Copy(def.vertices[i]);this.m_p0s[i].Copy(def.vertices[i]);this.m_vs[i].SetZero();var m=def.masses[i];if(m>0){this.m_ims[i]=1/m;}else {this.m_ims[i]=0;}}var count2=this.m_count-1;var count3=this.m_count-2;this.m_Ls=b2MakeNumberArray(count2);this.m_as=b2MakeNumberArray(count3);for(var _i44=0;_i44<count2;++_i44){var p1=this.m_ps[_i44];var p2=this.m_ps[_i44+1];this.m_Ls[_i44]=b2Vec2.DistanceVV(p1,p2);}for(var _i45=0;_i45<count3;++_i45){var _p4=this.m_ps[_i45];var _p5=this.m_ps[_i45+1];var p3=this.m_ps[_i45+2];var d1=b2Vec2.SubVV(_p5,_p4,b2Vec2.s_t0);var d2=b2Vec2.SubVV(p3,_p5,b2Vec2.s_t1);var a=b2Vec2.CrossVV(d1,d2);var b=b2Vec2.DotVV(d1,d2);this.m_as[_i45]=b2Atan2(a,b);}this.m_gravity.Copy(def.gravity);this.m_damping=def.damping;this.m_k2=def.k2;this.m_k3=def.k3;};_proto114.Step=function Step(h,iterations){if(h===0){return;}var d=Math.exp(-h*this.m_damping);for(var i=0;i<this.m_count;++i){this.m_p0s[i].Copy(this.m_ps[i]);if(this.m_ims[i]>0){this.m_vs[i].SelfMulAdd(h,this.m_gravity);}this.m_vs[i].SelfMul(d);this.m_ps[i].SelfMulAdd(h,this.m_vs[i]);}for(var _i46=0;_i46<iterations;++_i46){this.SolveC2();this.SolveC3();this.SolveC2();}var inv_h=1/h;for(var _i47=0;_i47<this.m_count;++_i47){b2Vec2.MulSV(inv_h,b2Vec2.SubVV(this.m_ps[_i47],this.m_p0s[_i47],b2Vec2.s_t0),this.m_vs[_i47]);}};_proto114.SolveC2=function SolveC2(){var count2=this.m_count-1;for(var i=0;i<count2;++i){var p1=this.m_ps[i];var p2=this.m_ps[i+1];var d=b2Vec2.SubVV(p2,p1,b2Rope.s_d);var L=d.Normalize();var im1=this.m_ims[i];var im2=this.m_ims[i+1];if(im1+im2===0){continue;}var s1=im1/(im1+im2);var s2=im2/(im1+im2);p1.SelfMulSub(this.m_k2*s1*(this.m_Ls[i]-L),d);p2.SelfMulAdd(this.m_k2*s2*(this.m_Ls[i]-L),d);}};_proto114.SetAngle=function SetAngle(angle){var count3=this.m_count-2;for(var i=0;i<count3;++i){this.m_as[i]=angle;}};_proto114.SolveC3=function SolveC3(){var count3=this.m_count-2;for(var i=0;i<count3;++i){var p1=this.m_ps[i];var p2=this.m_ps[i+1];var p3=this.m_ps[i+2];var m1=this.m_ims[i];var m2=this.m_ims[i+1];var m3=this.m_ims[i+2];var d1=b2Vec2.SubVV(p2,p1,b2Rope.s_d1);var d2=b2Vec2.SubVV(p3,p2,b2Rope.s_d2);var L1sqr=d1.LengthSquared();var L2sqr=d2.LengthSquared();if(L1sqr*L2sqr===0){continue;}var a=b2Vec2.CrossVV(d1,d2);var b=b2Vec2.DotVV(d1,d2);var angle=b2Atan2(a,b);var Jd1=b2Vec2.MulSV(-1/L1sqr,d1.SelfSkew(),b2Rope.s_Jd1);var Jd2=b2Vec2.MulSV(1/L2sqr,d2.SelfSkew(),b2Rope.s_Jd2);var J1=b2Vec2.NegV(Jd1,b2Rope.s_J1);var J2=b2Vec2.SubVV(Jd1,Jd2,b2Rope.s_J2);var J3=Jd2;var mass=m1*b2Vec2.DotVV(J1,J1)+m2*b2Vec2.DotVV(J2,J2)+m3*b2Vec2.DotVV(J3,J3);if(mass===0){continue;}mass=1/mass;var C=angle-this.m_as[i];while(C>b2_pi){angle-=2*b2_pi;C=angle-this.m_as[i];}while(C<-b2_pi){angle+=2*b2_pi;C=angle-this.m_as[i];}var impulse=-this.m_k3*mass*C;p1.SelfMulAdd(m1*impulse,J1);p2.SelfMulAdd(m2*impulse,J2);p3.SelfMulAdd(m3*impulse,J3);}};_proto114.Draw=function Draw(draw){var c=new b2Color(0.4,0.5,0.7);for(var i=0;i<this.m_count-1;++i){draw.DrawSegment(this.m_ps[i],this.m_ps[i+1],c);}};return b2Rope;}();b2Rope.s_d=new b2Vec2();b2Rope.s_d1=new b2Vec2();b2Rope.s_d2=new b2Vec2();b2Rope.s_Jd1=new b2Vec2();b2Rope.s_Jd2=new b2Vec2();b2Rope.s_J1=new b2Vec2();b2Rope.s_J2=new b2Vec2();exports.b2AABB=b2AABB;exports.b2Abs=b2Abs;exports.b2Acos=b2Acos;exports.b2Alloc=b2Alloc;exports.b2AreaJoint=b2AreaJoint;exports.b2AreaJointDef=b2AreaJointDef;exports.b2Asin=b2Asin;exports.b2Assert=b2Assert;exports.b2Atan2=b2Atan2;exports.b2BlockAllocator=b2BlockAllocator;exports.b2Body=b2Body;exports.b2BodyDef=b2BodyDef;exports.b2BroadPhase=b2BroadPhase;exports.b2BuoyancyController=b2BuoyancyController;exports.b2CalculateParticleIterations=b2CalculateParticleIterations;exports.b2ChainAndCircleContact=b2ChainAndCircleContact;exports.b2ChainAndPolygonContact=b2ChainAndPolygonContact;exports.b2ChainShape=b2ChainShape;exports.b2CircleContact=b2CircleContact;exports.b2CircleShape=b2CircleShape;exports.b2Clamp=b2Clamp;exports.b2ClipSegmentToLine=b2ClipSegmentToLine;exports.b2ClipVertex=b2ClipVertex;exports.b2CollideCircles=b2CollideCircles;exports.b2CollideEdgeAndCircle=b2CollideEdgeAndCircle;exports.b2CollideEdgeAndPolygon=b2CollideEdgeAndPolygon;exports.b2CollidePolygonAndCircle=b2CollidePolygonAndCircle;exports.b2CollidePolygons=b2CollidePolygons;exports.b2Color=b2Color;exports.b2ConstantAccelController=b2ConstantAccelController;exports.b2ConstantForceController=b2ConstantForceController;exports.b2Contact=b2Contact;exports.b2ContactEdge=b2ContactEdge;exports.b2ContactFactory=b2ContactFactory;exports.b2ContactFeature=b2ContactFeature;exports.b2ContactFilter=b2ContactFilter;exports.b2ContactID=b2ContactID;exports.b2ContactImpulse=b2ContactImpulse;exports.b2ContactListener=b2ContactListener;exports.b2ContactManager=b2ContactManager;exports.b2ContactPositionConstraint=b2ContactPositionConstraint;exports.b2ContactRegister=b2ContactRegister;exports.b2ContactSolver=b2ContactSolver;exports.b2ContactSolverDef=b2ContactSolverDef;exports.b2ContactVelocityConstraint=b2ContactVelocityConstraint;exports.b2Controller=b2Controller;exports.b2ControllerEdge=b2ControllerEdge;exports.b2Cos=b2Cos;exports.b2Counter=b2Counter;exports.b2DegToRad=b2DegToRad;exports.b2DestructionListener=b2DestructionListener;exports.b2Distance=b2Distance;exports.b2DistanceInput=b2DistanceInput;exports.b2DistanceJoint=b2DistanceJoint;exports.b2DistanceJointDef=b2DistanceJointDef;exports.b2DistanceOutput=b2DistanceOutput;exports.b2DistanceProxy=b2DistanceProxy;exports.b2Draw=b2Draw;exports.b2DynamicTree=b2DynamicTree;exports.b2EdgeAndCircleContact=b2EdgeAndCircleContact;exports.b2EdgeAndPolygonContact=b2EdgeAndPolygonContact;exports.b2EdgeShape=b2EdgeShape;exports.b2Filter=b2Filter;exports.b2Fixture=b2Fixture;exports.b2FixtureDef=b2FixtureDef;exports.b2FixtureParticleQueryCallback=b2FixtureParticleQueryCallback;exports.b2FixtureProxy=b2FixtureProxy;exports.b2Free=b2Free;exports.b2FrictionJoint=b2FrictionJoint;exports.b2FrictionJointDef=b2FrictionJointDef;exports.b2GearJoint=b2GearJoint;exports.b2GearJointDef=b2GearJointDef;exports.b2GetPointStates=b2GetPointStates;exports.b2GravityController=b2GravityController;exports.b2GrowableBuffer=b2GrowableBuffer;exports.b2GrowableStack=b2GrowableStack;exports.b2InvSqrt=b2InvSqrt;exports.b2IsPowerOfTwo=b2IsPowerOfTwo;exports.b2IsValid=b2IsValid;exports.b2Island=b2Island;exports.b2Jacobian=b2Jacobian;exports.b2Joint=b2Joint;exports.b2JointDef=b2JointDef;exports.b2JointEdge=b2JointEdge;exports.b2Log=b2Log;exports.b2MakeArray=b2MakeArray;exports.b2MakeNullArray=b2MakeNullArray;exports.b2MakeNumberArray=b2MakeNumberArray;exports.b2Manifold=b2Manifold;exports.b2ManifoldPoint=b2ManifoldPoint;exports.b2MassData=b2MassData;exports.b2Mat22=b2Mat22;exports.b2Mat33=b2Mat33;exports.b2Max=b2Max;exports.b2Maybe=b2Maybe;exports.b2Min=b2Min;exports.b2MixFriction=b2MixFriction;exports.b2MixRestitution=b2MixRestitution;exports.b2MotorJoint=b2MotorJoint;exports.b2MotorJointDef=b2MotorJointDef;exports.b2MouseJoint=b2MouseJoint;exports.b2MouseJointDef=b2MouseJointDef;exports.b2NextPowerOfTwo=b2NextPowerOfTwo;exports.b2Pair=b2Pair;exports.b2PairLessThan=b2PairLessThan;exports.b2ParseInt=b2ParseInt;exports.b2ParseUInt=b2ParseUInt;exports.b2ParticleBodyContact=b2ParticleBodyContact;exports.b2ParticleContact=b2ParticleContact;exports.b2ParticleDef=b2ParticleDef;exports.b2ParticleGroup=b2ParticleGroup;exports.b2ParticleGroupDef=b2ParticleGroupDef;exports.b2ParticleHandle=b2ParticleHandle;exports.b2ParticlePair=b2ParticlePair;exports.b2ParticlePairSet=b2ParticlePairSet;exports.b2ParticleSystem=b2ParticleSystem;exports.b2ParticleSystemDef=b2ParticleSystemDef;exports.b2ParticleSystem_CompositeShape=b2ParticleSystem_CompositeShape;exports.b2ParticleSystem_ConnectionFilter=b2ParticleSystem_ConnectionFilter;exports.b2ParticleSystem_DestroyParticlesInShapeCallback=b2ParticleSystem_DestroyParticlesInShapeCallback;exports.b2ParticleSystem_FixedSetAllocator=b2ParticleSystem_FixedSetAllocator;exports.b2ParticleSystem_FixtureParticle=b2ParticleSystem_FixtureParticle;exports.b2ParticleSystem_FixtureParticleSet=b2ParticleSystem_FixtureParticleSet;exports.b2ParticleSystem_InsideBoundsEnumerator=b2ParticleSystem_InsideBoundsEnumerator;exports.b2ParticleSystem_JoinParticleGroupsFilter=b2ParticleSystem_JoinParticleGroupsFilter;exports.b2ParticleSystem_ParticleListNode=b2ParticleSystem_ParticleListNode;exports.b2ParticleSystem_ParticlePair=b2ParticleSystem_ParticlePair;exports.b2ParticleSystem_Proxy=b2ParticleSystem_Proxy;exports.b2ParticleSystem_ReactiveFilter=b2ParticleSystem_ReactiveFilter;exports.b2ParticleSystem_SolveCollisionCallback=b2ParticleSystem_SolveCollisionCallback;exports.b2ParticleSystem_UpdateBodyContactsCallback=b2ParticleSystem_UpdateBodyContactsCallback;exports.b2ParticleSystem_UserOverridableBuffer=b2ParticleSystem_UserOverridableBuffer;exports.b2ParticleTriad=b2ParticleTriad;exports.b2PolygonAndCircleContact=b2PolygonAndCircleContact;exports.b2PolygonContact=b2PolygonContact;exports.b2PolygonShape=b2PolygonShape;exports.b2Position=b2Position;exports.b2PositionSolverManifold=b2PositionSolverManifold;exports.b2Pow=b2Pow;exports.b2PrismaticJoint=b2PrismaticJoint;exports.b2PrismaticJointDef=b2PrismaticJointDef;exports.b2Profile=b2Profile;exports.b2PulleyJoint=b2PulleyJoint;exports.b2PulleyJointDef=b2PulleyJointDef;exports.b2QueryCallback=b2QueryCallback;exports.b2RadToDeg=b2RadToDeg;exports.b2Random=b2Random;exports.b2RandomRange=b2RandomRange;exports.b2RayCastCallback=b2RayCastCallback;exports.b2RayCastInput=b2RayCastInput;exports.b2RayCastOutput=b2RayCastOutput;exports.b2RevoluteJoint=b2RevoluteJoint;exports.b2RevoluteJointDef=b2RevoluteJointDef;exports.b2Rope=b2Rope;exports.b2RopeDef=b2RopeDef;exports.b2RopeJoint=b2RopeJoint;exports.b2RopeJointDef=b2RopeJointDef;exports.b2Rot=b2Rot;exports.b2SeparationFunction=b2SeparationFunction;exports.b2Shape=b2Shape;exports.b2ShapeCast=b2ShapeCast;exports.b2ShapeCastInput=b2ShapeCastInput;exports.b2ShapeCastOutput=b2ShapeCastOutput;exports.b2Simplex=b2Simplex;exports.b2SimplexCache=b2SimplexCache;exports.b2SimplexVertex=b2SimplexVertex;exports.b2Sin=b2Sin;exports.b2SolverData=b2SolverData;exports.b2Sq=b2Sq;exports.b2Sqrt=b2Sqrt;exports.b2StackAllocator=b2StackAllocator;exports.b2Swap=b2Swap;exports.b2Sweep=b2Sweep;exports.b2TOIInput=b2TOIInput;exports.b2TOIOutput=b2TOIOutput;exports.b2TensorDampingController=b2TensorDampingController;exports.b2TestOverlapAABB=b2TestOverlapAABB;exports.b2TestOverlapShape=b2TestOverlapShape;exports.b2TimeOfImpact=b2TimeOfImpact;exports.b2TimeStep=b2TimeStep;exports.b2Timer=b2Timer;exports.b2Transform=b2Transform;exports.b2TreeNode=b2TreeNode;exports.b2Vec2=b2Vec2;exports.b2Vec2_zero=b2Vec2_zero;exports.b2Vec3=b2Vec3;exports.b2Velocity=b2Velocity;exports.b2VelocityConstraintPoint=b2VelocityConstraintPoint;exports.b2Version=b2Version;exports.b2WeldJoint=b2WeldJoint;exports.b2WeldJointDef=b2WeldJointDef;exports.b2WheelJoint=b2WheelJoint;exports.b2WheelJointDef=b2WheelJointDef;exports.b2World=b2World;exports.b2WorldManifold=b2WorldManifold;exports.b2_180_over_pi=b2_180_over_pi;exports.b2_aabbExtension=b2_aabbExtension;exports.b2_aabbMultiplier=b2_aabbMultiplier;exports.b2_angularSleepTolerance=b2_angularSleepTolerance;exports.b2_angularSlop=b2_angularSlop;exports.b2_barrierCollisionTime=b2_barrierCollisionTime;exports.b2_baumgarte=b2_baumgarte;exports.b2_branch=b2_branch;exports.b2_commit=b2_commit;exports.b2_epsilon=b2_epsilon;exports.b2_epsilon_sq=b2_epsilon_sq;exports.b2_gjk_reset=b2_gjk_reset;exports.b2_invalidParticleIndex=b2_invalidParticleIndex;exports.b2_linearSleepTolerance=b2_linearSleepTolerance;exports.b2_linearSlop=b2_linearSlop;exports.b2_maxAngularCorrection=b2_maxAngularCorrection;exports.b2_maxFloat=b2_maxFloat;exports.b2_maxLinearCorrection=b2_maxLinearCorrection;exports.b2_maxManifoldPoints=b2_maxManifoldPoints;exports.b2_maxParticleForce=b2_maxParticleForce;exports.b2_maxParticleIndex=b2_maxParticleIndex;exports.b2_maxParticlePressure=b2_maxParticlePressure;exports.b2_maxPolygonVertices=b2_maxPolygonVertices;exports.b2_maxRotation=b2_maxRotation;exports.b2_maxRotationSquared=b2_maxRotationSquared;exports.b2_maxSubSteps=b2_maxSubSteps;exports.b2_maxTOIContacts=b2_maxTOIContacts;exports.b2_maxTranslation=b2_maxTranslation;exports.b2_maxTranslationSquared=b2_maxTranslationSquared;exports.b2_maxTriadDistance=b2_maxTriadDistance;exports.b2_maxTriadDistanceSquared=b2_maxTriadDistanceSquared;exports.b2_minParticleSystemBufferCapacity=b2_minParticleSystemBufferCapacity;exports.b2_minParticleWeight=b2_minParticleWeight;exports.b2_minPulleyLength=b2_minPulleyLength;exports.b2_particleStride=b2_particleStride;exports.b2_pi=b2_pi;exports.b2_pi_over_180=b2_pi_over_180;exports.b2_polygonRadius=b2_polygonRadius;exports.b2_timeToSleep=b2_timeToSleep;exports.b2_toiBaumgarte=b2_toiBaumgarte;exports.b2_toi_reset=b2_toi_reset;exports.b2_two_pi=b2_two_pi;exports.b2_velocityThreshold=b2_velocityThreshold;exports.b2_version=b2_version;exports.g_blockSolve=g_blockSolve;Object.defineProperty(exports,'__esModule',{value:true});});});unwrapExports(box2d_umd);

            var b2={};for(var key in box2d_umd){if(key.indexOf('b2_')!==-1){continue;}var newKey=key.replace('b2','');b2[newKey]=box2d_umd[key];}var box2d_1=b2;

            var ERigidBody2DType;

            (function (ERigidBody2DType) {
              ERigidBody2DType[ERigidBody2DType["Static"] = 0] = "Static";
              ERigidBody2DType[ERigidBody2DType["Kinematic"] = 1] = "Kinematic";
              ERigidBody2DType[ERigidBody2DType["Dynamic"] = 2] = "Dynamic";
              ERigidBody2DType[ERigidBody2DType["Animated"] = 3] = "Animated";
            })(ERigidBody2DType || (ERigidBody2DType = exports('ERigidBody2DType', {})));

            Enum(ERigidBody2DType);
            var ECollider2DType;

            (function (ECollider2DType) {
              ECollider2DType[ECollider2DType["None"] = 0] = "None";
              ECollider2DType[ECollider2DType["BOX"] = 1] = "BOX";
              ECollider2DType[ECollider2DType["CIRCLE"] = 2] = "CIRCLE";
              ECollider2DType[ECollider2DType["POLYGON"] = 3] = "POLYGON";
            })(ECollider2DType || (ECollider2DType = exports('ECollider2DType', {})));

            Enum(ECollider2DType);
            var EJoint2DType;

            (function (EJoint2DType) {
              EJoint2DType[EJoint2DType["None"] = 0] = "None";
              EJoint2DType[EJoint2DType["DISTANCE"] = 1] = "DISTANCE";
              EJoint2DType[EJoint2DType["SPRING"] = 2] = "SPRING";
              EJoint2DType[EJoint2DType["WHEEL"] = 3] = "WHEEL";
              EJoint2DType[EJoint2DType["MOUSE"] = 4] = "MOUSE";
              EJoint2DType[EJoint2DType["FIXED"] = 5] = "FIXED";
              EJoint2DType[EJoint2DType["SLIDER"] = 6] = "SLIDER";
              EJoint2DType[EJoint2DType["RELATIVE"] = 7] = "RELATIVE";
              EJoint2DType[EJoint2DType["HINGE"] = 8] = "HINGE";
            })(EJoint2DType || (EJoint2DType = exports('EJoint2DType', {})));

            Enum(EJoint2DType);
            var PhysicsGroup;

            (function (PhysicsGroup) {
              PhysicsGroup[PhysicsGroup["DEFAULT"] = 1] = "DEFAULT";
            })(PhysicsGroup || (PhysicsGroup = exports('PhysicsGroup', {})));

            Enum(PhysicsGroup);
            var ERaycast2DType;

            (function (ERaycast2DType) {
              ERaycast2DType[ERaycast2DType["Closest"] = 0] = "Closest";
              ERaycast2DType[ERaycast2DType["Any"] = 1] = "Any";
              ERaycast2DType[ERaycast2DType["AllClosest"] = 2] = "AllClosest";
              ERaycast2DType[ERaycast2DType["All"] = 3] = "All";
            })(ERaycast2DType || (ERaycast2DType = exports('ERaycast2DType', {})));

            var Contact2DType = exports('Contact2DType', {
              None: 'none-contact',
              BEGIN_CONTACT: 'begin-contact',
              END_CONTACT: 'end-contact',
              PRE_SOLVE: 'pre-solve',
              POST_SOLVE: 'post-solve'
            });
            var EPhysics2DDrawFlags;

            (function (EPhysics2DDrawFlags) {
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["None"] = 0] = "None";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["Shape"] = 1] = "Shape";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["Joint"] = 2] = "Joint";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["Aabb"] = 4] = "Aabb";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["Pair"] = 8] = "Pair";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["CenterOfMass"] = 16] = "CenterOfMass";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["Particle"] = 32] = "Particle";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["Controller"] = 64] = "Controller";
              EPhysics2DDrawFlags[EPhysics2DDrawFlags["All"] = 63] = "All";
            })(EPhysics2DDrawFlags || (EPhysics2DDrawFlags = exports('EPhysics2DDrawFlags', {})));

            var PHYSICS_2D_PTM_RATIO = exports('PHYSICS_2D_PTM_RATIO', 32);

            var PhysicsContactListener = function (_b2$ContactListener) {
              _inheritsLoose(PhysicsContactListener, _b2$ContactListener);

              function PhysicsContactListener() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _b2$ContactListener.call.apply(_b2$ContactListener, [this].concat(args)) || this;
                _this._contactFixtures = [];
                _this._BeginContact = null;
                _this._EndContact = null;
                _this._PreSolve = null;
                _this._PostSolve = null;
                return _this;
              }

              var _proto = PhysicsContactListener.prototype;

              _proto.setBeginContact = function setBeginContact(cb) {
                this._BeginContact = cb;
              };

              _proto.setEndContact = function setEndContact(cb) {
                this._EndContact = cb;
              };

              _proto.setPreSolve = function setPreSolve(cb) {
                this._PreSolve = cb;
              };

              _proto.setPostSolve = function setPostSolve(cb) {
                this._PostSolve = cb;
              };

              _proto.BeginContact = function BeginContact(contact) {
                if (!this._BeginContact) return;
                var fixtureA = contact.GetFixtureA();
                var fixtureB = contact.GetFixtureB();
                var fixtures = this._contactFixtures;
                contact._shouldReport = false;

                if (fixtures.indexOf(fixtureA) !== -1 || fixtures.indexOf(fixtureB) !== -1) {
                  contact._shouldReport = true;

                  this._BeginContact(contact);
                }
              };

              _proto.EndContact = function EndContact(contact) {
                if (this._EndContact && contact._shouldReport) {
                  contact._shouldReport = false;

                  this._EndContact(contact);
                }
              };

              _proto.PreSolve = function PreSolve(contact, oldManifold) {
                if (this._PreSolve && contact._shouldReport) {
                  this._PreSolve(contact, oldManifold);
                }
              };

              _proto.PostSolve = function PostSolve(contact, impulse) {
                if (this._PostSolve && contact._shouldReport) {
                  this._PostSolve(contact, impulse);
                }
              };

              _proto.registerContactFixture = function registerContactFixture(fixture) {
                this._contactFixtures.push(fixture);
              };

              _proto.unregisterContactFixture = function unregisterContactFixture(fixture) {
                remove(this._contactFixtures, fixture);
              };

              return PhysicsContactListener;
            }(box2d_1.ContactListener);

            var PhysicsAABBQueryCallback = function (_b2$QueryCallback) {
              _inheritsLoose(PhysicsAABBQueryCallback, _b2$QueryCallback);

              function PhysicsAABBQueryCallback() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _b2$QueryCallback.call.apply(_b2$QueryCallback, [this].concat(args)) || this;
                _this._point = new box2d_1.Vec2();
                _this._isPoint = false;
                _this._fixtures = [];
                return _this;
              }

              var _proto = PhysicsAABBQueryCallback.prototype;

              _proto.init = function init(point) {
                if (point) {
                  this._isPoint = true;
                  this._point.x = point.x;
                  this._point.y = point.y;
                } else {
                  this._isPoint = false;
                }

                this._fixtures.length = 0;
              };

              _proto.ReportFixture = function ReportFixture(fixture) {
                if (this._isPoint) {
                  if (fixture.TestPoint(this._point)) {
                    this._fixtures.push(fixture);
                  }
                } else {
                  this._fixtures.push(fixture);
                }

                return true;
              };

              _proto.getFixture = function getFixture() {
                return this._fixtures[0];
              };

              _proto.getFixtures = function getFixtures() {
                return this._fixtures;
              };

              return PhysicsAABBQueryCallback;
            }(box2d_1.QueryCallback);

            function At(i, vertices) {
              var s = vertices.length;
              return vertices[i < 0 ? s - -i % s : i % s];
            }

            function Copy(i, j, vertices) {
              var p = [];

              while (j < i) {
                j += vertices.length;
              }

              for (; i <= j; ++i) {
                p.push(At(i, vertices));
              }

              return p;
            }

            function ConvexPartition(vertices) {
              ForceCounterClockWise(vertices);
              var list = [];
              var d;
              var lowerDist;
              var upperDist;
              var p;
              var lowerInt = new Vec2();
              var upperInt = new Vec2();
              var lowerIndex = 0;
              var upperIndex = 0;
              var lowerPoly;
              var upperPoly;

              for (var i = 0; i < vertices.length; ++i) {
                if (Reflex(i, vertices)) {
                  lowerDist = upperDist = 10e7;

                  for (var j = 0; j < vertices.length; ++j) {
                    if (Left(At(i - 1, vertices), At(i, vertices), At(j, vertices)) && RightOn(At(i - 1, vertices), At(i, vertices), At(j - 1, vertices))) {
                      p = LineIntersect(At(i - 1, vertices), At(i, vertices), At(j, vertices), At(j - 1, vertices));

                      if (Right(At(i + 1, vertices), At(i, vertices), p)) {
                        d = SquareDist(At(i, vertices), p);

                        if (d < lowerDist) {
                          lowerDist = d;
                          lowerInt = p;
                          lowerIndex = j;
                        }
                      }
                    }

                    if (Left(At(i + 1, vertices), At(i, vertices), At(j + 1, vertices)) && RightOn(At(i + 1, vertices), At(i, vertices), At(j, vertices))) {
                      p = LineIntersect(At(i + 1, vertices), At(i, vertices), At(j, vertices), At(j + 1, vertices));

                      if (Left(At(i - 1, vertices), At(i, vertices), p)) {
                        d = SquareDist(At(i, vertices), p);

                        if (d < upperDist) {
                          upperDist = d;
                          upperIndex = j;
                          upperInt = p;
                        }
                      }
                    }
                  }

                  if (lowerIndex == (upperIndex + 1) % vertices.length) {
                    var sp = lowerInt.add(upperInt).multiplyScalar(1 / 2);
                    lowerPoly = Copy(i, upperIndex, vertices);
                    lowerPoly.push(sp);
                    upperPoly = Copy(lowerIndex, i, vertices);
                    upperPoly.push(sp);
                  } else {
                    var highestScore = 0;
                    var bestIndex = lowerIndex;

                    while (upperIndex < lowerIndex) {
                      upperIndex += vertices.length;
                    }

                    for (var _j = lowerIndex; _j <= upperIndex; ++_j) {
                      if (CanSee(i, _j, vertices)) {
                        var score = 1 / (SquareDist(At(i, vertices), At(_j, vertices)) + 1);

                        if (Reflex(_j, vertices)) {
                          if (RightOn(At(_j - 1, vertices), At(_j, vertices), At(i, vertices)) && LeftOn(At(_j + 1, vertices), At(_j, vertices), At(i, vertices))) {
                            score += 3;
                          } else {
                            score += 2;
                          }
                        } else {
                          score += 1;
                        }

                        if (score > highestScore) {
                          bestIndex = _j;
                          highestScore = score;
                        }
                      }
                    }

                    lowerPoly = Copy(i, bestIndex, vertices);
                    upperPoly = Copy(bestIndex, i, vertices);
                  }

                  list = list.concat(ConvexPartition(lowerPoly));
                  list = list.concat(ConvexPartition(upperPoly));
                  return list;
                }
              }

              list.push(vertices);

              for (var _i = list.length - 1; _i >= 0; _i--) {
                if (list[_i].length == 0) list.splice(_i, 0);
              }

              return list;
            }

            function CanSee(i, j, vertices) {
              if (Reflex(i, vertices)) {
                if (LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices)) && RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices))) return false;
              } else if (RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices)) || LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices))) return false;

              if (Reflex(j, vertices)) {
                if (LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices)) && RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices))) return false;
              } else if (RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices)) || LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices))) return false;

              for (var k = 0; k < vertices.length; ++k) {
                if ((k + 1) % vertices.length == i || k == i || (k + 1) % vertices.length == j || k == j) {
                  continue;
                }

                var intersectionPoint = new Vec2();

                if (LineIntersect2(At(i, vertices), At(j, vertices), At(k, vertices), At(k + 1, vertices), intersectionPoint)) {
                  return false;
                }
              }

              return true;
            }

            function Reflex(i, vertices) {
              return Right(i, vertices);
            }

            function Right(a, b, c) {
              if (typeof c === 'undefined') {
                var i = a;
                var vertices = b;
                a = At(i - 1, vertices);
                b = At(i, vertices);
                c = At(i + 1, vertices);
              }

              return Area(a, b, c) < 0;
            }

            function Left(a, b, c) {
              return Area(a, b, c) > 0;
            }

            function LeftOn(a, b, c) {
              return Area(a, b, c) >= 0;
            }

            function RightOn(a, b, c) {
              return Area(a, b, c) <= 0;
            }

            function SquareDist(a, b) {
              var dx = b.x - a.x;
              var dy = b.y - a.y;
              return dx * dx + dy * dy;
            }

            function ForceCounterClockWise(vertices) {
              if (!IsCounterClockWise(vertices)) {
                vertices.reverse();
              }
            }
            function IsCounterClockWise(vertices) {
              if (vertices.length < 3) return true;
              return GetSignedArea(vertices) > 0;
            }

            function GetSignedArea(vertices) {
              var i;
              var area = 0;

              for (i = 0; i < vertices.length; i++) {
                var j = (i + 1) % vertices.length;
                area += vertices[i].x * vertices[j].y;
                area -= vertices[i].y * vertices[j].x;
              }

              area /= 2;
              return area;
            }

            function LineIntersect(p1, p2, q1, q2) {
              var i = new Vec2();
              var a1 = p2.y - p1.y;
              var b1 = p1.x - p2.x;
              var c1 = a1 * p1.x + b1 * p1.y;
              var a2 = q2.y - q1.y;
              var b2 = q1.x - q2.x;
              var c2 = a2 * q1.x + b2 * q1.y;
              var det = a1 * b2 - a2 * b1;

              if (!FloatEquals(det, 0)) {
                i.x = (b2 * c1 - b1 * c2) / det;
                i.y = (a1 * c2 - a2 * c1) / det;
              }

              return i;
            }

            function LineIntersect2(a0, a1, b0, b1, intersectionPoint) {
              if (a0 == b0 || a0 == b1 || a1 == b0 || a1 == b1) return false;
              var x1 = a0.x;
              var y1 = a0.y;
              var x2 = a1.x;
              var y2 = a1.y;
              var x3 = b0.x;
              var y3 = b0.y;
              var x4 = b1.x;
              var y4 = b1.y;
              if (Math.max(x1, x2) < Math.min(x3, x4) || Math.max(x3, x4) < Math.min(x1, x2)) return false;
              if (Math.max(y1, y2) < Math.min(y3, y4) || Math.max(y3, y4) < Math.min(y1, y2)) return false;
              var ua = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
              var ub = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
              var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);

              if (Math.abs(denom) < 10e-7) {
                return false;
              }

              ua /= denom;
              ub /= denom;

              if (ua > 0 && ua < 1 && ub > 0 && ub < 1) {
                intersectionPoint.x = x1 + ua * (x2 - x1);
                intersectionPoint.y = y1 + ua * (y2 - y1);
                return true;
              }

              return false;
            }

            function FloatEquals(value1, value2) {
              return Math.abs(value1 - value2) <= 10e-7;
            }

            function Area(a, b, c) {
              return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);
            }

            var PolygonSeparator = /*#__PURE__*/Object.freeze({
                __proto__: null,
                ConvexPartition: ConvexPartition,
                ForceCounterClockWise: ForceCounterClockWise,
                IsCounterClockWise: IsCounterClockWise
            });

            var FUNC = function FUNC() {
              return 0;
            };

            function checkPhysicsModule(obj) {
              if ( obj == null) {
                errorID(9600);
                return true;
              }

              return false;
            }
            function createPhysicsWorld() {
              if ( checkPhysicsModule(WRAPPER.PhysicsWorld)) {
                return null;
              }

              return new WRAPPER.PhysicsWorld();
            }
            var EntireBody = {
              impl: null,
              rigidBody: null,
              isAwake: false,
              isSleeping: false,
              initialize: FUNC,
              setType: FUNC,
              setLinearDamping: FUNC,
              setAngularDamping: FUNC,
              setGravityScale: FUNC,
              setFixedRotation: FUNC,
              setAllowSleep: FUNC,
              isActive: FUNC,
              setActive: FUNC,
              wakeUp: FUNC,
              sleep: FUNC,
              getMass: FUNC,
              getInertia: FUNC,
              getLinearVelocity: FUNC,
              setLinearVelocity: FUNC,
              getLinearVelocityFromWorldPoint: FUNC,
              getAngularVelocity: FUNC,
              setAngularVelocity: FUNC,
              getLocalVector: FUNC,
              getWorldVector: FUNC,
              getLocalPoint: FUNC,
              getWorldPoint: FUNC,
              getLocalCenter: FUNC,
              getWorldCenter: FUNC,
              applyForce: FUNC,
              applyForceToCenter: FUNC,
              applyTorque: FUNC,
              applyLinearImpulse: FUNC,
              applyLinearImpulseToCenter: FUNC,
              applyAngularImpulse: FUNC,
              onEnable: FUNC,
              onDisable: FUNC,
              onDestroy: FUNC
            };
            function createRigidBody() {
              var PHYSICS_2D_BUILTIN = legacyCC._global.CC_PHYSICS_2D_BUILTIN;

              if (PHYSICS_2D_BUILTIN) {
                return EntireBody;
              } else {
                if ( checkPhysicsModule(WRAPPER.RigidBody)) {
                  return null;
                }

                return new WRAPPER.RigidBody();
              }
            }
            var CREATE_COLLIDER_PROXY = {
              INITED: false
            };
            var ENTIRE_SHAPE = {
              impl: null,
              collider: null,
              worldAABB: null,
              worldPoints: null,
              worldPosition: null,
              worldRadius: null,
              initialize: FUNC,
              apply: FUNC,
              onLoad: FUNC,
              onEnable: FUNC,
              onDisable: FUNC,
              onDestroy: FUNC,
              onGroupChanged: FUNC
            };
            function createShape(type) {
              initColliderProxy();
              return CREATE_COLLIDER_PROXY[type]();
            }

            function initColliderProxy() {
              if (CREATE_COLLIDER_PROXY.INITED) return;
              CREATE_COLLIDER_PROXY.INITED = true;

              CREATE_COLLIDER_PROXY[ECollider2DType.BOX] = function createBoxShape() {
                if ( checkPhysicsModule(WRAPPER.BoxShape)) {
                  return ENTIRE_SHAPE;
                }

                return new WRAPPER.BoxShape();
              };

              CREATE_COLLIDER_PROXY[ECollider2DType.CIRCLE] = function createCircleShape() {
                if ( checkPhysicsModule(WRAPPER.CircleShape)) {
                  return ENTIRE_SHAPE;
                }

                return new WRAPPER.CircleShape();
              };

              CREATE_COLLIDER_PROXY[ECollider2DType.POLYGON] = function createPolygonShape() {
                if ( checkPhysicsModule(WRAPPER.PolygonShape)) {
                  return ENTIRE_SHAPE;
                }

                return new WRAPPER.PolygonShape();
              };
            }

            var CREATE_JOINT_PROXY = {
              INITED: false
            };
            var ENTIRE_JOINT = {
              impl: null,
              initialize: FUNC,
              setDampingRatio: FUNC,
              setFrequency: FUNC,
              setMaxForce: FUNC,
              setTarget: FUNC,
              setDistance: FUNC,
              setAngularOffset: FUNC,
              setCorrectionFactor: FUNC,
              setLinearOffset: FUNC,
              setMaxLength: FUNC,
              setMaxTorque: FUNC,
              setLowerLimit: FUNC,
              setUpperLimit: FUNC,
              setMaxMotorForce: FUNC,
              setMaxMotorTorque: FUNC,
              setMotorSpeed: FUNC,
              enableLimit: FUNC,
              enableMotor: FUNC,
              setLowerAngle: FUNC,
              setUpperAngle: FUNC
            };
            function createJoint(type) {
              initJointProxy();
              return CREATE_JOINT_PROXY[type]();
            }

            function initJointProxy() {
              if (CREATE_JOINT_PROXY.INITED) return;
              CREATE_JOINT_PROXY.INITED = true;
              var PHYSICS_2D_BUILTIN = legacyCC._global.CC_PHYSICS_2D_BUILTIN;

              CREATE_JOINT_PROXY[EJoint2DType.SPRING] = function createSpringJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.SpringJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.SpringJoint();
                }
              };

              CREATE_JOINT_PROXY[EJoint2DType.DISTANCE] = function createDistanceJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.DistanceJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.DistanceJoint();
                }
              };

              CREATE_JOINT_PROXY[EJoint2DType.FIXED] = function createFixedJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.FixedJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.FixedJoint();
                }
              };

              CREATE_JOINT_PROXY[EJoint2DType.MOUSE] = function createMouseJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.MouseJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.MouseJoint();
                }
              };

              CREATE_JOINT_PROXY[EJoint2DType.RELATIVE] = function createRelativeJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.RelativeJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.RelativeJoint();
                }
              };

              CREATE_JOINT_PROXY[EJoint2DType.SLIDER] = function createSliderJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.SliderJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.SliderJoint();
                }
              };

              CREATE_JOINT_PROXY[EJoint2DType.WHEEL] = function createWheelJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.WheelJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.WheelJoint();
                }
              };

              CREATE_JOINT_PROXY[EJoint2DType.HINGE] = function createHingeJoint() {
                if (PHYSICS_2D_BUILTIN) {
                  return ENTIRE_JOINT;
                } else {
                  if ( checkPhysicsModule(WRAPPER.HingeJoint)) {
                    return ENTIRE_JOINT;
                  }

                  return new WRAPPER.HingeJoint();
                }
              };
            }

            var instance = null;
            var PhysicsSystem2D = exports('PhysicsSystem2D', function (_Eventify) {
              _inheritsLoose(PhysicsSystem2D, _Eventify);

              function PhysicsSystem2D() {
                var _this;

                _this = _Eventify.call(this) || this;
                _this.velocityIterations = 10;
                _this.positionIterations = 10;
                _this.physicsWorld = void 0;
                _this.collisionMatrix = new CollisionMatrix();
                _this._enable = true;
                _this._allowSleep = true;
                _this._maxSubSteps = 1;
                _this._fixedTimeStep = 1.0 / 60.0;
                _this._autoSimulation = true;
                _this._accumulator = 0;
                _this._steping = false;
                _this._gravity = new Vec2(0, -10 * PHYSICS_2D_PTM_RATIO);
                _this._delayEvents = [];
                var config = game.config ? game.config.physics : null;

                if (config) {
                  Vec2.copy(_this._gravity, config.gravity);

                  _this._gravity.multiplyScalar(PHYSICS_2D_PTM_RATIO);

                  _this._allowSleep = config.allowSleep;
                  _this._fixedTimeStep = config.fixedTimeStep;
                  _this._maxSubSteps = config.maxSubSteps;
                  _this._autoSimulation = config.autoSimulation;

                  if (config.collisionMatrix) {
                    for (var i in config.collisionMatrix) {
                      var bit = parseInt(i);
                      var value = 1 << parseInt(i);
                      _this.collisionMatrix["" + value] = config.collisionMatrix[bit];
                    }
                  }

                  if (config.collisionGroups) {
                    var cg = config.collisionGroups;

                    if (cg instanceof Array) {
                      cg.forEach(function (v) {
                        PhysicsGroup[v.name] = 1 << v.index;
                      });
                      Enum.update(PhysicsGroup);
                    }
                  }
                }

                _this.physicsWorld = createPhysicsWorld();
                _this.gravity = _this._gravity;
                _this.allowSleep = _this._allowSleep;
                return _this;
              }

              var _proto = PhysicsSystem2D.prototype;

              _proto.postUpdate = function postUpdate(deltaTime) {
                if (!this._enable) {
                  return;
                }

                if (!this._autoSimulation) {
                  return;
                }

                director.emit(Director.EVENT_BEFORE_PHYSICS);
                this._steping = true;
                var fixedTimeStep = this._fixedTimeStep;
                var velocityIterations = this.velocityIterations;
                var positionIterations = this.positionIterations;
                this._accumulator += deltaTime;
                var substepIndex = 0;

                while (substepIndex++ < this._maxSubSteps && this._accumulator > fixedTimeStep) {
                  this.physicsWorld.step(fixedTimeStep, velocityIterations, positionIterations);
                  this._accumulator -= fixedTimeStep;
                }

                var events = this._delayEvents;

                for (var i = 0, l = events.length; i < l; i++) {
                  var event = events[i];
                  event.func.call(event.target);
                }

                events.length = 0;
                this.physicsWorld.syncPhysicsToScene();

                if (this.debugDrawFlags) {
                  this.physicsWorld.drawDebug();
                }

                this._steping = false;
                director.emit(Director.EVENT_AFTER_PHYSICS);
              };

              _proto._callAfterStep = function _callAfterStep(target, func) {
                if (this._steping) {
                  this._delayEvents.push({
                    target: target,
                    func: func
                  });
                } else {
                  func.call(target);
                }
              };

              _proto.resetAccumulator = function resetAccumulator(time) {
                if (time === void 0) {
                  time = 0;
                }

                this._accumulator = time;
              };

              _proto.step = function step(fixedTimeStep) {
                this.physicsWorld.step(fixedTimeStep, this.velocityIterations, this.positionIterations);
              };

              _proto.raycast = function raycast(p1, p2, type, mask) {
                if (type === void 0) {
                  type = ERaycast2DType.Closest;
                }

                if (mask === void 0) {
                  mask = 0xffffffff;
                }

                return this.physicsWorld.raycast(p1, p2, type, mask);
              };

              _proto.testPoint = function testPoint(p) {
                return this.physicsWorld.testPoint(p);
              };

              _proto.testAABB = function testAABB(rect) {
                return this.physicsWorld.testAABB(rect);
              };

              _createClass(PhysicsSystem2D, [{
                key: "enable",
                get: function get() {
                  return this._enable;
                },
                set: function set(value) {
                  this._enable = value;
                }
              }, {
                key: "allowSleep",
                get: function get() {
                  return this._allowSleep;
                },
                set: function set(v) {
                  this._allowSleep = v;

                  {
                    this.physicsWorld.setAllowSleep(v);
                  }
                }
              }, {
                key: "gravity",
                get: function get() {
                  return this._gravity;
                },
                set: function set(gravity) {
                  this._gravity.set(gravity);

                  {
                    this.physicsWorld.setGravity(new Vec2(gravity.x / PHYSICS_2D_PTM_RATIO, gravity.y / PHYSICS_2D_PTM_RATIO));
                  }
                }
              }, {
                key: "maxSubSteps",
                get: function get() {
                  return this._maxSubSteps;
                },
                set: function set(value) {
                  this._maxSubSteps = value;
                }
              }, {
                key: "fixedTimeStep",
                get: function get() {
                  return this._fixedTimeStep;
                },
                set: function set(value) {
                  this._fixedTimeStep = value;
                }
              }, {
                key: "autoSimulation",
                get: function get() {
                  return this._autoSimulation;
                },
                set: function set(value) {
                  this._autoSimulation = value;
                }
              }, {
                key: "debugDrawFlags",
                get: function get() {
                  return this.physicsWorld.debugDrawFlags;
                },
                set: function set(v) {
                  this.physicsWorld.debugDrawFlags = v;
                }
              }, {
                key: "stepping",
                get: function get() {
                  return this._steping;
                }
              }], [{
                key: "PHYSICS_NONE",
                get: function get() {
                  return !physicsEngineId;
                }
              }, {
                key: "PHYSICS_BUILTIN",
                get: function get() {
                  return physicsEngineId === 'builtin';
                }
              }, {
                key: "PHYSICS_BOX2D",
                get: function get() {
                  return physicsEngineId === 'box2d';
                }
              }, {
                key: "PhysicsGroup",
                get: function get() {
                  return PhysicsGroup;
                }
              }, {
                key: "instance",
                get: function get() {
                  if (!instance) {
                    instance = new PhysicsSystem2D();
                  }

                  return instance;
                }
              }]);

              return PhysicsSystem2D;
            }(Eventify(System)));
            PhysicsSystem2D.ID = 'PHYSICS_2D';
            director.once(Director.EVENT_INIT, function () {
              initPhysicsSystem();
            });

            function initPhysicsSystem() {
              if (!PhysicsSystem2D.PHYSICS_NONE && !EDITOR) {
                director.registerSystem(PhysicsSystem2D.ID, PhysicsSystem2D.instance, System.Priority.LOW);
              }
            }

            var Physics2DManifoldType;

            (function (Physics2DManifoldType) {
              Physics2DManifoldType[Physics2DManifoldType["Circles"] = 0] = "Circles";
              Physics2DManifoldType[Physics2DManifoldType["FaceA"] = 1] = "FaceA";
              Physics2DManifoldType[Physics2DManifoldType["FaceB"] = 2] = "FaceB";
            })(Physics2DManifoldType || (Physics2DManifoldType = exports('Physics2DManifoldType', {})));

            var _dec$1c, _dec2$X, _dec3$L, _dec4$G, _class$1f, _class2$14, _descriptor$10, _descriptor2$T, _descriptor3$I, _descriptor4$D, _descriptor5$x, _descriptor6$r, _descriptor7$k, _descriptor8$h, _descriptor9$f, _descriptor10$d, _descriptor11$b, _descriptor12$b, _temp$18;
            var property = property$1,
                type = type$1,
                menu = menu$1;
            var RigidBody2D = exports('RigidBody2D', (_dec$1c = ccclass('cc.RigidBody2D'), _dec2$X = menu(), _dec3$L = type(PhysicsGroup$1), _dec4$G = type(ERigidBody2DType), _dec$1c(_class$1f = _dec2$X(_class$1f = (_class2$14 = (_temp$18 = function (_Component) {
              _inheritsLoose(RigidBody2D, _Component);

              function RigidBody2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "enabledContactListener", _descriptor$10, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "bullet", _descriptor2$T, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "awakeOnLoad", _descriptor3$I, _assertThisInitialized(_this));

                _this._body = null;

                _initializerDefineProperty(_this, "_group", _descriptor4$D, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_type", _descriptor5$x, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_allowSleep", _descriptor6$r, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_gravityScale", _descriptor7$k, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_linearDamping", _descriptor8$h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_angularDamping", _descriptor9$f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_linearVelocity", _descriptor10$d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_angularVelocity", _descriptor11$b, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fixedRotation", _descriptor12$b, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = RigidBody2D.prototype;

              _proto.isAwake = function isAwake() {
                if (this._body) {
                  return this._body.isAwake;
                }

                return false;
              };

              _proto.wakeUp = function wakeUp() {
                if (this._body) {
                  this._body.wakeUp();
                }
              };

              _proto.sleep = function sleep() {
                if (this._body) {
                  this._body.sleep();
                }
              };

              _proto.getMass = function getMass() {
                if (this._body) {
                  return this._body.getMass();
                }

                return 0;
              };

              _proto.applyForce = function applyForce(force, point, wake) {
                if (this._body) {
                  this._body.applyForce(force, point, wake);
                }
              };

              _proto.applyForceToCenter = function applyForceToCenter(force, wake) {
                if (this._body) {
                  this._body.applyForceToCenter(force, wake);
                }
              };

              _proto.applyTorque = function applyTorque(torque, wake) {
                if (this._body) {
                  this._body.applyTorque(torque, wake);
                }
              };

              _proto.applyLinearImpulse = function applyLinearImpulse(impulse, point, wake) {
                if (this._body) {
                  this._body.applyLinearImpulse(impulse, point, wake);
                }
              };

              _proto.applyLinearImpulseToCenter = function applyLinearImpulseToCenter(impulse, wake) {
                if (this._body) {
                  this._body.applyLinearImpulseToCenter(impulse, wake);
                }
              };

              _proto.applyAngularImpulse = function applyAngularImpulse(impulse, wake) {
                if (this._body) {
                  this._body.applyAngularImpulse(impulse, wake);
                }
              };

              _proto.getLinearVelocityFromWorldPoint = function getLinearVelocityFromWorldPoint(worldPoint, out) {
                if (this._body) {
                  return this._body.getLinearVelocityFromWorldPoint(worldPoint, out);
                }

                return out;
              };

              _proto.getLocalVector = function getLocalVector(worldVector, out) {
                if (this._body) {
                  return this._body.getLocalVector(worldVector, out);
                }

                return out;
              };

              _proto.getWorldVector = function getWorldVector(localVector, out) {
                if (this._body) {
                  return this._body.getWorldVector(localVector, out);
                }

                return out;
              };

              _proto.getLocalPoint = function getLocalPoint(worldPoint, out) {
                if (this._body) {
                  return this._body.getLocalPoint(worldPoint, out);
                }

                return out;
              };

              _proto.getWorldPoint = function getWorldPoint(localPoint, out) {
                if (this._body) {
                  return this._body.getWorldPoint(localPoint, out);
                }

                return out;
              };

              _proto.getLocalCenter = function getLocalCenter(out) {
                if (this._body) {
                  return this._body.getLocalCenter(out);
                }

                return out;
              };

              _proto.getWorldCenter = function getWorldCenter(out) {
                if (this._body) {
                  return this._body.getWorldCenter(out);
                }

                return out;
              };

              _proto.getInertia = function getInertia() {
                if (this._body) {
                  this._body.getInertia();
                }

                return 0;
              };

              _proto.onLoad = function onLoad() {
                {
                  this._body = createRigidBody();

                  this._body.initialize(this);
                }
              };

              _proto.onEnable = function onEnable() {
                if (this._body) {
                  this._body.onEnable();
                }
              };

              _proto.onDisable = function onDisable() {
                if (this._body) {
                  this._body.onDisable();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this._body) {
                  this._body.onDestroy();
                }
              };

              _createClass(RigidBody2D, [{
                key: "group",
                get: function get() {
                  return this._group;
                },
                set: function set(v) {
                  this._group = v;
                }
              }, {
                key: "type",
                get: function get() {
                  return this._type;
                },
                set: function set(v) {
                  this._type = v;

                  if (this._body) {
                    if (v === ERigidBody2DType.Animated) {
                      this._body.setType(ERigidBody2DType.Kinematic);
                    } else {
                      this._body.setType(v);
                    }
                  }
                }
              }, {
                key: "allowSleep",
                get: function get() {
                  return this._allowSleep;
                },
                set: function set(v) {
                  this._allowSleep = v;

                  if (this._body) {
                    this._body.setAllowSleep(v);
                  }
                }
              }, {
                key: "gravityScale",
                get: function get() {
                  return this._gravityScale;
                },
                set: function set(v) {
                  this._gravityScale = v;

                  if (this._body) {
                    this._body.setGravityScale(v);
                  }
                }
              }, {
                key: "linearDamping",
                get: function get() {
                  return this._linearDamping;
                },
                set: function set(v) {
                  this._linearDamping = v;

                  if (this._body) {
                    this._body.setLinearDamping(v);
                  }
                }
              }, {
                key: "angularDamping",
                get: function get() {
                  return this._angularDamping;
                },
                set: function set(v) {
                  this._angularDamping = v;

                  if (this._body) {
                    this._body.setAngularDamping(v);
                  }
                }
              }, {
                key: "linearVelocity",
                get: function get() {
                  if (this._body) {
                    this._body.getLinearVelocity(this._linearVelocity);
                  }

                  return this._linearVelocity;
                },
                set: function set(v) {
                  this._linearVelocity = v;

                  if (this._body) {
                    this._body.setLinearVelocity(v);
                  }
                }
              }, {
                key: "angularVelocity",
                get: function get() {
                  if (this._body) {
                    this._angularVelocity = this._body.getAngularVelocity();
                  }

                  return this._angularVelocity;
                },
                set: function set(v) {
                  this._angularVelocity = v;

                  if (this._body) {
                    this._body.setAngularVelocity(v);
                  }
                }
              }, {
                key: "fixedRotation",
                get: function get() {
                  return this._fixedRotation;
                },
                set: function set(v) {
                  this._fixedRotation = v;

                  if (this._body) {
                    this._body.setFixedRotation(v);
                  }
                }
              }, {
                key: "impl",
                get: function get() {
                  return this._body;
                }
              }]);

              return RigidBody2D;
            }(Component), _temp$18), (_applyDecoratedDescriptor(_class2$14.prototype, "group", [_dec3$L], Object.getOwnPropertyDescriptor(_class2$14.prototype, "group"), _class2$14.prototype), _descriptor$10 = _applyDecoratedDescriptor(_class2$14.prototype, "enabledContactListener", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$T = _applyDecoratedDescriptor(_class2$14.prototype, "bullet", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$14.prototype, "type", [_dec4$G], Object.getOwnPropertyDescriptor(_class2$14.prototype, "type"), _class2$14.prototype), _applyDecoratedDescriptor(_class2$14.prototype, "allowSleep", [property], Object.getOwnPropertyDescriptor(_class2$14.prototype, "allowSleep"), _class2$14.prototype), _applyDecoratedDescriptor(_class2$14.prototype, "gravityScale", [property], Object.getOwnPropertyDescriptor(_class2$14.prototype, "gravityScale"), _class2$14.prototype), _applyDecoratedDescriptor(_class2$14.prototype, "linearDamping", [property], Object.getOwnPropertyDescriptor(_class2$14.prototype, "linearDamping"), _class2$14.prototype), _applyDecoratedDescriptor(_class2$14.prototype, "angularDamping", [property], Object.getOwnPropertyDescriptor(_class2$14.prototype, "angularDamping"), _class2$14.prototype), _applyDecoratedDescriptor(_class2$14.prototype, "linearVelocity", [property], Object.getOwnPropertyDescriptor(_class2$14.prototype, "linearVelocity"), _class2$14.prototype), _applyDecoratedDescriptor(_class2$14.prototype, "angularVelocity", [property], Object.getOwnPropertyDescriptor(_class2$14.prototype, "angularVelocity"), _class2$14.prototype), _applyDecoratedDescriptor(_class2$14.prototype, "fixedRotation", [property], Object.getOwnPropertyDescriptor(_class2$14.prototype, "fixedRotation"), _class2$14.prototype), _descriptor3$I = _applyDecoratedDescriptor(_class2$14.prototype, "awakeOnLoad", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor4$D = _applyDecoratedDescriptor(_class2$14.prototype, "_group", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PhysicsGroup$1.DEFAULT;
              }
            }), _descriptor5$x = _applyDecoratedDescriptor(_class2$14.prototype, "_type", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return ERigidBody2DType.Dynamic;
              }
            }), _descriptor6$r = _applyDecoratedDescriptor(_class2$14.prototype, "_allowSleep", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor7$k = _applyDecoratedDescriptor(_class2$14.prototype, "_gravityScale", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor8$h = _applyDecoratedDescriptor(_class2$14.prototype, "_linearDamping", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor9$f = _applyDecoratedDescriptor(_class2$14.prototype, "_angularDamping", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor10$d = _applyDecoratedDescriptor(_class2$14.prototype, "_linearVelocity", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2();
              }
            }), _descriptor11$b = _applyDecoratedDescriptor(_class2$14.prototype, "_angularVelocity", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor12$b = _applyDecoratedDescriptor(_class2$14.prototype, "_fixedRotation", [property], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            })), _class2$14)) || _class$1f) || _class$1f));

            var _dec$1d, _dec2$Y, _class$1g, _class2$15, _descriptor$11, _descriptor2$U, _descriptor3$J, _descriptor4$E, _descriptor5$y, _descriptor6$s, _descriptor7$l, _descriptor8$i, _temp$19;
            var Collider2D = exports('Collider2D', (_dec$1d = ccclass('cc.Collider2D'), _dec2$Y = type$1(PhysicsGroup$1), _dec$1d(_class$1g = (_class2$15 = (_temp$19 = function (_Eventify) {
              _inheritsLoose(Collider2D, _Eventify);

              function Collider2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Eventify.call.apply(_Eventify, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "editing", _descriptor$11, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "tag", _descriptor2$U, _assertThisInitialized(_this));

                _this.TYPE = ECollider2DType.None;
                _this._shape = null;
                _this._body = null;

                _initializerDefineProperty(_this, "_group", _descriptor3$J, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_density", _descriptor4$E, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_sensor", _descriptor5$y, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_friction", _descriptor6$s, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_restitution", _descriptor7$l, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_offset", _descriptor8$i, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = Collider2D.prototype;

              _proto.onLoad = function onLoad() {
                {
                  this._shape = createShape(this.TYPE);

                  this._shape.initialize(this);

                  if (this._shape.onLoad) {
                    this._shape.onLoad();
                  }

                  this._body = this.getComponent(RigidBody2D);
                }
              };

              _proto.onEnable = function onEnable() {
                if (this._shape) {
                  this._shape.onEnable();
                }
              };

              _proto.onDisable = function onDisable() {
                if (this._shape && this._shape.onDisable) {
                  this._shape.onDisable();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this._shape && this._shape.onDestroy) {
                  this._shape.onDestroy();
                }
              };

              _proto.apply = function apply() {
                if (this._shape && this._shape.apply) {
                  this._shape.apply();
                }
              };

              _createClass(Collider2D, [{
                key: "group",
                get: function get() {
                  return this._group;
                },
                set: function set(v) {
                  this._group = v;

                  if (this._shape && this._shape.onGroupChanged) {
                    this._shape.onGroupChanged();
                  }
                }
              }, {
                key: "density",
                get: function get() {
                  return this._density;
                },
                set: function set(v) {
                  this._density = v;
                }
              }, {
                key: "sensor",
                get: function get() {
                  return this._sensor;
                },
                set: function set(v) {
                  this._sensor = v;
                }
              }, {
                key: "friction",
                get: function get() {
                  return this._friction;
                },
                set: function set(v) {
                  this._friction = v;
                }
              }, {
                key: "restitution",
                get: function get() {
                  return this._restitution;
                },
                set: function set(v) {
                  this._restitution = v;
                }
              }, {
                key: "offset",
                get: function get() {
                  return this._offset;
                },
                set: function set(v) {
                  this._offset = v;
                }
              }, {
                key: "body",
                get: function get() {
                  return this._body;
                }
              }, {
                key: "impl",
                get: function get() {
                  return this._shape;
                }
              }, {
                key: "worldAABB",
                get: function get() {
                  if (this._shape) {
                    return this._shape.worldAABB;
                  }

                  return new Rect$1();
                }
              }]);

              return Collider2D;
            }(Eventify(Component)), _temp$19), (_descriptor$11 = _applyDecoratedDescriptor(_class2$15.prototype, "editing", [editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$U = _applyDecoratedDescriptor(_class2$15.prototype, "tag", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class2$15.prototype, "group", [_dec2$Y], Object.getOwnPropertyDescriptor(_class2$15.prototype, "group"), _class2$15.prototype), _applyDecoratedDescriptor(_class2$15.prototype, "density", [property$1], Object.getOwnPropertyDescriptor(_class2$15.prototype, "density"), _class2$15.prototype), _applyDecoratedDescriptor(_class2$15.prototype, "sensor", [property$1], Object.getOwnPropertyDescriptor(_class2$15.prototype, "sensor"), _class2$15.prototype), _applyDecoratedDescriptor(_class2$15.prototype, "friction", [property$1], Object.getOwnPropertyDescriptor(_class2$15.prototype, "friction"), _class2$15.prototype), _applyDecoratedDescriptor(_class2$15.prototype, "restitution", [property$1], Object.getOwnPropertyDescriptor(_class2$15.prototype, "restitution"), _class2$15.prototype), _applyDecoratedDescriptor(_class2$15.prototype, "offset", [property$1], Object.getOwnPropertyDescriptor(_class2$15.prototype, "offset"), _class2$15.prototype), _descriptor3$J = _applyDecoratedDescriptor(_class2$15.prototype, "_group", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PhysicsGroup$1.DEFAULT;
              }
            }), _descriptor4$E = _applyDecoratedDescriptor(_class2$15.prototype, "_density", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            }), _descriptor5$y = _applyDecoratedDescriptor(_class2$15.prototype, "_sensor", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor6$s = _applyDecoratedDescriptor(_class2$15.prototype, "_friction", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.2;
              }
            }), _descriptor7$l = _applyDecoratedDescriptor(_class2$15.prototype, "_restitution", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor8$i = _applyDecoratedDescriptor(_class2$15.prototype, "_offset", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2();
              }
            })), _class2$15)) || _class$1g));

            var _dec$1e, _dec2$Z, _class$1h, _class2$16, _descriptor$12, _temp$1a;
            var BoxCollider2D = exports('BoxCollider2D', (_dec$1e = ccclass('cc.BoxCollider2D'), _dec2$Z = menu$1(), _dec$1e(_class$1h = _dec2$Z(_class$1h = (_class2$16 = (_temp$1a = function (_Collider2D) {
              _inheritsLoose(BoxCollider2D, _Collider2D);

              function BoxCollider2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Collider2D.call.apply(_Collider2D, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_size", _descriptor$12, _assertThisInitialized(_this));

                _this.TYPE = ECollider2DType.BOX;
                return _this;
              }

              _createClass(BoxCollider2D, [{
                key: "size",
                get: function get() {
                  return this._size;
                },
                set: function set(v) {
                  this._size = v;
                }
              }, {
                key: "worldPoints",
                get: function get() {
                  if (this._shape) {
                    return this._shape.worldPoints;
                  }

                  return [];
                }
              }]);

              return BoxCollider2D;
            }(Collider2D), _temp$1a), (_descriptor$12 = _applyDecoratedDescriptor(_class2$16.prototype, "_size", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Size$1(1, 1);
              }
            }), _applyDecoratedDescriptor(_class2$16.prototype, "size", [property$1], Object.getOwnPropertyDescriptor(_class2$16.prototype, "size"), _class2$16.prototype)), _class2$16)) || _class$1h) || _class$1h));

            var _dec$1f, _dec2$_, _class$1i, _class2$17, _descriptor$13, _temp$1b;
            var CircleCollider2D = exports('CircleCollider2D', (_dec$1f = ccclass('cc.CircleCollider2D'), _dec2$_ = menu$1(), _dec$1f(_class$1i = _dec2$_(_class$1i = (_class2$17 = (_temp$1b = function (_Collider2D) {
              _inheritsLoose(CircleCollider2D, _Collider2D);

              function CircleCollider2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Collider2D.call.apply(_Collider2D, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_radius", _descriptor$13, _assertThisInitialized(_this));

                _this.TYPE = ECollider2DType.CIRCLE;
                return _this;
              }

              _createClass(CircleCollider2D, [{
                key: "radius",
                get: function get() {
                  return this._radius;
                },
                set: function set(v) {
                  this._radius = v < 0 ? 0 : v;
                }
              }, {
                key: "worldPosition",
                get: function get() {
                  if (this._shape) {
                    return this._shape.worldPosition;
                  }

                  return new Vec2();
                }
              }, {
                key: "worldRadius",
                get: function get() {
                  if (this._shape) {
                    return this._shape.worldRadius;
                  }

                  return 0;
                }
              }]);

              return CircleCollider2D;
            }(Collider2D), _temp$1b), (_descriptor$13 = _applyDecoratedDescriptor(_class2$17.prototype, "_radius", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _applyDecoratedDescriptor(_class2$17.prototype, "radius", [property$1], Object.getOwnPropertyDescriptor(_class2$17.prototype, "radius"), _class2$17.prototype)), _class2$17)) || _class$1i) || _class$1i));

            var _dec$1g, _dec2$$, _dec3$M, _dec4$H, _class$1j, _class2$18, _descriptor$14, _descriptor2$V, _temp$1c;
            var PolygonCollider2D = exports('PolygonCollider2D', (_dec$1g = ccclass('cc.PolygonCollider2D'), _dec2$$ = menu$1(), _dec3$M = property$1({
              serializable: false,
              displayOrder: 0
            }), _dec4$H = property$1({
              type: Vec2
            }), _dec$1g(_class$1j = _dec2$$(_class$1j = (_class2$18 = (_temp$1c = function (_Collider2D) {
              _inheritsLoose(PolygonCollider2D, _Collider2D);

              function PolygonCollider2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Collider2D.call.apply(_Collider2D, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "threshold", _descriptor$14, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_points", _descriptor2$V, _assertThisInitialized(_this));

                _this.TYPE = ECollider2DType.POLYGON;
                return _this;
              }

              _createClass(PolygonCollider2D, [{
                key: "points",
                get: function get() {
                  return this._points;
                },
                set: function set(v) {
                  this._points = v;
                }
              }, {
                key: "worldPoints",
                get: function get() {
                  if (this._shape) {
                    return this._shape.worldPoints;
                  }

                  return [];
                }
              }]);

              return PolygonCollider2D;
            }(Collider2D), _temp$1c), (_descriptor$14 = _applyDecoratedDescriptor(_class2$18.prototype, "threshold", [_dec3$M], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor2$V = _applyDecoratedDescriptor(_class2$18.prototype, "_points", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [new Vec2(-1, -1), new Vec2(1, -1), new Vec2(1, 1), new Vec2(-1, 1)];
              }
            }), _applyDecoratedDescriptor(_class2$18.prototype, "points", [_dec4$H], Object.getOwnPropertyDescriptor(_class2$18.prototype, "points"), _class2$18.prototype)), _class2$18)) || _class$1j) || _class$1j));

            var _dec$1h, _dec2$10, _class$1k, _class2$19, _descriptor$15, _descriptor2$W, _descriptor3$K, _descriptor4$F, _temp$1d;
            var Joint2D = exports('Joint2D', (_dec$1h = ccclass('cc.Joint2D'), _dec2$10 = type$1(RigidBody2D), _dec$1h(_class$1k = (_class2$19 = (_temp$1d = function (_Component) {
              _inheritsLoose(Joint2D, _Component);

              function Joint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "anchor", _descriptor$15, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "connectedAnchor", _descriptor2$W, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "collideConnected", _descriptor3$K, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "connectedBody", _descriptor4$F, _assertThisInitialized(_this));

                _this._body = null;
                _this._joint = null;
                _this.TYPE = EJoint2DType.None;
                return _this;
              }

              var _proto = Joint2D.prototype;

              _proto.onLoad = function onLoad() {
                {
                  this._joint = createJoint(this.TYPE);

                  this._joint.initialize(this);

                  this._body = this.getComponent(RigidBody2D);
                }
              };

              _proto.onEnable = function onEnable() {
                if (this._joint && this._joint.onEnable) {
                  this._joint.onEnable();
                }
              };

              _proto.onDisable = function onDisable() {
                if (this._joint && this._joint.onDisable) {
                  this._joint.onDisable();
                }
              };

              _proto.start = function start() {
                if (this._joint && this._joint.start) {
                  this._joint.start();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this._joint && this._joint.onDestroy) {
                  this._joint.onDestroy();
                }
              };

              _createClass(Joint2D, [{
                key: "body",
                get: function get() {
                  return this._body;
                }
              }, {
                key: "impl",
                get: function get() {
                  return this._joint;
                }
              }]);

              return Joint2D;
            }(Component), _temp$1d), (_descriptor$15 = _applyDecoratedDescriptor(_class2$19.prototype, "anchor", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2();
              }
            }), _descriptor2$W = _applyDecoratedDescriptor(_class2$19.prototype, "connectedAnchor", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2();
              }
            }), _descriptor3$K = _applyDecoratedDescriptor(_class2$19.prototype, "collideConnected", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor4$F = _applyDecoratedDescriptor(_class2$19.prototype, "connectedBody", [_dec2$10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$19)) || _class$1k));

            var _dec$1i, _dec2$11, _class$1l, _class2$1a, _descriptor$16, _descriptor2$X, _temp$1e;
            var DistanceJoint2D = exports('DistanceJoint2D', (_dec$1i = ccclass('cc.DistanceJoint2D'), _dec2$11 = menu$1(), _dec$1i(_class$1l = _dec2$11(_class$1l = (_class2$1a = (_temp$1e = function (_Joint2D) {
              _inheritsLoose(DistanceJoint2D, _Joint2D);

              function DistanceJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.DISTANCE;

                _initializerDefineProperty(_this, "_maxLength", _descriptor$16, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_autoCalcDistance", _descriptor2$X, _assertThisInitialized(_this));

                return _this;
              }

              _createClass(DistanceJoint2D, [{
                key: "maxLength",
                get: function get() {
                  if (this._autoCalcDistance && this.connectedBody) {
                    return Vec3.distance(this.node.worldPosition, this.connectedBody.node.worldPosition);
                  }

                  return this._maxLength;
                },
                set: function set(v) {
                  this._maxLength = v;

                  if (this._joint) {
                    this._joint.setMaxLength(v);
                  }
                }
              }, {
                key: "autoCalcDistance",
                get: function get() {
                  return this._autoCalcDistance;
                },
                set: function set(v) {
                  this._autoCalcDistance = v;
                }
              }]);

              return DistanceJoint2D;
            }(Joint2D), _temp$1e), (_applyDecoratedDescriptor(_class2$1a.prototype, "maxLength", [property$1], Object.getOwnPropertyDescriptor(_class2$1a.prototype, "maxLength"), _class2$1a.prototype), _applyDecoratedDescriptor(_class2$1a.prototype, "autoCalcDistance", [property$1], Object.getOwnPropertyDescriptor(_class2$1a.prototype, "autoCalcDistance"), _class2$1a.prototype), _descriptor$16 = _applyDecoratedDescriptor(_class2$1a.prototype, "_maxLength", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5;
              }
            }), _descriptor2$X = _applyDecoratedDescriptor(_class2$1a.prototype, "_autoCalcDistance", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            })), _class2$1a)) || _class$1l) || _class$1l));

            var _dec$1j, _dec2$12, _class$1m, _class2$1b, _descriptor$17, _descriptor2$Y, _descriptor3$L, _descriptor4$G, _temp$1f;
            var SpringJoint2D = exports('SpringJoint2D', (_dec$1j = ccclass('cc.SpringJoint2D'), _dec2$12 = menu$1(), _dec$1j(_class$1m = _dec2$12(_class$1m = (_class2$1b = (_temp$1f = function (_Joint2D) {
              _inheritsLoose(SpringJoint2D, _Joint2D);

              function SpringJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.SPRING;

                _initializerDefineProperty(_this, "_frequency", _descriptor$17, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_dampingRatio", _descriptor2$Y, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_distance", _descriptor3$L, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_autoCalcDistance", _descriptor4$G, _assertThisInitialized(_this));

                return _this;
              }

              _createClass(SpringJoint2D, [{
                key: "frequency",
                get: function get() {
                  return this._frequency;
                },
                set: function set(v) {
                  this._frequency = v;

                  if (this._joint) {
                    this._joint.setFrequency(v);
                  }
                }
              }, {
                key: "dampingRatio",
                get: function get() {
                  return this._dampingRatio;
                },
                set: function set(v) {
                  this._dampingRatio = v;

                  if (this._joint) {
                    this._joint.setDampingRatio(v);
                  }
                }
              }, {
                key: "distance",
                get: function get() {
                  if (this._autoCalcDistance && this.connectedBody) {
                    return Vec3.distance(this.node.worldPosition, this.connectedBody.node.worldPosition);
                  }

                  return this._distance;
                },
                set: function set(v) {
                  this._distance = v;

                  if (this._joint) {
                    this._joint.setDistance(v);
                  }
                }
              }, {
                key: "autoCalcDistance",
                get: function get() {
                  return this._autoCalcDistance;
                },
                set: function set(v) {
                  this._autoCalcDistance = v;
                }
              }]);

              return SpringJoint2D;
            }(Joint2D), _temp$1f), (_applyDecoratedDescriptor(_class2$1b.prototype, "frequency", [property$1], Object.getOwnPropertyDescriptor(_class2$1b.prototype, "frequency"), _class2$1b.prototype), _applyDecoratedDescriptor(_class2$1b.prototype, "dampingRatio", [property$1], Object.getOwnPropertyDescriptor(_class2$1b.prototype, "dampingRatio"), _class2$1b.prototype), _applyDecoratedDescriptor(_class2$1b.prototype, "distance", [property$1], Object.getOwnPropertyDescriptor(_class2$1b.prototype, "distance"), _class2$1b.prototype), _applyDecoratedDescriptor(_class2$1b.prototype, "autoCalcDistance", [property$1], Object.getOwnPropertyDescriptor(_class2$1b.prototype, "autoCalcDistance"), _class2$1b.prototype), _descriptor$17 = _applyDecoratedDescriptor(_class2$1b.prototype, "_frequency", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5;
              }
            }), _descriptor2$Y = _applyDecoratedDescriptor(_class2$1b.prototype, "_dampingRatio", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.7;
              }
            }), _descriptor3$L = _applyDecoratedDescriptor(_class2$1b.prototype, "_distance", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 10;
              }
            }), _descriptor4$G = _applyDecoratedDescriptor(_class2$1b.prototype, "_autoCalcDistance", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            })), _class2$1b)) || _class$1m) || _class$1m));

            var _dec$1k, _dec2$13, _class$1n, _class2$1c, _descriptor$18, _descriptor2$Z, _descriptor3$M, _temp$1g;
            var MouseJoint2D = exports('MouseJoint2D', (_dec$1k = ccclass('cc.MouseJoint2D'), _dec2$13 = menu$1(), _dec$1k(_class$1n = _dec2$13(_class$1n = (_class2$1c = (_temp$1g = function (_Joint2D) {
              _inheritsLoose(MouseJoint2D, _Joint2D);

              function MouseJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.MOUSE;

                _initializerDefineProperty(_this, "_maxForce", _descriptor$18, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_dampingRatio", _descriptor2$Z, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_frequency", _descriptor3$M, _assertThisInitialized(_this));

                _this._target = new Vec2();
                return _this;
              }

              var _proto = MouseJoint2D.prototype;

              _proto.update = function update(dt) {
                this._joint.update(dt);
              };

              _createClass(MouseJoint2D, [{
                key: "target",
                get: function get() {
                  return this._target;
                },
                set: function set(v) {
                  this._target = v;

                  if (this._joint) {
                    this._joint.setTarget(v);
                  }
                }
              }, {
                key: "frequency",
                get: function get() {
                  return this._frequency;
                },
                set: function set(v) {
                  this._frequency = v;

                  if (this._joint) {
                    this._joint.setFrequency(v);
                  }
                }
              }, {
                key: "dampingRatio",
                get: function get() {
                  return this._dampingRatio;
                },
                set: function set(v) {
                  this._dampingRatio = v;

                  if (this._joint) {
                    this._joint.setDampingRatio(v);
                  }
                }
              }, {
                key: "maxForce",
                get: function get() {
                  return this._maxForce;
                },
                set: function set(v) {
                  this._maxForce = v;

                  if (this._joint) {
                    this._joint.setMaxForce(v);
                  }
                }
              }]);

              return MouseJoint2D;
            }(Joint2D), _temp$1g), (_applyDecoratedDescriptor(_class2$1c.prototype, "frequency", [property$1], Object.getOwnPropertyDescriptor(_class2$1c.prototype, "frequency"), _class2$1c.prototype), _applyDecoratedDescriptor(_class2$1c.prototype, "dampingRatio", [property$1], Object.getOwnPropertyDescriptor(_class2$1c.prototype, "dampingRatio"), _class2$1c.prototype), _applyDecoratedDescriptor(_class2$1c.prototype, "maxForce", [property$1], Object.getOwnPropertyDescriptor(_class2$1c.prototype, "maxForce"), _class2$1c.prototype), _descriptor$18 = _applyDecoratedDescriptor(_class2$1c.prototype, "_maxForce", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1000;
              }
            }), _descriptor2$Z = _applyDecoratedDescriptor(_class2$1c.prototype, "_dampingRatio", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.7;
              }
            }), _descriptor3$M = _applyDecoratedDescriptor(_class2$1c.prototype, "_frequency", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5;
              }
            })), _class2$1c)) || _class$1n) || _class$1n));

            var _dec$1l, _dec2$14, _class$1o, _class2$1d, _descriptor$19, _descriptor2$_, _descriptor3$N, _descriptor4$H, _descriptor5$z, _descriptor6$t, _temp$1h;
            var tempVec3_1 = new Vec3();
            var tempVec3_2 = new Vec3();
            var RelativeJoint2D = exports('RelativeJoint2D', (_dec$1l = ccclass('cc.RelativeJoint2D'), _dec2$14 = menu$1(), _dec$1l(_class$1o = _dec2$14(_class$1o = (_class2$1d = (_temp$1h = function (_Joint2D) {
              _inheritsLoose(RelativeJoint2D, _Joint2D);

              function RelativeJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.RELATIVE;

                _initializerDefineProperty(_this, "_maxForce", _descriptor$19, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_maxTorque", _descriptor2$_, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_correctionFactor", _descriptor3$N, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_angularOffset", _descriptor4$H, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_linearOffset", _descriptor5$z, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_autoCalcOffset", _descriptor6$t, _assertThisInitialized(_this));

                return _this;
              }

              _createClass(RelativeJoint2D, [{
                key: "maxForce",
                get: function get() {
                  return this._maxForce;
                },
                set: function set(v) {
                  this._maxForce = v;

                  if (this._joint) {
                    this._joint.setMaxForce(v);
                  }
                }
              }, {
                key: "maxTorque",
                get: function get() {
                  return this._maxTorque;
                },
                set: function set(v) {
                  this._maxTorque = v;

                  if (this._joint) {
                    this._joint.setMaxTorque(v);
                  }
                }
              }, {
                key: "correctionFactor",
                get: function get() {
                  return this._correctionFactor;
                },
                set: function set(v) {
                  this._correctionFactor = v;

                  if (this._joint) {
                    this._joint.setCorrectionFactor(v);
                  }
                }
              }, {
                key: "linearOffset",
                get: function get() {
                  if (this._autoCalcOffset && this.connectedBody) {
                    return Vec2.subtract(this._linearOffset, this.connectedBody.node.worldPosition, this.node.worldPosition);
                  }

                  return this._linearOffset;
                },
                set: function set(v) {
                  this._linearOffset.set(v);

                  if (this._joint) {
                    this._joint.setLinearOffset(v);
                  }
                }
              }, {
                key: "angularOffset",
                get: function get() {
                  if (this._autoCalcOffset && this.connectedBody) {
                    Quat.toEuler(tempVec3_1, this.node.worldRotation);
                    Quat.toEuler(tempVec3_2, this.connectedBody.node.worldRotation);
                    this._angularOffset = tempVec3_2.z - tempVec3_1.z;
                  }

                  return this._angularOffset;
                },
                set: function set(v) {
                  this._angularOffset = v;

                  if (this._joint) {
                    this._joint.setAngularOffset(v);
                  }
                }
              }, {
                key: "autoCalcOffset",
                get: function get() {
                  return this._autoCalcOffset;
                },
                set: function set(v) {
                  this._autoCalcOffset = v;
                }
              }]);

              return RelativeJoint2D;
            }(Joint2D), _temp$1h), (_applyDecoratedDescriptor(_class2$1d.prototype, "maxForce", [property$1], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "maxForce"), _class2$1d.prototype), _applyDecoratedDescriptor(_class2$1d.prototype, "maxTorque", [property$1], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "maxTorque"), _class2$1d.prototype), _applyDecoratedDescriptor(_class2$1d.prototype, "correctionFactor", [property$1], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "correctionFactor"), _class2$1d.prototype), _applyDecoratedDescriptor(_class2$1d.prototype, "linearOffset", [property$1], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "linearOffset"), _class2$1d.prototype), _applyDecoratedDescriptor(_class2$1d.prototype, "angularOffset", [property$1], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "angularOffset"), _class2$1d.prototype), _applyDecoratedDescriptor(_class2$1d.prototype, "autoCalcOffset", [property$1], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "autoCalcOffset"), _class2$1d.prototype), _descriptor$19 = _applyDecoratedDescriptor(_class2$1d.prototype, "_maxForce", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5;
              }
            }), _descriptor2$_ = _applyDecoratedDescriptor(_class2$1d.prototype, "_maxTorque", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.7;
              }
            }), _descriptor3$N = _applyDecoratedDescriptor(_class2$1d.prototype, "_correctionFactor", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.3;
              }
            }), _descriptor4$H = _applyDecoratedDescriptor(_class2$1d.prototype, "_angularOffset", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor5$z = _applyDecoratedDescriptor(_class2$1d.prototype, "_linearOffset", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Vec2();
              }
            }), _descriptor6$t = _applyDecoratedDescriptor(_class2$1d.prototype, "_autoCalcOffset", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            })), _class2$1d)) || _class$1o) || _class$1o));

            var _dec$1m, _dec2$15, _class$1p, _class2$1e, _descriptor$1a, _descriptor2$$, _descriptor3$O, _descriptor4$I, _descriptor5$A, _descriptor6$u, _descriptor7$m, _descriptor8$j, _temp$1i;
            var tempVec2 = new Vec2();
            var SliderJoint2D = exports('SliderJoint2D', (_dec$1m = ccclass('cc.SliderJoint2D'), _dec2$15 = menu$1(), _dec$1m(_class$1p = _dec2$15(_class$1p = (_class2$1e = (_temp$1i = function (_Joint2D) {
              _inheritsLoose(SliderJoint2D, _Joint2D);

              function SliderJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.SLIDER;

                _initializerDefineProperty(_this, "_angle", _descriptor$1a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_autoCalcAngle", _descriptor2$$, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_enableMotor", _descriptor3$O, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_maxMotorForce", _descriptor4$I, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_motorSpeed", _descriptor5$A, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_enableLimit", _descriptor6$u, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_lowerLimit", _descriptor7$m, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_upperLimit", _descriptor8$j, _assertThisInitialized(_this));

                return _this;
              }

              _createClass(SliderJoint2D, [{
                key: "angle",
                get: function get() {
                  if (this._autoCalcAngle && this.connectedBody) {
                    Vec2.subtract(tempVec2, this.connectedBody.node.worldPosition, this.node.worldPosition);
                    this._angle = toDegree(Math.atan2(tempVec2.y, tempVec2.x));
                  }

                  return this._angle;
                },
                set: function set(v) {
                  this._angle = v;
                }
              }, {
                key: "autoCalcAngle",
                get: function get() {
                  return this._autoCalcAngle;
                },
                set: function set(v) {
                  this._autoCalcAngle = v;
                }
              }, {
                key: "enableMotor",
                get: function get() {
                  return this._enableMotor;
                },
                set: function set(v) {
                  this._enableMotor = v;
                }
              }, {
                key: "maxMotorForce",
                get: function get() {
                  return this._maxMotorForce;
                },
                set: function set(v) {
                  this._maxMotorForce = v;

                  if (this._joint) {
                    this._joint.setMaxMotorForce(v);
                  }
                }
              }, {
                key: "motorSpeed",
                get: function get() {
                  return this._motorSpeed;
                },
                set: function set(v) {
                  this._motorSpeed = v;

                  if (this._joint) {
                    this._joint.setMotorSpeed(v);
                  }
                }
              }, {
                key: "enableLimit",
                get: function get() {
                  return this._enableLimit;
                },
                set: function set(v) {
                  this._enableLimit = v;
                }
              }, {
                key: "lowerLimit",
                get: function get() {
                  return this._lowerLimit;
                },
                set: function set(v) {
                  this._lowerLimit = v;

                  if (this._joint) {
                    this._joint.setLowerLimit(v);
                  }
                }
              }, {
                key: "upperLimit",
                get: function get() {
                  return this._upperLimit;
                },
                set: function set(v) {
                  this._upperLimit = v;

                  if (this._joint) {
                    this._joint.setUpperLimit(v);
                  }
                }
              }]);

              return SliderJoint2D;
            }(Joint2D), _temp$1i), (_applyDecoratedDescriptor(_class2$1e.prototype, "angle", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "angle"), _class2$1e.prototype), _applyDecoratedDescriptor(_class2$1e.prototype, "autoCalcAngle", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "autoCalcAngle"), _class2$1e.prototype), _applyDecoratedDescriptor(_class2$1e.prototype, "enableMotor", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "enableMotor"), _class2$1e.prototype), _applyDecoratedDescriptor(_class2$1e.prototype, "maxMotorForce", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "maxMotorForce"), _class2$1e.prototype), _applyDecoratedDescriptor(_class2$1e.prototype, "motorSpeed", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "motorSpeed"), _class2$1e.prototype), _applyDecoratedDescriptor(_class2$1e.prototype, "enableLimit", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "enableLimit"), _class2$1e.prototype), _applyDecoratedDescriptor(_class2$1e.prototype, "lowerLimit", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "lowerLimit"), _class2$1e.prototype), _applyDecoratedDescriptor(_class2$1e.prototype, "upperLimit", [property$1], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "upperLimit"), _class2$1e.prototype), _descriptor$1a = _applyDecoratedDescriptor(_class2$1e.prototype, "_angle", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor2$$ = _applyDecoratedDescriptor(_class2$1e.prototype, "_autoCalcAngle", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor3$O = _applyDecoratedDescriptor(_class2$1e.prototype, "_enableMotor", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor4$I = _applyDecoratedDescriptor(_class2$1e.prototype, "_maxMotorForce", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1000;
              }
            }), _descriptor5$A = _applyDecoratedDescriptor(_class2$1e.prototype, "_motorSpeed", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1000;
              }
            }), _descriptor6$u = _applyDecoratedDescriptor(_class2$1e.prototype, "_enableLimit", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor7$m = _applyDecoratedDescriptor(_class2$1e.prototype, "_lowerLimit", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor8$j = _applyDecoratedDescriptor(_class2$1e.prototype, "_upperLimit", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class2$1e)) || _class$1p) || _class$1p));

            var _dec$1n, _dec2$16, _class$1q, _class2$1f, _descriptor$1b, _descriptor2$10, _temp$1j;
            var FixedJoint2D = exports('FixedJoint2D', (_dec$1n = ccclass('cc.FixedJoint2D'), _dec2$16 = menu$1(), _dec$1n(_class$1q = _dec2$16(_class$1q = (_class2$1f = (_temp$1j = function (_Joint2D) {
              _inheritsLoose(FixedJoint2D, _Joint2D);

              function FixedJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.FIXED;

                _initializerDefineProperty(_this, "_frequency", _descriptor$1b, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_dampingRatio", _descriptor2$10, _assertThisInitialized(_this));

                return _this;
              }

              _createClass(FixedJoint2D, [{
                key: "frequency",
                get: function get() {
                  return this._frequency;
                },
                set: function set(v) {
                  this._frequency = v;

                  if (this._joint) {
                    this._joint.setFrequency(v);
                  }
                }
              }, {
                key: "dampingRatio",
                get: function get() {
                  return this._dampingRatio;
                },
                set: function set(v) {
                  this._dampingRatio = v;

                  if (this._joint) {
                    this._joint.setDampingRatio(v);
                  }
                }
              }]);

              return FixedJoint2D;
            }(Joint2D), _temp$1j), (_applyDecoratedDescriptor(_class2$1f.prototype, "frequency", [property$1], Object.getOwnPropertyDescriptor(_class2$1f.prototype, "frequency"), _class2$1f.prototype), _applyDecoratedDescriptor(_class2$1f.prototype, "dampingRatio", [property$1], Object.getOwnPropertyDescriptor(_class2$1f.prototype, "dampingRatio"), _class2$1f.prototype), _descriptor$1b = _applyDecoratedDescriptor(_class2$1f.prototype, "_frequency", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.7;
              }
            }), _descriptor2$10 = _applyDecoratedDescriptor(_class2$1f.prototype, "_dampingRatio", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.5;
              }
            })), _class2$1f)) || _class$1q) || _class$1q));

            var _dec$1o, _dec2$17, _class$1r, _class2$1g, _descriptor$1c, _descriptor2$11, _descriptor3$P, _descriptor4$J, _descriptor5$B, _descriptor6$v, _temp$1k;
            var WheelJoint2D = exports('WheelJoint2D', (_dec$1o = ccclass('cc.WheelJoint2D'), _dec2$17 = menu$1(), _dec$1o(_class$1r = _dec2$17(_class$1r = (_class2$1g = (_temp$1k = function (_Joint2D) {
              _inheritsLoose(WheelJoint2D, _Joint2D);

              function WheelJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.WHEEL;

                _initializerDefineProperty(_this, "_angle", _descriptor$1c, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_enableMotor", _descriptor2$11, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_maxMotorTorque", _descriptor3$P, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_motorSpeed", _descriptor4$J, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_frequency", _descriptor5$B, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_dampingRatio", _descriptor6$v, _assertThisInitialized(_this));

                return _this;
              }

              _createClass(WheelJoint2D, [{
                key: "angle",
                get: function get() {
                  return this._angle;
                },
                set: function set(v) {
                  this._angle = v;
                }
              }, {
                key: "enableMotor",
                get: function get() {
                  return this._enableMotor;
                },
                set: function set(v) {
                  this._enableMotor = v;

                  if (this._joint) {
                    this._joint.enableMotor(v);
                  }
                }
              }, {
                key: "maxMotorTorque",
                get: function get() {
                  return this._maxMotorTorque;
                },
                set: function set(v) {
                  this._maxMotorTorque = v;

                  if (this._joint) {
                    this._joint.setMaxMotorTorque(v);
                  }
                }
              }, {
                key: "motorSpeed",
                get: function get() {
                  return this._motorSpeed;
                },
                set: function set(v) {
                  this._motorSpeed = v;

                  if (this._joint) {
                    this._joint.setMotorSpeed(v);
                  }
                }
              }, {
                key: "frequency",
                get: function get() {
                  return this._frequency;
                },
                set: function set(v) {
                  this._frequency = v;

                  if (this._joint) {
                    this._joint.setFrequency(v);
                  }
                }
              }, {
                key: "dampingRatio",
                get: function get() {
                  return this._dampingRatio;
                },
                set: function set(v) {
                  this._dampingRatio = v;

                  if (this._joint) {
                    this._joint.setDampingRatio(v);
                  }
                }
              }]);

              return WheelJoint2D;
            }(Joint2D), _temp$1k), (_applyDecoratedDescriptor(_class2$1g.prototype, "angle", [property$1], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "angle"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "enableMotor", [property$1], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "enableMotor"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "maxMotorTorque", [property$1], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "maxMotorTorque"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "motorSpeed", [property$1], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "motorSpeed"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "frequency", [property$1], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "frequency"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "dampingRatio", [property$1], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "dampingRatio"), _class2$1g.prototype), _descriptor$1c = _applyDecoratedDescriptor(_class2$1g.prototype, "_angle", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 90;
              }
            }), _descriptor2$11 = _applyDecoratedDescriptor(_class2$1g.prototype, "_enableMotor", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor3$P = _applyDecoratedDescriptor(_class2$1g.prototype, "_maxMotorTorque", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1000;
              }
            }), _descriptor4$J = _applyDecoratedDescriptor(_class2$1g.prototype, "_motorSpeed", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor5$B = _applyDecoratedDescriptor(_class2$1g.prototype, "_frequency", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 5;
              }
            }), _descriptor6$v = _applyDecoratedDescriptor(_class2$1g.prototype, "_dampingRatio", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.7;
              }
            })), _class2$1g)) || _class$1r) || _class$1r));

            var _dec$1p, _dec2$18, _class$1s, _class2$1h, _descriptor$1d, _descriptor2$12, _descriptor3$Q, _descriptor4$K, _descriptor5$C, _descriptor6$w, _temp$1l;
            var HingeJoint2D = exports('HingeJoint2D', (_dec$1p = ccclass('cc.HingeJoint2D'), _dec2$18 = menu$1(), _dec$1p(_class$1s = _dec2$18(_class$1s = (_class2$1h = (_temp$1l = function (_Joint2D) {
              _inheritsLoose(HingeJoint2D, _Joint2D);

              function HingeJoint2D() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Joint2D.call.apply(_Joint2D, [this].concat(args)) || this;
                _this.TYPE = EJoint2DType.HINGE;

                _initializerDefineProperty(_this, "_enableLimit", _descriptor$1d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_lowerAngle", _descriptor2$12, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_upperAngle", _descriptor3$Q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_enableMotor", _descriptor4$K, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_maxMotorTorque", _descriptor5$C, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_motorSpeed", _descriptor6$w, _assertThisInitialized(_this));

                return _this;
              }

              _createClass(HingeJoint2D, [{
                key: "enableLimit",
                get: function get() {
                  return this._enableLimit;
                },
                set: function set(v) {
                  this._enableLimit = v;
                }
              }, {
                key: "lowerAngle",
                get: function get() {
                  return this._lowerAngle;
                },
                set: function set(v) {
                  this._lowerAngle = v;

                  if (this._joint) {
                    this._joint.setLowerAngle(v);
                  }
                }
              }, {
                key: "upperAngle",
                get: function get() {
                  return this._upperAngle;
                },
                set: function set(v) {
                  this._upperAngle = v;

                  if (this._joint) {
                    this._joint.setUpperAngle(v);
                  }
                }
              }, {
                key: "enableMotor",
                get: function get() {
                  return this._enableMotor;
                },
                set: function set(v) {
                  this._enableMotor = v;

                  if (this._joint) {
                    this._joint.enableMotor(v);
                  }
                }
              }, {
                key: "maxMotorTorque",
                get: function get() {
                  return this._maxMotorTorque;
                },
                set: function set(v) {
                  this._maxMotorTorque = v;

                  if (this._joint) {
                    this._joint.setMaxMotorTorque(v);
                  }
                }
              }, {
                key: "motorSpeed",
                get: function get() {
                  return this._motorSpeed;
                },
                set: function set(v) {
                  this._motorSpeed = v;

                  if (this._joint) {
                    this._joint.setMotorSpeed(v);
                  }
                }
              }]);

              return HingeJoint2D;
            }(Joint2D), _temp$1l), (_applyDecoratedDescriptor(_class2$1h.prototype, "enableLimit", [property$1], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "enableLimit"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "lowerAngle", [property$1], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "lowerAngle"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "upperAngle", [property$1], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "upperAngle"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "enableMotor", [property$1], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "enableMotor"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "maxMotorTorque", [property$1], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "maxMotorTorque"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "motorSpeed", [property$1], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "motorSpeed"), _class2$1h.prototype), _descriptor$1d = _applyDecoratedDescriptor(_class2$1h.prototype, "_enableLimit", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor2$12 = _applyDecoratedDescriptor(_class2$1h.prototype, "_lowerAngle", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor3$Q = _applyDecoratedDescriptor(_class2$1h.prototype, "_upperAngle", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor4$K = _applyDecoratedDescriptor(_class2$1h.prototype, "_enableMotor", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor5$C = _applyDecoratedDescriptor(_class2$1h.prototype, "_maxMotorTorque", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1000;
              }
            }), _descriptor6$w = _applyDecoratedDescriptor(_class2$1h.prototype, "_motorSpeed", [property$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class2$1h)) || _class$1s) || _class$1s));

            var Physics2DUtils = exports('Physics2DUtils', {
              PolygonSeparator: PolygonSeparator
            });

            var PhysicsRayCastCallback = function (_b2$RayCastCallback) {
              _inheritsLoose(PhysicsRayCastCallback, _b2$RayCastCallback);

              function PhysicsRayCastCallback() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _b2$RayCastCallback.call.apply(_b2$RayCastCallback, [this].concat(args)) || this;
                _this._type = ERaycast2DType.Closest;
                _this._fixtures = [];
                _this._points = [];
                _this._normals = [];
                _this._fractions = [];
                _this._mask = 0xffffffff;
                return _this;
              }

              var _proto = PhysicsRayCastCallback.prototype;

              _proto.init = function init(type, mask) {
                this._type = type;
                this._mask = mask;
                this._fixtures.length = 0;
                this._points.length = 0;
                this._normals.length = 0;
                this._fractions.length = 0;
              };

              _proto.ReportFixture = function ReportFixture(fixture, point, normal, fraction) {
                if ((fixture.GetFilterData().categoryBits & this._mask) === 0) {
                  return 0;
                }

                if (this._type === ERaycast2DType.Closest) {
                  this._fixtures[0] = fixture;
                  this._points[0] = point;
                  this._normals[0] = normal;
                  this._fractions[0] = fraction;
                  return fraction;
                }

                this._fixtures.push(fixture);

                this._points.push(new Vec2(point.x, point.y));

                this._normals.push(new Vec2(normal.x, normal.y));

                this._fractions.push(fraction);

                if (this._type === ERaycast2DType.Any) {
                  return 0;
                } else if (this._type >= ERaycast2DType.All) {
                  return 1;
                }

                return fraction;
              };

              _proto.getFixtures = function getFixtures() {
                return this._fixtures;
              };

              _proto.getPoints = function getPoints() {
                return this._points;
              };

              _proto.getNormals = function getNormals() {
                return this._normals;
              };

              _proto.getFractions = function getFractions() {
                return this._fractions;
              };

              return PhysicsRayCastCallback;
            }(box2d_1.RayCastCallback);

            var pools = [];
            var pointCache = [new Vec2(), new Vec2()];
            var b2worldmanifold = new box2d_1.WorldManifold();
            var worldmanifold = {
              points: [],
              separations: [],
              normal: new Vec2()
            };

            var ManifoldPoint = function ManifoldPoint() {
              this.localPoint = new Vec2();
              this.normalImpulse = 0;
              this.tangentImpulse = 0;
            };

            var manifoldPointCache = [new ManifoldPoint(), new ManifoldPoint()];
            var manifold = {
              type: 0,
              localPoint: new Vec2(),
              localNormal: new Vec2(),
              points: []
            };
            var impulse = {
              normalImpulses: [],
              tangentImpulses: []
            };
            var PhysicsContact = function () {
              function PhysicsContact() {
                this.colliderA = null;
                this.colliderB = null;
                this.disabled = false;
                this.disabledOnce = false;
                this._impulse = null;
                this._inverted = false;
                this._b2contact = null;
              }

              PhysicsContact.get = function get(b2contact) {
                var c = pools.pop();

                if (!c) {
                  c = new PhysicsContact();
                }

                c.init(b2contact);
                return c;
              };

              PhysicsContact.put = function put(b2contact) {
                var c = b2contact.m_userData;
                if (!c) return;
                pools.push(c);
                c.reset();
              };

              var _proto = PhysicsContact.prototype;

              _proto._setImpulse = function _setImpulse(impulse) {
                this._impulse = impulse;
              };

              _proto.init = function init(b2contact) {
                this.colliderA = b2contact.m_fixtureA.m_userData.collider;
                this.colliderB = b2contact.m_fixtureB.m_userData.collider;
                this.disabled = false;
                this.disabledOnce = false;
                this._impulse = null;
                this._inverted = false;
                this._b2contact = b2contact;
                b2contact.m_userData = this;
              };

              _proto.reset = function reset() {
                this.setTangentSpeed(0);
                this.resetFriction();
                this.resetRestitution();
                this.colliderA = null;
                this.colliderB = null;
                this.disabled = false;
                this._impulse = null;
                this._b2contact.m_userData = null;
                this._b2contact = null;
              };

              _proto.getWorldManifold = function getWorldManifold() {
                var points = worldmanifold.points;
                var separations = worldmanifold.separations;
                var normal = worldmanifold.normal;

                this._b2contact.GetWorldManifold(b2worldmanifold);

                var b2points = b2worldmanifold.points;
                var b2separations = b2worldmanifold.separations;

                var count = this._b2contact.GetManifold().pointCount;

                points.length = separations.length = count;

                for (var i = 0; i < count; i++) {
                  var p = pointCache[i];
                  p.x = b2points[i].x * PHYSICS_2D_PTM_RATIO;
                  p.y = b2points[i].y * PHYSICS_2D_PTM_RATIO;
                  points[i] = p;
                  separations[i] = b2separations[i] * PHYSICS_2D_PTM_RATIO;
                }

                normal.x = b2worldmanifold.normal.x;
                normal.y = b2worldmanifold.normal.y;

                if (this._inverted) {
                  normal.x *= -1;
                  normal.y *= -1;
                }

                return worldmanifold;
              };

              _proto.getManifold = function getManifold() {
                var points = manifold.points;
                var localNormal = manifold.localNormal;
                var localPoint = manifold.localPoint;

                var b2manifold = this._b2contact.GetManifold();

                var b2points = b2manifold.points;
                var count = points.length = b2manifold.pointCount;

                for (var i = 0; i < count; i++) {
                  var p = manifoldPointCache[i];
                  var b2p = b2points[i];
                  p.localPoint.x = b2p.localPoint.x * PHYSICS_2D_PTM_RATIO;
                  p.localPoint.y = b2p.localPoint.y * PHYSICS_2D_PTM_RATIO;
                  p.normalImpulse = b2p.normalImpulse * PHYSICS_2D_PTM_RATIO;
                  p.tangentImpulse = b2p.tangentImpulse;
                  points[i] = p;
                }

                localPoint.x = b2manifold.localPoint.x * PHYSICS_2D_PTM_RATIO;
                localPoint.y = b2manifold.localPoint.y * PHYSICS_2D_PTM_RATIO;
                localNormal.x = b2manifold.localNormal.x;
                localNormal.y = b2manifold.localNormal.y;
                manifold.type = b2manifold.type;

                if (this._inverted) {
                  localNormal.x *= -1;
                  localNormal.y *= -1;
                }

                return manifold;
              };

              _proto.getImpulse = function getImpulse() {
                var b2impulse = this._impulse;
                if (!b2impulse) return null;
                var normalImpulses = impulse.normalImpulses;
                var tangentImpulses = impulse.tangentImpulses;
                var count = b2impulse.count;

                for (var i = 0; i < count; i++) {
                  normalImpulses[i] = b2impulse.normalImpulses[i] * PHYSICS_2D_PTM_RATIO;
                  tangentImpulses[i] = b2impulse.tangentImpulses[i];
                }

                tangentImpulses.length = normalImpulses.length = count;
                return impulse;
              };

              _proto.emit = function emit(contactType) {

                var colliderA = this.colliderA;
                var colliderB = this.colliderB;
                var bodyA = colliderA.body;
                var bodyB = colliderB.body;

                if (bodyA.enabledContactListener) {
                  colliderA === null || colliderA === void 0 ? void 0 : colliderA.emit(contactType, colliderA, colliderB, this);
                }

                if (bodyB.enabledContactListener) {
                  colliderB === null || colliderB === void 0 ? void 0 : colliderB.emit(contactType, colliderB, colliderA, this);
                }

                if (bodyA.enabledContactListener || bodyB.enabledContactListener) {
                  PhysicsSystem2D.instance.emit(contactType, colliderA, colliderB, this);
                }

                if (this.disabled || this.disabledOnce) {
                  this.setEnabled(false);
                  this.disabledOnce = false;
                }
              };

              _proto.setEnabled = function setEnabled(value) {
                this._b2contact.SetEnabled(value);
              };

              _proto.isTouching = function isTouching() {
                return this._b2contact.IsTouching();
              };

              _proto.setTangentSpeed = function setTangentSpeed(value) {
                this._b2contact.SetTangentSpeed(value);
              };

              _proto.getTangentSpeed = function getTangentSpeed() {
                return this._b2contact.GetTangentSpeed();
              };

              _proto.setFriction = function setFriction(value) {
                this._b2contact.SetFriction(value);
              };

              _proto.getFriction = function getFriction() {
                return this._b2contact.GetFriction();
              };

              _proto.resetFriction = function resetFriction() {
                return this._b2contact.ResetFriction();
              };

              _proto.setRestitution = function setRestitution(value) {
                this._b2contact.SetRestitution(value);
              };

              _proto.getRestitution = function getRestitution() {
                return this._b2contact.GetRestitution();
              };

              _proto.resetRestitution = function resetRestitution() {
                return this._b2contact.ResetRestitution();
              };

              return PhysicsContact;
            }();

            var _tmp_vec2 = new box2d_1.Vec2();

            var _tmp_color = new Color$1();

            var GREEN_COLOR = Color$1.GREEN;
            var RED_COLOR = Color$1.RED;
            var PhysicsDebugDraw = function (_b2$Draw) {
              _inheritsLoose(PhysicsDebugDraw, _b2$Draw);

              function PhysicsDebugDraw(drawer) {
                var _this;

                _this = _b2$Draw.call(this) || this;
                _this._drawer = null;
                _this._xf = new box2d_1.Transform();
                _this._dxf = new box2d_1.Transform();
                _this._drawer = drawer;
                return _this;
              }

              var _proto = PhysicsDebugDraw.prototype;

              _proto._DrawPolygon = function _DrawPolygon(vertices, vertexCount) {
                var drawer = this._drawer;

                for (var i = 0; i < vertexCount; i++) {
                  box2d_1.Transform.MulXV(this._xf, vertices[i], _tmp_vec2);
                  var x = _tmp_vec2.x * PHYSICS_2D_PTM_RATIO;
                  var y = _tmp_vec2.y * PHYSICS_2D_PTM_RATIO;
                  if (i === 0) drawer.moveTo(x, y);else {
                    drawer.lineTo(x, y);
                  }
                }

                drawer.close();
              };

              _proto.DrawPolygon = function DrawPolygon(vertices, vertexCount, color) {
                this._applyStrokeColor(color);

                this._DrawPolygon(vertices, vertexCount);

                this._drawer.stroke();
              };

              _proto.DrawSolidPolygon = function DrawSolidPolygon(vertices, vertexCount, color) {
                this._applyFillColor(color);

                this._DrawPolygon(vertices, vertexCount);

                this._drawer.fill();

                this._drawer.stroke();
              };

              _proto._DrawCircle = function _DrawCircle(center, radius) {
                var p = this._xf.p;

                this._drawer.circle((center.x + p.x) * PHYSICS_2D_PTM_RATIO, (center.y + p.y) * PHYSICS_2D_PTM_RATIO, radius * PHYSICS_2D_PTM_RATIO);
              };

              _proto.DrawCircle = function DrawCircle(center, radius, color) {
                this._applyStrokeColor(color);

                this._DrawCircle(center, radius);

                this._drawer.stroke();
              };

              _proto.DrawSolidCircle = function DrawSolidCircle(center, radius, axis, color) {
                this._applyFillColor(color);

                this._DrawCircle(center, radius);

                this._drawer.fill();
              };

              _proto.DrawSegment = function DrawSegment(p1, p2, color) {
                var drawer = this._drawer;

                if (p1.x === p2.x && p1.y === p2.y) {
                  this._applyFillColor(color);

                  this._DrawCircle(p1, 2 / PHYSICS_2D_PTM_RATIO);

                  drawer.fill();
                  return;
                }

                this._applyStrokeColor(color);

                box2d_1.Transform.MulXV(this._xf, p1, _tmp_vec2);
                drawer.moveTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);
                box2d_1.Transform.MulXV(this._xf, p2, _tmp_vec2);
                drawer.lineTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);
                drawer.stroke();
              };

              _proto.DrawTransform = function DrawTransform(xf) {
                var drawer = this._drawer;
                drawer.strokeColor = RED_COLOR;
                _tmp_vec2.x = _tmp_vec2.y = 0;
                box2d_1.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
                drawer.moveTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);
                _tmp_vec2.x = 1;
                _tmp_vec2.y = 0;
                box2d_1.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
                drawer.lineTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);
                drawer.stroke();
                drawer.strokeColor = GREEN_COLOR;
                _tmp_vec2.x = _tmp_vec2.y = 0;
                box2d_1.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
                drawer.moveTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);
                _tmp_vec2.x = 0;
                _tmp_vec2.y = 1;
                box2d_1.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);
                drawer.lineTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);
                drawer.stroke();
              };

              _proto.DrawPoint = function DrawPoint(center, radius, color) {};

              _proto.DrawParticles = function DrawParticles() {};

              _proto._applyStrokeColor = function _applyStrokeColor(color) {
                this._drawer.strokeColor = _tmp_color.set(color.r * 255, color.g * 255, color.b * 255, 150);
              };

              _proto._applyFillColor = function _applyFillColor(color) {
                this._drawer.fillColor = _tmp_color.set(color.r * 255, color.g * 255, color.b * 255, 150);
              };

              _proto.PushTransform = function PushTransform(xf) {
                this._xf = xf;
              };

              _proto.PopTransform = function PopTransform() {
                this._xf = this._dxf;
              };

              return PhysicsDebugDraw;
            }(box2d_1.Draw);

            var tempVec3 = new Vec3();
            var tempVec2_1 = new Vec2();
            var tempVec2_2 = new Vec2();
            var temoBodyDef = new box2d_1.BodyDef();
            var tempB2AABB = new box2d_1.AABB();
            var testResults = [];
            var b2PhysicsWorld = function () {
              function b2PhysicsWorld() {
                this._world = void 0;
                this._bodies = [];
                this._animatedBodies = [];
                this._rotationAxis = new Vec3();
                this._contactListener = void 0;
                this._aabbQueryCallback = void 0;
                this._raycastQueryCallback = void 0;
                this._debugGraphics = null;
                this._b2DebugDrawer = null;
                this._debugDrawFlags = 0;
                this._world = new box2d_1.World(new box2d_1.Vec2(0, -10));
                var listener = new PhysicsContactListener();
                listener.setBeginContact(this._onBeginContact);
                listener.setEndContact(this._onEndContact);
                listener.setPreSolve(this._onPreSolve);
                listener.setPostSolve(this._onPostSolve);

                this._world.SetContactListener(listener);

                this._contactListener = listener;
                this._aabbQueryCallback = new PhysicsAABBQueryCallback();
                this._raycastQueryCallback = new PhysicsRayCastCallback();
              }

              var _proto = b2PhysicsWorld.prototype;

              _proto._checkDebugDrawValid = function _checkDebugDrawValid() {

                if (!this._debugGraphics || !this._debugGraphics.isValid) {
                  var canvas = find('Canvas');

                  if (!canvas) {
                    var scene = director.getScene();

                    if (!scene) {
                      return;
                    }

                    canvas = new Node('Canvas');
                    canvas.addComponent(Canvas);
                    canvas.parent = scene;
                  }

                  var node = new Node('PHYSICS_2D_DEBUG_DRAW');
                  node.hideFlags |= CCObject.Flags.DontSave;
                  node.parent = canvas;
                  node.worldPosition = Vec3.ZERO;
                  node.layer = Layers.Enum.UI_2D;
                  this._debugGraphics = node.addComponent(Graphics);
                  this._debugGraphics.lineWidth = 2;
                  var debugDraw = new PhysicsDebugDraw(this._debugGraphics);
                  this._b2DebugDrawer = debugDraw;

                  this._world.SetDebugDraw(debugDraw);
                }

                var parent = this._debugGraphics.node.parent;

                this._debugGraphics.node.setSiblingIndex(parent.children.length - 1);

                if (this._b2DebugDrawer) {
                  this._b2DebugDrawer.SetFlags(this.debugDrawFlags);
                }
              };

              _proto.setGravity = function setGravity(v) {
                this._world.SetGravity(v);
              };

              _proto.setAllowSleep = function setAllowSleep(v) {
                this._world.SetAllowSleeping(true);
              };

              _proto.step = function step(deltaTime, velocityIterations, positionIterations) {
                if (velocityIterations === void 0) {
                  velocityIterations = 10;
                }

                if (positionIterations === void 0) {
                  positionIterations = 10;
                }

                var animatedBodies = this._animatedBodies;

                for (var i = 0, l = animatedBodies.length; i < l; i++) {
                  animatedBodies[i].animate(deltaTime);
                }

                this._world.Step(deltaTime, velocityIterations, positionIterations);
              };

              _proto.raycast = function raycast(p1, p2, type, mask) {
                if (p1.equals(p2)) {
                  return [];
                }

                type = type || ERaycast2DType.Closest;
                tempVec2_1.x = p1.x / PHYSICS_2D_PTM_RATIO;
                tempVec2_1.y = p1.y / PHYSICS_2D_PTM_RATIO;
                tempVec2_2.x = p2.x / PHYSICS_2D_PTM_RATIO;
                tempVec2_2.y = p2.y / PHYSICS_2D_PTM_RATIO;
                var callback = this._raycastQueryCallback;
                callback.init(type, mask);

                this._world.RayCast(callback, tempVec2_1, tempVec2_2);

                var fixtures = callback.getFixtures();

                if (fixtures.length > 0) {
                  var points = callback.getPoints();
                  var normals = callback.getNormals();
                  var fractions = callback.getFractions();
                  var results = [];

                  for (var i = 0, l = fixtures.length; i < l; i++) {
                    var fixture = fixtures[i];
                    var shape = fixture.m_userData;
                    var collider = shape.collider;

                    if (type === ERaycast2DType.AllClosest) {
                      var result = void 0;

                      for (var j = 0; j < results.length; j++) {
                        if (results[j].collider === collider) {
                          result = results[j];
                        }
                      }

                      if (result) {
                        if (fractions[i] < result.fraction) {
                          result.fixtureIndex = shape.getFixtureIndex(fixture);
                          result.point.x = points[i].x * PHYSICS_2D_PTM_RATIO;
                          result.point.y = points[i].y * PHYSICS_2D_PTM_RATIO;
                          result.normal.x = normals[i].x;
                          result.normal.y = normals[i].y;
                          result.fraction = fractions[i];
                        }

                        continue;
                      }
                    }

                    results.push({
                      collider: collider,
                      fixtureIndex: shape.getFixtureIndex(fixture),
                      point: new Vec2(points[i].x * PHYSICS_2D_PTM_RATIO, points[i].y * PHYSICS_2D_PTM_RATIO),
                      normal: new Vec2(normals[i].x, normals[i].y),
                      fraction: fractions[i]
                    });
                  }

                  return results;
                }

                return [];
              };

              _proto.syncPhysicsToScene = function syncPhysicsToScene() {
                var bodies = this._bodies;

                for (var i = 0, l = bodies.length; i < l; i++) {
                  var body = bodies[i];
                  var bodyComp = body.rigidBody;

                  if (bodyComp.type === ERigidBody2DType.Animated) {
                    body.resetVelocity();
                    continue;
                  }

                  var node = bodyComp.node;
                  var b2body = body.impl;
                  var pos = b2body.GetPosition();
                  tempVec3.x = pos.x * PHYSICS_2D_PTM_RATIO;
                  tempVec3.y = pos.y * PHYSICS_2D_PTM_RATIO;
                  tempVec3.z = 0;
                  node.worldPosition = tempVec3;
                  var angle = toDegree(b2body.GetAngle());
                  node.setWorldRotationFromEuler(0, 0, angle);
                }
              };

              _proto.syncSceneToPhysics = function syncSceneToPhysics() {
                var bodies = this._bodies;

                for (var i = 0; i < bodies.length; i++) {
                  bodies[i].syncRotationToPhysics();
                  bodies[i].syncPositionToPhysics();
                }
              };

              _proto.addBody = function addBody(body) {
                var bodies = this._bodies;

                if (bodies.includes(body)) {
                  return;
                }

                var bodyDef = temoBodyDef;
                var comp = body.rigidBody;
                bodyDef.allowSleep = comp.allowSleep;
                bodyDef.gravityScale = comp.gravityScale;
                bodyDef.linearDamping = comp.linearDamping;
                bodyDef.angularDamping = comp.angularDamping;
                bodyDef.fixedRotation = comp.fixedRotation;
                bodyDef.bullet = comp.bullet;
                var node = comp.node;
                var pos = node.worldPosition;
                bodyDef.position.Set(pos.x / PHYSICS_2D_PTM_RATIO, pos.y / PHYSICS_2D_PTM_RATIO);
                tempVec3.z = Quat.getAxisAngle(this._rotationAxis, node.worldRotation);

                if (this._rotationAxis.z < 0.0) {
                  tempVec3.z = Math.PI * 2 - tempVec3.z;
                }

                bodyDef.angle = tempVec3.z;
                bodyDef.awake = comp.awakeOnLoad;

                if (comp.type === ERigidBody2DType.Animated) {
                  bodyDef.type = ERigidBody2DType.Kinematic;

                  this._animatedBodies.push(body);

                  body._animatedPos.set(bodyDef.position.x, bodyDef.position.y);

                  body._animatedAngle = bodyDef.angle;
                } else {
                  bodyDef.type = comp.type;
                }

                var compPrivate = comp;
                var linearVelocity = compPrivate._linearVelocity;
                bodyDef.linearVelocity.Set(linearVelocity.x, linearVelocity.y);
                bodyDef.angularVelocity = toRadian(compPrivate._angularVelocity);

                var b2Body = this._world.CreateBody(bodyDef);

                b2Body.m_userData = body;
                body._imp = b2Body;

                this._bodies.push(body);
              };

              _proto.removeBody = function removeBody(body) {
                if (!this._bodies.includes(body)) {
                  return;
                }

                if (body.impl) {
                  body.impl.m_userData = null;

                  this._world.DestroyBody(body.impl);

                  body._imp = null;
                }

                array.remove(this._bodies, body);
                var comp = body.rigidBody;

                if (comp.type === ERigidBody2DType.Animated) {
                  array.remove(this._animatedBodies, body);
                }
              };

              _proto.registerContactFixture = function registerContactFixture(fixture) {
                this._contactListener.registerContactFixture(fixture);
              };

              _proto.unregisterContactFixture = function unregisterContactFixture(fixture) {
                this._contactListener.unregisterContactFixture(fixture);
              };

              _proto.testPoint = function testPoint(point) {
                var x = tempVec2_1.x = point.x / PHYSICS_2D_PTM_RATIO;
                var y = tempVec2_1.y = point.y / PHYSICS_2D_PTM_RATIO;
                var d = 0.2 / PHYSICS_2D_PTM_RATIO;
                tempB2AABB.lowerBound.x = x - d;
                tempB2AABB.lowerBound.y = y - d;
                tempB2AABB.upperBound.x = x + d;
                tempB2AABB.upperBound.y = y + d;
                var callback = this._aabbQueryCallback;
                callback.init(tempVec2_1);

                this._world.QueryAABB(callback, tempB2AABB);

                var fixtures = callback.getFixtures();
                testResults.length = 0;

                for (var i = 0; i < fixtures.length; i++) {
                  var collider = fixtures[i].m_userData.collider;

                  if (!testResults.includes(collider)) {
                    testResults.push(collider);
                  }
                }

                return testResults;
              };

              _proto.testAABB = function testAABB(rect) {
                tempB2AABB.lowerBound.x = rect.xMin / PHYSICS_2D_PTM_RATIO;
                tempB2AABB.lowerBound.y = rect.yMin / PHYSICS_2D_PTM_RATIO;
                tempB2AABB.upperBound.x = rect.xMax / PHYSICS_2D_PTM_RATIO;
                tempB2AABB.upperBound.y = rect.yMax / PHYSICS_2D_PTM_RATIO;
                var callback = this._aabbQueryCallback;
                callback.init();

                this._world.QueryAABB(callback, tempB2AABB);

                var fixtures = callback.getFixtures();
                testResults.length = 0;

                for (var i = 0; i < fixtures.length; i++) {
                  var collider = fixtures[i].m_userData.collider;

                  if (!testResults.includes(collider)) {
                    testResults.push(collider);
                  }
                }

                return testResults;
              };

              _proto.drawDebug = function drawDebug() {
                this._checkDebugDrawValid();

                if (!this._debugGraphics) {
                  return;
                }

                this._debugGraphics.clear();

                this._world.DrawDebugData();
              };

              _proto._onBeginContact = function _onBeginContact(b2contact) {
                var c = PhysicsContact.get(b2contact);
                c.emit(Contact2DType.BEGIN_CONTACT);
              };

              _proto._onEndContact = function _onEndContact(b2contact) {
                var c = b2contact.m_userData;

                if (!c) {
                  return;
                }

                c.emit(Contact2DType.END_CONTACT);
                PhysicsContact.put(b2contact);
              };

              _proto._onPreSolve = function _onPreSolve(b2contact) {
                var c = b2contact.m_userData;

                if (!c) {
                  return;
                }

                c.emit(Contact2DType.PRE_SOLVE);
              };

              _proto._onPostSolve = function _onPostSolve(b2contact, impulse) {
                var c = b2contact.m_userData;

                if (!c) {
                  return;
                }

                c._setImpulse(impulse);

                c.emit(Contact2DType.POST_SOLVE);

                c._setImpulse(null);
              };

              _createClass(b2PhysicsWorld, [{
                key: "impl",
                get: function get() {
                  return this._world;
                }
              }, {
                key: "debugDrawFlags",
                get: function get() {
                  return this._debugDrawFlags;
                },
                set: function set(v) {

                  if (!v) {
                    if (this._debugGraphics) {
                      this._debugGraphics.node.parent = null;
                    }
                  }

                  this._debugDrawFlags = v;
                }
              }]);

              return b2PhysicsWorld;
            }();

            var tempVec3$1 = new Vec3();
            var tempVec2_1$1 = new box2d_1.Vec2();
            var b2RigidBody2D = function () {
              function b2RigidBody2D() {
                this._animatedPos = new Vec2();
                this._animatedAngle = 0;
                this._body = null;
                this._inited = false;
              }

              var _proto = b2RigidBody2D.prototype;

              _proto.initialize = function initialize(com) {
                this._rigidBody = com;

                PhysicsSystem2D.instance._callAfterStep(this, this._init);
              };

              _proto.onDestroy = function onDestroy() {
                PhysicsSystem2D.instance._callAfterStep(this, this._destroy);
              };

              _proto.onEnable = function onEnable() {
                this.setActive(true);
              };

              _proto.onDisable = function onDisable() {
                this.setActive(false);
              };

              _proto._registerNodeEvents = function _registerNodeEvents() {
                var node = this.rigidBody.node;
                node.on(NodeEventType.TRANSFORM_CHANGED, this._onNodeTransformChanged, this);
              };

              _proto._unregisterNodeEvents = function _unregisterNodeEvents() {
                var node = this.rigidBody.node;
                node.off(NodeEventType.TRANSFORM_CHANGED, this._onNodeTransformChanged, this);
              };

              _proto._onNodeTransformChanged = function _onNodeTransformChanged(type) {
                if (PhysicsSystem2D.instance.stepping) {
                  return;
                }

                if (type & Node.TransformBit.SCALE) {
                  var colliders = this.rigidBody.getComponents(Collider2D);

                  for (var i = 0; i < colliders.length; i++) {
                    colliders[i].apply();
                  }
                }

                if (type & Node.TransformBit.POSITION) {
                  this.syncPositionToPhysics(true);
                }

                if (type & Node.TransformBit.ROTATION) {
                  this.syncRotationToPhysics(true);
                }
              };

              _proto._init = function _init() {
                if (this._inited) {
                  return;
                }

                this._registerNodeEvents();

                PhysicsSystem2D.instance.physicsWorld.addBody(this);
                this._inited = true;
              };

              _proto._destroy = function _destroy() {
                if (!this._inited) return;
                PhysicsSystem2D.instance.physicsWorld.removeBody(this);

                this._unregisterNodeEvents();

                this._inited = false;
              };

              _proto.animate = function animate(dt) {
                var b2body = this._body;
                if (!b2body) return;
                var b2Pos = b2body.GetPosition();
                b2body.SetAwake(true);
                var timeStep = 1 / dt;
                tempVec2_1$1.x = (this._animatedPos.x - b2Pos.x) * timeStep;
                tempVec2_1$1.y = (this._animatedPos.y - b2Pos.y) * timeStep;
                b2body.SetLinearVelocity(tempVec2_1$1);
                var b2Rotation = b2body.GetAngle();
                b2body.SetAngularVelocity((this._animatedAngle - b2Rotation) * timeStep);
              };

              _proto.syncPositionToPhysics = function syncPositionToPhysics(enableAnimated) {
                if (enableAnimated === void 0) {
                  enableAnimated = false;
                }

                var b2body = this._body;
                if (!b2body) return;
                var pos = this._rigidBody.node.worldPosition;
                var temp;
                var bodyType = this._rigidBody.type;

                if (bodyType === ERigidBody2DType.Animated) {
                  temp = b2body.GetLinearVelocity();
                } else {
                  temp = b2body.GetPosition();
                }

                temp.x = pos.x / PHYSICS_2D_PTM_RATIO;
                temp.y = pos.y / PHYSICS_2D_PTM_RATIO;

                if (bodyType === ERigidBody2DType.Animated && enableAnimated) {
                  this._animatedPos.set(temp.x, temp.y);
                } else {
                  b2body.SetTransformVec(temp, b2body.GetAngle());
                }
              };

              _proto.syncRotationToPhysics = function syncRotationToPhysics(enableAnimated) {
                if (enableAnimated === void 0) {
                  enableAnimated = false;
                }

                var b2body = this._body;
                if (!b2body) return;
                var rotation = toRadian(this._rigidBody.node.eulerAngles.z);
                var bodyType = this._rigidBody.type;

                if (bodyType === ERigidBody2DType.Animated && enableAnimated) {
                  this._animatedAngle = rotation;
                } else {
                  b2body.SetTransformVec(b2body.GetPosition(), rotation);
                }
              };

              _proto.resetVelocity = function resetVelocity() {
                var b2body = this._body;
                if (!b2body) return;
                var temp = b2body.m_linearVelocity;
                temp.Set(0, 0);
                b2body.SetLinearVelocity(temp);
                b2body.SetAngularVelocity(0);
              };

              _proto.setType = function setType(v) {
                this._body.SetType(v);
              };

              _proto.setLinearDamping = function setLinearDamping(v) {
                this._body.SetLinearDamping(v);
              };

              _proto.setAngularDamping = function setAngularDamping(v) {
                this._body.SetAngularDamping(v);
              };

              _proto.setGravityScale = function setGravityScale(v) {
                this._body.SetGravityScale(v);
              };

              _proto.setFixedRotation = function setFixedRotation(v) {
                this._body.SetFixedRotation(v);
              };

              _proto.setAllowSleep = function setAllowSleep(v) {
                this._body.SetSleepingAllowed(v);
              };

              _proto.isActive = function isActive() {
                return this._body.IsActive();
              };

              _proto.setActive = function setActive(v) {
                this._body.SetActive(v);
              };

              _proto.wakeUp = function wakeUp() {
                this._body.SetAwake(true);
              };

              _proto.sleep = function sleep() {
                this._body.SetAwake(false);
              };

              _proto.getMass = function getMass() {
                return this._body.GetMass();
              };

              _proto.setLinearVelocity = function setLinearVelocity(v) {
                this._body.SetLinearVelocity(v);
              };

              _proto.getLinearVelocity = function getLinearVelocity(out) {
                var velocity = this._body.GetLinearVelocity();

                out.x = velocity.x;
                out.y = velocity.y;
                return out;
              };

              _proto.getLinearVelocityFromWorldPoint = function getLinearVelocityFromWorldPoint(worldPoint, out) {
                tempVec2_1$1.Set(worldPoint.x / PHYSICS_2D_PTM_RATIO, worldPoint.y / PHYSICS_2D_PTM_RATIO);

                this._body.GetLinearVelocityFromWorldPoint(tempVec2_1$1, out);

                out.x *= PHYSICS_2D_PTM_RATIO;
                out.y *= PHYSICS_2D_PTM_RATIO;
                return out;
              };

              _proto.setAngularVelocity = function setAngularVelocity(v) {
                this._body.SetAngularVelocity(v);
              };

              _proto.getAngularVelocity = function getAngularVelocity() {
                return toDegree(this._body.GetAngularVelocity());
              };

              _proto.getLocalVector = function getLocalVector(worldVector, out) {
                out = out || new Vec2();
                tempVec2_1$1.Set(worldVector.x / PHYSICS_2D_PTM_RATIO, worldVector.y / PHYSICS_2D_PTM_RATIO);

                this._body.GetLocalVector(tempVec2_1$1, out);

                out.x *= PHYSICS_2D_PTM_RATIO;
                out.y *= PHYSICS_2D_PTM_RATIO;
                return out;
              };

              _proto.getWorldVector = function getWorldVector(localVector, out) {
                tempVec2_1$1.Set(localVector.x / PHYSICS_2D_PTM_RATIO, localVector.y / PHYSICS_2D_PTM_RATIO);

                this._body.GetWorldVector(tempVec2_1$1, out);

                out.x *= PHYSICS_2D_PTM_RATIO;
                out.y *= PHYSICS_2D_PTM_RATIO;
                return out;
              };

              _proto.getLocalPoint = function getLocalPoint(worldPoint, out) {
                out = out || new Vec2();
                tempVec2_1$1.Set(worldPoint.x / PHYSICS_2D_PTM_RATIO, worldPoint.y / PHYSICS_2D_PTM_RATIO);

                this._body.GetLocalPoint(tempVec2_1$1, out);

                out.x *= PHYSICS_2D_PTM_RATIO;
                out.y *= PHYSICS_2D_PTM_RATIO;
                return out;
              };

              _proto.getWorldPoint = function getWorldPoint(localPoint, out) {
                out = out || new Vec2();
                tempVec2_1$1.Set(localPoint.x / PHYSICS_2D_PTM_RATIO, localPoint.y / PHYSICS_2D_PTM_RATIO);

                this._body.GetWorldPoint(tempVec2_1$1, out);

                out.x *= PHYSICS_2D_PTM_RATIO;
                out.y *= PHYSICS_2D_PTM_RATIO;
                return out;
              };

              _proto.getLocalCenter = function getLocalCenter(out) {
                out = out || new Vec2();

                var pos = this._body.GetLocalCenter();

                out.x = pos.x * PHYSICS_2D_PTM_RATIO;
                out.y = pos.y * PHYSICS_2D_PTM_RATIO;
                return out;
              };

              _proto.getWorldCenter = function getWorldCenter(out) {
                out = out || new Vec2();

                var pos = this._body.GetWorldCenter();

                out.x = pos.x * PHYSICS_2D_PTM_RATIO;
                out.y = pos.y * PHYSICS_2D_PTM_RATIO;
                return out;
              };

              _proto.getInertia = function getInertia() {
                return this._body.GetInertia();
              };

              _proto.applyForce = function applyForce(force, point, wake) {
                if (this._body) {
                  tempVec2_1$1.Set(point.x / PHYSICS_2D_PTM_RATIO, point.y / PHYSICS_2D_PTM_RATIO);

                  this._body.ApplyForce(force, tempVec2_1$1, wake);
                }
              };

              _proto.applyForceToCenter = function applyForceToCenter(force, wake) {
                if (this._body) {
                  this._body.ApplyForceToCenter(force, wake);
                }
              };

              _proto.applyTorque = function applyTorque(torque, wake) {
                if (this._body) {
                  this._body.ApplyTorque(torque, wake);
                }
              };

              _proto.applyLinearImpulse = function applyLinearImpulse(impulse, point, wake) {
                if (this._body) {
                  tempVec2_1$1.Set(point.x / PHYSICS_2D_PTM_RATIO, point.y / PHYSICS_2D_PTM_RATIO);

                  this._body.ApplyLinearImpulse(impulse, tempVec2_1$1, wake);
                }
              };

              _proto.applyLinearImpulseToCenter = function applyLinearImpulseToCenter(impulse, wake) {
                if (this._body) {
                  this._body.ApplyLinearImpulse(impulse, this._body.GetPosition(), wake);
                }
              };

              _proto.applyAngularImpulse = function applyAngularImpulse(impulse, wake) {
                if (this._body) {
                  this._body.ApplyAngularImpulse(impulse, wake);
                }
              };

              _createClass(b2RigidBody2D, [{
                key: "impl",
                get: function get() {
                  return this._body;
                }
              }, {
                key: "_imp",
                set: function set(v) {
                  this._body = v;
                }
              }, {
                key: "rigidBody",
                get: function get() {
                  return this._rigidBody;
                }
              }, {
                key: "isAwake",
                get: function get() {
                  return this._body.IsAwake();
                }
              }, {
                key: "isSleeping",
                get: function get() {
                  return !this._body.IsAwake();
                }
              }]);

              return b2RigidBody2D;
            }();

            var tempFilter = new box2d_1.Filter();

            function getFilter(shape) {
              var comp = shape.collider;
              tempFilter.categoryBits = comp.group === PhysicsGroup$1.DEFAULT ? comp.body.group : comp.group;
              tempFilter.maskBits = PhysicsSystem2D.instance.collisionMatrix[tempFilter.categoryBits];
              return tempFilter;
            }

            var b2Shape2D = function () {
              function b2Shape2D() {
                this._shapes = [];
                this._fixtures = [];
                this._collider = null;
                this._body = null;
                this._inited = false;
                this._rect = new Rect$1();
              }

              var _proto = b2Shape2D.prototype;

              _proto.initialize = function initialize(comp) {
                this._collider = comp;
              };

              _proto.onLoad = function onLoad() {};

              _proto.onEnable = function onEnable() {
                PhysicsSystem2D.instance._callAfterStep(this, this._init);
              };

              _proto.onDisable = function onDisable() {
                PhysicsSystem2D.instance._callAfterStep(this, this._destroy);
              };

              _proto.start = function start() {};

              _proto.onGroupChanged = function onGroupChanged() {
                var filter = getFilter(this);

                this._fixtures.forEach(function (f) {
                  f.SetFilterData(filter);
                });
              };

              _proto.apply = function apply() {
                this._destroy();

                this._init();
              };

              _proto.getFixtureIndex = function getFixtureIndex(fixture) {
                return this._fixtures.indexOf(fixture);
              };

              _proto._createShapes = function _createShapes(scaleX, scaleY) {
                return [];
              };

              _proto._init = function _init() {
                var _body$impl;

                if (this._inited) return;
                var comp = this.collider;
                var body = comp.getComponent(RigidBody2D);
                if (!body) return;
                var innerBody = (_body$impl = body.impl) === null || _body$impl === void 0 ? void 0 : _body$impl.impl;
                if (!innerBody) return;
                var node = body.node;
                var scale = node.worldScale;
                var shapes = scale.x === 0 && scale.y === 0 ? [] : this._createShapes(scale.x, scale.y);
                var filter = getFilter(this);

                for (var i = 0; i < shapes.length; i++) {
                  var shape = shapes[i];
                  var fixDef = {
                    density: comp.density,
                    isSensor: comp.sensor,
                    friction: comp.friction,
                    restitution: comp.restitution,
                    shape: shape,
                    filter: filter
                  };
                  var fixture = innerBody.CreateFixture(fixDef);
                  fixture.m_userData = this;

                  if (body.enabledContactListener) {
                    PhysicsSystem2D.instance.physicsWorld.registerContactFixture(fixture);
                  }

                  this._shapes.push(shape);

                  this._fixtures.push(fixture);
                }

                this._body = innerBody;
                this._inited = true;
              };

              _proto._destroy = function _destroy() {
                if (!this._inited) return;
                var fixtures = this._fixtures;
                var body = this._body;

                for (var i = fixtures.length - 1; i >= 0; i--) {
                  var fixture = fixtures[i];
                  fixture.m_userData = null;
                  PhysicsSystem2D.instance.physicsWorld.unregisterContactFixture(fixture);

                  if (body) {
                    body.DestroyFixture(fixture);
                  }
                }

                this._body = null;
                this._fixtures.length = 0;
                this._shapes.length = 0;
                this._inited = false;
              };

              _createClass(b2Shape2D, [{
                key: "impl",
                get: function get() {
                  return this._shapes;
                }
              }, {
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }, {
                key: "worldAABB",
                get: function get() {
                  var MAX = 10e6;
                  var minX = MAX;
                  var minY = MAX;
                  var maxX = -MAX;
                  var maxY = -MAX;
                  var fixtures = this._fixtures;

                  for (var i = 0; i < fixtures.length; i++) {
                    var fixture = fixtures[i];
                    var count = fixture.GetShape().GetChildCount();

                    for (var j = 0; j < count; j++) {
                      var aabb = fixture.GetAABB(j);
                      if (aabb.lowerBound.x < minX) minX = aabb.lowerBound.x;
                      if (aabb.lowerBound.y < minY) minY = aabb.lowerBound.y;
                      if (aabb.upperBound.x > maxX) maxX = aabb.upperBound.x;
                      if (aabb.upperBound.y > maxY) maxY = aabb.upperBound.y;
                    }
                  }

                  minX *= PHYSICS_2D_PTM_RATIO;
                  minY *= PHYSICS_2D_PTM_RATIO;
                  maxX *= PHYSICS_2D_PTM_RATIO;
                  maxY *= PHYSICS_2D_PTM_RATIO;
                  var r = this._rect;
                  r.x = minX;
                  r.y = minY;
                  r.width = maxX - minX;
                  r.height = maxY - minY;
                  return r;
                }
              }]);

              return b2Shape2D;
            }();

            var tempAabb = new Rect$1();
            var b2BoxShape = function (_b2Shape2D) {
              _inheritsLoose(b2BoxShape, _b2Shape2D);

              function b2BoxShape() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _b2Shape2D.call.apply(_b2Shape2D, [this].concat(args)) || this;
                _this._worldPoints = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];
                return _this;
              }

              var _proto = b2BoxShape.prototype;

              _proto._createShapes = function _createShapes(scaleX, scaleY) {
                scaleX = Math.abs(scaleX);
                scaleY = Math.abs(scaleY);
                var comp = this.collider;
                var width = comp.size.width / 2 / PHYSICS_2D_PTM_RATIO * scaleX;
                var height = comp.size.height / 2 / PHYSICS_2D_PTM_RATIO * scaleY;
                var offsetX = comp.offset.x / PHYSICS_2D_PTM_RATIO * scaleX;
                var offsetY = comp.offset.y / PHYSICS_2D_PTM_RATIO * scaleY;
                var shape = new box2d_1.PolygonShape();
                shape.SetAsBox(width, height, new box2d_1.Vec2(offsetX, offsetY), 0);
                return [shape];
              };

              _createClass(b2BoxShape, [{
                key: "worldPoints",
                get: function get() {
                  var aabb = tempAabb;
                  var collider = this.collider;
                  var size = collider.size;
                  var offset = collider.offset;
                  aabb.x = offset.x - size.width / 2;
                  aabb.y = offset.y - size.height / 2;
                  aabb.width = size.width;
                  aabb.height = size.height;
                  var wps = this._worldPoints;
                  var wp0 = wps[0];
                  var wp1 = wps[1];
                  var wp2 = wps[2];
                  var wp3 = wps[3];
                  aabb.transformMat4ToPoints(collider.node.worldMatrix, wp0, wp1, wp2, wp3);
                  return wps;
                }
              }]);

              return b2BoxShape;
            }(b2Shape2D);

            var b2CircleShape = function (_b2Shape2D) {
              _inheritsLoose(b2CircleShape, _b2Shape2D);

              function b2CircleShape() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _b2Shape2D.call.apply(_b2Shape2D, [this].concat(args)) || this;
                _this._worldPosition = new Vec2();
                return _this;
              }

              var _proto = b2CircleShape.prototype;

              _proto._createShapes = function _createShapes(scaleX, scaleY) {
                scaleX = Math.abs(scaleX);
                scaleY = Math.abs(scaleY);
                var comp = this.collider;
                var offsetX = comp.offset.x / PHYSICS_2D_PTM_RATIO * scaleX;
                var offsetY = comp.offset.y / PHYSICS_2D_PTM_RATIO * scaleY;
                var shape = new box2d_1.CircleShape();
                shape.m_radius = comp.radius / PHYSICS_2D_PTM_RATIO * scaleX;
                shape.m_p.Set(offsetX, offsetY);
                return [shape];
              };

              _createClass(b2CircleShape, [{
                key: "worldRadius",
                get: function get() {
                  return this._shapes[0].m_radius * PHYSICS_2D_PTM_RATIO;
                }
              }, {
                key: "worldPosition",
                get: function get() {
                  var p = this._shapes[0].m_p;
                  return this._worldPosition.set(p.x * PHYSICS_2D_PTM_RATIO, p.y * PHYSICS_2D_PTM_RATIO);
                }
              }]);

              return b2CircleShape;
            }(b2Shape2D);

            var b2PolygonShape = function (_b2Shape2D) {
              _inheritsLoose(b2PolygonShape, _b2Shape2D);

              function b2PolygonShape() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _b2Shape2D.call.apply(_b2Shape2D, [this].concat(args)) || this;
                _this._worldPoints = [];
                return _this;
              }

              var _proto = b2PolygonShape.prototype;

              _proto._createShapes = function _createShapes(scaleX, scaleY) {
                var shapes = [];
                var comp = this.collider;
                var points = comp.points;

                if (points.length > 0 && points[0].equals(points[points.length - 1])) {
                  points.length -= 1;
                }

                var polys = ConvexPartition(points);
                var offset = comp.offset;

                for (var i = 0; i < polys.length; i++) {
                  var poly = polys[i];
                  var shape = null;
                  var vertices = [];
                  var firstVertice = null;

                  for (var j = 0, l = poly.length; j < l; j++) {
                    if (!shape) {
                      shape = new box2d_1.PolygonShape();
                    }

                    var p = poly[j];
                    var x = (p.x + offset.x) / PHYSICS_2D_PTM_RATIO * scaleX;
                    var y = (p.y + offset.y) / PHYSICS_2D_PTM_RATIO * scaleY;
                    var v = new box2d_1.Vec2(x, y);
                    vertices.push(v);

                    if (!firstVertice) {
                      firstVertice = v;
                    }

                    if (vertices.length === box2d_1.maxPolygonVertices) {
                      shape.Set(vertices, vertices.length);
                      shapes.push(shape);
                      shape = null;

                      if (j < l - 1) {
                        vertices = [firstVertice, vertices[vertices.length - 1]];
                      }
                    }
                  }

                  if (shape) {
                    shape.Set(vertices, vertices.length);
                    shapes.push(shape);
                  }
                }

                return shapes;
              };

              _createClass(b2PolygonShape, [{
                key: "worldPoints",
                get: function get() {
                  var comp = this.collider;
                  var points = comp.points;
                  var worldPoints = this._worldPoints;
                  var m = comp.node.worldMatrix;

                  for (var i = 0; i < points.length; i++) {
                    if (!worldPoints[i]) {
                      worldPoints[i] = new Vec2();
                    }

                    Vec2.transformMat4(worldPoints[i], points[i], m);
                  }

                  worldPoints.length = points.length;
                  return this._worldPoints;
                }
              }]);

              return b2PolygonShape;
            }(b2Shape2D);

            var b2Joint = function () {
              function b2Joint() {
                this._b2joint = null;
                this._jointComp = null;
                this._body = null;
                this._inited = false;
              }

              var _proto = b2Joint.prototype;

              _proto.initialize = function initialize(comp) {
                this._jointComp = comp;
              };

              _proto.onEnable = function onEnable() {
                PhysicsSystem2D.instance._callAfterStep(this, this._init);
              };

              _proto.onDisable = function onDisable() {
                PhysicsSystem2D.instance._callAfterStep(this, this._destroy);
              };

              _proto.start = function start() {
                PhysicsSystem2D.instance._callAfterStep(this, this._init);
              };

              _proto._init = function _init() {
                if (this._inited) return;
                var comp = this._jointComp;

                if (!comp.isValid) {
                  return;
                }

                this._body = comp.getComponent(RigidBody2D);

                var def = this._createJointDef();

                if (!def) {
                  return;
                }

                var connectedBody = comp.connectedBody;

                if (!connectedBody || !connectedBody.enabledInHierarchy) {
                  return;
                }

                def.bodyA = this._body.impl.impl;
                def.bodyB = connectedBody.impl.impl;
                def.collideConnected = comp.collideConnected;
                this._b2joint = PhysicsSystem2D.instance.physicsWorld.impl.CreateJoint(def);
                this._inited = true;
              };

              _proto._destroy = function _destroy() {
                if (!this._inited) return;
                PhysicsSystem2D.instance.physicsWorld.impl.DestroyJoint(this._b2joint);
                this._b2joint = null;
                this._inited = false;
              };

              _proto._createJointDef = function _createJointDef() {
                return null;
              };

              _proto.isValid = function isValid() {
                return this._b2joint && this._body && this._body.impl && this._jointComp && this._jointComp.connectedBody && this._jointComp.connectedBody.impl;
              };

              _createClass(b2Joint, [{
                key: "impl",
                get: function get() {
                  return this._b2joint;
                }
              }, {
                key: "comp",
                get: function get() {
                  return this._jointComp;
                }
              }, {
                key: "body",
                get: function get() {
                  return this._body;
                }
              }]);

              return b2Joint;
            }();

            var tempB2Vec2 = new box2d_1.Vec2();
            var b2MouseJoint = function (_b2Joint) {
              _inheritsLoose(b2MouseJoint, _b2Joint);

              function b2MouseJoint() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _b2Joint.call.apply(_b2Joint, [this].concat(args)) || this;
                _this._touchPoint = new Vec2();
                _this._isTouched = false;
                return _this;
              }

              var _proto = b2MouseJoint.prototype;

              _proto.setTarget = function setTarget(v) {
                if (this._b2joint) {
                  tempB2Vec2.x = v.x / PHYSICS_2D_PTM_RATIO;
                  tempB2Vec2.y = v.y / PHYSICS_2D_PTM_RATIO;

                  this._b2joint.SetTarget(tempB2Vec2);
                }
              };

              _proto.setDampingRatio = function setDampingRatio(v) {
                if (this._b2joint) {
                  this._b2joint.SetDampingRatio(v);
                }
              };

              _proto.setFrequency = function setFrequency(v) {
                if (this._b2joint) {
                  this._b2joint.SetFrequency(v);
                }
              };

              _proto.setMaxForce = function setMaxForce(v) {
                if (this._b2joint) {
                  this._b2joint.SetMaxForce(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var def = new box2d_1.MouseJointDef();
                var comp = this._jointComp;
                def.target.Set(this._touchPoint.x / PHYSICS_2D_PTM_RATIO, this._touchPoint.y / PHYSICS_2D_PTM_RATIO);
                def.maxForce = comp.maxForce;
                def.dampingRatio = comp.dampingRatio;
                def.frequencyHz = comp.frequency;
                return def;
              };

              _proto.initialize = function initialize(comp) {
                _b2Joint.prototype.initialize.call(this, comp);

                var canvas = find('Canvas');

                if (canvas) {
                  canvas.on(NodeEventType.TOUCH_START, this.onTouchBegan, this);
                  canvas.on(NodeEventType.TOUCH_MOVE, this.onTouchMove, this);
                  canvas.on(NodeEventType.TOUCH_END, this.onTouchEnd, this);
                  canvas.on(NodeEventType.TOUCH_CANCEL, this.onTouchEnd, this);
                }
              };

              _proto.onEnable = function onEnable() {};

              _proto.start = function start() {};

              _proto.onTouchBegan = function onTouchBegan(event) {
                this._isTouched = true;

                var target = this._touchPoint.set(event.getUILocation());

                var world = PhysicsSystem2D.instance.physicsWorld;
                var colliders = world.testPoint(target);
                if (colliders.length <= 0) return;
                var body = colliders[0].body;
                body.wakeUp();
                var comp = this._jointComp;
                comp.connectedBody = body;

                this._init();

                this.setMaxForce(comp.maxForce * body.getMass());
                this.setTarget(target);
              };

              _proto.onTouchMove = function onTouchMove(event) {
                this._touchPoint = event.getUILocation();
              };

              _proto.onTouchEnd = function onTouchEnd(event) {
                this._destroy();

                this._isTouched = false;
              };

              _proto.update = function update() {
                if (!this._isTouched || !this.isValid()) {
                  return;
                }

                this.setTarget(this._touchPoint);
              };

              return b2MouseJoint;
            }(b2Joint);

            var b2DistanceJoint = function (_b2Joint) {
              _inheritsLoose(b2DistanceJoint, _b2Joint);

              function b2DistanceJoint() {
                return _b2Joint.apply(this, arguments) || this;
              }

              var _proto = b2DistanceJoint.prototype;

              _proto.setMaxLength = function setMaxLength(v) {
                if (this._b2joint) {
                  this._b2joint.SetMaxLength(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var comp = this._jointComp;
                var def = new box2d_1.RopeJointDef();
                def.localAnchorA.Set(comp.anchor.x / PHYSICS_2D_PTM_RATIO, comp.anchor.y / PHYSICS_2D_PTM_RATIO);
                def.localAnchorB.Set(comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO);
                def.maxLength = comp.maxLength / PHYSICS_2D_PTM_RATIO;
                return def;
              };

              return b2DistanceJoint;
            }(b2Joint);

            var b2SpringJoint = function (_b2Joint) {
              _inheritsLoose(b2SpringJoint, _b2Joint);

              function b2SpringJoint() {
                return _b2Joint.apply(this, arguments) || this;
              }

              var _proto = b2SpringJoint.prototype;

              _proto.setDampingRatio = function setDampingRatio(v) {
                if (this._b2joint) {
                  this._b2joint.SetDampingRatio(v);
                }
              };

              _proto.setFrequency = function setFrequency(v) {
                if (this._b2joint) {
                  this._b2joint.SetFrequency(v);
                }
              };

              _proto.setDistance = function setDistance(v) {
                if (this._b2joint) {
                  this._b2joint.SetLength(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var comp = this._jointComp;
                var def = new box2d_1.DistanceJointDef();
                def.localAnchorA.Set(comp.anchor.x / PHYSICS_2D_PTM_RATIO, comp.anchor.y / PHYSICS_2D_PTM_RATIO);
                def.localAnchorB.Set(comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO);
                def.length = comp.distance / PHYSICS_2D_PTM_RATIO;
                def.dampingRatio = comp.dampingRatio;
                def.frequencyHz = comp.frequency;
                return def;
              };

              return b2SpringJoint;
            }(b2Joint);

            var b2RelativeJoint = function (_b2Joint) {
              _inheritsLoose(b2RelativeJoint, _b2Joint);

              function b2RelativeJoint() {
                return _b2Joint.apply(this, arguments) || this;
              }

              var _proto = b2RelativeJoint.prototype;

              _proto.setMaxForce = function setMaxForce(v) {
                if (this._b2joint) {
                  this._b2joint.SetMaxForce(v);
                }
              };

              _proto.setAngularOffset = function setAngularOffset(v) {
                if (this._b2joint) {
                  this._b2joint.SetAngularOffset(toRadian(v));
                }
              };

              _proto.setLinearOffset = function setLinearOffset(v) {
                if (this._b2joint) {
                  this._b2joint.SetLinearOffset(new box2d_1.Vec2(v.x / PHYSICS_2D_PTM_RATIO, v.y / PHYSICS_2D_PTM_RATIO));
                }
              };

              _proto.setCorrectionFactor = function setCorrectionFactor(v) {
                if (this._b2joint) {
                  this._b2joint.m_correctionFactor = v;
                }
              };

              _proto.setMaxTorque = function setMaxTorque(v) {
                if (this._b2joint) {
                  this._b2joint.SetMaxTorque(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var comp = this._jointComp;
                var def = new box2d_1.MotorJointDef();
                def.linearOffset.Set(comp.linearOffset.x / PHYSICS_2D_PTM_RATIO, comp.linearOffset.y / PHYSICS_2D_PTM_RATIO);
                def.angularOffset = toRadian(comp.angularOffset);
                def.maxForce = comp.maxForce;
                def.maxTorque = comp.maxTorque;
                def.correctionFactor = comp.correctionFactor;
                return def;
              };

              return b2RelativeJoint;
            }(b2Joint);

            var b2SliderJoint = function (_b2Joint) {
              _inheritsLoose(b2SliderJoint, _b2Joint);

              function b2SliderJoint() {
                return _b2Joint.apply(this, arguments) || this;
              }

              var _proto = b2SliderJoint.prototype;

              _proto.enableLimit = function enableLimit(v) {
                if (this._b2joint) {
                  this._b2joint.EnableLimit(v);
                }
              };

              _proto.setLowerLimit = function setLowerLimit(v) {
                this.updateLimits();
              };

              _proto.setUpperLimit = function setUpperLimit(v) {
                this.updateLimits();
              };

              _proto.updateLimits = function updateLimits() {
                if (this._b2joint) {
                  var comp = this._jointComp;

                  this._b2joint.SetLimits(comp.lowerLimit / PHYSICS_2D_PTM_RATIO, comp.upperLimit / PHYSICS_2D_PTM_RATIO);
                }
              };

              _proto.enableMotor = function enableMotor(v) {
                if (this._b2joint) {
                  this._b2joint.EnableMotor(v);
                }
              };

              _proto.setMaxMotorForce = function setMaxMotorForce(v) {
                if (this._b2joint) {
                  this._b2joint.SetMaxMotorForce(v);
                }
              };

              _proto.setMotorSpeed = function setMotorSpeed(v) {
                if (this._b2joint) {
                  this._b2joint.SetMotorSpeed(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var comp = this._jointComp;
                var def = new box2d_1.PrismaticJointDef();
                def.localAnchorA.Set(comp.anchor.x / PHYSICS_2D_PTM_RATIO, comp.anchor.y / PHYSICS_2D_PTM_RATIO);
                def.localAnchorB.Set(comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO);
                var angle = toRadian(comp.angle);
                def.localAxisA.Set(Math.cos(angle), Math.sin(angle));
                def.referenceAngle = 0;
                def.enableLimit = comp.enableLimit;
                def.lowerTranslation = comp.lowerLimit / PHYSICS_2D_PTM_RATIO;
                def.upperTranslation = comp.upperLimit / PHYSICS_2D_PTM_RATIO;
                def.enableMotor = comp.enableMotor;
                def.maxMotorForce = comp.maxMotorForce;
                def.motorSpeed = comp.motorSpeed;
                return def;
              };

              return b2SliderJoint;
            }(b2Joint);

            var b2FixedJoint = function (_b2Joint) {
              _inheritsLoose(b2FixedJoint, _b2Joint);

              function b2FixedJoint() {
                return _b2Joint.apply(this, arguments) || this;
              }

              var _proto = b2FixedJoint.prototype;

              _proto.setFrequency = function setFrequency(v) {
                if (this._b2joint) {
                  this._b2joint.SetFrequency(v);
                }
              };

              _proto.setDampingRatio = function setDampingRatio(v) {
                if (this._b2joint) {
                  this._b2joint.SetDampingRatio(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var comp = this._jointComp;
                var def = new box2d_1.WeldJointDef();
                def.localAnchorA.Set(comp.anchor.x / PHYSICS_2D_PTM_RATIO, comp.anchor.y / PHYSICS_2D_PTM_RATIO);
                def.localAnchorB.Set(comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO);
                def.referenceAngle = 0;
                def.frequencyHz = comp.frequency;
                def.dampingRatio = comp.dampingRatio;
                return def;
              };

              return b2FixedJoint;
            }(b2Joint);

            var b2WheelJoint = function (_b2Joint) {
              _inheritsLoose(b2WheelJoint, _b2Joint);

              function b2WheelJoint() {
                return _b2Joint.apply(this, arguments) || this;
              }

              var _proto = b2WheelJoint.prototype;

              _proto.setDampingRatio = function setDampingRatio(v) {
                if (this._b2joint) {
                  this._b2joint.SetSpringDampingRatio(v);
                }
              };

              _proto.setFrequency = function setFrequency(v) {
                if (this._b2joint) {
                  this._b2joint.SetSpringFrequencyHz(v);
                }
              };

              _proto.enableMotor = function enableMotor(v) {
                if (this._b2joint) {
                  this._b2joint.EnableMotor(v);
                }
              };

              _proto.setMaxMotorTorque = function setMaxMotorTorque(v) {
                if (this._b2joint) {
                  this._b2joint.SetMaxMotorTorque(v);
                }
              };

              _proto.setMotorSpeed = function setMotorSpeed(v) {
                if (this._b2joint) {
                  this._b2joint.SetMotorSpeed(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var comp = this._jointComp;
                var def = new box2d_1.WheelJointDef();
                def.localAnchorA.Set(comp.anchor.x / PHYSICS_2D_PTM_RATIO, comp.anchor.y / PHYSICS_2D_PTM_RATIO);
                def.localAnchorB.Set(comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO);
                var angle = toRadian(comp.angle);
                def.localAxisA.Set(Math.cos(angle), Math.sin(angle));
                def.maxMotorTorque = comp.maxMotorTorque;
                def.motorSpeed = toRadian(comp.motorSpeed);
                def.enableMotor = comp.enableMotor;
                def.dampingRatio = comp.dampingRatio;
                def.frequencyHz = comp.frequency;
                return def;
              };

              return b2WheelJoint;
            }(b2Joint);

            var b2HingeJoint = function (_b2Joint) {
              _inheritsLoose(b2HingeJoint, _b2Joint);

              function b2HingeJoint() {
                return _b2Joint.apply(this, arguments) || this;
              }

              var _proto = b2HingeJoint.prototype;

              _proto.enableLimit = function enableLimit(v) {
                if (this._b2joint) {
                  this._b2joint.EnableLimit(v);
                }
              };

              _proto.setLowerAngle = function setLowerAngle(v) {
                this.updateLimits();
              };

              _proto.setUpperAngle = function setUpperAngle(v) {
                this.updateLimits();
              };

              _proto.updateLimits = function updateLimits() {
                if (this._b2joint) {
                  var comp = this._jointComp;

                  this._b2joint.SetLimits(toRadian(comp.lowerAngle), toRadian(comp.upperAngle));
                }
              };

              _proto.enableMotor = function enableMotor(v) {
                if (this._b2joint) {
                  this._b2joint.EnableMotor(v);
                }
              };

              _proto.setMaxMotorTorque = function setMaxMotorTorque(v) {
                if (this._b2joint) {
                  this._b2joint.SetMaxMotorTorque(v);
                }
              };

              _proto.setMotorSpeed = function setMotorSpeed(v) {
                if (this._b2joint) {
                  this._b2joint.SetMotorSpeed(v);
                }
              };

              _proto._createJointDef = function _createJointDef() {
                var comp = this._jointComp;
                var def = new box2d_1.RevoluteJointDef();
                def.localAnchorA.Set(comp.anchor.x / PHYSICS_2D_PTM_RATIO, comp.anchor.y / PHYSICS_2D_PTM_RATIO);
                def.localAnchorB.Set(comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO);
                def.enableMotor = comp.enableMotor;
                def.maxMotorTorque = comp.maxMotorTorque;
                def.motorSpeed = toRadian(comp.motorSpeed);
                def.enableLimit = comp.enableLimit;
                def.lowerAngle = comp.lowerAngle;
                def.upperAngle = comp.upperAngle;
                return def;
              };

              return b2HingeJoint;
            }(b2Joint);

            select('box2d', {
              PhysicsWorld: b2PhysicsWorld,
              RigidBody: b2RigidBody2D,
              BoxShape: b2BoxShape,
              CircleShape: b2CircleShape,
              PolygonShape: b2PolygonShape,
              MouseJoint: b2MouseJoint,
              DistanceJoint: b2DistanceJoint,
              SpringJoint: b2SpringJoint,
              RelativeJoint: b2RelativeJoint,
              SliderJoint: b2SliderJoint,
              FixedJoint: b2FixedJoint,
              WheelJoint: b2WheelJoint,
              HingeJoint: b2HingeJoint
            });

            function wireframe(indices) {
              var offsets = [[0, 1], [1, 2], [2, 0]];
              var lines = [];
              var lineIDs = {};

              for (var i = 0; i < indices.length; i += 3) {
                for (var k = 0; k < 3; ++k) {
                  var i1 = indices[i + offsets[k][0]];
                  var i2 = indices[i + offsets[k][1]];
                  var id = i1 > i2 ? i2 << 16 | i1 : i1 << 16 | i2;

                  if (lineIDs[id] === undefined) {
                    lineIDs[id] = 0;
                    lines.push(i1, i2);
                  }
                }
              }

              return lines;
            }
            function invWinding(indices) {
              var newIB = [];

              for (var i = 0; i < indices.length; i += 3) {
                newIB.push(indices[i], indices[i + 2], indices[i + 1]);
              }

              return newIB;
            }
            function toWavefrontOBJ(primitive, scale) {
              if (scale === void 0) {
                scale = 1;
              }

              if (!primitive.indices || !primitive.uvs || !primitive.normals || primitive.primitiveMode !== undefined && primitive.primitiveMode !== PrimitiveMode.TRIANGLE_LIST) {
                return '';
              }

              var v = primitive.positions;
              var t = primitive.uvs;
              var n = primitive.normals;
              var IB = primitive.indices;

              var V = function V(i) {
                return IB[i] + 1 + "/" + (IB[i] + 1) + "/" + (IB[i] + 1);
              };

              var content = '';

              for (var i = 0; i < v.length; i += 3) {
                content += "v " + v[i] * scale + " " + v[i + 1] * scale + " " + v[i + 2] * scale + "\n";
              }

              for (var _i = 0; _i < t.length; _i += 2) {
                content += "vt " + t[_i] + " " + t[_i + 1] + "\n";
              }

              for (var _i2 = 0; _i2 < n.length; _i2 += 3) {
                content += "vn " + n[_i2] + " " + n[_i2 + 1] + " " + n[_i2 + 2] + "\n";
              }

              for (var _i3 = 0; _i3 < IB.length; _i3 += 3) {
                content += "f " + V(_i3) + " " + V(_i3 + 1) + " " + V(_i3 + 2) + "\n";
              }

              return content;
            }
            function normals(positions, nms, length) {
              if (length === void 0) {
                length = 1;
              }

              var verts = new Array(2 * positions.length);

              for (var i = 0; i < positions.length / 3; ++i) {
                var i3 = 3 * i;
                var i6 = 6 * i;
                verts[i6 + 0] = positions[i3 + 0];
                verts[i6 + 1] = positions[i3 + 1];
                verts[i6 + 2] = positions[i3 + 2];
                verts[i6 + 3] = positions[i3 + 0] + nms[i3 + 0] * length;
                verts[i6 + 4] = positions[i3 + 1] + nms[i3 + 1] * length;
                verts[i6 + 5] = positions[i3 + 2] + nms[i3 + 2] * length;
              }

              return verts;
            }

            function cone(radius, height, opts) {
              if (radius === void 0) {
                radius = 0.5;
              }

              if (height === void 0) {
                height = 1;
              }

              if (opts === void 0) {
                opts = {};
              }

              return cylinder(0, radius, height, opts);
            }

            function quad(options) {
              var normalizedOptions = applyDefaultGeometryOptions(options);
              var result = {
                positions: [-0.5, -0.5, 0, -0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, -0.5, 0],
                indices: [0, 3, 1, 3, 2, 1],
                minPos: {
                  x: -0.5,
                  y: -0.5,
                  z: 0
                },
                maxPos: {
                  x: 0.5,
                  y: 0.5,
                  z: 0
                },
                boundingRadius: Math.sqrt(0.5 * 0.5 + 0.5 * 0.5)
              };

              if (normalizedOptions.includeNormal !== false) {
                result.normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];
              }

              if (normalizedOptions.includeUV !== false) {
                result.uvs = [0, 0, 0, 1, 1, 1, 1, 0];
              }

              return result;
            }

            function sphere(radius, opts) {
              if (radius === void 0) {
                radius = 0.5;
              }

              if (opts === void 0) {
                opts = {};
              }

              var segments = opts.segments !== undefined ? opts.segments : 32;
              var positions = [];
              var normals = [];
              var uvs = [];
              var indices = [];
              var minPos = new Vec3(-radius, -radius, -radius);
              var maxPos = new Vec3(radius, radius, radius);
              var boundingRadius = radius;

              for (var lat = 0; lat <= segments; ++lat) {
                var theta = lat * Math.PI / segments;
                var sinTheta = Math.sin(theta);
                var cosTheta = -Math.cos(theta);

                for (var lon = 0; lon <= segments; ++lon) {
                  var phi = lon * 2 * Math.PI / segments - Math.PI / 2.0;
                  var sinPhi = Math.sin(phi);
                  var cosPhi = Math.cos(phi);
                  var x = sinPhi * sinTheta;
                  var y = cosTheta;
                  var z = cosPhi * sinTheta;
                  var u = lon / segments;
                  var v = lat / segments;
                  positions.push(x * radius, y * radius, z * radius);
                  normals.push(x, y, z);
                  uvs.push(u, v);

                  if (lat < segments && lon < segments) {
                    var seg1 = segments + 1;
                    var a = seg1 * lat + lon;
                    var b = seg1 * (lat + 1) + lon;
                    var c = seg1 * (lat + 1) + lon + 1;
                    var d = seg1 * lat + lon + 1;
                    indices.push(a, d, b);
                    indices.push(d, c, b);
                  }
                }
              }

              return {
                positions: positions,
                indices: indices,
                normals: normals,
                uvs: uvs,
                minPos: minPos,
                maxPos: maxPos,
                boundingRadius: boundingRadius
              };
            }

            function torus(radius, tube, opts) {
              if (radius === void 0) {
                radius = 0.4;
              }

              if (tube === void 0) {
                tube = 0.1;
              }

              if (opts === void 0) {
                opts = {};
              }

              var radialSegments = opts.radialSegments || 32;
              var tubularSegments = opts.tubularSegments || 32;
              var arc = opts.arc || 2.0 * Math.PI;
              var positions = [];
              var normals = [];
              var uvs = [];
              var indices = [];
              var minPos = new Vec3(-radius - tube, -tube, -radius - tube);
              var maxPos = new Vec3(radius + tube, tube, radius + tube);
              var boundingRadius = radius + tube;

              for (var j = 0; j <= radialSegments; j++) {
                for (var i = 0; i <= tubularSegments; i++) {
                  var u = i / tubularSegments;
                  var v = j / radialSegments;
                  var u1 = u * arc;
                  var v1 = v * Math.PI * 2;
                  var x = (radius + tube * Math.cos(v1)) * Math.sin(u1);
                  var y = tube * Math.sin(v1);
                  var z = (radius + tube * Math.cos(v1)) * Math.cos(u1);
                  var nx = Math.sin(u1) * Math.cos(v1);
                  var ny = Math.sin(v1);
                  var nz = Math.cos(u1) * Math.cos(v1);
                  positions.push(x, y, z);
                  normals.push(nx, ny, nz);
                  uvs.push(u, v);

                  if (i < tubularSegments && j < radialSegments) {
                    var seg1 = tubularSegments + 1;
                    var a = seg1 * j + i;
                    var b = seg1 * (j + 1) + i;
                    var c = seg1 * (j + 1) + i + 1;
                    var d = seg1 * j + i + 1;
                    indices.push(a, d, b);
                    indices.push(d, c, b);
                  }
                }
              }

              return {
                positions: positions,
                normals: normals,
                uvs: uvs,
                indices: indices,
                minPos: minPos,
                maxPos: maxPos,
                boundingRadius: boundingRadius
              };
            }

            function applyDefaultCircleOptions(options) {
              options = applyDefaultGeometryOptions(options);
              options.segments = 64;
              return options;
            }

            function circle(options) {
              var normalizedOptions = applyDefaultCircleOptions(options);
              var segments = normalizedOptions.segments;
              var positions = new Array(3 * (segments + 1));
              positions[0] = 0;
              positions[1] = 0;
              positions[2] = 0;
              var indices = new Array(1 + segments * 2);
              indices[0] = 0;
              var step = Math.PI * 2 / segments;

              for (var iSegment = 0; iSegment < segments; ++iSegment) {
                var angle = step * iSegment;
                var x = Math.cos(angle);
                var y = Math.sin(angle);
                var p = (iSegment + 1) * 3;
                positions[p + 0] = x;
                positions[p + 1] = y;
                positions[p + 2] = 0;
                var i = iSegment * 2;
                indices[1 + i] = iSegment + 1;
                indices[1 + (i + 1)] = iSegment + 2;
              }

              if (segments > 0) {
                indices[indices.length - 1] = 1;
              }

              var result = {
                positions: positions,
                indices: indices,
                minPos: {
                  x: 1,
                  y: 1,
                  z: 0
                },
                maxPos: {
                  x: -1,
                  y: -1,
                  z: 0
                },
                boundingRadius: 1,
                primitiveMode: PrimitiveMode.TRIANGLE_FAN
              };
              return result;
            }

            function translate(geometry, offset) {
              var x = offset.x || 0;
              var y = offset.y || 0;
              var z = offset.z || 0;
              var nVertex = Math.floor(geometry.positions.length / 3);

              for (var iVertex = 0; iVertex < nVertex; ++iVertex) {
                var iX = iVertex * 3;
                var iY = iVertex * 3 + 1;
                var iZ = iVertex * 3 + 2;
                geometry.positions[iX] += x;
                geometry.positions[iY] += y;
                geometry.positions[iZ] += z;
              }

              if (geometry.minPos) {
                geometry.minPos.x += x;
                geometry.minPos.y += y;
                geometry.minPos.z += z;
              }

              if (geometry.maxPos) {
                geometry.maxPos.x += x;
                geometry.maxPos.y += y;
                geometry.maxPos.z += z;
              }

              return geometry;
            }
            function scale(geometry, value) {
              var x = value.x || 0;
              var y = value.y || 0;
              var z = value.z || 0;
              var nVertex = Math.floor(geometry.positions.length / 3);

              for (var iVertex = 0; iVertex < nVertex; ++iVertex) {
                var iX = iVertex * 3;
                var iY = iVertex * 3 + 1;
                var iZ = iVertex * 3 + 2;
                geometry.positions[iX] *= x;
                geometry.positions[iY] *= y;
                geometry.positions[iZ] *= z;
              }

              if (geometry.minPos) {
                geometry.minPos.x *= x;
                geometry.minPos.y *= y;
                geometry.minPos.z *= z;
              }

              if (geometry.maxPos) {
                geometry.maxPos.x *= x;
                geometry.maxPos.y *= y;
                geometry.maxPos.z *= z;
              }

              geometry.boundingRadius = Math.max(Math.max(x, y), z);
              return geometry;
            }
            function wireframed(geometry) {
              var indices = geometry.indices;

              if (!indices) {
                return geometry;
              }

              if (geometry.primitiveMode && geometry.primitiveMode !== PrimitiveMode.TRIANGLE_LIST) {
                return geometry;
              }

              var offsets = [[0, 1], [1, 2], [2, 0]];
              var lines = [];
              var lineIDs = {};

              for (var i = 0; i < indices.length; i += 3) {
                for (var k = 0; k < 3; ++k) {
                  var i1 = indices[i + offsets[k][0]];
                  var i2 = indices[i + offsets[k][1]];
                  var id = i1 > i2 ? i2 << 16 | i1 : i1 << 16 | i2;

                  if (lineIDs[id] === undefined) {
                    lineIDs[id] = 0;
                    lines.push(i1, i2);
                  }
                }
              }

              geometry.indices = lines;
              geometry.primitiveMode = PrimitiveMode.LINE_LIST;
              return geometry;
            }

            var primitives = /*#__PURE__*/Object.freeze({
                __proto__: null,
                box: box,
                cone: cone,
                cylinder: cylinder,
                plane: plane,
                quad: quad,
                sphere: sphere,
                torus: torus,
                capsule: capsule,
                circle: circle,
                translate: translate,
                scale: scale,
                wireframed: wireframed,
                wireframe: wireframe,
                invWinding: invWinding,
                toWavefrontOBJ: toWavefrontOBJ,
                normals: normals,
                applyDefaultGeometryOptions: applyDefaultGeometryOptions
            });
            exports('primitives', primitives);

            var TriggerEventObject = {
              type: 'onTriggerEnter',
              selfCollider: null,
              otherCollider: null,
              impl: null
            };
            var CollisionEventObject = {
              type: 'onCollisionEnter',
              selfCollider: null,
              otherCollider: null,
              contacts: [],
              impl: null
            };
            var BulletCache = function () {
              function BulletCache() {
                this.BT_TRANSFORM_0 = bt.Transform_new();
                this.BT_TRANSFORM_1 = bt.Transform_new();
                this.BT_V3_0 = bt.Vec3_new(0, 0, 0);
                this.BT_V3_1 = bt.Vec3_new(0, 0, 0);
                this.BT_V3_2 = bt.Vec3_new(0, 0, 0);
                this.BT_QUAT_0 = bt.Quat_new(0, 0, 0, 1);
              }

              BulletCache.setWrapper = function setWrapper(impl, type, wrap) {
                if (!this.ROOT[type]) this.ROOT[type] = {};
                this.ROOT[type][impl] = wrap;
              };

              BulletCache.delWrapper = function delWrapper(impl, type) {
                delete this.ROOT[type][impl];
              };

              BulletCache.getWrapper = function getWrapper(ptr, type) {
                return this.ROOT[type][ptr];
              };

              BulletCache.isNotEmptyShape = function isNotEmptyShape(ptr) {
                return ptr !== bt.EmptyShape_static();
              };

              _createClass(BulletCache, null, [{
                key: "instance",
                get: function get() {
                  if (BulletCache._instance == null) BulletCache._instance = new BulletCache();
                  return BulletCache._instance;
                }
              }]);

              return BulletCache;
            }();
            BulletCache._instance = void 0;
            BulletCache.ROOT = {};
            var CC_V3_0 = new Vec3();
            var CC_V3_1 = new Vec3();
            var CC_QUAT_0 = new Quat();
            bt.CACHE = BulletCache;

            function cocos2BulletVec3(out, v) {
              bt.Vec3_set(out, v.x, v.y, v.z);
              return out;
            }
            function bullet2CocosVec3(out, v) {
              out.x = bt.Vec3_x(v);
              out.y = bt.Vec3_y(v);
              out.z = bt.Vec3_z(v);
              return out;
            }
            function cocos2BulletQuat(out, q) {
              bt.Quat_set(out, q.x, q.y, q.z, q.w);
              return out;
            }
            function bullet2CocosQuat(out, q) {
              out.x = bt.Quat_x(q);
              out.y = bt.Quat_y(q);
              out.z = bt.Quat_z(q);
              out.w = bt.Quat_w(q);
              return out;
            }
            function cocos2BulletTriMesh(out, mesh) {
              var len = mesh.renderingSubMeshes.length;

              for (var i = 0; i < len; i++) {
                var subMesh = mesh.renderingSubMeshes[i];
                var geoInfo = subMesh.geometricInfo;

                if (geoInfo) {
                  var primitiveMode = subMesh.primitiveMode;
                  var vb = geoInfo.positions;
                  var ib = geoInfo.indices;
                  var v0 = BulletCache.instance.BT_V3_0;
                  var v1 = BulletCache.instance.BT_V3_1;
                  var v2 = BulletCache.instance.BT_V3_2;

                  if (primitiveMode === PrimitiveMode.TRIANGLE_LIST) {
                    var cnt = ib.length;

                    for (var j = 0; j < cnt; j += 3) {
                      var i0 = ib[j] * 3;
                      var i1 = ib[j + 1] * 3;
                      var i2 = ib[j + 2] * 3;
                      bt.Vec3_set(v0, vb[i0], vb[i0 + 1], vb[i0 + 2]);
                      bt.Vec3_set(v1, vb[i1], vb[i1 + 1], vb[i1 + 2]);
                      bt.Vec3_set(v2, vb[i2], vb[i2 + 1], vb[i2 + 2]);
                      bt.TriangleMesh_addTriangle(out, v0, v1, v2);
                    }
                  } else if (primitiveMode === PrimitiveMode.TRIANGLE_STRIP) {
                    var _cnt = ib.length - 2;

                    var rev = 0;

                    for (var _j = 0; _j < _cnt; _j += 1) {
                      var _i = ib[_j - rev] * 3;

                      var _i2 = ib[_j + rev + 1] * 3;

                      var _i3 = ib[_j + 2] * 3;

                      rev = ~rev;
                      bt.Vec3_set(v0, vb[_i], vb[_i + 1], vb[_i + 2]);
                      bt.Vec3_set(v1, vb[_i2], vb[_i2 + 1], vb[_i2 + 2]);
                      bt.Vec3_set(v2, vb[_i3], vb[_i3 + 1], vb[_i3 + 2]);
                      bt.TriangleMesh_addTriangle(out, v0, v1, v2);
                    }
                  } else if (primitiveMode === PrimitiveMode.TRIANGLE_FAN) {
                    var _cnt2 = ib.length - 1;

                    var _i4 = ib[0] * 3;

                    bt.Vec3_set(v0, vb[_i4], vb[_i4 + 1], vb[_i4 + 2]);

                    for (var _j2 = 1; _j2 < _cnt2; _j2 += 1) {
                      var _i5 = ib[_j2] * 3;

                      var _i6 = ib[_j2 + 1] * 3;

                      bt.Vec3_set(v1, vb[_i5], vb[_i5 + 1], vb[_i5 + 2]);
                      bt.Vec3_set(v2, vb[_i6], vb[_i6 + 1], vb[_i6 + 2]);
                      bt.TriangleMesh_addTriangle(out, v0, v1, v2);
                    }
                  }
                }
              }

              return out;
            }

            var EBtSharedBodyDirty;

            (function (EBtSharedBodyDirty) {
              EBtSharedBodyDirty[EBtSharedBodyDirty["BODY_RE_ADD"] = 1] = "BODY_RE_ADD";
              EBtSharedBodyDirty[EBtSharedBodyDirty["GHOST_RE_ADD"] = 2] = "GHOST_RE_ADD";
            })(EBtSharedBodyDirty || (EBtSharedBodyDirty = {}));

            var btCollisionFlags;

            (function (btCollisionFlags) {
              btCollisionFlags[btCollisionFlags["CF_STATIC_OBJECT"] = 1] = "CF_STATIC_OBJECT";
              btCollisionFlags[btCollisionFlags["CF_KINEMATIC_OBJECT"] = 2] = "CF_KINEMATIC_OBJECT";
              btCollisionFlags[btCollisionFlags["CF_NO_CONTACT_RESPONSE"] = 4] = "CF_NO_CONTACT_RESPONSE";
              btCollisionFlags[btCollisionFlags["CF_CUSTOM_MATERIAL_CALLBACK"] = 8] = "CF_CUSTOM_MATERIAL_CALLBACK";
              btCollisionFlags[btCollisionFlags["CF_CHARACTER_OBJECT"] = 16] = "CF_CHARACTER_OBJECT";
              btCollisionFlags[btCollisionFlags["CF_DISABLE_VISUALIZE_OBJECT"] = 32] = "CF_DISABLE_VISUALIZE_OBJECT";
              btCollisionFlags[btCollisionFlags["CF_DISABLE_SPU_COLLISION_PROCESSING"] = 64] = "CF_DISABLE_SPU_COLLISION_PROCESSING";
            })(btCollisionFlags || (btCollisionFlags = {}));

            var btCollisionObjectTypes;

            (function (btCollisionObjectTypes) {
              btCollisionObjectTypes[btCollisionObjectTypes["CO_COLLISION_OBJECT"] = 1] = "CO_COLLISION_OBJECT";
              btCollisionObjectTypes[btCollisionObjectTypes["CO_RIGID_BODY"] = 2] = "CO_RIGID_BODY";
              btCollisionObjectTypes[btCollisionObjectTypes["CO_GHOST_OBJECT"] = 4] = "CO_GHOST_OBJECT";
              btCollisionObjectTypes[btCollisionObjectTypes["CO_SOFT_BODY"] = 8] = "CO_SOFT_BODY";
              btCollisionObjectTypes[btCollisionObjectTypes["CO_HF_FLUID"] = 16] = "CO_HF_FLUID";
              btCollisionObjectTypes[btCollisionObjectTypes["CO_USER_TYPE"] = 32] = "CO_USER_TYPE";
              btCollisionObjectTypes[btCollisionObjectTypes["CO_FEATHERSTONE_LINK"] = 64] = "CO_FEATHERSTONE_LINK";
            })(btCollisionObjectTypes || (btCollisionObjectTypes = {}));

            var btCollisionObjectStates;

            (function (btCollisionObjectStates) {
              btCollisionObjectStates[btCollisionObjectStates["ACTIVE_TAG"] = 1] = "ACTIVE_TAG";
              btCollisionObjectStates[btCollisionObjectStates["ISLAND_SLEEPING"] = 2] = "ISLAND_SLEEPING";
              btCollisionObjectStates[btCollisionObjectStates["WANTS_DEACTIVATION"] = 3] = "WANTS_DEACTIVATION";
              btCollisionObjectStates[btCollisionObjectStates["DISABLE_DEACTIVATION"] = 4] = "DISABLE_DEACTIVATION";
              btCollisionObjectStates[btCollisionObjectStates["DISABLE_SIMULATION"] = 5] = "DISABLE_SIMULATION";
            })(btCollisionObjectStates || (btCollisionObjectStates = {}));

            var btRigidBodyFlags;

            (function (btRigidBodyFlags) {
              btRigidBodyFlags[btRigidBodyFlags["BT_DISABLE_WORLD_GRAVITY"] = 1] = "BT_DISABLE_WORLD_GRAVITY";
              btRigidBodyFlags[btRigidBodyFlags["BT_ENABLE_GYROPSCOPIC_FORCE"] = 2] = "BT_ENABLE_GYROPSCOPIC_FORCE";
            })(btRigidBodyFlags || (btRigidBodyFlags = {}));

            var v3_0 = CC_V3_0;
            var v3_1$4 = CC_V3_1;
            var BulletRigidBody = function () {
              var _proto = BulletRigidBody.prototype;

              _proto.setMass = function setMass(value) {
                if (!this._rigidBody.isDynamic) return;
                bt.RigidBody_setMass(this.impl, value);

                this._wakeUpIfSleep();

                this._sharedBody.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;
              };

              _proto.setType = function setType(v) {
                this._sharedBody.setType(v);
              };

              _proto.setLinearDamping = function setLinearDamping(value) {
                bt.RigidBody_setDamping(this.impl, this._rigidBody.linearDamping, this._rigidBody.angularDamping);
              };

              _proto.setAngularDamping = function setAngularDamping(value) {
                bt.RigidBody_setDamping(this.impl, this._rigidBody.linearDamping, this._rigidBody.angularDamping);
              };

              _proto.useGravity = function useGravity(value) {
                if (!this._rigidBody.isDynamic) return;
                var m_rigidBodyFlag = bt.RigidBody_getFlags(this.impl);

                if (value) {
                  m_rigidBodyFlag &= ~btRigidBodyFlags.BT_DISABLE_WORLD_GRAVITY;
                } else {
                  bt.RigidBody_setGravity(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, Vec3.ZERO));
                  m_rigidBodyFlag |= btRigidBodyFlags.BT_DISABLE_WORLD_GRAVITY;
                }

                bt.RigidBody_setFlags(this.impl, m_rigidBodyFlag);

                this._wakeUpIfSleep();

                this._sharedBody.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;
              };

              _proto.useCCD = function useCCD(value) {
                bt.CollisionObject_setCcdMotionThreshold(this.impl, value ? 0.01 : 0);
                bt.CollisionObject_setCcdSweptSphereRadius(this.impl, value ? 0.1 : 0);
                this._isUsingCCD = value;
              };

              _proto.isUsingCCD = function isUsingCCD() {
                return this._isUsingCCD;
              };

              _proto.setLinearFactor = function setLinearFactor(v) {
                bt.RigidBody_setLinearFactor(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, v));

                this._wakeUpIfSleep();
              };

              _proto.setAngularFactor = function setAngularFactor(v) {
                bt.RigidBody_setAngularFactor(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, v));

                this._wakeUpIfSleep();
              };

              _proto.setAllowSleep = function setAllowSleep(v) {
                if (!this._rigidBody.isDynamic) return;

                if (v) {
                  bt.CollisionObject_forceActivationState(this.impl, btCollisionObjectStates.ACTIVE_TAG);
                } else {
                  bt.CollisionObject_forceActivationState(this.impl, btCollisionObjectStates.DISABLE_DEACTIVATION);
                }

                this._wakeUpIfSleep();
              };

              function BulletRigidBody() {
                this.id = void 0;
                this._isEnabled = false;
                this._isUsingCCD = false;
                this.id = BulletRigidBody.idCounter++;
              }

              _proto.clearState = function clearState() {
                bt.RigidBody_clearState(this.impl);
              };

              _proto.clearVelocity = function clearVelocity() {
                this.setLinearVelocity(Vec3.ZERO);
                this.setAngularVelocity(Vec3.ZERO);
              };

              _proto.clearForces = function clearForces() {
                bt.RigidBody_clearForces(this.impl);
              };

              _proto.initialize = function initialize(com) {
                this._rigidBody = com;
                this._sharedBody = PhysicsSystem.instance.physicsWorld.getSharedBody(this._rigidBody.node, this);
                this._sharedBody.reference = true;
              };

              _proto.onEnable = function onEnable() {
                this._isEnabled = true;
                this.setMass(this._rigidBody.mass);
                this.setAllowSleep(this._rigidBody.allowSleep);
                this.setLinearDamping(this._rigidBody.linearDamping);
                this.setAngularDamping(this._rigidBody.angularDamping);
                this.setLinearFactor(this._rigidBody.linearFactor);
                this.setAngularFactor(this._rigidBody.angularFactor);
                this.useGravity(this._rigidBody.useGravity);
                this._sharedBody.bodyEnabled = true;
              };

              _proto.onDisable = function onDisable() {
                this._isEnabled = false;
                this._sharedBody.bodyEnabled = false;
              };

              _proto.onDestroy = function onDestroy() {
                this._sharedBody.reference = false;
                this._rigidBody = null;
                this._sharedBody = null;
              };

              _proto.wakeUp = function wakeUp(force) {
                if (force === void 0) {
                  force = true;
                }

                bt.CollisionObject_activate(this.impl, force);
              };

              _proto.sleep = function sleep() {
                return bt.RigidBody_wantsSleeping(this.impl);
              };

              _proto.setSleepThreshold = function setSleepThreshold(v) {
                this._wakeUpIfSleep();

                bt.RigidBody_setSleepingThresholds(this.impl, v, v);
              };

              _proto.getSleepThreshold = function getSleepThreshold() {
                return bt.RigidBody_getLinearSleepingThreshold(this.impl);
              };

              _proto.getLinearVelocity = function getLinearVelocity(out) {
                return bullet2CocosVec3(out, bt.RigidBody_getLinearVelocity(this.impl));
              };

              _proto.setLinearVelocity = function setLinearVelocity(value) {
                this._wakeUpIfSleep();

                cocos2BulletVec3(bt.RigidBody_getLinearVelocity(this.impl), value);
              };

              _proto.getAngularVelocity = function getAngularVelocity(out) {
                return bullet2CocosVec3(out, bt.RigidBody_getAngularVelocity(this.impl));
              };

              _proto.setAngularVelocity = function setAngularVelocity(value) {
                this._wakeUpIfSleep();

                cocos2BulletVec3(bt.RigidBody_getAngularVelocity(this.impl), value);
              };

              _proto.applyLocalForce = function applyLocalForce(force, rel_pos) {
                this._sharedBody.syncSceneToPhysics();

                this._wakeUpIfSleep();

                var quat = this._sharedBody.node.worldRotation;
                var v = Vec3.transformQuat(v3_0, force, quat);
                var rp = rel_pos ? Vec3.transformQuat(v3_1$4, rel_pos, quat) : Vec3.ZERO;
                bt.RigidBody_applyForce(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, v), cocos2BulletVec3(BulletCache.instance.BT_V3_1, rp));
              };

              _proto.applyLocalTorque = function applyLocalTorque(torque) {
                this._sharedBody.syncSceneToPhysics();

                this._wakeUpIfSleep();

                Vec3.transformQuat(v3_0, torque, this._sharedBody.node.worldRotation);
                bt.RigidBody_applyTorque(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, v3_0));
              };

              _proto.applyLocalImpulse = function applyLocalImpulse(impulse, rel_pos) {
                this._sharedBody.syncSceneToPhysics();

                this._wakeUpIfSleep();

                var quat = this._sharedBody.node.worldRotation;
                var v = Vec3.transformQuat(v3_0, impulse, quat);
                var rp = rel_pos ? Vec3.transformQuat(v3_1$4, rel_pos, quat) : Vec3.ZERO;
                bt.RigidBody_applyImpulse(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, v), cocos2BulletVec3(BulletCache.instance.BT_V3_1, rp));
              };

              _proto.applyForce = function applyForce(force, rel_pos) {
                this._sharedBody.syncSceneToPhysics();

                this._wakeUpIfSleep();

                var rp = rel_pos || Vec3.ZERO;
                bt.RigidBody_applyForce(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, force), cocos2BulletVec3(BulletCache.instance.BT_V3_1, rp));
              };

              _proto.applyTorque = function applyTorque(torque) {
                this._sharedBody.syncSceneToPhysics();

                this._wakeUpIfSleep();

                bt.RigidBody_applyTorque(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, torque));
              };

              _proto.applyImpulse = function applyImpulse(impulse, rel_pos) {
                this._sharedBody.syncSceneToPhysics();

                this._wakeUpIfSleep();

                var rp = rel_pos || Vec3.ZERO;
                bt.RigidBody_applyImpulse(this.impl, cocos2BulletVec3(BulletCache.instance.BT_V3_0, impulse), cocos2BulletVec3(BulletCache.instance.BT_V3_1, rp));
              };

              _proto.getGroup = function getGroup() {
                return this._sharedBody.collisionFilterGroup;
              };

              _proto.setGroup = function setGroup(v) {
                this._sharedBody.collisionFilterGroup = v;
              };

              _proto.addGroup = function addGroup(v) {
                this._sharedBody.collisionFilterGroup |= v;
              };

              _proto.removeGroup = function removeGroup(v) {
                this._sharedBody.collisionFilterGroup &= ~v;
              };

              _proto.getMask = function getMask() {
                return this._sharedBody.collisionFilterMask;
              };

              _proto.setMask = function setMask(v) {
                this._sharedBody.collisionFilterMask = v;
              };

              _proto.addMask = function addMask(v) {
                this._sharedBody.collisionFilterMask |= v;
              };

              _proto.removeMask = function removeMask(v) {
                this._sharedBody.collisionFilterMask &= ~v;
              };

              _proto._wakeUpIfSleep = function _wakeUpIfSleep() {
                if (!this.isAwake) {
                  bt.CollisionObject_activate(this.impl, true);
                }
              };

              _createClass(BulletRigidBody, [{
                key: "isAwake",
                get: function get() {
                  var state = bt.CollisionObject_getActivationState(this.impl);
                  return state === btCollisionObjectStates.ACTIVE_TAG || state === btCollisionObjectStates.DISABLE_DEACTIVATION;
                }
              }, {
                key: "isSleepy",
                get: function get() {
                  var state = bt.CollisionObject_getActivationState(this.impl);
                  return state === btCollisionObjectStates.WANTS_DEACTIVATION;
                }
              }, {
                key: "isSleeping",
                get: function get() {
                  var state = bt.CollisionObject_getActivationState(this.impl);
                  return state === btCollisionObjectStates.ISLAND_SLEEPING;
                }
              }, {
                key: "impl",
                get: function get() {
                  return this._sharedBody.body;
                }
              }, {
                key: "rigidBody",
                get: function get() {
                  return this._rigidBody;
                }
              }, {
                key: "sharedBody",
                get: function get() {
                  return this._sharedBody;
                }
              }, {
                key: "isEnabled",
                get: function get() {
                  return this._isEnabled;
                }
              }]);

              return BulletRigidBody;
            }();
            BulletRigidBody.idCounter = 0;

            var v3_0$1 = CC_V3_0;
            var quat_0 = CC_QUAT_0;
            var IDCounter = 0;
            var BulletSharedBody = function () {
              BulletSharedBody.getSharedBody = function getSharedBody(node, wrappedWorld, wrappedBody) {
                var key = node.uuid;
                var newSB;

                if (BulletSharedBody.sharedBodesMap.has(key)) {
                  newSB = BulletSharedBody.sharedBodesMap.get(key);
                } else {
                  newSB = new BulletSharedBody(node, wrappedWorld);
                  var g = PhysicsGroup$1.DEFAULT;
                  var m = PhysicsSystem.instance.collisionMatrix[g];
                  newSB._collisionFilterGroup = g;
                  newSB._collisionFilterMask = m;
                  BulletSharedBody.sharedBodesMap.set(node.uuid, newSB);
                }

                if (wrappedBody) {
                  newSB._wrappedBody = wrappedBody;
                  var _g = wrappedBody.rigidBody.group;
                  var _m = PhysicsSystem.instance.collisionMatrix[_g];
                  newSB._collisionFilterGroup = _g;
                  newSB._collisionFilterMask = _m;
                }

                return newSB;
              };

              function BulletSharedBody(node, wrappedWorld) {
                this.id = void 0;
                this.node = void 0;
                this.wrappedWorld = void 0;
                this.wrappedJoints0 = [];
                this.wrappedJoints1 = [];
                this.dirty = 0;
                this._collisionFilterGroup = PhysicsSystem.PhysicsGroup.DEFAULT;
                this._collisionFilterMask = -1;
                this.ref = 0;
                this.bodyIndex = -1;
                this.ghostIndex = -1;
                this._wrappedBody = null;
                this.id = BulletSharedBody.idCounter++;
                this.wrappedWorld = wrappedWorld;
                this.node = node;
              }

              var _proto = BulletSharedBody.prototype;

              _proto._instantiateBodyStruct = function _instantiateBodyStruct() {
                if (this._bodyStruct) return;
                var mass = 0;

                if (this._wrappedBody && this._wrappedBody.rigidBody.enabled && this._wrappedBody.rigidBody.isDynamic) {
                  mass = this._wrappedBody.rigidBody.mass;
                }

                var trans = BulletCache.instance.BT_TRANSFORM_0;
                var quat = BulletCache.instance.BT_QUAT_0;
                cocos2BulletVec3(bt.Transform_getOrigin(trans), this.node.worldPosition);
                cocos2BulletQuat(quat, this.node.worldRotation);
                bt.Transform_setRotation(trans, quat);
                var motionState = bt.ccMotionState_new(this.id, trans);
                var body = bt.RigidBody_new(mass, motionState);
                var sleepTd = PhysicsSystem.instance.sleepThreshold;
                bt.RigidBody_setSleepingThresholds(body, sleepTd, sleepTd);
                this._bodyStruct = {
                  id: IDCounter++,
                  body: body,
                  motionState: motionState,
                  compound: bt.ccCompoundShape_new(),
                  wrappedShapes: [],
                  useCompound: false
                };
                BulletCache.setWrapper(this.id, bt.BODY_CACHE_NAME, this);
                if (this._ghostStruct) bt.CollisionObject_setIgnoreCollisionCheck(this.ghost, this.body, true);
                if (this._wrappedBody) this.setBodyType(this._wrappedBody.rigidBody.type);
              };

              _proto._instantiateGhostStruct = function _instantiateGhostStruct() {
                if (this._ghostStruct) return;
                var ghost = bt.CollisionObject_new();
                var ghostShape = bt.ccCompoundShape_new();
                bt.CollisionObject_setCollisionShape(ghost, ghostShape);
                bt.CollisionObject_setCollisionFlags(ghost, btCollisionFlags.CF_STATIC_OBJECT | btCollisionFlags.CF_NO_CONTACT_RESPONSE);
                this._ghostStruct = {
                  id: IDCounter++,
                  ghost: ghost,
                  compound: ghostShape,
                  wrappedShapes: []
                };
                if (this._bodyStruct) bt.CollisionObject_setIgnoreCollisionCheck(this.body, this.ghost, true);
                if (this._wrappedBody) this.setGhostType(this._wrappedBody.rigidBody.type);
              };

              _proto.setType = function setType(v) {
                this.setBodyType(v);
                this.setGhostType(v);
              };

              _proto.setBodyType = function setBodyType(v) {
                if (this._bodyStruct && this._wrappedBody) {
                  var body = this._bodyStruct.body;
                  var wrap = this._wrappedBody;
                  var com = wrap.rigidBody;
                  var m_bcf = bt.CollisionObject_getCollisionFlags(body);
                  var localInertia = BulletCache.instance.BT_V3_0;

                  switch (v) {
                    case ERigidBodyType.DYNAMIC:
                      m_bcf &= ~btCollisionFlags.CF_KINEMATIC_OBJECT;
                      m_bcf &= ~btCollisionFlags.CF_STATIC_OBJECT;
                      bt.CollisionObject_setCollisionFlags(body, m_bcf);
                      wrap.setMass(com.mass);
                      wrap.useGravity(com.useGravity);
                      wrap.setAllowSleep(com.allowSleep);
                      break;

                    case ERigidBodyType.KINEMATIC:
                      bt.Vec3_set(localInertia, 0, 0, 0);
                      bt.RigidBody_setMassProps(body, 0, localInertia);
                      m_bcf |= btCollisionFlags.CF_KINEMATIC_OBJECT;
                      m_bcf &= ~btCollisionFlags.CF_STATIC_OBJECT;
                      bt.CollisionObject_setCollisionFlags(body, m_bcf);
                      bt.CollisionObject_forceActivationState(body, btCollisionObjectStates.DISABLE_DEACTIVATION);
                      break;

                    case ERigidBodyType.STATIC:
                    default:
                      bt.Vec3_set(localInertia, 0, 0, 0);
                      bt.RigidBody_setMassProps(body, 0, localInertia);
                      m_bcf |= btCollisionFlags.CF_STATIC_OBJECT;
                      m_bcf &= ~btCollisionFlags.CF_KINEMATIC_OBJECT;
                      bt.CollisionObject_setCollisionFlags(body, m_bcf);
                      bt.CollisionObject_forceActivationState(body, btCollisionObjectStates.ISLAND_SLEEPING);
                      break;
                  }

                  this.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;
                }
              };

              _proto.setGhostType = function setGhostType(v) {
                if (this._ghostStruct) {
                  var ghost = this._ghostStruct.ghost;
                  var m_gcf = bt.CollisionObject_getCollisionFlags(ghost);

                  switch (v) {
                    case ERigidBodyType.DYNAMIC:
                    case ERigidBodyType.KINEMATIC:
                      m_gcf &= ~btCollisionFlags.CF_STATIC_OBJECT;
                      m_gcf |= btCollisionFlags.CF_KINEMATIC_OBJECT;
                      bt.CollisionObject_setCollisionFlags(ghost, m_gcf);
                      bt.CollisionObject_forceActivationState(ghost, btCollisionObjectStates.DISABLE_DEACTIVATION);
                      break;

                    case ERigidBodyType.STATIC:
                    default:
                      m_gcf &= ~btCollisionFlags.CF_KINEMATIC_OBJECT;
                      m_gcf |= btCollisionFlags.CF_STATIC_OBJECT;
                      bt.CollisionObject_setCollisionFlags(ghost, m_gcf);
                      bt.CollisionObject_forceActivationState(ghost, btCollisionObjectStates.ISLAND_SLEEPING);
                      break;
                  }

                  this.dirty |= EBtSharedBodyDirty.GHOST_RE_ADD;
                }
              };

              _proto.addShape = function addShape(v, isTrigger) {
                function switchShape(that, shape) {
                  bt.CollisionObject_setCollisionShape(that.body, shape);
                  that.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;

                  if (that._wrappedBody && that._wrappedBody.isEnabled) {
                    that._wrappedBody.setMass(that._wrappedBody.rigidBody.mass);
                  }
                }

                if (isTrigger) {
                  var index = this.ghostStruct.wrappedShapes.indexOf(v);

                  if (index < 0) {
                    this.ghostStruct.wrappedShapes.push(v);
                    v.setCompound(this.ghostCompoundShape);
                    this.ghostEnabled = true;
                  }
                } else {
                  var _index = this.bodyStruct.wrappedShapes.indexOf(v);

                  if (_index < 0) {
                    this.bodyStruct.wrappedShapes.push(v);

                    if (this.bodyStruct.useCompound) {
                      v.setCompound(this.bodyCompoundShape);
                    } else {
                      var l = this.bodyStruct.wrappedShapes.length;

                      if (l === 1 && !v.needCompound()) {
                        switchShape(this, v.impl);
                      } else {
                        this.bodyStruct.useCompound = true;

                        for (var i = 0; i < l; i++) {
                          var childShape = this.bodyStruct.wrappedShapes[i];
                          childShape.setCompound(this.bodyCompoundShape);
                        }

                        switchShape(this, this.bodyStruct.compound);
                      }
                    }

                    this.bodyEnabled = true;
                  }
                }
              };

              _proto.removeShape = function removeShape(v, isTrigger) {
                if (isTrigger) {
                  var index = this.ghostStruct.wrappedShapes.indexOf(v);

                  if (index >= 0) {
                    fastRemoveAt(this.ghostStruct.wrappedShapes, index);
                    v.setCompound(0);
                    this.ghostEnabled = false;
                  }
                } else {
                  var _index2 = this.bodyStruct.wrappedShapes.indexOf(v);

                  if (_index2 >= 0) {
                    if (this.bodyStruct.useCompound) {
                      v.setCompound(0);
                    } else {
                      bt.CollisionObject_setCollisionShape(this.body, bt.EmptyShape_static());
                    }

                    bt.CollisionObject_activate(this.body, true);
                    this.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;
                    fastRemoveAt(this.bodyStruct.wrappedShapes, _index2);
                    this.bodyEnabled = false;
                  }
                }
              };

              _proto.addJoint = function addJoint(v, type) {
                if (type) {
                  var i = this.wrappedJoints1.indexOf(v);
                  if (i < 0) this.wrappedJoints1.push(v);
                } else {
                  var _i = this.wrappedJoints0.indexOf(v);

                  if (_i < 0) this.wrappedJoints0.push(v);
                }
              };

              _proto.removeJoint = function removeJoint(v, type) {
                if (type) {
                  var i = this.wrappedJoints1.indexOf(v);
                  if (i >= 0) fastRemoveAt(this.wrappedJoints1, i);
                } else {
                  var _i2 = this.wrappedJoints0.indexOf(v);

                  if (_i2 >= 0) fastRemoveAt(this.wrappedJoints0, _i2);
                }
              };

              _proto.updateDirty = function updateDirty() {
                if (this.dirty) {
                  if (this.bodyIndex >= 0 && this.dirty & EBtSharedBodyDirty.BODY_RE_ADD) this.updateBodyByReAdd();
                  if (this.ghostIndex >= 0 && this.dirty & EBtSharedBodyDirty.GHOST_RE_ADD) this.updateGhostByReAdd();
                  this.dirty = 0;
                }
              };

              _proto.syncSceneToPhysics = function syncSceneToPhysics() {
                if (this.node.hasChangedFlags) {
                  var bt_quat = BulletCache.instance.BT_QUAT_0;
                  var bt_transform = bt.CollisionObject_getWorldTransform(this.body);
                  cocos2BulletQuat(bt_quat, this.node.worldRotation);
                  cocos2BulletVec3(bt.Transform_getOrigin(bt_transform), this.node.worldPosition);
                  bt.Transform_setRotation(bt_transform, bt_quat);

                  if (this.node.hasChangedFlags & TransformBit.SCALE) {
                    this.syncBodyScale();
                  }

                  if (bt.CollisionObject_isKinematicObject(this.body)) {
                    var ms = bt.RigidBody_getMotionState(this.body);
                    if (ms) bt.MotionState_setWorldTransform(ms, bt_transform);
                  } else if (this.isBodySleeping()) bt.CollisionObject_activate(this.body);
                }
              };

              _proto.syncPhysicsToScene = function syncPhysicsToScene() {
                if (bt.CollisionObject_isStaticOrKinematicObject(this.body)) return;
                this.syncPhysicsToGraphics();
              };

              _proto.syncPhysicsToGraphics = function syncPhysicsToGraphics() {
                if (this.isBodySleeping()) return;
                var bt_quat = BulletCache.instance.BT_QUAT_0;
                var bt_transform = BulletCache.instance.BT_TRANSFORM_0;
                bt.MotionState_getWorldTransform(bt.RigidBody_getMotionState(this.body), bt_transform);
                bt.Transform_getRotation(bt_transform, bt_quat);
                this.node.worldRotation = bullet2CocosQuat(quat_0, bt_quat);
                this.node.worldPosition = bullet2CocosVec3(v3_0$1, bt.Transform_getOrigin(bt_transform));

                if (this._ghostStruct) {
                  var bt_transform1 = bt.CollisionObject_getWorldTransform(this.ghost);
                  cocos2BulletVec3(bt.Transform_getOrigin(bt_transform1), this.node.worldPosition);
                  cocos2BulletQuat(bt_quat, this.node.worldRotation);
                  bt.Transform_setRotation(bt_transform1, bt_quat);
                }
              };

              _proto.syncSceneToGhost = function syncSceneToGhost() {
                if (this.node.hasChangedFlags) {
                  var bt_quat = BulletCache.instance.BT_QUAT_0;
                  var bt_transform = bt.CollisionObject_getWorldTransform(this.ghost);
                  cocos2BulletVec3(bt.Transform_getOrigin(bt_transform), this.node.worldPosition);
                  cocos2BulletQuat(bt_quat, this.node.worldRotation);
                  bt.Transform_setRotation(bt_transform, bt_quat);
                  if (this.node.hasChangedFlags & TransformBit.SCALE) this.syncGhostScale();
                  bt.CollisionObject_activate(this.ghost);
                }
              };

              _proto.syncInitialBody = function syncInitialBody() {
                var bt_quat = BulletCache.instance.BT_QUAT_0;
                var bt_transform = bt.CollisionObject_getWorldTransform(this.body);
                cocos2BulletVec3(bt.Transform_getOrigin(bt_transform), this.node.worldPosition);
                cocos2BulletQuat(bt_quat, this.node.worldRotation);
                bt.Transform_setRotation(bt_transform, bt_quat);
                this.syncBodyScale();
                bt.CollisionObject_activate(this.body);
              };

              _proto.syncInitialGhost = function syncInitialGhost() {
                var bt_quat = BulletCache.instance.BT_QUAT_0;
                var bt_transform = bt.CollisionObject_getWorldTransform(this.ghost);
                cocos2BulletVec3(bt.Transform_getOrigin(bt_transform), this.node.worldPosition);
                cocos2BulletQuat(bt_quat, this.node.worldRotation);
                bt.Transform_setRotation(bt_transform, bt_quat);
                this.syncGhostScale();
                bt.CollisionObject_activate(this.body);
              };

              _proto.syncBodyScale = function syncBodyScale() {
                for (var i = 0; i < this.bodyStruct.wrappedShapes.length; i++) {
                  this.bodyStruct.wrappedShapes[i].updateScale();
                }

                for (var _i3 = 0; _i3 < this.wrappedJoints0.length; _i3++) {
                  this.wrappedJoints0[_i3].updateScale0();
                }

                for (var _i4 = 0; _i4 < this.wrappedJoints1.length; _i4++) {
                  this.wrappedJoints1[_i4].updateScale1();
                }
              };

              _proto.syncGhostScale = function syncGhostScale() {
                for (var i = 0; i < this.ghostStruct.wrappedShapes.length; i++) {
                  this.ghostStruct.wrappedShapes[i].updateScale();
                }
              };

              _proto.updateBodyByReAdd = function updateBodyByReAdd() {
                if (this.bodyIndex >= 0) {
                  this.wrappedWorld.removeSharedBody(this);
                  this.bodyIndex = this.wrappedWorld.bodies.length;
                  this.wrappedWorld.addSharedBody(this);
                }
              };

              _proto.updateGhostByReAdd = function updateGhostByReAdd() {
                if (this.ghostIndex >= 0) {
                  this.wrappedWorld.removeGhostObject(this);
                  this.ghostIndex = this.wrappedWorld.ghosts.length;
                  this.wrappedWorld.addGhostObject(this);
                }
              };

              _proto.destroy = function destroy() {
                BulletSharedBody.sharedBodesMap["delete"](this.node.uuid);
                this.node = null;
                this.wrappedWorld = null;

                if (this._bodyStruct) {
                  var bodyStruct = this._bodyStruct;
                  BulletCache.delWrapper(bodyStruct.body, bt.BODY_CACHE_NAME);
                  bt.MotionState_del(bodyStruct.motionState);
                  bt.CollisionShape_del(bodyStruct.compound);
                  bt.CollisionObject_del(bodyStruct.body);
                  this._bodyStruct = null;
                }

                if (this._ghostStruct) {
                  var ghostStruct = this._ghostStruct;
                  bt.CollisionShape_del(ghostStruct.compound);
                  bt.CollisionObject_del(ghostStruct.ghost);
                  this._ghostStruct = null;
                }
              };

              _proto.isBodySleeping = function isBodySleeping() {
                return bt.CollisionObject_getActivationState(this.body) === btCollisionObjectStates.ISLAND_SLEEPING;
              };

              _createClass(BulletSharedBody, [{
                key: "wrappedBody",
                get: function get() {
                  return this._wrappedBody;
                }
              }, {
                key: "bodyCompoundShape",
                get: function get() {
                  return this.bodyStruct.compound;
                }
              }, {
                key: "ghostCompoundShape",
                get: function get() {
                  return this.ghostStruct.compound;
                }
              }, {
                key: "body",
                get: function get() {
                  return this.bodyStruct.body;
                }
              }, {
                key: "ghost",
                get: function get() {
                  return this.ghostStruct.ghost;
                }
              }, {
                key: "collisionFilterGroup",
                get: function get() {
                  return this._collisionFilterGroup;
                },
                set: function set(v) {
                  if (v !== this._collisionFilterGroup) {
                    this._collisionFilterGroup = v;
                    this.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;
                    this.dirty |= EBtSharedBodyDirty.GHOST_RE_ADD;
                  }
                }
              }, {
                key: "collisionFilterMask",
                get: function get() {
                  return this._collisionFilterMask;
                },
                set: function set(v) {
                  if (v !== this._collisionFilterMask) {
                    this._collisionFilterMask = v;
                    this.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;
                    this.dirty |= EBtSharedBodyDirty.GHOST_RE_ADD;
                  }
                }
              }, {
                key: "bodyStruct",
                get: function get() {
                  this._instantiateBodyStruct();

                  return this._bodyStruct;
                }
              }, {
                key: "ghostStruct",
                get: function get() {
                  this._instantiateGhostStruct();

                  return this._ghostStruct;
                }
              }, {
                key: "bodyEnabled",
                set: function set(v) {
                  if (v) {
                    if (this.bodyIndex < 0) {
                      if (this.bodyStruct.wrappedShapes.length === 0) {
                        if (!this.wrappedBody) return;
                        if (!this.wrappedBody.rigidBody.isDynamic) return;
                      }

                      this.bodyIndex = this.wrappedWorld.bodies.length;
                      this.wrappedWorld.addSharedBody(this);
                      this.syncInitialBody();
                    }
                  } else if (this.bodyIndex >= 0) {
                    var isRemoveBody = this.bodyStruct.wrappedShapes.length === 0 && this.wrappedBody == null || this.bodyStruct.wrappedShapes.length === 0 && this.wrappedBody != null && !this.wrappedBody.isEnabled || this.bodyStruct.wrappedShapes.length === 0 && this.wrappedBody != null && !this.wrappedBody.rigidBody.enabledInHierarchy;

                    if (isRemoveBody) {
                      bt.RigidBody_clearState(this.body);
                      this.bodyIndex = -1;
                      this.wrappedWorld.removeSharedBody(this);
                    }
                  }
                }
              }, {
                key: "ghostEnabled",
                set: function set(v) {
                  if (v) {
                    if (this.ghostIndex < 0 && this.ghostStruct.wrappedShapes.length > 0) {
                      this.ghostIndex = 1;
                      this.wrappedWorld.addGhostObject(this);
                      this.syncInitialGhost();
                    }
                  } else if (this.ghostIndex >= 0) {
                    var isRemoveGhost = this.ghostStruct.wrappedShapes.length === 0 && this.ghost;

                    if (isRemoveGhost) {
                      this.ghostIndex = -1;
                      this.wrappedWorld.removeGhostObject(this);
                    }
                  }
                }
              }, {
                key: "reference",
                set: function set(v) {
                  v ? this.ref++ : this.ref--;

                  if (this.ref === 0) {
                    this.destroy();
                  }
                }
              }]);

              return BulletSharedBody;
            }();
            BulletSharedBody.idCounter = 0;
            BulletSharedBody.sharedBodesMap = new Map();

            var v3_0$2 = CC_V3_0;
            var ccMaterialBooks = {};
            var BulletShape = function () {
              function BulletShape() {
                this.id = BulletShape.idCounter++;
                this._isEnabled = false;
                this._isTrigger = false;
                this._isInitialized = false;
                this._impl = 0;
                this._compound = 0;
                this.quat = bt.Quat_new(0, 0, 0, 1);
                this.transform = bt.Transform_new();
              }

              var _proto = BulletShape.prototype;

              _proto.updateEventListener = function updateEventListener() {
                this._sharedBody.wrappedWorld.updateNeedEmitEvents(this.collider.needCollisionEvent || this.collider.needTriggerEvent);
              };

              _proto.setMaterial = function setMaterial(v) {
                if (!this._isTrigger && this._isEnabled && v) {
                  if (this._compound) {
                    if (!ccMaterialBooks[v._uuid]) ccMaterialBooks[v._uuid] = bt.ccMaterial_new();
                    var mat = ccMaterialBooks[v._uuid];
                    bt.ccMaterial_set(mat, v.restitution, v.friction, v.rollingFriction, v.spinningFriction);
                    bt.CollisionShape_setMaterial(this._impl, mat);
                  } else {
                    bt.CollisionObject_setMaterial(this._sharedBody.body, v.restitution, v.friction, v.rollingFriction, v.spinningFriction);
                  }
                }
              };

              _proto.setCenter = function setCenter(v) {
                Vec3.copy(v3_0$2, v);
                v3_0$2.multiply(this._collider.node.worldScale);
                cocos2BulletVec3(bt.Transform_getOrigin(this.transform), v3_0$2);
                this.updateCompoundTransform();
              };

              _proto.setAsTrigger = function setAsTrigger(v) {
                if (this._isTrigger === v) return;

                if (this._isEnabled) {
                  this._sharedBody.removeShape(this, !v);

                  this._sharedBody.addShape(this, v);
                }

                this._isTrigger = v;
              };

              _proto.getAABB = function getAABB(v) {
                var bt_transform = BulletCache.instance.BT_TRANSFORM_0;
                bt.Transform_setIdentity(bt_transform);
                bt.Transform_setRotation(bt_transform, cocos2BulletQuat(BulletCache.instance.BT_QUAT_0, this._collider.node.worldRotation));
                var MIN = BulletCache.instance.BT_V3_0;
                var MAX = BulletCache.instance.BT_V3_1;
                bt.CollisionShape_getAabb(this._impl, bt_transform, MIN, MAX);
                v.halfExtents.x = (bt.Vec3_x(MAX) - bt.Vec3_x(MIN)) / 2;
                v.halfExtents.y = (bt.Vec3_y(MAX) - bt.Vec3_y(MIN)) / 2;
                v.halfExtents.z = (bt.Vec3_z(MAX) - bt.Vec3_z(MIN)) / 2;
                Vec3.add(v.center, this._collider.node.worldPosition, this._collider.center);
              };

              _proto.getBoundingSphere = function getBoundingSphere(v) {
                v.radius = bt.CollisionShape_getLocalBoundingSphere(this._impl);
                Vec3.add(v.center, this._collider.node.worldPosition, this._collider.center);
              };

              _proto.initialize = function initialize(com) {
                this._collider = com;
                this._isInitialized = true;
                this._sharedBody = PhysicsSystem.instance.physicsWorld.getSharedBody(this._collider.node);
                this._sharedBody.reference = true;
                this.onComponentSet();
                this.setWrapper();
              };

              _proto.setWrapper = function setWrapper() {
                if (BulletCache.isNotEmptyShape(this._impl)) {
                  bt.CollisionShape_setUserPointer(this._impl, this._impl);
                  BulletCache.setWrapper(this._impl, BulletShape.TYPE, this);
                }
              };

              _proto.onLoad = function onLoad() {
                this.setCenter(this._collider.center);
                this.setAsTrigger(this._collider.isTrigger);
              };

              _proto.onEnable = function onEnable() {
                this._isEnabled = true;

                this._sharedBody.addShape(this, this._isTrigger);

                this.setMaterial(this.collider.sharedMaterial);
              };

              _proto.onDisable = function onDisable() {
                this._isEnabled = false;

                this._sharedBody.removeShape(this, this._isTrigger);
              };

              _proto.onDestroy = function onDestroy() {
                this._sharedBody.reference = false;
                this._collider = null;
                bt.Quat_del(this.quat);
                bt.Transform_del(this.transform);
                if (this._compound) bt.CollisionShape_del(this._compound);

                if (BulletCache.isNotEmptyShape(this._impl)) {
                  bt.CollisionShape_del(this._impl);
                  BulletCache.delWrapper(this._impl, BulletShape.TYPE);
                }
              };

              _proto.updateByReAdd = function updateByReAdd() {
                if (this._isEnabled) {
                  this._sharedBody.removeShape(this, this._isTrigger);

                  this._sharedBody.addShape(this, this._isTrigger);
                }
              };

              _proto.getGroup = function getGroup() {
                return this._sharedBody.collisionFilterGroup;
              };

              _proto.setGroup = function setGroup(v) {
                this._sharedBody.collisionFilterGroup = v;
              };

              _proto.addGroup = function addGroup(v) {
                this._sharedBody.collisionFilterGroup |= v;
              };

              _proto.removeGroup = function removeGroup(v) {
                this._sharedBody.collisionFilterGroup &= ~v;
              };

              _proto.getMask = function getMask() {
                return this._sharedBody.collisionFilterMask;
              };

              _proto.setMask = function setMask(v) {
                this._sharedBody.collisionFilterMask = v;
              };

              _proto.addMask = function addMask(v) {
                this._sharedBody.collisionFilterMask |= v;
              };

              _proto.removeMask = function removeMask(v) {
                this._sharedBody.collisionFilterMask &= ~v;
              };

              _proto.setCompound = function setCompound(compound) {
                if (this._compound) bt.CompoundShape_removeChildShape(this._compound, this._impl);
                if (compound) bt.CompoundShape_addChildShape(compound, this.transform, this._impl);
                this._compound = compound;
              };

              _proto.updateScale = function updateScale() {
                this.setCenter(this._collider.center);
              };

              _proto.updateCompoundTransform = function updateCompoundTransform() {
                if (this._compound) {
                  bt.CompoundShape_updateChildTransform(this._compound, this._impl, this.transform, true);
                } else if (this._isEnabled && !this._isTrigger) {
                  if (this._sharedBody && !this._sharedBody.bodyStruct.useCompound) {
                    this._sharedBody.dirty |= EBtSharedBodyDirty.BODY_RE_ADD;
                  }
                }
              };

              _proto.needCompound = function needCompound() {
                if (this._collider.type === EColliderType.TERRAIN) {
                  return true;
                }

                if (this._collider.center.equals(Vec3.ZERO)) {
                  return false;
                }

                return true;
              };

              _createClass(BulletShape, [{
                key: "attachedRigidBody",
                get: function get() {
                  if (this._sharedBody.wrappedBody) return this._sharedBody.wrappedBody.rigidBody;
                  return null;
                }
              }, {
                key: "impl",
                get: function get() {
                  return this._impl;
                }
              }, {
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }, {
                key: "sharedBody",
                get: function get() {
                  return this._sharedBody;
                }
              }]);

              return BulletShape;
            }();
            BulletShape.TYPE = 'shape';
            BulletShape.idCounter = 0;

            var ArrayCollisionMatrix = function () {
              function ArrayCollisionMatrix() {
                this.matrix = [];
              }

              var _proto = ArrayCollisionMatrix.prototype;

              _proto.get = function get(i, j) {
                if (j > i) {
                  var temp = j;
                  j = i;
                  i = temp;
                }

                return this.matrix[(i * (i + 1) >> 1) + j - 1];
              };

              _proto.set = function set(i, j, value) {
                if (j > i) {
                  var temp = j;
                  j = i;
                  i = temp;
                }

                this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;
              };

              _proto.reset = function reset() {
                this.matrix.length = 0;
              };

              _proto.setNumObjects = function setNumObjects(n) {
                this.matrix.length = n * (n - 1) >> 1;
              };

              return ArrayCollisionMatrix;
            }();

            var TupleDictionary = function () {
              function TupleDictionary() {
                this.data = void 0;
                this.data = {
                  keys: []
                };
              }

              var _proto = TupleDictionary.prototype;

              _proto.get = function get(i, j) {
                if (i > j) {
                  var temp = j;
                  j = i;
                  i = temp;
                }

                return this.data[i + "-" + j];
              };

              _proto.set = function set(i, j, value) {
                if (i > j) {
                  var temp = j;
                  j = i;
                  i = temp;
                }

                var key = i + "-" + j;

                if (value == null) {
                  var idx = this.data.keys.indexOf(key);

                  if (idx !== -1) {
                    this.data.keys.splice(idx, 1);
                    delete this.data[key];
                    return value;
                  }
                }

                if (!this.get(i, j)) {
                  this.data.keys.push(key);
                }

                this.data[key] = value;
                return this.data[key];
              };

              _proto.reset = function reset() {
                this.data = {
                  keys: []
                };
              };

              _proto.getLength = function getLength() {
                return this.data.keys.length;
              };

              _proto.getKeyByIndex = function getKeyByIndex(index) {
                return this.data.keys[index];
              };

              _proto.getDataByKey = function getDataByKey(Key) {
                return this.data[Key];
              };

              return TupleDictionary;
            }();

            var BulletContactData = function () {
              function BulletContactData(event) {
                this.impl = 0;
                this.event = event;
              }

              var _proto = BulletContactData.prototype;

              _proto.getLocalPointOnA = function getLocalPointOnA(out) {
                if (this.impl) bullet2CocosVec3(out, bt.ManifoldPoint_get_m_localPointA(this.impl));
              };

              _proto.getLocalPointOnB = function getLocalPointOnB(out) {
                if (this.impl) bullet2CocosVec3(out, bt.ManifoldPoint_get_m_localPointB(this.impl));
              };

              _proto.getWorldPointOnA = function getWorldPointOnA(out) {
                if (this.impl) bullet2CocosVec3(out, bt.ManifoldPoint_get_m_positionWorldOnA(this.impl));
              };

              _proto.getWorldPointOnB = function getWorldPointOnB(out) {
                if (this.impl) bullet2CocosVec3(out, bt.ManifoldPoint_get_m_positionWorldOnB(this.impl));
              };

              _proto.getLocalNormalOnA = function getLocalNormalOnA(out) {
                if (this.impl) {
                  var bt_rot = BulletCache.instance.BT_QUAT_0;
                  var body = bt.PersistentManifold_getBody0(this.impl);
                  var trans = bt.CollisionObject_getWorldTransform(body);
                  bt.Transform_getRotation(trans, bt_rot);
                  var inv_rot = CC_QUAT_0;
                  bullet2CocosQuat(inv_rot, bt_rot);
                  Quat.conjugate(inv_rot, inv_rot);
                  bullet2CocosVec3(out, bt.ManifoldPoint_get_m_normalWorldOnB(this.impl));
                  if (!this.isBodyA) Vec3.negate(out, out);
                  Vec3.transformQuat(out, out, inv_rot);
                }
              };

              _proto.getLocalNormalOnB = function getLocalNormalOnB(out) {
                if (this.impl) {
                  var bt_rot = BulletCache.instance.BT_QUAT_0;
                  var body = bt.PersistentManifold_getBody1(this.impl);
                  var trans = bt.CollisionObject_getWorldTransform(body);
                  bt.Transform_getRotation(trans, bt_rot);
                  var inv_rot = CC_QUAT_0;
                  bullet2CocosQuat(inv_rot, bt_rot);
                  Quat.conjugate(inv_rot, inv_rot);
                  bullet2CocosVec3(out, bt.ManifoldPoint_get_m_normalWorldOnB(this.impl));
                  Vec3.transformQuat(out, out, inv_rot);
                }
              };

              _proto.getWorldNormalOnA = function getWorldNormalOnA(out) {
                if (this.impl) {
                  bullet2CocosVec3(out, bt.ManifoldPoint_get_m_normalWorldOnB(this.impl));
                  if (!this.isBodyA) Vec3.negate(out, out);
                }
              };

              _proto.getWorldNormalOnB = function getWorldNormalOnB(out) {
                if (this.impl) bullet2CocosVec3(out, bt.ManifoldPoint_get_m_normalWorldOnB(this.impl));
              };

              _createClass(BulletContactData, [{
                key: "isBodyA",
                get: function get() {
                  var sb = this.event.selfCollider.shape.sharedBody.body;
                  return sb === bt.PersistentManifold_getBody0(this.impl);
                }
              }]);

              return BulletContactData;
            }();

            var contactsPool = [];
            var v3_0$3 = CC_V3_0;
            var v3_1$5 = CC_V3_1;
            var BulletWorld = function () {
              var _proto = BulletWorld.prototype;

              _proto.setDefaultMaterial = function setDefaultMaterial(v) {};

              _proto.setAllowSleep = function setAllowSleep(v) {
                bt.ccDiscreteDynamicsWorld_setAllowSleep(this._world, v);
              };

              _proto.setGravity = function setGravity(gravity) {
                bt.DynamicsWorld_setGravity(this._world, cocos2BulletVec3(BulletCache.instance.BT_V3_0, gravity));
              };

              _proto.updateNeedEmitEvents = function updateNeedEmitEvents(v) {
                if (!this.ghosts) return;

                if (v) {
                  this._needEmitEvents = true;
                } else {
                  this._needEmitEvents = false;

                  for (var i = 0; i < this.ghosts.length; i++) {
                    var ghost = this.ghosts[i];
                    var shapes = ghost.ghostStruct.wrappedShapes;

                    for (var j = 0; j < shapes.length; j++) {
                      var collider = shapes[j].collider;

                      if (collider.needCollisionEvent || collider.needTriggerEvent) {
                        this._needEmitEvents = true;
                        return;
                      }
                    }
                  }

                  for (var _i = 0; _i < this.bodies.length; _i++) {
                    var body = this.bodies[_i];
                    var _shapes = body.bodyStruct.wrappedShapes;

                    for (var _j = 0; _j < _shapes.length; _j++) {
                      var _collider = _shapes[_j].collider;

                      if (_collider.needCollisionEvent || _collider.needTriggerEvent) {
                        this._needEmitEvents = true;
                        return;
                      }
                    }
                  }
                }
              };

              function BulletWorld() {
                this._world = void 0;
                this._broadphase = void 0;
                this._solver = void 0;
                this._dispatcher = void 0;
                this._needEmitEvents = false;
                this._needSyncAfterEvents = false;
                this.bodies = [];
                this.ghosts = [];
                this.constraints = [];
                this.triggerArrayMat = new ArrayCollisionMatrix();
                this.collisionArrayMat = new ArrayCollisionMatrix();
                this.contactsDic = new TupleDictionary();
                this.oldContactsDic = new TupleDictionary();
                this._broadphase = bt.DbvtBroadphase_new();
                this._dispatcher = bt.CollisionDispatcher_new();
                this._solver = bt.SequentialImpulseConstraintSolver_new();
                this._world = bt.ccDiscreteDynamicsWorld_new(this._dispatcher, this._broadphase, this._solver);
              }

              _proto.destroy = function destroy() {
                if (this.constraints.length || this.bodies.length) error('You should destroy all physics component first.');
                bt.CollisionWorld_del(this._world);
                bt.DbvtBroadphase_del(this._broadphase);
                bt.CollisionDispatcher_del(this._dispatcher);
                bt.SequentialImpulseConstraintSolver_del(this._solver);
                this.bodies = null;
                this.ghosts = null;
                this.constraints = null;
                this.triggerArrayMat = null;
                this.collisionArrayMat = null;
                this.contactsDic = null;
                this.oldContactsDic = null;
                contactsPool.length = 0;
              };

              _proto.step = function step(deltaTime, timeSinceLastCalled, maxSubStep) {
                if (maxSubStep === void 0) {
                  maxSubStep = 0;
                }

                if (!this.bodies.length && !this.ghosts.length) return;
                if (timeSinceLastCalled === undefined) timeSinceLastCalled = deltaTime;
                bt.DynamicsWorld_stepSimulation(this._world, timeSinceLastCalled, maxSubStep, deltaTime);
              };

              _proto.syncSceneToPhysics = function syncSceneToPhysics() {
                for (var i = this.ghosts.length - 1; i >= 0; i--) {
                  var ghost = this.ghosts[i];
                  ghost.updateDirty();
                  ghost.syncSceneToGhost();
                }

                for (var _i2 = this.bodies.length - 1; _i2 >= 0; _i2--) {
                  var body = this.bodies[_i2];
                  body.updateDirty();
                  body.syncSceneToPhysics();
                }
              };

              _proto.syncAfterEvents = function syncAfterEvents() {
                if (!this._needSyncAfterEvents) return;
                this.syncSceneToPhysics();
              };

              _proto.raycast = function raycast(worldRay, options, pool, results) {
                worldRay.computeHit(v3_0$3, options.maxDistance);
                var to = cocos2BulletVec3(BulletCache.instance.BT_V3_0, v3_0$3);
                var from = cocos2BulletVec3(BulletCache.instance.BT_V3_1, worldRay.o);
                var allHitsCB = bt.ccAllRayCallback_static();
                bt.ccAllRayCallback_reset(allHitsCB, from, to, options.mask, options.queryTrigger);
                bt.CollisionWorld_rayTest(this._world, from, to, allHitsCB);

                if (bt.RayCallback_hasHit(allHitsCB)) {
                  var posArray = bt.ccAllRayCallback_getHitPointWorld(allHitsCB);
                  var normalArray = bt.ccAllRayCallback_getHitNormalWorld(allHitsCB);
                  var ptrArray = bt.ccAllRayCallback_getCollisionShapePtrs(allHitsCB);

                  for (var i = 0, n = bt.int_array_size(ptrArray); i < n; i++) {
                    bullet2CocosVec3(v3_0$3, bt.Vec3_array_at(posArray, i));
                    bullet2CocosVec3(v3_1$5, bt.Vec3_array_at(normalArray, i));
                    var shape = BulletCache.getWrapper(bt.int_array_at(ptrArray, i), BulletShape.TYPE);
                    var r = pool.add();
                    results.push(r);

                    r._assign(v3_0$3, Vec3.distance(worldRay.o, v3_0$3), shape.collider, v3_1$5);
                  }

                  return true;
                }

                return false;
              };

              _proto.raycastClosest = function raycastClosest(worldRay, options, result) {
                worldRay.computeHit(v3_0$3, options.maxDistance);
                var to = cocos2BulletVec3(BulletCache.instance.BT_V3_0, v3_0$3);
                var from = cocos2BulletVec3(BulletCache.instance.BT_V3_1, worldRay.o);
                var closeHitCB = bt.ccClosestRayCallback_static();
                bt.ccClosestRayCallback_reset(closeHitCB, from, to, options.mask, options.queryTrigger);
                bt.CollisionWorld_rayTest(this._world, from, to, closeHitCB);

                if (bt.RayCallback_hasHit(closeHitCB)) {
                  bullet2CocosVec3(v3_0$3, bt.ccClosestRayCallback_getHitPointWorld(closeHitCB));
                  bullet2CocosVec3(v3_1$5, bt.ccClosestRayCallback_getHitNormalWorld(closeHitCB));
                  var shape = BulletCache.getWrapper(bt.ccClosestRayCallback_getCollisionShapePtr(closeHitCB), BulletShape.TYPE);

                  result._assign(v3_0$3, Vec3.distance(worldRay.o, v3_0$3), shape.collider, v3_1$5);

                  return true;
                }

                return false;
              };

              _proto.getSharedBody = function getSharedBody(node, wrappedBody) {
                return BulletSharedBody.getSharedBody(node, this, wrappedBody);
              };

              _proto.addSharedBody = function addSharedBody(sharedBody) {
                var i = this.bodies.indexOf(sharedBody);

                if (i < 0) {
                  this.bodies.push(sharedBody);
                  bt.DynamicsWorld_addRigidBody(this._world, sharedBody.body, sharedBody.collisionFilterGroup, sharedBody.collisionFilterMask);
                }
              };

              _proto.removeSharedBody = function removeSharedBody(sharedBody) {
                var i = this.bodies.indexOf(sharedBody);

                if (i >= 0) {
                  fastRemoveAt(this.bodies, i);
                  bt.DynamicsWorld_removeRigidBody(this._world, sharedBody.body);
                }
              };

              _proto.addGhostObject = function addGhostObject(sharedBody) {
                var i = this.ghosts.indexOf(sharedBody);

                if (i < 0) {
                  this.ghosts.push(sharedBody);
                  bt.CollisionWorld_addCollisionObject(this._world, sharedBody.ghost, sharedBody.collisionFilterGroup, sharedBody.collisionFilterMask);
                }
              };

              _proto.removeGhostObject = function removeGhostObject(sharedBody) {
                var i = this.ghosts.indexOf(sharedBody);

                if (i >= 0) {
                  fastRemoveAt(this.ghosts, i);
                  bt.CollisionWorld_removeCollisionObject(this._world, sharedBody.ghost);
                }
              };

              _proto.addConstraint = function addConstraint(constraint) {
                var i = this.constraints.indexOf(constraint);

                if (i < 0) {
                  this.constraints.push(constraint);
                  bt.DynamicsWorld_addConstraint(this.impl, constraint.impl, !constraint.constraint.enableCollision);
                  constraint.index = i;
                }
              };

              _proto.removeConstraint = function removeConstraint(constraint) {
                var i = this.constraints.indexOf(constraint);

                if (i >= 0) {
                  this.constraints.splice(i, 1);
                  bt.DynamicsWorld_removeConstraint(this.impl, constraint.impl);
                  constraint.index = -1;
                }
              };

              _proto.emitEvents = function emitEvents() {
                this._needSyncAfterEvents = false;
                if (!this._needEmitEvents) return;
                this.gatherConatactData();
                var dicL = this.contactsDic.getLength();

                while (dicL--) {
                  contactsPool.push.apply(contactsPool, CollisionEventObject.contacts);
                  CollisionEventObject.contacts.length = 0;
                  var key = this.contactsDic.getKeyByIndex(dicL);
                  var data = this.contactsDic.getDataByKey(key);
                  var shape0 = data.shape0;
                  var shape1 = data.shape1;
                  this.oldContactsDic.set(shape0.id, shape1.id, data);
                  var collider0 = shape0.collider;
                  var collider1 = shape1.collider;

                  if (collider0 && collider1) {
                    var isTrigger = collider0.isTrigger || collider1.isTrigger;

                    if (isTrigger) {
                      if (this.triggerArrayMat.get(shape0.id, shape1.id)) {
                        TriggerEventObject.type = 'onTriggerStay';
                      } else {
                        TriggerEventObject.type = 'onTriggerEnter';
                        this.triggerArrayMat.set(shape0.id, shape1.id, true);
                      }

                      TriggerEventObject.impl = data.impl;
                      TriggerEventObject.selfCollider = collider0;
                      TriggerEventObject.otherCollider = collider1;
                      collider0.emit(TriggerEventObject.type, TriggerEventObject);
                      TriggerEventObject.selfCollider = collider1;
                      TriggerEventObject.otherCollider = collider0;
                      collider1.emit(TriggerEventObject.type, TriggerEventObject);
                      this._needSyncAfterEvents = true;
                    } else {
                      var body0 = collider0.attachedRigidBody;
                      var body1 = collider1.attachedRigidBody;

                      if (body0 && body1) {
                        if (body0.isSleeping && body1.isSleeping) continue;
                      } else if (!body0 && body1) {
                        if (body1.isSleeping) continue;
                      } else if (!body1 && body0) {
                        if (body0.isSleeping) continue;
                      }

                      if (this.collisionArrayMat.get(shape0.id, shape1.id)) {
                        CollisionEventObject.type = 'onCollisionStay';
                      } else {
                        CollisionEventObject.type = 'onCollisionEnter';
                        this.collisionArrayMat.set(shape0.id, shape1.id, true);
                      }

                      for (var i = 0; i < data.contacts.length; i++) {
                        var cq = data.contacts[i];

                        if (contactsPool.length > 0) {
                          var c = contactsPool.pop();
                          c.impl = cq;
                          CollisionEventObject.contacts.push(c);
                        } else {
                          var _c = new BulletContactData(CollisionEventObject);

                          _c.impl = cq;
                          CollisionEventObject.contacts.push(_c);
                        }
                      }

                      CollisionEventObject.impl = data.impl;
                      CollisionEventObject.selfCollider = collider0;
                      CollisionEventObject.otherCollider = collider1;
                      collider0.emit(CollisionEventObject.type, CollisionEventObject);
                      CollisionEventObject.selfCollider = collider1;
                      CollisionEventObject.otherCollider = collider0;
                      collider1.emit(CollisionEventObject.type, CollisionEventObject);
                      this._needSyncAfterEvents = true;
                    }

                    if (this.oldContactsDic.get(shape0.id, shape1.id) == null) {
                      this.oldContactsDic.set(shape0.id, shape1.id, data);
                    }
                  }
                }

                var oldDicL = this.oldContactsDic.getLength();

                while (oldDicL--) {
                  var _key = this.oldContactsDic.getKeyByIndex(oldDicL);

                  var _data = this.oldContactsDic.getDataByKey(_key);

                  var _shape = _data.shape0;
                  var _shape2 = _data.shape1;
                  var _collider2 = _shape.collider;
                  var _collider3 = _shape2.collider;

                  if (_collider2 && _collider3) {
                    var _isTrigger = _collider2.isTrigger || _collider3.isTrigger;

                    if (this.contactsDic.getDataByKey(_key) == null) {
                      if (_isTrigger) {
                        if (this.triggerArrayMat.get(_shape.id, _shape2.id)) {
                          TriggerEventObject.type = 'onTriggerExit';
                          TriggerEventObject.selfCollider = _collider2;
                          TriggerEventObject.otherCollider = _collider3;

                          _collider2.emit(TriggerEventObject.type, TriggerEventObject);

                          TriggerEventObject.selfCollider = _collider3;
                          TriggerEventObject.otherCollider = _collider2;

                          _collider3.emit(TriggerEventObject.type, TriggerEventObject);

                          this.triggerArrayMat.set(_shape.id, _shape2.id, false);
                          this.oldContactsDic.set(_shape.id, _shape2.id, null);
                          this._needSyncAfterEvents = true;
                        }
                      } else if (this.collisionArrayMat.get(_shape.id, _shape2.id)) {
                        contactsPool.push.apply(contactsPool, CollisionEventObject.contacts);
                        CollisionEventObject.contacts.length = 0;
                        CollisionEventObject.type = 'onCollisionExit';
                        CollisionEventObject.selfCollider = _collider2;
                        CollisionEventObject.otherCollider = _collider3;

                        _collider2.emit(CollisionEventObject.type, CollisionEventObject);

                        CollisionEventObject.selfCollider = _collider3;
                        CollisionEventObject.otherCollider = _collider2;

                        _collider3.emit(CollisionEventObject.type, CollisionEventObject);

                        this.collisionArrayMat.set(_shape.id, _shape2.id, false);
                        this.oldContactsDic.set(_shape.id, _shape2.id, null);
                        this._needSyncAfterEvents = true;
                      }
                    }
                  }
                }

                this.contactsDic.reset();
              };

              _proto.gatherConatactData = function gatherConatactData() {
                var numManifolds = bt.Dispatcher_getNumManifolds(this._dispatcher);

                for (var i = 0; i < numManifolds; i++) {
                  var manifold = bt.Dispatcher_getManifoldByIndexInternal(this._dispatcher, i);
                  var numContacts = bt.PersistentManifold_getNumContacts(manifold);

                  for (var j = 0; j < numContacts; j++) {
                    var manifoldPoint = bt.PersistentManifold_getContactPoint(manifold, j);
                    var s0 = bt.ManifoldPoint_getShape0(manifoldPoint);
                    var s1 = bt.ManifoldPoint_getShape1(manifoldPoint);
                    var shape0 = BulletCache.getWrapper(s0, BulletShape.TYPE);
                    var shape1 = BulletCache.getWrapper(s1, BulletShape.TYPE);

                    if (shape0.collider.needTriggerEvent || shape1.collider.needTriggerEvent || shape0.collider.needCollisionEvent || shape1.collider.needCollisionEvent) {
                      var item = this.contactsDic.get(shape0.id, shape1.id);

                      if (!item) {
                        item = this.contactsDic.set(shape0.id, shape1.id, {
                          shape0: shape0,
                          shape1: shape1,
                          contacts: [],
                          impl: manifold
                        });
                      }

                      item.contacts.push(manifoldPoint);
                    }
                  }
                }
              };

              _createClass(BulletWorld, [{
                key: "impl",
                get: function get() {
                  return this._world;
                }
              }]);

              return BulletWorld;
            }();

            var BulletBoxShape = function (_BulletShape) {
              _inheritsLoose(BulletBoxShape, _BulletShape);

              function BulletBoxShape() {
                return _BulletShape.apply(this, arguments) || this;
              }

              var _proto = BulletBoxShape.prototype;

              _proto.updateSize = function updateSize() {
                var hf = BulletCache.instance.BT_V3_0;
                cocos2BulletVec3(hf, this.getMinUnscaledHalfExtents(VEC3_0));
                bt.BoxShape_setUnscaledHalfExtents(this.impl, hf);
                this.updateCompoundTransform();
              };

              _proto.onComponentSet = function onComponentSet() {
                var hf = BulletCache.instance.BT_V3_0;
                cocos2BulletVec3(hf, this.getMinUnscaledHalfExtents(VEC3_0));
                this._impl = bt.BoxShape_new(hf);
                this.updateScale();
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                var bt_v3 = BulletCache.instance.BT_V3_0;
                bt.CollisionShape_setLocalScaling(this._impl, cocos2BulletVec3(bt_v3, this.getMinScale(VEC3_0)));
                this.updateCompoundTransform();
              };

              _proto.getMinUnscaledHalfExtents = function getMinUnscaledHalfExtents(out) {
                var size = this.collider.size;
                var ws = absolute(VEC3_0.set(this._collider.node.worldScale));
                var minVolumeSize = PhysicsSystem.instance.minVolumeSize;
                var halfSizeX = size.x / 2;
                var halfSizeY = size.y / 2;
                var halfSizeZ = size.z / 2;
                var halfX = halfSizeX * ws.x < minVolumeSize ? minVolumeSize / ws.x : halfSizeX;
                var halfY = halfSizeY * ws.y < minVolumeSize ? minVolumeSize / ws.y : halfSizeY;
                var halfZ = halfSizeZ * ws.z < minVolumeSize ? minVolumeSize / ws.z : halfSizeZ;
                out.set(halfX, halfY, halfZ);
                return out;
              };

              _proto.getMinScale = function getMinScale(out) {
                var size = this.collider.size;
                var ws = absolute(VEC3_0.set(this._collider.node.worldScale));
                var minVolumeSize = PhysicsSystem.instance.minVolumeSize;
                var halfSizeX = size.x / 2;
                var halfSizeY = size.y / 2;
                var halfSizeZ = size.z / 2;
                var scaleX = halfSizeX * ws.x < minVolumeSize ? minVolumeSize / halfSizeX : ws.x;
                var scaleY = halfSizeY * ws.y < minVolumeSize ? minVolumeSize / halfSizeY : ws.y;
                var scaleZ = halfSizeZ * ws.z < minVolumeSize ? minVolumeSize / halfSizeZ : ws.z;
                out.set(scaleX, scaleY, scaleZ);
                return out;
              };

              _createClass(BulletBoxShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletBoxShape;
            }(BulletShape);

            var BulletSphereShape = function (_BulletShape) {
              _inheritsLoose(BulletSphereShape, _BulletShape);

              function BulletSphereShape() {
                return _BulletShape.apply(this, arguments) || this;
              }

              var _proto = BulletSphereShape.prototype;

              _proto.updateRadius = function updateRadius() {
                bt.SphereShape_setUnscaledRadius(this.impl, this.getMinUnscaledRadius());
                this.updateCompoundTransform();
              };

              _proto.onComponentSet = function onComponentSet() {
                this._impl = bt.SphereShape_new(this.getMinUnscaledRadius());
                this.updateScale();
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                var scale = this.getMinScale();
                CC_V3_0.set(scale, scale, scale);
                var bt_v3 = BulletCache.instance.BT_V3_0;
                bt.CollisionShape_setLocalScaling(this._impl, cocos2BulletVec3(bt_v3, CC_V3_0));
                this.updateCompoundTransform();
              };

              _proto.getMinUnscaledRadius = function getMinUnscaledRadius() {
                var radius = this.collider.radius;
                var ws = Math.abs(absMaxComponent(this._collider.node.worldScale));
                var minVolumeSize = PhysicsSystem.instance.minVolumeSize;
                return ws * radius < minVolumeSize ? minVolumeSize / ws : radius;
              };

              _proto.getMinScale = function getMinScale() {
                var radius = this.collider.radius;
                var ws = Math.abs(absMaxComponent(this._collider.node.worldScale));
                var minVolumeSize = PhysicsSystem.instance.minVolumeSize;
                return ws * radius < minVolumeSize ? minVolumeSize / radius : ws;
              };

              _createClass(BulletSphereShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletSphereShape;
            }(BulletShape);

            var BulletCapsuleShape = function (_BulletShape) {
              _inheritsLoose(BulletCapsuleShape, _BulletShape);

              function BulletCapsuleShape() {
                return _BulletShape.apply(this, arguments) || this;
              }

              var _proto = BulletCapsuleShape.prototype;

              _proto.setCylinderHeight = function setCylinderHeight(v) {
                this.updateProperties(this.collider.radius, this.collider.cylinderHeight, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.setDirection = function setDirection(v) {
                this.updateProperties(this.collider.radius, this.collider.cylinderHeight, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.setRadius = function setRadius(v) {
                this.updateProperties(this.collider.radius, this.collider.cylinderHeight, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.onComponentSet = function onComponentSet() {
                this._impl = bt.CapsuleShape_new(0.5, 1);
                this.setRadius(this.collider.radius);
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                this.setRadius(this.collider.radius);
              };

              _proto.updateProperties = function updateProperties(radius, height, direction, scale) {
                var ws = scale;
                var upAxis = direction;
                var wr;
                var halfH;

                if (upAxis === 1) {
                  wr = radius * Math.abs(absMax(ws.x, ws.z));
                  halfH = height / 2 * Math.abs(ws.y);
                } else if (upAxis === 0) {
                  wr = radius * Math.abs(absMax(ws.y, ws.z));
                  halfH = height / 2 * Math.abs(ws.x);
                } else {
                  wr = radius * Math.abs(absMax(ws.x, ws.y));
                  halfH = height / 2 * Math.abs(ws.z);
                }

                bt.CapsuleShape_updateProp(this._impl, wr, halfH, upAxis);
                this.updateCompoundTransform();
              };

              _createClass(BulletCapsuleShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletCapsuleShape;
            }(BulletShape);

            var BulletTrimeshShape = function (_BulletShape) {
              _inheritsLoose(BulletTrimeshShape, _BulletShape);

              function BulletTrimeshShape() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _BulletShape.call.apply(_BulletShape, [this].concat(args)) || this;
                _this.refBtTriangleMesh = 0;
                return _this;
              }

              var _proto = BulletTrimeshShape.prototype;

              _proto.setMesh = function setMesh(v) {
                if (!this._isInitialized) return;

                if (this._impl && BulletCache.isNotEmptyShape(this._impl)) {
                  warnID(9620);
                } else {
                  var mesh = v;

                  if (mesh && mesh.renderingSubMeshes.length > 0) {
                    var btTriangleMesh = this._getBtTriangleMesh(mesh);

                    if (this.collider.convex) {
                      this._impl = bt.ConvexTriangleMeshShape_new(btTriangleMesh);
                    } else {
                      this._impl = bt.BvhTriangleMeshShape_new(btTriangleMesh, true, true);
                    }

                    var bt_v3 = BulletCache.instance.BT_V3_0;
                    cocos2BulletVec3(bt_v3, this._collider.node.worldScale);
                    bt.CollisionShape_setMargin(this._impl, 0.01);
                    bt.CollisionShape_setLocalScaling(this._impl, bt_v3);
                    this.setCompound(this._compound);
                    this.updateByReAdd();
                    this.setWrapper();
                  } else {
                    this._impl = bt.EmptyShape_static();
                  }
                }
              };

              _proto.onComponentSet = function onComponentSet() {
                this.setMesh(this.collider.mesh);
              };

              _proto.onDestroy = function onDestroy() {
                if (this.refBtTriangleMesh) {
                  bt.TriangleMesh_del(this.refBtTriangleMesh);
                }

                _BulletShape.prototype.onDestroy.call(this);
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                var bt_v3 = BulletCache.instance.BT_V3_0;
                cocos2BulletVec3(bt_v3, this._collider.node.worldScale);
                bt.CollisionShape_setLocalScaling(this._impl, bt_v3);
                this.updateCompoundTransform();
              };

              _proto._getBtTriangleMesh = function _getBtTriangleMesh(mesh) {
                this.refBtTriangleMesh = bt.TriangleMesh_new();
                cocos2BulletTriMesh(this.refBtTriangleMesh, mesh);
                return this.refBtTriangleMesh;
              };

              _createClass(BulletTrimeshShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletTrimeshShape;
            }(BulletShape);

            var BulletCylinderShape = function (_BulletShape) {
              _inheritsLoose(BulletCylinderShape, _BulletShape);

              function BulletCylinderShape() {
                return _BulletShape.apply(this, arguments) || this;
              }

              var _proto = BulletCylinderShape.prototype;

              _proto.setHeight = function setHeight(v) {
                this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.setDirection = function setDirection(v) {
                this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.setRadius = function setRadius(v) {
                this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.onComponentSet = function onComponentSet() {
                var bt_v3 = BulletCache.instance.BT_V3_0;
                bt.Vec3_set(bt_v3, 0.5, 1, 0.5);
                this._impl = bt.CylinderShape_new(bt_v3);
                this.setRadius(this.collider.radius);
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                this.setRadius(this.collider.radius);
              };

              _proto.updateProperties = function updateProperties(radius, height, direction, scale) {
                var ws = scale;
                var upAxis = direction;
                var wr;
                var wh;

                if (upAxis === 1) {
                  wh = height * Math.abs(ws.y);
                  wr = radius * Math.abs(absMax(ws.x, ws.z));
                } else if (upAxis === 0) {
                  wh = height * Math.abs(ws.x);
                  wr = radius * Math.abs(absMax(ws.y, ws.z));
                } else {
                  wh = height * Math.abs(ws.z);
                  wr = radius * Math.abs(absMax(ws.x, ws.y));
                }

                bt.CylinderShape_updateProp(this._impl, wr, wh / 2, upAxis);
                this.updateCompoundTransform();
              };

              _createClass(BulletCylinderShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletCylinderShape;
            }(BulletShape);

            var BulletConeShape = function (_BulletShape) {
              _inheritsLoose(BulletConeShape, _BulletShape);

              function BulletConeShape() {
                return _BulletShape.apply(this, arguments) || this;
              }

              var _proto = BulletConeShape.prototype;

              _proto.setHeight = function setHeight(v) {
                this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.setDirection = function setDirection(v) {
                this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.setRadius = function setRadius(v) {
                this.updateProperties(this.collider.radius, this.collider.height, this.collider.direction, this._collider.node.worldScale);
              };

              _proto.onComponentSet = function onComponentSet() {
                this._impl = bt.ConeShape_new(0.5, 1);
                this.setRadius(this.collider.radius);
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                this.setRadius(this.collider.radius);
              };

              _proto.updateProperties = function updateProperties(radius, height, direction, scale) {
                var ws = scale;
                var upAxis = direction;
                var wr;
                var wh;

                if (upAxis === 1) {
                  wh = height * Math.abs(ws.y);
                  wr = radius * Math.abs(absMax(ws.x, ws.z));
                } else if (upAxis === 0) {
                  wh = height * Math.abs(ws.x);
                  wr = radius * Math.abs(absMax(ws.y, ws.z));
                } else {
                  wh = height * Math.abs(ws.z);
                  wr = radius * Math.abs(absMax(ws.x, ws.y));
                }

                bt.ConeShape_setRadius(this._impl, wr);
                bt.ConeShape_setHeight(this._impl, wh);
                bt.ConeShape_setConeUpIndex(this._impl, upAxis);
                var bt_v3 = BulletCache.instance.BT_V3_0;
                bt.Vec3_set(bt_v3, 1, 1, 1);
                bt.CollisionShape_setLocalScaling(this._impl, bt_v3);
                this.updateCompoundTransform();
              };

              _createClass(BulletConeShape, [{
                key: "impl",
                get: function get() {
                  return this._impl;
                }
              }, {
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletConeShape;
            }(BulletShape);

            var BulletTerrainShape = function (_BulletShape) {
              _inheritsLoose(BulletTerrainShape, _BulletShape);

              function BulletTerrainShape() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _BulletShape.call.apply(_BulletShape, [this].concat(args)) || this;
                _this._bufPtr = 0;
                _this._tileSize = 0;
                _this._localOffset = new Vec3();
                return _this;
              }

              var _proto = BulletTerrainShape.prototype;

              _proto.setTerrain = function setTerrain(v) {
                if (!this._isInitialized) return;

                if (this._impl && BulletCache.isNotEmptyShape(this._impl)) {
                  warn('[Physics][Bullet]: change the terrain asset after initialization is not support.');
                } else {
                  var terrain = v;

                  if (terrain) {
                    this._tileSize = terrain.tileSize;
                    var sizeI = terrain.getVertexCountI();
                    var sizeJ = terrain.getVertexCountJ();
                    this._bufPtr = bt._malloc(4 * sizeI * sizeJ);
                    var offset = 0;
                    var min = Number.MAX_SAFE_INTEGER;
                    var max = Number.MIN_SAFE_INTEGER;

                    for (var j = 0; j < sizeJ; j++) {
                      for (var i = 0; i < sizeI; i++) {
                        var _v = terrain.getHeight(i, j);

                        bt._write_f32(this._bufPtr + offset, _v);

                        if (min > _v) min = _v;
                        if (_v > max) max = _v;
                        offset += 4;
                      }
                    }

                    max += 0.01;
                    min -= 0.01;

                    this._localOffset.set((sizeI - 1) / 2 * this._tileSize, (max + min) / 2, (sizeJ - 1) / 2 * this._tileSize);

                    this._impl = bt.TerrainShape_new(sizeI, sizeJ, this._bufPtr, 1, min, max);
                    var bt_v3 = BulletCache.instance.BT_V3_0;
                    bt.Vec3_set(bt_v3, this._tileSize, 1, this._tileSize);
                    bt.CollisionShape_setLocalScaling(this._impl, bt_v3);
                    this.setCompound(this._compound);
                    this.updateByReAdd();
                    this.setWrapper();
                  } else {
                    this._impl = bt.EmptyShape_static();
                  }
                }
              };

              _proto.onComponentSet = function onComponentSet() {
                this.setTerrain(this.collider.terrain);
              };

              _proto.onDestroy = function onDestroy() {
                if (this._bufPtr) bt._free(this._bufPtr);

                _BulletShape.prototype.onDestroy.call(this);
              };

              _proto.setCenter = function setCenter(v) {
                Vec3.copy(CC_V3_0, v);
                CC_V3_0.add(this._localOffset);
                cocos2BulletVec3(bt.Transform_getOrigin(this.transform), CC_V3_0);
                this.updateCompoundTransform();
              };

              _createClass(BulletTerrainShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletTerrainShape;
            }(BulletShape);

            var BulletSimplexShape = function (_BulletShape) {
              _inheritsLoose(BulletSimplexShape, _BulletShape);

              function BulletSimplexShape() {
                return _BulletShape.apply(this, arguments) || this;
              }

              var _proto = BulletSimplexShape.prototype;

              _proto.setShapeType = function setShapeType(v) {};

              _proto.setVertices = function setVertices(v) {};

              _proto.onComponentSet = function onComponentSet() {
                this._impl = bt.SimplexShape_new();
                var length = this.collider.shapeType;
                var vertices = this.collider.vertices;
                var bt_v3 = BulletCache.instance.BT_V3_0;

                for (var i = 0; i < length; i++) {
                  bt.SimplexShape_addVertex(this._impl, cocos2BulletVec3(bt_v3, vertices[i]));
                }

                bt.CollisionShape_setLocalScaling(this._impl, cocos2BulletVec3(bt_v3, this._collider.node.worldScale));
              };

              _proto.onLoad = function onLoad() {
                _BulletShape.prototype.onLoad.call(this);

                this.collider.updateVertices();
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                var bt_v3 = BulletCache.instance.BT_V3_0;
                bt.CollisionShape_setLocalScaling(this._impl, cocos2BulletVec3(bt_v3, this._collider.node.worldScale));
              };

              _createClass(BulletSimplexShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletSimplexShape;
            }(BulletShape);

            var BulletPlaneShape = function (_BulletShape) {
              _inheritsLoose(BulletPlaneShape, _BulletShape);

              function BulletPlaneShape() {
                return _BulletShape.apply(this, arguments) || this;
              }

              var _proto = BulletPlaneShape.prototype;

              _proto.setNormal = function setNormal(v) {
                cocos2BulletVec3(bt.StaticPlaneShape_getPlaneNormal(this.impl), v);
                this.updateCompoundTransform();
              };

              _proto.setConstant = function setConstant(v) {
                bt.StaticPlaneShape_setPlaneConstant(this.impl, v);
                this.updateCompoundTransform();
              };

              _proto.updateScale = function updateScale() {
                _BulletShape.prototype.updateScale.call(this);

                var bt_v3 = BulletCache.instance.BT_V3_0;
                cocos2BulletVec3(bt_v3, this._collider.node.worldScale);
                bt.CollisionShape_setLocalScaling(this._impl, bt_v3);
                this.updateCompoundTransform();
              };

              _proto.onComponentSet = function onComponentSet() {
                var normal = BulletCache.instance.BT_V3_0;
                cocos2BulletVec3(normal, this.collider.normal);
                this._impl = bt.StaticPlaneShape_new(normal, this.collider.constant);
                this.updateScale();
              };

              _createClass(BulletPlaneShape, [{
                key: "collider",
                get: function get() {
                  return this._collider;
                }
              }]);

              return BulletPlaneShape;
            }(BulletShape);

            var BulletConstraint = function () {
              function BulletConstraint() {
                this.dirty = 0;
                this.index = -1;
                this._impl = 0;
                this._collided = false;
              }

              var _proto = BulletConstraint.prototype;

              _proto.setConnectedBody = function setConnectedBody(v) {};

              _proto.setEnableCollision = function setEnableCollision(v) {
                if (this._collided !== v) {
                  this._collided = v;
                  this.updateByReAdd();
                }
              };

              _proto.updateByReAdd = function updateByReAdd() {
                if (this._rigidBody && this.index >= 0) {
                  var sb = this._rigidBody.body.sharedBody;
                  sb.wrappedWorld.removeConstraint(this);
                  sb.wrappedWorld.addConstraint(this);
                }
              };

              _proto.initialize = function initialize(v) {
                this._com = v;
                this._rigidBody = v.attachedBody;
                this._collided = v.enableCollision;
                this.onComponentSet();
              };

              _proto.onEnable = function onEnable() {
                var sb = this._rigidBody.body.sharedBody;
                sb.wrappedWorld.addConstraint(this);
                sb.addJoint(this, 0);
                var connect = this.constraint.connectedBody;

                if (connect) {
                  var sb2 = connect.body.sharedBody;
                  sb2.addJoint(this, 1);
                }
              };

              _proto.onDisable = function onDisable() {
                var sb = this._rigidBody.body.sharedBody;
                sb.wrappedWorld.removeConstraint(this);
                sb.removeJoint(this, 0);
                var connect = this.constraint.connectedBody;

                if (connect) {
                  var sb2 = connect.body.sharedBody;
                  sb2.removeJoint(this, 1);
                }
              };

              _proto.onDestroy = function onDestroy() {
                bt.TypedConstraint_del(this._impl);
                this._com = null;
                this._rigidBody = null;
              };

              _createClass(BulletConstraint, [{
                key: "impl",
                get: function get() {
                  return this._impl;
                }
              }, {
                key: "constraint",
                get: function get() {
                  return this._com;
                }
              }]);

              return BulletConstraint;
            }();

            var BulletP2PConstraint = function (_BulletConstraint) {
              _inheritsLoose(BulletP2PConstraint, _BulletConstraint);

              function BulletP2PConstraint() {
                return _BulletConstraint.apply(this, arguments) || this;
              }

              var _proto = BulletP2PConstraint.prototype;

              _proto.setPivotA = function setPivotA(v) {
                var cs = this.constraint;
                var pivotA = BulletCache.instance.BT_V3_0;
                Vec3.multiply(CC_V3_0, cs.node.worldScale, cs.pivotA);
                cocos2BulletVec3(pivotA, CC_V3_0);
                bt.P2PConstraint_setPivotA(this._impl, pivotA);
                if (!cs.connectedBody) this.setPivotB(cs.pivotB);
              };

              _proto.setPivotB = function setPivotB(v) {
                var cs = this.constraint;
                var node = this._rigidBody.node;
                var pivotB = BulletCache.instance.BT_V3_0;
                var cb = cs.connectedBody;

                if (cb) {
                  Vec3.multiply(CC_V3_0, cb.node.worldScale, cs.pivotB);
                  cocos2BulletVec3(pivotB, CC_V3_0);
                } else {
                  Vec3.multiply(CC_V3_0, node.worldScale, cs.pivotA);
                  Vec3.add(CC_V3_0, CC_V3_0, node.worldPosition);
                  Vec3.add(CC_V3_0, CC_V3_0, cs.pivotB);
                  cocos2BulletVec3(pivotB, CC_V3_0);
                }

                bt.P2PConstraint_setPivotB(this._impl, pivotB);
              };

              _proto.onComponentSet = function onComponentSet() {
                var cb = this.constraint.connectedBody;
                var bodyA = this._rigidBody.body.impl;
                var bodyB = cb ? cb.body.impl : bt.TypedConstraint_getFixedBody();
                var pivotA = BulletCache.instance.BT_V3_0;
                var pivotB = BulletCache.instance.BT_V3_1;
                this._impl = bt.P2PConstraint_new(bodyA, bodyB, pivotA, pivotB);
                this.setPivotA(this.constraint.pivotA);
                this.setPivotB(this.constraint.pivotB);
              };

              _proto.updateScale0 = function updateScale0() {
                this.setPivotA(this.constraint.pivotA);
              };

              _proto.updateScale1 = function updateScale1() {
                this.setPivotB(this.constraint.pivotB);
              };

              _createClass(BulletP2PConstraint, [{
                key: "constraint",
                get: function get() {
                  return this._com;
                }
              }]);

              return BulletP2PConstraint;
            }(BulletConstraint);

            var BulletHingeConstraint = function (_BulletConstraint) {
              _inheritsLoose(BulletHingeConstraint, _BulletConstraint);

              function BulletHingeConstraint() {
                return _BulletConstraint.apply(this, arguments) || this;
              }

              var _proto = BulletHingeConstraint.prototype;

              _proto.setPivotA = function setPivotA(v) {
                this.updateFrames();
              };

              _proto.setPivotB = function setPivotB(v) {
                this.updateFrames();
              };

              _proto.setAxis = function setAxis(v) {
                this.updateFrames();
              };

              _proto.onComponentSet = function onComponentSet() {
                var cb = this.constraint.connectedBody;
                var bodyA = this._rigidBody.body.impl;
                var bodyB = cb ? cb.body.impl : bt.TypedConstraint_getFixedBody();
                var trans0 = BulletCache.instance.BT_TRANSFORM_0;
                var trans1 = BulletCache.instance.BT_TRANSFORM_1;
                this._impl = bt.HingeConstraint_new(bodyA, bodyB, trans0, trans1);
                this.updateFrames();
              };

              _proto.updateFrames = function updateFrames() {
                var cs = this.constraint;
                var node = cs.node;
                var v3_0 = CC_V3_0;
                var rot_0 = CC_QUAT_0;
                var trans0 = BulletCache.instance.BT_TRANSFORM_0;
                Vec3.multiply(v3_0, node.worldScale, cs.pivotA);
                cocos2BulletVec3(bt.Transform_getOrigin(trans0), v3_0);
                var quat = BulletCache.instance.BT_QUAT_0;
                Quat.rotationTo(rot_0, Vec3.UNIT_Z, cs.axis);
                cocos2BulletQuat(quat, rot_0);
                bt.Transform_setRotation(trans0, quat);
                var trans1 = BulletCache.instance.BT_TRANSFORM_1;
                var cb = this.constraint.connectedBody;

                if (cb) {
                  Vec3.multiply(v3_0, cb.node.worldScale, cs.pivotB);
                } else {
                  Vec3.multiply(v3_0, node.worldScale, cs.pivotA);
                  Vec3.add(v3_0, v3_0, node.worldPosition);
                  Vec3.add(v3_0, v3_0, cs.pivotB);
                  Quat.multiply(rot_0, rot_0, node.worldRotation);
                }

                cocos2BulletVec3(bt.Transform_getOrigin(trans1), v3_0);
                cocos2BulletQuat(quat, rot_0);
                bt.Transform_setRotation(trans1, quat);
                bt.HingeConstraint_setFrames(this._impl, trans0, trans1);
              };

              _proto.updateScale0 = function updateScale0() {
                this.updateFrames();
              };

              _proto.updateScale1 = function updateScale1() {
                this.updateFrames();
              };

              _createClass(BulletHingeConstraint, [{
                key: "constraint",
                get: function get() {
                  return this._com;
                }
              }]);

              return BulletHingeConstraint;
            }(BulletConstraint);

            game.once(Game.EVENT_ENGINE_INITED, function () {
              selector.register('bullet', {
                PhysicsWorld: BulletWorld,
                RigidBody: BulletRigidBody,
                BoxShape: BulletBoxShape,
                SphereShape: BulletSphereShape,
                CapsuleShape: BulletCapsuleShape,
                TrimeshShape: BulletTrimeshShape,
                CylinderShape: BulletCylinderShape,
                ConeShape: BulletConeShape,
                TerrainShape: BulletTerrainShape,
                SimplexShape: BulletSimplexShape,
                PlaneShape: BulletPlaneShape,
                PointToPointConstraint: BulletP2PConstraint,
                HingeConstraint: BulletHingeConstraint
              });
            });

            var _dec$1q, _dec2$19, _class$1t, _class2$1i, _descriptor$1e, _descriptor2$13, _class3$h, _temp$1m;
            var PrimitiveType;

            (function (PrimitiveType) {
              PrimitiveType[PrimitiveType["BOX"] = 0] = "BOX";
              PrimitiveType[PrimitiveType["SPHERE"] = 1] = "SPHERE";
              PrimitiveType[PrimitiveType["CYLINDER"] = 2] = "CYLINDER";
              PrimitiveType[PrimitiveType["CONE"] = 3] = "CONE";
              PrimitiveType[PrimitiveType["CAPSULE"] = 4] = "CAPSULE";
              PrimitiveType[PrimitiveType["TORUS"] = 5] = "TORUS";
              PrimitiveType[PrimitiveType["PLANE"] = 6] = "PLANE";
              PrimitiveType[PrimitiveType["QUAD"] = 7] = "QUAD";
            })(PrimitiveType || (PrimitiveType = {}));

            ccenum(PrimitiveType);
            var Primitive = exports('Primitive', (_dec$1q = ccclass('cc.Primitive'), _dec2$19 = type$1(PrimitiveType), _dec$1q(_class$1t = (_class2$1i = (_temp$1m = _class3$h = function (_Mesh) {
              _inheritsLoose(Primitive, _Mesh);

              function Primitive(type) {
                var _this;

                if (type === void 0) {
                  type = PrimitiveType.BOX;
                }

                _this = _Mesh.call(this) || this;

                _initializerDefineProperty(_this, "type", _descriptor$1e, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "info", _descriptor2$13, _assertThisInitialized(_this));

                _this.type = type;
                return _this;
              }

              var _proto = Primitive.prototype;

              _proto.onLoaded = function onLoaded() {
                createMesh(primitives[PrimitiveType[this.type].toLowerCase()](this.info), this);
              };

              return Primitive;
            }(Mesh), _class3$h.PrimitiveType = PrimitiveType, _temp$1m), (_descriptor$1e = _applyDecoratedDescriptor(_class2$1i.prototype, "type", [_dec2$19], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return PrimitiveType.BOX;
              }
            }), _descriptor2$13 = _applyDecoratedDescriptor(_class2$1i.prototype, "info", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return {};
              }
            })), _class2$1i)) || _class$1t));
            legacyCC.Primitive = Primitive;

            legacyCC.primitives = primitives;

            var Counter = function () {
              function Counter(id, opts, now) {
                this._id = void 0;
                this._opts = void 0;
                this._accumStart = void 0;
                this._total = 0;
                this._value = 0;
                this._averageValue = 0;
                this._accumValue = 0;
                this._accumSamples = 0;
                this._id = id;
                this._opts = opts;
                this._accumStart = now;
              }

              var _proto = Counter.prototype;

              _proto.sample = function sample(now) {
                this._average(this._value, now);
              };

              _proto.human = function human() {
                var _this$_opts = this._opts,
                    average = _this$_opts.average,
                    isInteger = _this$_opts.isInteger;
                var v = average ? this._averageValue : this._value;
                return isInteger ? Math.round(v) : Math.round(v * 100) / 100;
              };

              _proto.alarm = function alarm() {
                return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
              };

              _proto._average = function _average(v, now) {
                if (now === void 0) {
                  now = 0;
                }

                if (this._opts.average) {
                  this._accumValue += v;
                  ++this._accumSamples;
                  var t = now;

                  if (t - this._accumStart >= this._opts.average) {
                    this._averageValue = this._accumValue / this._accumSamples;
                    this._accumValue = 0;
                    this._accumStart = t;
                    this._accumSamples = 0;
                  }
                }
              };

              _createClass(Counter, [{
                key: "value",
                get: function get() {
                  return this._value;
                },
                set: function set(val) {
                  this._value = val;
                }
              }]);

              return Counter;
            }();

            var _dec$1r, _class$1u, _temp$1n;
            var PerfCounter = (_dec$1r = ccclass('cc.PerfCounter'), _dec$1r(_class$1u = (_temp$1n = function (_Counter) {
              _inheritsLoose(PerfCounter, _Counter);

              function PerfCounter(id, opts, now) {
                var _this;

                _this = _Counter.call(this, id, opts, now) || this;
                _this._time = void 0;
                _this._time = now;
                return _this;
              }

              var _proto = PerfCounter.prototype;

              _proto.start = function start(now) {
                if (now === void 0) {
                  now = 0;
                }

                this._time = now;
              };

              _proto.end = function end(now) {
                if (now === void 0) {
                  now = 0;
                }

                this._value = now - this._time;

                this._average(this._value);
              };

              _proto.tick = function tick() {
                this.end();
                this.start();
              };

              _proto.frame = function frame(now) {
                var t = now;
                var e = t - this._time;
                this._total++;
                var avg = this._opts.average || 1000;

                if (e > avg) {
                  this._value = this._total * 1000 / e;
                  this._total = 0;
                  this._time = t;

                  this._average(this._value);
                }
              };

              return PerfCounter;
            }(Counter), _temp$1n)) || _class$1u);

            var _characters = '0123456789. ';
            var _average = 500;
            var _string2offset = {
              0: 0,
              1: 1,
              2: 2,
              3: 3,
              4: 4,
              5: 5,
              6: 6,
              7: 7,
              8: 8,
              9: 9,
              '.': 10
            };
            var _profileInfo = {
              fps: {
                desc: 'Framerate (FPS)',
                below: 30,
                average: _average,
                isInteger: true
              },
              draws: {
                desc: 'Draw call',
                isInteger: true
              },
              frame: {
                desc: 'Frame time (ms)',
                min: 0,
                max: 50,
                average: _average
              },
              instances: {
                desc: 'Instance Count',
                isInteger: true
              },
              tricount: {
                desc: 'Triangle',
                isInteger: true
              },
              logic: {
                desc: 'Game Logic (ms)',
                min: 0,
                max: 50,
                average: _average,
                color: '#080'
              },
              physics: {
                desc: 'Physics (ms)',
                min: 0,
                max: 50,
                average: _average
              },
              render: {
                desc: 'Renderer (ms)',
                min: 0,
                max: 50,
                average: _average,
                color: '#f90'
              },
              textureMemory: {
                desc: 'GFX Texture Mem(M)'
              },
              bufferMemory: {
                desc: 'GFX Buffer Mem(M)'
              }
            };
            var _constants = {
              fontSize: 23,
              quadHeight: 0.4,
              segmentsPerLine: 8,
              textureWidth: 256,
              textureHeight: 256
            };
            var Profiler = exports('Profiler', function () {
              function Profiler() {
                this._stats = null;
                this.id = '__Profiler__';
                this._showFPS = false;
                this._rootNode = null;
                this._device = null;
                this._swapchain = null;
                this._pipeline = null;
                this._meshRenderer = null;
                this._canvas = null;
                this._ctx = null;
                this._texture = null;
                this._region = new BufferTextureCopy();
                this._canvasArr = [];
                this._regionArr = [this._region];
                this.digitsData = null;
                this.offsetData = null;
                this.pass = null;
                this._canvasDone = false;
                this._statsDone = false;
                this._inited = false;
                this._lineHeight = _constants.textureHeight / (Object.keys(_profileInfo).length + 1);
                this._wordHeight = 0;
                this._eachNumWidth = 0;
                this._totalLines = 0;
                this.lastTime = 0;

                {
                  this._canvas = document.createElement('canvas');
                  this._ctx = this._canvas.getContext('2d');

                  this._canvasArr.push(this._canvas);
                }
              }

              var _proto = Profiler.prototype;

              _proto.reset = function reset() {
                this._stats = null;
                this._showFPS = false;
                this._rootNode = null;
                this._device = null;
                this._swapchain = null;
                this._pipeline = null;

                if (this._meshRenderer) {
                  this._meshRenderer.destroy();
                }

                this._meshRenderer = null;
                this.digitsData = null;
                this.offsetData = null;
                this.pass = null;
                this._canvasDone = false;
                this._statsDone = false;
                this._inited = false;
                this._lineHeight = _constants.textureHeight / (Object.keys(_profileInfo).length + 1);
                this._wordHeight = 0;
                this._eachNumWidth = 0;
                this._totalLines = 0;
                this.lastTime = 0;
              };

              _proto.isShowingStats = function isShowingStats() {
                return this._showFPS;
              };

              _proto.hideStats = function hideStats() {
                if (this._showFPS) {
                  if (this._rootNode) {
                    this._rootNode.active = false;
                  }

                  legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this);
                  legacyCC.director.off(legacyCC.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this);
                  legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this);
                  legacyCC.director.off(legacyCC.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this);
                  legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
                  legacyCC.director.off(legacyCC.Director.EVENT_AFTER_DRAW, this.afterDraw, this);
                  this._showFPS = false;
                  this._pipeline.profiler = null;
                  legacyCC.game.config.showFPS = false;
                }
              };

              _proto.showStats = function showStats() {
                if (!this._showFPS) {
                  if (!this._device) {
                    var root = legacyCC.director.root;
                    this._device = root.device;
                    this._swapchain = root.mainWindow.swapchain;
                    this._pipeline = root.pipeline;
                  }

                  {
                    this.generateCanvas();
                  }

                  this.generateStats();

                  {
                    legacyCC.game.once(legacyCC.Game.EVENT_ENGINE_INITED, this.generateNode, this);
                  }

                  if (this._rootNode) {
                    this._rootNode.active = true;
                  }

                  legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this);
                  legacyCC.director.on(legacyCC.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this);
                  legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this);
                  legacyCC.director.on(legacyCC.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this);
                  legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
                  legacyCC.director.on(legacyCC.Director.EVENT_AFTER_DRAW, this.afterDraw, this);
                  this._showFPS = true;
                  this._canvasDone = true;
                  this._statsDone = true;
                  legacyCC.game.config.showFPS = true;
                }
              };

              _proto.generateCanvas = function generateCanvas() {
                if (this._canvasDone) {
                  return;
                }

                var textureWidth = _constants.textureWidth,
                    textureHeight = _constants.textureHeight;

                if (!this._ctx || !this._canvas) {
                  return;
                }

                this._canvas.width = textureWidth;
                this._canvas.height = textureHeight;
                this._canvas.style.width = "" + this._canvas.width;
                this._canvas.style.height = "" + this._canvas.height;
                this._ctx.font = _constants.fontSize + "px Arial";
                this._ctx.textBaseline = 'top';
                this._ctx.fillStyle = '#fff';
                this._texture = this._device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, textureWidth, textureHeight));
                this._region.texExtent.width = textureWidth;
                this._region.texExtent.height = textureHeight;
              };

              _proto.generateStats = function generateStats() {
                if (this._statsDone || !this._ctx || !this._canvas) {
                  return;
                }

                this._stats = null;
                var now = performance.now();
                this._ctx.textAlign = 'left';
                var i = 0;

                for (var id in _profileInfo) {
                  var element = _profileInfo[id];
                  this._ctx.fillText(element.desc, 0, i * this._lineHeight);
                  element.counter = new PerfCounter(id, element, now);
                  i++;
                }

                this._totalLines = i;
                this._wordHeight = this._totalLines * this._lineHeight / this._canvas.height;

                {
                  for (var j = 0; j < _characters.length; ++j) {
                    var offset = this._ctx.measureText(_characters[j]).width;

                    this._eachNumWidth = Math.max(this._eachNumWidth, offset);
                  }

                  for (var _j = 0; _j < _characters.length; ++_j) {
                    this._ctx.fillText(_characters[_j], _j * this._eachNumWidth, this._totalLines * this._lineHeight);
                  }
                }

                this._eachNumWidth /= this._canvas.width;
                this._stats = _profileInfo;
                this._canvasArr[0] = this._canvas;
                this._device.copyTexImagesToTexture(this._canvasArr, this._texture, this._regionArr);
              };

              _proto.generateNode = function generateNode() {
                if (this._rootNode && this._rootNode.isValid) {
                  return;
                }

                this._rootNode = new Node('PROFILER_NODE');
                legacyCC.game.addPersistRootNode(this._rootNode);
                var managerNode = new Node('Profiler_Root');
                managerNode.parent = this._rootNode;
                var height = _constants.quadHeight;
                var rowHeight = height / this._totalLines;
                var lWidth = height / this._wordHeight;
                var scale = rowHeight / _constants.fontSize;
                var columnWidth = this._eachNumWidth * this._canvas.width * scale;
                var vertexPos = [0, height, 0, lWidth, height, 0, lWidth, 0, 0, 0, 0, 0];
                var vertexindices = [0, 2, 1, 0, 3, 2];
                var vertexUV = [0, 0, -1, 0, 1, 0, -1, 0, 1, this._wordHeight, -1, 0, 0, this._wordHeight, -1, 0];
                var offset = 0;

                for (var i = 0; i < this._totalLines; i++) {
                  for (var j = 0; j < _constants.segmentsPerLine; j++) {
                    vertexPos.push(lWidth + j * columnWidth, height - i * rowHeight, 0);
                    vertexPos.push(lWidth + (j + 1) * columnWidth, height - i * rowHeight, 0);
                    vertexPos.push(lWidth + (j + 1) * columnWidth, height - (i + 1) * rowHeight, 0);
                    vertexPos.push(lWidth + j * columnWidth, height - (i + 1) * rowHeight, 0);
                    offset = (i * _constants.segmentsPerLine + j + 1) * 4;
                    vertexindices.push(0 + offset, 2 + offset, 1 + offset, 0 + offset, 3 + offset, 2 + offset);
                    var idx = i * _constants.segmentsPerLine + j;
                    var z = Math.floor(idx / 4);
                    var w = idx - z * 4;
                    vertexUV.push(0, this._wordHeight, z, w);
                    vertexUV.push(this._eachNumWidth, this._wordHeight, z, w);
                    vertexUV.push(this._eachNumWidth, 1, z, w);
                    vertexUV.push(0, 1, z, w);
                  }
                }

                this._meshRenderer = managerNode.addComponent(MeshRenderer);
                this._meshRenderer.mesh = createMesh({
                  positions: vertexPos,
                  indices: vertexindices,
                  colors: vertexUV
                });

                var _material = new Material();

                _material.initialize({
                  effectName: 'profiler'
                });

                var pass = this.pass = _material.passes[0];
                var hTexture = pass.getBinding('mainTexture');
                var bDigits = pass.getBinding('digits');
                var bOffset = pass.getBinding('offset');
                pass.bindTexture(hTexture, this._texture);
                this.digitsData = pass.blocks[bDigits];
                this.offsetData = pass.blocks[bOffset];
                this.offsetData[3] = -1;
                this._meshRenderer.material = _material;
                this._meshRenderer.node.layer = Layers.Enum.PROFILER;
                this._inited = true;
              };

              _proto.beforeUpdate = function beforeUpdate() {
                if (!this._stats) {
                  return;
                }

                var now = performance.now();

                this._stats.frame.counter.start(now);

                this._stats.logic.counter.start(now);
              };

              _proto.afterUpdate = function afterUpdate() {
                if (!this._stats) {
                  return;
                }

                var now = performance.now();

                if (legacyCC.director.isPaused()) {
                  this._stats.frame.counter.start(now);
                } else {
                  this._stats.logic.counter.end(now);
                }
              };

              _proto.beforePhysics = function beforePhysics() {
                if (!this._stats) {
                  return;
                }

                var now = performance.now();

                this._stats.physics.counter.start(now);
              };

              _proto.afterPhysics = function afterPhysics() {
                if (!this._stats) {
                  return;
                }

                var now = performance.now();

                this._stats.physics.counter.end(now);
              };

              _proto.beforeDraw = function beforeDraw() {
                if (!this._stats || !this._inited) {
                  return;
                }

                {
                  var surfaceTransform = this._swapchain.surfaceTransform;
                  var clipSpaceSignY = this._device.capabilities.clipSpaceSignY;

                  if (surfaceTransform !== this.offsetData[3]) {
                    var preTransform = preTransforms[surfaceTransform];
                    var x = -0.9;
                    var y = -0.9 * clipSpaceSignY;
                    this.offsetData[0] = x * preTransform[0] + y * preTransform[2];
                    this.offsetData[1] = x * preTransform[1] + y * preTransform[3];
                    this.offsetData[2] = this._eachNumWidth;
                    this.offsetData[3] = surfaceTransform;
                  }

                  this.pass._setRootBufferDirty(true);
                }

                if (this._meshRenderer.model) this._pipeline.profiler = this._meshRenderer.model;
                var now = performance.now();

                this._stats.render.counter.start(now);
              };

              _proto.afterDraw = function afterDraw() {
                if (!this._stats || !this._inited) {
                  return;
                }

                var now = performance.now();

                this._stats.frame.counter.end(now);

                this._stats.fps.counter.frame(now);

                this._stats.render.counter.end(now);

                if (now - this.lastTime < _average) {
                  return;
                }

                this.lastTime = now;
                var device = this._device;
                this._stats.draws.counter.value = device.numDrawCalls;
                this._stats.instances.counter.value = device.numInstances;
                this._stats.bufferMemory.counter.value = device.memoryStatus.bufferSize / (1024 * 1024);
                this._stats.textureMemory.counter.value = device.memoryStatus.textureSize / (1024 * 1024);
                this._stats.tricount.counter.value = device.numTris;
                var i = 0;

                {
                  var view = this.digitsData;

                  for (var id in this._stats) {
                    var stat = this._stats[id];
                    stat.counter.sample(now);
                    var result = stat.counter.human().toString();

                    for (var j = _constants.segmentsPerLine - 1; j >= 0; j--) {
                      var index = i * _constants.segmentsPerLine + j;
                      var character = result[result.length - (_constants.segmentsPerLine - j)];
                      var offset = _string2offset[character];

                      if (offset === undefined) {
                        offset = 11;
                      }

                      view[index] = offset;
                    }

                    i++;
                  }
                }
              };

              return Profiler;
            }());
            var profiler = exports('profiler', new Profiler());
            legacyCC.profiler = profiler;

            var DataPoolManager = function () {
              function DataPoolManager(device) {
                this.jointTexturePool = void 0;
                this.jointAnimationInfo = void 0;
                this.jointTexturePool = new JointTexturePool(device);
                this.jointAnimationInfo = new JointAnimationInfo(device);
              }

              var _proto = DataPoolManager.prototype;

              _proto.releaseSkeleton = function releaseSkeleton(skeleton) {
                this.jointTexturePool.releaseSkeleton(skeleton);
              };

              _proto.releaseAnimationClip = function releaseAnimationClip(clip) {
                this.jointTexturePool.releaseAnimationClip(clip);
              };

              _proto.clear = function clear() {
                this.jointTexturePool.clear();
                this.jointAnimationInfo.clear();
              };

              return DataPoolManager;
            }();
            legacyCC.internal.DataPoolManager = DataPoolManager;

            var m4_1$5 = new Mat4();
            var m4_2$1 = new Mat4();
            var SkeletalAnimationState = exports('SkeletalAnimationState', function (_AnimationState) {
              _inheritsLoose(SkeletalAnimationState, _AnimationState);

              function SkeletalAnimationState(clip, name) {
                var _this;

                if (name === void 0) {
                  name = '';
                }

                _this = _AnimationState.call(this, clip, name) || this;
                _this._frames = 1;
                _this._bakedDuration = 0;
                _this._animInfo = null;
                _this._sockets = [];
                _this._animInfoMgr = void 0;
                _this._parent = null;
                _this._curvesInited = false;
                _this._animInfoMgr = legacyCC.director.root.dataPoolManager.jointAnimationInfo;
                return _this;
              }

              var _proto = SkeletalAnimationState.prototype;

              _proto.initialize = function initialize(root) {
                if (this._curveLoaded) {
                  return;
                }

                this._parent = root.getComponent('cc.SkeletalAnimation');
                var baked = this._parent.useBakedAnimation;
                this._doNotCreateEval = baked;

                _AnimationState.prototype.initialize.call(this, root);

                this._curvesInited = !baked;

                var _SkelAnimDataHub$getO = SkelAnimDataHub.getOrExtract(this.clip),
                    frames = _SkelAnimDataHub$getO.frames,
                    samples = _SkelAnimDataHub$getO.samples;

                this._frames = frames - 1;
                this._animInfo = this._animInfoMgr.getData(root.uuid);
                this._bakedDuration = this._frames / samples;
                this.setUseBaked(baked);
              };

              _proto.setUseBaked = function setUseBaked(useBaked) {
                if (useBaked) {
                  this._sampleCurves = this._sampleCurvesBaked;
                  this.duration = this._bakedDuration;
                } else {
                  this._sampleCurves = _AnimationState.prototype._sampleCurves;
                  this.duration = this.clip.duration;

                  if (!this._curvesInited) {
                    this._curveLoaded = false;

                    _AnimationState.prototype.initialize.call(this, this._targetNode);

                    this._curvesInited = true;
                  }
                }
              };

              _proto.rebuildSocketCurves = function rebuildSocketCurves(sockets) {
                this._sockets.length = 0;

                if (!this._targetNode) {
                  return;
                }

                var root = this._targetNode;

                for (var i = 0; i < sockets.length; ++i) {
                  var socket = sockets[i];
                  var targetNode = root.getChildByPath(socket.path);

                  if (!socket.target) {
                    continue;
                  }

                  var clipData = SkelAnimDataHub.getOrExtract(this.clip);
                  var animPath = socket.path;
                  var source = clipData.joints[animPath];
                  var animNode = targetNode;
                  var downstream = void 0;

                  while (!source) {
                    var idx = animPath.lastIndexOf('/');
                    animPath = animPath.substring(0, idx);
                    source = clipData.joints[animPath];

                    if (animNode) {
                      if (!downstream) {
                        downstream = Mat4.identity(m4_2$1);
                      }

                      Mat4.fromRTS(m4_1$5, animNode.rotation, animNode.position, animNode.scale);
                      Mat4.multiply(downstream, m4_1$5, downstream);
                      animNode = animNode.parent;
                    }

                    if (idx < 0) {
                      break;
                    }
                  }

                  var curveData = source && source.transforms;
                  var frames = clipData.frames;
                  var transforms = [];

                  for (var f = 0; f < frames; f++) {
                    var mat = void 0;

                    if (curveData && downstream) {
                      mat = Mat4.multiply(m4_1$5, curveData[f], downstream);
                    } else if (curveData) {
                      mat = curveData[f];
                    } else if (downstream) {
                      mat = downstream;
                    } else {
                      mat = new Mat4();
                    }

                    var tfm = {
                      pos: new Vec3(),
                      rot: new Quat(),
                      scale: new Vec3()
                    };
                    Mat4.toRTS(mat, tfm.rot, tfm.pos, tfm.scale);
                    transforms.push(tfm);
                  }

                  this._sockets.push({
                    target: socket.target,
                    frames: transforms
                  });
                }
              };

              _proto._setAnimInfoDirty = function _setAnimInfoDirty(info, value) {
                info.dirty = value;
              };

              _proto._sampleCurvesBaked = function _sampleCurvesBaked(time) {
                var ratio = time / this.duration;
                var info = this._animInfo;
                var clip = this.clip;

                if (info.currentClip !== clip) {
                  this._animInfoMgr.switchClip(this._animInfo, clip);

                  var users = this._parent.getUsers();

                  users.forEach(function (user) {
                    user.uploadAnimation(clip);
                  });
                }

                var curFrame = ratio * this._frames + 0.5 | 0;

                if (curFrame === info.data[0]) {
                  return;
                }

                info.data[0] = curFrame;

                this._setAnimInfoDirty(info, true);

                for (var i = 0; i < this._sockets.length; ++i) {
                  var _this$_sockets$i = this._sockets[i],
                      target = _this$_sockets$i.target,
                      frames = _this$_sockets$i.frames;
                  var _frames$curFrame = frames[curFrame],
                      pos = _frames$curFrame.pos,
                      rot = _frames$curFrame.rot,
                      scale = _frames$curFrame.scale;
                  target.setRTS(rot, pos, scale);
                }
              };

              return SkeletalAnimationState;
            }(AnimationState));

            var _dec$1s, _dec2$1a, _class$1v, _class2$1j, _descriptor$1f, _descriptor2$14, _temp$1o, _dec3$N, _dec4$I, _dec5$C, _dec6$z, _dec7$y, _dec8$w, _dec9$s, _dec10$q, _class4$i, _class5$i, _descriptor3$R, _descriptor4$L, _class6$6, _temp2$i;
            var Socket = exports('Socket', (_dec$1s = ccclass('cc.SkeletalAnimation.Socket'), _dec2$1a = type$1(Node), _dec$1s(_class$1v = (_class2$1j = (_temp$1o = function Socket(path, target) {
              if (path === void 0) {
                path = '';
              }

              if (target === void 0) {
                target = null;
              }

              _initializerDefineProperty(this, "path", _descriptor$1f, this);

              _initializerDefineProperty(this, "target", _descriptor2$14, this);

              this.path = path;
              this.target = target;
            }, _temp$1o), (_descriptor$1f = _applyDecoratedDescriptor(_class2$1j.prototype, "path", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor2$14 = _applyDecoratedDescriptor(_class2$1j.prototype, "target", [_dec2$1a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$1j)) || _class$1v));
            js.setClassAlias(Socket, 'cc.SkeletalAnimationComponent.Socket');
            var m4_1$6 = new Mat4();
            var m4_2$2 = new Mat4();

            function collectRecursively(node, prefix, out) {
              if (prefix === void 0) {
                prefix = '';
              }

              if (out === void 0) {
                out = [];
              }

              for (var i = 0; i < node.children.length; i++) {
                var child = node.children[i];

                if (!child) {
                  continue;
                }

                var path = prefix ? prefix + "/" + child.name : child.name;
                out.push(path);
                collectRecursively(child, path, out);
              }

              return out;
            }

            var SkeletalAnimation = function (v) { return exports({ SkeletalAnimation: v, SkeletalAnimationComponent: v }), v; }((_dec3$N = ccclass('cc.SkeletalAnimation'), _dec4$I = help(), _dec5$C = executionOrder(99), _dec6$z = menu$1(), _dec7$y = type$1([Socket]), _dec8$w = tooltip(), _dec9$s = tooltip(), _dec10$q = type$1([Socket]), _dec3$N(_class4$i = _dec4$I(_class4$i = _dec5$C(_class4$i = executeInEditMode(_class4$i = _dec6$z(_class4$i = (_class5$i = (_temp2$i = _class6$6 = function (_Animation) {
              _inheritsLoose(SkeletalAnimation, _Animation);

              function SkeletalAnimation() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Animation.call.apply(_Animation, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_useBakedAnimation", _descriptor3$R, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_sockets", _descriptor4$L, _assertThisInitialized(_this));

                _this._users = new Set();
                _this._currentBakedState = null;
                return _this;
              }

              var _proto = SkeletalAnimation.prototype;

              _proto.onLoad = function onLoad() {
                _Animation.prototype.onLoad.call(this);

                var comps = this.node.getComponentsInChildren(SkinnedMeshRenderer);

                for (var i = 0; i < comps.length; ++i) {
                  var comp = comps[i];

                  if (comp.skinningRoot === this.node) {
                    this.notifySkinnedMeshAdded(comp);
                  }
                }
              };

              _proto.onDestroy = function onDestroy() {
                _Animation.prototype.onDestroy.call(this);

                legacyCC.director.root.dataPoolManager.jointAnimationInfo.destroy(this.node.uuid);
                getGlobalAnimationManager().removeSockets(this.node, this._sockets);

                this._removeAllUsers();
              };

              _proto.start = function start() {
                this.sockets = this._sockets;
                this.useBakedAnimation = this._useBakedAnimation;

                _Animation.prototype.start.call(this);
              };

              _proto.pause = function pause() {
                if (!this._useBakedAnimation) {
                  _Animation.prototype.pause.call(this);
                } else {
                  var _this$_currentBakedSt;

                  (_this$_currentBakedSt = this._currentBakedState) === null || _this$_currentBakedSt === void 0 ? void 0 : _this$_currentBakedSt.pause();
                }
              };

              _proto.resume = function resume() {
                if (!this._useBakedAnimation) {
                  _Animation.prototype.resume.call(this);
                } else {
                  var _this$_currentBakedSt2;

                  (_this$_currentBakedSt2 = this._currentBakedState) === null || _this$_currentBakedSt2 === void 0 ? void 0 : _this$_currentBakedSt2.resume();
                }
              };

              _proto.stop = function stop() {
                if (!this._useBakedAnimation) {
                  _Animation.prototype.stop.call(this);
                } else if (this._currentBakedState) {
                  this._currentBakedState.stop();

                  this._currentBakedState = null;
                }
              };

              _proto.querySockets = function querySockets() {
                var animPaths = this._defaultClip && Object.keys(SkelAnimDataHub.getOrExtract(this._defaultClip).joints).sort().reduce(function (acc, cur) {
                  return cur.startsWith(acc[acc.length - 1]) ? acc : (acc.push(cur), acc);
                }, []) || [];

                if (!animPaths.length) {
                  return ['please specify a valid default animation clip first'];
                }

                var out = [];

                for (var i = 0; i < animPaths.length; i++) {
                  var path = animPaths[i];
                  var node = this.node.getChildByPath(path);

                  if (!node) {
                    continue;
                  }

                  out.push(path);
                  collectRecursively(node, path, out);
                }

                return out;
              };

              _proto.rebuildSocketAnimations = function rebuildSocketAnimations() {
                for (var _iterator = _createForOfIteratorHelperLoose(this._sockets), _step; !(_step = _iterator()).done;) {
                  var socket = _step.value;
                  var joint = this.node.getChildByPath(socket.path);
                  var target = socket.target;

                  if (joint && target) {
                    target.name = socket.path.substring(socket.path.lastIndexOf('/') + 1) + " Socket";
                    target.parent = this.node;
                    getWorldTransformUntilRoot(joint, this.node, m4_1$6);
                    Mat4.fromRTS(m4_2$2, target.rotation, target.position, target.scale);

                    if (!Mat4.equals(m4_2$2, m4_1$6)) {
                      target.matrix = m4_1$6;
                    }
                  }
                }

                for (var _i = 0, _Object$keys = Object.keys(this._nameToState); _i < _Object$keys.length; _i++) {
                  var stateName = _Object$keys[_i];
                  var state = this._nameToState[stateName];
                  state.rebuildSocketCurves(this._sockets);
                }
              };

              _proto.createSocket = function createSocket(path) {
                var socket = this._sockets.find(function (s) {
                  return s.path === path;
                });

                if (socket) {
                  return socket.target;
                }

                var joint = this.node.getChildByPath(path);

                if (!joint) {
                  console.warn('illegal socket path');
                  return null;
                }

                var target = new Node();
                target.parent = this.node;

                this._sockets.push(new Socket(path, target));

                this.rebuildSocketAnimations();
                return target;
              };

              _proto.notifySkinnedMeshAdded = function notifySkinnedMeshAdded(skinnedMeshRenderer) {
                var useBakedAnimation = this._useBakedAnimation;
                var formerBound = skinnedMeshRenderer.associatedAnimation;

                if (formerBound) {
                  formerBound._users["delete"](skinnedMeshRenderer);
                }

                skinnedMeshRenderer.associatedAnimation = this;
                skinnedMeshRenderer.setUseBakedAnimation(useBakedAnimation, true);

                if (useBakedAnimation) {
                  var playingState = this._currentBakedState;

                  if (playingState) {
                    skinnedMeshRenderer.uploadAnimation(playingState.clip);
                  }
                }

                this._users.add(skinnedMeshRenderer);
              };

              _proto.notifySkinnedMeshRemoved = function notifySkinnedMeshRemoved(skinnedMeshRenderer) {
                assertIsTrue(skinnedMeshRenderer.associatedAnimation === this);
                skinnedMeshRenderer.setUseBakedAnimation(false);
                skinnedMeshRenderer.associatedAnimation = null;

                this._users["delete"](skinnedMeshRenderer);
              };

              _proto.getUsers = function getUsers() {
                return this._users;
              };

              _proto._createState = function _createState(clip, name) {
                return new SkeletalAnimationState(clip, name);
              };

              _proto._doCreateState = function _doCreateState(clip, name) {
                var state = _Animation.prototype._doCreateState.call(this, clip, name);

                state.rebuildSocketCurves(this._sockets);
                return state;
              };

              _proto.doPlayOrCrossFade = function doPlayOrCrossFade(state, duration) {
                if (this._useBakedAnimation) {
                  if (this._currentBakedState) {
                    this._currentBakedState.stop();
                  }

                  var skeletalAnimationState = state;
                  this._currentBakedState = skeletalAnimationState;
                  skeletalAnimationState.play();
                } else {
                  _Animation.prototype.doPlayOrCrossFade.call(this, state, duration);
                }
              };

              _proto._removeAllUsers = function _removeAllUsers() {
                var _this2 = this;

                Array.from(this._users).forEach(function (user) {
                  _this2.notifySkinnedMeshRemoved(user);
                });
              };

              _createClass(SkeletalAnimation, [{
                key: "sockets",
                get: function get() {
                  return this._sockets;
                },
                set: function set(val) {
                  if (!this._useBakedAnimation) {
                    var animMgr = getGlobalAnimationManager();
                    animMgr.removeSockets(this.node, this._sockets);
                    animMgr.addSockets(this.node, val);
                  }

                  this._sockets = val;
                  this.rebuildSocketAnimations();
                }
              }, {
                key: "useBakedAnimation",
                get: function get() {
                  return this._useBakedAnimation;
                },
                set: function set(val) {
                  this._useBakedAnimation = val;

                  for (var stateName in this._nameToState) {
                    var state = this._nameToState[stateName];
                    state.setUseBaked(val);
                  }

                  this._users.forEach(function (user) {
                    user.setUseBakedAnimation(val);
                  });

                  if (this._useBakedAnimation) {
                    getGlobalAnimationManager().removeSockets(this.node, this._sockets);
                  } else {
                    getGlobalAnimationManager().addSockets(this.node, this._sockets);
                    this._currentBakedState = null;
                  }
                }
              }]);

              return SkeletalAnimation;
            }(Animation), _class6$6.Socket = Socket, _temp2$i), (_applyDecoratedDescriptor(_class5$i.prototype, "sockets", [_dec7$y, _dec8$w], Object.getOwnPropertyDescriptor(_class5$i.prototype, "sockets"), _class5$i.prototype), _applyDecoratedDescriptor(_class5$i.prototype, "useBakedAnimation", [_dec9$s], Object.getOwnPropertyDescriptor(_class5$i.prototype, "useBakedAnimation"), _class5$i.prototype), _descriptor3$R = _applyDecoratedDescriptor(_class5$i.prototype, "_useBakedAnimation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor4$L = _applyDecoratedDescriptor(_class5$i.prototype, "_sockets", [_dec10$q], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class5$i)) || _class4$i) || _class4$i) || _class4$i) || _class4$i) || _class4$i));

            legacyCC.SkeletalAnimationComponent = SkeletalAnimation;
            js.setClassAlias(SkeletalAnimation, 'cc.SkeletalAnimationComponent');

            var HeightField = exports('HeightField', function () {
              function HeightField(w, h) {
                this.data = new Uint16Array();
                this.w = 0;
                this.h = 0;
                this.w = w;
                this.h = h;
                this.data = new Uint16Array(w * h);

                for (var i = 0; i < w * h; ++i) {
                  this.data[i] = 0;
                }
              }

              var _proto = HeightField.prototype;

              _proto.set = function set(i, j, value) {
                this.data[j * this.w + i] = value;
              };

              _proto.get = function get(i, j) {
                return this.data[j * this.w + i];
              };

              _proto.getClamp = function getClamp(i, j) {
                i = clamp$1(i, 0, this.w - 1);
                j = clamp$1(j, 0, this.h - 1);
                return this.get(i, j);
              };

              _proto.getAt = function getAt(x, y) {
                var fx = x;
                var fy = y;
                var ix0 = Math.floor(fx);
                var iz0 = Math.floor(fy);
                var ix1 = ix0 + 1;
                var iz1 = iz0 + 1;
                var dx = fx - ix0;
                var dz = fy - iz0;
                ix0 = clamp$1(ix0, 0, this.w - 1);
                iz0 = clamp$1(iz0, 0, this.h - 1);
                ix1 = clamp$1(ix1, 0, this.w - 1);
                iz1 = clamp$1(iz1, 0, this.h - 1);
                var a = this.get(ix0, iz0);
                var b = this.get(ix1, iz0);
                var c = this.get(ix0, iz1);
                var d = this.get(ix1, iz1);
                var m = (b + c) * 0.5;

                if (dx + dz <= 1.0) {
                  d = m + (m - a);
                } else {
                  a = m + (m - d);
                }

                var h1 = a * (1.0 - dx) + b * dx;
                var h2 = c * (1.0 - dx) + d * dx;
                var h = h1 * (1.0 - dz) + h2 * dz;
                return h;
              };

              return HeightField;
            }());

            var TERRAIN_LOD_VERTS = 33;
            var TERRAIN_LOD_TILES = 32;
            var TERRAIN_LOD_LEVELS = 4;
            var TERRAIN_LOD_NORTH_INDEX = 0;
            var TERRAIN_LOD_SOUTH_INDEX = 1;
            var TERRAIN_LOD_WEST_INDEX = 2;
            var TERRAIN_LOD_EAST_INDEX = 3;
            var TERRAIN_LOD_MAX_DISTANCE = 100000000000000.0;
            var TerrainLodKey = function () {
              function TerrainLodKey() {
                this.level = 0;
                this.north = 0;
                this.south = 0;
                this.west = 0;
                this.east = 0;
              }

              var _proto = TerrainLodKey.prototype;

              _proto.equals = function equals(rk) {
                return this.level === rk.level && this.north === rk.north && this.south === rk.south && this.west === rk.west && this.east === rk.east;
              };

              return TerrainLodKey;
            }();
            var TerrainIndexPool = function TerrainIndexPool() {
              this.size = 0;
              this.indices = null;
            };
            var TerrainIndexData = function TerrainIndexData() {
              this.key = new TerrainLodKey();
              this.start = 0;
              this.size = 0;
              this.buffer = null;
              this.primCount = 0;
            };
            var TerrainLod = function () {
              TerrainLod.mapIndex = function mapIndex(i, j, k) {
                return i * (TERRAIN_LOD_LEVELS * TERRAIN_LOD_LEVELS) + j * TERRAIN_LOD_LEVELS + k;
              };

              function TerrainLod() {
                this._bodyIndexPool = void 0;
                this._connecterIndexPool = void 0;
                this._indexMap = [];
                this._indexBuffer = new Uint16Array();
                this._bodyIndexPool = new Array(TERRAIN_LOD_LEVELS);

                for (var i = 0; i < TERRAIN_LOD_LEVELS; ++i) {
                  this._bodyIndexPool[i] = new TerrainIndexPool();
                }

                this._connecterIndexPool = new Array(TERRAIN_LOD_LEVELS * TERRAIN_LOD_LEVELS * 4);

                for (var _i = 0; _i < TERRAIN_LOD_LEVELS; ++_i) {
                  for (var j = 0; j < TERRAIN_LOD_LEVELS; ++j) {
                    for (var k = 0; k < 4; ++k) {
                      this._connecterIndexPool[TerrainLod.mapIndex(_i, j, k)] = new TerrainIndexPool();
                    }
                  }
                }

                for (var _i2 = 0; _i2 < TERRAIN_LOD_LEVELS; ++_i2) {
                  this._genBodyIndex(_i2);
                }

                for (var _i3 = 0; _i3 < TERRAIN_LOD_LEVELS; ++_i3) {
                  for (var _j = 0; _j < TERRAIN_LOD_LEVELS; ++_j) {
                    this._genConnecterIndexNorth(_i3, _j);

                    this._genConnecterIndexSouth(_i3, _j);

                    this._genConnecterIndexWest(_i3, _j);

                    this._genConnecterIndexEast(_i3, _j);
                  }
                }

                var levels = TERRAIN_LOD_LEVELS;

                for (var l = 0; l < levels; ++l) {
                  for (var n = 0; n < levels; ++n) {
                    if (n < l) {
                      continue;
                    }

                    for (var s = 0; s < levels; ++s) {
                      if (s < l) {
                        continue;
                      }

                      for (var w = 0; w < levels; ++w) {
                        if (w < l) {
                          continue;
                        }

                        for (var e = 0; e < levels; ++e) {
                          if (e < l) {
                            continue;
                          }

                          var _k = new TerrainLodKey();

                          _k.level = l;
                          _k.north = n;
                          _k.south = s;
                          _k.west = w;
                          _k.east = e;

                          this._genIndexData(_k);
                        }
                      }
                    }
                  }
                }
              }

              var _proto2 = TerrainLod.prototype;

              _proto2.getIndexData = function getIndexData(k) {
                for (var i = 0; i < this._indexMap.length; ++i) {
                  if (this._indexMap[i].key.equals(k)) {
                    return this._indexMap[i];
                  }
                }

                return null;
              };

              _proto2._genBodyIndex = function _genBodyIndex(level) {
                var step = 1 << level;
                var tiles = TERRAIN_LOD_TILES >> level;
                var start = 0;

                if (level < TERRAIN_LOD_LEVELS - 1) {
                  tiles -= 2;
                  start = step * TERRAIN_LOD_VERTS + step;
                }

                if (tiles === 0 || tiles === 0) {
                  return;
                }

                var count = tiles * tiles * 6;
                this._bodyIndexPool[level].indices = new Uint16Array(count);
                var index = 0;
                var indices = new Uint16Array(count);
                var row_c = start;
                var row_n = row_c + TERRAIN_LOD_VERTS * step;

                for (var y = 0; y < tiles; ++y) {
                  for (var x = 0; x < tiles; ++x) {
                    indices[index++] = row_n + x * step;
                    indices[index++] = row_n + (x + 1) * step;
                    indices[index++] = row_c + x * step;
                    indices[index++] = row_n + (x + 1) * step;
                    indices[index++] = row_c + (x + 1) * step;
                    indices[index++] = row_c + x * step;
                  }

                  row_c += TERRAIN_LOD_VERTS * step;
                  row_n += TERRAIN_LOD_VERTS * step;
                }

                this._bodyIndexPool[level].size = index;
                this._bodyIndexPool[level].indices = indices;
              };

              _proto2._genConnecterIndexNorth = function _genConnecterIndexNorth(level, connecter) {
                var connecterIndex = TerrainLod.mapIndex(level, connecter, TERRAIN_LOD_NORTH_INDEX);

                if (connecter < level || level === TERRAIN_LOD_LEVELS - 1) {
                  this._connecterIndexPool[connecterIndex].size = 0;
                  this._connecterIndexPool[connecterIndex].indices = null;
                  return;
                }

                var self_step = 1 << level;
                var neighbor_step = 1 << connecter;
                var self_tile = TERRAIN_LOD_TILES >> level;
                var count = self_tile * 2 + 2;
                var index = 0;
                var indices = new Uint16Array(count);
                indices[index++] = 0;
                indices[index++] = 0;

                for (var i = 1; i < self_tile; ++i) {
                  var x1 = i * self_step;
                  var y1 = self_step;
                  var x0 = x1 / neighbor_step * neighbor_step;
                  var y0 = y1 - self_step;
                  var index0 = y1 * TERRAIN_LOD_VERTS + x1;
                  var index1 = y0 * TERRAIN_LOD_VERTS + x0;
                  indices[index++] = index0;
                  indices[index++] = index1;
                }

                indices[index++] = TERRAIN_LOD_VERTS - 1;
                indices[index++] = TERRAIN_LOD_VERTS - 1;
                this._connecterIndexPool[connecterIndex].size = index;
                this._connecterIndexPool[connecterIndex].indices = indices;
              };

              _proto2._genConnecterIndexSouth = function _genConnecterIndexSouth(level, connecter) {
                var connecterIndex = TerrainLod.mapIndex(level, connecter, TERRAIN_LOD_SOUTH_INDEX);

                if (connecter < level || level === TERRAIN_LOD_LEVELS - 1) {
                  this._connecterIndexPool[connecterIndex].size = 0;
                  this._connecterIndexPool[connecterIndex].indices = null;
                  return;
                }

                var self_step = 1 << level;
                var neighbor_step = 1 << connecter;
                var self_tile = TERRAIN_LOD_TILES >> level;
                var count = self_tile * 2 + 2;
                var index = 0;
                var indices = new Uint16Array(count);
                indices[index++] = TERRAIN_LOD_TILES * TERRAIN_LOD_VERTS;
                indices[index++] = TERRAIN_LOD_TILES * TERRAIN_LOD_VERTS;

                for (var i = 1; i < self_tile; ++i) {
                  var x0 = i * self_step;
                  var y0 = TERRAIN_LOD_VERTS - 1 - self_step;
                  var x1 = x0 / neighbor_step * neighbor_step;
                  var y1 = y0 + self_step;
                  var index0 = y1 * TERRAIN_LOD_VERTS + x1;
                  var index1 = y0 * TERRAIN_LOD_VERTS + x0;
                  indices[index++] = index0;
                  indices[index++] = index1;
                }

                indices[index++] = TERRAIN_LOD_VERTS * TERRAIN_LOD_VERTS - 1;
                indices[index++] = TERRAIN_LOD_VERTS * TERRAIN_LOD_VERTS - 1;
                this._connecterIndexPool[connecterIndex].size = index;
                this._connecterIndexPool[connecterIndex].indices = indices;
              };

              _proto2._genConnecterIndexWest = function _genConnecterIndexWest(level, connecter) {
                var connecterIndex = TerrainLod.mapIndex(level, connecter, TERRAIN_LOD_WEST_INDEX);

                if (connecter < level || level === TERRAIN_LOD_LEVELS - 1) {
                  this._connecterIndexPool[connecterIndex].size = 0;
                  this._connecterIndexPool[connecterIndex].indices = null;
                  return;
                }

                var self_step = 1 << level;
                var neighbor_step = 1 << connecter;
                var self_tile = TERRAIN_LOD_TILES >> level;
                var count = self_tile * 2 + 2;
                var index = 0;
                var indices = new Uint16Array(count);
                indices[index++] = 0;
                indices[index++] = 0;

                for (var i = 1; i < self_tile; ++i) {
                  var x0 = 0;
                  var y0 = i * self_step / neighbor_step * neighbor_step;
                  var x1 = self_step;
                  var y1 = i * self_step;
                  var index0 = y0 * TERRAIN_LOD_VERTS + x0;
                  var index1 = y1 * TERRAIN_LOD_VERTS + x1;
                  indices[index++] = index0;
                  indices[index++] = index1;
                }

                indices[index++] = TERRAIN_LOD_TILES * TERRAIN_LOD_VERTS;
                indices[index++] = TERRAIN_LOD_TILES * TERRAIN_LOD_VERTS;
                this._connecterIndexPool[connecterIndex].size = index;
                this._connecterIndexPool[connecterIndex].indices = indices;
              };

              _proto2._genConnecterIndexEast = function _genConnecterIndexEast(level, connecter) {
                var connecterIndex = TerrainLod.mapIndex(level, connecter, TERRAIN_LOD_EAST_INDEX);

                if (connecter < level || level === TERRAIN_LOD_LEVELS - 1) {
                  this._connecterIndexPool[connecterIndex].size = 0;
                  this._connecterIndexPool[connecterIndex].indices = null;
                  return;
                }

                var self_step = 1 << level;
                var neighbor_step = 1 << connecter;
                var self_tile = TERRAIN_LOD_TILES >> level;
                var count = self_tile * 2 + 2;
                var index = 0;
                var indices = new Uint16Array(count);
                indices[index++] = TERRAIN_LOD_VERTS - 1;
                indices[index++] = TERRAIN_LOD_VERTS - 1;

                for (var i = 1; i < self_tile; ++i) {
                  var x0 = TERRAIN_LOD_VERTS - 1 - self_step;
                  var y0 = i * self_step;
                  var x1 = TERRAIN_LOD_VERTS - 1;
                  var y1 = i * self_step / neighbor_step * neighbor_step;
                  var index0 = y0 * TERRAIN_LOD_VERTS + x0;
                  var index1 = y1 * TERRAIN_LOD_VERTS + x1;
                  indices[index++] = index0;
                  indices[index++] = index1;
                }

                indices[index++] = TERRAIN_LOD_VERTS * TERRAIN_LOD_VERTS - 1;
                indices[index++] = TERRAIN_LOD_VERTS * TERRAIN_LOD_VERTS - 1;
                this._connecterIndexPool[connecterIndex].size = index;
                this._connecterIndexPool[connecterIndex].indices = indices;
              };

              _proto2._getConnenterIndex = function _getConnenterIndex(i, j, k) {
                return this._connecterIndexPool[TerrainLod.mapIndex(i, j, k)];
              };

              _proto2._genIndexData = function _genIndexData(k) {
                var data = this.getIndexData(k);

                if (data != null) {
                  return data;
                }

                var body = this._bodyIndexPool[k.level];

                var north = this._getConnenterIndex(k.level, k.north, TERRAIN_LOD_NORTH_INDEX);

                var south = this._getConnenterIndex(k.level, k.south, TERRAIN_LOD_SOUTH_INDEX);

                var west = this._getConnenterIndex(k.level, k.west, TERRAIN_LOD_WEST_INDEX);

                var east = this._getConnenterIndex(k.level, k.east, TERRAIN_LOD_EAST_INDEX);

                data = new TerrainIndexData();
                data.size = 0;
                data.primCount = 0;

                if (body.indices != null) {
                  data.size += body.size;
                }

                if (north.indices) {
                  data.size += (north.size - 2) * 3;
                }

                if (south.indices) {
                  data.size += (south.size - 2) * 3;
                }

                if (west.indices) {
                  data.size += (west.size - 2) * 3;
                }

                if (east.indices) {
                  data.size += (east.size - 2) * 3;
                }

                if (data.size === 0) {
                  return null;
                }

                var index = 0;
                data.buffer = new Uint16Array(data.size);
                data.key.level = k.level;
                data.key.east = k.east;
                data.key.west = k.west;
                data.key.north = k.north;
                data.key.south = k.south;

                if (body.indices) {
                  for (var i = 0; i < body.size; ++i) {
                    data.buffer[index++] = body.indices[i];
                  }
                }

                if (north.indices) {
                  for (var _i4 = 0; _i4 < north.size - 2; _i4 += 2) {
                    var a = north.indices[_i4 + 0];
                    var b = north.indices[_i4 + 1];
                    var c = north.indices[_i4 + 2];
                    var d = north.indices[_i4 + 3];
                    data.buffer[index++] = a;
                    data.buffer[index++] = c;
                    data.buffer[index++] = b;
                    data.buffer[index++] = c;
                    data.buffer[index++] = d;
                    data.buffer[index++] = b;
                  }
                }

                if (south.indices) {
                  for (var _i5 = 0; _i5 < south.size - 2; _i5 += 2) {
                    var _a = south.indices[_i5 + 0];
                    var _b = south.indices[_i5 + 1];
                    var _c = south.indices[_i5 + 2];
                    var _d = south.indices[_i5 + 3];
                    data.buffer[index++] = _a;
                    data.buffer[index++] = _c;
                    data.buffer[index++] = _b;
                    data.buffer[index++] = _c;
                    data.buffer[index++] = _d;
                    data.buffer[index++] = _b;
                  }
                }

                if (west.indices) {
                  for (var _i6 = 0; _i6 < west.size - 2; _i6 += 2) {
                    var _a2 = west.indices[_i6 + 0];
                    var _b2 = west.indices[_i6 + 1];
                    var _c2 = west.indices[_i6 + 2];
                    var _d2 = west.indices[_i6 + 3];
                    data.buffer[index++] = _a2;
                    data.buffer[index++] = _c2;
                    data.buffer[index++] = _b2;
                    data.buffer[index++] = _c2;
                    data.buffer[index++] = _d2;
                    data.buffer[index++] = _b2;
                  }
                }

                if (east.indices) {
                  for (var _i7 = 0; _i7 < east.size - 2; _i7 += 2) {
                    var _a3 = east.indices[_i7 + 0];
                    var _b3 = east.indices[_i7 + 1];
                    var _c3 = east.indices[_i7 + 2];
                    var _d3 = east.indices[_i7 + 3];
                    data.buffer[index++] = _a3;
                    data.buffer[index++] = _c3;
                    data.buffer[index++] = _b3;
                    data.buffer[index++] = _c3;
                    data.buffer[index++] = _d3;
                    data.buffer[index++] = _b3;
                  }
                }

                data.primCount = index / 3;
                data.start = this._indexBuffer.length;

                this._indexMap.push(data);

                var temp = new Uint16Array(data.start + data.size);
                temp.set(this._indexBuffer, 0);
                temp.set(data.buffer, data.start);
                this._indexBuffer = temp;
                return data;
              };

              return TerrainLod;
            }();

            var _dec$1t, _class$1w, _class2$1k, _descriptor$1g, _descriptor2$15, _descriptor3$S, _descriptor4$M, _temp$1p, _dec2$1b, _class4$j, _class5$j, _descriptor5$D, _descriptor6$x, _descriptor7$n, _descriptor8$k, _descriptor9$g, _temp2$j, _dec3$O, _class7$5, _class8$4, _descriptor10$e, _descriptor11$c, _descriptor12$c, _descriptor13$b, _descriptor14$5, _temp3$4, _dec4$J, _dec5$D, _dec6$A, _dec7$z, _dec8$x, _dec9$t, _dec10$r, _dec11$m, _dec12$m, _dec13$m, _dec14$k, _dec15$k, _dec16$j, _dec17$h, _dec18$g, _dec19$g, _class10$2, _class11$3, _descriptor15$5, _descriptor16$5, _descriptor17$5, _descriptor18$4, _descriptor19$4, _descriptor20$3, _descriptor21$3, _descriptor22$3, _temp4$3;
            var TerrainInfo = exports('TerrainInfo', (_dec$1t = ccclass('cc.TerrainInfo'), _dec$1t(_class$1w = (_class2$1k = (_temp$1p = function () {
              function TerrainInfo() {
                _initializerDefineProperty(this, "tileSize", _descriptor$1g, this);

                _initializerDefineProperty(this, "blockCount", _descriptor2$15, this);

                _initializerDefineProperty(this, "weightMapSize", _descriptor3$S, this);

                _initializerDefineProperty(this, "lightMapSize", _descriptor4$M, this);
              }

              _createClass(TerrainInfo, [{
                key: "size",
                get: function get() {
                  var sz = new Size$1(0, 0);
                  sz.width = this.blockCount[0] * TERRAIN_BLOCK_TILE_COMPLEXITY * this.tileSize;
                  sz.height = this.blockCount[1] * TERRAIN_BLOCK_TILE_COMPLEXITY * this.tileSize;
                  return sz;
                }
              }, {
                key: "tileCount",
                get: function get() {
                  var _tileCount = [0, 0];
                  _tileCount[0] = this.blockCount[0] * TERRAIN_BLOCK_TILE_COMPLEXITY;
                  _tileCount[1] = this.blockCount[1] * TERRAIN_BLOCK_TILE_COMPLEXITY;
                  return _tileCount;
                }
              }, {
                key: "vertexCount",
                get: function get() {
                  var _vertexCount = this.tileCount;
                  _vertexCount[0] += 1;
                  _vertexCount[1] += 1;
                  return _vertexCount;
                }
              }]);

              return TerrainInfo;
            }(), _temp$1p), (_descriptor$1g = _applyDecoratedDescriptor(_class2$1k.prototype, "tileSize", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor2$15 = _applyDecoratedDescriptor(_class2$1k.prototype, "blockCount", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [1, 1];
              }
            }), _descriptor3$S = _applyDecoratedDescriptor(_class2$1k.prototype, "weightMapSize", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 128;
              }
            }), _descriptor4$M = _applyDecoratedDescriptor(_class2$1k.prototype, "lightMapSize", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 128;
              }
            })), _class2$1k)) || _class$1w));
            var TerrainLayer = exports('TerrainLayer', (_dec2$1b = ccclass('cc.TerrainLayer'), _dec2$1b(_class4$j = (_class5$j = (_temp2$j = function TerrainLayer() {
              _initializerDefineProperty(this, "detailMap", _descriptor5$D, this);

              _initializerDefineProperty(this, "normalMap", _descriptor6$x, this);

              _initializerDefineProperty(this, "tileSize", _descriptor7$n, this);

              _initializerDefineProperty(this, "metallic", _descriptor8$k, this);

              _initializerDefineProperty(this, "roughness", _descriptor9$g, this);
            }, _temp2$j), (_descriptor5$D = _applyDecoratedDescriptor(_class5$j.prototype, "detailMap", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor6$x = _applyDecoratedDescriptor(_class5$j.prototype, "normalMap", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor7$n = _applyDecoratedDescriptor(_class5$j.prototype, "tileSize", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor8$k = _applyDecoratedDescriptor(_class5$j.prototype, "metallic", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor9$g = _applyDecoratedDescriptor(_class5$j.prototype, "roughness", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            })), _class5$j)) || _class4$j));

            var TerrainRenderable = function (_RenderableComponent) {
              _inheritsLoose(TerrainRenderable, _RenderableComponent);

              function TerrainRenderable() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _RenderableComponent.call.apply(_RenderableComponent, [this].concat(args)) || this;
                _this._model = null;
                _this._meshData = null;
                _this._brushPass = null;
                _this._brushMaterial = null;
                _this._currentMaterial = null;
                _this._currentMaterialLayers = 0;
                return _this;
              }

              var _proto = TerrainRenderable.prototype;

              _proto.destroy = function destroy() {
                if (this._model != null) {
                  legacyCC.director.root.destroyModel(this._model);
                  this._model = null;
                }

                return _RenderableComponent.prototype.destroy.call(this);
              };

              _proto._destroyModel = function _destroyModel() {
                if (this._model != null) {
                  legacyCC.director.root.destroyModel(this._model);
                  this._model = null;
                }
              };

              _proto._invalidMaterial = function _invalidMaterial() {
                if (this._currentMaterial == null) {
                  return;
                }

                this._clearMaterials();

                this._brushPass = null;
                this._currentMaterial = null;

                if (this._model != null) {
                  this._model.enabled = false;
                }
              };

              _proto._updateMaterial = function _updateMaterial(block, init) {
                if (this._meshData == null || this._model == null) {
                  return false;
                }

                var nLayers = block.getMaxLayer();

                if (this._currentMaterial == null || nLayers !== this._currentMaterialLayers) {
                  this._currentMaterial = new Material();

                  this._currentMaterial.initialize({
                    effectAsset: block.getTerrain().getEffectAsset(),
                    defines: block._getMaterialDefines(nLayers)
                  });

                  if (this._brushMaterial !== null) {
                    var brushMaterialInstance = new Material();
                    brushMaterialInstance.copy(this._brushMaterial);
                    this._brushPass = null;

                    if (brushMaterialInstance.passes !== null && brushMaterialInstance.passes.length > 0) {
                      this._brushPass = brushMaterialInstance.passes[0];
                      var passes = this._currentMaterial.passes;
                      passes.push(this._brushPass);
                      brushMaterialInstance.passes.pop();
                    }
                  }

                  if (init) {
                    this._model.initSubModel(0, this._meshData, this._currentMaterial);
                  }

                  this.setMaterial(this._currentMaterial, 0);
                  this._currentMaterialLayers = nLayers;
                  this._model.enabled = true;
                  this._model.receiveShadow = block.getTerrain().receiveShadow;
                  return true;
                }

                return false;
              };

              _proto._onMaterialModified = function _onMaterialModified(idx, mtl) {
                if (this._model == null) {
                  return;
                }

                this._onRebuildPSO(idx, mtl || this._getBuiltinMaterial());
              };

              _proto._onRebuildPSO = function _onRebuildPSO(idx, material) {
                if (this._model) {
                  this._model.setSubModelMaterial(idx, material);
                }
              };

              _proto._clearMaterials = function _clearMaterials() {
                if (this._model == null) {
                  return;
                }

                this._onMaterialModified(0, null);
              };

              _proto._getBuiltinMaterial = function _getBuiltinMaterial() {
                return builtinResMgr.get('missing-material');
              };

              return TerrainRenderable;
            }(RenderableComponent);

            var TerrainBlockLightmapInfo = exports('TerrainBlockLightmapInfo', (_dec3$O = ccclass('cc.TerrainBlockLightmapInfo'), _dec3$O(_class7$5 = (_class8$4 = (_temp3$4 = function TerrainBlockLightmapInfo() {
              _initializerDefineProperty(this, "texture", _descriptor10$e, this);

              _initializerDefineProperty(this, "UOff", _descriptor11$c, this);

              _initializerDefineProperty(this, "VOff", _descriptor12$c, this);

              _initializerDefineProperty(this, "UScale", _descriptor13$b, this);

              _initializerDefineProperty(this, "VScale", _descriptor14$5, this);
            }, _temp3$4), (_descriptor10$e = _applyDecoratedDescriptor(_class8$4.prototype, "texture", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor11$c = _applyDecoratedDescriptor(_class8$4.prototype, "UOff", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor12$c = _applyDecoratedDescriptor(_class8$4.prototype, "VOff", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor13$b = _applyDecoratedDescriptor(_class8$4.prototype, "UScale", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor14$5 = _applyDecoratedDescriptor(_class8$4.prototype, "VScale", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class8$4)) || _class7$5));
            var TerrainBlock = exports('TerrainBlock', function () {
              function TerrainBlock(t, i, j) {
                this._terrain = void 0;
                this._node = void 0;
                this._renderable = void 0;
                this._index = [1, 1];
                this._weightMap = null;
                this._lightmapInfo = null;
                this._lodLevel = 0;
                this._lodKey = new TerrainLodKey();
                this._errorMetrics = [0, 0, 0, 0];
                this._LevelDistances = [TERRAIN_LOD_MAX_DISTANCE, TERRAIN_LOD_MAX_DISTANCE, TERRAIN_LOD_MAX_DISTANCE, TERRAIN_LOD_MAX_DISTANCE];
                this._bbMin = new Vec3();
                this._bbMax = new Vec3();
                this._terrain = t;
                this._index[0] = i;
                this._index[1] = j;
                this._lightmapInfo = t._getLightmapInfo(i, j);
                this._node = new Node('TerrainBlock');

                this._node.setParent(this._terrain.node);

                this._node.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;
                this._node.layer = this._terrain.node.layer;
                this._renderable = this._node.addComponent(TerrainRenderable);
              }

              var _proto2 = TerrainBlock.prototype;

              _proto2.build = function build() {
                var gfxDevice = director.root.device;
                var vertexData = new Float32Array(TERRAIN_BLOCK_VERTEX_SIZE * TERRAIN_BLOCK_VERTEX_COMPLEXITY * TERRAIN_BLOCK_VERTEX_COMPLEXITY);

                this._buildVertexData(vertexData);

                var vertexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, TERRAIN_BLOCK_VERTEX_SIZE * Float32Array.BYTES_PER_ELEMENT * TERRAIN_BLOCK_VERTEX_COMPLEXITY * TERRAIN_BLOCK_VERTEX_COMPLEXITY, TERRAIN_BLOCK_VERTEX_SIZE * Float32Array.BYTES_PER_ELEMENT));
                vertexBuffer.update(vertexData);

                this._buildBoundingBox();

                var gfxAttributes = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F)];
                this._renderable._meshData = new RenderingSubMesh([vertexBuffer], gfxAttributes, PrimitiveMode.TRIANGLE_LIST, this._terrain._getSharedIndexBuffer());
                this._renderable._model = legacyCC.director.root.createModel(Model);

                this._renderable._model.createBoundingShape(this._bbMin, this._bbMax);

                this._renderable._model.node = this._renderable._model.transform = this._node;

                if (this._renderable.node.scene != null) {
                  this.visible = true;
                }

                this._updateWeightMap();

                this._updateMaterial(true);

                this._updateLodBuffer(vertexData);

                this._updateIndexBuffer();
              };

              _proto2.rebuild = function rebuild() {
                this._updateHeight();

                this._updateWeightMap();

                this._renderable._invalidMaterial();

                this._updateMaterial(false);
              };

              _proto2.destroy = function destroy() {
                this.visible = false;

                this._renderable._destroyModel();

                if (this._node != null && this._node.isValid) {
                  this._node.destroy();
                }

                if (this._weightMap != null) {
                  this._weightMap.destroy();
                }
              };

              _proto2.update = function update() {
                this._updateMaterial(false);

                var useNormalMap = this._terrain.useNormalMap;
                var usePBR = this._terrain.usePBR;

                var getDetailTex = function getDetailTex(layer) {
                  return layer !== null ? layer.detailMap : null;
                };

                var getNormalTex = function getNormalTex(layer) {
                  var normalTex = layer !== null ? layer.normalMap : null;

                  if (normalTex === null) {
                    normalTex = legacyCC.builtinResMgr.get('normal-texture');
                  }

                  return normalTex;
                };

                var mtl = this._renderable._currentMaterial;

                if (mtl !== null) {
                  var nlayers = this.getMaxLayer();
                  var uvScale = new Vec4(1, 1, 1, 1);
                  var roughness = new Vec4(1, 1, 1, 1);
                  var metallic = new Vec4(0, 0, 0, 0);

                  if (nlayers === 0) {
                    if (this.layers[0] !== -1) {
                      var l0 = this._terrain.getLayer(this.layers[0]);

                      if (l0 !== null) {
                        uvScale.x = 1.0 / l0.tileSize;
                        roughness.x = l0.roughness;
                        metallic.x = l0.metallic;
                      }

                      mtl.setProperty('detailMap0', getDetailTex(l0));

                      if (useNormalMap) {
                        mtl.setProperty('normalMap0', getNormalTex(l0));
                      }
                    } else {
                      mtl.setProperty('detailMap0', legacyCC.builtinResMgr.get('default-texture'));

                      if (useNormalMap) {
                        mtl.setProperty('normalMap0', legacyCC.builtinResMgr.get('normal-texture'));
                      }
                    }
                  } else if (nlayers === 1) {
                    var _l = this._terrain.getLayer(this.layers[0]);

                    var l1 = this._terrain.getLayer(this.layers[1]);

                    if (_l !== null) {
                      uvScale.x = 1.0 / _l.tileSize;
                      roughness.x = _l.roughness;
                      metallic.x = _l.metallic;
                    }

                    if (l1 !== null) {
                      uvScale.y = 1.0 / l1.tileSize;
                      roughness.y = l1.roughness;
                      metallic.y = l1.metallic;
                    }

                    mtl.setProperty('weightMap', this._weightMap);
                    mtl.setProperty('detailMap0', getDetailTex(_l));
                    mtl.setProperty('detailMap1', getDetailTex(l1));

                    if (useNormalMap) {
                      mtl.setProperty('normalMap0', getNormalTex(_l));
                      mtl.setProperty('normalMap1', getNormalTex(l1));
                    }
                  } else if (nlayers === 2) {
                    var _l2 = this._terrain.getLayer(this.layers[0]);

                    var _l3 = this._terrain.getLayer(this.layers[1]);

                    var l2 = this._terrain.getLayer(this.layers[2]);

                    if (_l2 !== null) {
                      uvScale.x = 1.0 / _l2.tileSize;
                      roughness.x = _l2.roughness;
                      metallic.x = _l2.metallic;
                    }

                    if (_l3 !== null) {
                      uvScale.y = 1.0 / _l3.tileSize;
                      roughness.y = _l3.roughness;
                      metallic.y = _l3.metallic;
                    }

                    if (l2 !== null) {
                      uvScale.z = 1.0 / l2.tileSize;
                      roughness.z = l2.roughness;
                      metallic.z = l2.metallic;
                    }

                    mtl.setProperty('weightMap', this._weightMap);
                    mtl.setProperty('detailMap0', getDetailTex(_l2));
                    mtl.setProperty('detailMap1', getDetailTex(_l3));
                    mtl.setProperty('detailMap2', getDetailTex(l2));

                    if (useNormalMap) {
                      mtl.setProperty('normalMap0', getNormalTex(_l2));
                      mtl.setProperty('normalMap1', getNormalTex(_l3));
                      mtl.setProperty('normalMap2', getNormalTex(l2));
                    }
                  } else if (nlayers === 3) {
                    var _l4 = this._terrain.getLayer(this.layers[0]);

                    var _l5 = this._terrain.getLayer(this.layers[1]);

                    var _l6 = this._terrain.getLayer(this.layers[2]);

                    var l3 = this._terrain.getLayer(this.layers[3]);

                    if (_l4 !== null) {
                      uvScale.x = 1.0 / _l4.tileSize;
                      roughness.x = _l4.roughness;
                      metallic.x = _l4.metallic;
                    }

                    if (_l5 !== null) {
                      uvScale.y = 1.0 / _l5.tileSize;
                      roughness.y = _l5.roughness;
                      metallic.y = _l5.metallic;
                    }

                    if (_l6 !== null) {
                      uvScale.z = 1.0 / _l6.tileSize;
                      roughness.z = _l6.roughness;
                      metallic.z = _l6.metallic;
                    }

                    if (l3 !== null) {
                      uvScale.w = 1.0 / l3.tileSize;
                      roughness.w = l3.roughness;
                      metallic.w = l3.metallic;
                    }

                    mtl.setProperty('weightMap', this._weightMap);
                    mtl.setProperty('detailMap0', getDetailTex(_l4));
                    mtl.setProperty('detailMap1', getDetailTex(_l5));
                    mtl.setProperty('detailMap2', getDetailTex(_l6));
                    mtl.setProperty('detailMap3', getDetailTex(l3));

                    if (useNormalMap) {
                      mtl.setProperty('normalMap0', getNormalTex(_l4));
                      mtl.setProperty('normalMap1', getNormalTex(_l5));
                      mtl.setProperty('normalMap2', getNormalTex(_l6));
                      mtl.setProperty('normalMap3', getNormalTex(l3));
                    }
                  }

                  mtl.setProperty('UVScale', uvScale);

                  if (usePBR) {
                    mtl.setProperty('roughness', roughness);
                    mtl.setProperty('metallic', metallic);
                  }

                  if (this.lightmap !== null) {
                    mtl.setProperty('lightMap', this.lightmap);
                    mtl.setProperty('lightMapUVParam', this.lightmapUVParam);
                  }
                }
              };

              _proto2._updateLevel = function _updateLevel(camPos) {
                var maxLevel = TERRAIN_LOD_LEVELS - 1;
                var bbMin = new Vec3();
                var bbMax = new Vec3();
                Vec3.add(bbMin, this._bbMin, this._terrain.node.getWorldPosition());
                Vec3.add(bbMax, this._bbMax, this._terrain.node.getWorldPosition());
                var d1 = Vec3.distance(bbMin, camPos);
                var d2 = Vec3.distance(bbMax, camPos);
                var d = Math.min(d1, d2);
                d -= this._terrain.LodBias;
                this._lodLevel = 0;

                while (this._lodLevel < maxLevel) {
                  var ld1 = this._LevelDistances[this._lodLevel + 1];

                  if (d <= ld1) {
                    break;
                  }

                  ++this._lodLevel;
                }
              };

              _proto2.setBrushMaterial = function setBrushMaterial(mtl) {
                if (this._renderable._brushMaterial !== mtl) {
                  this._renderable._invalidMaterial();

                  this._renderable._brushMaterial = mtl;
                }
              };

              _proto2._getBrushMaterial = function _getBrushMaterial() {
                return this._renderable ? this._renderable._brushMaterial : null;
              };

              _proto2._getBrushPass = function _getBrushPass() {
                return this._renderable ? this._renderable._brushPass : null;
              };

              _proto2.getTerrain = function getTerrain() {
                return this._terrain;
              };

              _proto2.getIndex = function getIndex() {
                return this._index;
              };

              _proto2.getRect = function getRect() {
                var rect = new Rect$1();
                rect.x = this._index[0] * TERRAIN_BLOCK_TILE_COMPLEXITY;
                rect.y = this._index[1] * TERRAIN_BLOCK_TILE_COMPLEXITY;
                rect.width = TERRAIN_BLOCK_TILE_COMPLEXITY;
                rect.height = TERRAIN_BLOCK_TILE_COMPLEXITY;
                return rect;
              };

              _proto2.setLayer = function setLayer(index, layerId) {
                if (this.layers[index] !== layerId) {
                  this._terrain.setBlockLayer(this._index[0], this._index[1], index, layerId);

                  this._renderable._invalidMaterial();

                  this._updateMaterial(false);
                }
              };

              _proto2.getLayer = function getLayer(index) {
                return this.layers[index];
              };

              _proto2.getMaxLayer = function getMaxLayer() {
                if (this.layers[3] >= 0) {
                  return 3;
                }

                if (this.layers[2] >= 0) {
                  return 2;
                }

                if (this.layers[1] >= 0) {
                  return 1;
                }

                return 0;
              };

              _proto2._getMaterialDefines = function _getMaterialDefines(nlayers) {
                return {
                  LAYERS: nlayers + 1,
                  USE_LIGHTMAP: this.lightmap !== null ? 1 : 0,
                  USE_NORMALMAP: this._terrain.useNormalMap ? 1 : 0,
                  USE_PBR: this._terrain.usePBR ? 1 : 0
                };
              };

              _proto2._invalidMaterial = function _invalidMaterial() {
                this._renderable._invalidMaterial();
              };

              _proto2._updateMaterial = function _updateMaterial(init) {
                if (this._renderable._updateMaterial(this, init)) {
                  if (this.lightmap !== null) {
                    this.lightmap.setWrapMode(WrapMode.CLAMP_TO_BORDER, WrapMode.CLAMP_TO_BORDER);
                  }
                }
              };

              _proto2._updateHeight = function _updateHeight() {
                if (this._renderable._meshData == null) {
                  return;
                }

                var vertexData = new Float32Array(TERRAIN_BLOCK_VERTEX_SIZE * TERRAIN_BLOCK_VERTEX_COMPLEXITY * TERRAIN_BLOCK_VERTEX_COMPLEXITY);

                this._buildVertexData(vertexData);

                this._renderable._meshData.vertexBuffers[0].update(vertexData);

                this._buildBoundingBox();

                this._renderable._model.createBoundingShape(this._bbMin, this._bbMax);

                this._renderable._model.updateWorldBound();

                this._updateLodBuffer(vertexData);

                this._updateIndexBuffer();
              };

              _proto2._updateWeightMap = function _updateWeightMap() {
                var nlayers = this.getMaxLayer();

                if (nlayers === 0) {
                  if (this._weightMap != null) {
                    this._weightMap.destroy();

                    this._weightMap = null;
                  }

                  return;
                }

                if (this._weightMap == null) {
                  this._weightMap = new Texture2D();

                  this._weightMap.create(this._terrain.weightMapSize, this._terrain.weightMapSize, PixelFormat.RGBA8888);

                  this._weightMap.setFilters(Filter$1.LINEAR, Filter$1.LINEAR);

                  this._weightMap.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);
                }

                var weightData = new Uint8Array(this._terrain.weightMapSize * this._terrain.weightMapSize * 4);
                var weightIndex = 0;

                for (var j = 0; j < this._terrain.weightMapSize; ++j) {
                  for (var i = 0; i < this._terrain.weightMapSize; ++i) {
                    var x = this._index[0] * this._terrain.weightMapSize + i;
                    var y = this._index[1] * this._terrain.weightMapSize + j;

                    var w = this._terrain.getWeight(x, y);

                    weightData[weightIndex * 4 + 0] = Math.floor(w.x * 255);
                    weightData[weightIndex * 4 + 1] = Math.floor(w.y * 255);
                    weightData[weightIndex * 4 + 2] = Math.floor(w.z * 255);
                    weightData[weightIndex * 4 + 3] = Math.floor(w.w * 255);
                    weightIndex += 1;
                  }
                }

                this._weightMap.uploadData(weightData);
              };

              _proto2._updateLightmap = function _updateLightmap(info) {
                this._lightmapInfo = info;

                this._invalidMaterial();
              };

              _proto2._updateLod = function _updateLod() {
                var key = new TerrainLodKey();
                key.level = this._lodLevel;
                key.north = this._lodLevel;
                key.south = this._lodLevel;
                key.west = this._lodLevel;
                key.east = this._lodLevel;

                if (this._index[0] > 0) {
                  var n = this.getTerrain().getBlock(this._index[0] - 1, this._index[1]);
                  key.west = n._lodLevel;

                  if (key.west < this._lodLevel) {
                    key.west = this._lodLevel;
                  }
                }

                if (this._index[0] < this._terrain.info.blockCount[0] - 1) {
                  var _n = this.getTerrain().getBlock(this._index[0] + 1, this._index[1]);

                  key.east = _n._lodLevel;

                  if (key.east < this._lodLevel) {
                    key.east = this._lodLevel;
                  }
                }

                if (this._index[1] > 0) {
                  var _n2 = this.getTerrain().getBlock(this._index[0], this._index[1] - 1);

                  key.north = _n2._lodLevel;

                  if (key.north < this._lodLevel) {
                    key.north = this._lodLevel;
                  }
                }

                if (this._index[1] < this._terrain.info.blockCount[1] - 1) {
                  var _n3 = this.getTerrain().getBlock(this._index[0], this._index[1] + 1);

                  key.south = _n3._lodLevel;

                  if (key.south < this._lodLevel) {
                    key.south = this._lodLevel;
                  }
                }

                if (this._lodKey.equals(key)) {
                  return;
                }

                this._lodKey = key;

                this._updateIndexBuffer();
              };

              _proto2._resetLod = function _resetLod() {
                var key = new TerrainLodKey();
                key.level = 0;
                key.north = 0;
                key.south = 0;
                key.west = 0;
                key.east = 0;

                if (this._lodKey.equals(key)) {
                  return;
                }

                this._lodKey = key;

                this._updateIndexBuffer();
              };

              _proto2._updateIndexBuffer = function _updateIndexBuffer() {
                if (this._renderable._meshData === null) {
                  return;
                }

                if (this._renderable._model === null) {
                  return;
                }

                if (this._renderable._model.subModels.length === 0) {
                  return;
                }

                var indexData = this._terrain._getIndexData(this._lodKey);

                if (indexData === null) {
                  return;
                }

                var model = this._renderable._model.subModels[0];
                model.inputAssembler.firstIndex = indexData.start;
                model.inputAssembler.indexCount = indexData.size;
              };

              _proto2._getHeight = function _getHeight(x, y, verts) {
                var idx = TERRAIN_BLOCK_VERTEX_COMPLEXITY * y + x;
                return verts[idx * TERRAIN_BLOCK_VERTEX_SIZE + 1];
              };

              _proto2._updateLodBuffer = function _updateLodBuffer(vertecs) {
                this._lodLevel = 0;
                this._lodKey = new TerrainLodKey();

                this._calcErrorMetrics(vertecs);

                this._calcLevelDistances(vertecs);
              };

              _proto2._calcErrorMetrics = function _calcErrorMetrics(vertecs) {
                this._errorMetrics[0] = 0;

                for (var i = 1; i < TERRAIN_LOD_LEVELS; ++i) {
                  this._errorMetrics[i] = this._calcErrorMetric(i, vertecs);
                }

                for (var _i2 = 2; _i2 < TERRAIN_LOD_LEVELS; ++_i2) {
                  this._errorMetrics[_i2] = Math.max(this._errorMetrics[_i2], this._errorMetrics[_i2 - 1]);
                }
              };

              _proto2._calcErrorMetric = function _calcErrorMetric(level, vertecs) {
                var err = 0.0;
                var step = 1 << level;
                var xSectionVerts = TERRAIN_BLOCK_VERTEX_COMPLEXITY;
                var ySectionVerts = TERRAIN_BLOCK_VERTEX_COMPLEXITY;
                var xSides = xSectionVerts - 1 >> level;
                var ySides = ySectionVerts - 1 >> level;

                for (var y = 0; y < ySectionVerts; y += step) {
                  for (var x = 0; x < xSides; ++x) {
                    var x0 = x * step;
                    var x1 = x0 + step;
                    var xm = (x1 + x0) / 2;

                    var h0 = this._getHeight(x0, y, vertecs);

                    var h1 = this._getHeight(x1, y, vertecs);

                    var hm = this._getHeight(xm, y, vertecs);

                    var hmi = (h0 + h1) / 2;
                    var delta = Math.abs(hm - hmi);
                    err = Math.max(err, delta);
                  }
                }

                for (var _x2 = 0; _x2 < xSectionVerts; _x2 += step) {
                  for (var _y2 = 0; _y2 < ySides; ++_y2) {
                    var y0 = _y2 * step;
                    var y1 = y0 + step;
                    var ym = (y0 + y1) / 2;

                    var _h = this._getHeight(_x2, y0, vertecs);

                    var _h2 = this._getHeight(_x2, y1, vertecs);

                    var _hm = this._getHeight(_x2, ym, vertecs);

                    var _hmi = (_h + _h2) / 2;

                    var _delta = Math.abs(_hm - _hmi);

                    err = Math.max(err, _delta);
                  }
                }

                for (var _y3 = 0; _y3 < ySides; ++_y3) {
                  var _y4 = _y3 * step;

                  var _y5 = _y4 + step;

                  var _ym = (_y4 + _y5) / 2;

                  for (var _x3 = 0; _x3 < xSides; ++_x3) {
                    var _x4 = _x3 * step;

                    var _x5 = _x4 + step;

                    var _xm = (_x4 + _x5) / 2;

                    var _h3 = this._getHeight(_x4, _y4, vertecs);

                    var _h4 = this._getHeight(_x5, _y5, vertecs);

                    var _hm2 = this._getHeight(_xm, _ym, vertecs);

                    var _hmi2 = (_h3 + _h4) / 2;

                    var _delta2 = Math.abs(_hm2 - _hmi2);

                    err = Math.max(err, _delta2);
                  }
                }

                return err;
              };

              _proto2._calcLevelDistances = function _calcLevelDistances(vertecs) {
                var pixelerr = 4;
                var resolution = 768;
                var c = 1.0 / (2 * pixelerr / resolution);

                for (var i = 1; i < TERRAIN_LOD_LEVELS; ++i) {
                  var e = this._errorMetrics[i];
                  var d = e * c;
                  this._LevelDistances[i] = d;
                }
              };

              _proto2._buildVertexData = function _buildVertexData(vertexData) {
                var index = 0;

                for (var j = 0; j < TERRAIN_BLOCK_VERTEX_COMPLEXITY; ++j) {
                  for (var i = 0; i < TERRAIN_BLOCK_VERTEX_COMPLEXITY; ++i) {
                    var x = this._index[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + i;
                    var y = this._index[1] * TERRAIN_BLOCK_TILE_COMPLEXITY + j;

                    var position = this._terrain.getPosition(x, y);

                    var normal = this._terrain.getNormal(x, y);

                    var uv = new Vec2(i / TERRAIN_BLOCK_TILE_COMPLEXITY, j / TERRAIN_BLOCK_TILE_COMPLEXITY);
                    vertexData[index++] = position.x;
                    vertexData[index++] = position.y;
                    vertexData[index++] = position.z;
                    vertexData[index++] = normal.x;
                    vertexData[index++] = normal.y;
                    vertexData[index++] = normal.z;
                    vertexData[index++] = uv.x;
                    vertexData[index++] = uv.y;
                  }
                }
              };

              _proto2._buildBoundingBox = function _buildBoundingBox() {
                this._bbMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);

                this._bbMax.set(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);

                for (var j = 0; j < TERRAIN_BLOCK_VERTEX_COMPLEXITY; ++j) {
                  for (var i = 0; i < TERRAIN_BLOCK_VERTEX_COMPLEXITY; ++i) {
                    var x = this._index[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + i;
                    var y = this._index[1] * TERRAIN_BLOCK_TILE_COMPLEXITY + j;

                    var position = this._terrain.getPosition(x, y);

                    Vec3.min(this._bbMin, this._bbMin, position);
                    Vec3.max(this._bbMax, this._bbMax, position);
                  }
                }
              };

              _createClass(TerrainBlock, [{
                key: "valid",
                get: function get() {
                  if (this._terrain === null) {
                    return false;
                  }

                  var blocks = this._terrain.getBlocks();

                  for (var i = 0; i < blocks.length; ++i) {
                    if (blocks[i] === this) {
                      return true;
                    }
                  }

                  return false;
                }
              }, {
                key: "material",
                get: function get() {
                  return this._renderable ? this._renderable._currentMaterial : null;
                }
              }, {
                key: "layers",
                get: function get() {
                  return this._terrain.getBlockLayers(this._index[0], this._index[1]);
                }
              }, {
                key: "weightmap",
                get: function get() {
                  return this._weightMap;
                }
              }, {
                key: "lightmap",
                get: function get() {
                  return this._lightmapInfo ? this._lightmapInfo.texture : null;
                }
              }, {
                key: "lightmapUVParam",
                get: function get() {
                  if (this._lightmapInfo != null) {
                    return new Vec4(this._lightmapInfo.UOff, this._lightmapInfo.VOff, this._lightmapInfo.UScale, this._lightmapInfo.VScale);
                  }

                  return new Vec4(0, 0, 0, 0);
                }
              }, {
                key: "visible",
                get: function get() {
                  if (this._renderable._model !== null) {
                    return this._renderable._model.scene !== null;
                  }

                  return false;
                },
                set: function set(val) {
                  if (this._renderable._model !== null) {
                    if (val) {
                      if (this._terrain.node != null && this._terrain.node.scene != null && this._terrain.node.scene.renderScene != null && this._renderable._model.scene == null) {
                        this._terrain.node.scene.renderScene.addModel(this._renderable._model);
                      }
                    } else if (this._renderable._model.scene !== null) {
                      this._renderable._model.scene.removeModel(this._renderable._model);
                    }
                  }
                }
              }]);

              return TerrainBlock;
            }());
            var Terrain = exports('Terrain', (_dec4$J = ccclass('cc.Terrain'), _dec5$D = help(), _dec6$A = type$1(TerrainAsset), _dec7$z = type$1(EffectAsset), _dec8$x = visible(), _dec9$t = type$1(TerrainBlockLightmapInfo), _dec10$r = type$1(CCBoolean), _dec11$m = type$1(CCBoolean), _dec12$m = type$1(CCBoolean), _dec13$m = type$1(CCBoolean), _dec14$k = type$1(CCFloat), _dec15$k = type$1(TerrainAsset), _dec16$j = visible(), _dec17$h = type$1(EffectAsset), _dec18$g = visible(), _dec19$g = type$1(TerrainInfo), _dec4$J(_class10$2 = _dec5$D(_class10$2 = executeInEditMode(_class10$2 = disallowMultiple(_class10$2 = (_class11$3 = (_temp4$3 = function (_Component) {
              _inheritsLoose(Terrain, _Component);

              function Terrain() {
                var _this2;

                _this2 = _Component.call(this) || this;

                _initializerDefineProperty(_this2, "__asset", _descriptor15$5, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_effectAsset", _descriptor16$5, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_lightmapInfos", _descriptor17$5, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_receiveShadow", _descriptor18$4, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_useNormalmap", _descriptor19$4, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_usePBR", _descriptor20$3, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_lodEnable", _descriptor21$3, _assertThisInitialized(_this2));

                _initializerDefineProperty(_this2, "_lodBias", _descriptor22$3, _assertThisInitialized(_this2));

                _this2._buitinAsset = null;
                _this2._tileSize = 1;
                _this2._blockCount = [1, 1];
                _this2._weightMapSize = 128;
                _this2._lightMapSize = 128;
                _this2._heights = new Uint16Array();
                _this2._weights = new Uint8Array();
                _this2._normals = [];
                _this2._layerList = [];
                _this2._layerBuffer = [];
                _this2._blocks = [];
                _this2._lod = new TerrainLod();
                _this2._sharedIndexBuffer = null;

                for (var i = 0; i < TERRAIN_MAX_LAYER_COUNT; ++i) {
                  _this2._layerList.push(null);
                }

                return _this2;
              }

              var _proto3 = Terrain.prototype;

              _proto3.build = function build(info) {
                this._tileSize = info.tileSize;
                this._blockCount[0] = info.blockCount[0];
                this._blockCount[1] = info.blockCount[1];
                this._weightMapSize = info.weightMapSize;
                this._lightMapSize = info.lightMapSize;
                return this._buildImp();
              };

              _proto3.rebuild = function rebuild(info) {
                for (var i = 0; i < this._blocks.length; ++i) {
                  this._blocks[i].destroy();
                }

                this._blocks = [];

                this._resetLightmap(false);

                this._rebuildLayerBuffer(info);

                this._rebuildHeights(info);

                this._rebuildWeights(info);

                this._tileSize = info.tileSize;
                this._blockCount[0] = info.blockCount[0];
                this._blockCount[1] = info.blockCount[1];
                this._weightMapSize = info.weightMapSize;
                this._lightMapSize = info.lightMapSize;

                this._buildNormals();

                for (var j = 0; j < this._blockCount[1]; ++j) {
                  for (var _i3 = 0; _i3 < this._blockCount[0]; ++_i3) {
                    this._blocks.push(new TerrainBlock(this, _i3, j));
                  }
                }

                for (var _i4 = 0; _i4 < this._blocks.length; ++_i4) {
                  this._blocks[_i4].build();
                }
              };

              _proto3.importHeightField = function importHeightField(hf, heightScale) {
                var index = 0;

                for (var j = 0; j < this.vertexCount[1]; ++j) {
                  for (var i = 0; i < this.vertexCount[0]; ++i) {
                    var u = i / this.tileCount[0];
                    var v = j / this.tileCount[1];
                    var h = hf.getAt(u * hf.w, v * hf.h) * heightScale;
                    this._heights[index++] = h;
                  }
                }

                this._buildNormals();

                for (var _i5 = 0; _i5 < this._blocks.length; ++_i5) {
                  this._blocks[_i5]._updateHeight();
                }
              };

              _proto3.exportHeightField = function exportHeightField(hf, heightScale) {
                var index = 0;

                for (var j = 0; j < hf.h; ++j) {
                  for (var i = 0; i < hf.w; ++i) {
                    var u = i / (hf.w - 1);
                    var v = j / (hf.h - 1);
                    var x = u * this.size.width;
                    var y = v * this.size.height;
                    var h = this.getHeightAt(x, y);

                    if (h != null) {
                      hf.data[index++] = h * heightScale;
                    }
                  }
                }
              };

              _proto3.exportAsset = function exportAsset() {
                var asset = new TerrainAsset();
                asset.tileSize = this.tileSize;
                asset.blockCount = this.blockCount;
                asset.lightMapSize = this.lightMapSize;
                asset.weightMapSize = this.weightMapSize;
                asset.heights = this.heights;
                asset.weights = this.weights;
                asset.layerBuffer = new Array(this._blocks.length * 4);

                for (var i = 0; i < this._blocks.length; ++i) {
                  asset.layerBuffer[i * 4 + 0] = this._blocks[i].layers[0];
                  asset.layerBuffer[i * 4 + 1] = this._blocks[i].layers[1];
                  asset.layerBuffer[i * 4 + 2] = this._blocks[i].layers[2];
                  asset.layerBuffer[i * 4 + 3] = this._blocks[i].layers[3];
                }

                for (var _i6 = 0; _i6 < this._layerList.length; ++_i6) {
                  var temp = this._layerList[_i6];

                  if (temp && temp.detailMap && isValid(temp.detailMap)) {
                    var layer = new TerrainLayerInfo();
                    layer.slot = _i6;
                    layer.tileSize = temp.tileSize;
                    layer.detailMap = temp.detailMap;
                    layer.normalMap = temp.normalMap;
                    layer.metallic = temp.metallic;
                    layer.roughness = temp.roughness;
                    asset.layerInfos.push(layer);
                  }
                }

                return asset;
              };

              _proto3.getEffectAsset = function getEffectAsset() {
                if (this._effectAsset === null) {
                  return legacyCC.EffectAsset.get('terrain');
                }

                return this._effectAsset;
              };

              _proto3.onEnable = function onEnable() {
                if (this._blocks.length === 0) {
                  this._buildImp();
                }

                for (var i = 0; i < this._blocks.length; ++i) {
                  this._blocks[i].visible = true;
                }

                legacyCC.director.root.pipeline.on(PipelineEventType.RENDER_CAMERA_BEGIN, this.onUpdateFromCamera, this);
              };

              _proto3.onDisable = function onDisable() {
                legacyCC.director.root.pipeline.off(PipelineEventType.RENDER_CAMERA_BEGIN, this.onUpdateFromCamera, this);

                for (var i = 0; i < this._blocks.length; ++i) {
                  this._blocks[i].visible = false;
                }
              };

              _proto3.onDestroy = function onDestroy() {
                for (var i = 0; i < this._blocks.length; ++i) {
                  this._blocks[i].destroy();
                }

                this._blocks = [];

                for (var _i7 = 0; _i7 < this._layerList.length; ++_i7) {
                  this._layerList[_i7] = null;
                }

                if (this._sharedIndexBuffer != null) {
                  this._sharedIndexBuffer.destroy();
                }
              };

              _proto3.onRestore = function onRestore() {
                this.onEnable();

                this._buildImp(true);
              };

              _proto3.update = function update(deltaTime) {
                for (var i = 0; i < this._blocks.length; ++i) {
                  this._blocks[i].update();
                }
              };

              _proto3.onUpdateFromCamera = function onUpdateFromCamera(cam) {
                if (!this.lodEnable) {
                  return;
                }

                if (cam.scene !== this._getRenderScene()) {
                  return;
                }

                for (var i = 0; i < this._blocks.length; ++i) {
                  this._blocks[i]._updateLevel(cam.position);
                }

                for (var _i8 = 0; _i8 < this._blocks.length; ++_i8) {
                  this._blocks[_i8]._updateLod();
                }
              };

              _proto3.addLayer = function addLayer(layer) {
                for (var i = 0; i < this._layerList.length; ++i) {
                  var _this$_layerList$i;

                  if (this._layerList[i] === null || this._layerList[i] && ((_this$_layerList$i = this._layerList[i]) === null || _this$_layerList$i === void 0 ? void 0 : _this$_layerList$i.detailMap) === null) {
                    this._layerList[i] = layer;
                    return i;
                  }
                }

                return -1;
              };

              _proto3.setLayer = function setLayer(i, layer) {
                this._layerList[i] = layer;
              };

              _proto3.removeLayer = function removeLayer(id) {
                this._layerList[id] = null;
              };

              _proto3.getLayer = function getLayer(id) {
                if (id === -1) {
                  return null;
                }

                return this._layerList[id];
              };

              _proto3.getPosition = function getPosition(i, j) {
                var x = i * this._tileSize;
                var z = j * this._tileSize;
                var y = this.getHeight(i, j);
                return new Vec3(x, y, z);
              };

              _proto3.getHeightField = function getHeightField() {
                return this._heights;
              };

              _proto3.setHeight = function setHeight(i, j, h) {
                h = clamp$1(h, TERRAIN_HEIGHT_FMIN, TERRAIN_HEIGHT_FMAX);
                this._heights[j * this.vertexCount[0] + i] = TERRAIN_HEIGHT_BASE + h / TERRAIN_HEIGHT_FACTORY;
              };

              _proto3.getHeight = function getHeight(i, j) {
                return (this._heights[j * this.vertexCount[0] + i] - TERRAIN_HEIGHT_BASE) * TERRAIN_HEIGHT_FACTORY;
              };

              _proto3.getHeightClamp = function getHeightClamp(i, j) {
                i = clamp$1(i, 0, this.vertexCount[0] - 1);
                j = clamp$1(j, 0, this.vertexCount[1] - 1);
                return this.getHeight(i, j);
              };

              _proto3.getHeightAt = function getHeightAt(x, y) {
                var fx = x / this.tileSize;
                var fy = y / this.tileSize;
                var ix0 = Math.floor(fx);
                var iz0 = Math.floor(fy);
                var ix1 = ix0 + 1;
                var iz1 = iz0 + 1;
                var dx = fx - ix0;
                var dz = fy - iz0;

                if (ix0 < 0 || ix0 > this.vertexCount[0] - 1 || iz0 < 0 || iz0 > this.vertexCount[1] - 1) {
                  return null;
                }

                ix0 = clamp$1(ix0, 0, this.vertexCount[0] - 1);
                iz0 = clamp$1(iz0, 0, this.vertexCount[1] - 1);
                ix1 = clamp$1(ix1, 0, this.vertexCount[0] - 1);
                iz1 = clamp$1(iz1, 0, this.vertexCount[1] - 1);
                var a = this.getHeight(ix0, iz0);
                var b = this.getHeight(ix1, iz0);
                var c = this.getHeight(ix0, iz1);
                var d = this.getHeight(ix1, iz1);
                var m = (b + c) * 0.5;

                if (dx + dz <= 1.0) {
                  d = m + (m - a);
                } else {
                  a = m + (m - d);
                }

                var h1 = a * (1.0 - dx) + b * dx;
                var h2 = c * (1.0 - dx) + d * dx;
                var h = h1 * (1.0 - dz) + h2 * dz;
                return h;
              };

              _proto3._setNormal = function _setNormal(i, j, n) {
                var index = j * this.vertexCount[0] + i;
                this._normals[index * 3 + 0] = n.x;
                this._normals[index * 3 + 1] = n.y;
                this._normals[index * 3 + 2] = n.z;
              };

              _proto3.getNormal = function getNormal(i, j) {
                var index = j * this.vertexCount[0] + i;
                var n = new Vec3();
                n.x = this._normals[index * 3 + 0];
                n.y = this._normals[index * 3 + 1];
                n.z = this._normals[index * 3 + 2];
                return n;
              };

              _proto3.getNormalAt = function getNormalAt(x, y) {
                var fx = x / this.tileSize;
                var fy = y / this.tileSize;
                var ix0 = Math.floor(fx);
                var iz0 = Math.floor(fy);
                var ix1 = ix0 + 1;
                var iz1 = iz0 + 1;
                var dx = fx - ix0;
                var dz = fy - iz0;

                if (ix0 < 0 || ix0 > this.vertexCount[0] - 1 || iz0 < 0 || iz0 > this.vertexCount[1] - 1) {
                  return null;
                }

                ix0 = clamp$1(ix0, 0, this.vertexCount[0] - 1);
                iz0 = clamp$1(iz0, 0, this.vertexCount[1] - 1);
                ix1 = clamp$1(ix1, 0, this.vertexCount[0] - 1);
                iz1 = clamp$1(iz1, 0, this.vertexCount[1] - 1);
                var a = this.getNormal(ix0, iz0);
                var b = this.getNormal(ix1, iz0);
                var c = this.getNormal(ix0, iz1);
                var d = this.getNormal(ix1, iz1);
                var m = new Vec3();
                Vec3.add(m, b, c).multiplyScalar(0.5);

                if (dx + dz <= 1.0) {
                  d.set(m);
                  d.subtract(a);
                  d.add(m);
                } else {
                  a.set(m);
                  a.subtract(d);
                  a.add(m);
                }

                var n1 = new Vec3();
                var n2 = new Vec3();
                var n = new Vec3();
                Vec3.lerp(n1, a, b, dx);
                Vec3.lerp(n2, c, d, dx);
                Vec3.lerp(n, n1, n2, dz);
                return n;
              };

              _proto3.setWeight = function setWeight(i, j, w) {
                var index = j * this._weightMapSize * this._blockCount[0] + i;
                this._weights[index * 4 + 0] = w.x * 255;
                this._weights[index * 4 + 1] = w.y * 255;
                this._weights[index * 4 + 2] = w.z * 255;
                this._weights[index * 4 + 3] = w.w * 255;
              };

              _proto3.getWeight = function getWeight(i, j) {
                var index = j * this._weightMapSize * this._blockCount[0] + i;
                var w = new Vec4();
                w.x = this._weights[index * 4 + 0] / 255.0;
                w.y = this._weights[index * 4 + 1] / 255.0;
                w.z = this._weights[index * 4 + 2] / 255.0;
                w.w = this._weights[index * 4 + 3] / 255.0;
                return w;
              };

              _proto3.getWeightAt = function getWeightAt(x, y) {
                var uWeigthComplexity = this.weightMapSize * this.blockCount[0];
                var vWeigthComplexity = this.weightMapSize * this.blockCount[1];

                if (uWeigthComplexity === 0 || vWeigthComplexity === 0) {
                  return null;
                }

                var fx = x / uWeigthComplexity;
                var fy = y / vWeigthComplexity;
                var ix0 = Math.floor(fx);
                var iz0 = Math.floor(fy);
                var ix1 = ix0 + 1;
                var iz1 = iz0 + 1;
                var dx = fx - ix0;
                var dz = fy - iz0;

                if (ix0 < 0 || ix0 > uWeigthComplexity - 1 || iz0 < 0 || iz0 > vWeigthComplexity - 1) {
                  return null;
                }

                ix0 = clamp$1(ix0, 0, uWeigthComplexity - 1);
                iz0 = clamp$1(iz0, 0, vWeigthComplexity - 1);
                ix1 = clamp$1(ix1, 0, uWeigthComplexity - 1);
                iz1 = clamp$1(iz1, 0, vWeigthComplexity - 1);
                var a = this.getWeight(ix0, iz0);
                var b = this.getWeight(ix1, iz0);
                var c = this.getWeight(ix0, iz1);
                var d = this.getWeight(ix1, iz1);
                var m = new Vec4();
                Vec4.add(m, b, c).multiplyScalar(0.5);

                if (dx + dz <= 1.0) {
                  d = new Vec4();
                  Vec4.subtract(d, m, a).add(m);
                } else {
                  a = new Vec4();
                  Vec4.subtract(a, m, d).add(m);
                }

                var n1 = new Vec4();
                var n2 = new Vec4();
                var n = new Vec4();
                Vec4.lerp(n1, a, b, dx);
                Vec4.lerp(n2, c, d, dx);
                Vec4.lerp(n, n1, n2, dz);
                return n;
              };

              _proto3.getMaxWeightLayerAt = function getMaxWeightLayerAt(x, y) {
                var uWeigthComplexity = this.weightMapSize * this.blockCount[0];
                var vWeigthComplexity = this.weightMapSize * this.blockCount[1];

                if (uWeigthComplexity === 0 || vWeigthComplexity === 0) {
                  return null;
                }

                var fx = x / uWeigthComplexity;
                var fy = y / vWeigthComplexity;
                var ix0 = Math.floor(fx);
                var iz0 = Math.floor(fy);

                if (ix0 < 0 || ix0 > uWeigthComplexity - 1 || iz0 < 0 || iz0 > vWeigthComplexity - 1) {
                  return null;
                }

                var w = this.getWeight(ix0, iz0);
                var bx = Math.floor(x / this.weightMapSize);
                var by = Math.floor(y / this.weightMapSize);
                var block = this.getBlock(bx, by);
                var i = 0;

                if (w.y > w[i] && block.getLayer(1) !== -1) {
                  i = 1;
                }

                if (w.y > w[i] && block.getLayer(2) !== -1) {
                  i = 2;
                }

                if (w.z > w[i] && block.getLayer(3) !== -1) {
                  i = 3;
                }

                i = block.getLayer(i);
                return this.getLayer(i);
              };

              _proto3.getBlockLayers = function getBlockLayers(i, j) {
                var layerIndex = (j * this._blockCount[0] + i) * TERRAIN_MAX_BLEND_LAYERS;
                return [this._layerBuffer[layerIndex], this._layerBuffer[layerIndex + 1], this._layerBuffer[layerIndex + 2], this._layerBuffer[layerIndex + 3]];
              };

              _proto3.getBlockLayer = function getBlockLayer(i, j, index) {
                var layerIndex = (j * this._blockCount[0] + i) * TERRAIN_MAX_BLEND_LAYERS;
                return this._layerBuffer[layerIndex + index];
              };

              _proto3.setBlockLayer = function setBlockLayer(i, j, index, layerId) {
                var layerIndex = (j * this._blockCount[0] + i) * TERRAIN_MAX_BLEND_LAYERS;
                this._layerBuffer[layerIndex + index] = layerId;
              };

              _proto3.getBlock = function getBlock(i, j) {
                return this._blocks[j * this._blockCount[0] + i];
              };

              _proto3.getBlocks = function getBlocks() {
                return this._blocks;
              };

              _proto3.rayCheck = function rayCheck(start, dir, step, worldSpace) {
                if (worldSpace === void 0) {
                  worldSpace = true;
                }

                var MAX_COUNT = 2000;
                var trace = start;

                if (worldSpace) {
                  Vec3.subtract(trace, start, this.node.getWorldPosition());
                }

                var delta = new Vec3();
                delta.set(dir);
                delta.multiplyScalar(step);
                var position = null;

                if (dir.equals(new Vec3(0, 1, 0))) {
                  var y = this.getHeightAt(trace.x, trace.z);

                  if (y != null && trace.y <= y) {
                    position = new Vec3(trace.x, y, trace.z);
                  }
                } else if (dir.equals(new Vec3(0, -1, 0))) {
                  var _y6 = this.getHeightAt(trace.x, trace.z);

                  if (_y6 != null && trace.y >= _y6) {
                    position = new Vec3(trace.x, _y6, trace.z);
                  }
                } else {
                  var i = 0;

                  while (i++ < MAX_COUNT) {
                    var _y7 = this.getHeightAt(trace.x, trace.z);

                    if (_y7 != null && trace.y <= _y7) {
                      break;
                    }

                    trace.add(dir);
                  }

                  while (i++ < MAX_COUNT) {
                    var _y8 = this.getHeightAt(trace.x, trace.z);

                    if (_y8 != null && trace.y <= _y8) {
                      position = new Vec3(trace.x, _y8, trace.z);
                      break;
                    }

                    trace.add(delta);
                  }
                }

                return position;
              };

              _proto3._getSharedIndexBuffer = function _getSharedIndexBuffer() {
                if (this._sharedIndexBuffer == null) {
                  var gfxDevice = legacyCC.director.root.device;
                  this._sharedIndexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, Uint16Array.BYTES_PER_ELEMENT * this._lod._indexBuffer.length, Uint16Array.BYTES_PER_ELEMENT));

                  this._sharedIndexBuffer.update(this._lod._indexBuffer);
                }

                return this._sharedIndexBuffer;
              };

              _proto3._getIndexData = function _getIndexData(key) {
                return this._lod.getIndexData(key);
              };

              _proto3._resetLightmap = function _resetLightmap(enble) {
                this._lightmapInfos.length = 0;

                if (enble) {
                  for (var i = 0; i < this._blockCount[0] * this._blockCount[1]; ++i) {
                    this._lightmapInfos.push(new TerrainBlockLightmapInfo());
                  }
                }
              };

              _proto3._updateLightmap = function _updateLightmap(blockId, tex, uOff, vOff, uScale, vScale) {
                this._lightmapInfos[blockId].texture = tex;
                this._lightmapInfos[blockId].UOff = uOff;
                this._lightmapInfos[blockId].VOff = vOff;
                this._lightmapInfos[blockId].UScale = uScale;
                this._lightmapInfos[blockId].VScale = vScale;

                this._blocks[blockId]._updateLightmap(this._lightmapInfos[blockId]);
              };

              _proto3._getLightmapInfo = function _getLightmapInfo(i, j) {
                var index = j * this._blockCount[0] + i;
                return index < this._lightmapInfos.length ? this._lightmapInfos[index] : null;
              };

              _proto3._calcNormal = function _calcNormal(x, z) {
                var flip = 1;
                var here = this.getPosition(x, z);
                var right;
                var up;

                if (x < this.vertexCount[0] - 1) {
                  right = this.getPosition(x + 1, z);
                } else {
                  flip *= -1;
                  right = this.getPosition(x - 1, z);
                }

                if (z < this.vertexCount[1] - 1) {
                  up = this.getPosition(x, z + 1);
                } else {
                  flip *= -1;
                  up = this.getPosition(x, z - 1);
                }

                right.subtract(here);
                up.subtract(here);
                var normal = new Vec3();
                normal.set(up);
                normal.cross(right);
                normal.multiplyScalar(flip);
                normal.normalize();
                return normal;
              };

              _proto3._buildNormals = function _buildNormals() {
                var index = 0;

                for (var y = 0; y < this.vertexCount[1]; ++y) {
                  for (var x = 0; x < this.vertexCount[0]; ++x) {
                    var n = this._calcNormal(x, y);

                    this._normals[index * 3 + 0] = n.x;
                    this._normals[index * 3 + 1] = n.y;
                    this._normals[index * 3 + 2] = n.z;
                    index += 1;
                  }
                }
              };

              _proto3._buildImp = function _buildImp(restore) {
                var _this3 = this;

                if (restore === void 0) {
                  restore = false;
                }

                if (this.valid) {
                  return;
                }

                var terrainAsset = this.__asset;

                if (this._buitinAsset != terrainAsset) {
                  this._buitinAsset = terrainAsset;
                }

                if (!restore && terrainAsset !== null) {
                  this._tileSize = terrainAsset.tileSize;
                  this._blockCount = terrainAsset.blockCount;
                  this._weightMapSize = terrainAsset.weightMapSize;
                  this._lightMapSize = terrainAsset.lightMapSize;
                  this._heights = terrainAsset.heights;
                  this._weights = terrainAsset.weights;
                  this._layerBuffer = terrainAsset.layerBuffer;

                  for (var i = 0; i < this._layerList.length; ++i) {
                    this._layerList[i] = null;
                  }

                  if (terrainAsset.version < TERRAIN_DATA_VERSION5) {
                    var _loop = function _loop(_i9) {
                      var layer = new TerrainLayer();
                      var layerInfo = terrainAsset.layerBinaryInfos[_i9];
                      layer.tileSize = layerInfo.tileSize;
                      legacyCC.assetManager.loadAny(layerInfo.detailMapId, function (err, asset) {
                        layer.detailMap = asset;
                      });

                      if (layerInfo.normalMapId !== '') {
                        legacyCC.assetManager.loadAny(layerInfo.normalMapId, function (err, asset) {
                          layer.normalMap = asset;
                        });
                      }

                      layer.roughness = layerInfo.roughness;
                      layer.metallic = layerInfo.metallic;
                      _this3._layerList[layerInfo.slot] = layer;
                    };

                    for (var _i9 = 0; _i9 < terrainAsset.layerBinaryInfos.length; ++_i9) {
                      _loop(_i9);
                    }
                  } else {
                    for (var _i10 = 0; _i10 < terrainAsset.layerInfos.length; ++_i10) {
                      var layer = new TerrainLayer();
                      var layerInfo = terrainAsset.layerInfos[_i10];
                      layer.tileSize = layerInfo.tileSize;
                      layer.detailMap = layerInfo.detailMap;
                      layer.normalMap = layerInfo.normalMap;
                      layer.roughness = layerInfo.roughness;
                      layer.metallic = layerInfo.metallic;
                      this._layerList[layerInfo.slot] = layer;
                    }
                  }
                }

                if (this._blockCount[0] === 0 || this._blockCount[1] === 0) {
                  return;
                }

                var vertexCount = this.vertexCount[0] * this.vertexCount[1];

                if (this._heights === null || this._heights.length !== vertexCount) {
                  this._heights = new Uint16Array(vertexCount);
                  this._normals = new Array(vertexCount * 3);

                  for (var _i11 = 0; _i11 < vertexCount; ++_i11) {
                    this._heights[_i11] = TERRAIN_HEIGHT_BASE;
                    this._normals[_i11 * 3 + 0] = 0;
                    this._normals[_i11 * 3 + 1] = 1;
                    this._normals[_i11 * 3 + 2] = 0;
                  }
                } else {
                  this._normals = new Array(vertexCount * 3);

                  this._buildNormals();
                }

                var layerBufferSize = this.blockCount[0] * this.blockCount[1] * TERRAIN_MAX_BLEND_LAYERS;

                if (this._layerBuffer === null || this._layerBuffer.length !== layerBufferSize) {
                  this._layerBuffer = new Array(layerBufferSize);

                  for (var _i12 = 0; _i12 < layerBufferSize; ++_i12) {
                    this._layerBuffer[_i12] = -1;
                  }
                }

                var weightMapComplexityU = this._weightMapSize * this._blockCount[0];
                var weightMapComplexityV = this._weightMapSize * this._blockCount[1];

                if (this._weights.length !== weightMapComplexityU * weightMapComplexityV * 4) {
                  this._weights = new Uint8Array(weightMapComplexityU * weightMapComplexityV * 4);

                  for (var _i13 = 0; _i13 < weightMapComplexityU * weightMapComplexityV; ++_i13) {
                    this._weights[_i13 * 4 + 0] = 255;
                    this._weights[_i13 * 4 + 1] = 0;
                    this._weights[_i13 * 4 + 2] = 0;
                    this._weights[_i13 * 4 + 3] = 0;
                  }
                }

                for (var j = 0; j < this._blockCount[1]; ++j) {
                  for (var _i14 = 0; _i14 < this._blockCount[0]; ++_i14) {
                    this._blocks.push(new TerrainBlock(this, _i14, j));
                  }
                }

                for (var _i15 = 0; _i15 < this._blocks.length; ++_i15) {
                  this._blocks[_i15].build();
                }
              };

              _proto3._rebuildHeights = function _rebuildHeights(info) {
                if (this.vertexCount[0] === info.vertexCount[0] && this.vertexCount[1] === info.vertexCount[1]) {
                  return false;
                }

                var heights = new Uint16Array(info.vertexCount[0] * info.vertexCount[1]);

                for (var i = 0; i < heights.length; ++i) {
                  heights[i] = TERRAIN_HEIGHT_BASE;
                }

                var w = Math.min(this.vertexCount[0], info.vertexCount[0]);
                var h = Math.min(this.vertexCount[1], info.vertexCount[1]);

                for (var j = 0; j < h; ++j) {
                  for (var _i16 = 0; _i16 < w; ++_i16) {
                    var index0 = j * info.vertexCount[0] + _i16;
                    var index1 = j * this.vertexCount[0] + _i16;
                    heights[index0] = this._heights[index1];
                  }
                }

                this._heights = heights;
                return true;
              };

              _proto3._rebuildLayerBuffer = function _rebuildLayerBuffer(info) {
                if (this.blockCount[0] === info.blockCount[0] && this.blockCount[1] === info.blockCount[1]) {
                  return false;
                }

                var layerBuffer = [];
                layerBuffer.length = info.blockCount[0] * info.blockCount[1] * TERRAIN_MAX_BLEND_LAYERS;

                for (var i = 0; i < layerBuffer.length; ++i) {
                  layerBuffer[i] = -1;
                }

                var w = Math.min(this.blockCount[0], info.blockCount[0]);
                var h = Math.min(this.blockCount[1], info.blockCount[1]);

                for (var j = 0; j < h; ++j) {
                  for (var _i17 = 0; _i17 < w; ++_i17) {
                    var index0 = j * info.blockCount[0] + _i17;
                    var index1 = j * this.blockCount[0] + _i17;

                    for (var l = 0; l < TERRAIN_MAX_BLEND_LAYERS; ++l) {
                      layerBuffer[index0 * TERRAIN_MAX_BLEND_LAYERS + l] = this._layerBuffer[index1 * TERRAIN_MAX_BLEND_LAYERS + l];
                    }
                  }
                }

                this._layerBuffer = layerBuffer;
                return true;
              };

              _proto3._rebuildWeights = function _rebuildWeights(info) {
                var _this4 = this;

                var oldWeightMapSize = this._weightMapSize;
                var oldWeightMapComplexityU = this._weightMapSize * this._blockCount[0];
                var oldWeightMapComplexityV = this._weightMapSize * this._blockCount[1];
                var weightMapComplexityU = info.weightMapSize * info.blockCount[0];
                var weightMapComplexityV = info.weightMapSize * info.blockCount[1];

                if (weightMapComplexityU === oldWeightMapComplexityU && weightMapComplexityV === oldWeightMapComplexityV) {
                  return false;
                }

                var weights = new Uint8Array(weightMapComplexityU * weightMapComplexityV * 4);

                for (var i = 0; i < weightMapComplexityU * weightMapComplexityV; ++i) {
                  weights[i * 4 + 0] = 255;
                  weights[i * 4 + 1] = 0;
                  weights[i * 4 + 2] = 0;
                  weights[i * 4 + 3] = 0;
                }

                var w = Math.min(info.blockCount[0], this._blockCount[0]);
                var h = Math.min(info.blockCount[1], this._blockCount[1]);

                var getOldWeight = function getOldWeight(_i, _j, _weights) {
                  var index = _j * oldWeightMapComplexityU + _i;
                  var weight = new Vec4();
                  weight.x = _weights[index * 4 + 0] / 255.0;
                  weight.y = _weights[index * 4 + 1] / 255.0;
                  weight.z = _weights[index * 4 + 2] / 255.0;
                  weight.w = _weights[index * 4 + 3] / 255.0;
                  return weight;
                };

                var sampleOldWeight = function sampleOldWeight(_x, _y, _xOff, _yOff, _weights) {
                  var ix0 = Math.floor(_x);
                  var iz0 = Math.floor(_y);
                  var ix1 = Math.min(ix0 + 1, oldWeightMapSize - 1);
                  var iz1 = Math.min(iz0 + 1, oldWeightMapSize - 1);
                  var dx = _x - ix0;
                  var dz = _y - iz0;
                  var a = getOldWeight(ix0 + _xOff, iz0 + _yOff, _this4._weights);
                  var b = getOldWeight(ix1 + _xOff, iz0 + _yOff, _this4._weights);
                  var c = getOldWeight(ix0 + _xOff, iz1 + _yOff, _this4._weights);
                  var d = getOldWeight(ix1 + _xOff, iz1 + _yOff, _this4._weights);
                  var m = new Vec4();
                  Vec4.add(m, b, c).multiplyScalar(0.5);

                  if (dx + dz <= 1.0) {
                    d.set(m);
                    d.subtract(a);
                    d.add(m);
                  } else {
                    a.set(m);
                    a.subtract(d);
                    a.add(m);
                  }

                  var n1 = new Vec4();
                  var n2 = new Vec4();
                  var n = new Vec4();
                  Vec4.lerp(n1, a, b, dx);
                  Vec4.lerp(n2, c, d, dx);
                  Vec4.lerp(n, n1, n2, dz);
                  return n;
                };

                for (var j = 0; j < h; ++j) {
                  for (var _i18 = 0; _i18 < w; ++_i18) {
                    var uOff = _i18 * oldWeightMapSize;
                    var vOff = j * oldWeightMapSize;

                    for (var v = 0; v < info.weightMapSize; ++v) {
                      for (var u = 0; u < info.weightMapSize; ++u) {
                        var _w = void 0;

                        if (info.weightMapSize === oldWeightMapSize) {
                          _w = getOldWeight(u + uOff, v + vOff, this._weights);
                        } else {
                          var x = u / (info.weightMapSize - 1) * (oldWeightMapSize - 1);
                          var y = v / (info.weightMapSize - 1) * (oldWeightMapSize - 1);
                          _w = sampleOldWeight(x, y, uOff, vOff, this._weights);
                        }

                        var du = _i18 * info.weightMapSize + u;
                        var dv = j * info.weightMapSize + v;
                        var index = dv * weightMapComplexityU + du;
                        weights[index * 4 + 0] = _w.x * 255;
                        weights[index * 4 + 1] = _w.y * 255;
                        weights[index * 4 + 2] = _w.z * 255;
                        weights[index * 4 + 3] = _w.w * 255;
                      }
                    }
                  }
                }

                this._weights = weights;
                return true;
              };

              _createClass(Terrain, [{
                key: "_asset",
                get: function get() {
                  return this.__asset;
                },
                set: function set(value) {
                  this.__asset = value;

                  if (this._buitinAsset !== this.__asset) {
                    this._buitinAsset = this.__asset;

                    for (var i = 0; i < this._blocks.length; ++i) {
                      this._blocks[i].destroy();
                    }

                    this._blocks = [];

                    if (this.__asset === null) {
                      this._effectAsset = null;
                      this._lightmapInfos = [];
                      this._receiveShadow = false;
                      this._useNormalmap = false;
                      this._usePBR = false;
                      this._tileSize = 1;
                      this._blockCount = [1, 1];
                      this._weightMapSize = 128;
                      this._lightMapSize = 128;
                      this._heights = new Uint16Array();
                      this._weights = new Uint8Array();
                      this._normals = [];
                      this._layerBuffer = [];
                      this._blocks = [];
                      this._layerList = [];

                      for (var _i19 = 0; _i19 < TERRAIN_MAX_LAYER_COUNT; ++_i19) {
                        this._layerList.push(null);
                      }
                    }

                    if (legacyCC.director.root.device) {
                      this._buildImp();
                    }
                  }
                }
              }, {
                key: "effectAsset",
                get: function get() {
                  return this._effectAsset;
                },
                set: function set(value) {
                  if (this._effectAsset === value) {
                    return;
                  }

                  this._effectAsset = value;

                  for (var i = 0; i < this._blocks.length; ++i) {
                    this._blocks[i]._invalidMaterial();
                  }
                }
              }, {
                key: "receiveShadow",
                get: function get() {
                  return this._receiveShadow;
                },
                set: function set(val) {
                  this._receiveShadow = val;

                  for (var i = 0; i < this._blocks.length; i++) {
                    this._blocks[i]._invalidMaterial();
                  }
                }
              }, {
                key: "useNormalMap",
                get: function get() {
                  return this._useNormalmap;
                },
                set: function set(val) {
                  this._useNormalmap = val;

                  for (var i = 0; i < this._blocks.length; i++) {
                    this._blocks[i]._invalidMaterial();
                  }
                }
              }, {
                key: "usePBR",
                get: function get() {
                  return this._usePBR;
                },
                set: function set(val) {
                  this._usePBR = val;

                  for (var i = 0; i < this._blocks.length; i++) {
                    this._blocks[i]._invalidMaterial();
                  }
                }
              }, {
                key: "lodEnable",
                get: function get() {
                  return this._lodEnable;
                },
                set: function set(val) {
                  this._lodEnable = val;

                  if (!this._lodEnable) {
                    for (var i = 0; i < this._blocks.length; i++) {
                      this._blocks[i]._resetLod();
                    }
                  }
                }
              }, {
                key: "LodBias",
                get: function get() {
                  return this._lodBias;
                },
                set: function set(val) {
                  this._lodBias = val;
                }
              }, {
                key: "size",
                get: function get() {
                  var sz = new Size$1(0, 0);
                  sz.width = this.blockCount[0] * TERRAIN_BLOCK_TILE_COMPLEXITY * this.tileSize;
                  sz.height = this.blockCount[1] * TERRAIN_BLOCK_TILE_COMPLEXITY * this.tileSize;
                  return sz;
                }
              }, {
                key: "tileSize",
                get: function get() {
                  return this._tileSize;
                }
              }, {
                key: "tileCount",
                get: function get() {
                  return [this.blockCount[0] * TERRAIN_BLOCK_TILE_COMPLEXITY, this.blockCount[1] * TERRAIN_BLOCK_TILE_COMPLEXITY];
                }
              }, {
                key: "vertexCount",
                get: function get() {
                  var _vertexCount = this.tileCount;
                  _vertexCount[0] += 1;
                  _vertexCount[1] += 1;
                  return _vertexCount;
                }
              }, {
                key: "blockCount",
                get: function get() {
                  return this._blockCount;
                }
              }, {
                key: "lightMapSize",
                get: function get() {
                  return this._lightMapSize;
                }
              }, {
                key: "weightMapSize",
                get: function get() {
                  return this._weightMapSize;
                }
              }, {
                key: "heights",
                get: function get() {
                  return this._heights;
                }
              }, {
                key: "weights",
                get: function get() {
                  return this._weights;
                }
              }, {
                key: "valid",
                get: function get() {
                  return this._blocks.length > 0;
                }
              }, {
                key: "info",
                get: function get() {
                  var ti = new TerrainInfo();
                  ti.tileSize = this.tileSize;
                  ti.blockCount[0] = this.blockCount[0];
                  ti.blockCount[1] = this.blockCount[1];
                  ti.weightMapSize = this.weightMapSize;
                  ti.lightMapSize = this.lightMapSize;
                  return ti;
                }
              }]);

              return Terrain;
            }(Component), _temp4$3), (_descriptor15$5 = _applyDecoratedDescriptor(_class11$3.prototype, "__asset", [_dec6$A, serializable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor16$5 = _applyDecoratedDescriptor(_class11$3.prototype, "_effectAsset", [_dec7$z, serializable, disallowAnimation, _dec8$x], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor17$5 = _applyDecoratedDescriptor(_class11$3.prototype, "_lightmapInfos", [_dec9$t, serializable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor18$4 = _applyDecoratedDescriptor(_class11$3.prototype, "_receiveShadow", [_dec10$r, serializable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor19$4 = _applyDecoratedDescriptor(_class11$3.prototype, "_useNormalmap", [_dec11$m, serializable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor20$3 = _applyDecoratedDescriptor(_class11$3.prototype, "_usePBR", [_dec12$m, serializable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor21$3 = _applyDecoratedDescriptor(_class11$3.prototype, "_lodEnable", [_dec13$m, serializable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor22$3 = _applyDecoratedDescriptor(_class11$3.prototype, "_lodBias", [_dec14$k, serializable, disallowAnimation], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _applyDecoratedDescriptor(_class11$3.prototype, "_asset", [_dec15$k, _dec16$j], Object.getOwnPropertyDescriptor(_class11$3.prototype, "_asset"), _class11$3.prototype), _applyDecoratedDescriptor(_class11$3.prototype, "effectAsset", [_dec17$h, _dec18$g], Object.getOwnPropertyDescriptor(_class11$3.prototype, "effectAsset"), _class11$3.prototype), _applyDecoratedDescriptor(_class11$3.prototype, "receiveShadow", [editable], Object.getOwnPropertyDescriptor(_class11$3.prototype, "receiveShadow"), _class11$3.prototype), _applyDecoratedDescriptor(_class11$3.prototype, "useNormalMap", [editable], Object.getOwnPropertyDescriptor(_class11$3.prototype, "useNormalMap"), _class11$3.prototype), _applyDecoratedDescriptor(_class11$3.prototype, "usePBR", [editable], Object.getOwnPropertyDescriptor(_class11$3.prototype, "usePBR"), _class11$3.prototype), _applyDecoratedDescriptor(_class11$3.prototype, "lodEnable", [editable], Object.getOwnPropertyDescriptor(_class11$3.prototype, "lodEnable"), _class11$3.prototype), _applyDecoratedDescriptor(_class11$3.prototype, "LodBias", [editable], Object.getOwnPropertyDescriptor(_class11$3.prototype, "LodBias"), _class11$3.prototype), _applyDecoratedDescriptor(_class11$3.prototype, "info", [_dec19$g], Object.getOwnPropertyDescriptor(_class11$3.prototype, "info"), _class11$3.prototype)), _class11$3)) || _class10$2) || _class10$2) || _class10$2) || _class10$2));

            var Action = function () {
              function Action() {
                this.originalTarget = null;
                this.target = null;
                this.tag = Action.TAG_INVALID;
              }

              var _proto = Action.prototype;

              _proto.clone = function clone() {
                var action = new Action();
                action.originalTarget = null;
                action.target = null;
                action.tag = this.tag;
                return action;
              };

              _proto.isDone = function isDone() {
                return true;
              };

              _proto.startWithTarget = function startWithTarget(target) {
                this.originalTarget = target;
                this.target = target;
              };

              _proto.stop = function stop() {
                this.target = null;
              };

              _proto.step = function step(dt) {
                logID(1006);
              };

              _proto.update = function update(dt) {
                logID(1007);
              };

              _proto.getTarget = function getTarget() {
                return this.target;
              };

              _proto.setTarget = function setTarget(target) {
                this.target = target;
              };

              _proto.getOriginalTarget = function getOriginalTarget() {
                return this.originalTarget;
              };

              _proto.setOriginalTarget = function setOriginalTarget(originalTarget) {
                this.originalTarget = originalTarget;
              };

              _proto.getTag = function getTag() {
                return this.tag;
              };

              _proto.setTag = function setTag(tag) {
                this.tag = tag;
              };

              _proto.reverse = function reverse() {
                logID(1008);
                return null;
              };

              _proto.retain = function retain() {};

              _proto.release = function release() {};

              return Action;
            }();
            Action.TAG_INVALID = -1;
            var FiniteTimeAction = function (_Action) {
              _inheritsLoose(FiniteTimeAction, _Action);

              function FiniteTimeAction() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Action.call.apply(_Action, [this].concat(args)) || this;
                _this._duration = 0;
                _this._timesForRepeat = 1;
                return _this;
              }

              var _proto2 = FiniteTimeAction.prototype;

              _proto2.getDuration = function getDuration() {
                return this._duration * (this._timesForRepeat || 1);
              };

              _proto2.setDuration = function setDuration(duration) {
                this._duration = duration;
              };

              _proto2.clone = function clone() {
                return new FiniteTimeAction();
              };

              return FiniteTimeAction;
            }(Action);
            var Speed = function (_Action2) {
              _inheritsLoose(Speed, _Action2);

              function Speed(action, speed) {
                var _this2;

                if (speed === void 0) {
                  speed = 1;
                }

                _this2 = _Action2.call(this) || this;
                _this2._speed = 0;
                _this2._innerAction = null;
                action && _this2.initWithAction(action, speed);
                return _this2;
              }

              var _proto3 = Speed.prototype;

              _proto3.getSpeed = function getSpeed() {
                return this._speed;
              };

              _proto3.setSpeed = function setSpeed(speed) {
                this._speed = speed;
              };

              _proto3.initWithAction = function initWithAction(action, speed) {
                if (!action) {
                  errorID(1021);
                  return false;
                }

                this._innerAction = action;
                this._speed = speed;
                return true;
              };

              _proto3.clone = function clone() {
                var action = new Speed();
                action.initWithAction(this._innerAction.clone(), this._speed);
                return action;
              };

              _proto3.startWithTarget = function startWithTarget(target) {
                Action.prototype.startWithTarget.call(this, target);

                this._innerAction.startWithTarget(target);
              };

              _proto3.stop = function stop() {
                this._innerAction.stop();

                Action.prototype.stop.call(this);
              };

              _proto3.step = function step(dt) {
                this._innerAction.step(dt * this._speed);
              };

              _proto3.isDone = function isDone() {
                return this._innerAction.isDone();
              };

              _proto3.reverse = function reverse() {
                return new Speed(this._innerAction.reverse(), this._speed);
              };

              _proto3.setInnerAction = function setInnerAction(action) {
                if (this._innerAction !== action) {
                  this._innerAction = action;
                }
              };

              _proto3.getInnerAction = function getInnerAction() {
                return this._innerAction;
              };

              return Speed;
            }(Action);

            var ID_COUNTER = 0;

            var HashElement = function HashElement() {
              this.actions = [];
              this.target = null;
              this.actionIndex = 0;
              this.currentAction = null;
              this.paused = false;
              this.lock = false;
            };

            var ActionManager = function () {
              function ActionManager() {
                this._hashTargets = new Map();
                this._arrayTargets = [];
                this._elementPool = [];
              }

              var _proto = ActionManager.prototype;

              _proto._searchElementByTarget = function _searchElementByTarget(arr, target) {
                for (var k = 0; k < arr.length; k++) {
                  if (target === arr[k].target) return arr[k];
                }

                return null;
              };

              _proto._getElement = function _getElement(target, paused) {
                var element = this._elementPool.pop();

                if (!element) {
                  element = new HashElement();
                }

                element.target = target;
                element.paused = !!paused;
                return element;
              };

              _proto._putElement = function _putElement(element) {
                element.actions.length = 0;
                element.actionIndex = 0;
                element.currentAction = null;
                element.paused = false;
                element.target = null;
                element.lock = false;

                this._elementPool.push(element);
              };

              _proto.addAction = function addAction(action, target, paused) {
                if (!action || !target) {
                  errorID(1000);
                  return;
                }

                if (target.uuid == null) {
                  target.uuid = "_TWEEN_UUID_" + ID_COUNTER++;
                }

                var element = this._hashTargets.get(target);

                if (!element) {
                  element = this._getElement(target, paused);

                  this._hashTargets.set(target, element);

                  this._arrayTargets.push(element);
                } else if (!element.actions) {
                  element.actions = [];
                }

                element.target = target;
                element.actions.push(action);
                action.startWithTarget(target);
              };

              _proto.removeAllActions = function removeAllActions() {
                var locTargets = this._arrayTargets;

                for (var i = 0; i < locTargets.length; i++) {
                  var element = locTargets[i];
                  if (element) this._putElement(element);
                }

                this._arrayTargets.length = 0;
                this._hashTargets = new Map();
              };

              _proto.removeAllActionsFromTarget = function removeAllActionsFromTarget(target) {
                if (target == null) return;

                var element = this._hashTargets.get(target);

                if (element) {
                  element.actions.length = 0;

                  this._deleteHashElement(element);
                }
              };

              _proto.removeAction = function removeAction(action) {
                if (action == null) return;
                var target = action.getOriginalTarget();

                var element = this._hashTargets.get(target);

                if (element) {
                  for (var i = 0; i < element.actions.length; i++) {
                    if (element.actions[i] === action) {
                      element.actions.splice(i, 1);
                      if (element.actionIndex >= i) element.actionIndex--;
                      break;
                    }
                  }
                }
              };

              _proto._removeActionByTag = function _removeActionByTag(tag, element, target) {
                for (var i = 0, l = element.actions.length; i < l; ++i) {
                  var action = element.actions[i];

                  if (action && action.getTag() === tag) {
                    if (target && action.getOriginalTarget() !== target) {
                      continue;
                    }

                    this._removeActionAtIndex(i, element);

                    break;
                  }
                }
              };

              _proto._removeAllActionsByTag = function _removeAllActionsByTag(tag, element, target) {
                for (var i = element.actions.length - 1; i >= 0; --i) {
                  var action = element.actions[i];

                  if (action && action.getTag() === tag) {
                    if (target && action.getOriginalTarget() !== target) {
                      continue;
                    }

                    this._removeActionAtIndex(i, element);
                  }
                }
              };

              _proto.removeActionByTag = function removeActionByTag(tag, target) {
                var _this = this;

                if (tag === Action.TAG_INVALID) logID(1002);
                var hashTargets = this._hashTargets;

                if (target) {
                  var element = hashTargets.get(target);

                  if (element) {
                    this._removeActionByTag(tag, element, target);
                  }
                } else {
                  hashTargets.forEach(function (element) {
                    _this._removeActionByTag(tag, element);
                  });
                }
              };

              _proto.removeAllActionsByTag = function removeAllActionsByTag(tag, target) {
                var _this2 = this;

                if (tag === Action.TAG_INVALID) logID(1002);
                var hashTargets = this._hashTargets;

                if (target) {
                  var element = hashTargets.get(target);

                  if (element) {
                    this._removeAllActionsByTag(tag, element, target);
                  }
                } else {
                  hashTargets.forEach(function (element) {
                    _this2._removeAllActionsByTag(tag, element);
                  });
                }
              };

              _proto.getActionByTag = function getActionByTag(tag, target) {
                if (tag === Action.TAG_INVALID) logID(1004);

                var element = this._hashTargets.get(target);

                if (element) {
                  if (element.actions != null) {
                    for (var i = 0; i < element.actions.length; ++i) {
                      var action = element.actions[i];

                      if (action && action.getTag() === tag) {
                        return action;
                      }
                    }
                  }

                  logID(1005, tag);
                }

                return null;
              };

              _proto.getNumberOfRunningActionsInTarget = function getNumberOfRunningActionsInTarget(target) {
                var element = this._hashTargets.get(target);

                if (element) {
                  return element.actions ? element.actions.length : 0;
                }

                return 0;
              };

              _proto.pauseTarget = function pauseTarget(target) {
                var element = this._hashTargets.get(target);

                if (element) element.paused = true;
              };

              _proto.resumeTarget = function resumeTarget(target) {
                var element = this._hashTargets.get(target);

                if (element) element.paused = false;
              };

              _proto.pauseAllRunningActions = function pauseAllRunningActions() {
                var idsWithActions = [];
                var locTargets = this._arrayTargets;

                for (var i = 0; i < locTargets.length; i++) {
                  var element = locTargets[i];

                  if (element && !element.paused) {
                    element.paused = true;
                    idsWithActions.push(element.target);
                  }
                }

                return idsWithActions;
              };

              _proto.resumeTargets = function resumeTargets(targetsToResume) {
                if (!targetsToResume) return;

                for (var i = 0; i < targetsToResume.length; i++) {
                  if (targetsToResume[i]) this.resumeTarget(targetsToResume[i]);
                }
              };

              _proto.pauseTargets = function pauseTargets(targetsToPause) {
                if (!targetsToPause) return;

                for (var i = 0; i < targetsToPause.length; i++) {
                  if (targetsToPause[i]) this.pauseTarget(targetsToPause[i]);
                }
              };

              _proto.purgeSharedManager = function purgeSharedManager() {
                legacyCC.director.getScheduler().unscheduleUpdate(this);
              };

              _proto._removeActionAtIndex = function _removeActionAtIndex(index, element) {
                var action = element.actions[index];
                element.actions.splice(index, 1);
                if (element.actionIndex >= index) element.actionIndex--;

                if (element.actions.length === 0) {
                  this._deleteHashElement(element);
                }
              };

              _proto._deleteHashElement = function _deleteHashElement(element) {
                var ret = false;

                if (element && !element.lock) {
                  if (this._hashTargets.get(element.target)) {
                    this._hashTargets["delete"](element.target);

                    var targets = this._arrayTargets;

                    for (var i = 0, l = targets.length; i < l; i++) {
                      if (targets[i] === element) {
                        targets.splice(i, 1);
                        break;
                      }
                    }

                    this._putElement(element);

                    ret = true;
                  }
                }

                return ret;
              };

              _proto.update = function update(dt) {
                var locTargets = this._arrayTargets;
                var locCurrTarget;

                for (var elt = 0; elt < locTargets.length; elt++) {
                  this._currentTarget = locTargets[elt];
                  locCurrTarget = this._currentTarget;
                  var target = locCurrTarget.target;

                  if (target instanceof CCObject && !target.isValid) {
                    this.removeAllActionsFromTarget(target);
                    elt--;
                    continue;
                  }

                  if (!locCurrTarget.paused && locCurrTarget.actions) {
                    locCurrTarget.lock = true;

                    for (locCurrTarget.actionIndex = 0; locCurrTarget.actionIndex < locCurrTarget.actions.length; locCurrTarget.actionIndex++) {
                      locCurrTarget.currentAction = locCurrTarget.actions[locCurrTarget.actionIndex];
                      if (!locCurrTarget.currentAction) continue;
                      locCurrTarget.currentAction.step(dt * (locCurrTarget.currentAction._speedMethod ? locCurrTarget.currentAction._speed : 1));

                      if (locCurrTarget.currentAction && locCurrTarget.currentAction.isDone()) {
                        locCurrTarget.currentAction.stop();
                        var action = locCurrTarget.currentAction;
                        locCurrTarget.currentAction = null;
                        this.removeAction(action);
                      }

                      locCurrTarget.currentAction = null;
                    }

                    locCurrTarget.lock = false;
                  }

                  if (locCurrTarget.actions.length === 0) {
                    if (this._deleteHashElement(locCurrTarget)) {
                      elt--;
                    }
                  }
                }
              };

              return ActionManager;
            }();

            var TweenSystem = exports('TweenSystem', function (_System) {
              _inheritsLoose(TweenSystem, _System);

              function TweenSystem() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _System.call.apply(_System, [this].concat(args)) || this;
                _this.actionMgr = new ActionManager();
                return _this;
              }

              var _proto = TweenSystem.prototype;

              _proto.update = function update(dt) {
                {
                  this.actionMgr.update(dt);
                }
              };

              _createClass(TweenSystem, [{
                key: "ActionManager",
                get: function get() {
                  return this.actionMgr;
                }
              }]);

              return TweenSystem;
            }(System));
            TweenSystem.ID = 'TWEEN';
            TweenSystem.instance = void 0;
            director.on(Director.EVENT_INIT, function () {
              var sys = new TweenSystem();
              TweenSystem.instance = sys;
              director.registerSystem(TweenSystem.ID, sys, System.Priority.MEDIUM);
            });

            var ActionInstant = function (_FiniteTimeAction) {
              _inheritsLoose(ActionInstant, _FiniteTimeAction);

              function ActionInstant() {
                return _FiniteTimeAction.apply(this, arguments) || this;
              }

              var _proto = ActionInstant.prototype;

              _proto.isDone = function isDone() {
                return true;
              };

              _proto.step = function step(dt) {
                this.update(1);
              };

              _proto.update = function update(dt) {};

              _proto.reverse = function reverse() {
                return this.clone();
              };

              _proto.clone = function clone() {
                return new ActionInstant();
              };

              return ActionInstant;
            }(FiniteTimeAction);
            var Show = function (_ActionInstant) {
              _inheritsLoose(Show, _ActionInstant);

              function Show() {
                return _ActionInstant.apply(this, arguments) || this;
              }

              var _proto2 = Show.prototype;

              _proto2.update = function update(dt) {
                var _renderComps = this.target.getComponentsInChildren(RenderableComponent);

                for (var i = 0; i < _renderComps.length; ++i) {
                  var render = _renderComps[i];
                  render.enabled = true;
                }
              };

              _proto2.reverse = function reverse() {
                return new Hide();
              };

              _proto2.clone = function clone() {
                return new Show();
              };

              return Show;
            }(ActionInstant);
            function show() {
              return new Show();
            }
            var Hide = function (_ActionInstant2) {
              _inheritsLoose(Hide, _ActionInstant2);

              function Hide() {
                return _ActionInstant2.apply(this, arguments) || this;
              }

              var _proto3 = Hide.prototype;

              _proto3.update = function update(dt) {
                var _renderComps = this.target.getComponentsInChildren(RenderableComponent);

                for (var i = 0; i < _renderComps.length; ++i) {
                  var render = _renderComps[i];
                  render.enabled = false;
                }
              };

              _proto3.reverse = function reverse() {
                return new Show();
              };

              _proto3.clone = function clone() {
                return new Hide();
              };

              return Hide;
            }(ActionInstant);
            function hide() {
              return new Hide();
            }
            var ToggleVisibility = function (_ActionInstant3) {
              _inheritsLoose(ToggleVisibility, _ActionInstant3);

              function ToggleVisibility() {
                return _ActionInstant3.apply(this, arguments) || this;
              }

              var _proto4 = ToggleVisibility.prototype;

              _proto4.update = function update(dt) {
                var _renderComps = this.target.getComponentsInChildren(RenderableComponent);

                for (var i = 0; i < _renderComps.length; ++i) {
                  var render = _renderComps[i];
                  render.enabled = !render.enabled;
                }
              };

              _proto4.reverse = function reverse() {
                return new ToggleVisibility();
              };

              _proto4.clone = function clone() {
                return new ToggleVisibility();
              };

              return ToggleVisibility;
            }(ActionInstant);
            var RemoveSelf = function (_ActionInstant4) {
              _inheritsLoose(RemoveSelf, _ActionInstant4);

              function RemoveSelf(isNeedCleanUp) {
                var _this;

                _this = _ActionInstant4.call(this) || this;
                _this._isNeedCleanUp = true;
                isNeedCleanUp !== undefined && _this.init(isNeedCleanUp);
                return _this;
              }

              var _proto5 = RemoveSelf.prototype;

              _proto5.update = function update(dt) {
                this.target.removeFromParent();

                if (this._isNeedCleanUp) {
                  this.target.destroy();
                }
              };

              _proto5.init = function init(isNeedCleanUp) {
                this._isNeedCleanUp = isNeedCleanUp;
                return true;
              };

              _proto5.reverse = function reverse() {
                return new RemoveSelf(this._isNeedCleanUp);
              };

              _proto5.clone = function clone() {
                return new RemoveSelf(this._isNeedCleanUp);
              };

              return RemoveSelf;
            }(ActionInstant);
            function removeSelf(isNeedCleanUp) {
              return new RemoveSelf(isNeedCleanUp);
            }
            var CallFunc = function (_ActionInstant5) {
              _inheritsLoose(CallFunc, _ActionInstant5);

              function CallFunc(selector, selectorTarget, data) {
                var _this2;

                _this2 = _ActionInstant5.call(this) || this;
                _this2._selectorTarget = null;
                _this2._function = null;
                _this2._data = null;

                _this2.initWithFunction(selector, selectorTarget, data);

                return _this2;
              }

              var _proto6 = CallFunc.prototype;

              _proto6.initWithFunction = function initWithFunction(selector, selectorTarget, data) {
                if (selector) {
                  this._function = selector;
                }

                if (selectorTarget) {
                  this._selectorTarget = selectorTarget;
                }

                if (data !== undefined) {
                  this._data = data;
                }

                return true;
              };

              _proto6.execute = function execute() {
                if (this._function) {
                  this._function.call(this._selectorTarget, this.target, this._data);
                }
              };

              _proto6.update = function update(dt) {
                this.execute();
              };

              _proto6.getTargetCallback = function getTargetCallback() {
                return this._selectorTarget;
              };

              _proto6.setTargetCallback = function setTargetCallback(sel) {
                if (sel !== this._selectorTarget) {
                  if (this._selectorTarget) {
                    this._selectorTarget = null;
                  }

                  this._selectorTarget = sel;
                }
              };

              _proto6.clone = function clone() {
                var action = new CallFunc();
                action.initWithFunction(this._function, this._selectorTarget, this._data);
                return action;
              };

              return CallFunc;
            }(ActionInstant);
            function callFunc(selector, selectorTarget, data) {
              return new CallFunc(selector, selectorTarget, data);
            }

            var ActionInterval = function (_FiniteTimeAction) {
              _inheritsLoose(ActionInterval, _FiniteTimeAction);

              function ActionInterval(d) {
                var _this;

                _this = _FiniteTimeAction.call(this) || this;
                _this.MAX_VALUE = 2;
                _this._elapsed = 0;
                _this._firstTick = false;
                _this._easeList = [];
                _this._speed = 1;
                _this._repeatForever = false;
                _this._repeatMethod = false;
                _this._speedMethod = false;

                if (d !== undefined && !isNaN(d)) {
                  _this.initWithDuration(d);
                }

                return _this;
              }

              var _proto = ActionInterval.prototype;

              _proto.getElapsed = function getElapsed() {
                return this._elapsed;
              };

              _proto.initWithDuration = function initWithDuration(d) {
                this._duration = d === 0 ? macro.FLT_EPSILON : d;
                this._elapsed = 0;
                this._firstTick = true;
                return true;
              };

              _proto.isDone = function isDone() {
                return this._elapsed >= this._duration;
              };

              _proto._cloneDecoration = function _cloneDecoration(action) {
                action._repeatForever = this._repeatForever;
                action._speed = this._speed;
                action._timesForRepeat = this._timesForRepeat;
                action._easeList = this._easeList;
                action._speedMethod = this._speedMethod;
                action._repeatMethod = this._repeatMethod;
              };

              _proto._reverseEaseList = function _reverseEaseList(action) {
                if (this._easeList) {
                  action._easeList = [];

                  for (var i = 0; i < this._easeList.length; i++) {
                    action._easeList.push(this._easeList[i]);
                  }
                }
              };

              _proto.clone = function clone() {
                var action = new ActionInterval(this._duration);

                this._cloneDecoration(action);

                return action;
              };

              _proto.easing = function easing(easeObj) {
                if (this._easeList) this._easeList.length = 0;else this._easeList = [];

                for (var i = 0; i < arguments.length; i++) {
                  this._easeList.push(arguments[i]);
                }

                return this;
              };

              _proto._computeEaseTime = function _computeEaseTime(dt) {
                return dt;
              };

              _proto.step = function step(dt) {
                if (this._firstTick) {
                  this._firstTick = false;
                  this._elapsed = 0;
                } else this._elapsed += dt;

                var t = this._elapsed / (this._duration > 0.0000001192092896 ? this._duration : 0.0000001192092896);
                t = t < 1 ? t : 1;
                this.update(t > 0 ? t : 0);

                if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
                  if (!this._repeatForever) {
                    this._timesForRepeat--;
                  }

                  this.startWithTarget(this.target);
                  this.step(this._elapsed - this._duration);
                }
              };

              _proto.startWithTarget = function startWithTarget(target) {
                Action.prototype.startWithTarget.call(this, target);
                this._elapsed = 0;
                this._firstTick = true;
              };

              _proto.reverse = function reverse() {
                logID(1010);
                return this;
              };

              _proto.setAmplitudeRate = function setAmplitudeRate(amp) {
                logID(1011);
              };

              _proto.getAmplitudeRate = function getAmplitudeRate() {
                logID(1012);
                return 0;
              };

              _proto.speed = function speed(_speed) {
                if (_speed <= 0) {
                  logID(1013);
                  return this;
                }

                this._speedMethod = true;
                this._speed *= _speed;
                return this;
              };

              _proto.getSpeed = function getSpeed() {
                return this._speed;
              };

              _proto.setSpeed = function setSpeed(speed) {
                this._speed = speed;
                return this;
              };

              _proto.repeat = function repeat(times) {
                times = Math.round(times);

                if (isNaN(times) || times < 1) {
                  logID(1014);
                  return this;
                }

                this._repeatMethod = true;
                this._timesForRepeat *= times;
                return this;
              };

              _proto.repeatForever = function repeatForever() {
                this._repeatMethod = true;
                this._timesForRepeat = this.MAX_VALUE;
                this._repeatForever = true;
                return this;
              };

              return ActionInterval;
            }(FiniteTimeAction);
            var Sequence = function (_ActionInterval) {
              _inheritsLoose(Sequence, _ActionInterval);

              function Sequence(tempArray) {
                var _this2;

                _this2 = _ActionInterval.call(this) || this;
                _this2._actions = [];
                _this2._split = 0;
                _this2._last = 0;
                _this2._reversed = false;
                var paramArray = tempArray instanceof Array ? tempArray : arguments;

                if (paramArray.length === 1) {
                  errorID(1019);
                  return _assertThisInitialized(_this2);
                }

                var last = paramArray.length - 1;
                if (last >= 0 && paramArray[last] == null) logID(1015);

                if (last >= 0) {
                  var prev = paramArray[0];
                  var action1;

                  for (var i = 1; i < last; i++) {
                    if (paramArray[i]) {
                      action1 = prev;
                      prev = Sequence._actionOneTwo(action1, paramArray[i]);
                    }
                  }

                  _this2.initWithTwoActions(prev, paramArray[last]);
                }

                return _this2;
              }

              var _proto2 = Sequence.prototype;

              _proto2.initWithTwoActions = function initWithTwoActions(actionOne, actionTwo) {
                if (!actionOne || !actionTwo) {
                  errorID(1025);
                  return false;
                }

                var durationOne = actionOne._duration;
                var durationTwo = actionTwo._duration;
                durationOne *= actionOne._repeatMethod ? actionOne._timesForRepeat : 1;
                durationTwo *= actionTwo._repeatMethod ? actionTwo._timesForRepeat : 1;
                var d = durationOne + durationTwo;
                this.initWithDuration(d);
                this._actions[0] = actionOne;
                this._actions[1] = actionTwo;
                return true;
              };

              _proto2.clone = function clone() {
                var action = new Sequence();

                this._cloneDecoration(action);

                action.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
                return action;
              };

              _proto2.startWithTarget = function startWithTarget(target) {
                ActionInterval.prototype.startWithTarget.call(this, target);
                this._split = this._actions[0]._duration / this._duration;
                this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
                this._last = -1;
              };

              _proto2.stop = function stop() {
                if (this._last !== -1) this._actions[this._last].stop();
                Action.prototype.stop.call(this);
              };

              _proto2.update = function update(dt) {
                var new_t;
                var found = 0;
                var locSplit = this._split;
                var locActions = this._actions;
                var locLast = this._last;
                var actionFound;
                dt = this._computeEaseTime(dt);

                if (dt < locSplit) {
                  new_t = locSplit !== 0 ? dt / locSplit : 1;

                  if (found === 0 && locLast === 1 && this._reversed) {
                    locActions[1].update(0);
                    locActions[1].stop();
                  }
                } else {
                  found = 1;
                  new_t = locSplit === 1 ? 1 : (dt - locSplit) / (1 - locSplit);

                  if (locLast === -1) {
                    locActions[0].startWithTarget(this.target);
                    locActions[0].update(1);
                    locActions[0].stop();
                  }

                  if (locLast === 0) {
                    locActions[0].update(1);
                    locActions[0].stop();
                  }
                }

                actionFound = locActions[found];
                if (locLast === found && actionFound.isDone()) return;
                if (locLast !== found) actionFound.startWithTarget(this.target);
                new_t *= actionFound._timesForRepeat;
                actionFound.update(new_t > 1 ? new_t % 1 : new_t);
                this._last = found;
              };

              _proto2.reverse = function reverse() {
                var action = Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());

                this._cloneDecoration(action);

                this._reverseEaseList(action);

                action._reversed = true;
                return action;
              };

              return Sequence;
            }(ActionInterval);

            Sequence._actionOneTwo = function (actionOne, actionTwo) {
              var sequence = new Sequence();
              sequence.initWithTwoActions(actionOne, actionTwo);
              return sequence;
            };

            function sequence(tempArray) {
              var paramArray = tempArray instanceof Array ? tempArray : arguments;

              if (paramArray.length === 1) {
                errorID(1019);
                return null;
              }

              var last = paramArray.length - 1;
              if (last >= 0 && paramArray[last] == null) logID(1015);
              var result = null;

              if (last >= 0) {
                result = paramArray[0];

                for (var i = 1; i <= last; i++) {
                  if (paramArray[i]) {
                    result = Sequence._actionOneTwo(result, paramArray[i]);
                  }
                }
              }

              return result;
            }
            var Repeat = function (_ActionInterval2) {
              _inheritsLoose(Repeat, _ActionInterval2);

              function Repeat(action, times) {
                var _this3;

                _this3 = _ActionInterval2.call(this) || this;
                _this3._times = 0;
                _this3._total = 0;
                _this3._nextDt = 0;
                _this3._actionInstant = false;
                _this3._innerAction = null;
                times !== undefined && _this3.initWithAction(action, times);
                return _this3;
              }

              var _proto3 = Repeat.prototype;

              _proto3.initWithAction = function initWithAction(action, times) {
                var duration = action._duration * times;

                if (this.initWithDuration(duration)) {
                  this._times = times;
                  this._innerAction = action;

                  if (action instanceof ActionInstant) {
                    this._actionInstant = true;
                    this._times -= 1;
                  }

                  this._total = 0;
                  return true;
                }

                return false;
              };

              _proto3.clone = function clone() {
                var action = new Repeat();

                this._cloneDecoration(action);

                action.initWithAction(this._innerAction.clone(), this._times);
                return action;
              };

              _proto3.startWithTarget = function startWithTarget(target) {
                this._total = 0;
                this._nextDt = this._innerAction._duration / this._duration;
                ActionInterval.prototype.startWithTarget.call(this, target);

                this._innerAction.startWithTarget(target);
              };

              _proto3.stop = function stop() {
                this._innerAction.stop();

                Action.prototype.stop.call(this);
              };

              _proto3.update = function update(dt) {
                dt = this._computeEaseTime(dt);
                var locInnerAction = this._innerAction;
                var locDuration = this._duration;
                var locTimes = this._times;
                var locNextDt = this._nextDt;

                if (dt >= locNextDt) {
                  while (dt > locNextDt && this._total < locTimes) {
                    locInnerAction.update(1);
                    this._total++;
                    locInnerAction.stop();
                    locInnerAction.startWithTarget(this.target);
                    locNextDt += locInnerAction._duration / locDuration;
                    this._nextDt = locNextDt > 1 ? 1 : locNextDt;
                  }

                  if (dt >= 1.0 && this._total < locTimes) {
                    locInnerAction.update(1);
                    this._total++;
                  }

                  if (!this._actionInstant) {
                    if (this._total === locTimes) {
                      locInnerAction.stop();
                    } else {
                      locInnerAction.update(dt - (locNextDt - locInnerAction._duration / locDuration));
                    }
                  }
                } else {
                  locInnerAction.update(dt * locTimes % 1.0);
                }
              };

              _proto3.isDone = function isDone() {
                return this._total === this._times;
              };

              _proto3.reverse = function reverse() {
                var action = new Repeat(this._innerAction.reverse(), this._times);

                this._cloneDecoration(action);

                this._reverseEaseList(action);

                return action;
              };

              _proto3.setInnerAction = function setInnerAction(action) {
                if (this._innerAction !== action) {
                  this._innerAction = action;
                }
              };

              _proto3.getInnerAction = function getInnerAction() {
                return this._innerAction;
              };

              return Repeat;
            }(ActionInterval);
            function repeat$1(action, times) {
              return new Repeat(action, times);
            }
            var RepeatForever = function (_ActionInterval3) {
              _inheritsLoose(RepeatForever, _ActionInterval3);

              function RepeatForever(action) {
                var _this4;

                _this4 = _ActionInterval3.call(this) || this;
                _this4._innerAction = null;
                action && _this4.initWithAction(action);
                return _this4;
              }

              var _proto4 = RepeatForever.prototype;

              _proto4.initWithAction = function initWithAction(action) {
                if (!action) {
                  errorID(1026);
                  return false;
                }

                this._innerAction = action;
                return true;
              };

              _proto4.clone = function clone() {
                var action = new RepeatForever();

                this._cloneDecoration(action);

                action.initWithAction(this._innerAction.clone());
                return action;
              };

              _proto4.startWithTarget = function startWithTarget(target) {
                ActionInterval.prototype.startWithTarget.call(this, target);

                this._innerAction.startWithTarget(target);
              };

              _proto4.step = function step(dt) {
                var locInnerAction = this._innerAction;
                locInnerAction.step(dt);

                if (locInnerAction.isDone()) {
                  locInnerAction.startWithTarget(this.target);
                  locInnerAction.step(locInnerAction.getElapsed() - locInnerAction._duration);
                }
              };

              _proto4.isDone = function isDone() {
                return false;
              };

              _proto4.reverse = function reverse() {
                var action = new RepeatForever(this._innerAction.reverse());

                this._cloneDecoration(action);

                this._reverseEaseList(action);

                return action;
              };

              _proto4.setInnerAction = function setInnerAction(action) {
                if (this._innerAction !== action) {
                  this._innerAction = action;
                }
              };

              _proto4.getInnerAction = function getInnerAction() {
                return this._innerAction;
              };

              return RepeatForever;
            }(ActionInterval);
            function repeatForever(action) {
              return new RepeatForever(action);
            }
            var Spawn = function (_ActionInterval4) {
              _inheritsLoose(Spawn, _ActionInterval4);

              function Spawn(tempArray) {
                var _this5;

                _this5 = _ActionInterval4.call(this) || this;
                _this5._one = null;
                _this5._two = null;
                var paramArray = tempArray instanceof Array ? tempArray : arguments;

                if (paramArray.length === 1) {
                  errorID(1020);
                  return _assertThisInitialized(_this5);
                }

                var last = paramArray.length - 1;
                if (last >= 0 && paramArray[last] == null) logID(1015);

                if (last >= 0) {
                  var prev = paramArray[0];
                  var action1;

                  for (var i = 1; i < last; i++) {
                    if (paramArray[i]) {
                      action1 = prev;
                      prev = Spawn._actionOneTwo(action1, paramArray[i]);
                    }
                  }

                  _this5.initWithTwoActions(prev, paramArray[last]);
                }

                return _this5;
              }

              var _proto5 = Spawn.prototype;

              _proto5.initWithTwoActions = function initWithTwoActions(action1, action2) {
                if (!action1 || !action2) {
                  errorID(1027);
                  return false;
                }

                var ret = false;
                var d1 = action1._duration;
                var d2 = action2._duration;

                if (this.initWithDuration(Math.max(d1, d2))) {
                  this._one = action1;
                  this._two = action2;

                  if (d1 > d2) {
                    this._two = Sequence._actionOneTwo(action2, delayTime(d1 - d2));
                  } else if (d1 < d2) {
                    this._one = Sequence._actionOneTwo(action1, delayTime(d2 - d1));
                  }

                  ret = true;
                }

                return ret;
              };

              _proto5.clone = function clone() {
                var action = new Spawn();

                this._cloneDecoration(action);

                action.initWithTwoActions(this._one.clone(), this._two.clone());
                return action;
              };

              _proto5.startWithTarget = function startWithTarget(target) {
                ActionInterval.prototype.startWithTarget.call(this, target);

                this._one.startWithTarget(target);

                this._two.startWithTarget(target);
              };

              _proto5.stop = function stop() {
                this._one.stop();

                this._two.stop();

                Action.prototype.stop.call(this);
              };

              _proto5.update = function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this._one) this._one.update(dt);
                if (this._two) this._two.update(dt);
              };

              _proto5.reverse = function reverse() {
                var action = Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());

                this._cloneDecoration(action);

                this._reverseEaseList(action);

                return action;
              };

              return Spawn;
            }(ActionInterval);

            Spawn._actionOneTwo = function (action1, action2) {
              var pSpawn = new Spawn();
              pSpawn.initWithTwoActions(action1, action2);
              return pSpawn;
            };

            function spawn(tempArray) {
              var paramArray = tempArray instanceof Array ? tempArray : arguments;

              if (paramArray.length === 1) {
                errorID(1020);
                return null;
              }

              if (paramArray.length > 0 && paramArray[paramArray.length - 1] == null) logID(1015);
              var prev = paramArray[0];

              for (var i = 1; i < paramArray.length; i++) {
                if (paramArray[i] != null) prev = Spawn._actionOneTwo(prev, paramArray[i]);
              }

              return prev;
            }

            var DelayTime = function (_ActionInterval5) {
              _inheritsLoose(DelayTime, _ActionInterval5);

              function DelayTime() {
                return _ActionInterval5.apply(this, arguments) || this;
              }

              var _proto6 = DelayTime.prototype;

              _proto6.update = function update(dt) {};

              _proto6.reverse = function reverse() {
                var action = new DelayTime(this._duration);

                this._cloneDecoration(action);

                this._reverseEaseList(action);

                return action;
              };

              _proto6.clone = function clone() {
                var action = new DelayTime();

                this._cloneDecoration(action);

                action.initWithDuration(this._duration);
                return action;
              };

              return DelayTime;
            }(ActionInterval);

            function delayTime(d) {
              return new DelayTime(d);
            }
            var ReverseTime = function (_ActionInterval6) {
              _inheritsLoose(ReverseTime, _ActionInterval6);

              function ReverseTime(action) {
                var _this6;

                _this6 = _ActionInterval6.call(this) || this;
                _this6._other = null;
                action && _this6.initWithAction(action);
                return _this6;
              }

              var _proto7 = ReverseTime.prototype;

              _proto7.initWithAction = function initWithAction(action) {
                if (!action) {
                  errorID(1028);
                  return false;
                }

                if (action === this._other) {
                  errorID(1029);
                  return false;
                }

                if (ActionInterval.prototype.initWithDuration.call(this, action._duration)) {
                  this._other = action;
                  return true;
                }

                return false;
              };

              _proto7.clone = function clone() {
                var action = new ReverseTime();

                this._cloneDecoration(action);

                action.initWithAction(this._other.clone());
                return action;
              };

              _proto7.startWithTarget = function startWithTarget(target) {
                ActionInterval.prototype.startWithTarget.call(this, target);

                this._other.startWithTarget(target);
              };

              _proto7.update = function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this._other) this._other.update(1 - dt);
              };

              _proto7.reverse = function reverse() {
                return this._other.clone();
              };

              _proto7.stop = function stop() {
                this._other.stop();

                Action.prototype.stop.call(this);
              };

              return ReverseTime;
            }(ActionInterval);
            function reverseTime(action) {
              return new ReverseTime(action);
            }

            function TweenEasingAdapter(easingName) {
              var initialChar = easingName.charAt(0);

              if (/[A-Z]/.test(initialChar)) {
                easingName = easingName.replace(initialChar, initialChar.toLowerCase());
                var arr = easingName.split('-');

                if (arr.length === 2) {
                  var str0 = arr[0];

                  if (str0 === 'linear') {
                    easingName = 'linear';
                  } else {
                    var str1 = arr[1];

                    switch (str0) {
                      case 'quadratic':
                        easingName = "quad" + str1;
                        break;

                      case 'quartic':
                        easingName = "quart" + str1;
                        break;

                      case 'quintic':
                        easingName = "quint" + str1;
                        break;

                      case 'sinusoidal':
                        easingName = "sine" + str1;
                        break;

                      case 'exponential':
                        easingName = "expo" + str1;
                        break;

                      case 'circular':
                        easingName = "circ" + str1;
                        break;

                      default:
                        easingName = str0 + str1;
                        break;
                    }
                  }
                }
              }

              return easingName;
            }

            function TweenOptionChecker(opts) {
              var header = ' [Tween:] ';
              var message = " option is not support in v + " + engineVersion;
              var _opts = opts;

              if (_opts.delay) {
                warn(header + "delay" + message);
              }

              if (_opts.repeat) {
                warn(header + "repeat" + message);
              }

              if (_opts.repeatDelay) {
                warn(header + "repeatDelay" + message);
              }

              if (_opts.interpolation) {
                warn(header + "interpolation" + message);
              }

              if (_opts.onStop) {
                warn(header + "onStop" + message);
              }
            }

            var TweenAction = exports('TweenAction', function (_ActionInterval) {
              _inheritsLoose(TweenAction, _ActionInterval);

              function TweenAction(duration, props, opts) {
                var _this;

                _this = _ActionInterval.call(this) || this;
                _this._opts = void 0;
                _this._props = void 0;
                _this._originProps = void 0;

                if (opts == null) {
                  opts = Object.create(null);
                } else {
                  TweenOptionChecker(opts);

                  if (opts.easing && typeof opts.easing === 'string') {
                    opts.easing = TweenEasingAdapter(opts.easing);
                  }

                  if (!opts.progress) {
                    opts.progress = _this.progress;
                  }

                  if (opts.easing && typeof opts.easing === 'string') {
                    var easingName = opts.easing;
                    opts.easing = easing[easingName];

                    if (!opts.easing) {
                      warnID(1031, easingName);
                    }
                  }
                }

                _this._opts = opts;
                _this._props = Object.create(null);

                for (var name in props) {
                  if (!props.hasOwnProperty(name)) continue;
                  var value = props[name];

                  if (typeof value === 'function') {
                    value = value();
                  }

                  if (value == null || typeof value === 'string') continue;
                  var customEasing = void 0;
                  var progress = void 0;

                  if (value.value !== undefined && (value.easing || value.progress)) {
                    if (typeof value.easing === 'string') {
                      customEasing = easing[value.easing];
                      if (!customEasing) warnID(1031, value.easing);
                    } else {
                      customEasing = value.easing;
                    }

                    progress = value.progress;
                    value = value.value;
                  }

                  var prop = Object.create(null);
                  prop.value = value;
                  prop.easing = customEasing;
                  prop.progress = progress;
                  _this._props[name] = prop;
                }

                _this._originProps = props;

                _this.initWithDuration(duration);

                return _this;
              }

              var _proto = TweenAction.prototype;

              _proto.clone = function clone() {
                var action = new TweenAction(this._duration, this._originProps, this._opts);

                this._cloneDecoration(action);

                return action;
              };

              _proto.startWithTarget = function startWithTarget(target) {
                ActionInterval.prototype.startWithTarget.call(this, target);
                var relative = !!this._opts.relative;
                var props = this._props;

                for (var property in props) {
                  var _t = target[property];

                  if (_t === undefined) {
                    continue;
                  }

                  var prop = props[property];
                  var value = prop.value;

                  if (typeof _t === 'number') {
                    prop.start = _t;
                    prop.current = _t;
                    prop.end = relative ? _t + value : value;
                  } else if (typeof _t === 'object') {
                    if (prop.start == null) {
                      prop.start = {};
                      prop.current = {};
                      prop.end = {};
                    }

                    for (var k in value) {
                      if (isNaN(_t[k])) continue;
                      prop.start[k] = _t[k];
                      prop.current[k] = _t[k];
                      prop.end[k] = relative ? _t[k] + value[k] : value[k];
                    }
                  }
                }

                if (this._opts.onStart) {
                  this._opts.onStart(this.target);
                }
              };

              _proto.update = function update(t) {
                var target = this.target;
                if (!target) return;
                var props = this._props;
                var opts = this._opts;
                var easingTime = t;
                if (opts.easing) easingTime = opts.easing(t);
                var progress = opts.progress;

                for (var name in props) {
                  var prop = props[name];
                  var time = prop.easing ? prop.easing(t) : easingTime;
                  var interpolation = prop.progress ? prop.progress : progress;
                  var start = prop.start;
                  var end = prop.end;

                  if (typeof start === 'number') {
                    prop.current = interpolation(start, end, prop.current, time);
                  } else if (typeof start === 'object') {
                    for (var k in start) {
                      prop.current[k] = interpolation(start[k], end[k], prop.current[k], time);
                    }
                  }

                  target[name] = prop.current;
                }

                if (opts.onUpdate) {
                  opts.onUpdate(this.target, t);
                }

                if (t === 1 && opts.onComplete) {
                  opts.onComplete(this.target);
                }
              };

              _proto.progress = function progress(start, end, current, t) {
                return current = start + (end - start) * t;
              };

              return TweenAction;
            }(ActionInterval));

            var SetAction = function (_ActionInstant) {
              _inheritsLoose(SetAction, _ActionInstant);

              function SetAction(props) {
                var _this;

                _this = _ActionInstant.call(this) || this;
                _this._props = void 0;
                _this._props = {};
                props !== undefined && _this.init(props);
                return _this;
              }

              var _proto = SetAction.prototype;

              _proto.init = function init(props) {
                for (var name in props) {
                  this._props[name] = props[name];
                }

                return true;
              };

              _proto.update = function update() {
                var props = this._props;
                var target = this.target;

                for (var name in props) {
                  target[name] = props[name];
                }
              };

              _proto.clone = function clone() {
                var action = new SetAction();
                action.init(this._props);
                return action;
              };

              return SetAction;
            }(ActionInstant);

            var Tween = exports('Tween', function () {
              function Tween(target) {
                this._actions = [];
                this._finalAction = null;
                this._target = null;
                this._tag = Action.TAG_INVALID;
                this._target = target === undefined ? null : target;
              }

              var _proto = Tween.prototype;

              _proto.tag = function tag(_tag) {
                this._tag = _tag;
                return this;
              };

              _proto.then = function then(other) {
                if (other instanceof Action) {
                  this._actions.push(other.clone());
                } else {
                  this._actions.push(other._union());
                }

                return this;
              };

              _proto.target = function target(_target) {
                this._target = _target;
                return this;
              };

              _proto.start = function start() {
                if (!this._target) {
                  warn('Please set target to tween first');
                  return this;
                }

                if (this._finalAction) {
                  TweenSystem.instance.ActionManager.removeAction(this._finalAction);
                }

                this._finalAction = this._union();

                this._finalAction.setTag(this._tag);

                TweenSystem.instance.ActionManager.addAction(this._finalAction, this._target, false);
                return this;
              };

              _proto.stop = function stop() {
                if (this._finalAction) {
                  TweenSystem.instance.ActionManager.removeAction(this._finalAction);
                }

                return this;
              };

              _proto.clone = function clone(target) {
                var action = this._union();

                return tween(target).then(action.clone());
              };

              _proto.union = function union() {
                var action = this._union();

                this._actions.length = 0;

                this._actions.push(action);

                return this;
              };

              _proto.to = function to(duration, props, opts) {
                opts = opts || Object.create(null);
                opts.relative = false;
                var action = new TweenAction(duration, props, opts);

                this._actions.push(action);

                return this;
              };

              _proto.by = function by(duration, props, opts) {
                opts = opts || Object.create(null);
                opts.relative = true;
                var action = new TweenAction(duration, props, opts);

                this._actions.push(action);

                return this;
              };

              _proto.set = function set(props) {
                var action = new SetAction(props);

                this._actions.push(action);

                return this;
              };

              _proto.delay = function delay(duration) {
                var action = delayTime(duration);

                this._actions.push(action);

                return this;
              };

              _proto.call = function call(callback) {
                var action = callFunc(callback);

                this._actions.push(action);

                return this;
              };

              _proto.sequence = function sequence() {
                var action = Tween._wrappedSequence.apply(Tween, arguments);

                this._actions.push(action);

                return this;
              };

              _proto.parallel = function parallel() {
                var action = Tween._wrappedParallel.apply(Tween, arguments);

                this._actions.push(action);

                return this;
              };

              _proto.repeat = function repeat(repeatTimes, embedTween) {
                if (repeatTimes === Infinity) {
                  return this.repeatForever(embedTween);
                }

                var actions = this._actions;
                var action;

                if (embedTween instanceof Tween) {
                  action = embedTween._union();
                } else {
                  action = actions.pop();
                }

                actions.push(repeat$1(action, repeatTimes));
                return this;
              };

              _proto.repeatForever = function repeatForever$1(embedTween) {
                var actions = this._actions;
                var action;

                if (embedTween instanceof Tween) {
                  action = embedTween._union();
                } else {
                  action = actions.pop();
                }

                actions.push(repeatForever(action));
                return this;
              };

              _proto.reverseTime = function reverseTime$1(embedTween) {
                var actions = this._actions;
                var action;

                if (embedTween instanceof Tween) {
                  action = embedTween._union();
                } else {
                  action = actions.pop();
                }

                actions.push(reverseTime(action));
                return this;
              };

              _proto.hide = function hide$1() {
                var action = hide();

                this._actions.push(action);

                return this;
              };

              _proto.show = function show$1() {
                var action = show();

                this._actions.push(action);

                return this;
              };

              _proto.removeSelf = function removeSelf$1() {
                var action = removeSelf(false);

                this._actions.push(action);

                return this;
              };

              Tween.stopAll = function stopAll() {
                TweenSystem.instance.ActionManager.removeAllActions();
              };

              Tween.stopAllByTag = function stopAllByTag(tag, target) {
                TweenSystem.instance.ActionManager.removeAllActionsByTag(tag, target);
              };

              Tween.stopAllByTarget = function stopAllByTarget(target) {
                TweenSystem.instance.ActionManager.removeAllActionsFromTarget(target);
              };

              _proto._union = function _union() {
                var actions = this._actions;
                var action;

                if (actions.length === 1) {
                  action = actions[0];
                } else {
                  action = sequence(actions);
                }

                return action;
              };

              _proto._destroy = function _destroy() {
                this.stop();
              };

              Tween._wrappedSequence = function _wrappedSequence() {
                var tmp_args = Tween._tmp_args;
                tmp_args.length = 0;

                for (var l = arguments.length, i = 0; i < l; i++) {
                  var arg = tmp_args[i] = i < 0 || arguments.length <= i ? undefined : arguments[i];

                  if (arg instanceof Tween) {
                    tmp_args[i] = arg._union();
                  }
                }

                return sequence.apply(sequence, tmp_args);
              };

              Tween._wrappedParallel = function _wrappedParallel() {
                var tmp_args = Tween._tmp_args;
                tmp_args.length = 0;

                for (var l = arguments.length, i = 0; i < l; i++) {
                  var arg = tmp_args[i] = i < 0 || arguments.length <= i ? undefined : arguments[i];

                  if (arg instanceof Tween) {
                    tmp_args[i] = arg._union();
                  }
                }

                return spawn.apply(spawn, tmp_args);
              };

              return Tween;
            }());
            Tween._tmp_args = [];
            legacyCC.Tween = Tween;
            function tween(target) {
              return new Tween(target);
            }
            legacyCC.tween = tween;
            function tweenUtil(target) {
              warn('tweenUtil\' is deprecated, please use \'tween\' instead ');
              return new Tween(target);
            }
            legacyCC.tweenUtil = tweenUtil;

            var _dec$1u, _dec2$1c, _dec3$P, _dec4$K, _dec5$E, _dec6$B, _dec7$A, _dec8$y, _dec9$u, _dec10$s, _dec11$n, _dec12$n, _dec13$n, _dec14$l, _dec15$l, _dec16$k, _dec17$i, _dec18$h, _dec19$h, _dec20$g, _dec21$f, _dec22$d, _dec23$c, _dec24$b, _dec25$b, _dec26$a, _dec27$a, _dec28$9, _dec29$8, _dec30$7, _dec31$7, _dec32$7, _dec33$5, _dec34$5, _dec35$5, _dec36$5, _dec37$5, _dec38$5, _dec39$5, _dec40$5, _dec41$5, _dec42$5, _class$1x, _class2$1l, _descriptor$1h, _descriptor2$16, _descriptor3$T, _descriptor4$N, _descriptor5$E, _descriptor6$y, _descriptor7$o, _descriptor8$l, _descriptor9$h, _descriptor10$f, _descriptor11$d, _descriptor12$d, _descriptor13$c, _descriptor14$6, _class3$i, _temp$1q;

            var _tempColor = new Color$1();

            var Transition$1;

            (function (Transition) {
              Transition[Transition["NONE"] = 0] = "NONE";
              Transition[Transition["COLOR"] = 1] = "COLOR";
              Transition[Transition["SPRITE"] = 2] = "SPRITE";
              Transition[Transition["SCALE"] = 3] = "SCALE";
            })(Transition$1 || (Transition$1 = {}));

            ccenum(Transition$1);
            var State$1;

            (function (State) {
              State["NORMAL"] = "normal";
              State["HOVER"] = "hover";
              State["PRESSED"] = "pressed";
              State["DISABLED"] = "disabled";
            })(State$1 || (State$1 = {}));

            var EventType$2;

            (function (EventType) {
              EventType["CLICK"] = "click";
            })(EventType$2 || (EventType$2 = {}));

            var Button = function (v) { return exports({ Button: v, ButtonComponent: v }), v; }((_dec$1u = ccclass('cc.Button'), _dec2$1c = help(), _dec3$P = executionOrder(110), _dec4$K = menu$1(), _dec5$E = requireComponent(UITransform), _dec6$B = type$1(Node), _dec7$A = displayOrder(), _dec8$y = tooltip(), _dec9$u = displayOrder(), _dec10$s = tooltip(), _dec11$n = type$1(Transition$1), _dec12$n = displayOrder(), _dec13$n = tooltip(), _dec14$l = displayOrder(), _dec15$l = tooltip(), _dec16$k = displayOrder(), _dec17$i = tooltip(), _dec18$h = displayOrder(), _dec19$h = tooltip(), _dec20$g = displayOrder(), _dec21$f = tooltip(), _dec22$d = rangeMin(), _dec23$c = rangeMax(), _dec24$b = displayOrder(), _dec25$b = tooltip(), _dec26$a = displayOrder(), _dec27$a = tooltip(), _dec28$9 = type$1(SpriteFrame), _dec29$8 = displayOrder(), _dec30$7 = tooltip(), _dec31$7 = type$1(SpriteFrame), _dec32$7 = displayOrder(), _dec33$5 = tooltip(), _dec34$5 = type$1(SpriteFrame), _dec35$5 = displayOrder(), _dec36$5 = tooltip(), _dec37$5 = type$1(SpriteFrame), _dec38$5 = displayOrder(), _dec39$5 = tooltip(), _dec40$5 = type$1([EventHandler]), _dec41$5 = displayOrder(), _dec42$5 = tooltip(), _dec$1u(_class$1x = _dec2$1c(_class$1x = _dec3$P(_class$1x = _dec4$K(_class$1x = _dec5$E(_class$1x = executeInEditMode(_class$1x = (_class2$1l = (_temp$1q = _class3$i = function (_Component) {
              _inheritsLoose(Button, _Component);

              function Button() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "clickEvents", _descriptor$1h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_interactable", _descriptor2$16, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_transition", _descriptor3$T, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_normalColor", _descriptor4$N, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_hoverColor", _descriptor5$E, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_pressedColor", _descriptor6$y, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_disabledColor", _descriptor7$o, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_normalSprite", _descriptor8$l, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_hoverSprite", _descriptor9$h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_pressedSprite", _descriptor10$f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_disabledSprite", _descriptor11$d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_duration", _descriptor12$d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_zoomScale", _descriptor13$c, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_target", _descriptor14$6, _assertThisInitialized(_this));

                _this._pressed = false;
                _this._hovered = false;
                _this._fromColor = new Color$1();
                _this._toColor = new Color$1();
                _this._time = 0;
                _this._transitionFinished = true;
                _this._fromScale = new Vec3();
                _this._toScale = new Vec3();
                _this._originalScale = null;
                _this._sprite = null;
                _this._targetScale = new Vec3();
                return _this;
              }

              var _proto = Button.prototype;

              _proto.__preload = function __preload() {
                if (!this.target) {
                  this.target = this.node;
                }

                var sprite = this.node.getComponent(Sprite);

                if (sprite) {
                  this._normalSprite = sprite.spriteFrame;
                }

                this._applyTarget();

                this._resetState();
              };

              _proto.onEnable = function onEnable() {

                {
                  this._registerNodeEvent();
                }
              };

              _proto.onDisable = function onDisable() {
                this._resetState();

                {
                  this._unregisterNodeEvent();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this.target.isValid) {
                  this._unregisterTargetEvent(this.target);
                }
              };

              _proto.update = function update(dt) {
                var target = this.target;

                if (this._transitionFinished || !target) {
                  return;
                }

                if (this._transition !== Transition$1.COLOR && this._transition !== Transition$1.SCALE) {
                  return;
                }

                this._time += dt;
                var ratio = 1.0;

                if (this._duration > 0) {
                  ratio = this._time / this._duration;
                }

                if (ratio >= 1) {
                  ratio = 1;
                }

                if (this._transition === Transition$1.COLOR) {
                  var renderComp = target._uiProps.uiComp;
                  Color$1.lerp(_tempColor, this._fromColor, this._toColor, ratio);

                  if (renderComp) {
                    renderComp.color = _tempColor;
                  }
                } else if (this.transition === Transition$1.SCALE) {
                  target.getScale(this._targetScale);
                  this._targetScale.x = lerp(this._fromScale.x, this._toScale.x, ratio);
                  this._targetScale.y = lerp(this._fromScale.y, this._toScale.y, ratio);
                  target.setScale(this._targetScale);
                }

                if (ratio === 1) {
                  this._transitionFinished = true;
                }
              };

              _proto._resizeNodeToTargetNode = function _resizeNodeToTargetNode() {
                if (!this.target) {
                  return;
                }

                var targetTrans = this.target._uiProps.uiTransformComp;
              };

              _proto._resetState = function _resetState() {
                this._pressed = false;
                this._hovered = false;
                var target = this.target;

                if (!target) {
                  return;
                }

                var transition = this._transition;

                if (transition === Transition$1.COLOR && this._interactable) {
                  var renderComp = target.getComponent(Renderable2D);

                  if (renderComp) {
                    renderComp.color = this._normalColor;
                  }
                } else if (transition === Transition$1.SCALE && this._originalScale) {
                  target.setScale(this._originalScale);
                }

                this._transitionFinished = true;
              };

              _proto._registerNodeEvent = function _registerNodeEvent() {
                this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMove, this);
                this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(NodeEventType.TOUCH_CANCEL, this._onTouchCancel, this);
                this.node.on(NodeEventType.MOUSE_ENTER, this._onMouseMoveIn, this);
                this.node.on(NodeEventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
              };

              _proto._registerTargetEvent = function _registerTargetEvent(target) {

                target.on(NodeEventType.TRANSFORM_CHANGED, this._onTargetTransformChanged, this);
              };

              _proto._unregisterNodeEvent = function _unregisterNodeEvent() {
                this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this);
                this.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMove, this);
                this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(NodeEventType.TOUCH_CANCEL, this._onTouchCancel, this);
                this.node.off(NodeEventType.MOUSE_ENTER, this._onMouseMoveIn, this);
                this.node.off(NodeEventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
              };

              _proto._unregisterTargetEvent = function _unregisterTargetEvent(target) {

                target.off(NodeEventType.TRANSFORM_CHANGED);
              };

              _proto._getTargetSprite = function _getTargetSprite(target) {
                var sprite = null;

                if (target) {
                  sprite = target.getComponent(Sprite);
                }

                return sprite;
              };

              _proto._applyTarget = function _applyTarget() {
                if (this.target) {
                  this._sprite = this._getTargetSprite(this.target);

                  if (!this._originalScale) {
                    this._originalScale = new Vec3();
                  }

                  Vec3.copy(this._originalScale, this.target.getScale());

                  this._registerTargetEvent(this.target);
                }
              };

              _proto._onTargetSpriteFrameChanged = function _onTargetSpriteFrameChanged(comp) {
                if (this._transition === Transition$1.SPRITE) {
                  this._setCurrentStateSpriteFrame(comp.spriteFrame);
                }
              };

              _proto._setCurrentStateSpriteFrame = function _setCurrentStateSpriteFrame(spriteFrame) {
                if (!spriteFrame) {
                  return;
                }

                switch (this._getButtonState()) {
                  case State$1.NORMAL:
                    this._normalSprite = spriteFrame;
                    break;

                  case State$1.HOVER:
                    this._hoverSprite = spriteFrame;
                    break;

                  case State$1.PRESSED:
                    this._pressedSprite = spriteFrame;
                    break;

                  case State$1.DISABLED:
                    this._disabledSprite = spriteFrame;
                    break;
                }
              };

              _proto._onTargetColorChanged = function _onTargetColorChanged(color) {
                if (this._transition === Transition$1.COLOR) {
                  this._setCurrentStateColor(color);
                }
              };

              _proto._setCurrentStateColor = function _setCurrentStateColor(color) {
                switch (this._getButtonState()) {
                  case State$1.NORMAL:
                    this._normalColor = color;
                    break;

                  case State$1.HOVER:
                    this._hoverColor = color;
                    break;

                  case State$1.PRESSED:
                    this._pressedColor = color;
                    break;

                  case State$1.DISABLED:
                    this._disabledColor = color;
                    break;
                }
              };

              _proto._onTargetTransformChanged = function _onTargetTransformChanged(transformBit) {
                if (transformBit & TransformBit.SCALE && this._originalScale && this._transition === Transition$1.SCALE && this._transitionFinished) {
                  Vec3.copy(this._originalScale, this.target.getScale());
                }
              };

              _proto._onTouchBegan = function _onTouchBegan(event) {
                if (!this._interactable || !this.enabledInHierarchy) {
                  return;
                }

                this._pressed = true;

                this._updateState();

                if (event) {
                  event.propagationStopped = true;
                }
              };

              _proto._onTouchMove = function _onTouchMove(event) {
                if (!this._interactable || !this.enabledInHierarchy || !this._pressed) {
                  return;
                }

                if (!event) {
                  return;
                }

                var touch = event.touch;

                if (!touch) {
                  return;
                }

                var hit = this.node._uiProps.uiTransformComp.hitTest(touch.getLocation());

                if (this._transition === Transition$1.SCALE && this.target && this._originalScale) {
                  if (hit) {
                    Vec3.copy(this._fromScale, this._originalScale);
                    Vec3.multiplyScalar(this._toScale, this._originalScale, this._zoomScale);
                    this._transitionFinished = false;
                  } else {
                    this._time = 0;
                    this._transitionFinished = true;
                    this.target.setScale(this._originalScale);
                  }
                } else {
                  var state;

                  if (hit) {
                    state = State$1.PRESSED;
                  } else {
                    state = State$1.NORMAL;
                  }

                  this._applyTransition(state);
                }

                if (event) {
                  event.propagationStopped = true;
                }
              };

              _proto._onTouchEnded = function _onTouchEnded(event) {
                if (!this._interactable || !this.enabledInHierarchy) {
                  return;
                }

                if (this._pressed) {
                  EventHandler.emitEvents(this.clickEvents, event);
                  this.node.emit(EventType$2.CLICK, this);
                }

                this._pressed = false;

                this._updateState();

                if (event) {
                  event.propagationStopped = true;
                }
              };

              _proto._onTouchCancel = function _onTouchCancel(event) {
                if (!this._interactable || !this.enabledInHierarchy) {
                  return;
                }

                this._pressed = false;

                this._updateState();
              };

              _proto._onMouseMoveIn = function _onMouseMoveIn(event) {
                if (this._pressed || !this.interactable || !this.enabledInHierarchy) {
                  return;
                }

                if (this._transition === Transition$1.SPRITE && !this._hoverSprite) {
                  return;
                }

                if (!this._hovered) {
                  this._hovered = true;

                  this._updateState();
                }
              };

              _proto._onMouseMoveOut = function _onMouseMoveOut(event) {
                if (this._hovered) {
                  this._hovered = false;

                  this._updateState();
                }
              };

              _proto._updateState = function _updateState() {
                var state = this._getButtonState();

                this._applyTransition(state);
              };

              _proto._getButtonState = function _getButtonState() {
                var state = State$1.NORMAL;

                if (!this._interactable) {
                  state = State$1.DISABLED;
                } else if (this._pressed) {
                  state = State$1.PRESSED;
                } else if (this._hovered) {
                  state = State$1.HOVER;
                }

                return state.toString();
              };

              _proto._updateColorTransition = function _updateColorTransition(state) {
                var _this$target;

                var color = this[state + "Color"];
                var renderComp = (_this$target = this.target) === null || _this$target === void 0 ? void 0 : _this$target.getComponent(Renderable2D);

                if (!renderComp) {
                  return;
                }

                if ( state === State$1.DISABLED) {
                  renderComp.color = color;
                } else {
                  this._fromColor = renderComp.color.clone();
                  this._toColor = color;
                  this._time = 0;
                  this._transitionFinished = false;
                }
              };

              _proto._updateSpriteTransition = function _updateSpriteTransition(state) {
                var sprite = this[state + "Sprite"];

                if (this._sprite && sprite) {
                  this._sprite.spriteFrame = sprite;
                }
              };

              _proto._updateScaleTransition = function _updateScaleTransition(state) {
                if (!this._interactable) {
                  return;
                }

                if (state === State$1.PRESSED) {
                  this._zoomUp();
                } else {
                  this._zoomBack();
                }
              };

              _proto._zoomUp = function _zoomUp() {
                if (!this._originalScale) {
                  return;
                }

                Vec3.copy(this._fromScale, this._originalScale);
                Vec3.multiplyScalar(this._toScale, this._originalScale, this._zoomScale);
                this._time = 0;
                this._transitionFinished = false;
              };

              _proto._zoomBack = function _zoomBack() {
                if (!this.target || !this._originalScale) {
                  return;
                }

                Vec3.copy(this._fromScale, this.target.getScale());
                Vec3.copy(this._toScale, this._originalScale);
                this._time = 0;
                this._transitionFinished = false;
              };

              _proto._applyTransition = function _applyTransition(state) {
                var transition = this._transition;

                if (transition === Transition$1.COLOR) {
                  this._updateColorTransition(state);
                } else if (transition === Transition$1.SPRITE) {
                  this._updateSpriteTransition(state);
                } else if (transition === Transition$1.SCALE) {
                  this._updateScaleTransition(state);
                }
              };

              _createClass(Button, [{
                key: "target",
                get: function get() {
                  return this._target || this.node;
                },
                set: function set(value) {
                  if (this._target === value) {
                    return;
                  }

                  if (this._target) {
                    this._unregisterTargetEvent(this._target);
                  }

                  this._target = value;

                  this._applyTarget();
                }
              }, {
                key: "interactable",
                get: function get() {
                  return this._interactable;
                },
                set: function set(value) {
                  if (this._interactable === value) {
                    return;
                  }

                  this._interactable = value;

                  this._updateState();

                  if (!this._interactable) {
                    this._resetState();
                  }
                }
              }, {
                key: "_resizeToTarget",
                set: function set(value) {
                  if (value) {
                    this._resizeNodeToTargetNode();
                  }
                }
              }, {
                key: "transition",
                get: function get() {
                  return this._transition;
                },
                set: function set(value) {
                  if (this._transition === value) {
                    return;
                  }

                  if (this._transition === Transition$1.COLOR) {
                    this._updateColorTransition(State$1.NORMAL);
                  } else if (this._transition === Transition$1.SPRITE) {
                    this._updateSpriteTransition(State$1.NORMAL);
                  }

                  this._transition = value;

                  this._updateState();
                }
              }, {
                key: "normalColor",
                get: function get() {
                  return this._normalColor;
                },
                set: function set(value) {
                  if (this._normalColor === value) {
                    return;
                  }

                  this._normalColor.set(value);

                  this._updateState();
                }
              }, {
                key: "pressedColor",
                get: function get() {
                  return this._pressedColor;
                },
                set: function set(value) {
                  if (this._pressedColor === value) {
                    return;
                  }

                  this._pressedColor.set(value);
                }
              }, {
                key: "hoverColor",
                get: function get() {
                  return this._hoverColor;
                },
                set: function set(value) {
                  if (this._hoverColor === value) {
                    return;
                  }

                  this._hoverColor.set(value);
                }
              }, {
                key: "disabledColor",
                get: function get() {
                  return this._disabledColor;
                },
                set: function set(value) {
                  if (this._disabledColor === value) {
                    return;
                  }

                  this._disabledColor.set(value);

                  this._updateState();
                }
              }, {
                key: "duration",
                get: function get() {
                  return this._duration;
                },
                set: function set(value) {
                  if (this._duration === value) {
                    return;
                  }

                  this._duration = value;
                }
              }, {
                key: "zoomScale",
                get: function get() {
                  return this._zoomScale;
                },
                set: function set(value) {
                  if (this._zoomScale === value) {
                    return;
                  }

                  this._zoomScale = value;
                }
              }, {
                key: "normalSprite",
                get: function get() {
                  return this._normalSprite;
                },
                set: function set(value) {
                  if (this._normalSprite === value) {
                    return;
                  }

                  this._normalSprite = value;
                  var sprite = this.node.getComponent(Sprite);

                  if (sprite) {
                    sprite.spriteFrame = value;
                  }

                  this._updateState();
                }
              }, {
                key: "pressedSprite",
                get: function get() {
                  return this._pressedSprite;
                },
                set: function set(value) {
                  if (this._pressedSprite === value) {
                    return;
                  }

                  this._pressedSprite = value;

                  this._updateState();
                }
              }, {
                key: "hoverSprite",
                get: function get() {
                  return this._hoverSprite;
                },
                set: function set(value) {
                  if (this._hoverSprite === value) {
                    return;
                  }

                  this._hoverSprite = value;

                  this._updateState();
                }
              }, {
                key: "disabledSprite",
                get: function get() {
                  return this._disabledSprite;
                },
                set: function set(value) {
                  if (this._disabledSprite === value) {
                    return;
                  }

                  this._disabledSprite = value;

                  this._updateState();
                }
              }]);

              return Button;
            }(Component), _class3$i.Transition = Transition$1, _class3$i.EventType = EventType$2, _temp$1q), (_applyDecoratedDescriptor(_class2$1l.prototype, "target", [_dec6$B, _dec7$A, _dec8$y], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "target"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "interactable", [_dec9$u, _dec10$s], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "interactable"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "transition", [_dec11$n, _dec12$n, _dec13$n], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "transition"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "normalColor", [_dec14$l, _dec15$l], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "normalColor"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "pressedColor", [_dec16$k, _dec17$i], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "pressedColor"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "hoverColor", [_dec18$h, _dec19$h], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "hoverColor"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "disabledColor", [_dec20$g, _dec21$f], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "disabledColor"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "duration", [_dec22$d, _dec23$c, _dec24$b, _dec25$b], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "duration"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "zoomScale", [_dec26$a, _dec27$a], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "zoomScale"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "normalSprite", [_dec28$9, _dec29$8, _dec30$7], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "normalSprite"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "pressedSprite", [_dec31$7, _dec32$7, _dec33$5], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "pressedSprite"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "hoverSprite", [_dec34$5, _dec35$5, _dec36$5], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "hoverSprite"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "disabledSprite", [_dec37$5, _dec38$5, _dec39$5], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "disabledSprite"), _class2$1l.prototype), _descriptor$1h = _applyDecoratedDescriptor(_class2$1l.prototype, "clickEvents", [_dec40$5, serializable, _dec41$5, _dec42$5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor2$16 = _applyDecoratedDescriptor(_class2$1l.prototype, "_interactable", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor3$T = _applyDecoratedDescriptor(_class2$1l.prototype, "_transition", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Transition$1.NONE;
              }
            }), _descriptor4$N = _applyDecoratedDescriptor(_class2$1l.prototype, "_normalColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            }), _descriptor5$E = _applyDecoratedDescriptor(_class2$1l.prototype, "_hoverColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(211, 211, 211, 255);
              }
            }), _descriptor6$y = _applyDecoratedDescriptor(_class2$1l.prototype, "_pressedColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Color$1.WHITE.clone();
              }
            }), _descriptor7$o = _applyDecoratedDescriptor(_class2$1l.prototype, "_disabledColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Color$1(124, 124, 124, 255);
              }
            }), _descriptor8$l = _applyDecoratedDescriptor(_class2$1l.prototype, "_normalSprite", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor9$h = _applyDecoratedDescriptor(_class2$1l.prototype, "_hoverSprite", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor10$f = _applyDecoratedDescriptor(_class2$1l.prototype, "_pressedSprite", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor11$d = _applyDecoratedDescriptor(_class2$1l.prototype, "_disabledSprite", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor12$d = _applyDecoratedDescriptor(_class2$1l.prototype, "_duration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.1;
              }
            }), _descriptor13$c = _applyDecoratedDescriptor(_class2$1l.prototype, "_zoomScale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.2;
              }
            }), _descriptor14$6 = _applyDecoratedDescriptor(_class2$1l.prototype, "_target", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$1l)) || _class$1x) || _class$1x) || _class$1x) || _class$1x) || _class$1x) || _class$1x));
            legacyCC.Button = Button;

            var tabIndexUtil = function () {
              function tabIndexUtil() {}

              tabIndexUtil.add = function add(editBoxImpl) {
                var list = this._tabIndexList;
                var index = list.indexOf(editBoxImpl);

                if (index === -1) {
                  list.push(editBoxImpl);
                }
              };

              tabIndexUtil.remove = function remove(editBoxImpl) {
                var list = this._tabIndexList;
                var index = list.indexOf(editBoxImpl);

                if (index !== -1) {
                  list.splice(index, 1);
                }
              };

              tabIndexUtil.resort = function resort() {
                this._tabIndexList.sort(function (a, b) {
                  return a._delegate.tabIndex - b._delegate.tabIndex;
                });
              };

              tabIndexUtil.next = function next(editBoxImpl) {
                var list = this._tabIndexList;
                var index = list.indexOf(editBoxImpl);
                editBoxImpl.setFocus(false);

                if (index !== -1) {
                  var nextImpl = list[index + 1];

                  if (nextImpl && nextImpl._delegate.tabIndex >= 0) {
                    nextImpl.setFocus(true);
                  }
                }
              };

              return tabIndexUtil;
            }();
            tabIndexUtil._tabIndexList = [];

            var KeyboardReturnType;

            (function (KeyboardReturnType) {
              KeyboardReturnType[KeyboardReturnType["DEFAULT"] = 0] = "DEFAULT";
              KeyboardReturnType[KeyboardReturnType["DONE"] = 1] = "DONE";
              KeyboardReturnType[KeyboardReturnType["SEND"] = 2] = "SEND";
              KeyboardReturnType[KeyboardReturnType["SEARCH"] = 3] = "SEARCH";
              KeyboardReturnType[KeyboardReturnType["GO"] = 4] = "GO";
              KeyboardReturnType[KeyboardReturnType["NEXT"] = 5] = "NEXT";
            })(KeyboardReturnType || (KeyboardReturnType = {}));

            Enum(KeyboardReturnType);
            var InputMode;

            (function (InputMode) {
              InputMode[InputMode["ANY"] = 0] = "ANY";
              InputMode[InputMode["EMAIL_ADDR"] = 1] = "EMAIL_ADDR";
              InputMode[InputMode["NUMERIC"] = 2] = "NUMERIC";
              InputMode[InputMode["PHONE_NUMBER"] = 3] = "PHONE_NUMBER";
              InputMode[InputMode["URL"] = 4] = "URL";
              InputMode[InputMode["DECIMAL"] = 5] = "DECIMAL";
              InputMode[InputMode["SINGLE_LINE"] = 6] = "SINGLE_LINE";
            })(InputMode || (InputMode = {}));

            Enum(InputMode);
            var InputFlag;

            (function (InputFlag) {
              InputFlag[InputFlag["PASSWORD"] = 0] = "PASSWORD";
              InputFlag[InputFlag["SENSITIVE"] = 1] = "SENSITIVE";
              InputFlag[InputFlag["INITIAL_CAPS_WORD"] = 2] = "INITIAL_CAPS_WORD";
              InputFlag[InputFlag["INITIAL_CAPS_SENTENCE"] = 3] = "INITIAL_CAPS_SENTENCE";
              InputFlag[InputFlag["INITIAL_CAPS_ALL_CHARACTERS"] = 4] = "INITIAL_CAPS_ALL_CHARACTERS";
              InputFlag[InputFlag["DEFAULT"] = 5] = "DEFAULT";
            })(InputFlag || (InputFlag = {}));

            Enum(InputFlag);

            var EditBoxImplBase = function () {
              function EditBoxImplBase() {
                this._editing = false;
                this._delegate = null;
              }

              var _proto = EditBoxImplBase.prototype;

              _proto.init = function init(delegate) {};

              _proto.onEnable = function onEnable() {};

              _proto.update = function update() {};

              _proto.onDisable = function onDisable() {
                if (this._editing) {
                  this.endEditing();
                }
              };

              _proto.clear = function clear() {
                this._delegate = null;
              };

              _proto.setTabIndex = function setTabIndex(index) {};

              _proto.setSize = function setSize(width, height) {};

              _proto.setFocus = function setFocus(value) {
                if (value) {
                  this.beginEditing();
                } else {
                  this.endEditing();
                }
              };

              _proto.isFocused = function isFocused() {
                return this._editing;
              };

              _proto.beginEditing = function beginEditing() {};

              _proto.endEditing = function endEditing() {};

              return EditBoxImplBase;
            }();

            var SCROLLY = 40;
            var LEFT_PADDING = 2;
            var DELAY_TIME = 400;

            var _matrix$1 = new Mat4();

            var _matrix_temp = new Mat4();

            var _vec3 = new Vec3();

            var _currentEditBoxImpl = null;
            var _domCount = 0;
            var EditBoxImpl = function (_EditBoxImplBase) {
              _inheritsLoose(EditBoxImpl, _EditBoxImplBase);

              function EditBoxImpl() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _EditBoxImplBase.call.apply(_EditBoxImplBase, [this].concat(args)) || this;
                _this._delegate = null;
                _this._inputMode = -1;
                _this._inputFlag = -1;
                _this._returnType = -1;
                _this.__eventListeners = {};
                _this.__autoResize = false;
                _this.__orientationChanged = void 0;
                _this._edTxt = null;
                _this._isTextArea = false;
                _this._textLabelFont = null;
                _this._textLabelFontSize = null;
                _this._textLabelFontColor = null;
                _this._textLabelAlign = null;
                _this._placeholderLabelFont = null;
                _this._placeholderLabelFontSize = null;
                _this._placeholderLabelFontColor = null;
                _this._placeholderLabelAlign = null;
                _this._placeholderLineHeight = null;
                _this._placeholderStyleSheet = null;
                _this._domId = "EditBoxId_" + ++_domCount;
                return _this;
              }

              var _proto = EditBoxImpl.prototype;

              _proto.init = function init(delegate) {
                if (!delegate) {
                  return;
                }

                this._delegate = delegate;

                if (delegate.inputMode === InputMode.ANY) {
                  this._createTextArea();
                } else {
                  this._createInput();
                }

                tabIndexUtil.add(this);
                this.setTabIndex(delegate.tabIndex);

                this._initStyleSheet();

                this._registerEventListeners();

                this._addDomToGameContainer();
              };

              _proto.clear = function clear() {
                this._removeEventListeners();

                this._removeDomFromGameContainer();

                tabIndexUtil.remove(this);

                if (_currentEditBoxImpl === this) {
                  _currentEditBoxImpl = null;
                }

                this._delegate = null;
              };

              _proto.update = function update() {
                this._updateMatrix();
              };

              _proto.setTabIndex = function setTabIndex(index) {
                this._edTxt.tabIndex = index;
                tabIndexUtil.resort();
              };

              _proto.setSize = function setSize(width, height) {
                var elem = this._edTxt;

                if (elem) {
                  elem.style.width = width + "px";
                  elem.style.height = height + "px";
                }
              };

              _proto.beginEditing = function beginEditing() {
                if (_currentEditBoxImpl && _currentEditBoxImpl !== this) {
                  _currentEditBoxImpl.setFocus(false);
                }

                this._editing = true;
                _currentEditBoxImpl = this;

                this._delegate._editBoxEditingDidBegan();

                this._showDom();

                this._edTxt.focus();
              };

              _proto.endEditing = function endEditing() {
                this._edTxt.blur();
              };

              _proto._createInput = function _createInput() {
                this._isTextArea = false;
                this._edTxt = document.createElement('input');
              };

              _proto._createTextArea = function _createTextArea() {
                this._isTextArea = true;
                this._edTxt = document.createElement('textarea');
              };

              _proto._addDomToGameContainer = function _addDomToGameContainer() {
                if (legacyCC.GAME_VIEW && this._edTxt) {
                  legacyCC.gameView.container.appendChild(this._edTxt);
                  legacyCC.gameView.head.appendChild(this._placeholderStyleSheet);
                } else if (game.container && this._edTxt) {
                  game.container.appendChild(this._edTxt);
                  document.head.appendChild(this._placeholderStyleSheet);
                }
              };

              _proto._removeDomFromGameContainer = function _removeDomFromGameContainer() {
                var hasElem = legacyCC.GAME_VIEW ? contains$1(legacyCC.gameView.container, this._edTxt) : contains$1(game.container, this._edTxt);

                if (hasElem && this._edTxt) {
                  if (legacyCC.GAME_VIEW) {
                    legacyCC.gameView.container.removeChild(this._edTxt);
                  } else {
                    game.container.removeChild(this._edTxt);
                  }
                }

                var hasStyleSheet = legacyCC.GAME_VIEW ? contains$1(legacyCC.gameView.head, this._placeholderStyleSheet) : contains$1(document.head, this._placeholderStyleSheet);

                if (hasStyleSheet) {
                  if (legacyCC.GAME_VIEW) {
                    legacyCC.gameView.head.removeChild(this._placeholderStyleSheet);
                  } else {
                    document.head.removeChild(this._placeholderStyleSheet);
                  }
                }

                this._edTxt = null;
                this._placeholderStyleSheet = null;
              };

              _proto._showDom = function _showDom() {
                this._updateMaxLength();

                this._updateInputType();

                this._updateStyleSheet();

                if (this._edTxt && this._delegate) {
                  this._edTxt.style.display = '';

                  this._delegate._hideLabels();
                }

                if (sys.isMobile) {
                  this._showDomOnMobile();
                }
              };

              _proto._hideDom = function _hideDom() {
                var elem = this._edTxt;

                if (elem && this._delegate) {
                  elem.style.display = 'none';

                  this._delegate._showLabels();
                }

                if (sys.isMobile) {
                  this._hideDomOnMobile();
                }
              };

              _proto._showDomOnMobile = function _showDomOnMobile() {
                if (sys.os !== OS.ANDROID && sys.os !== OS.OHOS) {
                  return;
                }

                screenAdapter.handleResizeEvent = false;

                this._adjustWindowScroll();
              };

              _proto._hideDomOnMobile = function _hideDomOnMobile() {
                if (sys.os === OS.ANDROID || sys.os === OS.OHOS) {
                  screenAdapter.handleResizeEvent = true;
                }

                this._scrollBackWindow();
              };

              _proto._adjustWindowScroll = function _adjustWindowScroll() {
                var _this2 = this;

                setTimeout(function () {
                  if (window.scrollY < SCROLLY) {
                    _this2._edTxt.scrollIntoView({
                      block: 'start',
                      inline: 'nearest',
                      behavior: 'smooth'
                    });
                  }
                }, DELAY_TIME);
              };

              _proto._scrollBackWindow = function _scrollBackWindow() {
                setTimeout(function () {
                  if (sys.browserType === BrowserType.WECHAT && sys.os === OS.IOS) {
                    if (window.top) {
                      window.top.scrollTo(0, 0);
                    }

                    return;
                  }

                  window.scrollTo(0, 0);
                }, DELAY_TIME);
              };

              _proto._updateMatrix = function _updateMatrix() {
                if (!this._edTxt) {
                  return;
                }

                var node = this._delegate.node;
                var scaleX = view.getScaleX();
                var scaleY = view.getScaleY();
                var widthRatio = 1;
                var heightRatio = 1;

                if (legacyCC.GAME_VIEW) {
                  widthRatio = legacyCC.gameView.canvas.width / legacyCC.game.canvas.width;
                  heightRatio = legacyCC.gameView.canvas.height / legacyCC.game.canvas.height;
                }

                scaleX *= widthRatio;
                scaleY *= heightRatio;
                var viewport = view.getViewportRect();
                var dpr = screenAdapter.devicePixelRatio;
                node.getWorldMatrix(_matrix$1);
                var transform = node._uiProps.uiTransformComp;

                if (transform) {
                  Vec3.set(_vec3, -transform.anchorX * transform.width, -transform.anchorY * transform.height, _vec3.z);
                }

                Mat4.transform(_matrix$1, _matrix$1, _vec3);

                if (!node._uiProps.uiTransformComp) {
                  return;
                }

                var camera = director.root.batcher2D.getFirstRenderCamera(node);
                if (!camera) return;
                camera.node.getWorldRT(_matrix_temp);
                var m12 = _matrix_temp.m12;
                var m13 = _matrix_temp.m13;
                var center = visibleRect.center;
                _matrix_temp.m12 = center.x - (_matrix_temp.m00 * m12 + _matrix_temp.m04 * m13);
                _matrix_temp.m13 = center.y - (_matrix_temp.m01 * m12 + _matrix_temp.m05 * m13);
                Mat4.multiply(_matrix_temp, _matrix_temp, _matrix$1);
                scaleX /= dpr;
                scaleY /= dpr;
                var container = legacyCC.GAME_VIEW ? legacyCC.gameView.container : game.container;
                var a = _matrix_temp.m00 * scaleX;
                var b = _matrix$1.m01;
                var c = _matrix$1.m04;
                var d = _matrix_temp.m05 * scaleY;
                var offsetX = parseInt(container && container.style.paddingLeft || '0');
                offsetX += viewport.x * widthRatio / dpr;
                var offsetY = parseInt(container && container.style.paddingBottom || '0');
                offsetY += viewport.y / dpr;
                var tx = _matrix_temp.m12 * scaleX + offsetX;
                var ty = _matrix_temp.m13 * scaleY + offsetY;
                var matrix = "matrix(" + a + "," + -b + "," + -c + "," + d + "," + tx + "," + -ty + ")";
                this._edTxt.style.transform = matrix;
                this._edTxt.style['-webkit-transform'] = matrix;
                this._edTxt.style['transform-origin'] = '0px 100% 0px';
                this._edTxt.style['-webkit-transform-origin'] = '0px 100% 0px';
              };

              _proto._updateInputType = function _updateInputType() {
                var delegate = this._delegate;
                var inputMode = delegate.inputMode;
                var inputFlag = delegate.inputFlag;
                var returnType = delegate.returnType;
                var elem = this._edTxt;

                if (this._inputMode === inputMode && this._inputFlag === inputFlag && this._returnType === returnType) {
                  return;
                }

                this._inputMode = inputMode;
                this._inputFlag = inputFlag;
                this._returnType = returnType;

                if (this._isTextArea) {
                  var transform = 'none';

                  if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
                    transform = 'uppercase';
                  } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
                    transform = 'capitalize';
                  }

                  elem.style.textTransform = transform;
                  return;
                }

                elem = elem;

                if (inputFlag === InputFlag.PASSWORD) {
                  elem.type = 'password';
                  elem.style.textTransform = 'none';
                  return;
                }

                var type = elem.type;

                if (inputMode === InputMode.EMAIL_ADDR) {
                  type = 'email';
                } else if (inputMode === InputMode.NUMERIC || inputMode === InputMode.DECIMAL) {
                  type = 'number';
                } else if (inputMode === InputMode.PHONE_NUMBER) {
                  type = 'number';
                  elem.pattern = '[0-9]*';
                  elem.addEventListener('wheel', function () {
                    return false;
                  });
                } else if (inputMode === InputMode.URL) {
                  type = 'url';
                } else {
                  type = 'text';

                  if (returnType === KeyboardReturnType.SEARCH) {
                    type = 'search';
                  }
                }

                elem.type = type;
                var textTransform = 'none';

                if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
                  textTransform = 'uppercase';
                } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
                  textTransform = 'capitalize';
                }

                elem.style.textTransform = textTransform;
              };

              _proto._updateMaxLength = function _updateMaxLength() {
                var maxLength = this._delegate.maxLength;

                if (maxLength < 0) {
                  maxLength = 65535;
                }

                this._edTxt.maxLength = maxLength;
              };

              _proto._initStyleSheet = function _initStyleSheet() {
                if (!this._edTxt) {
                  return;
                }

                var elem = this._edTxt;
                elem.style.color = '#000000';
                elem.style.border = '0px';
                elem.style.background = 'transparent';
                elem.style.width = '100%';
                elem.style.height = '100%';
                elem.style.outline = 'medium';
                elem.style.padding = '0';
                elem.style.textTransform = 'none';
                elem.style.display = 'none';
                elem.style.position = 'absolute';
                elem.style.bottom = '0px';
                elem.style.left = LEFT_PADDING + "px";
                elem.className = 'cocosEditBox';
                elem.style.fontFamily = 'Arial';
                elem.id = this._domId;

                if (!this._isTextArea) {
                  elem = elem;
                  elem.type = 'text';
                  elem.style['-moz-appearance'] = 'textfield';
                } else {
                  elem.style.resize = 'none';
                  elem.style.overflowY = 'scroll';
                }

                this._placeholderStyleSheet = document.createElement('style');
              };

              _proto._updateStyleSheet = function _updateStyleSheet() {
                var delegate = this._delegate;
                var elem = this._edTxt;

                if (elem && delegate) {
                  elem.value = delegate.string;
                  elem.placeholder = delegate.placeholder;

                  this._updateTextLabel(delegate.textLabel);

                  this._updatePlaceholderLabel(delegate.placeholderLabel);
                }
              };

              _proto._updateTextLabel = function _updateTextLabel(textLabel) {
                if (!textLabel) {
                  return;
                }

                var font = textLabel.font;

                if (font && !(font instanceof BitmapFont)) {
                  font = font._fontFamily;
                } else {
                  font = textLabel.fontFamily;
                }

                var fontSize = textLabel.fontSize * textLabel.node.scale.y;

                if (this._textLabelFont === font && this._textLabelFontSize === fontSize && this._textLabelFontColor === textLabel.fontColor && this._textLabelAlign === textLabel.horizontalAlign) {
                  return;
                }

                this._textLabelFont = font;
                this._textLabelFontSize = fontSize;
                this._textLabelFontColor = textLabel.fontColor;
                this._textLabelAlign = textLabel.horizontalAlign;

                if (!this._edTxt) {
                  return;
                }

                var elem = this._edTxt;
                elem.style.fontSize = fontSize + "px";
                elem.style.color = textLabel.color.toCSS();
                elem.style.fontFamily = font;

                switch (textLabel.horizontalAlign) {
                  case Label.HorizontalAlign.LEFT:
                    elem.style.textAlign = 'left';
                    break;

                  case Label.HorizontalAlign.CENTER:
                    elem.style.textAlign = 'center';
                    break;

                  case Label.HorizontalAlign.RIGHT:
                    elem.style.textAlign = 'right';
                    break;
                }
              };

              _proto._updatePlaceholderLabel = function _updatePlaceholderLabel(placeholderLabel) {
                if (!placeholderLabel) {
                  return;
                }

                var font = placeholderLabel.font;

                if (font && !(font instanceof BitmapFont)) {
                  font = placeholderLabel.font._fontFamily;
                } else {
                  font = placeholderLabel.fontFamily;
                }

                var fontSize = placeholderLabel.fontSize * placeholderLabel.node.scale.y;

                if (this._placeholderLabelFont === font && this._placeholderLabelFontSize === fontSize && this._placeholderLabelFontColor === placeholderLabel.fontColor && this._placeholderLabelAlign === placeholderLabel.horizontalAlign && this._placeholderLineHeight === placeholderLabel.fontSize) {
                  return;
                }

                this._placeholderLabelFont = font;
                this._placeholderLabelFontSize = fontSize;
                this._placeholderLabelFontColor = placeholderLabel.fontColor;
                this._placeholderLabelAlign = placeholderLabel.horizontalAlign;
                this._placeholderLineHeight = placeholderLabel.fontSize;
                var styleEl = this._placeholderStyleSheet;
                var fontColor = placeholderLabel.color.toCSS();
                var lineHeight = placeholderLabel.fontSize;
                var horizontalAlign = '';

                switch (placeholderLabel.horizontalAlign) {
                  case Label.HorizontalAlign.LEFT:
                    horizontalAlign = 'left';
                    break;

                  case Label.HorizontalAlign.CENTER:
                    horizontalAlign = 'center';
                    break;

                  case Label.HorizontalAlign.RIGHT:
                    horizontalAlign = 'right';
                    break;
                }

                styleEl.innerHTML = "#" + this._domId + "::-webkit-input-placeholder{text-transform: initial;-family: " + font + ";font-size: " + fontSize + "px;color: " + fontColor + ";line-height: " + lineHeight + "px;text-align: " + horizontalAlign + ";}" + ("#" + this._domId + "::-moz-placeholder{text-transform: initial;-family: " + font + ";font-size: " + fontSize + "px;color: " + fontColor + ";line-height: " + lineHeight + "px;text-align: " + horizontalAlign + ";}") + ("#" + this._domId + "::-ms-input-placeholder{text-transform: initial;-family: " + font + ";font-size: " + fontSize + "px;color: " + fontColor + ";line-height: " + lineHeight + "px;text-align: " + horizontalAlign + ";}");

                if (sys.browserType === BrowserType.EDGE) {
                  styleEl.innerHTML += "#" + this._domId + "::-ms-clear{display: none;}";
                }
              };

              _proto._registerEventListeners = function _registerEventListeners() {
                var _this3 = this;

                if (!this._edTxt) {
                  return;
                }

                var elem = this._edTxt;
                var inputLock = false;
                var cbs = this.__eventListeners;

                cbs.compositionStart = function () {
                  inputLock = true;
                };

                cbs.compositionEnd = function () {
                  inputLock = false;

                  _this3._delegate._editBoxTextChanged(elem.value);
                };

                cbs.onInput = function () {
                  if (inputLock) {
                    return;
                  }

                  var delegate = _this3._delegate;
                  var maxLength = delegate.maxLength;

                  if (maxLength >= 0) {
                    elem.value = elem.value.slice(0, maxLength);
                  }

                  delegate._editBoxTextChanged(elem.value);
                };

                cbs.onClick = function () {
                  if (_this3._editing) {
                    if (sys.isMobile) {
                      _this3._adjustWindowScroll();
                    }
                  }
                };

                cbs.onKeydown = function (e) {
                  if (e.keyCode === KeyCode.ENTER) {
                    e.propagationStopped = true;

                    _this3._delegate._editBoxEditingReturn();

                    if (!_this3._isTextArea) {
                      elem.blur();
                    }
                  } else if (e.keyCode === KeyCode.TAB) {
                    e.propagationStopped = true;
                    e.preventDefault();
                    tabIndexUtil.next(_this3);
                  }
                };

                cbs.onBlur = function () {
                  if (sys.isMobile && inputLock) {
                    cbs.compositionEnd();
                  }

                  _this3._editing = false;
                  _currentEditBoxImpl = null;

                  _this3._hideDom();

                  _this3._delegate._editBoxEditingDidEnded();
                };

                elem.addEventListener('compositionstart', cbs.compositionStart);
                elem.addEventListener('compositionend', cbs.compositionEnd);
                elem.addEventListener('input', cbs.onInput);
                elem.addEventListener('keydown', cbs.onKeydown);
                elem.addEventListener('blur', cbs.onBlur);
                elem.addEventListener('touchstart', cbs.onClick);
              };

              _proto._removeEventListeners = function _removeEventListeners() {
                if (!this._edTxt) {
                  return;
                }

                var elem = this._edTxt;
                var cbs = this.__eventListeners;
                elem.removeEventListener('compositionstart', cbs.compositionStart);
                elem.removeEventListener('compositionend', cbs.compositionEnd);
                elem.removeEventListener('input', cbs.onInput);
                elem.removeEventListener('keydown', cbs.onKeydown);
                elem.removeEventListener('blur', cbs.onBlur);
                elem.removeEventListener('touchstart', cbs.onClick);
                cbs.compositionStart = null;
                cbs.compositionEnd = null;
                cbs.onInput = null;
                cbs.onKeydown = null;
                cbs.onBlur = null;
                cbs.onClick = null;
              };

              return EditBoxImpl;
            }(EditBoxImplBase);

            var _dec$1v, _dec2$1d, _dec3$Q, _dec4$L, _dec5$F, _dec6$C, _dec7$B, _dec8$z, _dec9$v, _dec10$t, _dec11$o, _dec12$o, _dec13$o, _dec14$m, _dec15$m, _dec16$l, _dec17$j, _dec18$i, _dec19$i, _dec20$h, _dec21$g, _dec22$e, _dec23$d, _dec24$c, _dec25$c, _dec26$b, _dec27$b, _dec28$a, _dec29$9, _dec30$8, _dec31$8, _dec32$8, _dec33$6, _dec34$6, _dec35$6, _dec36$6, _dec37$6, _dec38$6, _dec39$6, _dec40$6, _dec41$6, _dec42$6, _dec43$5, _class$1y, _class2$1m, _descriptor$1i, _descriptor2$17, _descriptor3$U, _descriptor4$O, _descriptor5$F, _descriptor6$z, _descriptor7$p, _descriptor8$m, _descriptor9$i, _descriptor10$g, _descriptor11$e, _descriptor12$e, _descriptor13$d, _class3$j, _temp$1r;
            var LEFT_PADDING$1 = 2;

            function capitalize(str) {
              return str.replace(/(?:^|\s)\S/g, function (a) {
                return a.toUpperCase();
              });
            }

            function capitalizeFirstLetter(str) {
              return str.charAt(0).toUpperCase() + str.slice(1);
            }

            var EventType$3;

            (function (EventType) {
              EventType["EDITING_DID_BEGAN"] = "editing-did-began";
              EventType["EDITING_DID_ENDED"] = "editing-did-ended";
              EventType["TEXT_CHANGED"] = "text-changed";
              EventType["EDITING_RETURN"] = "editing-return";
            })(EventType$3 || (EventType$3 = {}));

            var EditBox = function (v) { return exports({ EditBox: v, EditBoxComponent: v }), v; }((_dec$1v = ccclass('cc.EditBox'), _dec2$1d = help(), _dec3$Q = executionOrder(110), _dec4$L = menu$1(), _dec5$F = requireComponent(UITransform), _dec6$C = displayOrder(), _dec7$B = tooltip(), _dec8$z = displayOrder(), _dec9$v = tooltip(), _dec10$t = type$1(Label), _dec11$o = displayOrder(), _dec12$o = tooltip(), _dec13$o = type$1(Label), _dec14$m = displayOrder(), _dec15$m = tooltip(), _dec16$l = type$1(SpriteFrame), _dec17$j = displayOrder(), _dec18$i = tooltip(), _dec19$i = type$1(InputFlag), _dec20$h = displayOrder(), _dec21$g = tooltip(), _dec22$e = type$1(InputMode), _dec23$d = displayOrder(), _dec24$c = tooltip(), _dec25$c = type$1(KeyboardReturnType), _dec26$b = displayOrder(), _dec27$b = tooltip(), _dec28$a = displayOrder(), _dec29$9 = tooltip(), _dec30$8 = displayOrder(), _dec31$8 = tooltip(), _dec32$8 = type$1([EventHandler]), _dec33$6 = displayOrder(), _dec34$6 = tooltip(), _dec35$6 = type$1([EventHandler]), _dec36$6 = displayOrder(), _dec37$6 = tooltip(), _dec38$6 = type$1([EventHandler]), _dec39$6 = displayOrder(), _dec40$6 = tooltip(), _dec41$6 = type$1([EventHandler]), _dec42$6 = displayOrder(), _dec43$5 = tooltip(), _dec$1v(_class$1y = _dec2$1d(_class$1y = _dec3$Q(_class$1y = _dec4$L(_class$1y = _dec5$F(_class$1y = executeInEditMode(_class$1y = (_class2$1m = (_temp$1r = _class3$j = function (_Component) {
              _inheritsLoose(EditBox, _Component);

              function EditBox() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "editingDidBegan", _descriptor$1i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "textChanged", _descriptor2$17, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "editingDidEnded", _descriptor3$U, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "editingReturn", _descriptor4$O, _assertThisInitialized(_this));

                _this._impl = null;
                _this._background = null;

                _initializerDefineProperty(_this, "_textLabel", _descriptor5$F, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_placeholderLabel", _descriptor6$z, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_returnType", _descriptor7$p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_string", _descriptor8$m, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_tabIndex", _descriptor9$i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_backgroundImage", _descriptor10$g, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_inputFlag", _descriptor11$e, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_inputMode", _descriptor12$e, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_maxLength", _descriptor13$d, _assertThisInitialized(_this));

                _this._isLabelVisible = false;
                return _this;
              }

              var _proto = EditBox.prototype;

              _proto.__preload = function __preload() {
                this._init();
              };

              _proto.onEnable = function onEnable() {
                {
                  this._registerEvent();
                }

                this._ensureBackgroundSprite();

                if (this._impl) {
                  this._impl.onEnable();
                }
              };

              _proto.update = function update() {
                if (this._impl) {
                  this._impl.update();
                }
              };

              _proto.onDisable = function onDisable() {
                {
                  this._unregisterEvent();
                }

                this._unregisterBackgroundEvent();

                if (this._impl) {
                  this._impl.onDisable();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this._impl) {
                  this._impl.clear();
                }
              };

              _proto.setFocus = function setFocus() {
                if (this._impl) {
                  this._impl.setFocus(true);
                }
              };

              _proto.focus = function focus() {
                if (this._impl) {
                  this._impl.setFocus(true);
                }
              };

              _proto.blur = function blur() {
                if (this._impl) {
                  this._impl.setFocus(false);
                }
              };

              _proto.isFocused = function isFocused() {
                if (this._impl) {
                  return this._impl.isFocused();
                }

                return false;
              };

              _proto._editBoxEditingDidBegan = function _editBoxEditingDidBegan() {
                EventHandler.emitEvents(this.editingDidBegan, this);
                this.node.emit(EventType$3.EDITING_DID_BEGAN, this);
              };

              _proto._editBoxEditingDidEnded = function _editBoxEditingDidEnded() {
                EventHandler.emitEvents(this.editingDidEnded, this);
                this.node.emit(EventType$3.EDITING_DID_ENDED, this);
              };

              _proto._editBoxTextChanged = function _editBoxTextChanged(text) {
                text = this._updateLabelStringStyle(text, true);
                this.string = text;
                EventHandler.emitEvents(this.textChanged, text, this);
                this.node.emit(EventType$3.TEXT_CHANGED, this);
              };

              _proto._editBoxEditingReturn = function _editBoxEditingReturn() {
                EventHandler.emitEvents(this.editingReturn, this);
                this.node.emit(EventType$3.EDITING_RETURN, this);
              };

              _proto._showLabels = function _showLabels() {
                this._isLabelVisible = true;

                this._updateLabels();
              };

              _proto._hideLabels = function _hideLabels() {
                this._isLabelVisible = false;

                if (this._textLabel) {
                  this._textLabel.node.active = false;
                }

                if (this._placeholderLabel) {
                  this._placeholderLabel.node.active = false;
                }
              };

              _proto._onTouchBegan = function _onTouchBegan(event) {
                event.propagationStopped = true;
              };

              _proto._onTouchCancel = function _onTouchCancel(event) {
                event.propagationStopped = true;
              };

              _proto._onTouchEnded = function _onTouchEnded(event) {
                if (this._impl) {
                  this._impl.beginEditing();
                }

                event.propagationStopped = true;
              };

              _proto._init = function _init() {
                this._updatePlaceholderLabel();

                this._updateTextLabel();

                this._isLabelVisible = true;
                this.node.on(NodeEventType.SIZE_CHANGED, this._resizeChildNodes, this);
                var impl = this._impl = new EditBox._EditBoxImpl();
                impl.init(this);

                this._updateString(this._string);

                this._syncSize();
              };

              _proto._ensureBackgroundSprite = function _ensureBackgroundSprite() {
                if (!this._background) {
                  var background = this.node.getComponent(Sprite);

                  if (!background) {
                    background = this.node.addComponent(Sprite);
                  }

                  if (background !== this._background) {
                    background.type = Sprite.Type.SLICED;
                    background.spriteFrame = this._backgroundImage;
                    this._background = background;

                    this._registerBackgroundEvent();
                  }
                }
              };

              _proto._updateTextLabel = function _updateTextLabel() {
                var textLabel = this._textLabel;

                if (!textLabel) {
                  var node = this.node.getChildByName('TEXT_LABEL');

                  if (!node) {
                    node = new Node('TEXT_LABEL');
                    node.layer = this.node.layer;
                  }

                  textLabel = node.getComponent(Label);

                  if (!textLabel) {
                    textLabel = node.addComponent(Label);
                  }

                  node.parent = this.node;
                  this._textLabel = textLabel;
                }

                var transformComp = this._textLabel.node._uiProps.uiTransformComp;
                transformComp.setAnchorPoint(0, 1);
                textLabel.overflow = Label.Overflow.CLAMP;

                if (this._inputMode === InputMode.ANY) {
                  textLabel.verticalAlign = VerticalTextAlignment.TOP;
                  textLabel.enableWrapText = true;
                } else {
                  textLabel.enableWrapText = false;
                }

                textLabel.string = this._updateLabelStringStyle(this._string);
              };

              _proto._updatePlaceholderLabel = function _updatePlaceholderLabel() {
                var placeholderLabel = this._placeholderLabel;

                if (!placeholderLabel) {
                  var node = this.node.getChildByName('PLACEHOLDER_LABEL');

                  if (!node) {
                    node = new Node('PLACEHOLDER_LABEL');
                    node.layer = this.node.layer;
                  }

                  placeholderLabel = node.getComponent(Label);

                  if (!placeholderLabel) {
                    placeholderLabel = node.addComponent(Label);
                  }

                  node.parent = this.node;
                  this._placeholderLabel = placeholderLabel;
                }

                var transform = this._placeholderLabel.node._uiProps.uiTransformComp;
                transform.setAnchorPoint(0, 1);

                if (this._inputMode === InputMode.ANY) {
                  placeholderLabel.verticalAlign = VerticalTextAlignment.TOP;
                  placeholderLabel.enableWrapText = true;
                } else {
                  placeholderLabel.enableWrapText = false;
                }

                placeholderLabel.string = this.placeholder;
              };

              _proto._syncSize = function _syncSize() {
                var trans = this.node._uiProps.uiTransformComp;
                var size = trans.contentSize;

                if (this._background) {
                  var bgTrans = this._background.node._uiProps.uiTransformComp;
                  bgTrans.anchorPoint = trans.anchorPoint;
                  bgTrans.setContentSize(size);
                }

                this._updateLabelPosition(size);

                if (this._impl) {
                  this._impl.setSize(size.width, size.height);
                }
              };

              _proto._updateLabels = function _updateLabels() {
                if (this._isLabelVisible) {
                  var content = this._string;

                  if (this._textLabel) {
                    this._textLabel.node.active = content !== '';
                  }

                  if (this._placeholderLabel) {
                    this._placeholderLabel.node.active = content === '';
                  }
                }
              };

              _proto._updateString = function _updateString(text) {
                var textLabel = this._textLabel;

                if (!textLabel) {
                  return;
                }

                var displayText = text;

                if (displayText) {
                  displayText = this._updateLabelStringStyle(displayText);
                }

                textLabel.string = displayText;

                this._updateLabels();
              };

              _proto._updateLabelStringStyle = function _updateLabelStringStyle(text, ignorePassword) {
                if (ignorePassword === void 0) {
                  ignorePassword = false;
                }

                var inputFlag = this._inputFlag;

                if (!ignorePassword && inputFlag === InputFlag.PASSWORD) {
                  var passwordString = '';
                  var len = text.length;

                  for (var i = 0; i < len; ++i) {
                    passwordString += "\u25CF";
                  }

                  text = passwordString;
                } else if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
                  text = text.toUpperCase();
                } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
                  text = capitalize(text);
                } else if (inputFlag === InputFlag.INITIAL_CAPS_SENTENCE) {
                  text = capitalizeFirstLetter(text);
                }

                return text;
              };

              _proto._registerEvent = function _registerEvent() {
                this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
              };

              _proto._unregisterEvent = function _unregisterEvent() {
                this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this);
                this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
              };

              _proto._onBackgroundSpriteFrameChanged = function _onBackgroundSpriteFrameChanged() {
                if (!this._background) {
                  return;
                }

                this.backgroundImage = this._background.spriteFrame;
              };

              _proto._registerBackgroundEvent = function _registerBackgroundEvent() {
                var node = this._background && this._background.node;
                node === null || node === void 0 ? void 0 : node.on(Sprite.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this);
              };

              _proto._unregisterBackgroundEvent = function _unregisterBackgroundEvent() {
                var node = this._background && this._background.node;
                node === null || node === void 0 ? void 0 : node.off(Sprite.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this);
              };

              _proto._updateLabelPosition = function _updateLabelPosition(size) {
                var trans = this.node._uiProps.uiTransformComp;
                var offX = -trans.anchorX * trans.width;
                var offY = -trans.anchorY * trans.height;
                var placeholderLabel = this._placeholderLabel;
                var textLabel = this._textLabel;

                if (textLabel) {
                  textLabel.node._uiProps.uiTransformComp.setContentSize(size.width - LEFT_PADDING$1, size.height);

                  textLabel.node.setPosition(offX + LEFT_PADDING$1, offY + size.height, textLabel.node.position.z);

                  if (this._inputMode === InputMode.ANY) {
                    textLabel.verticalAlign = VerticalTextAlignment.TOP;
                  }

                  textLabel.enableWrapText = this._inputMode === InputMode.ANY;
                }

                if (placeholderLabel) {
                  placeholderLabel.node._uiProps.uiTransformComp.setContentSize(size.width - LEFT_PADDING$1, size.height);

                  placeholderLabel.lineHeight = size.height;
                  placeholderLabel.node.setPosition(offX + LEFT_PADDING$1, offY + size.height, placeholderLabel.node.position.z);

                  if (this._inputMode === InputMode.ANY) {
                    placeholderLabel.verticalAlign = VerticalTextAlignment.TOP;
                  }

                  placeholderLabel.enableWrapText = this._inputMode === InputMode.ANY;
                }
              };

              _proto._resizeChildNodes = function _resizeChildNodes() {
                var trans = this.node._uiProps.uiTransformComp;
                var textLabelNode = this._textLabel && this._textLabel.node;

                if (textLabelNode) {
                  textLabelNode.setPosition(-trans.width / 2, trans.height / 2, textLabelNode.position.z);

                  textLabelNode._uiProps.uiTransformComp.setContentSize(trans.contentSize);
                }

                var placeholderLabelNode = this._placeholderLabel && this._placeholderLabel.node;

                if (placeholderLabelNode) {
                  placeholderLabelNode.setPosition(-trans.width / 2, trans.height / 2, placeholderLabelNode.position.z);

                  placeholderLabelNode._uiProps.uiTransformComp.setContentSize(trans.contentSize);
                }

                var backgroundNode = this._background && this._background.node;

                if (backgroundNode) {
                  backgroundNode._uiProps.uiTransformComp.setContentSize(trans.contentSize);
                }

                this._syncSize();
              };

              _createClass(EditBox, [{
                key: "string",
                get: function get() {
                  return this._string;
                },
                set: function set(value) {
                  if (this._maxLength >= 0 && value.length >= this._maxLength) {
                    value = value.slice(0, this._maxLength);
                  }

                  if (this._string === value) {
                    return;
                  }

                  this._string = value;

                  this._updateString(value);
                }
              }, {
                key: "placeholder",
                get: function get() {
                  if (!this._placeholderLabel) {
                    return '';
                  }

                  return this._placeholderLabel.string;
                },
                set: function set(value) {
                  if (this._placeholderLabel) {
                    this._placeholderLabel.string = value;
                  }
                }
              }, {
                key: "textLabel",
                get: function get() {
                  return this._textLabel;
                },
                set: function set(oldValue) {
                  if (this._textLabel !== oldValue) {
                    this._textLabel = oldValue;

                    if (this._textLabel) {
                      this._updateTextLabel();

                      this._updateLabels();
                    }
                  }
                }
              }, {
                key: "placeholderLabel",
                get: function get() {
                  return this._placeholderLabel;
                },
                set: function set(oldValue) {
                  if (this._placeholderLabel !== oldValue) {
                    this._placeholderLabel = oldValue;

                    if (this._placeholderLabel) {
                      this._updatePlaceholderLabel();

                      this._updateLabels();
                    }
                  }
                }
              }, {
                key: "backgroundImage",
                get: function get() {
                  return this._backgroundImage;
                },
                set: function set(value) {
                  if (this._backgroundImage === value) {
                    return;
                  }

                  this._backgroundImage = value;

                  this._ensureBackgroundSprite();

                  this._background.spriteFrame = value;
                }
              }, {
                key: "inputFlag",
                get: function get() {
                  return this._inputFlag;
                },
                set: function set(value) {
                  if (this._inputFlag === value) {
                    return;
                  }

                  this._inputFlag = value;

                  this._updateString(this._string);
                }
              }, {
                key: "inputMode",
                get: function get() {
                  return this._inputMode;
                },
                set: function set(oldValue) {
                  if (this._inputMode !== oldValue) {
                    this._inputMode = oldValue;

                    this._updateTextLabel();

                    this._updatePlaceholderLabel();
                  }
                }
              }, {
                key: "returnType",
                get: function get() {
                  return this._returnType;
                },
                set: function set(value) {
                  this._returnType = value;
                }
              }, {
                key: "maxLength",
                get: function get() {
                  return this._maxLength;
                },
                set: function set(value) {
                  this._maxLength = value;
                }
              }, {
                key: "tabIndex",
                get: function get() {
                  return this._tabIndex;
                },
                set: function set(value) {
                  if (this._tabIndex !== value) {
                    this._tabIndex = value;

                    if (this._impl) {
                      this._impl.setTabIndex(value);
                    }
                  }
                }
              }]);

              return EditBox;
            }(Component), _class3$j._EditBoxImpl = EditBoxImplBase, _class3$j.KeyboardReturnType = KeyboardReturnType, _class3$j.InputFlag = InputFlag, _class3$j.InputMode = InputMode, _class3$j.EventType = EventType$3, _temp$1r), (_applyDecoratedDescriptor(_class2$1m.prototype, "string", [_dec6$C, _dec7$B], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "string"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "placeholder", [_dec8$z, _dec9$v], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "placeholder"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "textLabel", [_dec10$t, _dec11$o, _dec12$o], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "textLabel"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "placeholderLabel", [_dec13$o, _dec14$m, _dec15$m], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "placeholderLabel"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "backgroundImage", [_dec16$l, _dec17$j, _dec18$i], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "backgroundImage"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "inputFlag", [_dec19$i, _dec20$h, _dec21$g], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "inputFlag"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "inputMode", [_dec22$e, _dec23$d, _dec24$c], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "inputMode"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "returnType", [_dec25$c, _dec26$b, _dec27$b], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "returnType"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "maxLength", [_dec28$a, _dec29$9], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "maxLength"), _class2$1m.prototype), _applyDecoratedDescriptor(_class2$1m.prototype, "tabIndex", [_dec30$8, _dec31$8], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "tabIndex"), _class2$1m.prototype), _descriptor$1i = _applyDecoratedDescriptor(_class2$1m.prototype, "editingDidBegan", [_dec32$8, serializable, _dec33$6, _dec34$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor2$17 = _applyDecoratedDescriptor(_class2$1m.prototype, "textChanged", [_dec35$6, serializable, _dec36$6, _dec37$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor3$U = _applyDecoratedDescriptor(_class2$1m.prototype, "editingDidEnded", [_dec38$6, serializable, _dec39$6, _dec40$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor4$O = _applyDecoratedDescriptor(_class2$1m.prototype, "editingReturn", [_dec41$6, serializable, _dec42$6, _dec43$5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor5$F = _applyDecoratedDescriptor(_class2$1m.prototype, "_textLabel", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor6$z = _applyDecoratedDescriptor(_class2$1m.prototype, "_placeholderLabel", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor7$p = _applyDecoratedDescriptor(_class2$1m.prototype, "_returnType", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return KeyboardReturnType.DEFAULT;
              }
            }), _descriptor8$m = _applyDecoratedDescriptor(_class2$1m.prototype, "_string", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor9$i = _applyDecoratedDescriptor(_class2$1m.prototype, "_tabIndex", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor10$g = _applyDecoratedDescriptor(_class2$1m.prototype, "_backgroundImage", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor11$e = _applyDecoratedDescriptor(_class2$1m.prototype, "_inputFlag", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return InputFlag.DEFAULT;
              }
            }), _descriptor12$e = _applyDecoratedDescriptor(_class2$1m.prototype, "_inputMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return InputMode.ANY;
              }
            }), _descriptor13$d = _applyDecoratedDescriptor(_class2$1m.prototype, "_maxLength", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 20;
              }
            })), _class2$1m)) || _class$1y) || _class$1y) || _class$1y) || _class$1y) || _class$1y) || _class$1y));

            if (typeof window === 'object' && typeof document === 'object' && !MINIGAME && !JSB && !RUNTIME_BASED) {
              EditBox._EditBoxImpl = EditBoxImpl;
            }

            legacyCC.internal.EditBox = EditBox;

            var _dec$1w, _dec2$1e, _dec3$R, _dec4$M, _dec5$G, _dec6$D, _dec7$C, _dec8$A, _dec9$w, _dec10$u, _dec11$p, _dec12$p, _dec13$p, _dec14$n, _dec15$n, _dec16$m, _dec17$k, _dec18$j, _dec19$j, _dec20$i, _dec21$h, _dec22$f, _dec23$e, _dec24$d, _dec25$d, _dec26$c, _dec27$c, _dec28$b, _dec29$a, _dec30$9, _dec31$9, _dec32$9, _dec33$7, _dec34$7, _dec35$7, _class$1z, _class2$1n, _descriptor$1j, _descriptor2$18, _descriptor3$V, _descriptor4$P, _descriptor5$G, _descriptor6$A, _descriptor7$q, _descriptor8$n, _descriptor9$j, _descriptor10$h, _descriptor11$f, _descriptor12$f, _descriptor13$e, _descriptor14$7, _descriptor15$6, _descriptor16$6, _class3$k, _temp$1s;
            var Type;

            (function (Type) {
              Type[Type["NONE"] = 0] = "NONE";
              Type[Type["HORIZONTAL"] = 1] = "HORIZONTAL";
              Type[Type["VERTICAL"] = 2] = "VERTICAL";
              Type[Type["GRID"] = 3] = "GRID";
            })(Type || (Type = {}));

            ccenum(Type);
            var ResizeMode;

            (function (ResizeMode) {
              ResizeMode[ResizeMode["NONE"] = 0] = "NONE";
              ResizeMode[ResizeMode["CONTAINER"] = 1] = "CONTAINER";
              ResizeMode[ResizeMode["CHILDREN"] = 2] = "CHILDREN";
            })(ResizeMode || (ResizeMode = {}));

            ccenum(ResizeMode);
            var AxisDirection;

            (function (AxisDirection) {
              AxisDirection[AxisDirection["HORIZONTAL"] = 0] = "HORIZONTAL";
              AxisDirection[AxisDirection["VERTICAL"] = 1] = "VERTICAL";
            })(AxisDirection || (AxisDirection = {}));

            ccenum(AxisDirection);
            var VerticalDirection;

            (function (VerticalDirection) {
              VerticalDirection[VerticalDirection["BOTTOM_TO_TOP"] = 0] = "BOTTOM_TO_TOP";
              VerticalDirection[VerticalDirection["TOP_TO_BOTTOM"] = 1] = "TOP_TO_BOTTOM";
            })(VerticalDirection || (VerticalDirection = {}));

            ccenum(VerticalDirection);
            var HorizontalDirection;

            (function (HorizontalDirection) {
              HorizontalDirection[HorizontalDirection["LEFT_TO_RIGHT"] = 0] = "LEFT_TO_RIGHT";
              HorizontalDirection[HorizontalDirection["RIGHT_TO_LEFT"] = 1] = "RIGHT_TO_LEFT";
            })(HorizontalDirection || (HorizontalDirection = {}));

            ccenum(HorizontalDirection);
            var Constraint;

            (function (Constraint) {
              Constraint[Constraint["NONE"] = 0] = "NONE";
              Constraint[Constraint["FIXED_ROW"] = 1] = "FIXED_ROW";
              Constraint[Constraint["FIXED_COL"] = 2] = "FIXED_COL";
            })(Constraint || (Constraint = {}));

            ccenum(Constraint);

            var _tempVec3 = new Vec3();

            var Layout = function (v) { return exports({ Layout: v, LayoutComponent: v }), v; }((_dec$1w = ccclass('cc.Layout'), _dec2$1e = help(), _dec3$R = executionOrder(110), _dec4$M = menu$1(), _dec5$G = requireComponent(UITransform), _dec6$D = visible(), _dec7$C = tooltip(), _dec8$A = visible(), _dec9$w = tooltip(), _dec10$u = type$1(Type), _dec11$p = displayOrder(), _dec12$p = tooltip(), _dec13$p = type$1(ResizeMode), _dec14$n = visible(), _dec15$n = tooltip(), _dec16$m = visible(), _dec17$k = tooltip(), _dec18$j = type$1(AxisDirection), _dec19$j = tooltip(), _dec20$i = tooltip(), _dec21$h = tooltip(), _dec22$f = tooltip(), _dec23$e = tooltip(), _dec24$d = tooltip(), _dec25$d = tooltip(), _dec26$c = type$1(VerticalDirection), _dec27$c = tooltip(), _dec28$b = type$1(HorizontalDirection), _dec29$a = tooltip(), _dec30$9 = type$1(Constraint), _dec31$9 = visible(), _dec32$9 = tooltip(), _dec33$7 = visible(), _dec34$7 = tooltip(), _dec35$7 = tooltip(), _dec$1w(_class$1z = _dec2$1e(_class$1z = _dec3$R(_class$1z = _dec4$M(_class$1z = _dec5$G(_class$1z = executeInEditMode(_class$1z = (_class2$1n = (_temp$1s = _class3$k = function (_Component) {
              _inheritsLoose(Layout, _Component);

              function Layout() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_resizeMode", _descriptor$1j, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_layoutType", _descriptor2$18, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_cellSize", _descriptor3$V, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_startAxis", _descriptor4$P, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_paddingLeft", _descriptor5$G, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_paddingRight", _descriptor6$A, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_paddingTop", _descriptor7$q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_paddingBottom", _descriptor8$n, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_spacingX", _descriptor9$j, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_spacingY", _descriptor10$h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_verticalDirection", _descriptor11$f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_horizontalDirection", _descriptor12$f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_constraint", _descriptor13$e, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_constraintNum", _descriptor14$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_affectedByScale", _descriptor15$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isAlign", _descriptor16$6, _assertThisInitialized(_this));

                _this._layoutSize = new Size$1(300, 200);
                _this._layoutDirty = true;
                _this._childrenDirty = false;
                _this._usefulLayoutObj = [];
                _this._init = false;
                return _this;
              }

              var _proto = Layout.prototype;

              _proto.updateLayout = function updateLayout(force) {
                if (force === void 0) {
                  force = false;
                }

                if ((this._layoutDirty || force) && this.node.children.length > 0) {
                  this._doLayout();

                  this._layoutDirty = false;
                }
              };

              _proto.onEnable = function onEnable() {
                this._addEventListeners();

                var trans = this.node._uiProps.uiTransformComp;

                if (trans.contentSize.equals(Size$1.ZERO)) {
                  trans.setContentSize(this._layoutSize);
                }

                this._childrenChanged();
              };

              _proto.onDisable = function onDisable() {
                this._usefulLayoutObj.length = 0;

                this._removeEventListeners();
              };

              _proto._checkUsefulObj = function _checkUsefulObj() {
                this._usefulLayoutObj.length = 0;
                var children = this.node.children;

                for (var i = 0; i < children.length; ++i) {
                  var child = children[i];
                  var uiTrans = child._uiProps.uiTransformComp;

                  if (child.activeInHierarchy && uiTrans) {
                    this._usefulLayoutObj.push(uiTrans);
                  }
                }
              };

              _proto._addEventListeners = function _addEventListeners() {
                director.on(Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
                this.node.on(NodeEventType.SIZE_CHANGED, this._resized, this);
                this.node.on(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
                this.node.on(NodeEventType.CHILD_ADDED, this._childAdded, this);
                this.node.on(NodeEventType.CHILD_REMOVED, this._childRemoved, this);
                this.node.on(NodeEventType.SIBLING_ORDER_CHANGED, this._childrenChanged, this);
                this.node.on('childrenSiblingOrderChanged', this.updateLayout, this);

                this._addChildrenEventListeners();
              };

              _proto._removeEventListeners = function _removeEventListeners() {
                director.off(Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
                this.node.off(NodeEventType.SIZE_CHANGED, this._resized, this);
                this.node.off(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
                this.node.off(NodeEventType.CHILD_ADDED, this._childAdded, this);
                this.node.off(NodeEventType.CHILD_REMOVED, this._childRemoved, this);
                this.node.off(NodeEventType.SIBLING_ORDER_CHANGED, this._childrenChanged, this);
                this.node.off('childrenSiblingOrderChanged', this.updateLayout, this);

                this._removeChildrenEventListeners();
              };

              _proto._addChildrenEventListeners = function _addChildrenEventListeners() {
                var children = this.node.children;

                for (var i = 0; i < children.length; ++i) {
                  var child = children[i];
                  child.on(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
                  child.on(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
                  child.on(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
                  child.on(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);
                }
              };

              _proto._removeChildrenEventListeners = function _removeChildrenEventListeners() {
                var children = this.node.children;

                for (var i = 0; i < children.length; ++i) {
                  var child = children[i];
                  child.off(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
                  child.off(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
                  child.off(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
                  child.off(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);
                }
              };

              _proto._childAdded = function _childAdded(child) {
                child.on(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
                child.on(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
                child.on(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
                child.on(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);

                this._childrenChanged();
              };

              _proto._childRemoved = function _childRemoved(child) {
                child.off(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
                child.off(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
                child.off(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
                child.off(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);

                this._childrenChanged();
              };

              _proto._resized = function _resized() {
                this._layoutSize.set(this.node._uiProps.uiTransformComp.contentSize);

                this._doLayoutDirty();
              };

              _proto._doLayoutHorizontally = function _doLayoutHorizontally(baseWidth, rowBreak, fnPositionY, applyChildren) {
                var trans = this.node._uiProps.uiTransformComp;
                var layoutAnchor = trans.anchorPoint;

                var limit = this._getFixedBreakingNum();

                var sign = 1;
                var paddingX = this._paddingLeft;

                if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                  sign = -1;
                  paddingX = this._paddingRight;
                }

                var startPos = (this._horizontalDirection - layoutAnchor.x) * baseWidth + sign * paddingX;
                var nextX = startPos - sign * this._spacingX;
                var totalHeight = 0;
                var rowMaxHeight = 0;
                var tempMaxHeight = 0;
                var maxHeight = 0;
                var isBreak = false;
                var activeChildCount = this._usefulLayoutObj.length;
                var newChildWidth = this._cellSize.width;

                var paddingH = this._getPaddingH();

                if (this._layoutType !== Type.GRID && this._resizeMode === ResizeMode.CHILDREN) {
                  newChildWidth = (baseWidth - paddingH - (activeChildCount - 1) * this._spacingX) / activeChildCount;
                }

                var children = this._usefulLayoutObj;

                for (var i = 0; i < children.length; ++i) {
                  var childTrans = children[i];
                  var child = childTrans.node;
                  var scale = child.scale;

                  var childScaleX = this._getUsedScaleValue(scale.x);

                  var childScaleY = this._getUsedScaleValue(scale.y);

                  if (this._resizeMode === ResizeMode.CHILDREN) {
                    childTrans.width = newChildWidth / childScaleX;

                    if (this._layoutType === Type.GRID) {
                      childTrans.height = this._cellSize.height / childScaleY;
                    }
                  }

                  var anchorX = Math.abs(this._horizontalDirection - childTrans.anchorX);
                  var childBoundingBoxWidth = childTrans.width * childScaleX;
                  var childBoundingBoxHeight = childTrans.height * childScaleY;

                  if (childBoundingBoxHeight > tempMaxHeight) {
                    maxHeight = Math.max(tempMaxHeight, maxHeight);
                    rowMaxHeight = tempMaxHeight || childBoundingBoxHeight;
                    tempMaxHeight = childBoundingBoxHeight;
                  }

                  nextX += sign * (anchorX * childBoundingBoxWidth + this._spacingX);
                  var rightBoundaryOfChild = sign * (1 - anchorX) * childBoundingBoxWidth;

                  if (rowBreak) {
                    if (limit > 0) {
                      isBreak = i / limit > 0 && i % limit === 0;

                      if (isBreak) {
                        rowMaxHeight = tempMaxHeight > childBoundingBoxHeight ? tempMaxHeight : rowMaxHeight;
                      }
                    } else if (childBoundingBoxWidth > baseWidth - paddingH) {
                      if (nextX > startPos + sign * (anchorX * childBoundingBoxWidth)) {
                        isBreak = true;
                      }
                    } else {
                      var boundary = (1 - this._horizontalDirection - layoutAnchor.x) * baseWidth;
                      var rowBreakBoundary = nextX + rightBoundaryOfChild + sign * (sign > 0 ? this._paddingRight : this._paddingLeft);
                      isBreak = Math.abs(rowBreakBoundary) > Math.abs(boundary);
                    }

                    if (isBreak) {
                      nextX = startPos + sign * (anchorX * childBoundingBoxWidth);

                      if (childBoundingBoxHeight !== tempMaxHeight) {
                        rowMaxHeight = tempMaxHeight;
                      }

                      totalHeight += rowMaxHeight + this._spacingY;
                      rowMaxHeight = tempMaxHeight = childBoundingBoxHeight;
                    }
                  }

                  var finalPositionY = fnPositionY(child, childTrans, totalHeight);

                  if (applyChildren) {
                    child.setPosition(nextX, finalPositionY);
                  }

                  nextX += rightBoundaryOfChild;
                }

                rowMaxHeight = Math.max(rowMaxHeight, tempMaxHeight);

                var containerResizeBoundary = Math.max(maxHeight, totalHeight + rowMaxHeight) + this._getPaddingV();

                return containerResizeBoundary;
              };

              _proto._doLayoutVertically = function _doLayoutVertically(baseHeight, columnBreak, fnPositionX, applyChildren) {
                var trans = this.node._uiProps.uiTransformComp;
                var layoutAnchor = trans.anchorPoint;

                var limit = this._getFixedBreakingNum();

                var sign = 1;
                var paddingY = this._paddingBottom;

                if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                  sign = -1;
                  paddingY = this._paddingTop;
                }

                var startPos = (this._verticalDirection - layoutAnchor.y) * baseHeight + sign * paddingY;
                var nextY = startPos - sign * this._spacingY;
                var tempMaxWidth = 0;
                var maxWidth = 0;
                var colMaxWidth = 0;
                var totalWidth = 0;
                var isBreak = false;
                var activeChildCount = this._usefulLayoutObj.length;
                var newChildHeight = this._cellSize.height;

                var paddingV = this._getPaddingV();

                if (this._layoutType !== Type.GRID && this._resizeMode === ResizeMode.CHILDREN) {
                  newChildHeight = (baseHeight - paddingV - (activeChildCount - 1) * this._spacingY) / activeChildCount;
                }

                var children = this._usefulLayoutObj;

                for (var i = 0; i < children.length; ++i) {
                  var childTrans = children[i];
                  var child = childTrans.node;
                  var scale = child.scale;

                  var childScaleX = this._getUsedScaleValue(scale.x);

                  var childScaleY = this._getUsedScaleValue(scale.y);

                  if (this._resizeMode === ResizeMode.CHILDREN) {
                    childTrans.height = newChildHeight / childScaleY;

                    if (this._layoutType === Type.GRID) {
                      childTrans.width = this._cellSize.width / childScaleX;
                    }
                  }

                  var anchorY = Math.abs(this._verticalDirection - childTrans.anchorY);
                  var childBoundingBoxWidth = childTrans.width * childScaleX;
                  var childBoundingBoxHeight = childTrans.height * childScaleY;

                  if (childBoundingBoxWidth > tempMaxWidth) {
                    maxWidth = Math.max(tempMaxWidth, maxWidth);
                    colMaxWidth = tempMaxWidth || childBoundingBoxWidth;
                    tempMaxWidth = childBoundingBoxWidth;
                  }

                  nextY += sign * (anchorY * childBoundingBoxHeight + this._spacingY);
                  var topBoundaryOfChild = sign * (1 - anchorY) * childBoundingBoxHeight;

                  if (columnBreak) {
                    if (limit > 0) {
                      isBreak = i / limit > 0 && i % limit === 0;

                      if (isBreak) {
                        colMaxWidth = tempMaxWidth > childBoundingBoxHeight ? tempMaxWidth : colMaxWidth;
                      }
                    } else if (childBoundingBoxHeight > baseHeight - paddingV) {
                      if (nextY > startPos + sign * (anchorY * childBoundingBoxHeight)) {
                        isBreak = true;
                      }
                    } else {
                      var boundary = (1 - this._verticalDirection - layoutAnchor.y) * baseHeight;
                      var columnBreakBoundary = nextY + topBoundaryOfChild + sign * (sign > 0 ? this._paddingTop : this._paddingBottom);
                      isBreak = Math.abs(columnBreakBoundary) > Math.abs(boundary);
                    }

                    if (isBreak) {
                      nextY = startPos + sign * (anchorY * childBoundingBoxHeight);

                      if (childBoundingBoxWidth !== tempMaxWidth) {
                        colMaxWidth = tempMaxWidth;
                      }

                      totalWidth += colMaxWidth + this._spacingX;
                      colMaxWidth = tempMaxWidth = childBoundingBoxWidth;
                    }
                  }

                  var finalPositionX = fnPositionX(child, childTrans, totalWidth);

                  if (applyChildren) {
                    child.getPosition(_tempVec3);
                    child.setPosition(finalPositionX, nextY, _tempVec3.z);
                  }

                  nextY += topBoundaryOfChild;
                }

                colMaxWidth = Math.max(colMaxWidth, tempMaxWidth);

                var containerResizeBoundary = Math.max(maxWidth, totalWidth + colMaxWidth) + this._getPaddingH();

                return containerResizeBoundary;
              };

              _proto._doLayoutGridAxisHorizontal = function _doLayoutGridAxisHorizontal(layoutAnchor, layoutSize) {
                var _this2 = this;

                var baseWidth = layoutSize.width;
                var sign = 1;
                var bottomBoundaryOfLayout = -layoutAnchor.y * layoutSize.height;
                var paddingY = this._paddingBottom;

                if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                  sign = -1;
                  bottomBoundaryOfLayout = (1 - layoutAnchor.y) * layoutSize.height;
                  paddingY = this._paddingTop;
                }

                var fnPositionY = function fnPositionY(child, childTrans, topOffset) {
                  return bottomBoundaryOfLayout + sign * (topOffset + (1 - childTrans.anchorY) * childTrans.height * _this2._getUsedScaleValue(child.scale.y) + paddingY);
                };

                var newHeight = 0;

                if (this._resizeMode === ResizeMode.CONTAINER) {
                  newHeight = this._doLayoutHorizontally(baseWidth, true, fnPositionY, false);
                  bottomBoundaryOfLayout = -layoutAnchor.y * newHeight;

                  if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
                    sign = -1;
                    bottomBoundaryOfLayout = (1 - layoutAnchor.y) * newHeight;
                  }
                }

                this._doLayoutHorizontally(baseWidth, true, fnPositionY, true);

                if (this._resizeMode === ResizeMode.CONTAINER) {
                  this.node._uiProps.uiTransformComp.setContentSize(baseWidth, newHeight);
                }
              };

              _proto._doLayoutGridAxisVertical = function _doLayoutGridAxisVertical(layoutAnchor, layoutSize) {
                var _this3 = this;

                var baseHeight = layoutSize.height;
                var sign = 1;
                var leftBoundaryOfLayout = -layoutAnchor.x * layoutSize.width;
                var paddingX = this._paddingLeft;

                if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                  sign = -1;
                  leftBoundaryOfLayout = (1 - layoutAnchor.x) * layoutSize.width;
                  paddingX = this._paddingRight;
                }

                var fnPositionX = function fnPositionX(child, childTrans, leftOffset) {
                  return leftBoundaryOfLayout + sign * (leftOffset + (1 - childTrans.anchorX) * childTrans.width * _this3._getUsedScaleValue(child.scale.x) + paddingX);
                };

                var newWidth = 0;

                if (this._resizeMode === ResizeMode.CONTAINER) {
                  newWidth = this._doLayoutVertically(baseHeight, true, fnPositionX, false);
                  leftBoundaryOfLayout = -layoutAnchor.x * newWidth;

                  if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
                    sign = -1;
                    leftBoundaryOfLayout = (1 - layoutAnchor.x) * newWidth;
                  }
                }

                this._doLayoutVertically(baseHeight, true, fnPositionX, true);

                if (this._resizeMode === ResizeMode.CONTAINER) {
                  this.node._uiProps.uiTransformComp.setContentSize(newWidth, baseHeight);
                }
              };

              _proto._doLayoutGrid = function _doLayoutGrid() {
                var trans = this.node._uiProps.uiTransformComp;
                var layoutAnchor = trans.anchorPoint;
                var layoutSize = trans.contentSize;

                if (this.startAxis === AxisDirection.HORIZONTAL) {
                  this._doLayoutGridAxisHorizontal(layoutAnchor, layoutSize);
                } else if (this.startAxis === AxisDirection.VERTICAL) {
                  this._doLayoutGridAxisVertical(layoutAnchor, layoutSize);
                }
              };

              _proto._getHorizontalBaseWidth = function _getHorizontalBaseWidth(horizontal) {

                var children = this._usefulLayoutObj;
                var baseSize = 0;
                var activeChildCount = children.length;

                if (this._resizeMode === ResizeMode.CONTAINER) {
                  for (var i = 0; i < children.length; ++i) {
                    var childTrans = children[i];
                    var child = childTrans.node;
                    var scale = child.scale;
                    baseSize += childTrans.width * this._getUsedScaleValue(scale.x);
                  }

                  baseSize += (activeChildCount - 1) * this._spacingX + this._getPaddingH();
                } else {
                  baseSize = this.node._uiProps.uiTransformComp.width;
                }

                return baseSize;
              };

              _proto._getVerticalBaseHeight = function _getVerticalBaseHeight() {
                var children = this._usefulLayoutObj;
                var baseSize = 0;
                var activeChildCount = children.length;

                if (this._resizeMode === ResizeMode.CONTAINER) {
                  for (var i = 0; i < children.length; ++i) {
                    var childTrans = children[i];
                    var child = childTrans.node;
                    var scale = child.scale;
                    baseSize += childTrans.height * this._getUsedScaleValue(scale.y);
                  }

                  baseSize += (activeChildCount - 1) * this._spacingY + this._getPaddingV();
                } else {
                  baseSize = this.node._uiProps.uiTransformComp.height;
                }

                return baseSize;
              };

              _proto._doLayout = function _doLayout() {
                var _this4 = this;

                if (!this._init || this._childrenDirty) {
                  this._checkUsefulObj();

                  this._init = true;
                  this._childrenDirty = false;
                }

                if (this._layoutType === Type.HORIZONTAL) {
                  var newWidth = this._getHorizontalBaseWidth();

                  var fnPositionY = function fnPositionY(child) {
                    var pos = _this4._isAlign ? Vec3.ZERO : child.position;
                    return pos.y;
                  };

                  this._doLayoutHorizontally(newWidth, false, fnPositionY, true);

                  this.node._uiProps.uiTransformComp.width = newWidth;
                } else if (this._layoutType === Type.VERTICAL) {
                  var newHeight = this._getVerticalBaseHeight();

                  var fnPositionX = function fnPositionX(child) {
                    var pos = _this4._isAlign ? Vec3.ZERO : child.position;
                    return pos.x;
                  };

                  this._doLayoutVertically(newHeight, false, fnPositionX, true);

                  this.node._uiProps.uiTransformComp.height = newHeight;
                } else if (this._layoutType === Type.GRID) {
                  this._doLayoutGrid();
                }
              };

              _proto._getUsedScaleValue = function _getUsedScaleValue(value) {
                return this._affectedByScale ? Math.abs(value) : 1;
              };

              _proto._transformDirty = function _transformDirty(type) {
                if (!(type & TransformBit.SCALE) || !(type & TransformBit.POSITION) || !this._affectedByScale) {
                  return;
                }

                this._doLayoutDirty();
              };

              _proto._doLayoutDirty = function _doLayoutDirty() {
                this._layoutDirty = true;
              };

              _proto._childrenChanged = function _childrenChanged() {
                this._childrenDirty = true;

                this._doLayoutDirty();
              };

              _proto._getPaddingH = function _getPaddingH() {
                return this._paddingLeft + this._paddingRight;
              };

              _proto._getPaddingV = function _getPaddingV() {
                return this._paddingTop + this._paddingBottom;
              };

              _proto._getFixedBreakingNum = function _getFixedBreakingNum() {
                if (this._layoutType !== Type.GRID || this._constraint === Constraint.NONE || this._constraintNum <= 0) {
                  return 0;
                }

                var num = this._constraint === Constraint.FIXED_ROW ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum;

                if (this._startAxis === AxisDirection.VERTICAL) {
                  num = this._constraint === Constraint.FIXED_COL ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum;
                }

                return num;
              };

              _createClass(Layout, [{
                key: "alignHorizontal",
                get: function get() {
                  return this._isAlign;
                },
                set: function set(value) {
                  if (this._layoutType !== Type.HORIZONTAL) {
                    return;
                  }

                  this._isAlign = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "alignVertical",
                get: function get() {
                  return this._isAlign;
                },
                set: function set(value) {
                  if (this._layoutType !== Type.VERTICAL) {
                    return;
                  }

                  this._isAlign = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "type",
                get: function get() {
                  return this._layoutType;
                },
                set: function set(value) {
                  this._layoutType = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "resizeMode",
                get: function get() {
                  return this._resizeMode;
                },
                set: function set(value) {
                  if (this._layoutType === Type.NONE) {
                    return;
                  }

                  this._resizeMode = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "cellSize",
                get: function get() {
                  return this._cellSize;
                },
                set: function set(value) {
                  if (this._cellSize === value) {
                    return;
                  }

                  this._cellSize.set(value);

                  this._doLayoutDirty();
                }
              }, {
                key: "startAxis",
                get: function get() {
                  return this._startAxis;
                },
                set: function set(value) {
                  if (this._startAxis === value) {
                    return;
                  }

                  this._startAxis = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "paddingLeft",
                get: function get() {
                  return this._paddingLeft;
                },
                set: function set(value) {
                  if (this._paddingLeft === value) {
                    return;
                  }

                  this._paddingLeft = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "paddingRight",
                get: function get() {
                  return this._paddingRight;
                },
                set: function set(value) {
                  if (this._paddingRight === value) {
                    return;
                  }

                  this._paddingRight = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "paddingTop",
                get: function get() {
                  return this._paddingTop;
                },
                set: function set(value) {
                  if (this._paddingTop === value) {
                    return;
                  }

                  this._paddingTop = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "paddingBottom",
                get: function get() {
                  return this._paddingBottom;
                },
                set: function set(value) {
                  if (this._paddingBottom === value) {
                    return;
                  }

                  this._paddingBottom = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "spacingX",
                get: function get() {
                  return this._spacingX;
                },
                set: function set(value) {
                  if (this._spacingX === value) {
                    return;
                  }

                  this._spacingX = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "spacingY",
                get: function get() {
                  return this._spacingY;
                },
                set: function set(value) {
                  if (this._spacingY === value) {
                    return;
                  }

                  this._spacingY = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "verticalDirection",
                get: function get() {
                  return this._verticalDirection;
                },
                set: function set(value) {
                  if (this._verticalDirection === value) {
                    return;
                  }

                  this._verticalDirection = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "horizontalDirection",
                get: function get() {
                  return this._horizontalDirection;
                },
                set: function set(value) {
                  if (this._horizontalDirection === value) {
                    return;
                  }

                  this._horizontalDirection = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "padding",
                get: function get() {
                  return this._paddingLeft;
                },
                set: function set(value) {
                  if (this.paddingLeft !== value || this._paddingRight !== value || this._paddingTop !== value || this._paddingBottom !== value) {
                    this._paddingLeft = this._paddingRight = this._paddingTop = this._paddingBottom = value;

                    this._doLayoutDirty();
                  }
                }
              }, {
                key: "constraint",
                get: function get() {
                  return this._constraint;
                },
                set: function set(value) {
                  if (this._layoutType === Type.NONE || this._constraint === value) {
                    return;
                  }

                  this._constraint = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "constraintNum",
                get: function get() {
                  return this._constraintNum;
                },
                set: function set(value) {
                  if (this._constraint === Constraint.NONE || this._constraintNum === value) {
                    return;
                  }

                  if (value <= 0) {
                    warn('Limit values to be greater than 0');
                  }

                  this._constraintNum = value;

                  this._doLayoutDirty();
                }
              }, {
                key: "affectedByScale",
                get: function get() {
                  return this._affectedByScale;
                },
                set: function set(value) {
                  this._affectedByScale = value;

                  this._doLayoutDirty();
                }
              }]);

              return Layout;
            }(Component), _class3$k.Type = Type, _class3$k.VerticalDirection = VerticalDirection, _class3$k.HorizontalDirection = HorizontalDirection, _class3$k.ResizeMode = ResizeMode, _class3$k.AxisDirection = AxisDirection, _class3$k.Constraint = Constraint, _temp$1s), (_applyDecoratedDescriptor(_class2$1n.prototype, "alignHorizontal", [_dec6$D, _dec7$C], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "alignHorizontal"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "alignVertical", [_dec8$A, _dec9$w], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "alignVertical"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "type", [_dec10$u, _dec11$p, _dec12$p], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "type"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "resizeMode", [_dec13$p, _dec14$n, _dec15$n], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "resizeMode"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "cellSize", [_dec16$m, _dec17$k], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "cellSize"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "startAxis", [_dec18$j, _dec19$j], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "startAxis"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "paddingLeft", [_dec20$i], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "paddingLeft"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "paddingRight", [_dec21$h], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "paddingRight"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "paddingTop", [_dec22$f], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "paddingTop"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "paddingBottom", [_dec23$e], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "paddingBottom"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "spacingX", [_dec24$d], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "spacingX"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "spacingY", [_dec25$d], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "spacingY"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "verticalDirection", [_dec26$c, _dec27$c], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "verticalDirection"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "horizontalDirection", [_dec28$b, _dec29$a], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "horizontalDirection"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "constraint", [_dec30$9, _dec31$9, _dec32$9], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "constraint"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "constraintNum", [_dec33$7, _dec34$7], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "constraintNum"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "affectedByScale", [_dec35$7], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "affectedByScale"), _class2$1n.prototype), _descriptor$1j = _applyDecoratedDescriptor(_class2$1n.prototype, "_resizeMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return ResizeMode.NONE;
              }
            }), _descriptor2$18 = _applyDecoratedDescriptor(_class2$1n.prototype, "_layoutType", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Type.NONE;
              }
            }), _descriptor3$V = _applyDecoratedDescriptor(_class2$1n.prototype, "_cellSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Size$1(40, 40);
              }
            }), _descriptor4$P = _applyDecoratedDescriptor(_class2$1n.prototype, "_startAxis", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return AxisDirection.HORIZONTAL;
              }
            }), _descriptor5$G = _applyDecoratedDescriptor(_class2$1n.prototype, "_paddingLeft", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor6$A = _applyDecoratedDescriptor(_class2$1n.prototype, "_paddingRight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor7$q = _applyDecoratedDescriptor(_class2$1n.prototype, "_paddingTop", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor8$n = _applyDecoratedDescriptor(_class2$1n.prototype, "_paddingBottom", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor9$j = _applyDecoratedDescriptor(_class2$1n.prototype, "_spacingX", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor10$h = _applyDecoratedDescriptor(_class2$1n.prototype, "_spacingY", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor11$f = _applyDecoratedDescriptor(_class2$1n.prototype, "_verticalDirection", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return VerticalDirection.TOP_TO_BOTTOM;
              }
            }), _descriptor12$f = _applyDecoratedDescriptor(_class2$1n.prototype, "_horizontalDirection", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return HorizontalDirection.LEFT_TO_RIGHT;
              }
            }), _descriptor13$e = _applyDecoratedDescriptor(_class2$1n.prototype, "_constraint", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Constraint.NONE;
              }
            }), _descriptor14$7 = _applyDecoratedDescriptor(_class2$1n.prototype, "_constraintNum", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 2;
              }
            }), _descriptor15$6 = _applyDecoratedDescriptor(_class2$1n.prototype, "_affectedByScale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor16$6 = _applyDecoratedDescriptor(_class2$1n.prototype, "_isAlign", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            })), _class2$1n)) || _class$1z) || _class$1z) || _class$1z) || _class$1z) || _class$1z) || _class$1z));
            legacyCC.Layout = Layout;

            var _dec$1x, _dec2$1f, _dec3$S, _dec4$N, _dec5$H, _dec6$E, _dec7$D, _dec8$B, _dec9$x, _dec10$v, _dec11$q, _dec12$q, _dec13$q, _class$1A, _class2$1o, _descriptor$1k, _descriptor2$19, _descriptor3$W, _descriptor4$Q, _descriptor5$H, _class3$l, _temp$1t;
            var Mode$4;

            (function (Mode) {
              Mode[Mode["HORIZONTAL"] = 0] = "HORIZONTAL";
              Mode[Mode["VERTICAL"] = 1] = "VERTICAL";
              Mode[Mode["FILLED"] = 2] = "FILLED";
            })(Mode$4 || (Mode$4 = {}));

            Enum(Mode$4);
            var ProgressBar = function (v) { return exports({ ProgressBar: v, ProgressBarComponent: v }), v; }((_dec$1x = ccclass('cc.ProgressBar'), _dec2$1f = help(), _dec3$S = executionOrder(110), _dec4$N = menu$1(), _dec5$H = requireComponent(UITransform), _dec6$E = type$1(Sprite), _dec7$D = tooltip(), _dec8$B = type$1(Mode$4), _dec9$x = tooltip(), _dec10$v = tooltip(), _dec11$q = range(), _dec12$q = tooltip(), _dec13$q = tooltip(), _dec$1x(_class$1A = _dec2$1f(_class$1A = _dec3$S(_class$1A = _dec4$N(_class$1A = _dec5$H(_class$1A = (_class2$1o = (_temp$1t = _class3$l = function (_Component) {
              _inheritsLoose(ProgressBar, _Component);

              function ProgressBar() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_barSprite", _descriptor$1k, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_mode", _descriptor2$19, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_totalLength", _descriptor3$W, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_progress", _descriptor4$Q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_reverse", _descriptor5$H, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = ProgressBar.prototype;

              _proto._initBarSprite = function _initBarSprite() {
                if (this._barSprite) {
                  var entity = this._barSprite.node;

                  if (!entity) {
                    return;
                  }

                  var trans = this.node._uiProps.uiTransformComp;
                  var nodeSize = trans.contentSize;
                  var nodeAnchor = trans.anchorPoint;
                  var barSpriteSize = entity._uiProps.uiTransformComp.contentSize;

                  if (this._barSprite.fillType === Sprite.FillType.RADIAL) {
                    this._mode = Mode$4.FILLED;
                  }

                  if (this._mode === Mode$4.HORIZONTAL) {
                    this.totalLength = barSpriteSize.width;
                  } else if (this._mode === Mode$4.VERTICAL) {
                    this.totalLength = barSpriteSize.height;
                  } else {
                    this.totalLength = this._barSprite.fillRange;
                  }

                  if (entity.parent === this.node) {
                    var x = -nodeSize.width * nodeAnchor.x;
                    entity.setPosition(x, 0, 0);
                  }
                }
              };

              _proto._updateBarStatus = function _updateBarStatus() {
                if (this._barSprite) {
                  var entity = this._barSprite.node;

                  if (!entity) {
                    return;
                  }

                  var entTrans = entity._uiProps.uiTransformComp;
                  var entityAnchorPoint = entTrans.anchorPoint;
                  var entitySize = entTrans.contentSize;
                  var entityPosition = entity.getPosition();
                  var anchorPoint = new Vec2(0, 0.5);
                  var progress = clamp01(this._progress);
                  var actualLenth = this._totalLength * progress;
                  var finalContentSize = entitySize;
                  var totalWidth = 0;
                  var totalHeight = 0;

                  switch (this._mode) {
                    case Mode$4.HORIZONTAL:
                      if (this._reverse) {
                        anchorPoint = new Vec2(1, 0.5);
                      }

                      finalContentSize = new Size$1(actualLenth, entitySize.height);
                      totalWidth = this._totalLength;
                      totalHeight = entitySize.height;
                      break;

                    case Mode$4.VERTICAL:
                      if (this._reverse) {
                        anchorPoint = new Vec2(0.5, 1);
                      } else {
                        anchorPoint = new Vec2(0.5, 0);
                      }

                      finalContentSize = new Size$1(entitySize.width, actualLenth);
                      totalWidth = entitySize.width;
                      totalHeight = this._totalLength;
                      break;
                  }

                  if (this._mode === Mode$4.FILLED) {
                    if (this._barSprite.type !== Sprite.Type.FILLED) {
                      warn('ProgressBar FILLED mode only works when barSprite\'s Type is FILLED!');
                    } else {
                      if (this._reverse) {
                        actualLenth *= -1;
                      }

                      this._barSprite.fillRange = actualLenth;
                    }
                  } else if (this._barSprite.type !== Sprite.Type.FILLED) {
                    var anchorOffsetX = anchorPoint.x - entityAnchorPoint.x;
                    var anchorOffsetY = anchorPoint.y - entityAnchorPoint.y;
                    var finalPosition = new Vec3(totalWidth * anchorOffsetX, totalHeight * anchorOffsetY, 0);
                    entity.setPosition(entityPosition.x + finalPosition.x, entityPosition.y + finalPosition.y, entityPosition.z);
                    entTrans.setAnchorPoint(anchorPoint);
                    entTrans.setContentSize(finalContentSize);
                  } else {
                    warn('ProgressBar non-FILLED mode only works when barSprite\'s Type is non-FILLED!');
                  }
                }
              };

              _createClass(ProgressBar, [{
                key: "barSprite",
                get: function get() {
                  return this._barSprite;
                },
                set: function set(value) {
                  if (this._barSprite === value) {
                    return;
                  }

                  this._barSprite = value;

                  this._initBarSprite();
                }
              }, {
                key: "mode",
                get: function get() {
                  return this._mode;
                },
                set: function set(value) {
                  if (this._mode === value) {
                    return;
                  }

                  this._mode = value;

                  if (this._barSprite) {
                    var entity = this._barSprite.node;

                    if (!entity) {
                      return;
                    }

                    var entitySize = entity._uiProps.uiTransformComp.contentSize;

                    if (this._mode === Mode$4.HORIZONTAL) {
                      this.totalLength = entitySize.width;
                    } else if (this._mode === Mode$4.VERTICAL) {
                      this.totalLength = entitySize.height;
                    } else if (this._mode === Mode$4.FILLED) {
                      this.totalLength = this._barSprite.fillRange;
                    }
                  }
                }
              }, {
                key: "totalLength",
                get: function get() {
                  return this._totalLength;
                },
                set: function set(value) {
                  if (this._mode === Mode$4.FILLED) {
                    value = clamp01(value);
                  }

                  if (this._totalLength === value) {
                    return;
                  }

                  this._totalLength = value;

                  this._updateBarStatus();
                }
              }, {
                key: "progress",
                get: function get() {
                  return this._progress;
                },
                set: function set(value) {
                  if (this._progress === value) {
                    return;
                  }

                  this._progress = value;

                  this._updateBarStatus();
                }
              }, {
                key: "reverse",
                get: function get() {
                  return this._reverse;
                },
                set: function set(value) {
                  if (this._reverse === value) {
                    return;
                  }

                  this._reverse = value;

                  if (this._barSprite) {
                    this._barSprite.fillStart = 1 - this._barSprite.fillStart;
                  }

                  this._updateBarStatus();
                }
              }]);

              return ProgressBar;
            }(Component), _class3$l.Mode = Mode$4, _temp$1t), (_applyDecoratedDescriptor(_class2$1o.prototype, "barSprite", [_dec6$E, _dec7$D], Object.getOwnPropertyDescriptor(_class2$1o.prototype, "barSprite"), _class2$1o.prototype), _applyDecoratedDescriptor(_class2$1o.prototype, "mode", [_dec8$B, _dec9$x], Object.getOwnPropertyDescriptor(_class2$1o.prototype, "mode"), _class2$1o.prototype), _applyDecoratedDescriptor(_class2$1o.prototype, "totalLength", [_dec10$v], Object.getOwnPropertyDescriptor(_class2$1o.prototype, "totalLength"), _class2$1o.prototype), _applyDecoratedDescriptor(_class2$1o.prototype, "progress", [_dec11$q, slide, _dec12$q], Object.getOwnPropertyDescriptor(_class2$1o.prototype, "progress"), _class2$1o.prototype), _applyDecoratedDescriptor(_class2$1o.prototype, "reverse", [_dec13$q], Object.getOwnPropertyDescriptor(_class2$1o.prototype, "reverse"), _class2$1o.prototype), _descriptor$1k = _applyDecoratedDescriptor(_class2$1o.prototype, "_barSprite", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$19 = _applyDecoratedDescriptor(_class2$1o.prototype, "_mode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Mode$4.HORIZONTAL;
              }
            }), _descriptor3$W = _applyDecoratedDescriptor(_class2$1o.prototype, "_totalLength", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor4$Q = _applyDecoratedDescriptor(_class2$1o.prototype, "_progress", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.1;
              }
            }), _descriptor5$H = _applyDecoratedDescriptor(_class2$1o.prototype, "_reverse", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            })), _class2$1o)) || _class$1A) || _class$1A) || _class$1A) || _class$1A) || _class$1A));
            legacyCC.ProgressBar = ProgressBar;

            var _dec$1y, _dec2$1g, _dec3$T, _dec4$O, _dec5$I, _dec6$F, _dec7$E, _dec8$C, _dec9$y, _dec10$w, _dec11$r, _dec12$r, _dec13$r, _dec14$o, _dec15$o, _class$1B, _class2$1p, _descriptor$1l, _descriptor2$1a, _descriptor3$X, _descriptor4$R, _descriptor5$I, _class3$m, _temp$1u;
            var GETTING_SHORTER_FACTOR = 20;

            var _tempPos_1 = new Vec3();

            var _tempPos_2 = new Vec3();

            var _tempVec3$1 = new Vec3();

            var defaultAnchor = new Vec2();

            var _tempColor$1 = new Color$1();

            var _tempVec2 = new Vec2();

            var Direction;

            (function (Direction) {
              Direction[Direction["HORIZONTAL"] = 0] = "HORIZONTAL";
              Direction[Direction["VERTICAL"] = 1] = "VERTICAL";
            })(Direction || (Direction = {}));

            ccenum(Direction);
            var ScrollBar = function (v) { return exports({ ScrollBar: v, ScrollBarComponent: v }), v; }((_dec$1y = ccclass('cc.ScrollBar'), _dec2$1g = help(), _dec3$T = executionOrder(110), _dec4$O = menu$1(), _dec5$I = requireComponent(UITransform), _dec6$F = type$1(Sprite), _dec7$E = displayOrder(), _dec8$C = tooltip(), _dec9$y = type$1(Direction), _dec10$w = displayOrder(), _dec11$r = tooltip(), _dec12$r = displayOrder(), _dec13$r = tooltip(), _dec14$o = displayOrder(), _dec15$o = tooltip(), _dec$1y(_class$1B = _dec2$1g(_class$1B = _dec3$T(_class$1B = _dec4$O(_class$1B = _dec5$I(_class$1B = (_class2$1p = (_temp$1u = _class3$m = function (_Component) {
              _inheritsLoose(ScrollBar, _Component);

              function ScrollBar() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_scrollView", _descriptor$1l, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_handle", _descriptor2$1a, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_direction", _descriptor3$X, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_enableAutoHide", _descriptor4$R, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_autoHideTime", _descriptor5$I, _assertThisInitialized(_this));

                _this._touching = false;
                _this._opacity = 255;
                _this._autoHideRemainingTime = 0;
                return _this;
              }

              var _proto = ScrollBar.prototype;

              _proto.hide = function hide() {
                this._autoHideRemainingTime = 0;

                this._setOpacity(0);
              };

              _proto.show = function show() {
                this._autoHideRemainingTime = this._autoHideTime;

                this._setOpacity(this._opacity);
              };

              _proto.onScroll = function onScroll(outOfBoundary) {
                if (!this._scrollView) {
                  return;
                }

                var content = this._scrollView.content;

                if (!content) {
                  return;
                }

                var contentSize = content._uiProps.uiTransformComp.contentSize;
                var scrollViewSize = this._scrollView.node._uiProps.uiTransformComp.contentSize;
                var barSize = this.node._uiProps.uiTransformComp.contentSize;

                if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
                  return;
                }

                if (this._enableAutoHide) {
                  this._autoHideRemainingTime = this._autoHideTime;

                  this._setOpacity(this._opacity);
                }

                var contentMeasure = 0;
                var scrollViewMeasure = 0;
                var outOfBoundaryValue = 0;
                var contentPosition = 0;
                var handleNodeMeasure = 0;
                var outOfContentPosition = _tempVec2;
                outOfContentPosition.set(0, 0);

                if (this._direction === Direction.HORIZONTAL) {
                  contentMeasure = contentSize.width;
                  scrollViewMeasure = scrollViewSize.width;
                  handleNodeMeasure = barSize.width;
                  outOfBoundaryValue = outOfBoundary.x;

                  this._convertToScrollViewSpace(outOfContentPosition, content);

                  contentPosition = -outOfContentPosition.x;
                } else if (this._direction === Direction.VERTICAL) {
                  contentMeasure = contentSize.height;
                  scrollViewMeasure = scrollViewSize.height;
                  handleNodeMeasure = barSize.height;
                  outOfBoundaryValue = outOfBoundary.y;

                  this._convertToScrollViewSpace(outOfContentPosition, content);

                  contentPosition = -outOfContentPosition.y;
                }

                var length = this._calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundaryValue);

                var position = _tempVec2;

                this._calculatePosition(position, contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundaryValue, length);

                this._updateLength(length);

                this._updateHandlerPosition(position);
              };

              _proto.setScrollView = function setScrollView(scrollView) {
                this._scrollView = scrollView;
              };

              _proto.onTouchBegan = function onTouchBegan() {
                if (!this._enableAutoHide) {
                  return;
                }

                this._touching = true;
              };

              _proto.onTouchEnded = function onTouchEnded() {
                if (!this._enableAutoHide) {
                  return;
                }

                this._touching = false;

                if (this._autoHideTime <= 0) {
                  return;
                }

                if (this._scrollView) {
                  var content = this._scrollView.content;

                  if (content) {
                    var contentSize = content._uiProps.uiTransformComp.contentSize;
                    var scrollViewSize = this._scrollView.node._uiProps.uiTransformComp.contentSize;

                    if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
                      return;
                    }
                  }
                }

                this._autoHideRemainingTime = this._autoHideTime;
              };

              _proto.onEnable = function onEnable() {
                var renderComp = this.node.getComponent(Sprite);

                if (renderComp) {
                  this._opacity = renderComp.color.a;
                }
              };

              _proto.start = function start() {
                if (this._enableAutoHide) {
                  this._setOpacity(0);
                }
              };

              _proto.update = function update(dt) {
                this._processAutoHide(dt);
              };

              _proto._convertToScrollViewSpace = function _convertToScrollViewSpace(out, content) {
                var scrollTrans = this._scrollView && this._scrollView.node._uiProps.uiTransformComp;
                var contentTrans = content._uiProps.uiTransformComp;

                if (!scrollTrans || !contentTrans) {
                  out.set(Vec2.ZERO);
                } else {
                  _tempPos_1.set(-contentTrans.anchorX * contentTrans.width, -contentTrans.anchorY * contentTrans.height, 0);

                  contentTrans.convertToWorldSpaceAR(_tempPos_1, _tempPos_2);
                  var scrollViewSpacePos = scrollTrans.convertToNodeSpaceAR(_tempPos_2);
                  scrollViewSpacePos.x += scrollTrans.anchorX * scrollTrans.width;
                  scrollViewSpacePos.y += scrollTrans.anchorY * scrollTrans.height;
                  out.set(scrollViewSpacePos.x, scrollViewSpacePos.y);
                }
              };

              _proto._setOpacity = function _setOpacity(opacity) {
                if (this._handle) {
                  var renderComp = this.node.getComponent(Sprite);

                  if (renderComp) {
                    _tempColor$1.set(renderComp.color);

                    _tempColor$1.a = opacity;
                    renderComp.color = _tempColor$1;
                  }

                  renderComp = this._handle.getComponent(Sprite);

                  if (renderComp) {
                    _tempColor$1.set(renderComp.color);

                    _tempColor$1.a = opacity;
                    renderComp.color = _tempColor$1;
                  }
                }
              };

              _proto._updateHandlerPosition = function _updateHandlerPosition(position) {
                if (this._handle) {
                  var oldPosition = _tempVec3$1;

                  this._fixupHandlerPosition(oldPosition);

                  this._handle.node.setPosition(position.x + oldPosition.x, position.y + oldPosition.y, oldPosition.z);
                }
              };

              _proto._fixupHandlerPosition = function _fixupHandlerPosition(out) {
                var uiTrans = this.node._uiProps.uiTransformComp;
                var barSize = uiTrans.contentSize;
                var barAnchor = uiTrans.anchorPoint;
                var handleSize = this.handle.node._uiProps.uiTransformComp.contentSize;
                var handleParent = this.handle.node.parent;
                Vec3.set(_tempPos_1, -barSize.width * barAnchor.x, -barSize.height * barAnchor.y, 0);

                var leftBottomWorldPosition = this.node._uiProps.uiTransformComp.convertToWorldSpaceAR(_tempPos_1, _tempPos_2);

                var fixupPosition = out;
                fixupPosition.set(0, 0, 0);

                handleParent._uiProps.uiTransformComp.convertToNodeSpaceAR(leftBottomWorldPosition, fixupPosition);

                if (this.direction === Direction.HORIZONTAL) {
                  fixupPosition.set(fixupPosition.x, fixupPosition.y + (barSize.height - handleSize.height) / 2, fixupPosition.z);
                } else if (this.direction === Direction.VERTICAL) {
                  fixupPosition.set(fixupPosition.x + (barSize.width - handleSize.width) / 2, fixupPosition.y, fixupPosition.z);
                }

                this.handle.node.setPosition(fixupPosition);
              };

              _proto._conditionalDisableScrollBar = function _conditionalDisableScrollBar(contentSize, scrollViewSize) {
                if (contentSize.width <= scrollViewSize.width && this._direction === Direction.HORIZONTAL) {
                  return true;
                }

                if (contentSize.height <= scrollViewSize.height && this._direction === Direction.VERTICAL) {
                  return true;
                }

                return false;
              };

              _proto._calculateLength = function _calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundary) {
                var denominatorValue = contentMeasure;

                if (outOfBoundary) {
                  denominatorValue += (outOfBoundary > 0 ? outOfBoundary : -outOfBoundary) * GETTING_SHORTER_FACTOR;
                }

                var lengthRation = scrollViewMeasure / denominatorValue;
                return handleNodeMeasure * lengthRation;
              };

              _proto._calculatePosition = function _calculatePosition(out, contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundary, actualLenth) {
                var denominatorValue = contentMeasure - scrollViewMeasure;

                if (outOfBoundary) {
                  denominatorValue += Math.abs(outOfBoundary);
                }

                var positionRatio = 0;

                if (denominatorValue) {
                  positionRatio = contentPosition / denominatorValue;
                  positionRatio = clamp01(positionRatio);
                }

                var position = (handleNodeMeasure - actualLenth) * positionRatio;

                if (this._direction === Direction.VERTICAL) {
                  out.set(0, position);
                } else {
                  out.set(position, 0);
                }
              };

              _proto._updateLength = function _updateLength(length) {
                if (this._handle) {
                  var handleNode = this._handle.node;
                  var handleTrans = handleNode._uiProps.uiTransformComp;
                  var handleNodeSize = handleTrans.contentSize;
                  var anchor = handleTrans.anchorPoint;

                  if (anchor.x !== defaultAnchor.x || anchor.y !== defaultAnchor.y) {
                    handleTrans.setAnchorPoint(defaultAnchor);
                  }

                  if (this._direction === Direction.HORIZONTAL) {
                    handleTrans.setContentSize(length, handleNodeSize.height);
                  } else {
                    handleTrans.setContentSize(handleNodeSize.width, length);
                  }
                }
              };

              _proto._processAutoHide = function _processAutoHide(deltaTime) {
                if (!this._enableAutoHide || this._autoHideRemainingTime <= 0) {
                  return;
                } else if (this._touching) {
                  return;
                }

                this._autoHideRemainingTime -= deltaTime;

                if (this._autoHideRemainingTime <= this._autoHideTime) {
                  this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
                  var opacity = this._opacity * (this._autoHideRemainingTime / this._autoHideTime);

                  this._setOpacity(opacity);
                }
              };

              _createClass(ScrollBar, [{
                key: "handle",
                get: function get() {
                  return this._handle;
                },
                set: function set(value) {
                  if (this._handle === value) {
                    return;
                  }

                  this._handle = value;
                  this.onScroll(Vec2.ZERO);
                }
              }, {
                key: "direction",
                get: function get() {
                  return this._direction;
                },
                set: function set(value) {
                  if (this._direction === value) {
                    return;
                  }

                  this._direction = value;
                  this.onScroll(Vec2.ZERO);
                }
              }, {
                key: "enableAutoHide",
                get: function get() {
                  return this._enableAutoHide;
                },
                set: function set(value) {
                  if (this._enableAutoHide === value) {
                    return;
                  }

                  this._enableAutoHide = value;

                  if (this._enableAutoHide) {
                    this._setOpacity(0);
                  }
                }
              }, {
                key: "autoHideTime",
                get: function get() {
                  return this._autoHideTime;
                },
                set: function set(value) {
                  if (this._autoHideTime === value) {
                    return;
                  }

                  this._autoHideTime = value;
                }
              }]);

              return ScrollBar;
            }(Component), _class3$m.Direction = Direction, _temp$1u), (_applyDecoratedDescriptor(_class2$1p.prototype, "handle", [_dec6$F, _dec7$E, _dec8$C], Object.getOwnPropertyDescriptor(_class2$1p.prototype, "handle"), _class2$1p.prototype), _applyDecoratedDescriptor(_class2$1p.prototype, "direction", [_dec9$y, _dec10$w, _dec11$r], Object.getOwnPropertyDescriptor(_class2$1p.prototype, "direction"), _class2$1p.prototype), _applyDecoratedDescriptor(_class2$1p.prototype, "enableAutoHide", [_dec12$r, _dec13$r], Object.getOwnPropertyDescriptor(_class2$1p.prototype, "enableAutoHide"), _class2$1p.prototype), _applyDecoratedDescriptor(_class2$1p.prototype, "autoHideTime", [_dec14$o, _dec15$o], Object.getOwnPropertyDescriptor(_class2$1p.prototype, "autoHideTime"), _class2$1p.prototype), _descriptor$1l = _applyDecoratedDescriptor(_class2$1p.prototype, "_scrollView", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor2$1a = _applyDecoratedDescriptor(_class2$1p.prototype, "_handle", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor3$X = _applyDecoratedDescriptor(_class2$1p.prototype, "_direction", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Direction.HORIZONTAL;
              }
            }), _descriptor4$R = _applyDecoratedDescriptor(_class2$1p.prototype, "_enableAutoHide", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor5$I = _applyDecoratedDescriptor(_class2$1p.prototype, "_autoHideTime", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            })), _class2$1p)) || _class$1B) || _class$1B) || _class$1B) || _class$1B) || _class$1B));
            legacyCC.ScrollBar = ScrollBar;

            var _dec$1z, _dec2$1h, _class$1C;
            var ViewGroup = exports('ViewGroup', (_dec$1z = ccclass('cc.ViewGroup'), _dec2$1h = executionOrder(110), _dec$1z(_class$1C = _dec2$1h(_class$1C = function (_Component) {
              _inheritsLoose(ViewGroup, _Component);

              function ViewGroup() {
                return _Component.apply(this, arguments) || this;
              }

              return ViewGroup;
            }(Component)) || _class$1C) || _class$1C));
            legacyCC.ViewGroup = ViewGroup;

            var _dec$1A, _dec2$1i, _dec3$U, _dec4$P, _dec5$J, _dec6$G, _dec7$F, _dec8$D, _dec9$z, _dec10$x, _dec11$s, _dec12$s, _dec13$s, _dec14$p, _dec15$p, _dec16$n, _dec17$l, _dec18$k, _dec19$k, _dec20$j, _dec21$i, _dec22$g, _dec23$f, _dec24$e, _dec25$e, _dec26$d, _dec27$d, _dec28$c, _dec29$b, _dec30$a, _dec31$a, _dec32$a, _dec33$8, _class$1D, _class2$1q, _descriptor$1m, _descriptor2$1b, _descriptor3$Y, _descriptor4$S, _descriptor5$J, _descriptor6$B, _descriptor7$r, _descriptor8$o, _descriptor9$k, _descriptor10$i, _descriptor11$g, _class3$n, _temp$1v;
            var NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED = 5;
            var OUT_OF_BOUNDARY_BREAKING_FACTOR = 0.05;
            var EPSILON$1 = 1e-4;
            var TOLERANCE = 1e4;
            var MOVEMENT_FACTOR = 0.7;

            var _tempVec3$2 = new Vec3();

            var _tempVec3_1 = new Vec3();

            var _tempVec2$1 = new Vec2();

            var _tempVec2_1 = new Vec2();

            var quintEaseOut = function quintEaseOut(time) {
              time -= 1;
              return time * time * time * time * time + 1;
            };

            var getTimeInMilliseconds = function getTimeInMilliseconds() {
              var currentTime = new Date();
              return currentTime.getMilliseconds();
            };

            var eventMap = {
              'scroll-to-top': 0,
              'scroll-to-bottom': 1,
              'scroll-to-left': 2,
              'scroll-to-right': 3,
              scrolling: 4,
              'bounce-bottom': 6,
              'bounce-left': 7,
              'bounce-right': 8,
              'bounce-top': 5,
              'scroll-ended': 9,
              'touch-up': 10,
              'scroll-ended-with-threshold': 11,
              'scroll-began': 12
            };
            var EventType$4;

            (function (EventType) {
              EventType["SCROLL_TO_TOP"] = "scroll-to-top";
              EventType["SCROLL_TO_BOTTOM"] = "scroll-to-bottom";
              EventType["SCROLL_TO_LEFT"] = "scroll-to-left";
              EventType["SCROLL_TO_RIGHT"] = "scroll-to-right";
              EventType["SCROLL_BEGAN"] = "scroll-began";
              EventType["SCROLL_ENDED"] = "scroll-ended";
              EventType["BOUNCE_TOP"] = "bounce-top";
              EventType["BOUNCE_BOTTOM"] = "bounce-bottom";
              EventType["BOUNCE_LEFT"] = "bounce-left";
              EventType["BOUNCE_RIGHT"] = "bounce-right";
              EventType["SCROLLING"] = "scrolling";
              EventType["SCROLL_ENG_WITH_THRESHOLD"] = "scroll-ended-with-threshold";
              EventType["TOUCH_UP"] = "touch-up";
            })(EventType$4 || (EventType$4 = {}));

            var ScrollView = function (v) { return exports({ ScrollView: v, ScrollViewComponent: v }), v; }((_dec$1A = ccclass('cc.ScrollView'), _dec2$1i = help(), _dec3$U = executionOrder(110), _dec4$P = menu$1(), _dec5$J = requireComponent(UITransform), _dec6$G = range(), _dec7$F = displayOrder(), _dec8$D = tooltip(), _dec9$z = range(), _dec10$x = displayOrder(), _dec11$s = tooltip(), _dec12$s = displayOrder(), _dec13$s = tooltip(), _dec14$p = displayOrder(), _dec15$p = tooltip(), _dec16$n = type$1(Node), _dec17$l = displayOrder(), _dec18$k = tooltip(), _dec19$k = displayOrder(), _dec20$j = tooltip(), _dec21$i = type$1(ScrollBar), _dec22$g = displayOrder(), _dec23$f = tooltip(), _dec24$e = displayOrder(), _dec25$e = tooltip(), _dec26$d = type$1(ScrollBar), _dec27$d = displayOrder(), _dec28$c = tooltip(), _dec29$b = displayOrder(), _dec30$a = tooltip(), _dec31$a = type$1([EventHandler]), _dec32$a = displayOrder(), _dec33$8 = tooltip(), _dec$1A(_class$1D = _dec2$1i(_class$1D = _dec3$U(_class$1D = _dec4$P(_class$1D = _dec5$J(_class$1D = (_class2$1q = (_temp$1v = _class3$n = function (_ViewGroup) {
              _inheritsLoose(ScrollView, _ViewGroup);

              function ScrollView() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _ViewGroup.call.apply(_ViewGroup, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "bounceDuration", _descriptor$1m, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "brake", _descriptor2$1b, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "elastic", _descriptor3$Y, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "inertia", _descriptor4$S, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "horizontal", _descriptor5$J, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "vertical", _descriptor6$B, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "cancelInnerEvents", _descriptor7$r, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "scrollEvents", _descriptor8$o, _assertThisInitialized(_this));

                _this._autoScrolling = false;
                _this._scrolling = false;

                _initializerDefineProperty(_this, "_content", _descriptor9$k, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_horizontalScrollBar", _descriptor10$i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_verticalScrollBar", _descriptor11$g, _assertThisInitialized(_this));

                _this._topBoundary = 0;
                _this._bottomBoundary = 0;
                _this._leftBoundary = 0;
                _this._rightBoundary = 0;
                _this._touchMoveDisplacements = [];
                _this._touchMoveTimeDeltas = [];
                _this._touchMovePreviousTimestamp = 0;
                _this._touchMoved = false;
                _this._autoScrollAttenuate = false;
                _this._autoScrollStartPosition = new Vec3();
                _this._autoScrollTargetDelta = new Vec3();
                _this._autoScrollTotalTime = 0;
                _this._autoScrollAccumulatedTime = 0;
                _this._autoScrollCurrentlyOutOfBoundary = false;
                _this._autoScrollBraking = false;
                _this._autoScrollBrakingStartPosition = new Vec3();
                _this._outOfBoundaryAmount = new Vec3();
                _this._outOfBoundaryAmountDirty = true;
                _this._stopMouseWheel = false;
                _this._mouseWheelEventElapsedTime = 0.0;
                _this._isScrollEndedWithThresholdEventFired = false;
                _this._scrollEventEmitMask = 0;
                _this._isBouncing = false;
                _this._contentPos = new Vec3();
                _this._deltaPos = new Vec3();
                return _this;
              }

              var _proto = ScrollView.prototype;

              _proto.scrollToBottom = function scrollToBottom(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(0, 0),
                  applyToHorizontal: false,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta, true);
                }
              };

              _proto.scrollToTop = function scrollToTop(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(0, 1),
                  applyToHorizontal: false,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToLeft = function scrollToLeft(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(0, 0),
                  applyToHorizontal: true,
                  applyToVertical: false
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToRight = function scrollToRight(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(1, 0),
                  applyToHorizontal: true,
                  applyToVertical: false
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToTopLeft = function scrollToTopLeft(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(0, 1),
                  applyToHorizontal: true,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToTopRight = function scrollToTopRight(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(1, 1),
                  applyToHorizontal: true,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToBottomLeft = function scrollToBottomLeft(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(0, 0),
                  applyToHorizontal: true,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToBottomRight = function scrollToBottomRight(timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(1, 0),
                  applyToHorizontal: true,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToOffset = function scrollToOffset(offset, timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = true;
                }

                var maxScrollOffset = this.getMaxScrollOffset();
                var anchor = new Vec2(0, 0);

                if (maxScrollOffset.x === 0) {
                  anchor.x = 0;
                } else {
                  anchor.x = offset.x / maxScrollOffset.x;
                }

                if (maxScrollOffset.y === 0) {
                  anchor.y = 1;
                } else {
                  anchor.y = (maxScrollOffset.y - offset.y) / maxScrollOffset.y;
                }

                this.scrollTo(anchor, timeInSecond, attenuated);
              };

              _proto.getScrollOffset = function getScrollOffset() {
                var topDelta = this._getContentTopBoundary() - this._topBoundary;

                var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

                return new Vec2(leftDelta, topDelta);
              };

              _proto.getMaxScrollOffset = function getMaxScrollOffset() {
                if (!this._content || !this.view) {
                  return Vec2.ZERO;
                }

                var contentSize = this._content._uiProps.uiTransformComp.contentSize;
                var horizontalMaximizeOffset = contentSize.width - this.view.width;
                var verticalMaximizeOffset = contentSize.height - this.view.height;
                horizontalMaximizeOffset = horizontalMaximizeOffset >= 0 ? horizontalMaximizeOffset : 0;
                verticalMaximizeOffset = verticalMaximizeOffset >= 0 ? verticalMaximizeOffset : 0;
                return new Vec2(horizontalMaximizeOffset, verticalMaximizeOffset);
              };

              _proto.scrollToPercentHorizontal = function scrollToPercentHorizontal(percent, timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(percent, 0),
                  applyToHorizontal: true,
                  applyToVertical: false
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollTo = function scrollTo(anchor, timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(anchor),
                  applyToHorizontal: true,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.scrollToPercentVertical = function scrollToPercentVertical(percent, timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                  anchor: new Vec2(0, percent),
                  applyToHorizontal: false,
                  applyToVertical: true
                });

                if (timeInSecond) {
                  this._startAutoScroll(moveDelta, timeInSecond, attenuated);
                } else {
                  this._moveContent(moveDelta);
                }
              };

              _proto.stopAutoScroll = function stopAutoScroll() {
                this._autoScrolling = false;
                this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
              };

              _proto.setContentPosition = function setContentPosition(position) {
                this._setContentPosition(position);
              };

              _proto._setContentPosition = function _setContentPosition(position) {
                if (!this._content) {
                  return;
                }

                var contentPos = this._getContentPosition();

                if (Math.abs(position.x - contentPos.x) < EPSILON$1 && Math.abs(position.y - contentPos.y) < EPSILON$1) {
                  return;
                }

                this._content.setPosition(position);

                this._outOfBoundaryAmountDirty = true;
              };

              _proto.getContentPosition = function getContentPosition() {
                return this._getContentPosition();
              };

              _proto._getContentPosition = function _getContentPosition() {
                if (!this._content) {
                  return Vec3.ZERO.clone();
                }

                this._contentPos.set(this._content.position);

                return this._contentPos;
              };

              _proto.isScrolling = function isScrolling() {
                return this._scrolling;
              };

              _proto.isAutoScrolling = function isAutoScrolling() {
                return this._autoScrolling;
              };

              _proto.getScrollEndedEventTiming = function getScrollEndedEventTiming() {
                return EPSILON$1;
              };

              _proto.start = function start() {
                this._calculateBoundary();

                if (this._content) {
                  director.once(Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
                }
              };

              _proto.onEnable = function onEnable() {
                {
                  this._registerEvent();

                  if (this._content) {
                    this._content.on(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);

                    this._content.on(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);

                    if (this.view) {
                      this.view.node.on(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);
                      this.view.node.on(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);
                    }
                  }

                  this._calculateBoundary();
                }

                this._updateScrollBarState();
              };

              _proto.update = function update(dt) {
                if (this._autoScrolling) {
                  this._processAutoScrolling(dt);
                }
              };

              _proto.onDisable = function onDisable() {
                {
                  this._unregisterEvent();

                  if (this._content) {
                    this._content.off(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);

                    this._content.off(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);

                    if (this.view) {
                      this.view.node.off(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);
                      this.view.node.off(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);
                    }
                  }
                }

                this._hideScrollBar();

                this.stopAutoScroll();
              };

              _proto._registerEvent = function _registerEvent() {
                this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this, true);
                this.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this, true);
                this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this, true);
                this.node.on(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
                this.node.on(NodeEventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
              };

              _proto._unregisterEvent = function _unregisterEvent() {
                this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this, true);
                this.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this, true);
                this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this, true);
                this.node.off(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
                this.node.off(NodeEventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
              };

              _proto._onMouseWheel = function _onMouseWheel(event, captureListeners) {
                if (!this.enabledInHierarchy) {
                  return;
                }

                if (this._hasNestedViewGroup(event, captureListeners)) {
                  return;
                }

                var deltaMove = new Vec3();
                var wheelPrecision = -0.1;
                var scrollY = event.getScrollY();

                if (this.vertical) {
                  deltaMove.set(0, scrollY * wheelPrecision, 0);
                } else if (this.horizontal) {
                  deltaMove.set(scrollY * wheelPrecision, 0, 0);
                }

                this._mouseWheelEventElapsedTime = 0;

                this._processDeltaMove(deltaMove);

                if (!this._stopMouseWheel) {
                  this._handlePressLogic();

                  this.schedule(this._checkMouseWheel, 1.0 / 60, NaN, 0);
                  this._stopMouseWheel = true;
                }

                this._stopPropagationIfTargetIsMe(event);
              };

              _proto._onTouchBegan = function _onTouchBegan(event, captureListeners) {
                if (!this.enabledInHierarchy || !this._content) {
                  return;
                }

                if (this._hasNestedViewGroup(event, captureListeners)) {
                  return;
                }

                this._handlePressLogic();

                this._touchMoved = false;

                this._stopPropagationIfTargetIsMe(event);
              };

              _proto._onTouchMoved = function _onTouchMoved(event, captureListeners) {
                if (!this.enabledInHierarchy || !this._content) {
                  return;
                }

                if (this._hasNestedViewGroup(event, captureListeners)) {
                  return;
                }

                var touch = event.touch;

                this._handleMoveLogic(touch);

                if (!this.cancelInnerEvents) {
                  return;
                }

                var deltaMove = touch.getUILocation(_tempVec2$1);
                deltaMove.subtract(touch.getUIStartLocation(_tempVec2_1));

                if (deltaMove.length() > 7) {
                  if (!this._touchMoved && event.target !== this.node) {
                    var cancelEvent = new EventTouch(event.getTouches(), event.bubbles, SystemEventType.TOUCH_CANCEL);
                    cancelEvent.touch = event.touch;
                    cancelEvent.simulate = true;
                    event.target.dispatchEvent(cancelEvent);
                    this._touchMoved = true;
                  }
                }

                this._stopPropagationIfTargetIsMe(event);
              };

              _proto._onTouchEnded = function _onTouchEnded(event, captureListeners) {
                if (!this.enabledInHierarchy || !this._content || !event) {
                  return;
                }

                if (this._hasNestedViewGroup(event, captureListeners)) {
                  return;
                }

                this._dispatchEvent(EventType$4.TOUCH_UP);

                var touch = event.touch;

                this._handleReleaseLogic(touch);

                if (this._touchMoved) {
                  event.propagationStopped = true;
                } else {
                  this._stopPropagationIfTargetIsMe(event);
                }
              };

              _proto._onTouchCancelled = function _onTouchCancelled(event, captureListeners) {
                if (!this.enabledInHierarchy || !this._content) {
                  return;
                }

                if (this._hasNestedViewGroup(event, captureListeners)) {
                  return;
                }

                if (event && !event.simulate) {
                  var touch = event.touch;

                  this._handleReleaseLogic(touch);
                }

                this._stopPropagationIfTargetIsMe(event);
              };

              _proto._calculateBoundary = function _calculateBoundary() {
                if (this._content && this.view) {
                  var layout = this._content.getComponent(Layout);

                  if (layout && layout.enabledInHierarchy) {
                    layout.updateLayout();
                  }

                  var viewTrans = this.view;
                  var anchorX = viewTrans.width * viewTrans.anchorX;
                  var anchorY = viewTrans.height * viewTrans.anchorY;
                  this._leftBoundary = -anchorX;
                  this._bottomBoundary = -anchorY;
                  this._rightBoundary = this._leftBoundary + viewTrans.width;
                  this._topBoundary = this._bottomBoundary + viewTrans.height;

                  this._moveContentToTopLeft(viewTrans.contentSize);
                }
              };

              _proto._hasNestedViewGroup = function _hasNestedViewGroup(event, captureListeners) {
                if (!event || event.eventPhase !== Event.CAPTURING_PHASE) {
                  return false;
                }

                if (captureListeners) {
                  for (var _iterator = _createForOfIteratorHelperLoose(captureListeners), _step; !(_step = _iterator()).done;) {
                    var listener = _step.value;
                    var item = listener;

                    if (this.node === item) {
                      if (event.target && event.target.getComponent(ViewGroup)) {
                        return true;
                      }

                      return false;
                    }

                    if (item.getComponent(ViewGroup)) {
                      return true;
                    }
                  }
                }

                return false;
              };

              _proto._startInertiaScroll = function _startInertiaScroll(touchMoveVelocity) {
                var inertiaTotalMovement = new Vec3(touchMoveVelocity);
                inertiaTotalMovement.multiplyScalar(MOVEMENT_FACTOR);

                this._startAttenuatingAutoScroll(inertiaTotalMovement, touchMoveVelocity);
              };

              _proto._calculateAttenuatedFactor = function _calculateAttenuatedFactor(distance) {
                if (this.brake <= 0) {
                  return 1 - this.brake;
                }

                return (1 - this.brake) * (1 / (1 + distance * 0.000014 + distance * distance * 0.000000008));
              };

              _proto._startAttenuatingAutoScroll = function _startAttenuatingAutoScroll(deltaMove, initialVelocity) {
                var targetDelta = deltaMove.clone();
                targetDelta.normalize();

                if (this._content && this.view) {
                  var contentSize = this._content._uiProps.uiTransformComp.contentSize;
                  var scrollViewSize = this.view.contentSize;
                  var totalMoveWidth = contentSize.width - scrollViewSize.width;
                  var totalMoveHeight = contentSize.height - scrollViewSize.height;

                  var attenuatedFactorX = this._calculateAttenuatedFactor(totalMoveWidth);

                  var attenuatedFactorY = this._calculateAttenuatedFactor(totalMoveHeight);

                  targetDelta.x = targetDelta.x * totalMoveWidth * (1 - this.brake) * attenuatedFactorX;
                  targetDelta.y = targetDelta.y * totalMoveHeight * attenuatedFactorY * (1 - this.brake);
                  targetDelta.z = 0;
                }

                var originalMoveLength = deltaMove.length();
                var factor = targetDelta.length() / originalMoveLength;
                targetDelta.add(deltaMove);

                if (this.brake > 0 && factor > 7) {
                  factor = Math.sqrt(factor);
                  var clonedDeltaMove = deltaMove.clone();
                  clonedDeltaMove.multiplyScalar(factor);
                  targetDelta.set(clonedDeltaMove);
                  targetDelta.add(deltaMove);
                }

                var time = this._calculateAutoScrollTimeByInitialSpeed(initialVelocity.length());

                if (this.brake > 0 && factor > 3) {
                  factor = 3;
                  time *= factor;
                }

                if (this.brake === 0 && factor > 1) {
                  time *= factor;
                }

                this._startAutoScroll(targetDelta, time, true);
              };

              _proto._calculateAutoScrollTimeByInitialSpeed = function _calculateAutoScrollTimeByInitialSpeed(initialSpeed) {
                return Math.sqrt(Math.sqrt(initialSpeed / 5));
              };

              _proto._startAutoScroll = function _startAutoScroll(deltaMove, timeInSecond, attenuated) {
                if (attenuated === void 0) {
                  attenuated = false;
                }

                var adjustedDeltaMove = this._flattenVectorByDirection(deltaMove);

                this._autoScrolling = true;
                this._autoScrollTargetDelta = adjustedDeltaMove;
                this._autoScrollAttenuate = attenuated;
                Vec3.copy(this._autoScrollStartPosition, this._getContentPosition());
                this._autoScrollTotalTime = timeInSecond;
                this._autoScrollAccumulatedTime = 0;
                this._autoScrollBraking = false;
                this._isScrollEndedWithThresholdEventFired = false;

                this._autoScrollBrakingStartPosition.set(0, 0, 0);

                var currentOutOfBoundary = this._getHowMuchOutOfBoundary();

                if (!currentOutOfBoundary.equals(Vec3.ZERO, EPSILON$1)) {
                  this._autoScrollCurrentlyOutOfBoundary = true;
                }
              };

              _proto._calculateTouchMoveVelocity = function _calculateTouchMoveVelocity() {
                var out = new Vec3();
                var totalTime = 0;
                totalTime = this._touchMoveTimeDeltas.reduce(function (a, b) {
                  return a + b;
                }, totalTime);

                if (totalTime <= 0 || totalTime >= 0.5) {
                  out.set(Vec3.ZERO);
                } else {
                  var totalMovement = new Vec3();
                  totalMovement = this._touchMoveDisplacements.reduce(function (a, b) {
                    a.add(b);
                    return a;
                  }, totalMovement);
                  out.set(totalMovement.x * (1 - this.brake) / totalTime, totalMovement.y * (1 - this.brake) / totalTime, totalMovement.z);
                }

                return out;
              };

              _proto._flattenVectorByDirection = function _flattenVectorByDirection(vector) {
                var result = vector;
                result.x = this.horizontal ? result.x : 0;
                result.y = this.vertical ? result.y : 0;
                return result;
              };

              _proto._moveContent = function _moveContent(deltaMove, canStartBounceBack) {
                var adjustedMove = this._flattenVectorByDirection(deltaMove);

                _tempVec3$2.set(this._getContentPosition());

                _tempVec3$2.add(adjustedMove);

                _tempVec3$2.set(Math.round(_tempVec3$2.x * TOLERANCE) * EPSILON$1, Math.round(_tempVec3$2.y * TOLERANCE) * EPSILON$1, _tempVec3$2.z);

                this._setContentPosition(_tempVec3$2);

                var outOfBoundary = this._getHowMuchOutOfBoundary();

                _tempVec2$1.set(outOfBoundary.x, outOfBoundary.y);

                this._updateScrollBar(_tempVec2$1);

                if (this.elastic && canStartBounceBack) {
                  this._startBounceBackIfNeeded();
                }
              };

              _proto._getContentLeftBoundary = function _getContentLeftBoundary() {
                if (!this._content) {
                  return -1;
                }

                var contentPos = this._getContentPosition();

                var uiTrans = this._content._uiProps.uiTransformComp;
                return contentPos.x - uiTrans.anchorX * uiTrans.width;
              };

              _proto._getContentRightBoundary = function _getContentRightBoundary() {
                if (!this._content) {
                  return -1;
                }

                var uiTrans = this._content._uiProps.uiTransformComp;
                return this._getContentLeftBoundary() + uiTrans.width;
              };

              _proto._getContentTopBoundary = function _getContentTopBoundary() {
                if (!this._content) {
                  return -1;
                }

                var uiTrans = this._content._uiProps.uiTransformComp;
                return this._getContentBottomBoundary() + uiTrans.height;
              };

              _proto._getContentBottomBoundary = function _getContentBottomBoundary() {
                if (!this._content) {
                  return -1;
                }

                var contentPos = this._getContentPosition();

                var uiTrans = this._content._uiProps.uiTransformComp;
                return contentPos.y - uiTrans.anchorY * uiTrans.height;
              };

              _proto._getHowMuchOutOfBoundary = function _getHowMuchOutOfBoundary(addition) {
                addition = addition || new Vec3();

                if (addition.equals(Vec3.ZERO, EPSILON$1) && !this._outOfBoundaryAmountDirty) {
                  return this._outOfBoundaryAmount;
                }

                var outOfBoundaryAmount = new Vec3();

                var tempLeftBoundary = this._getContentLeftBoundary();

                var tempRightBoundary = this._getContentRightBoundary();

                if (tempLeftBoundary + addition.x > this._leftBoundary) {
                  outOfBoundaryAmount.x = this._leftBoundary - (tempLeftBoundary + addition.x);
                } else if (tempRightBoundary + addition.x < this._rightBoundary) {
                  outOfBoundaryAmount.x = this._rightBoundary - (tempRightBoundary + addition.x);
                }

                var tempTopBoundary = this._getContentTopBoundary();

                var tempBottomBoundary = this._getContentBottomBoundary();

                if (tempTopBoundary + addition.y < this._topBoundary) {
                  outOfBoundaryAmount.y = this._topBoundary - (tempTopBoundary + addition.y);
                } else if (tempBottomBoundary + addition.y > this._bottomBoundary) {
                  outOfBoundaryAmount.y = this._bottomBoundary - (tempBottomBoundary + addition.y);
                }

                if (addition.equals(Vec3.ZERO, EPSILON$1)) {
                  this._outOfBoundaryAmount = outOfBoundaryAmount;
                  this._outOfBoundaryAmountDirty = false;
                }

                this._clampDelta(outOfBoundaryAmount);

                return outOfBoundaryAmount;
              };

              _proto._updateScrollBar = function _updateScrollBar(outOfBoundary) {
                if (this._horizontalScrollBar) {
                  this._horizontalScrollBar.onScroll(outOfBoundary);
                }

                if (this.verticalScrollBar) {
                  this.verticalScrollBar.onScroll(outOfBoundary);
                }
              };

              _proto._onScrollBarTouchBegan = function _onScrollBarTouchBegan() {
                if (this._horizontalScrollBar) {
                  this._horizontalScrollBar.onTouchBegan();
                }

                if (this.verticalScrollBar) {
                  this.verticalScrollBar.onTouchBegan();
                }
              };

              _proto._onScrollBarTouchEnded = function _onScrollBarTouchEnded() {
                if (this._horizontalScrollBar) {
                  this._horizontalScrollBar.onTouchEnded();
                }

                if (this.verticalScrollBar) {
                  this.verticalScrollBar.onTouchEnded();
                }
              };

              _proto._dispatchEvent = function _dispatchEvent(event) {
                if (event === EventType$4.SCROLL_ENDED) {
                  this._scrollEventEmitMask = 0;
                } else if (event === EventType$4.SCROLL_TO_TOP || event === EventType$4.SCROLL_TO_BOTTOM || event === EventType$4.SCROLL_TO_LEFT || event === EventType$4.SCROLL_TO_RIGHT) {
                  var flag = 1 << eventMap[event];

                  if (this._scrollEventEmitMask & flag) {
                    return;
                  } else {
                    this._scrollEventEmitMask |= flag;
                  }
                }

                EventHandler.emitEvents(this.scrollEvents, this, eventMap[event]);
                this.node.emit(event, this);
              };

              _proto._adjustContentOutOfBoundary = function _adjustContentOutOfBoundary() {
                if (!this._content) {
                  return;
                }

                this._outOfBoundaryAmountDirty = true;

                if (this._isOutOfBoundary()) {
                  var outOfBoundary = this._getHowMuchOutOfBoundary();

                  _tempVec3$2.set(this._getContentPosition());

                  _tempVec3$2.add(outOfBoundary);

                  this._content.setPosition(_tempVec3$2);

                  this._updateScrollBar(Vec2.ZERO);
                }
              };

              _proto._hideScrollBar = function _hideScrollBar() {
                if (this._horizontalScrollBar) {
                  this._horizontalScrollBar.hide();
                }

                if (this._verticalScrollBar) {
                  this._verticalScrollBar.hide();
                }
              };

              _proto._updateScrollBarState = function _updateScrollBarState() {
                if (!this._content || !this.view) {
                  return;
                }

                var viewTrans = this.view;
                var uiTrans = this._content._uiProps.uiTransformComp;

                if (this.verticalScrollBar) {
                  if (uiTrans.height < viewTrans.height) {
                    this.verticalScrollBar.hide();
                  } else {
                    this.verticalScrollBar.show();
                  }
                }

                if (this.horizontalScrollBar) {
                  if (uiTrans.width < viewTrans.width) {
                    this.horizontalScrollBar.hide();
                  } else {
                    this.horizontalScrollBar.show();
                  }
                }
              };

              _proto._stopPropagationIfTargetIsMe = function _stopPropagationIfTargetIsMe(event) {
                if (event.eventPhase === Event.AT_TARGET && event.target === this.node) {
                  event.propagationStopped = true;
                }
              };

              _proto._processDeltaMove = function _processDeltaMove(deltaMove) {
                this._scrollChildren(deltaMove);

                this._gatherTouchMove(deltaMove);
              };

              _proto._handleMoveLogic = function _handleMoveLogic(touch) {
                this._getLocalAxisAlignDelta(this._deltaPos, touch);

                this._processDeltaMove(this._deltaPos);
              };

              _proto._handleReleaseLogic = function _handleReleaseLogic(touch) {
                this._getLocalAxisAlignDelta(this._deltaPos, touch);

                this._gatherTouchMove(this._deltaPos);

                this._processInertiaScroll();

                if (this._scrolling) {
                  this._scrolling = false;

                  if (!this._autoScrolling) {
                    this._dispatchEvent(EventType$4.SCROLL_ENDED);
                  }
                }
              };

              _proto._getLocalAxisAlignDelta = function _getLocalAxisAlignDelta(out, touch) {
                var uiTransformComp = this.node._uiProps.uiTransformComp;
                var vec = new Vec3();

                if (uiTransformComp) {
                  touch.getUILocation(_tempVec2$1);
                  touch.getUIPreviousLocation(_tempVec2_1);

                  _tempVec3$2.set(_tempVec2$1.x, _tempVec2$1.y, 0);

                  _tempVec3_1.set(_tempVec2_1.x, _tempVec2_1.y, 0);

                  uiTransformComp.convertToNodeSpaceAR(_tempVec3$2, _tempVec3$2);
                  uiTransformComp.convertToNodeSpaceAR(_tempVec3_1, _tempVec3_1);
                  Vec3.subtract(vec, _tempVec3$2, _tempVec3_1);
                }

                out.set(vec);
              };

              _proto._scrollChildren = function _scrollChildren(deltaMove) {
                this._clampDelta(deltaMove);

                var realMove = deltaMove;
                var outOfBoundary;

                if (this.elastic) {
                  outOfBoundary = this._getHowMuchOutOfBoundary();
                  realMove.x *= outOfBoundary.x === 0 ? 1 : 0.5;
                  realMove.y *= outOfBoundary.y === 0 ? 1 : 0.5;
                }

                if (!this.elastic) {
                  outOfBoundary = this._getHowMuchOutOfBoundary(realMove);
                  realMove.add(outOfBoundary);
                }

                var verticalScrollEventType = '';
                var horizontalScrollEventType = '';

                if (this._content) {
                  var _ref = this._content._uiProps.uiTransformComp,
                      anchorX = _ref.anchorX,
                      anchorY = _ref.anchorY,
                      width = _ref.width,
                      height = _ref.height;
                  var pos = this._content.position || Vec3.ZERO;

                  if (this.vertical) {
                    if (realMove.y > 0) {
                      var icBottomPos = pos.y - anchorY * height;

                      if (icBottomPos + realMove.y >= this._bottomBoundary) {
                        verticalScrollEventType = EventType$4.SCROLL_TO_BOTTOM;
                      }
                    } else if (realMove.y < 0) {
                      var icTopPos = pos.y - anchorY * height + height;

                      if (icTopPos + realMove.y <= this._topBoundary) {
                        verticalScrollEventType = EventType$4.SCROLL_TO_TOP;
                      }
                    }
                  }

                  if (this.horizontal) {
                    if (realMove.x < 0) {
                      var icRightPos = pos.x - anchorX * width + width;

                      if (icRightPos + realMove.x <= this._rightBoundary) {
                        horizontalScrollEventType = EventType$4.SCROLL_TO_RIGHT;
                      }
                    } else if (realMove.x > 0) {
                      var icLeftPos = pos.x - anchorX * width;

                      if (icLeftPos + realMove.x >= this._leftBoundary) {
                        horizontalScrollEventType = EventType$4.SCROLL_TO_LEFT;
                      }
                    }
                  }
                }

                this._moveContent(realMove, false);

                if (this.horizontal && realMove.x !== 0 || this.vertical && realMove.y !== 0) {
                  if (!this._scrolling) {
                    this._scrolling = true;

                    this._dispatchEvent(EventType$4.SCROLL_BEGAN);
                  }

                  this._dispatchEvent(EventType$4.SCROLLING);
                }

                if (verticalScrollEventType !== '') {
                  this._dispatchEvent(verticalScrollEventType);
                }

                if (horizontalScrollEventType !== '') {
                  this._dispatchEvent(horizontalScrollEventType);
                }
              };

              _proto._handlePressLogic = function _handlePressLogic() {
                if (this._autoScrolling) {
                  this._dispatchEvent(EventType$4.SCROLL_ENDED);
                }

                this._autoScrolling = false;
                this._isBouncing = false;
                this._touchMovePreviousTimestamp = getTimeInMilliseconds();
                this._touchMoveDisplacements.length = 0;
                this._touchMoveTimeDeltas.length = 0;

                this._onScrollBarTouchBegan();
              };

              _proto._clampDelta = function _clampDelta(out) {
                if (this._content && this.view) {
                  var scrollViewSize = this.view.contentSize;
                  var uiTrans = this._content._uiProps.uiTransformComp;

                  if (uiTrans.width < scrollViewSize.width) {
                    out.x = 0;
                  }

                  if (uiTrans.height < scrollViewSize.height) {
                    out.y = 0;
                  }
                }
              };

              _proto._gatherTouchMove = function _gatherTouchMove(delta) {
                var clampDt = delta.clone();

                this._clampDelta(clampDt);

                while (this._touchMoveDisplacements.length >= NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED) {
                  this._touchMoveDisplacements.shift();

                  this._touchMoveTimeDeltas.shift();
                }

                this._touchMoveDisplacements.push(clampDt);

                var timeStamp = getTimeInMilliseconds();

                this._touchMoveTimeDeltas.push((timeStamp - this._touchMovePreviousTimestamp) / 1000);

                this._touchMovePreviousTimestamp = timeStamp;
              };

              _proto._startBounceBackIfNeeded = function _startBounceBackIfNeeded() {
                if (!this.elastic) {
                  return false;
                }

                var bounceBackAmount = this._getHowMuchOutOfBoundary();

                this._clampDelta(bounceBackAmount);

                if (bounceBackAmount.equals(Vec3.ZERO, EPSILON$1)) {
                  return false;
                }

                var bounceBackTime = Math.max(this.bounceDuration, 0);

                this._startAutoScroll(bounceBackAmount, bounceBackTime, true);

                if (!this._isBouncing) {
                  if (bounceBackAmount.y > 0) {
                    this._dispatchEvent(EventType$4.BOUNCE_TOP);
                  }

                  if (bounceBackAmount.y < 0) {
                    this._dispatchEvent(EventType$4.BOUNCE_BOTTOM);
                  }

                  if (bounceBackAmount.x > 0) {
                    this._dispatchEvent(EventType$4.BOUNCE_RIGHT);
                  }

                  if (bounceBackAmount.x < 0) {
                    this._dispatchEvent(EventType$4.BOUNCE_LEFT);
                  }

                  this._isBouncing = true;
                }

                return true;
              };

              _proto._processInertiaScroll = function _processInertiaScroll() {
                var bounceBackStarted = this._startBounceBackIfNeeded();

                if (!bounceBackStarted && this.inertia) {
                  var touchMoveVelocity = this._calculateTouchMoveVelocity();

                  if (!touchMoveVelocity.equals(_tempVec3$2, EPSILON$1) && this.brake < 1) {
                    this._startInertiaScroll(touchMoveVelocity);
                  }
                }

                this._onScrollBarTouchEnded();
              };

              _proto._isOutOfBoundary = function _isOutOfBoundary() {
                var outOfBoundary = this._getHowMuchOutOfBoundary();

                return !outOfBoundary.equals(Vec3.ZERO, EPSILON$1);
              };

              _proto._isNecessaryAutoScrollBrake = function _isNecessaryAutoScrollBrake() {
                if (this._autoScrollBraking) {
                  return true;
                }

                if (this._isOutOfBoundary()) {
                  if (!this._autoScrollCurrentlyOutOfBoundary) {
                    this._autoScrollCurrentlyOutOfBoundary = true;
                    this._autoScrollBraking = true;
                    Vec3.copy(this._autoScrollBrakingStartPosition, this._getContentPosition());
                    return true;
                  }
                } else {
                  this._autoScrollCurrentlyOutOfBoundary = false;
                }

                return false;
              };

              _proto._processAutoScrolling = function _processAutoScrolling(dt) {
                var isAutoScrollBrake = this._isNecessaryAutoScrollBrake();

                var brakingFactor = isAutoScrollBrake ? OUT_OF_BOUNDARY_BREAKING_FACTOR : 1;
                this._autoScrollAccumulatedTime += dt * (1 / brakingFactor);
                var percentage = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);

                if (this._autoScrollAttenuate) {
                  percentage = quintEaseOut(percentage);
                }

                var clonedAutoScrollTargetDelta = this._autoScrollTargetDelta.clone();

                clonedAutoScrollTargetDelta.multiplyScalar(percentage);

                var clonedAutoScrollStartPosition = this._autoScrollStartPosition.clone();

                clonedAutoScrollStartPosition.add(clonedAutoScrollTargetDelta);
                var reachedEnd = Math.abs(percentage - 1) <= EPSILON$1;
                var fireEvent = Math.abs(percentage - 1) <= this.getScrollEndedEventTiming();

                if (fireEvent && !this._isScrollEndedWithThresholdEventFired) {
                  this._dispatchEvent(EventType$4.SCROLL_ENG_WITH_THRESHOLD);

                  this._isScrollEndedWithThresholdEventFired = true;
                }

                if (this.elastic) {
                  var brakeOffsetPosition = clonedAutoScrollStartPosition.clone();
                  brakeOffsetPosition.subtract(this._autoScrollBrakingStartPosition);

                  if (isAutoScrollBrake) {
                    brakeOffsetPosition.multiplyScalar(brakingFactor);
                  }

                  clonedAutoScrollStartPosition.set(this._autoScrollBrakingStartPosition);
                  clonedAutoScrollStartPosition.add(brakeOffsetPosition);
                } else {
                  var moveDelta = clonedAutoScrollStartPosition.clone();
                  moveDelta.subtract(this.getContentPosition());

                  var outOfBoundary = this._getHowMuchOutOfBoundary(moveDelta);

                  if (!outOfBoundary.equals(Vec3.ZERO, EPSILON$1)) {
                    clonedAutoScrollStartPosition.add(outOfBoundary);
                    reachedEnd = true;
                  }
                }

                if (reachedEnd) {
                  this._autoScrolling = false;
                }

                var deltaMove = clonedAutoScrollStartPosition.clone();
                deltaMove.subtract(this._getContentPosition());

                this._clampDelta(deltaMove);

                this._moveContent(deltaMove, reachedEnd);

                this._dispatchEvent(EventType$4.SCROLLING);

                if (!this._autoScrolling) {
                  this._isBouncing = false;
                  this._scrolling = false;

                  this._dispatchEvent(EventType$4.SCROLL_ENDED);
                }
              };

              _proto._checkMouseWheel = function _checkMouseWheel(dt) {
                var currentOutOfBoundary = this._getHowMuchOutOfBoundary();

                var maxElapsedTime = 0.1;

                if (!currentOutOfBoundary.equals(Vec3.ZERO, EPSILON$1)) {
                  this._processInertiaScroll();

                  this.unschedule(this._checkMouseWheel);

                  this._dispatchEvent(EventType$4.SCROLL_ENDED);

                  this._stopMouseWheel = false;
                  return;
                }

                this._mouseWheelEventElapsedTime += dt;

                if (this._mouseWheelEventElapsedTime > maxElapsedTime) {
                  this._onScrollBarTouchEnded();

                  this.unschedule(this._checkMouseWheel);

                  this._dispatchEvent(EventType$4.SCROLL_ENDED);

                  this._stopMouseWheel = false;
                }
              };

              _proto._calculateMovePercentDelta = function _calculateMovePercentDelta(options) {
                var anchor = options.anchor;
                var applyToHorizontal = options.applyToHorizontal;
                var applyToVertical = options.applyToVertical;

                this._calculateBoundary();

                anchor.clampf(Vec2.ZERO, Vec2.ONE);

                var bottomDelta = this._getContentBottomBoundary() - this._bottomBoundary;

                bottomDelta = -bottomDelta;

                var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

                leftDelta = -leftDelta;
                var moveDelta = new Vec3();

                if (this._content && this.view) {
                  var totalScrollDelta = 0;
                  var uiTrans = this._content._uiProps.uiTransformComp;
                  var contentSize = uiTrans.contentSize;
                  var scrollSize = this.view.contentSize;

                  if (applyToHorizontal) {
                    totalScrollDelta = contentSize.width - scrollSize.width;
                    moveDelta.x = leftDelta - totalScrollDelta * anchor.x;
                  }

                  if (applyToVertical) {
                    totalScrollDelta = contentSize.height - scrollSize.height;
                    moveDelta.y = bottomDelta - totalScrollDelta * anchor.y;
                  }
                }

                return moveDelta;
              };

              _proto._moveContentToTopLeft = function _moveContentToTopLeft(scrollViewSize) {
                var bottomDelta = this._getContentBottomBoundary() - this._bottomBoundary;

                bottomDelta = -bottomDelta;
                var moveDelta = new Vec3();
                var totalScrollDelta = 0;

                var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

                leftDelta = -leftDelta;

                if (this._content) {
                  var uiTrans = this._content._uiProps.uiTransformComp;
                  var contentSize = uiTrans.contentSize;

                  if (contentSize.height < scrollViewSize.height) {
                    totalScrollDelta = contentSize.height - scrollViewSize.height;
                    moveDelta.y = bottomDelta - totalScrollDelta;
                  }

                  if (contentSize.width < scrollViewSize.width) {
                    totalScrollDelta = contentSize.width - scrollViewSize.width;
                    moveDelta.x = leftDelta;
                  }
                }

                this._updateScrollBarState();

                this._moveContent(moveDelta);

                this._adjustContentOutOfBoundary();
              };

              _proto._scaleChanged = function _scaleChanged(value) {
                if (value === TransformBit.SCALE) {
                  this._calculateBoundary();
                }
              };

              _createClass(ScrollView, [{
                key: "content",
                get: function get() {
                  return this._content;
                },
                set: function set(value) {
                  if (this._content === value) {
                    return;
                  }

                  var viewTrans = value && value.parent && value.parent._uiProps.uiTransformComp;

                  if (value && (!value || !viewTrans)) {
                    logID(4302);
                    return;
                  }

                  this._content = value;

                  this._calculateBoundary();
                }
              }, {
                key: "horizontalScrollBar",
                get: function get() {
                  return this._horizontalScrollBar;
                },
                set: function set(value) {
                  if (this._horizontalScrollBar === value) {
                    return;
                  }

                  this._horizontalScrollBar = value;

                  if (this._horizontalScrollBar) {
                    this._horizontalScrollBar.setScrollView(this);

                    this._updateScrollBar(Vec2.ZERO);
                  }
                }
              }, {
                key: "verticalScrollBar",
                get: function get() {
                  return this._verticalScrollBar;
                },
                set: function set(value) {
                  if (this._verticalScrollBar === value) {
                    return;
                  }

                  this._verticalScrollBar = value;

                  if (this._verticalScrollBar) {
                    this._verticalScrollBar.setScrollView(this);

                    this._updateScrollBar(Vec2.ZERO);
                  }
                }
              }, {
                key: "view",
                get: function get() {
                  var parent = this._content && this._content.parent;

                  if (!parent) {
                    return null;
                  }

                  return parent._uiProps.uiTransformComp;
                }
              }]);

              return ScrollView;
            }(ViewGroup), _class3$n.EventType = EventType$4, _temp$1v), (_descriptor$1m = _applyDecoratedDescriptor(_class2$1q.prototype, "bounceDuration", [serializable, _dec6$G, _dec7$F, _dec8$D], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor2$1b = _applyDecoratedDescriptor(_class2$1q.prototype, "brake", [serializable, _dec9$z, _dec10$x, _dec11$s], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.5;
              }
            }), _descriptor3$Y = _applyDecoratedDescriptor(_class2$1q.prototype, "elastic", [serializable, _dec12$s, _dec13$s], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor4$S = _applyDecoratedDescriptor(_class2$1q.prototype, "inertia", [serializable, _dec14$p, _dec15$p], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _applyDecoratedDescriptor(_class2$1q.prototype, "content", [_dec16$n, _dec17$l, _dec18$k], Object.getOwnPropertyDescriptor(_class2$1q.prototype, "content"), _class2$1q.prototype), _descriptor5$J = _applyDecoratedDescriptor(_class2$1q.prototype, "horizontal", [serializable, _dec19$k, _dec20$j], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _applyDecoratedDescriptor(_class2$1q.prototype, "horizontalScrollBar", [_dec21$i, _dec22$g, _dec23$f], Object.getOwnPropertyDescriptor(_class2$1q.prototype, "horizontalScrollBar"), _class2$1q.prototype), _descriptor6$B = _applyDecoratedDescriptor(_class2$1q.prototype, "vertical", [serializable, _dec24$e, _dec25$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _applyDecoratedDescriptor(_class2$1q.prototype, "verticalScrollBar", [_dec26$d, _dec27$d, _dec28$c], Object.getOwnPropertyDescriptor(_class2$1q.prototype, "verticalScrollBar"), _class2$1q.prototype), _descriptor7$r = _applyDecoratedDescriptor(_class2$1q.prototype, "cancelInnerEvents", [serializable, _dec29$b, _dec30$a], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor8$o = _applyDecoratedDescriptor(_class2$1q.prototype, "scrollEvents", [_dec31$a, serializable, _dec32$a, _dec33$8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor9$k = _applyDecoratedDescriptor(_class2$1q.prototype, "_content", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor10$i = _applyDecoratedDescriptor(_class2$1q.prototype, "_horizontalScrollBar", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor11$g = _applyDecoratedDescriptor(_class2$1q.prototype, "_verticalScrollBar", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$1q)) || _class$1D) || _class$1D) || _class$1D) || _class$1D) || _class$1D));
            legacyCC.ScrollView = ScrollView;

            var _dec$1B, _dec2$1j, _dec3$V, _dec4$Q, _dec5$K, _dec6$H, _dec7$G, _dec8$E, _dec9$A, _dec10$y, _dec11$t, _dec12$t, _dec13$t, _class$1E, _class2$1r, _descriptor$1n, _descriptor2$1c, _descriptor3$Z, _descriptor4$T, _class3$o, _temp$1w;

            var _tempPos = new Vec3();

            var Direction$1;

            (function (Direction) {
              Direction[Direction["Horizontal"] = 0] = "Horizontal";
              Direction[Direction["Vertical"] = 1] = "Vertical";
            })(Direction$1 || (Direction$1 = {}));

            ccenum(Direction$1);
            var Slider = function (v) { return exports({ Slider: v, SliderComponent: v }), v; }((_dec$1B = ccclass('cc.Slider'), _dec2$1j = help(), _dec3$V = executionOrder(110), _dec4$Q = menu$1(), _dec5$K = requireComponent(UITransform), _dec6$H = type$1(Sprite), _dec7$G = tooltip(), _dec8$E = type$1(Direction$1), _dec9$A = tooltip(), _dec10$y = range(), _dec11$t = tooltip(), _dec12$t = type$1([EventHandler]), _dec13$t = tooltip(), _dec$1B(_class$1E = _dec2$1j(_class$1E = _dec3$V(_class$1E = _dec4$Q(_class$1E = _dec5$K(_class$1E = (_class2$1r = (_temp$1w = _class3$o = function (_Component) {
              _inheritsLoose(Slider, _Component);

              function Slider() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "slideEvents", _descriptor$1n, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_handle", _descriptor2$1c, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_direction", _descriptor3$Z, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_progress", _descriptor4$T, _assertThisInitialized(_this));

                _this._offset = new Vec3();
                _this._dragging = false;
                _this._touchHandle = false;
                _this._handleLocalPos = new Vec3();
                _this._touchPos = new Vec3();
                return _this;
              }

              var _proto = Slider.prototype;

              _proto.__preload = function __preload() {
                this._updateHandlePosition();
              };

              _proto.onEnable = function onEnable() {
                this._updateHandlePosition();

                this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);
                this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this);

                if (this._handle && this._handle.isValid) {
                  this._handle.node.on(NodeEventType.TOUCH_START, this._onHandleDragStart, this);

                  this._handle.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);

                  this._handle.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
                }
              };

              _proto.onDisable = function onDisable() {
                this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this);
                this.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);
                this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this);

                if (this._handle && this._handle.isValid) {
                  this._handle.node.off(NodeEventType.TOUCH_START, this._onHandleDragStart, this);

                  this._handle.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);

                  this._handle.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
                }
              };

              _proto._onHandleDragStart = function _onHandleDragStart(event) {
                if (!event || !this._handle || !this._handle.node._uiProps.uiTransformComp) {
                  return;
                }

                this._dragging = true;
                this._touchHandle = true;
                var touhPos = event.touch.getUILocation();
                Vec3.set(this._touchPos, touhPos.x, touhPos.y, 0);

                this._handle.node._uiProps.uiTransformComp.convertToNodeSpaceAR(this._touchPos, this._offset);

                event.propagationStopped = true;
              };

              _proto._onTouchBegan = function _onTouchBegan(event) {
                if (!this._handle || !event) {
                  return;
                }

                this._dragging = true;

                if (!this._touchHandle) {
                  this._handleSliderLogic(event.touch);
                }

                event.propagationStopped = true;
              };

              _proto._onTouchMoved = function _onTouchMoved(event) {
                if (!this._dragging || !event) {
                  return;
                }

                this._handleSliderLogic(event.touch);

                event.propagationStopped = true;
              };

              _proto._onTouchEnded = function _onTouchEnded(event) {
                this._dragging = false;
                this._touchHandle = false;
                this._offset = new Vec3();

                if (event) {
                  event.propagationStopped = true;
                }
              };

              _proto._onTouchCancelled = function _onTouchCancelled(event) {
                this._dragging = false;

                if (event) {
                  event.propagationStopped = true;
                }
              };

              _proto._handleSliderLogic = function _handleSliderLogic(touch) {
                this._updateProgress(touch);

                this._emitSlideEvent();
              };

              _proto._emitSlideEvent = function _emitSlideEvent() {
                EventHandler.emitEvents(this.slideEvents, this);
                this.node.emit('slide', this);
              };

              _proto._updateProgress = function _updateProgress(touch) {
                if (!this._handle || !touch) {
                  return;
                }

                var touchPos = touch.getUILocation();
                Vec3.set(this._touchPos, touchPos.x, touchPos.y, 0);
                var uiTrans = this.node._uiProps.uiTransformComp;
                var localTouchPos = uiTrans.convertToNodeSpaceAR(this._touchPos, _tempPos);

                if (this.direction === Direction$1.Horizontal) {
                  this.progress = clamp01(0.5 + (localTouchPos.x - this._offset.x) / uiTrans.width);
                } else {
                  this.progress = clamp01(0.5 + (localTouchPos.y - this._offset.y) / uiTrans.height);
                }
              };

              _proto._updateHandlePosition = function _updateHandlePosition() {
                if (!this._handle) {
                  return;
                }

                this._handleLocalPos.set(this._handle.node.getPosition());

                var uiTrans = this.node._uiProps.uiTransformComp;

                if (this._direction === Direction$1.Horizontal) {
                  this._handleLocalPos.x = -uiTrans.width * uiTrans.anchorX + this.progress * uiTrans.width;
                } else {
                  this._handleLocalPos.y = -uiTrans.height * uiTrans.anchorY + this.progress * uiTrans.height;
                }

                this._handle.node.setPosition(this._handleLocalPos);
              };

              _proto._changeLayout = function _changeLayout() {
                var uiTrans = this.node._uiProps.uiTransformComp;
                var contentSize = uiTrans.contentSize;
                uiTrans.setContentSize(contentSize.height, contentSize.width);

                if (this._handle) {
                  var pos = this._handle.node.position;

                  if (this._direction === Direction$1.Horizontal) {
                    this._handle.node.setPosition(pos.x, 0, pos.z);
                  } else {
                    this._handle.node.setPosition(0, pos.y, pos.z);
                  }

                  this._updateHandlePosition();
                }
              };

              _createClass(Slider, [{
                key: "handle",
                get: function get() {
                  return this._handle;
                },
                set: function set(value) {
                  if (this._handle === value) {
                    return;
                  }

                  this._handle = value;
                }
              }, {
                key: "direction",
                get: function get() {
                  return this._direction;
                },
                set: function set(value) {
                  if (this._direction === value) {
                    return;
                  }

                  this._direction = value;

                  this._changeLayout();
                }
              }, {
                key: "progress",
                get: function get() {
                  return this._progress;
                },
                set: function set(value) {
                  if (this._progress === value) {
                    return;
                  }

                  this._progress = value;

                  this._updateHandlePosition();
                }
              }]);

              return Slider;
            }(Component), _class3$o.Direction = Direction$1, _temp$1w), (_applyDecoratedDescriptor(_class2$1r.prototype, "handle", [_dec6$H, _dec7$G], Object.getOwnPropertyDescriptor(_class2$1r.prototype, "handle"), _class2$1r.prototype), _applyDecoratedDescriptor(_class2$1r.prototype, "direction", [_dec8$E, _dec9$A], Object.getOwnPropertyDescriptor(_class2$1r.prototype, "direction"), _class2$1r.prototype), _applyDecoratedDescriptor(_class2$1r.prototype, "progress", [slide, _dec10$y, _dec11$t], Object.getOwnPropertyDescriptor(_class2$1r.prototype, "progress"), _class2$1r.prototype), _descriptor$1n = _applyDecoratedDescriptor(_class2$1r.prototype, "slideEvents", [_dec12$t, serializable, _dec13$t], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor2$1c = _applyDecoratedDescriptor(_class2$1r.prototype, "_handle", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor3$Z = _applyDecoratedDescriptor(_class2$1r.prototype, "_direction", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Direction$1.Horizontal;
              }
            }), _descriptor4$T = _applyDecoratedDescriptor(_class2$1r.prototype, "_progress", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.1;
              }
            })), _class2$1r)) || _class$1E) || _class$1E) || _class$1E) || _class$1E) || _class$1E));
            legacyCC.Slider = Slider;

            function extendsEnum() {
              for (var _len = arguments.length, enums = new Array(_len), _key = 0; _key < _len; _key++) {
                enums[_key] = arguments[_key];
              }

              return Object.assign.apply(Object, [{}].concat(enums));
            }

            var _dec$1C, _dec2$1k, _dec3$W, _dec4$R, _dec5$L, _dec6$I, _dec7$H, _dec8$F, _dec9$B, _dec10$z, _dec11$u, _dec12$u, _class$1F, _class2$1s, _descriptor$1o, _descriptor2$1d, _descriptor3$_, _class3$p, _temp$1x;
            var EventType$5;

            (function (EventType) {
              EventType["TOGGLE"] = "toggle";
            })(EventType$5 || (EventType$5 = {}));

            var Toggle = function (v) { return exports({ Toggle: v, ToggleComponent: v }), v; }((_dec$1C = ccclass('cc.Toggle'), _dec2$1k = help(), _dec3$W = executionOrder(110), _dec4$R = menu$1(), _dec5$L = requireComponent(UITransform), _dec6$I = displayOrder(), _dec7$H = tooltip(), _dec8$F = type$1(Sprite), _dec9$B = displayOrder(), _dec10$z = tooltip(), _dec11$u = type$1([EventHandler]), _dec12$u = tooltip(), _dec$1C(_class$1F = _dec2$1k(_class$1F = _dec3$W(_class$1F = _dec4$R(_class$1F = _dec5$L(_class$1F = (_class2$1s = (_temp$1x = _class3$p = function (_Button) {
              _inheritsLoose(Toggle, _Button);

              function Toggle() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Button.call.apply(_Button, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "checkEvents", _descriptor$1o, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isChecked", _descriptor2$1d, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_checkMark", _descriptor3$_, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = Toggle.prototype;

              _proto._internalToggle = function _internalToggle() {
                this.isChecked = !this.isChecked;
              };

              _proto._set = function _set(value, emitEvent) {
                if (emitEvent === void 0) {
                  emitEvent = true;
                }

                if (this._isChecked == value) return;
                this._isChecked = value;
                var group = this._toggleContainer;

                if (group && group.enabled && this.enabled) {
                  if (value || !group.anyTogglesChecked() && !group.allowSwitchOff) {
                    this._isChecked = true;
                    group.notifyToggleCheck(this, emitEvent);
                  }
                }

                this.playEffect();

                if (emitEvent) {
                  this._emitToggleEvents();
                }
              };

              _proto.playEffect = function playEffect() {
                if (this._checkMark) {
                  this._checkMark.node.active = this._isChecked;
                }
              };

              _proto.setIsCheckedWithoutNotify = function setIsCheckedWithoutNotify(value) {
                this._set(value, false);
              };

              _proto.onEnable = function onEnable() {
                _Button.prototype.onEnable.call(this);

                this.playEffect();

                {
                  this.node.on(Toggle.EventType.CLICK, this._internalToggle, this);
                }
              };

              _proto.onDisable = function onDisable() {
                _Button.prototype.onDisable.call(this);

                {
                  this.node.off(Toggle.EventType.CLICK, this._internalToggle, this);
                }
              };

              _proto.OnDestroy = function OnDestroy() {
                var group = this._toggleContainer;

                if (group) {
                  group.ensureValidState();
                }
              };

              _proto._emitToggleEvents = function _emitToggleEvents() {
                this.node.emit(Toggle.EventType.TOGGLE, this);

                if (this.checkEvents) {
                  EventHandler.emitEvents(this.checkEvents, this);
                }
              };

              _createClass(Toggle, [{
                key: "isChecked",
                get: function get() {
                  return this._isChecked;
                },
                set: function set(value) {
                  this._set(value);
                }
              }, {
                key: "checkMark",
                get: function get() {
                  return this._checkMark;
                },
                set: function set(value) {
                  if (this._checkMark === value) {
                    return;
                  }

                  this._checkMark = value;
                }
              }, {
                key: "_resizeToTarget",
                set: function set(value) {
                  if (value) {
                    this._resizeNodeToTargetNode();
                  }
                }
              }, {
                key: "_toggleContainer",
                get: function get() {
                  var parent = this.node.parent;

                  if (legacyCC.Node.isNode(parent)) {
                    return parent.getComponent('cc.ToggleContainer');
                  }

                  return null;
                }
              }]);

              return Toggle;
            }(Button), _class3$p.EventType = extendsEnum(EventType$5, EventType$2), _temp$1x), (_applyDecoratedDescriptor(_class2$1s.prototype, "isChecked", [_dec6$I, _dec7$H], Object.getOwnPropertyDescriptor(_class2$1s.prototype, "isChecked"), _class2$1s.prototype), _applyDecoratedDescriptor(_class2$1s.prototype, "checkMark", [_dec8$F, _dec9$B, _dec10$z], Object.getOwnPropertyDescriptor(_class2$1s.prototype, "checkMark"), _class2$1s.prototype), _descriptor$1o = _applyDecoratedDescriptor(_class2$1s.prototype, "checkEvents", [_dec11$u, serializable, _dec12$u], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor2$1d = _applyDecoratedDescriptor(_class2$1s.prototype, "_isChecked", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor3$_ = _applyDecoratedDescriptor(_class2$1s.prototype, "_checkMark", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$1s)) || _class$1F) || _class$1F) || _class$1F) || _class$1F) || _class$1F));
            legacyCC.Toggle = Toggle;

            var _dec$1D, _dec2$1l, _dec3$X, _dec4$S, _dec5$M, _dec6$J, _dec7$I, _class$1G, _class2$1t, _descriptor$1p, _descriptor2$1e, _temp$1y;
            var ToggleContainer = function (v) { return exports({ ToggleContainer: v, ToggleContainerComponent: v }), v; }((_dec$1D = ccclass('cc.ToggleContainer'), _dec2$1l = help(), _dec3$X = executionOrder(110), _dec4$S = menu$1(), _dec5$M = tooltip(), _dec6$J = type$1([EventHandler]), _dec7$I = tooltip(), _dec$1D(_class$1G = _dec2$1l(_class$1G = _dec3$X(_class$1G = _dec4$S(_class$1G = executeInEditMode(_class$1G = (_class2$1t = (_temp$1y = function (_Component) {
              _inheritsLoose(ToggleContainer, _Component);

              function ToggleContainer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_allowSwitchOff", _descriptor$1p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "checkEvents", _descriptor2$1e, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = ToggleContainer.prototype;

              _proto.onEnable = function onEnable() {
                this.ensureValidState();
                this.node.on(NodeEventType.CHILD_ADDED, this.ensureValidState, this);
                this.node.on(NodeEventType.CHILD_REMOVED, this.ensureValidState, this);
              };

              _proto.onDisable = function onDisable() {
                this.node.off(NodeEventType.CHILD_ADDED, this.ensureValidState, this);
                this.node.off(NodeEventType.CHILD_REMOVED, this.ensureValidState, this);
              };

              _proto.activeToggles = function activeToggles() {
                return this.toggleItems.filter(function (x) {
                  return x.isChecked;
                });
              };

              _proto.anyTogglesChecked = function anyTogglesChecked() {
                return !!this.toggleItems.find(function (x) {
                  return x.isChecked;
                });
              };

              _proto.notifyToggleCheck = function notifyToggleCheck(toggle, emitEvent) {
                if (emitEvent === void 0) {
                  emitEvent = true;
                }

                if (!this.enabledInHierarchy) {
                  return;
                }

                for (var i = 0; i < this.toggleItems.length; i++) {
                  var item = this.toggleItems[i];

                  if (item === toggle) {
                    continue;
                  }

                  if (emitEvent) {
                    item.isChecked = false;
                  } else {
                    item.setIsCheckedWithoutNotify(false);
                  }
                }

                if (this.checkEvents) {
                  legacyCC.Component.EventHandler.emitEvents(this.checkEvents, toggle);
                }
              };

              _proto.ensureValidState = function ensureValidState() {
                var toggles = this.toggleItems;

                if (!this._allowSwitchOff && !this.anyTogglesChecked() && toggles.length !== 0) {
                  var toggle = toggles[0];
                  toggle.isChecked = true;
                  this.notifyToggleCheck(toggle);
                }

                var activeToggles = this.activeToggles();

                if (activeToggles.length > 1) {
                  var firstToggle = activeToggles[0];

                  for (var i = 0; i < activeToggles.length; ++i) {
                    var _toggle = activeToggles[i];

                    if (_toggle === firstToggle) {
                      continue;
                    }

                    _toggle.isChecked = false;
                  }
                }
              };

              _createClass(ToggleContainer, [{
                key: "allowSwitchOff",
                get: function get() {
                  return this._allowSwitchOff;
                },
                set: function set(value) {
                  this._allowSwitchOff = value;
                }
              }, {
                key: "toggleItems",
                get: function get() {
                  return this.node.children.map(function (item) {
                    var toggle = item.getComponent('cc.Toggle');

                    if (toggle && toggle.enabled) {
                      return toggle;
                    }

                    return null;
                  }).filter(Boolean);
                }
              }]);

              return ToggleContainer;
            }(Component), _temp$1y), (_descriptor$1p = _applyDecoratedDescriptor(_class2$1t.prototype, "_allowSwitchOff", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _applyDecoratedDescriptor(_class2$1t.prototype, "allowSwitchOff", [_dec5$M], Object.getOwnPropertyDescriptor(_class2$1t.prototype, "allowSwitchOff"), _class2$1t.prototype), _descriptor2$1e = _applyDecoratedDescriptor(_class2$1t.prototype, "checkEvents", [_dec6$J, serializable, _dec7$I], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class2$1t)) || _class$1G) || _class$1G) || _class$1G) || _class$1G) || _class$1G));
            legacyCC.ToggleContainer = ToggleContainer;

            var _dec$1E, _dec2$1m, _dec3$Y, _dec4$T, _dec5$N, _dec6$K, _dec7$J, _dec8$G, _dec9$C, _dec10$A, _dec11$v, _dec12$v, _dec13$u, _dec14$q, _dec15$q, _dec16$o, _dec17$m, _dec18$l, _dec19$l, _dec20$k, _dec21$j, _dec22$h, _dec23$g, _class$1H, _class2$1u, _descriptor$1q, _descriptor2$1f, _descriptor3$$, _descriptor4$U, _descriptor5$K, _descriptor6$C, _descriptor7$s, _descriptor8$p, _descriptor9$l, _descriptor10$j, _descriptor11$h, _descriptor12$g, _descriptor13$f, _descriptor14$8, _descriptor15$7, _descriptor16$7, _descriptor17$6, _descriptor18$5, _class3$q, _temp$1z;

            var _tempScale = new Vec2();

            function getReadonlyNodeSize(parent) {
              if (parent instanceof Scene) {

                return visibleRect;
              } else if (parent._uiProps.uiTransformComp) {
                return parent._uiProps.uiTransformComp.contentSize;
              } else {
                return Size$1.ZERO;
              }
            }
            function computeInverseTransForTarget(widgetNode, target, out_inverseTranslate, out_inverseScale) {
              if (widgetNode.parent) {
                _tempScale.set(widgetNode.parent.getScale().x, widgetNode.parent.getScale().y);
              } else {
                _tempScale.set(0, 0);
              }

              var scaleX = _tempScale.x;
              var scaleY = _tempScale.y;
              var translateX = 0;
              var translateY = 0;

              for (var node = widgetNode.parent;;) {
                if (!node) {
                  out_inverseTranslate.x = out_inverseTranslate.y = 0;
                  out_inverseScale.x = out_inverseScale.y = 1;
                  return;
                }

                var pos = node.getPosition();
                translateX += pos.x;
                translateY += pos.y;
                node = node.parent;

                if (node !== target) {
                  if (node) {
                    _tempScale.set(node.getScale().x, node.getScale().y);
                  } else {
                    _tempScale.set(0, 0);
                  }

                  var sx = _tempScale.x;
                  var sy = _tempScale.y;
                  translateX *= sx;
                  translateY *= sy;
                  scaleX *= sx;
                  scaleY *= sy;
                } else {
                  break;
                }
              }

              out_inverseScale.x = scaleX !== 0 ? 1 / scaleX : 1;
              out_inverseScale.y = scaleY !== 0 ? 1 / scaleY : 1;
              out_inverseTranslate.x = -translateX;
              out_inverseTranslate.y = -translateY;
            }
            var AlignMode;

            (function (AlignMode) {
              AlignMode[AlignMode["ONCE"] = 0] = "ONCE";
              AlignMode[AlignMode["ALWAYS"] = 1] = "ALWAYS";
              AlignMode[AlignMode["ON_WINDOW_RESIZE"] = 2] = "ON_WINDOW_RESIZE";
            })(AlignMode || (AlignMode = {}));

            ccenum(AlignMode);
            var AlignFlags;

            (function (AlignFlags) {
              AlignFlags[AlignFlags["TOP"] = 1] = "TOP";
              AlignFlags[AlignFlags["MID"] = 2] = "MID";
              AlignFlags[AlignFlags["BOT"] = 4] = "BOT";
              AlignFlags[AlignFlags["LEFT"] = 8] = "LEFT";
              AlignFlags[AlignFlags["CENTER"] = 16] = "CENTER";
              AlignFlags[AlignFlags["RIGHT"] = 32] = "RIGHT";
              AlignFlags[AlignFlags["HORIZONTAL"] = 56] = "HORIZONTAL";
              AlignFlags[AlignFlags["VERTICAL"] = 7] = "VERTICAL";
            })(AlignFlags || (AlignFlags = {}));

            var TOP_BOT = AlignFlags.TOP | AlignFlags.BOT;
            var LEFT_RIGHT = AlignFlags.LEFT | AlignFlags.RIGHT;
            var Widget = function (v) { return exports({ Widget: v, WidgetComponent: v }), v; }((_dec$1E = ccclass('cc.Widget'), _dec2$1m = help(), _dec3$Y = executionOrder(110), _dec4$T = menu$1(), _dec5$N = requireComponent(UITransform), _dec6$K = type$1(Node), _dec7$J = tooltip(), _dec8$G = tooltip(), _dec9$C = tooltip(), _dec10$A = tooltip(), _dec11$v = tooltip(), _dec12$v = tooltip(), _dec13$u = tooltip(), _dec14$q = visible(), _dec15$q = visible(), _dec16$o = tooltip(), _dec17$m = tooltip(), _dec18$l = tooltip(), _dec19$l = tooltip(), _dec20$k = tooltip(), _dec21$j = tooltip(), _dec22$h = type$1(AlignMode), _dec23$g = tooltip(), _dec$1E(_class$1H = _dec2$1m(_class$1H = _dec3$Y(_class$1H = _dec4$T(_class$1H = _dec5$N(_class$1H = executeInEditMode(_class$1H = (_class2$1u = (_temp$1z = _class3$q = function (_Component) {
              _inheritsLoose(Widget, _Component);

              function Widget() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;
                _this._lastPos = new Vec3();
                _this._lastSize = new Size$1();
                _this._dirty = true;
                _this._hadAlignOnce = false;

                _initializerDefineProperty(_this, "_alignFlags", _descriptor$1q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_target", _descriptor2$1f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_left", _descriptor3$$, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_right", _descriptor4$U, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_top", _descriptor5$K, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_bottom", _descriptor6$C, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_horizontalCenter", _descriptor7$s, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_verticalCenter", _descriptor8$p, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isAbsLeft", _descriptor9$l, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isAbsRight", _descriptor10$j, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isAbsTop", _descriptor11$h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isAbsBottom", _descriptor12$g, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isAbsHorizontalCenter", _descriptor13$f, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_isAbsVerticalCenter", _descriptor14$8, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_originalWidth", _descriptor15$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_originalHeight", _descriptor16$7, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_alignMode", _descriptor17$6, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_lockFlags", _descriptor18$5, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = Widget.prototype;

              _proto.updateAlignment = function updateAlignment() {
                legacyCC._widgetManager.updateAlignment(this.node);
              };

              _proto._validateTargetInDEV = function _validateTargetInDEV() {
                {
                  return;
                }
              };

              _proto.setDirty = function setDirty() {
                this._recursiveDirty();
              };

              _proto.onEnable = function onEnable() {
                this.node.getPosition(this._lastPos);

                this._lastSize.set(this.node._uiProps.uiTransformComp.contentSize);

                legacyCC._widgetManager.add(this);

                this._hadAlignOnce = false;

                this._registerEvent();

                this._registerTargetEvents();
              };

              _proto.onDisable = function onDisable() {
                legacyCC._widgetManager.remove(this);

                this._unregisterEvent();

                this._unregisterTargetEvents();
              };

              _proto.onDestroy = function onDestroy() {
                this._removeParentEvent();
              };

              _proto._adjustWidgetToAllowMovingInEditor = function _adjustWidgetToAllowMovingInEditor(eventType) {};

              _proto._adjustWidgetToAllowResizingInEditor = function _adjustWidgetToAllowResizingInEditor() {};

              _proto._adjustWidgetToAnchorChanged = function _adjustWidgetToAnchorChanged() {
                this.setDirty();
              };

              _proto._adjustTargetToParentChanged = function _adjustTargetToParentChanged(oldParent) {
                if (oldParent) {
                  this._unregisterOldParentEvents(oldParent);
                }

                if (this.node.getParent()) {
                  this._registerTargetEvents();
                }

                this._setDirtyByMode();
              };

              _proto._registerEvent = function _registerEvent() {
                {
                  this.node.on(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
                  this.node.on(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
                }

                this.node.on(NodeEventType.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this);
                this.node.on(NodeEventType.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
              };

              _proto._unregisterEvent = function _unregisterEvent() {
                {
                  this.node.off(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
                  this.node.off(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
                }

                this.node.off(NodeEventType.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this);
              };

              _proto._removeParentEvent = function _removeParentEvent() {
                this.node.off(NodeEventType.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
              };

              _proto._autoChangedValue = function _autoChangedValue(flag, isAbs) {
                var current = (this._alignFlags & flag) > 0;

                if (!current) {
                  return;
                }

                var parentUiProps = this.node.parent && this.node.parent._uiProps;
                var parentTrans = parentUiProps && parentUiProps.uiTransformComp;
                var size = parentTrans ? parentTrans.contentSize : visibleRect;

                if (this.isAlignLeft && flag === AlignFlags.LEFT) {
                  this._left = isAbs ? this._left * size.width : this._left / size.width;
                } else if (this.isAlignRight && flag === AlignFlags.RIGHT) {
                  this._right = isAbs ? this._right * size.width : this._right / size.width;
                } else if (this.isAlignHorizontalCenter && flag === AlignFlags.CENTER) {
                  this._horizontalCenter = isAbs ? this._horizontalCenter * size.width : this._horizontalCenter / size.width;
                } else if (this.isAlignTop && flag === AlignFlags.TOP) {
                  this._top = isAbs ? this._top * size.height : this._top / size.height;
                } else if (this.isAlignBottom && flag === AlignFlags.BOT) {
                  this._bottom = isAbs ? this._bottom * size.height : this._bottom / size.height;
                } else if (this.isAbsoluteVerticalCenter && flag === AlignFlags.MID) {
                  this._verticalCenter = isAbs ? this._verticalCenter / size.height : this._verticalCenter / size.height;
                }

                this._recursiveDirty();
              };

              _proto._registerTargetEvents = function _registerTargetEvents() {
                var target = this._target || this.node.parent;

                if (target) {
                  if (target.getComponent(UITransform)) {
                    target.on(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
                    target.on(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
                    target.on(NodeEventType.ANCHOR_CHANGED, this._setDirtyByMode, this);
                  }
                }
              };

              _proto._unregisterTargetEvents = function _unregisterTargetEvents() {
                var target = this._target || this.node.parent;

                if (target) {
                  target.off(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
                  target.off(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
                  target.off(NodeEventType.ANCHOR_CHANGED, this._setDirtyByMode, this);
                }
              };

              _proto._unregisterOldParentEvents = function _unregisterOldParentEvents(oldParent) {
                var target = this._target || oldParent;

                if (target) {
                  target.off(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
                  target.off(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
                }
              };

              _proto._setDirtyByMode = function _setDirtyByMode() {
                if (this.alignMode === AlignMode.ALWAYS || EDITOR) {
                  this._recursiveDirty();
                }
              };

              _proto._setAlign = function _setAlign(flag, isAlign) {
                var current = (this._alignFlags & flag) > 0;

                if (isAlign === current) {
                  return;
                }

                var isHorizontal = (flag & LEFT_RIGHT) > 0;
                var trans = this.node._uiProps.uiTransformComp;

                if (isAlign) {
                  this._alignFlags |= flag;

                  if (isHorizontal) {
                    this.isAlignHorizontalCenter = false;

                    if (this.isStretchWidth) {
                      this._originalWidth = trans.width;
                    }
                  } else {
                    this.isAlignVerticalCenter = false;

                    if (this.isStretchHeight) {
                      this._originalHeight = trans.height;
                    }
                  }
                } else {
                  if (isHorizontal) {
                    if (this.isStretchWidth) {
                      trans.width = this._originalWidth;
                    }
                  } else if (this.isStretchHeight) {
                    trans.height = this._originalHeight;
                  }

                  this._alignFlags &= ~flag;
                }
              };

              _proto._recursiveDirty = function _recursiveDirty() {
                if (this._dirty) {
                  return;
                }

                this._dirty = true;
              };

              _createClass(Widget, [{
                key: "target",
                get: function get() {
                  return this._target;
                },
                set: function set(value) {
                  if (this._target === value) {
                    return;
                  }

                  this._unregisterTargetEvents();

                  this._target = value;

                  this._registerTargetEvents();

                  this._validateTargetInDEV();

                  this._recursiveDirty();
                }
              }, {
                key: "isAlignTop",
                get: function get() {
                  return (this._alignFlags & AlignFlags.TOP) > 0;
                },
                set: function set(value) {
                  this._setAlign(AlignFlags.TOP, value);

                  this._recursiveDirty();
                }
              }, {
                key: "isAlignBottom",
                get: function get() {
                  return (this._alignFlags & AlignFlags.BOT) > 0;
                },
                set: function set(value) {
                  this._setAlign(AlignFlags.BOT, value);

                  this._recursiveDirty();
                }
              }, {
                key: "isAlignLeft",
                get: function get() {
                  return (this._alignFlags & AlignFlags.LEFT) > 0;
                },
                set: function set(value) {
                  this._setAlign(AlignFlags.LEFT, value);

                  this._recursiveDirty();
                }
              }, {
                key: "isAlignRight",
                get: function get() {
                  return (this._alignFlags & AlignFlags.RIGHT) > 0;
                },
                set: function set(value) {
                  this._setAlign(AlignFlags.RIGHT, value);

                  this._recursiveDirty();
                }
              }, {
                key: "isAlignVerticalCenter",
                get: function get() {
                  return (this._alignFlags & AlignFlags.MID) > 0;
                },
                set: function set(value) {
                  if (value) {
                    this.isAlignTop = false;
                    this.isAlignBottom = false;
                    this._alignFlags |= AlignFlags.MID;
                  } else {
                    this._alignFlags &= ~AlignFlags.MID;
                  }

                  this._recursiveDirty();
                }
              }, {
                key: "isAlignHorizontalCenter",
                get: function get() {
                  return (this._alignFlags & AlignFlags.CENTER) > 0;
                },
                set: function set(value) {
                  if (value) {
                    this.isAlignLeft = false;
                    this.isAlignRight = false;
                    this._alignFlags |= AlignFlags.CENTER;
                  } else {
                    this._alignFlags &= ~AlignFlags.CENTER;
                  }

                  this._recursiveDirty();
                }
              }, {
                key: "isStretchWidth",
                get: function get() {
                  return (this._alignFlags & LEFT_RIGHT) === LEFT_RIGHT;
                }
              }, {
                key: "isStretchHeight",
                get: function get() {
                  return (this._alignFlags & TOP_BOT) === TOP_BOT;
                }
              }, {
                key: "top",
                get: function get() {
                  return this._top;
                },
                set: function set(value) {
                  this._top = value;

                  this._recursiveDirty();
                }
              }, {
                key: "editorTop",
                get: function get() {
                  return this._isAbsTop ? this._top : this._top * 100;
                },
                set: function set(value) {
                  this._top = this._isAbsTop ? value : value / 100;

                  this._recursiveDirty();
                }
              }, {
                key: "bottom",
                get: function get() {
                  return this._bottom;
                },
                set: function set(value) {
                  this._bottom = value;

                  this._recursiveDirty();
                }
              }, {
                key: "editorBottom",
                get: function get() {
                  return this._isAbsBottom ? this._bottom : this._bottom * 100;
                },
                set: function set(value) {
                  this._bottom = this._isAbsBottom ? value : value / 100;

                  this._recursiveDirty();
                }
              }, {
                key: "left",
                get: function get() {
                  return this._left;
                },
                set: function set(value) {
                  this._left = value;

                  this._recursiveDirty();
                }
              }, {
                key: "editorLeft",
                get: function get() {
                  return this._isAbsLeft ? this._left : this._left * 100;
                },
                set: function set(value) {
                  this._left = this._isAbsLeft ? value : value / 100;

                  this._recursiveDirty();
                }
              }, {
                key: "right",
                get: function get() {
                  return this._right;
                },
                set: function set(value) {
                  this._right = value;

                  this._recursiveDirty();
                }
              }, {
                key: "editorRight",
                get: function get() {
                  return this._isAbsRight ? this._right : this._right * 100;
                },
                set: function set(value) {
                  this._right = this._isAbsRight ? value : value / 100;

                  this._recursiveDirty();
                }
              }, {
                key: "horizontalCenter",
                get: function get() {
                  return this._horizontalCenter;
                },
                set: function set(value) {
                  this._horizontalCenter = value;

                  this._recursiveDirty();
                }
              }, {
                key: "editorHorizontalCenter",
                get: function get() {
                  return this._isAbsHorizontalCenter ? this._horizontalCenter : this._horizontalCenter * 100;
                },
                set: function set(value) {
                  this._horizontalCenter = this._isAbsHorizontalCenter ? value : value / 100;

                  this._recursiveDirty();
                }
              }, {
                key: "verticalCenter",
                get: function get() {
                  return this._verticalCenter;
                },
                set: function set(value) {
                  this._verticalCenter = value;

                  this._recursiveDirty();
                }
              }, {
                key: "editorVerticalCenter",
                get: function get() {
                  return this._isAbsVerticalCenter ? this._verticalCenter : this._verticalCenter * 100;
                },
                set: function set(value) {
                  this._verticalCenter = this._isAbsVerticalCenter ? value : value / 100;

                  this._recursiveDirty();
                }
              }, {
                key: "isAbsoluteTop",
                get: function get() {
                  return this._isAbsTop;
                },
                set: function set(value) {
                  if (this._isAbsTop === value) {
                    return;
                  }

                  this._isAbsTop = value;

                  this._autoChangedValue(AlignFlags.TOP, this._isAbsTop);
                }
              }, {
                key: "isAbsoluteBottom",
                get: function get() {
                  return this._isAbsBottom;
                },
                set: function set(value) {
                  if (this._isAbsBottom === value) {
                    return;
                  }

                  this._isAbsBottom = value;

                  this._autoChangedValue(AlignFlags.BOT, this._isAbsBottom);
                }
              }, {
                key: "isAbsoluteLeft",
                get: function get() {
                  return this._isAbsLeft;
                },
                set: function set(value) {
                  if (this._isAbsLeft === value) {
                    return;
                  }

                  this._isAbsLeft = value;

                  this._autoChangedValue(AlignFlags.LEFT, this._isAbsLeft);
                }
              }, {
                key: "isAbsoluteRight",
                get: function get() {
                  return this._isAbsRight;
                },
                set: function set(value) {
                  if (this._isAbsRight === value) {
                    return;
                  }

                  this._isAbsRight = value;

                  this._autoChangedValue(AlignFlags.RIGHT, this._isAbsRight);
                }
              }, {
                key: "isAbsoluteHorizontalCenter",
                get: function get() {
                  return this._isAbsHorizontalCenter;
                },
                set: function set(value) {
                  if (this._isAbsHorizontalCenter === value) {
                    return;
                  }

                  this._isAbsHorizontalCenter = value;

                  this._autoChangedValue(AlignFlags.CENTER, this._isAbsHorizontalCenter);
                }
              }, {
                key: "isAbsoluteVerticalCenter",
                get: function get() {
                  return this._isAbsVerticalCenter;
                },
                set: function set(value) {
                  if (this._isAbsVerticalCenter === value) {
                    return;
                  }

                  this._isAbsVerticalCenter = value;

                  this._autoChangedValue(AlignFlags.MID, this._isAbsVerticalCenter);
                }
              }, {
                key: "alignMode",
                get: function get() {
                  return this._alignMode;
                },
                set: function set(value) {
                  this._alignMode = value;

                  this._recursiveDirty();
                }
              }, {
                key: "alignFlags",
                get: function get() {
                  return this._alignFlags;
                },
                set: function set(value) {
                  if (this._alignFlags === value) {
                    return;
                  }

                  this._alignFlags = value;

                  this._recursiveDirty();
                }
              }]);

              return Widget;
            }(Component), _class3$q.AlignMode = AlignMode, _temp$1z), (_applyDecoratedDescriptor(_class2$1u.prototype, "target", [_dec6$K, _dec7$J], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "target"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAlignTop", [_dec8$G], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAlignTop"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAlignBottom", [_dec9$C], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAlignBottom"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAlignLeft", [_dec10$A], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAlignLeft"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAlignRight", [_dec11$v], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAlignRight"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAlignVerticalCenter", [_dec12$v], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAlignVerticalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAlignHorizontalCenter", [_dec13$u], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAlignHorizontalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isStretchWidth", [_dec14$q], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isStretchWidth"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isStretchHeight", [_dec15$q], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isStretchHeight"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "top", [_dec16$o], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "top"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "editorTop", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "editorTop"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "bottom", [_dec17$m], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "bottom"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "editorBottom", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "editorBottom"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "left", [_dec18$l], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "left"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "editorLeft", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "editorLeft"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "right", [_dec19$l], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "right"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "editorRight", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "editorRight"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "horizontalCenter", [_dec20$k], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "horizontalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "editorHorizontalCenter", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "editorHorizontalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "verticalCenter", [_dec21$j], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "verticalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "editorVerticalCenter", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "editorVerticalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAbsoluteTop", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAbsoluteTop"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAbsoluteBottom", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAbsoluteBottom"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAbsoluteLeft", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAbsoluteLeft"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAbsoluteRight", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAbsoluteRight"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAbsoluteHorizontalCenter", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAbsoluteHorizontalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "isAbsoluteVerticalCenter", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "isAbsoluteVerticalCenter"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "alignMode", [_dec22$h, _dec23$g], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "alignMode"), _class2$1u.prototype), _applyDecoratedDescriptor(_class2$1u.prototype, "alignFlags", [editable], Object.getOwnPropertyDescriptor(_class2$1u.prototype, "alignFlags"), _class2$1u.prototype), _descriptor$1q = _applyDecoratedDescriptor(_class2$1u.prototype, "_alignFlags", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor2$1f = _applyDecoratedDescriptor(_class2$1u.prototype, "_target", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor3$$ = _applyDecoratedDescriptor(_class2$1u.prototype, "_left", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor4$U = _applyDecoratedDescriptor(_class2$1u.prototype, "_right", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor5$K = _applyDecoratedDescriptor(_class2$1u.prototype, "_top", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor6$C = _applyDecoratedDescriptor(_class2$1u.prototype, "_bottom", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor7$s = _applyDecoratedDescriptor(_class2$1u.prototype, "_horizontalCenter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor8$p = _applyDecoratedDescriptor(_class2$1u.prototype, "_verticalCenter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor9$l = _applyDecoratedDescriptor(_class2$1u.prototype, "_isAbsLeft", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor10$j = _applyDecoratedDescriptor(_class2$1u.prototype, "_isAbsRight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor11$h = _applyDecoratedDescriptor(_class2$1u.prototype, "_isAbsTop", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor12$g = _applyDecoratedDescriptor(_class2$1u.prototype, "_isAbsBottom", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor13$f = _applyDecoratedDescriptor(_class2$1u.prototype, "_isAbsHorizontalCenter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor14$8 = _applyDecoratedDescriptor(_class2$1u.prototype, "_isAbsVerticalCenter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor15$7 = _applyDecoratedDescriptor(_class2$1u.prototype, "_originalWidth", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor16$7 = _applyDecoratedDescriptor(_class2$1u.prototype, "_originalHeight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor17$6 = _applyDecoratedDescriptor(_class2$1u.prototype, "_alignMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return AlignMode.ON_WINDOW_RESIZE;
              }
            }), _descriptor18$5 = _applyDecoratedDescriptor(_class2$1u.prototype, "_lockFlags", [serializable, editorOnly], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class2$1u)) || _class$1H) || _class$1H) || _class$1H) || _class$1H) || _class$1H) || _class$1H));
            legacyCC.internal.computeInverseTransForTarget = computeInverseTransForTarget;
            legacyCC.internal.getReadonlyNodeSize = getReadonlyNodeSize;
            legacyCC.Widget = Widget;

            var _dec$1F, _dec2$1n, _dec3$Z, _dec4$U, _dec5$O, _dec6$L, _dec7$K, _dec8$H, _dec9$D, _dec10$B, _dec11$w, _class$1I, _class2$1v, _descriptor$1r, _descriptor2$1g, _descriptor3$10, _descriptor4$V, _class3$r, _temp$1A;

            var _color$1 = new Color$1();

            var Direction$2;

            (function (Direction) {
              Direction[Direction["HORIZONTAL"] = 0] = "HORIZONTAL";
              Direction[Direction["VERTICAL"] = 1] = "VERTICAL";
            })(Direction$2 || (Direction$2 = {}));

            ccenum(Direction$2);
            var PageViewIndicator = function (v) { return exports({ PageViewIndicator: v, PageViewIndicatorComponent: v }), v; }((_dec$1F = ccclass('cc.PageViewIndicator'), _dec2$1n = help(), _dec3$Z = executionOrder(110), _dec4$U = menu$1(), _dec5$O = type$1(SpriteFrame), _dec6$L = tooltip(), _dec7$K = type$1(Direction$2), _dec8$H = tooltip(), _dec9$D = type$1(Size$1), _dec10$B = tooltip(), _dec11$w = tooltip(), _dec$1F(_class$1I = _dec2$1n(_class$1I = _dec3$Z(_class$1I = _dec4$U(_class$1I = (_class2$1v = (_temp$1A = _class3$r = function (_Component) {
              _inheritsLoose(PageViewIndicator, _Component);

              function PageViewIndicator() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "spacing", _descriptor$1r, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_spriteFrame", _descriptor2$1g, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_direction", _descriptor3$10, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_cellSize", _descriptor4$V, _assertThisInitialized(_this));

                _this._layout = null;
                _this._pageView = null;
                _this._indicators = [];
                return _this;
              }

              var _proto = PageViewIndicator.prototype;

              _proto.onLoad = function onLoad() {
                this._updateLayout();
              };

              _proto.setPageView = function setPageView(target) {
                this._pageView = target;

                this._refresh();
              };

              _proto._updateLayout = function _updateLayout() {
                this._layout = this.getComponent(Layout);

                if (!this._layout) {
                  this._layout = this.addComponent(Layout);
                }

                var layout = this._layout;

                if (this.direction === Direction$2.HORIZONTAL) {
                  layout.type = Layout.Type.HORIZONTAL;
                  layout.spacingX = this.spacing;
                } else if (this.direction === Direction$2.VERTICAL) {
                  layout.type = Layout.Type.VERTICAL;
                  layout.spacingY = this.spacing;
                }

                layout.resizeMode = Layout.ResizeMode.CONTAINER;
              };

              _proto._createIndicator = function _createIndicator() {
                var node = new Node();
                node.layer = this.node.layer;
                var sprite = node.addComponent(Sprite);
                sprite.spriteFrame = this.spriteFrame;
                sprite.sizeMode = Sprite.SizeMode.CUSTOM;
                node.parent = this.node;

                node._uiProps.uiTransformComp.setContentSize(this._cellSize);

                return node;
              };

              _proto._changedState = function _changedState() {
                var indicators = this._indicators;

                if (indicators.length === 0 || !this._pageView) {
                  return;
                }

                var idx = this._pageView.curPageIdx;

                if (idx >= indicators.length) {
                  return;
                }

                for (var i = 0; i < indicators.length; ++i) {
                  var node = indicators[i];

                  if (!node._uiProps.uiComp) {
                    continue;
                  }

                  var uiComp = node._uiProps.uiComp;

                  _color$1.set(uiComp.color);

                  _color$1.a = 255 / 2;
                  uiComp.color = _color$1;
                }

                if (indicators[idx]._uiProps.uiComp) {
                  var comp = indicators[idx]._uiProps.uiComp;

                  _color$1.set(comp.color);

                  _color$1.a = 255;
                  comp.color = _color$1;
                }
              };

              _proto._refresh = function _refresh() {
                if (!this._pageView) {
                  return;
                }

                var indicators = this._indicators;

                var pages = this._pageView.getPages();

                if (pages.length === indicators.length) {
                  return;
                }

                var i = 0;

                if (pages.length > indicators.length) {
                  for (i = 0; i < pages.length; ++i) {
                    if (!indicators[i]) {
                      indicators[i] = this._createIndicator();
                    }
                  }
                } else {
                  var count = indicators.length - pages.length;

                  for (i = count; i > 0; --i) {
                    var node = indicators[i - 1];
                    this.node.removeChild(node);
                    indicators.splice(i - 1, 1);
                  }
                }

                if (this._layout && this._layout.enabledInHierarchy) {
                  this._layout.updateLayout();
                }

                this._changedState();
              };

              _createClass(PageViewIndicator, [{
                key: "spriteFrame",
                get: function get() {
                  return this._spriteFrame;
                },
                set: function set(value) {
                  if (this._spriteFrame === value) {
                    return;
                  }

                  this._spriteFrame = value;
                }
              }, {
                key: "direction",
                get: function get() {
                  return this._direction;
                },
                set: function set(value) {
                  if (this._direction === value) {
                    return;
                  }

                  this._direction = value;
                }
              }, {
                key: "cellSize",
                get: function get() {
                  return this._cellSize;
                },
                set: function set(value) {
                  if (this._cellSize === value) {
                    return;
                  }

                  this._cellSize = value;
                }
              }]);

              return PageViewIndicator;
            }(Component), _class3$r.Direction = Direction$2, _temp$1A), (_applyDecoratedDescriptor(_class2$1v.prototype, "spriteFrame", [_dec5$O, _dec6$L], Object.getOwnPropertyDescriptor(_class2$1v.prototype, "spriteFrame"), _class2$1v.prototype), _applyDecoratedDescriptor(_class2$1v.prototype, "direction", [_dec7$K, _dec8$H], Object.getOwnPropertyDescriptor(_class2$1v.prototype, "direction"), _class2$1v.prototype), _applyDecoratedDescriptor(_class2$1v.prototype, "cellSize", [_dec9$D, _dec10$B], Object.getOwnPropertyDescriptor(_class2$1v.prototype, "cellSize"), _class2$1v.prototype), _descriptor$1r = _applyDecoratedDescriptor(_class2$1v.prototype, "spacing", [serializable, _dec11$w], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            }), _descriptor2$1g = _applyDecoratedDescriptor(_class2$1v.prototype, "_spriteFrame", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor3$10 = _applyDecoratedDescriptor(_class2$1v.prototype, "_direction", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Direction$2.HORIZONTAL;
              }
            }), _descriptor4$V = _applyDecoratedDescriptor(_class2$1v.prototype, "_cellSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Size$1(20, 20);
              }
            })), _class2$1v)) || _class$1I) || _class$1I) || _class$1I) || _class$1I));
            legacyCC.PageViewIndicator = PageViewIndicator;

            var _dec$1G, _dec2$1o, _dec3$_, _dec4$V, _dec5$P, _dec6$M, _dec7$L, _dec8$I, _dec9$E, _dec10$C, _dec11$x, _dec12$w, _dec13$v, _dec14$r, _dec15$r, _dec16$p, _dec17$n, _dec18$m, _dec19$m, _dec20$l, _dec21$k, _dec22$i, _dec23$h, _dec24$f, _dec25$f, _dec26$e, _dec27$e, _class$1J, _class2$1w, _descriptor$1s, _descriptor2$1h, _descriptor3$11, _descriptor4$W, _descriptor5$L, _descriptor6$D, _descriptor7$t, _descriptor8$q, _descriptor9$m, _descriptor10$k, _descriptor11$i, _descriptor12$h, _class3$s, _temp$1B;

            var _tempVec2$2 = new Vec2();

            var SizeMode$1;

            (function (SizeMode) {
              SizeMode[SizeMode["Unified"] = 0] = "Unified";
              SizeMode[SizeMode["Free"] = 1] = "Free";
            })(SizeMode$1 || (SizeMode$1 = {}));

            ccenum(SizeMode$1);
            var Direction$3;

            (function (Direction) {
              Direction[Direction["Horizontal"] = 0] = "Horizontal";
              Direction[Direction["Vertical"] = 1] = "Vertical";
            })(Direction$3 || (Direction$3 = {}));

            ccenum(Direction$3);
            var EventType$6;

            (function (EventType) {
              EventType["PAGE_TURNING"] = "page-turning";
            })(EventType$6 || (EventType$6 = {}));

            var PageView = function (v) { return exports({ PageView: v, PageViewComponent: v }), v; }((_dec$1G = ccclass('cc.PageView'), _dec2$1o = help(), _dec3$_ = executionOrder(110), _dec4$V = menu$1(), _dec5$P = type$1(SizeMode$1), _dec6$M = tooltip(), _dec7$L = type$1(Direction$3), _dec8$I = tooltip(), _dec9$E = range(), _dec10$C = tooltip(), _dec11$x = range(), _dec12$w = tooltip(), _dec13$v = type$1(PageViewIndicator), _dec14$r = tooltip(), _dec15$r = tooltip(), _dec16$p = type$1(ScrollBar), _dec17$n = visible(), _dec18$m = type$1(ScrollBar), _dec19$m = visible(), _dec20$l = visible(), _dec21$k = visible(), _dec22$i = visible(), _dec23$h = type$1([EventHandler]), _dec24$f = visible(), _dec25$f = tooltip(), _dec26$e = type$1([EventHandler]), _dec27$e = tooltip(), _dec$1G(_class$1J = _dec2$1o(_class$1J = _dec3$_(_class$1J = _dec4$V(_class$1J = (_class2$1w = (_temp$1B = _class3$s = function (_ScrollView) {
              _inheritsLoose(PageView, _ScrollView);

              function PageView() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _ScrollView.call.apply(_ScrollView, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "autoPageTurningThreshold", _descriptor$1s, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "horizontal", _descriptor2$1h, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "vertical", _descriptor3$11, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "cancelInnerEvents", _descriptor4$W, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "scrollEvents", _descriptor5$L, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "pageTurningSpeed", _descriptor6$D, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "pageEvents", _descriptor7$t, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_sizeMode", _descriptor8$q, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_direction", _descriptor9$m, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_scrollThreshold", _descriptor10$k, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_pageTurningEventTiming", _descriptor11$i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_indicator", _descriptor12$h, _assertThisInitialized(_this));

                _this._curPageIdx = 0;
                _this._lastPageIdx = 0;
                _this._pages = [];
                _this._initContentPos = new Vec3();
                _this._scrollCenterOffsetX = [];
                _this._scrollCenterOffsetY = [];
                _this._touchBeganPosition = new Vec2();
                _this._touchEndPosition = new Vec2();
                return _this;
              }

              var _proto = PageView.prototype;

              _proto.onEnable = function onEnable() {
                _ScrollView.prototype.onEnable.call(this);

                this.node.on(NodeEventType.SIZE_CHANGED, this._updateAllPagesSize, this);

                {
                  this.node.on(PageView.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
                }
              };

              _proto.onDisable = function onDisable() {
                _ScrollView.prototype.onDisable.call(this);

                this.node.off(NodeEventType.SIZE_CHANGED, this._updateAllPagesSize, this);

                {
                  this.node.off(PageView.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
                }
              };

              _proto.onLoad = function onLoad() {
                this._initPages();

                if (this.indicator) {
                  this.indicator.setPageView(this);
                }
              };

              _proto.getCurrentPageIndex = function getCurrentPageIndex() {
                return this._curPageIdx;
              };

              _proto.setCurrentPageIndex = function setCurrentPageIndex(index) {
                this.scrollToPage(index, 1);
              };

              _proto.getPages = function getPages() {
                return this._pages;
              };

              _proto.addPage = function addPage(page) {
                if (!page || this._pages.indexOf(page) !== -1 || !this.content) {
                  return;
                }

                if (!page._uiProps.uiTransformComp) {
                  logID(4301);
                  return;
                }

                this.content.addChild(page);

                this._pages.push(page);

                this._updatePageView();
              };

              _proto.insertPage = function insertPage(page, index) {
                if (index < 0 || !page || this._pages.indexOf(page) !== -1 || !this.content) {
                  return;
                }

                var pageCount = this._pages.length;

                if (index >= pageCount) {
                  this.addPage(page);
                } else {
                  if (!page._uiProps.uiTransformComp) {
                    logID(4301);
                    return;
                  }

                  this._pages.splice(index, 0, page);

                  this.content.insertChild(page, index);

                  this._updatePageView();
                }
              };

              _proto.removePage = function removePage(page) {
                if (!page || !this.content) {
                  return;
                }

                var index = this._pages.indexOf(page);

                if (index === -1) {
                  warnID(4300, page.name);
                  return;
                }

                this.removePageAtIndex(index);
              };

              _proto.removePageAtIndex = function removePageAtIndex(index) {
                var pageList = this._pages;

                if (index < 0 || index >= pageList.length) {
                  return;
                }

                var page = pageList[index];

                if (!page || !this.content) {
                  return;
                }

                this.content.removeChild(page);
                pageList.splice(index, 1);

                this._updatePageView();
              };

              _proto.removeAllPages = function removeAllPages() {
                if (!this.content) {
                  return;
                }

                var locPages = this._pages;

                for (var i = 0, len = locPages.length; i < len; i++) {
                  this.content.removeChild(locPages[i]);
                }

                this._pages.length = 0;

                this._updatePageView();
              };

              _proto.scrollToPage = function scrollToPage(idx, timeInSecond) {
                if (timeInSecond === void 0) {
                  timeInSecond = 0.3;
                }

                if (idx < 0 || idx >= this._pages.length) {
                  return;
                }

                this._curPageIdx = idx;
                this.scrollToOffset(this._moveOffsetValue(idx), timeInSecond, true);

                if (this.indicator) {
                  this.indicator._changedState();
                }
              };

              _proto.getScrollEndedEventTiming = function getScrollEndedEventTiming() {
                return this.pageTurningEventTiming;
              };

              _proto._updatePageView = function _updatePageView() {
                if (!this.content) {
                  return;
                }

                var layout = this.content.getComponent(Layout);

                if (layout && layout.enabled) {
                  layout.updateLayout();
                }

                var pageCount = this._pages.length;

                if (this._curPageIdx >= pageCount) {
                  this._curPageIdx = pageCount === 0 ? 0 : pageCount - 1;
                  this._lastPageIdx = this._curPageIdx;
                }

                var contentPos = this._initContentPos;

                for (var i = 0; i < pageCount; ++i) {
                  var page = this._pages[i];
                  var pos = page.position;

                  if (this.direction === Direction$3.Horizontal) {
                    this._scrollCenterOffsetX[i] = Math.abs(contentPos.x + pos.x);
                  } else {
                    this._scrollCenterOffsetY[i] = Math.abs(contentPos.y + pos.y);
                  }
                }

                if (this.indicator) {
                  this.indicator._refresh();
                }
              };

              _proto._updateAllPagesSize = function _updateAllPagesSize() {
                var viewTrans = this.view;

                if (!this.content || !viewTrans) {
                  return;
                }

                if (this._sizeMode !== SizeMode$1.Unified) {
                  return;
                }

                var locPages =  this._pages;
                var selfSize = viewTrans.contentSize;

                for (var i = 0, len = locPages.length; i < len; i++) {
                  locPages[i]._uiProps.uiTransformComp.setContentSize(selfSize);
                }
              };

              _proto._handleReleaseLogic = function _handleReleaseLogic() {
                this._autoScrollToPage();

                if (this._scrolling) {
                  this._scrolling = false;

                  if (!this._autoScrolling) {
                    this._dispatchEvent(PageView.EventType.SCROLL_ENDED);
                  }
                }
              };

              _proto._onTouchBegan = function _onTouchBegan(event, captureListeners) {
                event.touch.getUILocation(_tempVec2$2);
                Vec2.set(this._touchBeganPosition, _tempVec2$2.x, _tempVec2$2.y);

                _ScrollView.prototype._onTouchBegan.call(this, event, captureListeners);
              };

              _proto._onTouchMoved = function _onTouchMoved(event, captureListeners) {
                _ScrollView.prototype._onTouchMoved.call(this, event, captureListeners);
              };

              _proto._onTouchEnded = function _onTouchEnded(event, captureListeners) {
                event.touch.getUILocation(_tempVec2$2);
                Vec2.set(this._touchEndPosition, _tempVec2$2.x, _tempVec2$2.y);

                _ScrollView.prototype._onTouchEnded.call(this, event, captureListeners);
              };

              _proto._onTouchCancelled = function _onTouchCancelled(event, captureListeners) {
                event.touch.getUILocation(_tempVec2$2);
                Vec2.set(this._touchEndPosition, _tempVec2$2.x, _tempVec2$2.y);

                _ScrollView.prototype._onTouchCancelled.call(this, event, captureListeners);
              };

              _proto._onMouseWheel = function _onMouseWheel() {};

              _proto._syncScrollDirection = function _syncScrollDirection() {
                this.horizontal = this.direction === Direction$3.Horizontal;
                this.vertical = this.direction === Direction$3.Vertical;
              };

              _proto._syncSizeMode = function _syncSizeMode() {
                var viewTrans = this.view;

                if (!this.content || !viewTrans) {
                  return;
                }

                var layout = this.content.getComponent(Layout);

                if (layout) {
                  if (this._sizeMode === SizeMode$1.Free && this._pages.length > 0) {
                    var firstPageTrans = this._pages[0]._uiProps.uiTransformComp;
                    var lastPageTrans = this._pages[this._pages.length - 1]._uiProps.uiTransformComp;

                    if (this.direction === Direction$3.Horizontal) {
                      layout.paddingLeft = (viewTrans.width - firstPageTrans.width) / 2;
                      layout.paddingRight = (viewTrans.width - lastPageTrans.width) / 2;
                    } else if (this.direction === Direction$3.Vertical) {
                      layout.paddingTop = (viewTrans.height - firstPageTrans.height) / 2;
                      layout.paddingBottom = (viewTrans.height - lastPageTrans.height) / 2;
                    }
                  }

                  layout.updateLayout();
                }
              };

              _proto._initPages = function _initPages() {
                if (!this.content) {
                  return;
                }

                this._initContentPos = this.content.position;
                var children = this.content.children;

                for (var i = 0; i < children.length; ++i) {
                  var page = children[i];

                  if (this._pages.indexOf(page) >= 0) {
                    continue;
                  }

                  this._pages.push(page);
                }

                this._syncScrollDirection();

                this._syncSizeMode();

                this._updatePageView();
              };

              _proto._dispatchPageTurningEvent = function _dispatchPageTurningEvent() {
                if (this._lastPageIdx === this._curPageIdx) {
                  return;
                }

                this._lastPageIdx = this._curPageIdx;
                EventHandler.emitEvents(this.pageEvents, this, EventType$6.PAGE_TURNING);
                this.node.emit(EventType$6.PAGE_TURNING, this);
              };

              _proto._isQuicklyScrollable = function _isQuicklyScrollable(touchMoveVelocity) {
                if (this.direction === Direction$3.Horizontal) {
                  if (Math.abs(touchMoveVelocity.x) > this.autoPageTurningThreshold) {
                    return true;
                  }
                } else if (this.direction === Direction$3.Vertical) {
                  if (Math.abs(touchMoveVelocity.y) > this.autoPageTurningThreshold) {
                    return true;
                  }
                }

                return false;
              };

              _proto._moveOffsetValue = function _moveOffsetValue(idx) {
                var offset = new Vec2();

                if (this._sizeMode === SizeMode$1.Free) {
                  if (this.direction === Direction$3.Horizontal) {
                    offset.x = this._scrollCenterOffsetX[idx];
                  } else if (this.direction === Direction$3.Vertical) {
                    offset.y = this._scrollCenterOffsetY[idx];
                  }
                } else {
                  var viewTrans = this.view;

                  if (!viewTrans) {
                    return offset;
                  }

                  if (this.direction === Direction$3.Horizontal) {
                    offset.x = idx * viewTrans.width;
                  } else if (this.direction === Direction$3.Vertical) {
                    offset.y = idx * viewTrans.height;
                  }
                }

                return offset;
              };

              _proto._getDragDirection = function _getDragDirection(moveOffset) {
                if (this._direction === Direction$3.Horizontal) {
                  if (moveOffset.x === 0) {
                    return 0;
                  }

                  return moveOffset.x > 0 ? 1 : -1;
                } else {
                  if (moveOffset.y === 0) {
                    return 0;
                  }

                  return moveOffset.y < 0 ? 1 : -1;
                }
              };

              _proto._isScrollable = function _isScrollable(offset, index, nextIndex) {
                if (this._sizeMode === SizeMode$1.Free) {
                  var curPageCenter = 0;
                  var nextPageCenter = 0;

                  if (this.direction === Direction$3.Horizontal) {
                    curPageCenter = this._scrollCenterOffsetX[index];
                    nextPageCenter = this._scrollCenterOffsetX[nextIndex];
                    return Math.abs(offset.x) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
                  } else if (this.direction === Direction$3.Vertical) {
                    curPageCenter = this._scrollCenterOffsetY[index];
                    nextPageCenter = this._scrollCenterOffsetY[nextIndex];
                    return Math.abs(offset.y) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
                  }
                } else {
                  var viewTrans = this.view;

                  if (!viewTrans) {
                    return false;
                  }

                  if (this.direction === Direction$3.Horizontal) {
                    return Math.abs(offset.x) >= viewTrans.width * this.scrollThreshold;
                  } else if (this.direction === Direction$3.Vertical) {
                    return Math.abs(offset.y) >= viewTrans.height * this.scrollThreshold;
                  }
                }

                return false;
              };

              _proto._autoScrollToPage = function _autoScrollToPage() {
                var bounceBackStarted = this._startBounceBackIfNeeded();

                if (bounceBackStarted) {
                  var bounceBackAmount = this._getHowMuchOutOfBoundary();

                  this._clampDelta(bounceBackAmount);

                  if (bounceBackAmount.x > 0 || bounceBackAmount.y < 0) {
                    this._curPageIdx = this._pages.length === 0 ? 0 : this._pages.length - 1;
                  }

                  if (bounceBackAmount.x < 0 || bounceBackAmount.y > 0) {
                    this._curPageIdx = 0;
                  }

                  if (this.indicator) {
                    this.indicator._changedState();
                  }
                } else {
                  var moveOffset = new Vec2();
                  Vec2.subtract(moveOffset, this._touchBeganPosition, this._touchEndPosition);
                  var index = this._curPageIdx;

                  var nextIndex = index + this._getDragDirection(moveOffset);

                  var timeInSecond = this.pageTurningSpeed * Math.abs(index - nextIndex);

                  if (nextIndex < this._pages.length) {
                    if (this._isScrollable(moveOffset, index, nextIndex)) {
                      this.scrollToPage(nextIndex, timeInSecond);
                      return;
                    } else {
                      var touchMoveVelocity = this._calculateTouchMoveVelocity();

                      if (this._isQuicklyScrollable(touchMoveVelocity)) {
                        this.scrollToPage(nextIndex, timeInSecond);
                        return;
                      }
                    }
                  }

                  this.scrollToPage(index, timeInSecond);
                }
              };

              _createClass(PageView, [{
                key: "sizeMode",
                get: function get() {
                  return this._sizeMode;
                },
                set: function set(value) {
                  if (this._sizeMode === value) {
                    return;
                  }

                  this._sizeMode = value;

                  this._syncSizeMode();
                }
              }, {
                key: "direction",
                get: function get() {
                  return this._direction;
                },
                set: function set(value) {
                  if (this._direction === value) {
                    return;
                  }

                  this._direction = value;

                  this._syncScrollDirection();
                }
              }, {
                key: "scrollThreshold",
                get: function get() {
                  return this._scrollThreshold;
                },
                set: function set(value) {
                  if (this._scrollThreshold === value) {
                    return;
                  }

                  this._scrollThreshold = value;
                }
              }, {
                key: "pageTurningEventTiming",
                get: function get() {
                  return this._pageTurningEventTiming;
                },
                set: function set(value) {
                  if (this._pageTurningEventTiming === value) {
                    return;
                  }

                  this._pageTurningEventTiming = value;
                }
              }, {
                key: "indicator",
                get: function get() {
                  return this._indicator;
                },
                set: function set(value) {
                  if (this._indicator === value) {
                    return;
                  }

                  this._indicator = value;

                  if (this.indicator) {
                    this.indicator.setPageView(this);
                  }
                }
              }, {
                key: "curPageIdx",
                get: function get() {
                  return this._curPageIdx;
                }
              }, {
                key: "verticalScrollBar",
                get: function get() {
                  return _ScrollView.prototype.verticalScrollBar;
                },
                set: function set(value) {
                  this.verticalScrollBar = value;
                }
              }, {
                key: "horizontalScrollBar",
                get: function get() {
                  return _ScrollView.prototype.horizontalScrollBar;
                },
                set: function set(value) {
                  this.horizontalScrollBar = value;
                }
              }]);

              return PageView;
            }(ScrollView), _class3$s.SizeMode = SizeMode$1, _class3$s.Direction = Direction$3, _class3$s.EventType = extendsEnum(EventType$6, EventType$4), _temp$1B), (_applyDecoratedDescriptor(_class2$1w.prototype, "sizeMode", [_dec5$P, _dec6$M], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "sizeMode"), _class2$1w.prototype), _applyDecoratedDescriptor(_class2$1w.prototype, "direction", [_dec7$L, _dec8$I], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "direction"), _class2$1w.prototype), _applyDecoratedDescriptor(_class2$1w.prototype, "scrollThreshold", [slide, _dec9$E, _dec10$C], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "scrollThreshold"), _class2$1w.prototype), _applyDecoratedDescriptor(_class2$1w.prototype, "pageTurningEventTiming", [slide, _dec11$x, _dec12$w], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "pageTurningEventTiming"), _class2$1w.prototype), _applyDecoratedDescriptor(_class2$1w.prototype, "indicator", [_dec13$v, _dec14$r], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "indicator"), _class2$1w.prototype), _descriptor$1s = _applyDecoratedDescriptor(_class2$1w.prototype, "autoPageTurningThreshold", [serializable, _dec15$r], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 100;
              }
            }), _applyDecoratedDescriptor(_class2$1w.prototype, "verticalScrollBar", [_dec16$p, override, _dec17$n], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "verticalScrollBar"), _class2$1w.prototype), _applyDecoratedDescriptor(_class2$1w.prototype, "horizontalScrollBar", [_dec18$m, override, _dec19$m], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "horizontalScrollBar"), _class2$1w.prototype), _descriptor2$1h = _applyDecoratedDescriptor(_class2$1w.prototype, "horizontal", [override, serializable, _dec20$l], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor3$11 = _applyDecoratedDescriptor(_class2$1w.prototype, "vertical", [override, serializable, _dec21$k], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor4$W = _applyDecoratedDescriptor(_class2$1w.prototype, "cancelInnerEvents", [override, serializable, _dec22$i], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor5$L = _applyDecoratedDescriptor(_class2$1w.prototype, "scrollEvents", [_dec23$h, serializable, override, _dec24$f], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor6$D = _applyDecoratedDescriptor(_class2$1w.prototype, "pageTurningSpeed", [serializable, editable, _dec25$f], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.3;
              }
            }), _descriptor7$t = _applyDecoratedDescriptor(_class2$1w.prototype, "pageEvents", [_dec26$e, serializable, _dec27$e], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor8$q = _applyDecoratedDescriptor(_class2$1w.prototype, "_sizeMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return SizeMode$1.Unified;
              }
            }), _descriptor9$m = _applyDecoratedDescriptor(_class2$1w.prototype, "_direction", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return Direction$3.Horizontal;
              }
            }), _descriptor10$k = _applyDecoratedDescriptor(_class2$1w.prototype, "_scrollThreshold", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.5;
              }
            }), _descriptor11$i = _applyDecoratedDescriptor(_class2$1w.prototype, "_pageTurningEventTiming", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0.1;
              }
            }), _descriptor12$h = _applyDecoratedDescriptor(_class2$1w.prototype, "_indicator", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            })), _class2$1w)) || _class$1J) || _class$1J) || _class$1J) || _class$1J));
            legacyCC.PageView = PageView;

            var _tempPos$1 = new Vec3();

            var _defaultAnchor = new Vec2();

            var tInverseTranslate = new Vec2();
            var tInverseScale = new Vec2(1, 1);

            var _tempVec2_1$1 = new Vec2();

            var _tempVec2_2 = new Vec2();

            function align(node, widget) {
              if (widget._hadAlignOnce) return;

              if ( widget.alignMode === AlignMode.ONCE) {
                widget._hadAlignOnce = true;
              }

              var hasTarget = widget.target;
              var target;
              var inverseTranslate = tInverseTranslate;
              var inverseScale = tInverseScale;

              if (hasTarget) {
                target = hasTarget;
                computeInverseTransForTarget(node, target, inverseTranslate, inverseScale);
              } else {
                target = node.parent;
              }

              var targetSize = getReadonlyNodeSize(target);
              var useGlobal = target instanceof Scene || !target.getComponent(UITransform);
              var targetAnchor = useGlobal ? _defaultAnchor : target.getComponent(UITransform).anchorPoint;
              var isRoot = useGlobal;
              node.getPosition(_tempPos$1);
              var uiTrans = node._uiProps.uiTransformComp;
              var x = _tempPos$1.x;
              var y = _tempPos$1.y;
              var anchor = uiTrans.anchorPoint;
              var scale = node.getScale();

              if (widget.alignFlags & AlignFlags.HORIZONTAL) {
                var localLeft = 0;
                var localRight = 0;
                var targetWidth = targetSize.width;

                if (isRoot) {
                  localLeft = visibleRect.left.x;
                  localRight = visibleRect.right.x;
                } else {
                  localLeft = -targetAnchor.x * targetWidth;
                  localRight = localLeft + targetWidth;
                }

                localLeft += widget.isAbsoluteLeft ? widget.left : widget.left * targetWidth;
                localRight -= widget.isAbsoluteRight ? widget.right : widget.right * targetWidth;

                if (hasTarget) {
                  localLeft += inverseTranslate.x;
                  localLeft *= inverseScale.x;
                  localRight += inverseTranslate.x;
                  localRight *= inverseScale.x;
                }

                var width = 0;
                var anchorX = anchor.x;
                var scaleX = scale.x;

                if (scaleX < 0) {
                  anchorX = 1.0 - anchorX;
                  scaleX = -scaleX;
                }

                if (widget.isStretchWidth) {
                  width = localRight - localLeft;

                  if (scaleX !== 0) {
                    uiTrans.width = width / scaleX;
                  }

                  x = localLeft + anchorX * width;
                } else {
                  width = uiTrans.width * scaleX;

                  if (widget.isAlignHorizontalCenter) {
                    var localHorizontalCenter = widget.isAbsoluteHorizontalCenter ? widget.horizontalCenter : widget.horizontalCenter * targetWidth;
                    var targetCenter = (0.5 - targetAnchor.x) * targetSize.width;

                    if (hasTarget) {
                      localHorizontalCenter *= inverseScale.x;
                      targetCenter += inverseTranslate.x;
                      targetCenter *= inverseScale.x;
                    }

                    x = targetCenter + (anchorX - 0.5) * width + localHorizontalCenter;
                  } else if (widget.isAlignLeft) {
                    x = localLeft + anchorX * width;
                  } else {
                    x = localRight + (anchorX - 1) * width;
                  }
                }

                widget._lastSize.width = width;
              }

              if (widget.alignFlags & AlignFlags.VERTICAL) {
                var localTop = 0;
                var localBottom = 0;
                var targetHeight = targetSize.height;

                if (isRoot) {
                  localBottom = visibleRect.bottom.y;
                  localTop = visibleRect.top.y;
                } else {
                  localBottom = -targetAnchor.y * targetHeight;
                  localTop = localBottom + targetHeight;
                }

                localBottom += widget.isAbsoluteBottom ? widget.bottom : widget.bottom * targetHeight;
                localTop -= widget.isAbsoluteTop ? widget.top : widget.top * targetHeight;

                if (hasTarget) {
                  localBottom += inverseTranslate.y;
                  localBottom *= inverseScale.y;
                  localTop += inverseTranslate.y;
                  localTop *= inverseScale.y;
                }

                var height = 0;
                var anchorY = anchor.y;
                var scaleY = scale.y;

                if (scaleY < 0) {
                  anchorY = 1.0 - anchorY;
                  scaleY = -scaleY;
                }

                if (widget.isStretchHeight) {
                  height = localTop - localBottom;

                  if (scaleY !== 0) {
                    uiTrans.height = height / scaleY;
                  }

                  y = localBottom + anchorY * height;
                } else {
                  height = uiTrans.height * scaleY;

                  if (widget.isAlignVerticalCenter) {
                    var localVerticalCenter = widget.isAbsoluteVerticalCenter ? widget.verticalCenter : widget.verticalCenter * targetHeight;
                    var targetMiddle = (0.5 - targetAnchor.y) * targetSize.height;

                    if (hasTarget) {
                      localVerticalCenter *= inverseScale.y;
                      targetMiddle += inverseTranslate.y;
                      targetMiddle *= inverseScale.y;
                    }

                    y = targetMiddle + (anchorY - 0.5) * height + localVerticalCenter;
                  } else if (widget.isAlignBottom) {
                    y = localBottom + anchorY * height;
                  } else {
                    y = localTop + (anchorY - 1) * height;
                  }
                }

                widget._lastSize.height = height;
              }

              node.setPosition(x, y, _tempPos$1.z);
              Vec3.set(widget._lastPos, x, y, _tempPos$1.z);
            }

            function visitNode(node) {
              var widget = node.getComponent(Widget);

              if (widget && widget.enabled) {

                if (!legacyCC.isValid(node, true)) {
                  return;
                }

                activeWidgets.push(widget);
              }

              var children = node.children;

              for (var _iterator = _createForOfIteratorHelperLoose(children), _step; !(_step = _iterator()).done;) {
                var child = _step.value;

                if (child.active) {
                  visitNode(child);
                }
              }
            }

            function refreshScene() {
              var scene = director.getScene();

              if (scene) {
                widgetManager.isAligning = true;

                if (widgetManager._nodesOrderDirty) {
                  activeWidgets.length = 0;
                  visitNode(scene);
                  widgetManager._nodesOrderDirty = false;
                }
                var widget = null;
                var iterator = widgetManager._activeWidgetsIterator;

                for (iterator.i = 0; iterator.i < activeWidgets.length; ++iterator.i) {
                  widget = activeWidgets[iterator.i];

                  if (widget._dirty) {
                    align(widget.node, widget);
                    widget._dirty = false;
                  }
                }

                widgetManager.isAligning = false;
              }
            }

            var activeWidgets = [];

            function updateAlignment(node) {
              var parent = node.parent;

              if (parent && Node.isNode(parent)) {
                updateAlignment(parent);
              }

              var widget = node.getComponent(Widget);

              if (widget && parent) {
                align(node, widget);
              }
            }

            var widgetManager = exports('widgetManager', legacyCC._widgetManager = {
              isAligning: false,
              _nodesOrderDirty: false,
              _activeWidgetsIterator: new array.MutableForwardIterator(activeWidgets),
              animationState:  null,
              init: function init() {
                director.on(Director.EVENT_AFTER_SCENE_LAUNCH, refreshScene);
                director.on(Director.EVENT_AFTER_UPDATE, refreshScene);
                View.instance.on('design-resolution-changed', this.onResized, this);

                {
                  var thisOnResized = this.onResized.bind(this);
                  View.instance.on('canvas-resize', thisOnResized);
                  screenAdapter.on('orientation-change', thisOnResized);
                }
              },
              add: function add(widget) {
                this._nodesOrderDirty = true;
              },
              remove: function remove(widget) {
                this._activeWidgetsIterator.remove(widget);
              },
              onResized: function onResized() {
                var scene = director.getScene();

                if (scene) {
                  this.refreshWidgetOnResized(scene);
                }
              },
              refreshWidgetOnResized: function refreshWidgetOnResized(node) {
                var widget = Node.isNode(node) && node.getComponent(Widget);

                if (widget && widget.enabled && (widget.alignMode === AlignMode.ON_WINDOW_RESIZE || widget.alignMode === AlignMode.ALWAYS)) {
                  widget.setDirty();
                }

                var children = node.children;

                for (var _iterator2 = _createForOfIteratorHelperLoose(children), _step2; !(_step2 = _iterator2()).done;) {
                  var child = _step2.value;
                  this.refreshWidgetOnResized(child);
                }
              },
              updateOffsetsToStayPut: function updateOffsetsToStayPut(widget, e) {
                function i(t, c) {
                  return Math.abs(t - c) > 1e-10 ? c : t;
                }

                var widgetNode = widget.node;
                var widgetParent = widgetNode.parent;

                if (widgetParent) {
                  var zero = _tempVec2_1$1;
                  zero.set(0, 0);
                  var one = _tempVec2_2;
                  one.set(1, 1);

                  if (widget.target) {
                    widgetParent = widget.target;
                    computeInverseTransForTarget(widgetNode, widgetParent, zero, one);
                  }

                  if (!e) {
                    return;
                  }

                  var parentTrans = widgetParent._uiProps && widgetParent._uiProps.uiTransformComp;
                  var parentAP = parentTrans ? parentTrans.anchorPoint : _defaultAnchor;
                  var trans = widgetNode._uiProps.uiTransformComp;
                  var matchSize = getReadonlyNodeSize(widgetParent);
                  var myAP = trans.anchorPoint;
                  var pos = widgetNode.getPosition();
                  var alignFlags = AlignFlags;
                  var widgetNodeScale = widgetNode.getScale();
                  var temp = 0;

                  if (e & alignFlags.LEFT) {
                    var l = -parentAP.x * matchSize.width;
                    l += zero.x;
                    l *= one.x;
                    temp = pos.x - myAP.x * trans.width * Math.abs(widgetNodeScale.x) - l;

                    if (!widget.isAbsoluteLeft) {
                      temp /= matchSize.width;
                    }

                    temp /= one.x;
                    widget.left = i(widget.left, temp);
                  }

                  if (e & alignFlags.RIGHT) {
                    var r = (1 - parentAP.x) * matchSize.width;
                    r += zero.x;
                    temp = (r *= one.x) - (pos.x + (1 - myAP.x) * trans.width * Math.abs(widgetNodeScale.x));

                    if (!widget.isAbsoluteRight) {
                      temp /= matchSize.width;
                    }

                    temp /= one.x;
                    widget.right = i(widget.right, temp);
                  }

                  if (e & alignFlags.TOP) {
                    var t = (1 - parentAP.y) * matchSize.height;
                    t += zero.y;
                    temp = (t *= one.y) - (pos.y + (1 - myAP.y) * trans.height * Math.abs(widgetNodeScale.y));

                    if (!widget.isAbsoluteTop) {
                      temp /= matchSize.height;
                    }

                    temp /= one.y;
                    widget.top = i(widget.top, temp);
                  }

                  if (e & alignFlags.BOT) {
                    var b = -parentAP.y * matchSize.height;
                    b += zero.y;
                    b *= one.y;
                    temp = pos.y - myAP.y * trans.height * Math.abs(widgetNodeScale.y) - b;

                    if (!widget.isAbsoluteBottom) {
                      temp /= matchSize.height;
                    }

                    temp /= one.y;
                    widget.bottom = i(widget.bottom, temp);
                  }
                }
              },
              updateAlignment: updateAlignment,
              AlignMode: AlignMode,
              AlignFlags: AlignFlags
            });
            director.on(Director.EVENT_INIT, function () {
              widgetManager.init();
            });

            var _dec$1H, _dec2$1p, _dec3$$, _dec4$W, _dec5$Q, _class$1K;
            var SafeArea = function (v) { return exports({ SafeArea: v, SafeAreaComponent: v }), v; }((_dec$1H = ccclass('cc.SafeArea'), _dec2$1p = help(), _dec3$$ = executionOrder(110), _dec4$W = menu$1(), _dec5$Q = requireComponent(Widget), _dec$1H(_class$1K = _dec2$1p(_class$1K = _dec3$$(_class$1K = executeInEditMode(_class$1K = _dec4$W(_class$1K = _dec5$Q(_class$1K = function (_Component) {
              _inheritsLoose(SafeArea, _Component);

              function SafeArea() {
                return _Component.apply(this, arguments) || this;
              }

              var _proto = SafeArea.prototype;

              _proto.onEnable = function onEnable() {
                this.updateArea();
                screenAdapter.on('window-resize', this.updateArea, this);
                screenAdapter.on('orientation-change', this.updateArea, this);
              };

              _proto.onDisable = function onDisable() {
                screenAdapter.off('window-resize', this.updateArea, this);
                screenAdapter.off('orientation-change', this.updateArea, this);
              };

              _proto.updateArea = function updateArea() {
                var widget = this.node.getComponent(Widget);
                var uiTransComp = this.node.getComponent(UITransform);

                if (!widget || !uiTransComp) {
                  return;
                }

                widget.updateAlignment();
                var lastPos = this.node.position.clone();
                var lastAnchorPoint = uiTransComp.anchorPoint.clone();
                widget.isAlignTop = widget.isAlignBottom = widget.isAlignLeft = widget.isAlignRight = true;
                var visibleSize = view.getVisibleSize();
                var screenWidth = visibleSize.width;
                var screenHeight = visibleSize.height;
                var safeArea = sys.getSafeAreaRect();
                widget.top = screenHeight - safeArea.y - safeArea.height;
                widget.bottom = safeArea.y;
                widget.left = safeArea.x;
                widget.right = screenWidth - safeArea.x - safeArea.width;
                widget.updateAlignment();
                var curPos = this.node.position.clone();
                var anchorX = lastAnchorPoint.x - (curPos.x - lastPos.x) / uiTransComp.width;
                var anchorY = lastAnchorPoint.y - (curPos.y - lastPos.y) / uiTransComp.height;
                uiTransComp.setAnchorPoint(anchorX, anchorY);
                widgetManager.add(widget);
              };

              return SafeArea;
            }(Component)) || _class$1K) || _class$1K) || _class$1K) || _class$1K) || _class$1K) || _class$1K));
            legacyCC.SafeArea = SafeArea;

            var _dec$1I, _dec2$1q, _dec3$10, _dec4$X, _dec5$R, _dec6$N, _dec7$M, _dec8$J, _dec9$F, _dec10$D, _dec11$y, _dec12$x, _class$1L, _class2$1x, _descriptor$1t, _descriptor2$1i, _descriptor3$12, _descriptor4$X, _descriptor5$M, _temp$1C;
            var UICoordinateTracker = function (v) { return exports({ UICoordinateTracker: v, UICoordinateTrackerComponent: v }), v; }((_dec$1I = ccclass('cc.UICoordinateTracker'), _dec2$1q = help(), _dec3$10 = menu$1(), _dec4$X = executionOrder(110), _dec5$R = type$1(Node), _dec6$N = tooltip(), _dec7$M = type$1(Camera), _dec8$J = tooltip(), _dec9$F = tooltip(), _dec10$D = tooltip(), _dec11$y = type$1([EventHandler]), _dec12$x = tooltip(), _dec$1I(_class$1L = _dec2$1q(_class$1L = _dec3$10(_class$1L = _dec4$X(_class$1L = (_class2$1x = (_temp$1C = function (_Component) {
              _inheritsLoose(UICoordinateTracker, _Component);

              function UICoordinateTracker() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "syncEvents", _descriptor$1t, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_target", _descriptor2$1i, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_camera", _descriptor3$12, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_useScale", _descriptor4$X, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_distance", _descriptor5$M, _assertThisInitialized(_this));

                _this._transformPos = new Vec3();
                _this._viewPos = new Vec3();
                _this._canMove = true;
                _this._lastWPos = new Vec3();
                _this._lastCameraPos = new Vec3();
                return _this;
              }

              var _proto = UICoordinateTracker.prototype;

              _proto.onEnable = function onEnable() {
                this._checkCanMove();
              };

              _proto.update = function update() {
                var wPos = this.node.worldPosition;
                var camera = this._camera;

                if (!this._canMove || !camera || !camera.camera || this._lastWPos.equals(wPos) && this._lastCameraPos.equals(camera.node.worldPosition)) {
                  return;
                }

                this._lastWPos.set(wPos);

                this._lastCameraPos.set(camera.node.worldPosition);

                camera.camera.update();
                camera.convertToUINode(wPos, this._target, this._transformPos);

                if (this._useScale) {
                  Vec3.transformMat4(this._viewPos, this.node.worldPosition, camera.camera.matView);
                }

                if (this.syncEvents.length > 0) {
                  var data = this._distance / Math.abs(this._viewPos.z);
                  EventHandler.emitEvents(this.syncEvents, this._transformPos, data);
                }
              };

              _proto._checkCanMove = function _checkCanMove() {
                this._canMove = !!(this._camera && this._target);
              };

              _createClass(UICoordinateTracker, [{
                key: "target",
                get: function get() {
                  return this._target;
                },
                set: function set(value) {
                  if (this._target === value) {
                    return;
                  }

                  this._target = value;

                  this._checkCanMove();
                }
              }, {
                key: "camera",
                get: function get() {
                  return this._camera;
                },
                set: function set(value) {
                  if (this._camera === value) {
                    return;
                  }

                  this._camera = value;

                  this._checkCanMove();
                }
              }, {
                key: "useScale",
                get: function get() {
                  return this._useScale;
                },
                set: function set(value) {
                  if (this._useScale === value) {
                    return;
                  }

                  this._useScale = value;
                }
              }, {
                key: "distance",
                get: function get() {
                  return this._distance;
                },
                set: function set(value) {
                  if (this._distance === value) {
                    return;
                  }

                  this._distance = value;
                }
              }]);

              return UICoordinateTracker;
            }(Component), _temp$1C), (_applyDecoratedDescriptor(_class2$1x.prototype, "target", [_dec5$R, _dec6$N], Object.getOwnPropertyDescriptor(_class2$1x.prototype, "target"), _class2$1x.prototype), _applyDecoratedDescriptor(_class2$1x.prototype, "camera", [_dec7$M, _dec8$J], Object.getOwnPropertyDescriptor(_class2$1x.prototype, "camera"), _class2$1x.prototype), _applyDecoratedDescriptor(_class2$1x.prototype, "useScale", [_dec9$F], Object.getOwnPropertyDescriptor(_class2$1x.prototype, "useScale"), _class2$1x.prototype), _applyDecoratedDescriptor(_class2$1x.prototype, "distance", [_dec10$D], Object.getOwnPropertyDescriptor(_class2$1x.prototype, "distance"), _class2$1x.prototype), _descriptor$1t = _applyDecoratedDescriptor(_class2$1x.prototype, "syncEvents", [_dec11$y, serializable, _dec12$x], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            }), _descriptor2$1i = _applyDecoratedDescriptor(_class2$1x.prototype, "_target", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor3$12 = _applyDecoratedDescriptor(_class2$1x.prototype, "_camera", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor4$X = _applyDecoratedDescriptor(_class2$1x.prototype, "_useScale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor5$M = _applyDecoratedDescriptor(_class2$1x.prototype, "_distance", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            })), _class2$1x)) || _class$1L) || _class$1L) || _class$1L) || _class$1L));

            var _dec$1J, _dec2$1r, _dec3$11, _class$1M;
            var BlockEvents = [NodeEventType.TOUCH_START, NodeEventType.TOUCH_END, NodeEventType.TOUCH_MOVE, NodeEventType.MOUSE_DOWN, NodeEventType.MOUSE_MOVE, NodeEventType.MOUSE_UP, NodeEventType.MOUSE_ENTER, NodeEventType.MOUSE_LEAVE, NodeEventType.MOUSE_WHEEL];

            function stopPropagation(event) {
              event.propagationStopped = true;
            }

            var BlockInputEvents = function (v) { return exports({ BlockInputEvents: v, BlockInputEventsComponent: v }), v; }((_dec$1J = ccclass('cc.BlockInputEvents'), _dec2$1r = help(), _dec3$11 = menu$1(), _dec$1J(_class$1M = _dec2$1r(_class$1M = _dec3$11(_class$1M = function (_Component) {
              _inheritsLoose(BlockInputEvents, _Component);

              function BlockInputEvents() {
                return _Component.apply(this, arguments) || this;
              }

              var _proto = BlockInputEvents.prototype;

              _proto.onEnable = function onEnable() {
                for (var i = 0; i < BlockEvents.length; i++) {
                  this.node.on(BlockEvents[i], stopPropagation, this);
                }
              };

              _proto.onDisable = function onDisable() {
                for (var i = 0; i < BlockEvents.length; i++) {
                  this.node.off(BlockEvents[i], stopPropagation, this);
                }
              };

              return BlockInputEvents;
            }(Component)) || _class$1M) || _class$1M) || _class$1M));

            var _dec$1K, _dec2$1s, _dec3$12, _dec4$Y, _dec5$S, _dec6$O, _dec7$N, _class$1N, _class2$1y, _descriptor$1u, _descriptor2$1j, _temp$1D;
            var SubContextView = exports('SubContextView', (_dec$1K = ccclass('cc.SubContextView'), _dec2$1s = help(), _dec3$12 = executionOrder(110), _dec4$Y = requireComponent(UITransform), _dec5$S = menu$1(), _dec6$O = tooltip(), _dec7$N = tooltip(), _dec$1K(_class$1N = _dec2$1s(_class$1N = _dec3$12(_class$1N = _dec4$Y(_class$1N = _dec5$S(_class$1N = (_class2$1y = (_temp$1D = function (_Component) {
              _inheritsLoose(SubContextView, _Component);

              function SubContextView() {
                var _this;

                _this = _Component.call(this) || this;

                _initializerDefineProperty(_this, "_fps", _descriptor$1u, _assertThisInitialized(_this));

                _this._sprite = void 0;
                _this._imageAsset = void 0;
                _this._texture = void 0;
                _this._updatedTime = 0;
                _this._updateInterval = 0;
                _this._openDataContext = void 0;
                _this._content = void 0;

                _initializerDefineProperty(_this, "_designResolutionSize", _descriptor2$1j, _assertThisInitialized(_this));

                _this._content = new Node('content');
                _this._content.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;
                _this._sprite = null;
                _this._imageAsset = new ImageAsset();
                _this._openDataContext = null;
                _this._updatedTime = performance.now();
                _this._texture = new Texture2D();
                return _this;
              }

              var _proto = SubContextView.prototype;

              _proto.onLoad = function onLoad() {
                if (minigame.getOpenDataContext) {
                  this._updateInterval = 1000 / this._fps;
                  this._openDataContext = minigame.getOpenDataContext();

                  this._initSharedCanvas();

                  this._initContentNode();

                  this._updateSubContextView();

                  this._updateContentLayer();
                } else {
                  this.enabled = false;
                }
              };

              _proto.onEnable = function onEnable() {
                this._registerNodeEvent();
              };

              _proto.onDisable = function onDisable() {
                this._unregisterNodeEvent();
              };

              _proto._initSharedCanvas = function _initSharedCanvas() {
                if (this._openDataContext) {
                  var sharedCanvas = this._openDataContext.canvas;
                  var designWidth = this._designResolutionSize.width;
                  var designHeight = this._designResolutionSize.height;

                  sharedCanvas.width = designWidth;
                  sharedCanvas.height = designWidth;
                }
              };

              _proto._initContentNode = function _initContentNode() {
                if (this._openDataContext) {
                  var sharedCanvas = this._openDataContext.canvas;
                  var image = this._imageAsset;
                  image.reset(sharedCanvas);
                  this._texture.image = image;

                  this._texture.create(sharedCanvas.width, sharedCanvas.height);

                  this._sprite = this._content.getComponent(Sprite);

                  if (!this._sprite) {
                    this._sprite = this._content.addComponent(Sprite);
                  }

                  if (this._sprite.spriteFrame) {
                    this._sprite.spriteFrame.texture = this._texture;
                  } else {
                    var sp = new SpriteFrame();
                    sp.texture = this._texture;
                    this._sprite.spriteFrame = sp;
                  }

                  this._content.parent = this.node;
                }
              };

              _proto._updateSubContextView = function _updateSubContextView() {
                if (!this._openDataContext) {
                  return;
                }

                var nodeTrans = this.node.getComponent(UITransform);

                var contentTrans = this._content.getComponent(UITransform);

                var scaleX = nodeTrans.width / contentTrans.width;
                var scaleY = nodeTrans.height / contentTrans.height;
                var scale = scaleX > scaleY ? scaleY : scaleX;
                contentTrans.width *= scale;
                contentTrans.height *= scale;
                var viewportRect = view.getViewportRect();
                var box = contentTrans.getBoundingBoxToWorld();
                var visibleSize = view.getVisibleSize();
                var dpr = screenAdapter.devicePixelRatio;
                var x = (viewportRect.width * (box.x / visibleSize.width) + viewportRect.x) / dpr;
                var y = (viewportRect.height * (box.y / visibleSize.height) + viewportRect.y) / dpr;
                var width = viewportRect.width * (box.width / visibleSize.width) / dpr;
                var height = viewportRect.height * (box.height / visibleSize.height) / dpr;

                this._openDataContext.postMessage({
                  fromEngine: true,
                  type: 'engine',
                  event: 'viewport',
                  x: x,
                  y: y,
                  width: width,
                  height: height
                });
              };

              _proto._updateSubContextTexture = function _updateSubContextTexture() {
                var img = this._imageAsset;

                if (!img || !this._openDataContext) {
                  return;
                }

                if (img.width <= 0 || img.height <= 0) {
                  return;
                }

                var sharedCanvas = this._openDataContext.canvas;
                img.reset(sharedCanvas);

                if (sharedCanvas.width > img.width || sharedCanvas.height > img.height) {
                  this._texture.create(sharedCanvas.width, sharedCanvas.height);
                }

                this._texture.uploadData(sharedCanvas);
              };

              _proto._registerNodeEvent = function _registerNodeEvent() {
                this.node.on(NodeEventType.TRANSFORM_CHANGED, this._updateSubContextView, this);
                this.node.on(NodeEventType.SIZE_CHANGED, this._updateSubContextView, this);
                this.node.on(NodeEventType.LAYER_CHANGED, this._updateContentLayer, this);
              };

              _proto._unregisterNodeEvent = function _unregisterNodeEvent() {
                this.node.off(NodeEventType.TRANSFORM_CHANGED, this._updateSubContextView, this);
                this.node.off(NodeEventType.SIZE_CHANGED, this._updateSubContextView, this);
                this.node.off(NodeEventType.LAYER_CHANGED, this._updateContentLayer, this);
              };

              _proto._updateContentLayer = function _updateContentLayer() {
                this._content.layer = this.node.layer;
              };

              _proto.update = function update(dt) {
                var calledUpdateManually = dt === undefined;

                if (calledUpdateManually) {
                  this._updateSubContextTexture();

                  return;
                }

                var now = performance.now();
                var deltaTime = now - this._updatedTime;

                if (deltaTime >= this._updateInterval) {
                  this._updatedTime += this._updateInterval;

                  this._updateSubContextTexture();
                }
              };

              _proto.onDestroy = function onDestroy() {
                this._content.destroy();

                this._texture.destroy();

                if (this._sprite) {
                  this._sprite.destroy();
                }

                this._imageAsset.destroy();

                this._openDataContext = null;
              };

              _createClass(SubContextView, [{
                key: "designResolutionSize",
                get: function get() {
                  return this._designResolutionSize;
                },
                set: function set(value) {
                  {
                    return;
                  }
                }
              }, {
                key: "fps",
                get: function get() {
                  return this._fps;
                },
                set: function set(value) {
                  if (this._fps === value) {
                    return;
                  }

                  this._fps = value;
                  this._updateInterval = 1000 / value;
                }
              }]);

              return SubContextView;
            }(Component), _temp$1D), (_applyDecoratedDescriptor(_class2$1y.prototype, "designResolutionSize", [_dec6$O], Object.getOwnPropertyDescriptor(_class2$1y.prototype, "designResolutionSize"), _class2$1y.prototype), _applyDecoratedDescriptor(_class2$1y.prototype, "fps", [_dec7$N], Object.getOwnPropertyDescriptor(_class2$1y.prototype, "fps"), _class2$1y.prototype), _descriptor$1u = _applyDecoratedDescriptor(_class2$1y.prototype, "_fps", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 60;
              }
            }), _descriptor2$1j = _applyDecoratedDescriptor(_class2$1y.prototype, "_designResolutionSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return new Size$1(640, 960);
              }
            })), _class2$1y)) || _class$1N) || _class$1N) || _class$1N) || _class$1N) || _class$1N));
            legacyCC.SubContextView = SubContextView;

            var _dec$1L, _class$1O;
            var UIReorderComponent = exports('UIReorderComponent', (_dec$1L = ccclass('cc.UIReorderComponent'), _dec$1L(_class$1O = function UIReorderComponent() {
              warnID(1408, 'UIReorderComponent');
            }) || _class$1O));
            legacyCC.UIReorderComponent = UIReorderComponent;
            legacyCC.ButtonComponent = Button;
            js.setClassAlias(Button, 'cc.ButtonComponent');
            legacyCC.EditBoxComponent = EditBox;
            js.setClassAlias(EditBox, 'cc.EditBoxComponent');
            legacyCC.LayoutComponent = Layout;
            js.setClassAlias(Layout, 'cc.LayoutComponent');
            legacyCC.ProgressBarComponent = ProgressBar;
            js.setClassAlias(ProgressBar, 'cc.ProgressBarComponent');
            legacyCC.ScrollViewComponent = ScrollView;
            js.setClassAlias(ScrollView, 'cc.ScrollViewComponent');
            legacyCC.ScrollBarComponent = ScrollBar;
            js.setClassAlias(ScrollBar, 'cc.ScrollBarComponent');
            legacyCC.SliderComponent = Slider;
            js.setClassAlias(Slider, 'cc.SliderComponent');
            legacyCC.ToggleComponent = Toggle;
            js.setClassAlias(Toggle, 'cc.ToggleComponent');
            legacyCC.ToggleContainerComponent = ToggleContainer;
            js.setClassAlias(ToggleContainer, 'cc.ToggleContainerComponent');
            legacyCC.WidgetComponent = Widget;
            js.setClassAlias(Widget, 'cc.WidgetComponent');
            legacyCC.PageViewComponent = PageView;
            js.setClassAlias(PageView, 'cc.PageViewComponent');
            legacyCC.PageViewIndicatorComponent = PageViewIndicator;
            js.setClassAlias(PageViewIndicator, 'cc.PageViewIndicatorComponent');
            legacyCC.SafeAreaComponent = SafeArea;
            js.setClassAlias(SafeArea, 'cc.SafeAreaComponent');
            js.setClassAlias(UICoordinateTracker, 'cc.UICoordinateTrackerComponent');
            legacyCC.BlockInputEventsComponent = BlockInputEvents;
            js.setClassAlias(BlockInputEvents, 'cc.BlockInputEventsComponent');

            var _dec$1M, _class$1P, _class2$1z, _descriptor$1v, _temp$1E;
            var VideoClip = exports('VideoClip', (_dec$1M = ccclass('cc.VideoClip'), _dec$1M(_class$1P = (_class2$1z = (_temp$1E = function (_Asset) {
              _inheritsLoose(VideoClip, _Asset);

              function VideoClip() {
                var _this;

                _this = _Asset.call(this) || this;

                _initializerDefineProperty(_this, "_duration", _descriptor$1v, _assertThisInitialized(_this));

                _this._video = null;
                return _this;
              }

              _createClass(VideoClip, [{
                key: "_nativeAsset",
                get: function get() {
                  return this._video;
                },
                set: function set(clip) {
                  this._video = clip;

                  if (clip) {
                    this._duration = clip.duration;
                  } else {
                    this._duration = 0;
                  }
                }
              }]);

              return VideoClip;
            }(Asset), _temp$1E), (_descriptor$1v = _applyDecoratedDescriptor(_class2$1z.prototype, "_duration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 0;
              }
            })), _class2$1z)) || _class$1P));

            function downloadVideo(url, options, onComplete) {
              var video = document.createElement('video');
              var source = document.createElement('source');
              video.appendChild(source);
              var req = new XMLHttpRequest();
              req.open('GET', url, true);
              req.responseType = 'blob';

              req.onload = function onload() {
                if (this.status === 200 || this.status === 0) {
                  source.src = URL.createObjectURL(this.response);
                  onComplete(null, video);
                } else {
                  onComplete(new Error(req.status + "(no response)"));
                }
              };

              req.onerror = function onerror() {
                var message = "load video failure - " + url;
                log(message);
                onComplete(new Error(message));
              };

              req.send();
            }

            function createVideoClip(id, data, options, onComplete) {
              var out = new VideoClip();
              out._nativeUrl = id;
              out._nativeAsset = data;
              onComplete(null, out);
            }

            downloader.register({
              '.mp4': downloadVideo,
              '.avi': downloadVideo,
              '.mov': downloadVideo,
              '.mpg': downloadVideo,
              '.mpeg': downloadVideo,
              '.rm': downloadVideo,
              '.rmvb': downloadVideo
            });
            factory.register({
              '.mp4': createVideoClip,
              '.avi': createVideoClip,
              '.mov': createVideoClip,
              '.mpg': createVideoClip,
              '.mpeg': createVideoClip,
              '.rm': createVideoClip,
              '.rmvb': createVideoClip
            });

            var ResourceType = Enum({
              REMOTE: 0,
              LOCAL: 1
            });
            var EventType$7;

            (function (EventType) {
              EventType["NONE"] = "none";
              EventType["PLAYING"] = "playing";
              EventType["PAUSED"] = "paused";
              EventType["STOPPED"] = "stopped";
              EventType["COMPLETED"] = "completed";
              EventType["META_LOADED"] = "meta-loaded";
              EventType["READY_TO_PLAY"] = "ready-to-play";
              EventType["ERROR"] = "error";
              EventType["CLICKED"] = "clicked";
            })(EventType$7 || (EventType$7 = {}));

            var READY_STATE;

            (function (READY_STATE) {
              READY_STATE[READY_STATE["HAVE_NOTHING"] = 0] = "HAVE_NOTHING";
              READY_STATE[READY_STATE["HAVE_METADATA"] = 1] = "HAVE_METADATA";
              READY_STATE[READY_STATE["HAVE_CURRENT_DATA"] = 2] = "HAVE_CURRENT_DATA";
              READY_STATE[READY_STATE["HAVE_FUTURE_DATA"] = 3] = "HAVE_FUTURE_DATA";
              READY_STATE[READY_STATE["HAVE_ENOUGH_DATA"] = 4] = "HAVE_ENOUGH_DATA";
            })(READY_STATE || (READY_STATE = {}));

            var VideoPlayerImpl = function () {
              function VideoPlayerImpl(component) {
                var _this = this;

                this._componentEventList = new Map();
                this._state = EventType$7.NONE;
                this._video = null;
                this._onHide = void 0;
                this._onShow = void 0;
                this._interrupted = false;
                this._loaded = false;
                this._loadedMeta = false;
                this._ignorePause = false;
                this._fullScreenOnAwake = false;
                this._visible = true;
                this._playing = false;
                this._cachedCurrentTime = -1;
                this._waitingFullscreen = false;
                this._waitingPlay = false;
                this._keepAspectRatio = false;
                this._component = null;
                this._uiTrans = null;
                this._node = null;
                this._stayOnBottom = false;
                this._dirty = false;
                this._forceUpdate = false;
                this._w = 0;
                this._h = 0;
                this._m00 = 0;
                this._m01 = 0;
                this._m04 = 0;
                this._m05 = 0;
                this._m12 = 0;
                this._m13 = 0;
                this._component = component;
                this._node = component.node;
                this._uiTrans = component.node.getComponent(UITransform);

                this._onHide = function () {
                  if (!_this.video || _this._state !== EventType$7.PLAYING) {
                    return;
                  }

                  _this.video.pause();

                  _this._interrupted = true;
                };

                this._onShow = function () {
                  if (!_this._interrupted || !_this.video) {
                    return;
                  }

                  _this.video.play();

                  _this._interrupted = false;
                };

                legacyCC.game.on(legacyCC.Game.EVENT_HIDE, this._onHide);
                legacyCC.game.on(legacyCC.Game.EVENT_SHOW, this._onShow);
              }

              var _proto = VideoPlayerImpl.prototype;

              _proto.onLoadedMetadata = function onLoadedMetadata(e) {
                this._loadedMeta = true;
                this._forceUpdate = true;

                if (this._visible) {
                  this.enable();
                } else {
                  this.disable();
                }

                this.dispatchEvent(EventType$7.META_LOADED);
                var video = e.target;

                if (this._keepAspectRatio && video) {
                  this.syncUITransform(video.videoWidth, video.videoHeight);
                }

                this.delayedFullScreen();
                this.delayedPlay();
              };

              _proto.onCanPlay = function onCanPlay(e) {
                this._loaded = true;
                this.dispatchEvent(EventType$7.READY_TO_PLAY);
              };

              _proto.onPlay = function onPlay(e) {
                this._playing = true;
                this.dispatchEvent(EventType$7.PLAYING);
              };

              _proto.onPlaying = function onPlaying(e) {
                this.dispatchEvent(EventType$7.PLAYING);
              };

              _proto.onPause = function onPause(e) {
                if (this._ignorePause) {
                  this._ignorePause = false;
                  return;
                }

                this._playing = false;
                this.dispatchEvent(EventType$7.PAUSED);
              };

              _proto.onStoped = function onStoped(e) {
                this._playing = false;
                this._ignorePause = false;
                this.dispatchEvent(EventType$7.STOPPED);
              };

              _proto.onEnded = function onEnded(e) {
                this.dispatchEvent(EventType$7.COMPLETED);
              };

              _proto.onClick = function onClick(e) {
                this.dispatchEvent(EventType$7.CLICKED);
              };

              _proto.onError = function onError(e) {
                this.dispatchEvent(EventType$7.ERROR);
                var video = e.target;

                if (video && video.error) {
                  error("Error " + video.error.code + "; details: " + video.error.message);
                }
              };

              _proto.play = function play() {
                if (this._loadedMeta || this._loaded) {
                  this.canPlay();
                } else {
                  this._waitingPlay = true;
                }
              };

              _proto.delayedPlay = function delayedPlay() {
                if (this._waitingPlay) {
                  this.canPlay();
                  this._waitingPlay = false;
                }
              };

              _proto.syncFullScreenOnAwake = function syncFullScreenOnAwake(enabled) {
                this._fullScreenOnAwake = enabled;

                if (this._loadedMeta || this._loaded) {
                  this.canFullScreen(enabled);
                } else {
                  this._waitingFullscreen = true;
                }
              };

              _proto.delayedFullScreen = function delayedFullScreen() {
                if (this._waitingFullscreen) {
                  this.canFullScreen(this._fullScreenOnAwake);
                  this._waitingFullscreen = false;
                }
              };

              _proto.dispatchEvent = function dispatchEvent(key) {
                var callback = this._componentEventList.get(key);

                if (callback) {
                  this._state = key;
                  callback.call(this);
                }
              };

              _proto.syncUITransform = function syncUITransform(width, height) {
                if (this._uiTrans) {
                  this._uiTrans.width = width;
                  this._uiTrans.height = height;
                }
              };

              _proto.syncCurrentTime = function syncCurrentTime() {
                if (!this.video) {
                  return;
                }

                if (this._cachedCurrentTime !== -1 && this.video.currentTime !== this._cachedCurrentTime) {
                  this.seekTo(this._cachedCurrentTime);
                  this._cachedCurrentTime = -1;
                }
              };

              _proto.destroy = function destroy() {
                this.removeVideoPlayer();

                this._componentEventList.clear();

                legacyCC.game.off(legacyCC.Game.EVENT_HIDE, this._onHide);
                legacyCC.game.off(legacyCC.Game.EVENT_SHOW, this._onShow);
              };

              _createClass(VideoPlayerImpl, [{
                key: "fullScreenOnAwake",
                get: function get() {
                  return this._fullScreenOnAwake;
                }
              }, {
                key: "loaded",
                get: function get() {
                  return this._loaded;
                }
              }, {
                key: "componentEventList",
                get: function get() {
                  return this._componentEventList;
                }
              }, {
                key: "video",
                get: function get() {
                  return this._video;
                }
              }, {
                key: "state",
                get: function get() {
                  return this._state;
                }
              }, {
                key: "isPlaying",
                get: function get() {
                  return this._playing;
                }
              }, {
                key: "UICamera",
                get: function get() {
                  return director.root.batcher2D.getFirstRenderCamera(this._node);
                }
              }]);

              return VideoPlayerImpl;
            }();
            legacyCC.internal.VideoPlayerImpl = VideoPlayerImpl;

            var MIN_ZINDEX = -Math.pow(2, 15);

            var _mat4_temp$2 = mat4();

            var VideoPlayerImplWeb = function (_VideoPlayerImpl) {
              _inheritsLoose(VideoPlayerImplWeb, _VideoPlayerImpl);

              function VideoPlayerImplWeb(component) {
                var _this;

                _this = _VideoPlayerImpl.call(this, component) || this;
                _this._eventList = new Map();
                _this._clearColorA = -1;
                _this._clearFlag = void 0;
                return _this;
              }

              var _proto = VideoPlayerImplWeb.prototype;

              _proto.addListener = function addListener(type, handler) {
                if (!this._video) {
                  return;
                }

                this._eventList.set(type, handler);

                this._video.addEventListener(type, handler);
              };

              _proto.removeAllListeners = function removeAllListeners() {
                var _this2 = this;

                this._eventList.forEach(function (handler, type) {
                  if (!_this2._video) {
                    return;
                  }

                  _this2._video.removeEventListener(type, handler);
                });

                this._eventList.clear();
              };

              _proto.canPlay = function canPlay() {
                var _this3 = this;

                if (this.video) {
                  var promise = this.video.play();

                  if (window.Promise && promise instanceof Promise) {
                    promise["catch"](function (error) {}).then(function () {
                      _this3.syncCurrentTime();
                    });
                  }
                }
              };

              _proto.pause = function pause() {
                if (this.video) {
                  this.video.pause();
                  this._cachedCurrentTime = this.video.currentTime;
                }
              };

              _proto.resume = function resume() {
                this.play();
              };

              _proto.stop = function stop() {
                var _this4 = this;

                if (this.video) {
                  this._ignorePause = true;
                  this.video.currentTime = 0;
                  this.video.pause();
                  this._cachedCurrentTime = 0;
                  setTimeout(function () {
                    _this4._ignorePause = false;

                    _this4.dispatchEvent(EventType$7.STOPPED);
                  }, 0);
                }
              };

              _proto.syncClip = function syncClip(clip) {
                this.removeVideoPlayer();

                if (!clip) {
                  return;
                }

                this.createVideoPlayer(clip.nativeUrl);
              };

              _proto.syncURL = function syncURL(url) {
                this.removeVideoPlayer();

                if (!url) {
                  return;
                }

                this.createVideoPlayer(url);
              };

              _proto.syncPlaybackRate = function syncPlaybackRate(val) {
                if (sys.browserType === BrowserType.UC) {
                  warn('playbackRate is not supported by the uc mobile browser.');
                  return;
                }

                if (this.video) {
                  this.video.playbackRate = val;
                }
              };

              _proto.syncVolume = function syncVolume(val) {
                if (this.video) {
                  this.video.volume = val;
                }
              };

              _proto.syncMute = function syncMute(enabled) {
                if (this.video) {
                  this.video.muted = enabled;
                }
              };

              _proto.syncLoop = function syncLoop(enabled) {
                if (this.video) {
                  this.video.loop = enabled;
                }
              };

              _proto.getDuration = function getDuration() {
                if (!this.video) {
                  return 0;
                }

                return this.video.duration;
              };

              _proto.getCurrentTime = function getCurrentTime() {
                if (this.video) {
                  return this.video.currentTime;
                }

                return -1;
              };

              _proto.seekTo = function seekTo(val) {
                if (this.video) {
                  this.video.currentTime = val;
                }
              };

              _proto.canFullScreen = function canFullScreen(enabled) {
                var _this5 = this;

                var video = this._video;

                if (!video || video.readyState !== READY_STATE.HAVE_ENOUGH_DATA) {
                  return;
                }

                if (sys.os === OS.IOS && sys.isBrowser) {
                  if (enabled) {
                    if (video.webkitEnterFullscreen) {
                      video.webkitEnterFullscreen();
                    }
                  } else if (video.webkitExitFullscreen) {
                    video.webkitExitFullscreen();
                  }

                  this._fullScreenOnAwake = video.webkitDisplayingFullscreen;
                  return;
                }

                if (!screen.supportsFullScreen) {
                  this._fullScreenOnAwake = enabled;
                  this._forceUpdate = true;
                  this.syncMatrix();
                  return;
                }

                if (enabled) {
                  if (sys.browserType === BrowserType.IE) {
                    video.style.transform = '';
                  }

                  video.setAttribute('x5-video-player-fullscreen', 'true');
                  screen.requestFullScreen(video, function (document) {
                    var fullscreenElement = sys.browserType === BrowserType.IE ? document.msFullscreenElement : document.fullscreenElement;
                    _this5._fullScreenOnAwake = fullscreenElement === video;
                  }, function () {
                    _this5._fullScreenOnAwake = false;
                  });
                } else {
                  video.removeAttribute('x5-video-player-fullscreen');
                  screen.exitFullScreen();
                }
              };

              _proto.syncStayOnBottom = function syncStayOnBottom(enabled) {
                if (this._video) {
                  this._video.style['z-index'] = enabled ? MIN_ZINDEX : 0;
                  this._stayOnBottom = enabled;
                }

                this._dirty = true;
              };

              _proto.syncKeepAspectRatio = function syncKeepAspectRatio(enabled) {
                this._keepAspectRatio = enabled;

                if (enabled && this._loadedMeta && this._video) {
                  this.syncUITransform(this._video.videoWidth, this._video.videoHeight);
                }
              };

              _proto.removeVideoPlayer = function removeVideoPlayer() {
                var video = this._video;

                if (video) {
                  if (contains$1(game.container, video)) {
                    game.container.removeChild(video);
                    this.removeAllListeners();
                  }
                }

                this._cachedCurrentTime = 0;
                this._playing = false;
                this._loaded = false;
                this._loadedMeta = false;
                this._video = null;
              };

              _proto.createVideoPlayer = function createVideoPlayer(url) {
                var video = this._video = document.createElement('video');
                video.className = 'cocosVideo';
                video.style.visibility = 'hidden';
                video.style.position = 'absolute';
                video.style.bottom = '0px';
                video.style.left = '0px';
                video.style['transform-origin'] = '0px 100% 0px';
                video.style['-webkit-transform-origin'] = '0px 100% 0px';
                video.setAttribute('preload', 'auto');
                video.setAttribute('webkit-playsinline', '');
                video.setAttribute('x5-playsinline', '');
                video.setAttribute('playsinline', '');

                this._bindDomEvent();

                game.container.appendChild(video);
                var source = document.createElement('source');
                video.appendChild(source);
                source.src = url;
              };

              _proto._bindDomEvent = function _bindDomEvent() {
                var video = this._video;
                this.addListener('loadedmetadata', this.onLoadedMetadata.bind(this));
                this.addListener('canplay', this.onCanPlay.bind(this));
                this.addListener('canplaythrough', this.onCanPlay.bind(this));
                this.addListener('play', this.onPlay.bind(this));
                this.addListener('playing', this.onPlaying.bind(this));
                this.addListener('pause', this.onPause.bind(this));
                this.addListener('click', this.onClick.bind(this));
                this.addListener('ended', this.onEnded.bind(this));
                this.addListener('error', this.onError.bind(this));
              };

              _proto.onCanPlay = function onCanPlay(e) {
                var video = e.target;

                if (this._loaded && video) {
                  return;
                }

                switch (video.readyState) {
                  case READY_STATE.HAVE_METADATA:
                  case READY_STATE.HAVE_ENOUGH_DATA:
                    {
                      _VideoPlayerImpl.prototype.onCanPlay.call(this, e);

                      break;
                    }
                }
              };

              _proto.enable = function enable() {
                if (this._video) {
                  this._visible = true;

                  if (this._video.style.visibility === 'visible') {
                    return;
                  }

                  this._video.style.visibility = 'visible';
                }
              };

              _proto.disable = function disable(noPause) {
                if (this._video) {
                  if (!noPause && this._playing) {
                    this._video.pause();
                  }

                  this._visible = false;

                  if (this._video.style.visibility === 'hidden') {
                    return;
                  }

                  this._video.style.visibility = 'hidden';
                }
              };

              _proto.syncMatrix = function syncMatrix() {
                if (!this._video || !this._visible || !this._component) return;
                var camera = this.UICamera;

                if (!camera) {
                  return;
                }

                if (screen.fullScreen()) {
                  return;
                }

                if (this._dirty) {
                  this._dirty = false;

                  if (this._stayOnBottom) {
                    this._clearColorA = camera.clearColor.w;
                    this._clearFlag = camera.clearFlag;
                    camera.clearColor.w = 0;
                    camera.clearFlag = ClearFlagBit.ALL;
                  } else if (this._clearFlag) {
                    camera.clearColor.w = this._clearColorA;
                    camera.clearFlag = this._clearFlag;
                    this._clearColorA = -1;
                    this._clearFlag = null;
                  }
                }

                this._component.node.getWorldMatrix(_mat4_temp$2);

                camera.update(true);
                camera.worldMatrixToScreen(_mat4_temp$2, _mat4_temp$2, game.canvas.width, game.canvas.height);
                var width = 0;
                var height = 0;

                if (this._fullScreenOnAwake) {
                  width = visibleRect.width;
                  height = visibleRect.height;
                } else {
                  width = this._uiTrans.contentSize.width;
                  height = this._uiTrans.contentSize.height;
                }

                if (!this._forceUpdate && this._m00 === _mat4_temp$2.m00 && this._m01 === _mat4_temp$2.m01 && this._m04 === _mat4_temp$2.m04 && this._m05 === _mat4_temp$2.m05 && this._m12 === _mat4_temp$2.m12 && this._m13 === _mat4_temp$2.m13 && this._w === width && this._h === height) {
                  return;
                }

                this._m00 = _mat4_temp$2.m00;
                this._m01 = _mat4_temp$2.m01;
                this._m04 = _mat4_temp$2.m04;
                this._m05 = _mat4_temp$2.m05;
                this._m12 = _mat4_temp$2.m12;
                this._m13 = _mat4_temp$2.m13;
                this._w = width;
                this._h = height;
                var dpr = screenAdapter.devicePixelRatio;
                var scaleX = 1 / dpr;
                var scaleY = 1 / dpr;
                var container = game.container;
                var sx = _mat4_temp$2.m00 * scaleX;
                var b = _mat4_temp$2.m01;
                var c = _mat4_temp$2.m04;
                var sy = _mat4_temp$2.m05 * scaleY;
                this._video.style.width = this._w + "px";
                this._video.style.height = this._h + "px";

                if (sys.browserType !== BrowserType.MOBILE_QQ) {
                  this._video.style.objectFit = this._keepAspectRatio ? 'none' : 'fill';
                } else {
                  warn('keepAspectRatio is not supported by the qq mobile browser.');
                }

                var w = this._w * scaleX;
                var h = this._h * scaleY;
                var _anchorPoint = this._uiTrans.anchorPoint,
                    x = _anchorPoint.x,
                    y = _anchorPoint.y;
                var appx = w * _mat4_temp$2.m00 * x;
                var appy = h * _mat4_temp$2.m05 * y;
                var offsetX = container && container.style.paddingLeft ? parseInt(container.style.paddingLeft) : 0;
                var offsetY = container && container.style.paddingBottom ? parseInt(container.style.paddingBottom) : 0;
                var tx = _mat4_temp$2.m12 * scaleX - appx + offsetX;
                var ty = _mat4_temp$2.m13 * scaleY - appy + offsetY;
                var matrix = "matrix(" + sx + "," + -b + "," + -c + "," + sy + "," + tx + "," + -ty + ")";
                this._video.style.transform = matrix;
                this._video.style['-webkit-transform'] = matrix;

                if (sys.browserType !== BrowserType.IE) {
                  this._forceUpdate = false;
                }
              };

              return VideoPlayerImplWeb;
            }(VideoPlayerImpl);

            var VideoPlayerImplManager = function () {
              function VideoPlayerImplManager() {}

              VideoPlayerImplManager.getImpl = function getImpl(component) {
                return new VideoPlayerImplWeb(component);
              };

              return VideoPlayerImplManager;
            }();
            legacyCC.internal.VideoPlayerImplManager = VideoPlayerImplManager;

            var _dec$1N, _dec2$1t, _dec3$13, _dec4$Z, _dec5$T, _dec6$P, _dec7$O, _dec8$K, _dec9$G, _dec10$E, _dec11$z, _dec12$y, _dec13$w, _dec14$s, _dec15$s, _dec16$q, _dec17$o, _dec18$n, _dec19$n, _dec20$m, _dec21$l, _dec22$j, _dec23$i, _class$1Q, _class2$1A, _descriptor$1w, _descriptor2$1k, _descriptor3$13, _descriptor4$Y, _descriptor5$N, _descriptor6$E, _descriptor7$u, _descriptor8$r, _descriptor9$n, _descriptor10$l, _descriptor11$j, _descriptor12$i, _class3$t, _temp$1F;
            var VideoPlayer = exports('VideoPlayer', (_dec$1N = ccclass('cc.VideoPlayer'), _dec2$1t = help(), _dec3$13 = menu$1(), _dec4$Z = requireComponent(UITransform), _dec5$T = type$1(VideoClip), _dec6$P = type$1(ResourceType), _dec7$O = tooltip(), _dec8$K = tooltip(), _dec9$G = type$1(VideoClip), _dec10$E = tooltip(), _dec11$z = tooltip(), _dec12$y = range(), _dec13$w = tooltip(), _dec14$s = range(), _dec15$s = tooltip(), _dec16$q = tooltip(), _dec17$o = tooltip(), _dec18$n = tooltip(), _dec19$n = tooltip(), _dec20$m = tooltip(), _dec21$l = type$1([EventHandler]), _dec22$j = displayOrder(), _dec23$i = tooltip(), _dec$1N(_class$1Q = _dec2$1t(_class$1Q = _dec3$13(_class$1Q = _dec4$Z(_class$1Q = executeInEditMode(_class$1Q = (_class2$1A = (_temp$1F = _class3$t = function (_Component) {
              _inheritsLoose(VideoPlayer, _Component);

              function VideoPlayer() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_resourceType", _descriptor$1w, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_remoteURL", _descriptor2$1k, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_clip", _descriptor3$13, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_playOnAwake", _descriptor4$Y, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_volume", _descriptor5$N, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_mute", _descriptor6$E, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_playbackRate", _descriptor7$u, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_loop", _descriptor8$r, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_fullScreenOnAwake", _descriptor9$n, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_stayOnBottom", _descriptor10$l, _assertThisInitialized(_this));

                _initializerDefineProperty(_this, "_keepAspectRatio", _descriptor11$j, _assertThisInitialized(_this));

                _this._impl = null;
                _this._cachedCurrentTime = 0;

                _initializerDefineProperty(_this, "videoPlayerEvent", _descriptor12$i, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = VideoPlayer.prototype;

              _proto.syncSource = function syncSource() {
                if (!this._impl) {
                  return;
                }

                if (this._resourceType === ResourceType.REMOTE) {
                  this._impl.syncURL(this._remoteURL);
                } else {
                  this._impl.syncClip(this._clip);
                }
              };

              _proto.__preload = function __preload() {

                this._impl = VideoPlayerImplManager.getImpl(this);
                this.syncSource();

                this._impl.syncLoop(this._loop);

                this._impl.syncVolume(this._volume);

                this._impl.syncMute(this._mute);

                this._impl.seekTo(this._cachedCurrentTime);

                this._impl.syncPlaybackRate(this._playbackRate);

                this._impl.syncStayOnBottom(this._stayOnBottom);

                this._impl.syncKeepAspectRatio(this._keepAspectRatio);

                this._impl.syncFullScreenOnAwake(this._fullScreenOnAwake);

                this._impl.componentEventList.set(EventType$7.META_LOADED, this.onMetaLoaded.bind(this));

                this._impl.componentEventList.set(EventType$7.READY_TO_PLAY, this.onReadyToPlay.bind(this));

                this._impl.componentEventList.set(EventType$7.PLAYING, this.onPlaying.bind(this));

                this._impl.componentEventList.set(EventType$7.PAUSED, this.onPaused.bind(this));

                this._impl.componentEventList.set(EventType$7.STOPPED, this.onStopped.bind(this));

                this._impl.componentEventList.set(EventType$7.COMPLETED, this.onCompleted.bind(this));

                this._impl.componentEventList.set(EventType$7.ERROR, this.onError.bind(this));

                if (this._playOnAwake && this._impl.loaded) {
                  this.play();
                }
              };

              _proto.onEnable = function onEnable() {
                if (this._impl) {
                  this._impl.enable();
                }
              };

              _proto.onDisable = function onDisable() {
                if (this._impl) {
                  this._impl.disable();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this._impl) {
                  this._impl.destroy();

                  this._impl = null;
                }
              };

              _proto.update = function update(dt) {
                if (this._impl) {
                  this._impl.syncMatrix();
                }
              };

              _proto.onMetaLoaded = function onMetaLoaded() {
                EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.META_LOADED);
                this.node.emit('meta-loaded', this);
              };

              _proto.onReadyToPlay = function onReadyToPlay() {
                if (this._playOnAwake && !this.isPlaying) {
                  this.play();
                }

                EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.READY_TO_PLAY);
                this.node.emit(EventType$7.READY_TO_PLAY, this);
              };

              _proto.onPlaying = function onPlaying() {
                EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.PLAYING);
                this.node.emit(EventType$7.PLAYING, this);
              };

              _proto.onPaused = function onPaused() {
                EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.PAUSED);
                this.node.emit(EventType$7.PAUSED, this);
              };

              _proto.onStopped = function onStopped() {
                EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.STOPPED);
                this.node.emit(EventType$7.STOPPED, this);
              };

              _proto.onCompleted = function onCompleted() {
                EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.COMPLETED);
                this.node.emit(EventType$7.COMPLETED, this);
              };

              _proto.onError = function onError() {
                EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.ERROR);
                this.node.emit(EventType$7.ERROR, this);
              };

              _proto.play = function play() {
                if (this._impl) {
                  this._impl.play();
                }
              };

              _proto.resume = function resume() {
                if (this._impl) {
                  this._impl.resume();
                }
              };

              _proto.pause = function pause() {
                if (this._impl) {
                  this._impl.pause();
                }
              };

              _proto.stop = function stop() {
                if (this._impl) {
                  this._impl.stop();
                }
              };

              _createClass(VideoPlayer, [{
                key: "resourceType",
                get: function get() {
                  return this._resourceType;
                },
                set: function set(val) {
                  if (this._resourceType !== val) {
                    this._resourceType = val;
                    this.syncSource();
                  }
                }
              }, {
                key: "remoteURL",
                get: function get() {
                  return this._remoteURL;
                },
                set: function set(val) {
                  if (this._remoteURL !== val) {
                    this._remoteURL = val;
                    this.syncSource();
                  }
                }
              }, {
                key: "clip",
                get: function get() {
                  return this._clip;
                },
                set: function set(val) {
                  if (this._clip !== val) {
                    this._clip = val;
                    this.syncSource();
                  }
                }
              }, {
                key: "playOnAwake",
                get: function get() {
                  return this._playOnAwake;
                },
                set: function set(value) {
                  this._playOnAwake = value;
                }
              }, {
                key: "playbackRate",
                get: function get() {
                  return this._playbackRate;
                },
                set: function set(value) {
                  this._playbackRate = value;

                  if (this._impl) {
                    this._impl.syncPlaybackRate(value);
                  }
                }
              }, {
                key: "volume",
                get: function get() {
                  return this._volume;
                },
                set: function set(value) {
                  this._volume = value;

                  if (this._impl) {
                    this._impl.syncVolume(value);
                  }
                }
              }, {
                key: "mute",
                get: function get() {
                  return this._mute;
                },
                set: function set(value) {
                  this._mute = value;

                  if (this._impl) {
                    this._impl.syncMute(value);
                  }
                }
              }, {
                key: "loop",
                get: function get() {
                  return this._loop;
                },
                set: function set(value) {
                  this._loop = value;

                  if (this._impl) {
                    this._impl.syncLoop(value);
                  }
                }
              }, {
                key: "keepAspectRatio",
                get: function get() {
                  return this._keepAspectRatio;
                },
                set: function set(value) {
                  if (this._keepAspectRatio !== value) {
                    this._keepAspectRatio = value;

                    if (this._impl) {
                      this._impl.syncKeepAspectRatio(value);
                    }
                  }
                }
              }, {
                key: "fullScreenOnAwake",
                get: function get() {
                  {
                    if (this._impl) {
                      this._fullScreenOnAwake = this._impl.fullScreenOnAwake;
                      return this._fullScreenOnAwake;
                    }
                  }

                  return this._fullScreenOnAwake;
                },
                set: function set(value) {
                  if (this._fullScreenOnAwake !== value) {
                    this._fullScreenOnAwake = value;

                    if (this._impl) {
                      this._impl.syncFullScreenOnAwake(value);
                    }
                  }
                }
              }, {
                key: "stayOnBottom",
                get: function get() {
                  return this._stayOnBottom;
                },
                set: function set(value) {
                  if (this._stayOnBottom !== value) {
                    this._stayOnBottom = value;

                    if (this._impl) {
                      this._impl.syncStayOnBottom(value);
                    }
                  }
                }
              }, {
                key: "nativeVideo",
                get: function get() {
                  return this._impl && this._impl.video || null;
                }
              }, {
                key: "currentTime",
                get: function get() {
                  if (!this._impl) {
                    return this._cachedCurrentTime;
                  }

                  return this._impl.getCurrentTime();
                },
                set: function set(val) {
                  if (Number.isNaN(val)) {
                    warn("illegal video time! value:" + val);
                    return;
                  }

                  val = clamp$1(val, 0, this.duration);
                  this._cachedCurrentTime = val;

                  if (this._impl) {
                    this._impl.seekTo(val);
                  }
                }
              }, {
                key: "duration",
                get: function get() {
                  if (!this._impl) {
                    return 0;
                  }

                  return this._impl.getDuration();
                }
              }, {
                key: "state",
                get: function get() {
                  if (!this._impl) {
                    return EventType$7.NONE;
                  }

                  return this._impl.state;
                }
              }, {
                key: "isPlaying",
                get: function get() {
                  if (!this._impl) {
                    return false;
                  }

                  return this._impl.isPlaying;
                }
              }]);

              return VideoPlayer;
            }(Component), _class3$t.EventType = EventType$7, _class3$t.ResourceType = ResourceType, _temp$1F), (_descriptor$1w = _applyDecoratedDescriptor(_class2$1A.prototype, "_resourceType", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return ResourceType.LOCAL;
              }
            }), _descriptor2$1k = _applyDecoratedDescriptor(_class2$1A.prototype, "_remoteURL", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return '';
              }
            }), _descriptor3$13 = _applyDecoratedDescriptor(_class2$1A.prototype, "_clip", [_dec5$T, serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor4$Y = _applyDecoratedDescriptor(_class2$1A.prototype, "_playOnAwake", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _descriptor5$N = _applyDecoratedDescriptor(_class2$1A.prototype, "_volume", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1.0;
              }
            }), _descriptor6$E = _applyDecoratedDescriptor(_class2$1A.prototype, "_mute", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor7$u = _applyDecoratedDescriptor(_class2$1A.prototype, "_playbackRate", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 1;
              }
            }), _descriptor8$r = _applyDecoratedDescriptor(_class2$1A.prototype, "_loop", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor9$n = _applyDecoratedDescriptor(_class2$1A.prototype, "_fullScreenOnAwake", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor10$l = _applyDecoratedDescriptor(_class2$1A.prototype, "_stayOnBottom", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return false;
              }
            }), _descriptor11$j = _applyDecoratedDescriptor(_class2$1A.prototype, "_keepAspectRatio", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return true;
              }
            }), _applyDecoratedDescriptor(_class2$1A.prototype, "resourceType", [_dec6$P, _dec7$O], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "resourceType"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "remoteURL", [_dec8$K], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "remoteURL"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "clip", [_dec9$G, _dec10$E], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "clip"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "playOnAwake", [_dec11$z], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "playOnAwake"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "playbackRate", [slide, _dec12$y, _dec13$w], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "playbackRate"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "volume", [slide, _dec14$s, _dec15$s], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "volume"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "mute", [_dec16$q], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "mute"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "loop", [_dec17$o], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "loop"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "keepAspectRatio", [_dec18$n], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "keepAspectRatio"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "fullScreenOnAwake", [_dec19$n], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "fullScreenOnAwake"), _class2$1A.prototype), _applyDecoratedDescriptor(_class2$1A.prototype, "stayOnBottom", [_dec20$m], Object.getOwnPropertyDescriptor(_class2$1A.prototype, "stayOnBottom"), _class2$1A.prototype), _descriptor12$i = _applyDecoratedDescriptor(_class2$1A.prototype, "videoPlayerEvent", [serializable, _dec21$l, _dec22$j, _dec23$i], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class2$1A)) || _class$1Q) || _class$1Q) || _class$1Q) || _class$1Q) || _class$1Q));
            legacyCC.internal.VideoPlayer = VideoPlayer;

            replaceProperty(VideoPlayer.prototype, 'VideoPlayer.prototype', [{
              name: 'onPasued',
              newName: 'onPaused'
            }]);

            var EventType$8;

            (function (EventType) {
              EventType["NONE"] = "none";
              EventType["LOADING"] = "loading";
              EventType["LOADED"] = "loaded";
              EventType["ERROR"] = "error";
            })(EventType$8 || (EventType$8 = {}));

            var WebViewImpl = function () {
              function WebViewImpl(component) {
                this._componentEventList = new Map();
                this._state = EventType$8.NONE;
                this._wrapper = void 0;
                this._webview = null;
                this._loaded = false;
                this._forceUpdate = false;
                this._component = null;
                this._uiTrans = null;
                this._node = null;
                this._w = 0;
                this._h = 0;
                this._m00 = 0;
                this._m01 = 0;
                this._m04 = 0;
                this._m05 = 0;
                this._m12 = 0;
                this._m13 = 0;
                this._component = component;
                this._node = component.node;
                this._uiTrans = component.node.getComponent(UITransform);
                this.reset();
                this.createWebView();
              }

              var _proto = WebViewImpl.prototype;

              _proto.reset = function reset() {
                this._wrapper = null;
                this._webview = null;
                this._loaded = false;
                this._w = 0;
                this._h = 0;
                this._m00 = 0;
                this._m01 = 0;
                this._m04 = 0;
                this._m05 = 0;
                this._m12 = 0;
                this._m13 = 0;
                this._state = EventType$8.NONE;
                this._forceUpdate = false;
              };

              _proto.dispatchEvent = function dispatchEvent(key) {
                var callback = this._componentEventList.get(key);

                if (callback) {
                  this._state = key;

                  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                  }

                  callback.call(this, args);
                }
              };

              _proto.destroy = function destroy() {
                this.removeWebView();
                this._wrapper = null;
                this._webview = null;
                this._loaded = false;
                this._component = null;
                this._uiTrans = null;
                this._forceUpdate = false;

                this._componentEventList.clear();
              };

              _createClass(WebViewImpl, [{
                key: "loaded",
                get: function get() {
                  return this._loaded;
                }
              }, {
                key: "componentEventList",
                get: function get() {
                  return this._componentEventList;
                }
              }, {
                key: "webview",
                get: function get() {
                  return this._webview;
                }
              }, {
                key: "state",
                get: function get() {
                  return this._state;
                }
              }, {
                key: "UICamera",
                get: function get() {
                  return director.root.batcher2D.getFirstRenderCamera(this._node);
                }
              }]);

              return WebViewImpl;
            }();
            legacyCC.internal.WebViewImpl = WebViewImpl;

            var _mat4_temp$3 = mat4();

            var WebViewImplWeb = function (_WebViewImpl) {
              _inheritsLoose(WebViewImplWeb, _WebViewImpl);

              function WebViewImplWeb(component) {
                return _WebViewImpl.call(this, component) || this;
              }

              var _proto = WebViewImplWeb.prototype;

              _proto._bindDomEvent = function _bindDomEvent() {
                var _this = this;

                if (!this.webview) {
                  return;
                }

                var onLoaded = function onLoaded(e) {
                  _this._forceUpdate = true;

                  _this.dispatchEvent(EventType$8.LOADED);

                  var iframe = e.target;
                  var body = iframe.contentDocument && iframe.contentDocument.body;

                  if (body && body.innerHTML.includes('404')) {
                    _this.dispatchEvent(EventType$8.ERROR, body.innerHTML);
                  }
                };

                this.webview.addEventListener('load', onLoaded);
              };

              _proto.loadURL = function loadURL(url) {
                if (this.webview) {
                  this.webview.src = url;
                  this.dispatchEvent(EventType$8.LOADING);
                }
              };

              _proto.createWebView = function createWebView() {
                var wrapper = document.createElement('div');
                this._wrapper = wrapper;
                wrapper.id = 'webview-wrapper';
                wrapper.style['-webkit-overflow'] = 'auto';
                wrapper.style['-webkit-overflow-scrolling'] = 'touch';
                wrapper.style.position = 'absolute';
                wrapper.style.bottom = '0px';
                wrapper.style.left = '0px';
                wrapper.style.transformOrigin = '0px 100% 0px';
                wrapper.style['-webkit-transform-origin'] = '0px 100% 0px';
                game.container.appendChild(wrapper);
                var webview = document.createElement('iframe');
                this._webview = webview;
                webview.id = 'webview';
                webview.style.border = 'none';
                webview.style.width = '100%';
                webview.style.height = '100%';
                wrapper.appendChild(webview);

                this._bindDomEvent();
              };

              _proto.removeWebView = function removeWebView() {
                var wrapper = this._wrapper;

                if (contains$1(game.container, wrapper)) {
                  game.container.removeChild(wrapper);
                }

                this.reset();
              };

              _proto.enable = function enable() {
                if (this._wrapper) {
                  this._wrapper.style.visibility = 'visible';
                }
              };

              _proto.disable = function disable() {
                if (this._wrapper) {
                  this._wrapper.style.visibility = 'hidden';
                }
              };

              _proto.evaluateJS = function evaluateJS(str) {
                if (this.webview) {
                  var win = this.webview.contentWindow;

                  if (win) {
                    try {
                      win.eval(str);
                    } catch (e) {
                      this.dispatchEvent(EventType$8.ERROR, e);
                      error(e);
                    }
                  }
                }
              };

              _proto.setOnJSCallback = function setOnJSCallback(callback) {
                warn('The platform does not support');
              };

              _proto.setJavascriptInterfaceScheme = function setJavascriptInterfaceScheme(scheme) {
                warn('The platform does not support');
              };

              _proto.syncMatrix = function syncMatrix() {
                if (!this._wrapper || !this._uiTrans || !this._component || this._wrapper.style.visibility === 'hidden') return;
                var camera = this.UICamera;

                if (!camera) {
                  return;
                }

                this._component.node.getWorldMatrix(_mat4_temp$3);

                camera.update(true);
                camera.worldMatrixToScreen(_mat4_temp$3, _mat4_temp$3, game.canvas.width, game.canvas.height);
                var _this$_uiTrans$conten = this._uiTrans.contentSize,
                    width = _this$_uiTrans$conten.width,
                    height = _this$_uiTrans$conten.height;

                if (!this._forceUpdate && this._m00 === _mat4_temp$3.m00 && this._m01 === _mat4_temp$3.m01 && this._m04 === _mat4_temp$3.m04 && this._m05 === _mat4_temp$3.m05 && this._m12 === _mat4_temp$3.m12 && this._m13 === _mat4_temp$3.m13 && this._w === width && this._h === height) {
                  return;
                }

                this._m00 = _mat4_temp$3.m00;
                this._m01 = _mat4_temp$3.m01;
                this._m04 = _mat4_temp$3.m04;
                this._m05 = _mat4_temp$3.m05;
                this._m12 = _mat4_temp$3.m12;
                this._m13 = _mat4_temp$3.m13;
                this._w = width;
                this._h = height;
                var dpr = screenAdapter.devicePixelRatio;
                var scaleX = 1 / dpr;
                var scaleY = 1 / dpr;
                var container = game.container;
                var sx = _mat4_temp$3.m00 * scaleX;
                var b = _mat4_temp$3.m01;
                var c = _mat4_temp$3.m04;
                var sy = _mat4_temp$3.m05 * scaleY;
                this._wrapper.style.width = width + "px";
                this._wrapper.style.height = height + "px";
                var w = this._w * scaleX;
                var h = this._h * scaleY;
                var appx = w * _mat4_temp$3.m00 * this._uiTrans.anchorX;
                var appy = h * _mat4_temp$3.m05 * this._uiTrans.anchorY;
                var offsetX = container && container.style.paddingLeft ? parseInt(container.style.paddingLeft) : 0;
                var offsetY = container && container.style.paddingBottom ? parseInt(container.style.paddingBottom) : 0;
                var tx = _mat4_temp$3.m12 * scaleX - appx + offsetX;
                var ty = _mat4_temp$3.m13 * scaleY - appy + offsetY;
                var matrix = "matrix(" + sx + "," + -b + "," + -c + "," + sy + "," + tx + "," + -ty + ")";
                this._wrapper.style.transform = matrix;
                this._wrapper.style['-webkit-transform'] = matrix;
                this._forceUpdate = false;
              };

              return WebViewImplWeb;
            }(WebViewImpl);

            var WebViewImplManager = function () {
              function WebViewImplManager() {}

              WebViewImplManager.getImpl = function getImpl(component) {
                return new WebViewImplWeb(component);
              };

              return WebViewImplManager;
            }();
            legacyCC.internal.WebViewImplManager = WebViewImplManager;

            var _dec$1O, _dec2$1u, _dec3$14, _dec4$_, _dec5$U, _dec6$Q, _dec7$P, _dec8$L, _class$1R, _class2$1B, _descriptor$1x, _descriptor2$1l, _class3$u, _temp$1G;
            var WebView = exports('WebView', (_dec$1O = ccclass('cc.WebView'), _dec2$1u = help(), _dec3$14 = menu$1(), _dec4$_ = requireComponent(UITransform), _dec5$U = tooltip(), _dec6$Q = type$1([EventHandler]), _dec7$P = displayOrder(), _dec8$L = tooltip(), _dec$1O(_class$1R = _dec2$1u(_class$1R = _dec3$14(_class$1R = _dec4$_(_class$1R = executeInEditMode(_class$1R = (_class2$1B = (_temp$1G = _class3$u = function (_Component) {
              _inheritsLoose(WebView, _Component);

              function WebView() {
                var _this;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _Component.call.apply(_Component, [this].concat(args)) || this;

                _initializerDefineProperty(_this, "_url", _descriptor$1x, _assertThisInitialized(_this));

                _this._impl = null;

                _initializerDefineProperty(_this, "webviewEvents", _descriptor2$1l, _assertThisInitialized(_this));

                return _this;
              }

              var _proto = WebView.prototype;

              _proto.setJavascriptInterfaceScheme = function setJavascriptInterfaceScheme(scheme) {
                if (this._impl) {
                  this._impl.setJavascriptInterfaceScheme(scheme);
                }
              };

              _proto.setOnJSCallback = function setOnJSCallback(callback) {
                if (this._impl) {
                  this._impl.setOnJSCallback(callback);
                }
              };

              _proto.evaluateJS = function evaluateJS(str) {
                if (this._impl) {
                  this._impl.evaluateJS(str);
                }
              };

              _proto.__preload = function __preload() {

                this._impl = WebViewImplManager.getImpl(this);

                this._impl.componentEventList.set(EventType$8.LOADING, this.onLoading.bind(this));

                this._impl.componentEventList.set(EventType$8.LOADED, this.onLoaded.bind(this));

                this._impl.componentEventList.set(EventType$8.ERROR, this.onError.bind(this));

                this._impl.loadURL(this._url);
              };

              _proto.onLoading = function onLoading() {
                EventHandler.emitEvents(this.webviewEvents, this, EventType$8.LOADING);
                this.node.emit(EventType$8.LOADING, this);
              };

              _proto.onLoaded = function onLoaded() {
                EventHandler.emitEvents(this.webviewEvents, this, EventType$8.LOADED);
                this.node.emit(EventType$8.LOADED, this);
              };

              _proto.onError = function onError() {
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                EventHandler.emitEvents(this.webviewEvents, this, EventType$8.ERROR, args);
                this.node.emit(EventType$8.ERROR, this, args);
              };

              _proto.onEnable = function onEnable() {
                if (this._impl) {
                  this._impl.enable();
                }
              };

              _proto.onDisable = function onDisable() {
                if (this._impl) {
                  this._impl.disable();
                }
              };

              _proto.onDestroy = function onDestroy() {
                if (this._impl) {
                  this._impl.destroy();

                  this._impl = null;
                }
              };

              _proto.update = function update(dt) {
                if (this._impl) {
                  this._impl.syncMatrix();
                }
              };

              _createClass(WebView, [{
                key: "url",
                get: function get() {
                  return this._url;
                },
                set: function set(val) {
                  this._url = val;

                  if (this._impl) {
                    this._impl.loadURL(val);
                  }
                }
              }, {
                key: "nativeWebView",
                get: function get() {
                  return this._impl && this._impl.webview || null;
                }
              }, {
                key: "state",
                get: function get() {
                  if (!this._impl) {
                    return EventType$8.NONE;
                  }

                  return this._impl.state;
                }
              }]);

              return WebView;
            }(Component), _class3$u.EventType = EventType$8, _temp$1G), (_descriptor$1x = _applyDecoratedDescriptor(_class2$1B.prototype, "_url", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return 'https://cocos.com';
              }
            }), _applyDecoratedDescriptor(_class2$1B.prototype, "url", [_dec5$U], Object.getOwnPropertyDescriptor(_class2$1B.prototype, "url"), _class2$1B.prototype), _descriptor2$1l = _applyDecoratedDescriptor(_class2$1B.prototype, "webviewEvents", [serializable, _dec6$Q, _dec7$P, _dec8$L], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [];
              }
            })), _class2$1B)) || _class$1R) || _class$1R) || _class$1R) || _class$1R) || _class$1R));
            legacyCC.internal.WebView = WebView;

        }
    };
});
