[1,["9853cc41-749f-4ae7-b03f-cec0af53a8fe@f77f7","9853cc41-749f-4ae7-b03f-cec0af53a8fe@684b2","9853cc41-749f-4ae7-b03f-cec0af53a8fe@42c4f","9853cc41-749f-4ae7-b03f-cec0af53a8fe@09209","9853cc41-749f-4ae7-b03f-cec0af53a8fe@0eca6","9853cc41-749f-4ae7-b03f-cec0af53a8fe@b875f","9853cc41-749f-4ae7-b03f-cec0af53a8fe@0ccb1","9853cc41-749f-4ae7-b03f-cec0af53a8fe@1b083","1baf0fc9-befa-459c-8bdd-af1a450a0319","9853cc41-749f-4ae7-b03f-cec0af53a8fe@719f8","9853cc41-749f-4ae7-b03f-cec0af53a8fe@4ed0f","9853cc41-749f-4ae7-b03f-cec0af53a8fe@d14d2","9853cc41-749f-4ae7-b03f-cec0af53a8fe@0a576","9853cc41-749f-4ae7-b03f-cec0af53a8fe@0510b","9853cc41-749f-4ae7-b03f-cec0af53a8fe@cde4f","9853cc41-749f-4ae7-b03f-cec0af53a8fe@6d810","9853cc41-749f-4ae7-b03f-cec0af53a8fe@9ea44","9853cc41-749f-4ae7-b03f-cec0af53a8fe@e6681","9853cc41-749f-4ae7-b03f-cec0af53a8fe@01ad9","9853cc41-749f-4ae7-b03f-cec0af53a8fe@d6750","9853cc41-749f-4ae7-b03f-cec0af53a8fe@c69f7","9853cc41-749f-4ae7-b03f-cec0af53a8fe@c03e4","9853cc41-749f-4ae7-b03f-cec0af53a8fe@f9737","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@ac3f0","9853cc41-749f-4ae7-b03f-cec0af53a8fe@40d43","9853cc41-749f-4ae7-b03f-cec0af53a8fe@60a1c","9853cc41-749f-4ae7-b03f-cec0af53a8fe@885e8","9853cc41-749f-4ae7-b03f-cec0af53a8fe@4ee56","63a9f7b4-ad66-4c67-ac10-22e0c7070bba@6c48a","b2783b26-9a95-43d1-985c-a79e690c85f4@bb84f","b2783b26-9a95-43d1-985c-a79e690c85f4@e111b","0b84b9f4-c33b-4775-a30c-a6dcfe4e8266@c2696","9853cc41-749f-4ae7-b03f-cec0af53a8fe@5127b","9853cc41-749f-4ae7-b03f-cec0af53a8fe@0a1d1","9853cc41-749f-4ae7-b03f-cec0af53a8fe@f8c5a","9853cc41-749f-4ae7-b03f-cec0af53a8fe@0927a","9853cc41-749f-4ae7-b03f-cec0af53a8fe@38d21","ee1ddf95-af01-4563-b800-5ee4f7b0a030","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@c2caa","c1b931e7-38fc-46d5-8aeb-732f7676ab0e","d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0","6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0","9853cc41-749f-4ae7-b03f-cec0af53a8fe@9b633","9853cc41-749f-4ae7-b03f-cec0af53a8fe@0089c","9853cc41-749f-4ae7-b03f-cec0af53a8fe@3effa","9853cc41-749f-4ae7-b03f-cec0af53a8fe@221a5","f4ae9105-a142-4206-9c32-a44479881594","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@a04af","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@438fe","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@cf5ee","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@24c9f","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@f87ee","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@ee525","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@2c581","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@6e7c3","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@6af9c","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@d36f8","abc641f4-cd1c-4128-9f6d-95fb0bf834c7@7c89c","b2783b26-9a95-43d1-985c-a79e690c85f4@97b5c","b2783b26-9a95-43d1-985c-a79e690c85f4@90896","b2783b26-9a95-43d1-985c-a79e690c85f4@f3ffb","b2783b26-9a95-43d1-985c-a79e690c85f4@dcebe","b2783b26-9a95-43d1-985c-a79e690c85f4@23673","b2783b26-9a95-43d1-985c-a79e690c85f4@b4801","b2783b26-9a95-43d1-985c-a79e690c85f4@0a1ef","b2783b26-9a95-43d1-985c-a79e690c85f4@c47df","b2783b26-9a95-43d1-985c-a79e690c85f4@b7107","b2783b26-9a95-43d1-985c-a79e690c85f4@afeef","b2783b26-9a95-43d1-985c-a79e690c85f4@b5e6e","b2783b26-9a95-43d1-985c-a79e690c85f4@05da8","b2783b26-9a95-43d1-985c-a79e690c85f4@7b4fa","b2783b26-9a95-43d1-985c-a79e690c85f4@37b83","b2783b26-9a95-43d1-985c-a79e690c85f4@30732","b2783b26-9a95-43d1-985c-a79e690c85f4@9635c","b2783b26-9a95-43d1-985c-a79e690c85f4@f1394","b2783b26-9a95-43d1-985c-a79e690c85f4@b6359","b2783b26-9a95-43d1-985c-a79e690c85f4@75ee4","b2783b26-9a95-43d1-985c-a79e690c85f4@b329e","b2783b26-9a95-43d1-985c-a79e690c85f4@59b69","b2783b26-9a95-43d1-985c-a79e690c85f4@a72ab","b2783b26-9a95-43d1-985c-a79e690c85f4@476b9","b2783b26-9a95-43d1-985c-a79e690c85f4@a4f4d","b2783b26-9a95-43d1-985c-a79e690c85f4@2224c","b2783b26-9a95-43d1-985c-a79e690c85f4@9b5cd","b2783b26-9a95-43d1-985c-a79e690c85f4@a21eb","b2783b26-9a95-43d1-985c-a79e690c85f4@62756","b2783b26-9a95-43d1-985c-a79e690c85f4@cce2c","b2783b26-9a95-43d1-985c-a79e690c85f4@fba9c","b2783b26-9a95-43d1-985c-a79e690c85f4@7d08b","b2783b26-9a95-43d1-985c-a79e690c85f4@b725a","b2783b26-9a95-43d1-985c-a79e690c85f4@0b9c0","b2783b26-9a95-43d1-985c-a79e690c85f4@b5902","b2783b26-9a95-43d1-985c-a79e690c85f4@d918b","b2783b26-9a95-43d1-985c-a79e690c85f4@e4a32","b2783b26-9a95-43d1-985c-a79e690c85f4@2d5df","b2783b26-9a95-43d1-985c-a79e690c85f4@aeb3f","b2783b26-9a95-43d1-985c-a79e690c85f4@910b4","b2783b26-9a95-43d1-985c-a79e690c85f4@8feb8","0af5fa08-4502-4526-8dbe-48bb19637cf7@dc888","9fb6951e-a39a-49a7-80ee-687e443f9cec@b84cf","fd939588-07e7-4d69-b9bf-30d07958ef92@01ef8","9853cc41-749f-4ae7-b03f-cec0af53a8fe@9666c","9853cc41-749f-4ae7-b03f-cec0af53a8fe@8e537","9853cc41-749f-4ae7-b03f-cec0af53a8fe@e59fc","9853cc41-749f-4ae7-b03f-cec0af53a8fe@08c68","9853cc41-749f-4ae7-b03f-cec0af53a8fe@683d1","a7612b54-35e3-4238-a1a9-4a7b54635839"],["node","_mesh","_parent","_effectAsset","mainTexture","_skeleton","root","normalMap","asset","data","targetInfo","_defaultClip","_cameraComponent","scene","value","_envmapHDR","_envmapLDR","metallicRoughnessMap","shadeMap1","shadeMap2"],[["cc.Node",["_name","_id","_layer","_objFlags","__editorExtras__","_parent","_prefab","_lpos","_euler","_lrot","_components","_children","_lscale"],-2,1,4,5,5,5,9,2,5],"cc.ImageAsset",["cc.Node",["_name","_lpos","_parent","_children","_prefab","_lrot","_euler","_components"],2,5,1,12,4,5,5,2],"cc.TextureCube",["cc.Node",["_name","_children","_prefab","_lpos","_lrot","_euler","_parent"],2,9,4,5,5,5,1],["cc.PrefabInfo",["fileId","nestedPrefabInstanceRoots","root","instance","asset"],2,2,1,4,6],["cc.Camera",["_visibility","_projection","_priority","_orthoHeight","_far","_clearFlags","node","_color"],-3,1,5],["cc.Material",["_states","_defines","_name","_props"],0,12],["cc.Prefab",["_name"],2],["cc.SkeletalAnimation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,12,4,4],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","_left","_right","_top","_bottom","node"],-2,1],["d76a8ltMJBFULGM0R+1BHvH",["node"],3,1],["cc.TargetInfo",["localID"],2],["19e52Ua92JOVZ66ggficTua",["node"],3,1],["fd93cDT/QFFLrDn2kEEukQA",["node"],3,1],["cc.PrefabInstance",["fileId","propertyOverrides"],2,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["cc.DirectionalLight",["_shadowSaturation","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",[],3],["30f5dso6NpKs7LbaL2Kp/gZ",["node"],3,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.CompPrefabInfo",["fileId"],2],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.MeshRenderer",["node","__prefab","_materials","lightmapSettings","_mesh"],3,1,4,3,4,6]],[[12,0,1,2,2],[37,0,2],[39,1],[40,0,1,2,3,4,1],[0,0,5,10,6,7,9,8,2],[0,0,5,10,6,7,2],[0,0,5,10,6,7,9,12,8,2],[0,0,5,11,6,7,9,8,2],[34,0,1,2,3],[4,0,6,1,2,3,4,5,2],[0,0,5,6,7,9,8,2],[28,0,1,2,2],[7,2,0,1,3,4],[36,0,1,2,3,4],[38,0,1,2,3,4,5,6,1],[0,0,5,10,6,9,8,2],[0,0,11,6,7,9,8,2],[0,0,5,10,6,7,9,2],[23,0,2],[27,0,1,2,3],[0,3,4,5,6,3],[0,0,5,6,7,9,12,8,2],[0,0,5,10,6,7,8,2],[5,0,2,3,4,2],[26,0,1,2],[0,0,11,10,6,2],[0,0,5,11,6,9,8,2],[0,0,5,6,7,2],[0,0,5,6,7,8,2],[0,0,5,11,6,7,9,12,8,2],[0,0,5,10,6,7,12,2],[33,0,1,2,4],[8,0,2],[10,0,2],[11,0,1,2,3,2],[0,0,1,5,7,9,8,3],[0,0,2,1,5,11,10,7,4],[0,0,1,5,11,10,3],[0,0,1,5,10,7,9,8,3],[0,0,1,5,10,9,8,3],[0,0,1,5,10,3],[0,0,5,11,6,2],[0,0,11,6,2],[0,0,5,6,2],[2,0,2,7,1,2],[2,0,3,4,1,5,6,2],[2,0,2,3,4,1,5,6,2],[4,0,1,2,3,4,5,2],[5,0,1,2],[13,0,1,2,3,4,1],[14,0,1,2,3,4,2],[15,0,1],[16,0,1,2,2],[17,1],[18,1],[19,0,1,1],[20,0,1,1],[21,0,1,2,3,4,5,6],[22,0,1],[24,0,1],[6,0,6,2],[6,1,2,3,4,5,0,6,7,7],[25,0,1],[29,0,1,2,2],[30,0,1,2,2],[31,1],[32,0,1],[7,0,1,3,3],[35,0,1,2,3,5],[8,1],[9,1,2,3,4,1],[9,0,1,2,3,4,2]],[[[[33,"MainScene"],[34,"MainScene",[[-4,-5,-6,[35,"Building","5dBErnd5JDbbQ2hxI4Jots",-7,[1,682.734,10,702.734],[3,-0.27781593346944067,-0.36497167621709875,-0.11507512748638381,0.8811195706053617],[1,-35.000000000000014,-45.00000000000001,0]],-8,-9,-10],1,1,1,4,1,1,1],[48,"05f953bf-92b1-4173-a5f4-856c9b6142fa",[-1,-2,-3]],[49,[50,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[51,[4,4283190348]],[52,true,4,5],[53],[54]]],[36,"Canvas",33554432,"88HxKaYDRI4KTrGgHbYfI8",1,[-16],[[55,-11,[5,1950,900]],[56,-13,-12],[57,45,-1.1368683772161603e-13,1.1368683772161603e-13,-5.684341886080802e-14,-5.684341886080802e-14,-14],[58,-15]],[1,974.9999999999999,449.99999999999994,0]],[18,["f7Bx57gZ5a7ou4J15FqvTd"]],[18,["4ea0aEdD9PHI8f0RIFCG/S"]],[18,["fe9pvs6idRNK5XTT7/ZOO+"]],[37,"GlobalNode","5bNFb8B3dF4abcvIzsHNc2",1,[-18,-19],[[59,-17]]],[38,"Main Camera","c9DMICJLFO5IeO07EPon7U",1,[[60,1822425087,-20],[62,-21]],[1,0,5,30],[3,-0.27781593346944056,-0.36497167621709875,-0.11507512748638377,0.8811195706053617],[1,-35,-45,0]],[20,0,{},1,[23,"fe9pvs6idRNK5XTT7/ZOO+",-22,[24,"63Lb6CvjhORrIG4zTV+3lo",[[19,"Land",["_name"],5],[11,["_lpos"],5,[1,0,0,0]],[11,["_lrot"],5,[3,0,0,0,1]],[11,["_euler"],5,[1,0,0,0]]]],0]],[20,0,null,6,[23,"f7Bx57gZ5a7ou4J15FqvTd",-25,[24,"bajnXL32RBs5Jd2I2IkLrg",[[19,"GirlRole",["_name"],3],[11,["_lpos"],3,[1,0,0,0]],[11,["_lrot"],3,[3,0,0,-1.3877787807814457e-17,1]],[11,["_euler"],3,[1,0,0,-1.5902773407317584e-15]],[19,true,["playOnLoad"],-23],[11,["_lscale"],3,[1,5,5,5]],[63,["_defaultClip"],-24,2]]],1]],[20,0,{},6,[23,"4ea0aEdD9PHI8f0RIFCG/S",-26,[24,"bdRlP8VCtOv5nQVKICbvZh",[[19,"BoyRole",["_name"],4],[11,["_lpos"],4,[1,0,0,10.173]],[11,["_lrot"],4,[3,0,0,0,1]],[11,["_euler"],4,[1,0,0,0]],[11,["_lscale"],4,[1,5,5,5]]]],3]],[39,"Main Light","c0y6F5f+pAvI805TdmxIjx",1,[[64,0.75,-27,[65]]],[3,-0.8005972817813567,-0.1453229557254247,-0.33176781330654553,0.4773419623260901],[1,-120.254,-42.248,-4.821]],[40,"RoleScene","f1Y+hrAFtOi7+qk4fMvywC",1,[[66,-28]]],[18,["42lGSM8VFWIo86G7xuYHdy"]],[44,"Camera",2,[-29],[1,0,0,1000]],[61,0,1073741824,574.2801047120419,2000,6,41943040,14,[4,4278190080]]],0,[0,-1,8,0,-2,9,0,-3,10,0,-1,11,0,-2,7,0,-3,8,0,2,1,0,-5,12,0,-6,6,0,-7,2,0,0,2,0,12,15,0,0,2,0,0,2,0,0,2,0,-1,14,0,0,6,0,-1,9,0,-2,10,0,0,7,0,0,7,0,6,8,0,10,13,0,10,13,0,6,9,0,6,10,0,0,11,0,0,12,0,-1,15,0,13,1,29],[0,0,0,0,0,0],[8,8,14,8,15,16],[37,38,23,39,40,41]],[[[31,"builtin-standard",[{"hash":2489015834,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":["HAS_SECOND_UV"]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":7,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out lowp vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out mediump vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) in mediump vec2 v_uv1;\n#endif\nlayout(location = 4) in mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 2) in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":223,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":2052537501,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":["HAS_SECOND_UV"]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) out vec2 v_uv1;\n#endif\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) in vec2 v_uv1;\n#endif\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":184,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[8,".bin",456693271,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8304,"length":594,"count":297,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":8304,"count":173,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,4.76837158203125e-7,-0.23029518127441406,-5],"maxPosition",8,[1,5,0.06969642639160156,0.000002384185791015625]]],-1],0,0,[],[],[]],[[[8,".bin",2138025639,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":78384,"length":4560,"count":2280,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":78384,"count":1633,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-9.620927810668945,0,-9.561687469482422],"maxPosition",8,[1,8.755571365356445,2.472424030303955,9.56167221069336]]],-1],0,0,[],[],[]],[[[8,".bin",3615475378,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5808,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5808,"count":121,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5,-1.1102230246251565e-16,-5],"maxPosition",8,[1,5,1.1102230246251565e-16,5]]],-1],0,0,[],[],[]],[[[8,".bin",3790682572,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,0,-5],"maxPosition",8,[1,5,0,0]]],-1],0,0,[],[],[]],[[[8,".bin",3966049930,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":1020,"count":510,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0000019073486328125,-0.2302948236465454,-4.999993801116943],"maxPosition",8,[1,5.000001907348633,0.06969653815031052,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",63933487,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15792,"length":1152,"count":576,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15792,"count":329,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.2302948534488678,-4.999998569488525],"maxPosition",8,[1,5,0.06969654560089111,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",3636698565,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22848,"length":1680,"count":840,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22848,"count":476,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.000006198883056640625,-0.2302948534488678,-5.000000953674316],"maxPosition",8,[1,5.000000953674316,0.06969654560089111,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",4013152712,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4176,"length":360,"count":180,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4176,"count":87,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00000858306884765625,-0.02982913702726364,-5.000000953674316],"maxPosition",8,[1,4.999997615814209,0.010857119224965572,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",1269121385,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":540,"count":270,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.2302948385477066,-5.000000476837158],"maxPosition",8,[1,5.000013828277588,0.06969653069972992,0]]],-1],0,0,[],[],[]],[[[8,".bin",488929676,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19008,"length":1368,"count":684,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19008,"count":396,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,0,-5],"maxPosition",8,[1,5,0.07483609765768051,0]]],-1],0,0,[],[],[]],[[[8,".bin",2046070553,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4512,"length":552,"count":276,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4512,"count":94,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,0,-5],"maxPosition",8,[1,5,3.2857067822078534e-7,0]]],-1],0,0,[],[],[]],[[[8,".bin",2308610281,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7152,"length":510,"count":255,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7152,"count":149,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.000002384185791015625,-0.2302948385477066,-5.000000476837158],"maxPosition",8,[1,5.000011920928955,0.06969653069972992,0]]],-1],0,0,[],[],[]],[[[12,"PolygonTown_Road",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true}],[[[{"metallic":0,"roughness":0.85},"tilingOffset",8,[2,1,-1,0,1],"mainTexture",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[4,7,3],[42,43,8]],[[[8,".bin",1894346574,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29136,"length":2208,"count":1104,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":29136,"count":607,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.23029518127441406,-10],"maxPosition",8,[1,9.99999713897705,0.06969642639160156,0.00000286102294921875]]],-1],0,0,[],[],[]],[[[8,".bin",3048215543,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":130032,"length":6690,"count":3345,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":130032,"count":2709,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-10.385994911193848,0,-10.048580169677734],"maxPosition",8,[1,10.385991096496582,10.310853958129883,10.048580169677734]]],-1],0,0,[],[],[]],[[[8,".bin",839643545,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4464,"length":396,"count":198,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4464,"count":93,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.23029518127441406,-5],"maxPosition",8,[1,5,0.06969642639160156,0]]],-1],0,0,[],[],[]],[[[8,".bin",135926312,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3696,"length":288,"count":144,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3696,"count":77,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0000095367431640625,-0.029829133301973343,-5.000001430511475],"maxPosition",8,[1,4.999997615814209,0.03856385871767998,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",1420333092,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17808,"length":1218,"count":609,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17808,"count":371,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.2302948534488678,-4.999998569488525],"maxPosition",8,[1,5.000000953674316,0.06969654560089111,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",465201259,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1248,"length":192,"count":96,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1248,"count":26,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00000858306884765625,-0.016226740553975105,-5.000000953674316],"maxPosition",8,[1,4.999997615814209,0.05324956774711609,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",948779385,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":504,"count":252,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.2302948385477066,-5],"maxPosition",8,[1,5.000007152557373,0.06969653069972992,0]]],-1],0,0,[],[],[]],[[[8,".bin",1419026734,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":624,"length":66,"count":33,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":624,"count":13,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,0,-5],"maxPosition",8,[1,5.000190258026123,8.895877978210617e-15,0]]],-1],0,0,[],[],[]],[[[8,".bin",3421504196,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,0,-2.5],"maxPosition",8,[1,2.5,4.440892098500626e-16,0]]],-1],0,0,[],[],[]],[[[8,".bin",3389415997,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6096,"length":396,"count":198,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6096,"count":127,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04422607272863388,0,-0.05106933414936066],"maxPosition",8,[1,0.04422607272863388,0.22318610548973083,0.05106933414936066]]],-1],0,0,[],[],[]],[[[8,".bin",3337514510,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10608,"length":756,"count":378,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10608,"count":221,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000610277056694,7.450580596923828e-8,-0.057744137942790985],"maxPosition",8,[1,0.05000610277056694,0.24744002521038055,0.057744137942790985]]],-1],0,0,[],[],[]],[[[8,".bin",2618394041,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":256224,"length":13506,"count":6753,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":256224,"count":5338,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-11.304533004760742,0,-11.172332763671875],"maxPosition",8,[1,11.304533004760742,5.5655436515808105,11.17287826538086]]],-1],0,0,[],[],[]],[[[8,".bin",2864648481,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4512,"length":552,"count":276,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4512,"count":94,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,0,-5],"maxPosition",8,[1,5,3.2857067822078534e-7,0]]],-1],0,0,[],[],[]],[[[8,".bin",2452166206,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4560,"length":378,"count":189,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4560,"count":95,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.029829710721969604,-5.000009059906006],"maxPosition",8,[1,5.000004768371582,0.010856933891773224,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",2775252404,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2160,"length":174,"count":87,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2160,"count":45,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,0,-4.999992370605469],"maxPosition",8,[1,10,0,0]]],-1],0,0,[],[],[]],[[[8,".bin",1766520600,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14064,"length":936,"count":468,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14064,"count":293,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.2302948236465454,-4.999993801116943],"maxPosition",8,[1,5.000009536743164,0.06969653815031052,0]]],-1],0,0,[],[],[]],[[[8,".bin",3188436315,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":56016,"length":4560,"count":2280,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":56016,"count":1167,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-9.337217330932617,5.960464477539063e-8,-9.536237716674805],"maxPosition",8,[1,9.517370223999023,0.8615278601646423,9.205072402954102]]],-1],0,0,[],[],[]],[[[8,".bin",258195759,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25920,"length":2256,"count":1128,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":25920,"count":540,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.000002384185791015625,-1.1307048797607422,-5.000000476837158],"maxPosition",8,[1,5.0000128746032715,0.06969654560089111,0]]],-1],0,0,[],[],[]],[[[68,"Default-Material",[{"metallic":0,"roughness":0.5}],[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}]]],0,0,[0],[3],[8]],[[[8,".bin",2300219696,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9408,"length":636,"count":318,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":9408,"count":196,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0,-0.2302948534488678,-4.999998092651367],"maxPosition",8,[1,5.000000476837158,0.06969652324914932,0]]],-1],0,0,[],[],[]],[[[12,"PolygonTown_01_A",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true}],[[[{"metallic":1,"roughness":1},"tilingOffset",8,[2,1,-1,0,1],"mainTexture",6,0,"metallicRoughnessMap",6,1]],11]]],0,0,[0,0,0],[4,17,3],[44,45,8]],[[[8,".bin",1746042534,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14016,"length":1020,"count":510,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14016,"count":292,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0000019073486328125,-0.2302948236465454,-4.999993801116943],"maxPosition",8,[1,5.000001907348633,0.06969653815031052,0.000007152557373046875]]],-1],0,0,[],[],[]],[[[8,".bin",3758397601,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":53232,"length":2988,"count":1494,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":53232,"count":1109,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-7.250284194946289,0,-7.247006893157959],"maxPosition",8,[1,7.251649856567383,5.544921875,7.247006893157959]]],-1],0,0,[],[],[]],[[[31,"builtin-toon",[{"hash":2638483811,"name":"builtin-toon|outline-vs:vert|outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":198,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}]},{"hash":1851045529,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":4,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":5,"defines":["USE_NORMAL_MAP"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec2 v_uv;\nlayout(location = 3) out mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 4) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 5) out mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    layout(location = 0) in highp vec4 v_shadowPos;\n    layout(set = 0, binding = 2) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n    #if CC_RECEIVE_SHADOW\n      layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n      layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in vec3 v_position;\nlayout(location = 2) in vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  layout(location = 4) in mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\nlayout(location = 3) in mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 5) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  layout(set = 1, binding = 3) uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  layout(set = 1, binding = 4) uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  layout(set = 1, binding = 5) uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nout vec3 v_position;\nout vec2 v_uv;\nout mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    in highp vec4 v_shadowPos;\n    layout(std140) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":227,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":79}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_1ST_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_2ND_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean","defines":["USE_1ST_SHADE_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean","defines":["USE_BASE_COLOR_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean","defines":["USE_BASE_COLOR_MAP"]}]},{"hash":2698182973,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_worldPos;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_worldPos;\nlayout(location = 2) in float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nout vec2 v_uv;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture2D(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":188,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":79}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"passes":[{"program":"builtin-toon|outline-vs:vert|outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[13,"Skin-0",1902922694,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","RootNode/Bip001/Bip001 Pelvis","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","RootNode/Bip001","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0/Bip001 L Toe0Nub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 Head","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2","RootNode/Bip001/brick","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger0Nub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger1Nub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger0Nub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger1Nub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Spine2/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0"],[[[7,-0.0023298747837543488,-0.022234873846173286,-2.5399017333984375,0,0.36097654700279236,-2.514125347137451,0.021678093820810318,0,-2.5142176151275635,-0.3609427213668823,0.005466089118272066,0,0.41212862730026245,0.054969314485788345,0.08240591734647751,1],[7,1.1102692809572545e-7,0.000003482103238638956,-2.5400002002716064,0,-1.555301383669155e-16,-2.5400002002716064,-0.000003482103238638956,0,-2.5399999618530273,1.5236308037718665e-13,-1.1102692809572545e-7,0,0.1594923436641693,0.03190299868583679,0.08302468806505203,1],[7,0.0000035232851587352343,0.000007004575763858156,2.5400002002716064,0,1.555301383669155e-16,-2.5400002002716064,0.000007004575763858156,0,2.5399999618530273,-9.716031798556735e-12,-0.0000035232851587352343,0,-0.6130082607269287,-2.65869335436264e-8,8.503162121087371e-7,1],[7,-0.0059986053965985775,-0.021536821499466896,-2.5399017333984375,0,-0.06256335973739624,-2.5391368865966797,0.021678097546100616,0,-2.539222002029419,0.0626121386885643,0.005466088652610779,0,0.613018274307251,-0.01440092921257019,0.08240591734647751,1],[7,0.0000034821034660126315,2.5400002002716064,-1.555301383669155e-16,0,-2.5400002002716064,0.0000034821034660126315,1.5552991337378888e-16,0,1.555301516018053e-16,1.5552992660867868e-16,2.5399999618530273,0,-2.658928011101125e-8,3.641389219235375e-14,-0.6130082607269287,1],[7,0.0000044234798224351835,0.000002605763711471809,-2.5400002002716064,0,-1.796051263809204,-1.796051025390625,-0.0000049704258344718255,0,-1.796051025390625,1.796051263809204,-0.0000012853189446104807,0,-0.047463662922382355,-0.05318315699696541,0.08302464336156845,1],[7,3.431604511661135e-7,0.000003482103238638956,-2.5400002002716064,0,-1.555301516018053e-16,-2.5400002002716064,-0.000003482103238638956,0,-2.5400002002716064,4.70596543504509e-13,-3.431604511661135e-7,0,0.1595533937215805,0.032759398221969604,-0.08302494883537292,1],[7,2.421729326248169,0.07294421643018723,0.7625654339790344,0,0.0022481665946543217,2.52777099609375,-0.24893687665462494,0,-0.7660430669784546,0.23802055418491364,2.4100048542022705,0,0.04304133728146553,-0.11090239882469177,-0.9987455010414124,1],[7,0.0000044234793676878326,0.000002605763711471809,-2.5400002002716064,0,-1.7960517406463623,-1.796050786972046,-0.000004970425379724475,0,-1.796050786972046,1.7960517406463623,-0.0000012853179214289412,0,-0.046814825385808945,-0.052620794624090195,-0.0830250084400177,1],[7,0.0000044234798224351835,0.000002605763711471809,2.5400002002716064,0,-1.796051263809204,-1.796051025390625,0.0000049704258344718255,0,-1.796051025390625,1.796051263809204,0.0000012853189446104807,0,-0.11816969513893127,-0.05318315699696541,-0.08302464336156845,1],[7,0.0000023874367798271123,-0.000017563852452440187,2.5400002002716064,0,-0.39734014868736267,-2.5087289810180664,-0.00001697414154477883,0,2.5087287425994873,-0.39734020829200745,-0.0000051056131269433536,0,-1.1267143487930298,0.2492968887090683,0.000002668736215127865,1],[7,1.1894287776925694e-9,-0.0000048829538172867615,2.5400002002716064,0,-0.002022495958954096,-2.53999924659729,-0.000004882951088802656,0,2.539999008178711,-0.0020224961917847395,-5.077521070262492e-9,0,-0.6985989212989807,-0.013876898214221,-2.628918416291981e-8,1],[7,0.005998237058520317,0.02155481092631817,-2.5399012565612793,0,-0.05776797980070114,-2.539250373840332,-0.021685706451535225,0,-2.5393357276916504,0.05781695619225502,-0.005506239365786314,0,0.6130456924438477,-0.013243287801742554,-0.08239620923995972,1],[7,-3.0133750783534197e-7,-0.000006224322078196565,2.5400002002716064,0,0.3514968752861023,-2.515561580657959,-0.000006122734703239985,0,2.515561580657959,0.3514968752861023,0.0000011597884395087021,0,-0.778904914855957,-0.12339408695697784,-3.947395441628032e-7,1],[7,3.6436284744922887e-7,-0.000009122881237999536,2.5400002002716064,0,0.3514968752861023,-2.515561580657959,-0.000009085528290597722,0,2.515561580657959,0.3514968752861023,9.016089848046249e-7,0,-0.8884022235870361,-0.12329242378473282,-3.024320847089257e-7,1],[7,-1.175708293914795,0.46703317761421204,-2.2025415897369385,0,-1.902306318283081,1.1230961084365845,1.2535885572433472,0,1.204383134841919,2.229828119277954,-0.1700761318206787,0,-0.6703300476074219,-0.8556597828865051,0.053380582481622696,1],[7,-4.261369923597158e-8,-0.000010244789336866233,2.5400002002716064,0,-0.3555019199848175,-2.5149986743927,-0.000010149912668566685,0,2.514998435974121,-0.3555019199848175,-0.0000013916808256908553,0,-1.0582863092422485,0.16722798347473145,6.504288307951356e-7,1],[7,2.4918930530548096,0.22137758135795593,0.4393884539604187,0,-0.2772773802280426,2.505709409713745,0.31006181240081787,0,-0.40643271803855896,-0.35215485095977783,2.4824180603027344,0,0.11940119415521622,0.12034828960895538,-1.0169445276260376,1],[7,2.421863079071045,0.06836485117673874,0.7625654935836792,0,0.007027914747595787,2.527761936187744,-0.24893687665462494,0,-0.7655918002128601,0.23946860432624817,2.4100048542022705,0,0.20610970258712769,-0.11098358035087585,-0.9987455010414124,1],[7,0.0023265203926712275,0.022252529859542847,-2.5399012565612793,0,0.36572393774986267,-2.5134387016296387,-0.021685685962438583,0,-2.51353120803833,-0.3656899034976959,-0.005506239831447601,0,0.41196292638778687,0.05611536279320717,-0.08239620923995972,1],[7,-2.42172908782959,-0.0729512944817543,0.7625657320022583,0,0.0022414508275687695,2.527770519256592,0.24893896281719208,0,-0.7660439014434814,0.23802044987678528,-2.4100046157836914,0,0.043041739612817764,-0.1109028309583664,0.9987453818321228,1],[7,-2.4918932914733887,-0.22137345373630524,0.4393877685070038,0,-0.2772732079029083,2.505709648132324,-0.31006258726119995,0,-0.40643247961997986,-0.3521548807621002,-2.4824180603027344,0,0.11940109729766846,0.12034828960895538,1.0169445276260376,1],[7,-2.421862840652466,-0.06837192922830582,0.7625657320022583,0,0.007021200377494097,2.527761697769165,0.24893899261951447,0,-0.7655925750732422,0.2394685447216034,-2.4100046157836914,0,0.20611007511615753,-0.11098403483629227,0.9987455010414124,1],[7,2.3465399742126465,-0.9261409640312195,-0.2959956228733063,0,0.14932216703891754,-0.42081061005592346,2.500444173812866,0,-0.9607567191123962,-2.327397584915161,-0.3343132436275482,0,-0.059459831565618515,1.000530481338501,0.1591247320175171,1],[7,1.2697712182998657,-0.9963967204093933,1.9612421989440918,0,-0.9650048613548279,1.7827035188674927,1.5304670333862305,0,-1.9768766164779663,-1.510217308998108,0.5126372575759888,0,0.404272198677063,0.7219808101654053,-0.5250610113143921,1],[7,1.6064332723617554,-1.9566712379455566,-0.20592527091503143,0,-0.2601751685142517,-0.47477781772613525,2.48163104057312,0,-1.9501992464065552,-1.548424482345581,-0.5006995797157288,0,0.3405468165874481,0.9467980265617371,0.19795963168144226,1],[7,1.6064332723617554,-1.9566712379455566,-0.20592527091503143,0,-0.2601751685142517,-0.47477781772613525,2.48163104057312,0,-1.9501992464065552,-1.548424482345581,-0.5006995797157288,0,0.3051987290382385,0.9467980265617371,0.19795963168144226,1],[7,1.2697712182998657,-0.9963967204093933,1.9612421989440918,0,-0.9650048613548279,1.7827035188674927,1.5304670333862305,0,-1.9768766164779663,-1.510217308998108,0.5126372575759888,0,0.4396861493587494,0.7219808101654053,-0.5250610113143921,1],[7,-2.3465399742126465,0.9261429905891418,-0.29598864912986755,0,0.14931562542915344,-0.4208078980445862,-2.5004448890686035,0,-0.9607574939727783,-2.327397584915161,0.33431291580200195,0,-0.05945947393774986,1.00053071975708,-0.15912413597106934,1],[7,-1.2697681188583374,0.9963921904563904,-1.9612466096878052,0,-0.9650084376335144,1.7827062606811523,1.5304616689682007,0,-1.9768770933151245,-1.5102170705795288,0.5126367211341858,0,0.4059280753135681,0.7215625643730164,-0.5252222418785095,1],[7,-1.4300991296768188,2.0875234603881836,-0.2205887734889984,0,-0.2982712686061859,-0.4662877917289734,-2.4789528846740723,0,-2.0778465270996094,-1.3698242902755737,0.5076717734336853,0,0.42172694206237793,0.9123275279998779,-0.20344911515712738,1],[7,-1.4300991296768188,2.0875234603881836,0.2205887734889984,0,-0.2982712686061859,-0.4662877917289734,2.4789528846740723,0,-2.0778465270996094,-1.3698242902755737,-0.5076717734336853,0,0.38637882471084595,0.9123275279998779,0.20344911515712738,1],[7,-1.2697681188583374,0.9963921904563904,1.9612466096878052,0,-0.9650084376335144,1.7827062606811523,-1.5304616689682007,0,-1.9768770933151245,-1.5102170705795288,-0.5126367211341858,0,0.4413420259952545,0.7215625643730164,0.5252222418785095,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,".bin",3777272057,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":314496,"length":40410,"count":20205,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":314496,"count":4368,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]]},"minPosition",8,[1,-0.21904224157333374,-0.082481250166893,-0.000001182556161438697],"maxPosition",8,[1,0.21904224157333374,0.09165465831756592,0.6424413919448853]]],-1],0,0,[],[],[]],[[[69],[25,"girlAll",[-3],[[70,-2,[1,"42lGSM8VFWIo86G7xuYHdy"],[3,4,5,6,7,8,9,10,11,12],13]],[0,"f7Bx57gZ5a7ou4J15FqvTd",-1,0]],[45,"Bip001",[[[10,"Bip001 Footsteps",-4,[0,"1e2B2uUJVe34bqkh3PCIOU",1,0],[1,-0.0690170526504517,-0.0405099131166935,-0.599686980247498],[3,0.03266228393638018,0.05767779479034726,0.8635404787220541,0.49990427964228057],[1,-172.27386658508956,179.85547244276142,60.128309043713166]],-5,[10,"brick",-6,[0,"97LlQU9RtbI7VOGkAzj1dt",1,0],[1,0.25867834687233,0.0595147199928761,0.293884038925171],[3,0.6819565841600904,0.12475051638274381,0.02665206211394197,0.7201820558497795],[1,85.98667261938738,8.427464896258945,12.036662454058634]]],4,1,4],[0,"cdbTqY2fFalZe81MgamOTZ",1,0],[1,0,0.656744301319122,0],[3,0.37658143810506606,0.6513996852985484,0.5698309656806843,-0.33038998323056246],[1,-86.13544004425476,-120.0880642151373,6.550400740554067]],[16,"Bip001 Spine",[-7,-8,-9],[0,"8cQn9psspU2IShQzV1XSap",1,0],[1,0.0855899006128311,0.0144339418038726,-0.00000172138209109107],[3,0.014328722157439093,-0.02146198637485674,0.07391412683442983,0.9969306759832822],[1,1.8389162419470884,-2.602238597641371,8.439179804086507]],[16,"Bip001 Neck",[-10,-11,-12],[0,"9aKXG8DbBXyLxkbFFlOyjr",1,0],[1,0.174976646900177,0.00766197172924876,-0.0000141507380249095],[3,0.16479254064695706,-0.036837224578411924,0.07198673615913635,0.9830078063014736],[1,19.395050706202653,-5.56433373689479,7.434115802828583]],[41,"RootNode",1,[2,-13],[0,"6eqDstKY1S/LJ1QUiJrMOw",1,0]],[16,"Bip001 R Hand",[-14,-15],[0,"fd9ipGzVhTXKkPKvgYJt/E",1,0],[1,0.184906542301178,-4.76837147544984e-9,-1.42108543975646e-16],[3,0.7248593415147664,-0.03618607965891251,0.04857510225324332,0.6862287971943359],[1,93.18538491934692,-6.897655441313803,0.814064753128979]],[16,"Bip001 L Hand",[-16,-17],[0,"06rY6cjWJQI6msD+nEFqNR",1,0],[1,0.184906497597694,-9.53674295089968e-9,7.10542719878232e-17],[3,-0.7822812760854854,0.006193672744956735,0.08770864417892306,0.6166886063811202],[1,-103.91503494210006,8.37043430254079,5.652078042260626]],[26,"Bip001 Pelvis",2,[3],[0,"7eirzN2vpZLZzYeZ84op0R",1,0],[3,-0.4999999925491744,-0.4999999925491744,-0.4999993070957696,0.5000007078049007],[1,-89.9999197452773,-89.9999197452773,-0.0000017074910412130916]],[7,"Bip001 Spine1",3,[-18],[0,"668jeTEuBdiKbx4owfB/BB",1,0],[1,0.0899122580885887,-0.0000871813244884834,-2.21729280269756e-7],[3,0.0012880745176820092,-0.002773482549357939,0.005775038078039554,0.9999786485689496],[1,0.14944485016402237,-0.31868618692303075,0.6613618006680922]],[7,"Bip001 Spine2",9,[4],[0,"17THfeUwFdpbBAzRNhT51t",1,0],[1,0.109499432146549,-0.000101637837360613,-5.10215727445029e-7],[3,0.0025760366338258857,-0.005546856719490153,0.011549837987064335,0.9999145951821421],[1,0.30259011917631917,-0.6391614459543445,1.321880784046484]],[9,"Bip001 Head",4,[[27,"Bip001 HeadNub",-19,[0,"14W9gqhb5WTL7+GR0p5wUC",1,0],[1,0.383253991603851,4.76837147544984e-9,8.88178399847791e-18]]],[0,"5bIoH1Zh5UwoFpB4556vqT",1,0],[1,0.0724238604307175,-0.0632687583565712,-1.43051138934425e-7],[3,-0.008398466932351282,0.02849007275679712,-0.09267638832078454,0.9952531680709755],[1,-0.6667807938453614,3.2171990145949283,-10.65830382501491]],[7,"Bip001 R Clavicle",4,[-20],[0,"97AxhdwTNYHYVuNq7OXBCZ",1,0],[1,-0.0460272207856178,-0.0153762241825461,-0.0413057431578636],[3,-0.6355361861707732,0.14401328389731088,0.7579146532060063,-0.030320101982675682],[1,-169.35820550478712,101.27660773368497,-13.238876056779763]],[7,"Bip001 R UpperArm",12,[-21],[0,"d6dKVbq7JQ+J2s0m61cKC7",1,0],[1,0.0591400675475597,-8.88178399847791e-18,0],[3,-0.047559726516571525,-0.5249794670083437,0.10300869393586874,0.8435187257002246],[1,1.6415138523968287,-63.979650172830254,12.927343758043435]],[7,"Bip001 R Forearm",13,[6],[0,"630GE2GnVctZvQVzQeLS7T",1,0],[1,0.163278117775917,0,7.10542719878232e-17],[3,0,0,-0.18419374616320844,0.9828899551192717],[1,0,0,-21.228259361429902]],[9,"Bip001 R Finger0",6,[[21,"Bip001 R Finger0Nub",-22,[0,"61On3RQapa0bDTLAFLjl0R",1,0],[1,0.0354139693081379,0,1.90734859017994e-8],[3,-3.39907783193696e-33,5.55111512312578e-17,1,-6.12323426292584e-17],[1,-1,-1,-1],[1,-180,180,-7.016709604711002e-15]]],[0,"23Ess+IFdUNqelz2dZKLuC",1,0],[1,0.0392572768032551,0.0286014173179865,0.0329771377146244],[3,-0.5411930097860181,-0.3171242185474199,0.006131208517199583,0.7787841578072567],[1,-63.72977602792553,-31.38553516143037,20.658708108640806]],[9,"Bip001 R Finger1",6,[[21,"Bip001 R Finger1Nub",-23,[0,"59AX6AlxNXgZeNwBAmLek3",1,0],[1,0.0353481285274029,1.90734859017994e-8,8.88178399847791e-18],[3,-1.86264537127556e-9,2.79396794589104e-9,1,-5.60281655838831e-17],[1,-1,-1,-1],[1,-179.99999967983484,179.99999978655657,-7.016708964892575e-15]]],[0,"eaGstxWs5YW6wR/0h9g1aQ",1,0],[1,0.0993016064167023,0,4.76837147544984e-9],[3,-0.016747143153751004,0.06913898899359908,0.2396292840364341,0.9682546873779216],[1,-4.239030794423787,9.20631459012412,27.498706874775895]],[7,"Bip001 L Clavicle",4,[-24],[0,"151D4Zw+JdSZCgNEdirAwC",1,0],[1,-0.0367412567138672,0.0154016679152846,0.0497664920985699],[3,0.6884938621692706,0.0078112340294517815,0.7170328647046297,0.10853136556613671],[1,171.94063400160334,-91.65010219213359,9.578403612412995]],[7,"Bip001 L UpperArm",17,[-25],[0,"87c9oIjhhWkY7suqrql2pR",1,0],[1,0.0591400675475597,-9.53674295089968e-9,1.42108543975646e-16],[3,0.06552987582474805,0.534413161890327,-0.0361439028918968,0.8419038104537344],[1,8.567678023340713,64.77270172951866,0.5260214424619314]],[7,"Bip001 L Forearm",18,[7],[0,"81Lj9sxopVILdbwAWJhRfn",1,0],[1,0.163278043270111,0,7.10542719878232e-17],[3,-2.5233116529592386e-17,1.8062524353757522e-17,-0.156969264571453,0.9876034882380162],[1,-2.6619374413049594e-15,1.672706185045547e-15,-18.062050082582477]],[9,"Bip001 L Finger0",7,[[27,"Bip001 L Finger0Nub",-26,[0,"8bGEw6Y2ZW+o9PVzcXSuQ1",1,0],[1,0.0354140065610409,0,5.32907039908674e-17]]],[0,"06UEL62DRWr7xxkx5Jbaqi",1,0],[1,0.0404040515422821,0.0294369496405125,-0.0339404679834843],[3,0.6005308628858934,0.24330660703944634,0.04500748590216973,0.760354459384071],[1,72.87271675498336,19.800198762516626,21.141320366967374]],[9,"Bip001 L Finger1",7,[[28,"Bip001 L Finger1Nub",-27,[0,"ea84faWK9by7dOK+QRamxr",1,0],[1,0.0353481285274029,-9.53674295089968e-9,-1.43051144263495e-8],[1,-0.0000021877949693148467,1.0672170299846388e-7,8.537736442140512e-7]]],[0,"6d8M2y6kJSnJHeT70+Iksp",1,0],[1,0.0993016064167023,3.81469718035987e-8,9.53674295089968e-9],[3,0.008574836703092763,-0.05715584632080464,0.21544962658279243,0.9748031287455959],[1,2.6099990999446248,-7.284540125933083,24.775365130613405]],[7,"Bip001 L Thigh",3,[-28],[0,"68M8Z8h65UJ6+lK5Dlwh41",1,0],[1,-0.0829338803887367,0.000522752990946174,0.0875580385327339],[3,0.08495587007762419,0.9705256106290242,0.21592245734832902,-0.06511552553095584],[1,-25.73835003615101,-170.52439362358245,7.861786092177877]],[7,"Bip001 L Calf",22,[-29],[0,"89ls/mzDld4IVdhgTzq5Ex",1,0],[1,0.19748942553997,-3.55271359939116e-17,0],[3,4.922118022304478e-18,9.343642876090213e-18,-0.14954763812629948,0.9887545215728956],[1,7.514217375301399e-16,1.1965315196306441e-15,-17.20142488908034]],[7,"Bip001 L Foot",23,[-30],[0,"bc3SPL2XZQDrdEEyO7/Oq9",1,0],[1,0.258713036775589,-4.76837147544984e-9,9.53674295089968e-9],[3,-0.05616318334737534,-0.06567072006665509,0.05822480366541575,0.9945566477583566],[1,-6.019468851381316,-7.1829943908609115,7.076374449841523]],[9,"Bip001 L Toe0",24,[[21,"Bip001 L Toe0Nub",-31,[0,"ebetBHEL1X2ZqBjcvSpEVx",1,0],[1,0.0707060396671295,0,9.53674295089968e-9],[3,5.412912895685908e-10,3.183429964082049e-9,0.9999999999999996,-2.9802318834981587e-8],[1,-1,-1,-1],[1,-179.9999996352058,-179.9999999379726,-0.0000034150941776979116]]],[0,"d8m20xgJ9RrZjb3Yd0qONY",1,0],[1,0.155447989702225,0.103071004152298,9.53674295089968e-9],[3,-5.856037355615282e-7,-9.90370794540378e-8,0.38268324228717554,0.923879611243923],[1,-0.00008153527135839017,0.000021489129564643554,44.99997642406279]],[7,"Bip001 R Thigh",3,[-32],[0,"ccmWq3ZYdXspLz3ibaDhK7",1,0],[1,-0.0904542505741119,-0.00373036740347743,-0.0796756520867348],[3,0.01591677401002073,0.9896815990757271,-0.09186538286129947,0.10880137953065148],[1,10.679251957608868,167.3910126189231,0.6597706653157911]],[7,"Bip001 R Calf",26,[-33],[0,"45TW8anD1RdqI/2dyxIfFL",1,0],[1,0.19748942553997,2.38418573772492e-9,0],[3,2.8890281770253315e-17,1.1327692409598235e-17,-0.08985432871304784,0.9959549184634451],[1,3.469856840143414e-15,1.6163779711734653e-15,-10.310453573591994]],[7,"Bip001 R Foot",27,[-34],[0,"61Y7JB9epRzY8sbymS51E6",1,0],[1,0.258713036775589,-4.76837147544984e-9,-3.55271359939116e-17],[3,0.024985302700036037,0.09158240427443604,0.0720129175342248,0.9928758923372599],[1,2.11054412697097,10.383438935898596,8.486490270224298]],[9,"Bip001 R Toe0",28,[[28,"Bip001 R Toe0Nub",-35,[0,"01t9ZMTz5TbYbbGNPUhQ1S",1,0],[1,0.0707060322165489,-9.53674295089968e-9,1.90734859017994e-8],[1,-0.0000018142689982846333,8.004127933608697e-7,9.541664044390557e-15]]],[0,"98s1W6bRVY6IoXtVfld0E7",1,0],[1,0.155447959899902,0.103071019053459,-1.90734859017994e-8],[3,3.1308862704759484e-7,-2.454714598240511e-8,0.38268311946229694,0.9238796621197519],[1,0.00004839827034963136,-0.000023091856738995566,44.99996118972304]],[6,"girl",5,[[14,-36,[1,"91AJC066tYnZE0JNpPhUTy"],[0],[2],1,1,2]],[0,"b1DBlWvypQ34yWKbdSKfOd",1,0],[1,0,-0.000143585202749819,0.0799125656485558],[3,-0.7372773284999806,0,0,0.6755902166845903],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-94.99999859045873,0,0]]],0,[0,6,1,0,0,1,0,-1,5,0,2,2,0,-2,8,0,2,2,0,-1,9,0,-2,22,0,-3,26,0,-1,11,0,-2,12,0,-3,17,0,-2,30,0,-1,15,0,-2,16,0,-1,20,0,-2,21,0,-1,10,0,2,11,0,-1,13,0,-1,14,0,2,15,0,2,16,0,-1,18,0,-1,19,0,2,20,0,2,21,0,-1,23,0,-1,24,0,-1,25,0,2,25,0,-1,27,0,-1,28,0,-1,29,0,2,29,0,0,30,0,9,1,2,2,5,3,2,8,4,2,10,6,2,14,7,2,19,36],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,5,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,11],[46,47,48,23,49,50,51,52,53,54,55,56,57,23]],[[[8,".bin",3273529437,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":70272,"length":15864,"count":3966,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":70272,"count":976,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,58,59,60,61,63,64,65,66]]},"minPosition",8,[1,-0.23703916370868683,-0.24187521636486053,0.000748737424146384],"maxPosition",8,[1,0.23702660202980042,0.12970103323459625,0.18305429816246033]]],-1],0,0,[],[],[]],[[[13,"Skin-4",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,"Skin-8",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,"Skin-0",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,".bin",1355241937,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":2472,"count":618,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":120,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,7]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":11112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":12552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":13992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":15432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":16872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":18312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":19752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":21192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":22632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":24072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":25512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":26952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":28392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":29832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":31272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":32712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":34152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":35592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":37032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":38472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":39912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":41352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":42792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":44232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":45672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":47112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":48552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":49992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":51432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":52872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":54312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":55752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":57192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":58632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":60072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":61512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":62952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":64392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":65832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":67272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":68712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":70152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":71592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":73032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":74472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":75912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":77352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":78792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":80232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":81672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":83112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":84552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":85992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":87432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":88872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":90312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":91752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":93192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":94632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":96072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":97512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":98952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":100392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":101832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":103272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":104712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":106152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":107592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":109032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":110472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":111912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":113352,"length":1440,"stride":4,"count":360}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,0.012138664722442627,-0.10618297755718231,1.7051109075546265],"maxPosition",8,[1,0.05202902853488922,-0.08635807037353516,1.7449402809143066]]],-1],0,0,[],[],[]],[[[12,"Wolf3D_Skin",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.42640143632888794},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[58,8]],[[[8,".bin",3878537555,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":47232,"length":6720,"count":1680,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":47232,"count":656,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]]},"minPosition",8,[1,-0.08158475905656815,-0.12551076710224152,1.6949456930160522],"maxPosition",8,[1,0.08158453553915024,0.0024971181992441416,1.737083911895752]]],-1],0,0,[],[],[]],[[[13,"Skin-5",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,"Skin-2",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,"Skin-6",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[13,"Skin-9",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,".bin",3994070673,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":7416,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7416,"count":103,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":8616,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":9852,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":11088,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":12324,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":13560,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":14796,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":16032,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":17268,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":18504,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":19740,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":20976,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":22212,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":23448,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":24684,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":25920,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":27156,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":28392,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":29628,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":30864,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":32100,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":33336,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":34572,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":35808,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":37044,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":38280,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":39516,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":40752,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":41988,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":43224,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":44460,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":45696,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":46932,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":48168,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":49404,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":50640,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":51876,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":53112,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":54348,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":55584,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":56820,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":58056,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":59292,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":60528,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":61764,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":63000,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":64236,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":65472,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":66708,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":67944,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":69180,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":70416,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":71652,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":72888,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":74124,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":75360,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":76596,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":77832,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":79068,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":80304,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":81540,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":82776,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":84012,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":85248,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":86484,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":87720,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":88956,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":90192,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":91428,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":92664,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":93900,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":95136,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":96372,"length":1236,"stride":4,"count":309}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,-0.027997316792607307,-0.1181945875287056,1.6414155960083008],"maxPosition",8,[1,0.027997085824608803,-0.05109177157282829,1.6777070760726929]]],-1],0,0,[],[],[]],[[[8,".bin",2990900034,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":2472,"count":618,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":120,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,8]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":11112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":12552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":13992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":15432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":16872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":18312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":19752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":21192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":22632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":24072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":25512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":26952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":28392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":29832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":31272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":32712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":34152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":35592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":37032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":38472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":39912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":41352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":42792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":44232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":45672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":47112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":48552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":49992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":51432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":52872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":54312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":55752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":57192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":58632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":60072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":61512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":62952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":64392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":65832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":67272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":68712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":70152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":71592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":73032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":74472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":75912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":77352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":78792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":80232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":81672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":83112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":84552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":85992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":87432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":88872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":90312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":91752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":93192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":94632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":96072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":97512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":98952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":100392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":101832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":103272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":104712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":106152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":107592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":109032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":110472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":111912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":113352,"length":1440,"stride":4,"count":360}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,-0.05215182900428772,-0.1061830222606659,1.7050700187683105],"maxPosition",8,[1,-0.012420041486620903,-0.08635810762643814,1.744981288909912]]],-1],0,0,[],[],[]],[[[12,"Wolf3D_Headwear",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[4,7,3],[59,60,8]],[[[8,".bin",1157411518,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":101952,"length":24048,"count":6012,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":101952,"count":1416,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]]},"minPosition",8,[1,-0.1429332047700882,-0.2916102707386017,1.5616129636764526],"maxPosition",8,[1,0.1429334282875061,0.13243061304092407,1.9339126348495483]]],-1],0,0,[],[],[]],[[[8,".bin",1884139099,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":158472,"length":49128,"count":12282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":158472,"count":2201,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3,4,5,9,33]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":207600,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":234012,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":260424,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":286836,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":313248,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":339660,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":366072,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":392484,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":418896,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":445308,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":471720,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":498132,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":524544,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":550956,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":577368,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":603780,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":630192,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":656604,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":683016,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":709428,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":735840,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":762252,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":788664,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":815076,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":841488,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":867900,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":894312,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":920724,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":947136,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":973548,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":999960,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1026372,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1052784,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1079196,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1105608,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1132020,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1158432,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1184844,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1211256,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1237668,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1264080,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1290492,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1316904,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1343316,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1369728,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1396140,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1422552,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1448964,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1475376,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1501788,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1528200,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1554612,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1581024,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1607436,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1633848,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1660260,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1686672,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1713084,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1739496,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1765908,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1792320,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1818732,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1845144,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1871556,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1897968,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1924380,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1950792,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1977204,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2003616,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2030028,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2056440,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2082852,"length":26412,"stride":4,"count":6603}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,-0.09610742330551147,-0.14264746010303497,1.5201966762542725],"maxPosition",8,[1,0.0957942008972168,0.08721765875816345,1.8326749801635742]]],-1],0,0,[],[],[]],[[[13,"Skin-3",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,"Wolf3D_Teeth",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[61,8]],[[[12,"Wolf3D_Glasses",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.24902911484241486},"albedoScale",8,[1,0.002264291513711214,0.0016754398820921779,0.0018417972605675459]]],11]]],0,0,[0],[3],[8]],[[[13,"Skin-7",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,".bin",4249156328,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":47448,"length":6150,"count":3075,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":99966,"length":6006,"count":3003,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":47448,"count":659,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":53598,"length":46368,"count":644,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,11,12,13,17,21,25,29,35,36,37,38,39,41,42,43,44,45,46,47,49,50,51,53,54,55,62,63,64,65],[0,11,12,13,14,15,17,18,19,20,21,22,23,25,26,27,29,30,31,57,58,59,60]]},"minPosition",8,[1,-0.5314701795578003,-0.148592010140419,0.10462598502635956],"maxPosition",8,[1,0.531463086605072,0.12163252383470535,1.0887292623519897]]],-1],0,0,[],[],[]],[[[12,"Wolf3D_Outfit_Footwear",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[4,7,3],[62,63,8]],[[[12,"Wolf3D_Eye",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645},"mainTexture",6,0]],11]]],0,0,[0,0],[4,3],[64,8]],[[[12,"Wolf3D_Outfit_Bottom",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[4,7,3],[65,66,8]],[[[12,"Wolf3D_Outfit_Top",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[4,7,3],[67,68,8]],[[[12,"Wolf3D_Body",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"mainTexture",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[4,7,3],[69,70,8]],[[[8,".bin",3104663430,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":92376,"length":26064,"count":6516,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":92376,"count":1283,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,9,10,11,12,13,33,34,35,36,37,57,62]]},"minPosition",8,[1,-0.4869753420352936,-0.16988031566143036,0.9415552616119385],"maxPosition",8,[1,0.4764938950538635,0.14323024451732635,1.590885043144226]]],-1],0,0,[],[],[]],[[[13,"Skin-1",1949582377,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.6986770857747615e-9,-0.000052479852456599474,0,-0.00005245238935458474,-0.03245609253644943,-0.9994731545448303,0,-0.0000016975952803477412,0.9994731545448303,-0.03245609253644943,0,0.0000012040451338179992,-1.0189789533615112,0.02305365726351738,1],[7,1,-4.9839396609741016e-8,1.8780806954055151e-7,0,1.9199825374016655e-7,0.10484074056148529,-0.9944890141487122,0,2.9874794194029164e-8,0.9944890737533569,0.1048407331109047,0,-3.028874573374196e-8,-1.1100660562515259,-0.13032495975494385,1],[7,1,-2.640301772771636e-7,2.8271875862628804e-7,0,3.231833716199617e-7,0.16858351230621338,-0.9856875538825989,0,2.125894553728358e-7,0.9856875538825989,0.16858351230621338,0,-2.5826528826655704e-7,-1.229613184928894,-0.2098410427570343,1],[7,1,-4.89610101794824e-7,-1.6023902560391434e-7,0,-1.2312473529618728e-7,0.07488483190536499,-0.9971923828125,0,5.002347052140976e-7,0.9971924424171448,0.0748848244547844,0,-6.422392857530212e-7,-1.3651847839355469,-0.0814710333943367,1],[7,1,-7.067954470585391e-7,2.2818321099293826e-7,0,-1.6151197712588328e-8,-0.3278498649597168,-0.9447299242019653,0,7.425404646710376e-7,0.9447301030158997,-0.327849805355072,0,-0.000001014664462672954,-1.4277360439300537,0.5300164222717285,1],[7,1,1.2150313466463558e-7,-5.128145517119265e-7,0,-5.119235311212833e-7,-0.007222834508866072,-0.9999740123748779,0,-1.252039254495685e-7,0.9999741315841675,-0.007222833577543497,0,4.0334188611268473e-7,-1.6384618282318115,0.004267293959856033,1],[7,1,-4.765117580518563e-7,1.0069086897601665e-7,0,1.006912455636666e-7,8.111826446111081e-7,-1.0000001192092896,0,4.765115590998903e-7,1.000000238418579,8.111825877676893e-7,0,-7.037827458589163e-7,-1.864519715309143,-0.04652508348226547,1],[7,1,2.3028365880861656e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-7.566999329355895e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-7.566998192487517e-7,0,-0.03215799853205681,-1.7250663042068481,-0.08635711669921875,1],[7,1,2.3028137174918584e-9,-3.7282933362803305e-7,0,-3.728292767846142e-7,-8.18167222860211e-7,-1.0000001192092896,0,-2.3031181406452106e-9,1.000000238418579,-8.181671091733733e-7,0,0.031616102904081345,-1.7250113487243652,-0.08635707944631577,1],[7,-0.009019887074828148,0.999172568321228,-0.0396631695330143,0,0.9963064193725586,0.005592499393969774,-0.08568904548883438,0,-0.08539631217718124,-0.04028956592082977,-0.995532214641571,0,0.09152312576770782,0.013438183814287186,1.5061075687408447,1],[7,-0.06579359620809555,0.504006564617157,-0.8611904382705688,0,0.9966806769371033,0.0746653601527214,-0.032447390258312225,0,0.047947388142347336,-0.8604665994644165,-0.5072460174560547,0,-0.09947891533374786,1.2067310810089111,0.9065102934837341,1],[7,0.21386124193668365,0.5553630590438843,-0.803638756275177,0,0.9327715635299683,-0.3604671359062195,-0.0008790544234216213,0,-0.2901735305786133,-0.7494232654571533,-0.5951167345046997,0,0.2429688572883606,0.7920516729354858,0.9973105192184448,1],[7,0.2580164670944214,0.48827874660491943,-0.8336737751960754,0,0.941437840461731,-0.3209437131881714,0.10339351743459702,0,-0.21707744896411896,-0.8115289807319641,-0.5424927473068237,0,0.14526426792144775,0.637843668460846,0.957811176776886,1],[7,0.39875856041908264,-0.14330588281154633,-0.9057899713516235,0,0.39634546637535095,-0.8637714385986328,0.3111424446105957,0,-0.8269838690757751,-0.4830763339996338,-0.2876375913619995,0,0.7178323864936829,0.5124614834785461,0.7314994931221008,1],[7,0.3077276945114136,-0.0574287548661232,-0.949739933013916,0,0.8018345832824707,-0.5217052102088928,0.2913509011268616,0,-0.5122161507606506,-0.8511908650398254,-0.11449477821588516,0,0.47617897391319275,0.8486997485160828,0.5703088641166687,1],[7,0.26730087399482727,-0.02720850333571434,-0.9632289409637451,0,0.8916085362434387,-0.37215906381607056,0.2579382359981537,0,-0.3654925227165222,-0.92777019739151,-0.07521910220384598,0,0.3573702871799469,0.8999767899513245,0.5327278971672058,1],[7,0.3670903444290161,-0.04739483445882797,-0.9289772510528564,0,0.8642422556877136,-0.351951539516449,0.35946592688560486,0,-0.3439917266368866,-0.9348177909851074,-0.08823737502098083,0,0.28875672817230225,0.8831664323806763,0.5439130067825317,1],[7,0.22240202128887177,0.2925547957420349,-0.9300264716148376,0,0.8965864777565002,-0.43608367443084717,0.07722817361354828,0,-0.38297587633132935,-0.8510247468948364,-0.35928648710250854,0,0.35996225476264954,0.6654922366142273,0.8264122605323792,1],[7,0.2214442491531372,0.099857859313488,-0.9700470566749573,0,0.8748293519020081,-0.4598448574542999,0.15237073600292206,0,-0.4308556020259857,-0.8823671340942383,-0.18918848037719727,0,0.4040406346321106,0.7459267973899841,0.6915808916091919,1],[7,0.07046575099229813,-0.0609595961868763,-0.9956498146057129,0,0.911707878112793,-0.4010656774044037,0.08908047527074814,0,-0.4047512710094452,-0.9140188694000244,0.027315940707921982,0,0.46126407384872437,0.8368227481842041,0.49337443709373474,1],[7,0.18389947712421417,-0.14748485386371613,-0.9718174338340759,0,0.8992709517478943,-0.37392497062683105,0.2269187867641449,0,-0.39685383439064026,-0.9156575202941895,0.06386421620845795,0,0.39474087953567505,0.8522632718086243,0.46775346994400024,1],[7,0.15477551519870758,0.4147646129131317,-0.8966689705848694,0,0.9384095072746277,-0.3455188572406769,0.0021567028015851974,0,-0.3089213967323303,-0.841776430606842,-0.44269680976867676,0,0.2968135178089142,0.6025421023368835,0.8864853978157043,1],[7,0.1614459902048111,0.160179004073143,-0.9737956523895264,0,0.9061683416366577,-0.4148940443992615,0.0819883644580841,0,-0.3908891975879669,-0.8956594467163086,-0.21213208138942719,0,0.36862459778785706,0.7339514493942261,0.7137652039527893,1],[7,0.11962811648845673,-0.22759957611560822,-0.9663787484169006,0,0.9431490898132324,-0.27796798944473267,0.182218998670578,0,-0.3100952208042145,-0.9332377314567566,0.18140751123428345,0,0.3198978304862976,0.9502896666526794,0.35766497254371643,1],[7,0.1634715050458908,-0.27274826169013977,-0.9480958580970764,0,0.9346158504486084,-0.2648770213127136,0.2373470515012741,0,-0.3158647119998932,-0.9249049425125122,0.2116149365901947,0,0.30145367980003357,0.9330779910087585,0.3275764584541321,1],[7,0.11005980521440506,0.3973017632961273,-0.9110643267631531,0,0.9792358875274658,-0.20035217702388763,0.030924534425139427,0,-0.17024733126163483,-0.8955504298210144,-0.4111027717590332,0,0.1591538041830063,0.6761474013328552,0.8611114025115967,1],[7,0.0983794704079628,0.02587071619927883,-0.9948126673698425,0,0.9592922925949097,-0.2683923542499542,0.08788703382015228,0,-0.2647264301776886,-0.9629624485969543,-0.05122186243534088,0,0.2537347078323364,0.8857545256614685,0.5658363103866577,1],[7,0.08680311590433121,-0.052251096814870834,-0.994854211807251,0,0.9593551754951477,-0.264782190322876,0.09761244803667068,0,-0.2685200870037079,-0.9628915190696716,0.027143435552716255,0,0.263180136680603,0.8900696039199829,0.4948432445526123,1],[7,0.0703895166516304,-0.0689673200249672,-0.9951326251029968,0,0.9480160474777222,-0.30574271082878113,0.08824615180492401,0,-0.31034061312675476,-0.9496132135391235,0.043861024081707,0,0.3078305125236511,0.8541062474250793,0.47949808835983276,1],[7,-0.0029656447004526854,0.34980320930480957,-0.9368185997009277,0,0.9999840259552002,-0.0034907208755612373,-0.004469021689146757,0,-0.004833450075238943,-0.9368168115615845,-0.34978723526000977,0,0.028183389455080032,0.7465050220489502,0.8067538142204285,1],[7,-0.37627631425857544,0.1406356394290924,-0.9157717823982239,0,0.9019015431404114,-0.1706824153661728,-0.39678898453712463,0,-0.2121087908744812,-0.9752381443977356,-0.06261573731899261,0,0.4123937487602234,0.8569091558456421,0.5131425261497498,1],[7,-0.39749714732170105,-0.0762028843164444,-0.9144337773323059,0,0.8871783018112183,-0.2864059805870056,-0.36178213357925415,0,-0.2343304604291916,-0.955073356628418,0.18145106732845306,0,0.4435303807258606,0.9228095412254333,0.2855399250984192,1],[7,-0.1976185441017151,-0.3395463526248932,-0.9195948839187622,0,0.9420007467269897,-0.32536375522613525,-0.08229788392782211,0,-0.2712589502334595,-0.8825228810310364,0.38415077328681946,0,0.3778228163719177,0.9624620676040649,0.113374724984169,1],[7,-0.00902056135237217,-0.9991728663444519,0.039651475846767426,0,-0.9963060021400452,0.00559408450499177,-0.08569125086069107,0,0.08539853990077972,-0.040277980268001556,-0.9955325722694397,0,-0.09152646362781525,0.013420521281659603,1.5061075687408447,1],[7,-0.06579487770795822,-0.5040203928947449,0.8611823916435242,0,-0.9966804385185242,0.07466655969619751,-0.032447297126054764,0,-0.04794739559292793,-0.8604585528373718,-0.5072599649429321,0,0.09947898238897324,1.206717610359192,0.9065309166908264,1],[7,0.21386121213436127,-0.5553737878799438,0.8036314845085144,0,-0.9327720999717712,-0.36046552658081055,-0.0008825882687233388,0,0.2901715040206909,-0.7494162321090698,-0.595126748085022,0,-0.2429661750793457,0.7920405268669128,0.9973267316818237,1],[7,0.25801050662994385,-0.4882860481739044,0.8336711525917053,0,-0.9414389729499817,-0.3209422528743744,0.10338564217090607,0,0.21707844734191895,-0.8115251064300537,-0.542497992515564,0,-0.14526686072349548,0.63783860206604,0.9578239321708679,1],[7,0.3987662196159363,0.1432998776435852,0.9057876467704773,0,-0.3963458836078644,-0.8637714982032776,0.31114116311073303,0,0.8269799947738647,-0.4830775260925293,-0.2876465916633606,0,-0.7178264856338501,0.5124646425247192,0.731514573097229,1],[7,0.3077581524848938,0.0574018768966198,0.9497317671775818,0,-0.8018279671669006,-0.5217087864875793,0.2913624942302704,0,0.5122080445289612,-0.8511905074119568,-0.11453370749950409,0,-0.476156085729599,0.8486928343772888,0.5703529119491577,1],[7,0.26729944348335266,0.02719609998166561,0.9632298350334167,0,-0.891610324382782,-0.3721585273742676,0.25793248414993286,0,0.36548882722854614,-0.9277708530426025,-0.07522943615913391,0,-0.3573664128780365,0.8999779224395752,0.5327450037002563,1],[7,0.3670729398727417,0.04739539697766304,0.9289841055870056,0,-0.8642482757568359,-0.3519526720046997,0.3594498634338379,0,0.3439946174621582,-0.9348170757293701,-0.0882309153676033,0,-0.28876614570617676,0.8831722140312195,0.5439148545265198,1],[7,0.22240573167800903,-0.2925678789615631,0.9300215244293213,0,-0.896586000919342,-0.4360845983028412,0.07722572982311249,0,0.38297414779663086,-0.8510197401046753,-0.35929998755455017,0,-0.3599582612514496,0.6654843091964722,0.8264316320419312,1],[7,0.221446692943573,-0.09986754506826401,0.9700454473495483,0,-0.8748273849487305,-0.45984891057014465,0.15236783027648926,0,0.43085765838623047,-0.8823636174201965,-0.18919894099235535,0,-0.4040411412715912,0.7459233999252319,0.6915982365608215,1],[7,0.07048431038856506,0.060935281217098236,0.9956502318382263,0,-0.9117053151130676,-0.40106967091560364,0.08908776938915253,0,0.404753714799881,-0.914018452167511,0.027285907417535782,0,-0.4612576961517334,0.8368162512779236,0.4934113323688507,1],[7,0.18389776349067688,0.14747832715511322,0.9718191027641296,0,-0.8992750644683838,-0.3739176094532013,0.2269141674041748,0,0.39684510231018066,-0.9156613945960999,0.06386098265647888,0,-0.3947347402572632,0.8522717952728271,0.4677647352218628,1],[7,0.15477536618709564,-0.4147754907608032,0.8966639041900635,0,-0.9384087920188904,-0.345520555973053,0.0021515118423849344,0,0.30892327427864075,-0.8417704105377197,-0.44270697236061096,0,-0.29681503772735596,0.6025327444076538,0.8865011930465698,1],[7,0.1614522486925125,-0.1601923555135727,0.9737926721572876,0,-0.9061682820320129,-0.414894163608551,0.08198880404233932,0,0.39088669419288635,-0.8956573009490967,-0.21214677393436432,0,-0.3686192035675049,0.7339469790458679,0.7137861847877502,1],[7,0.11962303519248962,0.22759386897087097,0.9663806557655334,0,-0.9431513547897339,-0.27796468138694763,0.18221156299114227,0,0.31008976697921753,-0.9332401752471924,0.1814044862985611,0,-0.3198956251144409,0.9502968192100525,0.35767436027526855,1],[7,0.16348330676555634,0.27272531390190125,0.9481003880500793,0,-0.934611439704895,-0.2648867070674896,0.23735322058200836,0,0.3158712089061737,-0.9249089360237122,0.2115875780582428,0,-0.30145227909088135,0.9330765604972839,0.32760995626449585,1],[7,0.11006210744380951,-0.39731675386428833,0.9110577702522278,0,-0.9792355298995972,-0.20035351812839508,0.030923357233405113,0,0.1702471822500229,-0.8955435752868652,-0.4111180305480957,0,-0.1591515839099884,0.6761361360549927,0.8611319661140442,1],[7,0.09838977456092834,-0.02589067816734314,0.9948112964630127,0,-0.9592920541763306,-0.26839128136634827,0.08789177983999252,0,0.264723002910614,-0.9629623293876648,-0.051243677735328674,0,-0.2537260055541992,0.8857499957084656,0.5658644437789917,1],[7,0.08679961413145065,0.052239492535591125,0.9948553442955017,0,-0.9593554139137268,-0.2647832930088043,0.09760600328445435,0,0.2685198485851288,-0.9628921747207642,0.027133146300911903,0,-0.2631815969944,0.8900710344314575,0.4948609471321106,1],[7,0.0703708752989769,0.06896942108869553,0.9951337575912476,0,-0.9480184316635132,-0.30573949217796326,0.08822891861200333,0,0.3103366792201996,-0.9496142268180847,0.04386911913752556,0,-0.30783718824386597,0.8541152477264404,0.4794984459877014,1],[7,-0.0029679015278816223,-0.3498092591762543,0.9368163347244263,0,-0.9999839067459106,-0.003490125061944127,-0.00447124196216464,0,0.004833687096834183,-0.936814546585083,-0.34979328513145447,0,-0.028183624148368835,0.7465032935142517,0.806767463684082,1],[7,-0.37627336382865906,-0.14065279066562653,0.9157705307006836,0,-0.90190190076828,-0.1706790328025818,-0.3967895805835724,0,0.21211235225200653,-0.9752362966537476,-0.06263303756713867,0,-0.41239896416664124,0.8569043874740601,0.5131663084030151,1],[7,-0.3974917531013489,0.0761876329779625,0.914437472820282,0,-0.8871790170669556,-0.28640565276145935,-0.36178073287010193,0,0.23433680832386017,-0.9550744891166687,0.1814359724521637,0,-0.44353729486465454,0.9228100776672363,0.2855626940727234,1],[7,-0.19760571420192719,0.3395273983478546,0.919605016708374,0,-0.9420019388198853,-0.32536181807518005,-0.08229157328605652,0,0.27126407623291016,-0.8825308680534363,0.38412895798683167,0,-0.3778233230113983,0.9624691009521484,0.113405242562294,1],[7,-0.9978559613227844,0.06581030040979385,-0.003539265599101782,0,0.004409161861985922,0.013075832277536392,-0.9999073147773743,0,-0.06575972586870193,-0.9977465271949768,-0.013337597250938416,0,0.16253992915153503,1.0159941911697388,0.007098747882992029,1],[7,-0.9982229471206665,0.0600445456802845,0.0023231052327901125,0,0.0034753757063299417,0.09628327190876007,-0.9953504204750061,0,-0.05999067798256874,-0.993541419506073,-0.09631819278001785,0,0.15931108593940735,0.55623459815979,0.05344593524932861,1],[7,-0.9965488314628601,0.01694589853286743,-0.0816207230091095,0,0.032376740127801895,-0.8235841393470764,-0.5662723779678345,0,-0.0768195390701294,-0.5669441223144531,0.8201687335968018,0,0.1599722057580948,0.10350336879491806,-0.06753014028072357,1],[7,-0.99952632188797,0.03145633637905121,-0.004348882474005222,0,-0.031148871406912804,-0.9977987408638,-0.05857984721660614,0,-0.006182193290442228,-0.05841495469212532,0.9982733726501465,0,0.15233950316905975,-0.08299728482961655,-0.04595421999692917,1],[7,-0.018291784450411797,0.04691148176789284,-0.9987624883651733,0,0.022932715713977814,-0.9986178278923035,-0.04732746258378029,0,-0.999569833278656,-0.02376934140920639,0.017191197723150253,0,0.0431707464158535,-0.18591152131557465,0.14846941828727722,1],[7,-0.9978987574577332,-0.0658152624964714,0.003582509234547615,0,-0.004452747292816639,0.013075892813503742,-0.9999109506607056,0,0.06576696783304214,-0.9977462291717529,-0.01334057841449976,0,-0.1625516563653946,1.0159934759140015,0.007105931174010038,1],[7,-0.9982661604881287,-0.060051556676626205,-0.00228210911154747,0,-0.0035171580966562033,0.09628433734178543,-0.9953536987304688,0,0.05999630317091942,-0.9935409426689148,-0.09632207453250885,0,-0.15932059288024902,0.5562337636947632,0.053453367203474045,1],[7,-0.9965901374816895,-0.01690787635743618,0.08164098858833313,0,-0.03242066130042076,-0.8235873579978943,-0.5662693381309509,0,0.0768178328871727,-0.5669448375701904,0.8201713562011719,0,-0.15997867286205292,0.1035093367099762,-0.06752703338861465,1],[7,-0.9995712041854858,-0.03143244981765747,0.004383597988635302,0,0.031124277040362358,-0.9978026151657104,-0.05858029052615166,0,0.006215721368789673,-0.058414652943611145,0.9982731938362122,0,-0.15234985947608948,-0.08299385756254196,-0.04594874754548073,1],[7,-0.018333496525883675,-0.046889398247003555,0.9988069534301758,0,-0.02293115109205246,-0.9986214637756348,-0.04730832576751709,0,0.9995689392089844,-0.023769430816173553,0.01723421923816204,0,-0.04317694529891014,-0.18590885400772095,0.148478165268898,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[8,".bin",3668737455,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":39384,"length":9792,"count":2448,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":39384,"count":547,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,57,62]]},"minPosition",8,[1,-0.19385430216789246,-0.14851582050323486,0.6017283797264099],"maxPosition",8,[1,0.19429416954517365,0.1231774091720581,1.090359091758728]]],-1],0,0,[],[],[]],[[[32,"character_01"],[25,"character_01",[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13],[[71,true,-2,[1,"28WaIviy1Eg6UFd7dH4eqm"],[31,32,33,34],35]],[0,"4ea0aEdD9PHI8f0RIFCG/S",-1,0]],[16,"LeftHand",[-14,-15,-16,-17,-18],[0,"03MVpTjTNBc4beUpjQ3j0T",1,0],[1,1.0058283805847168e-7,0.2519720494747162,-1.1213160178158432e-7],[3,0.046227536969308036,0.03871766094721165,-0.018517523953414678,0.9980085464880364],[1,5.379788588991313,4.533226193225027,-1.9129830614404952]],[16,"RightHand",[-19,-20,-21,-22,-23],[0,"3ce4HT7qlGg5mpi4qZlsKJ",1,0],[1,-5.587935447692871e-8,0.25197187066078186,-5.326910468284041e-8],[3,0.04622977287988344,-0.03871455094651202,0.018517587578319585,0.9980085623854955],[1,5.380039349622848,-4.532874415956127,1.9129969345194864]],[16,"Hips",[-24,-25,-26],[0,"53nFkazwFK54vTI7ze2R9E",1,0],[1,5.509842256924691e-13,-0.010030562989413738,1.0191903114318848],[3,0.7184901289532876,-0.00001825289304667898,-0.000018851147751902353,0.6955371549444029],[1,91.8599259964925,0.00009726511833665423,-0.003005300820545087]],[16,"Spine2",[-27,-28,-29],[0,"c3kx8Dw4JMA6y8z10s0HAk",1,0],[1,3.6770586575585185e-13,0.12180623412132263,-5.960465898624534e-8],[3,0.04720118315860992,-2.390183363704975e-7,1.1555484860778276e-7,0.998885402990932],[1,5.410867627738003,-0.00002798397523477436,0.000011934035154324021]],[47,"Head",[[10,"HeadTop_End",-30,[0,"f3gPOC4GlNqac3hT/YhGBs",1,0],[1,1.3714718249957514e-8,0.226345032453537,0.03732242062687874],[3,-0.0036118453366977303,3.0739183559528045e-7,2.997497781393078e-7,0.9999934772652667],[1,-0.4138878879981828,0.000035348342445509315,0.00003422134486565895]],[10,"LeftEye",-31,[0,"90klPKNUdF2JtOlZb6NGa/",1,0],[1,0.032158199697732925,0.0871831625699997,0.07816357165575027],[3,-0.0036110912080977073,6.9768587516214e-8,6.119882414877135e-8,0.9999934799888838],[1,-0.41380147065253625,0.000008020163196153835,0.000006983952664419626]],[10,"RightEye",-32,[0,"377+nrHpxMuqfbM7Q7Fi2Q",1,0],[1,-0.03161590173840523,0.08712819963693619,0.07816401869058609],[3,-0.003611060474854217,6.976858752395704e-8,6.11988170501361e-8,0.9999934800998648],[1,-0.41379794885928894,0.000008020162979462802,0.000006983952097465278]]],[0,"4d0veaulBH3Kqjc3tYYEyp",1,0],[1,-2.228453532815422e-12,0.12263805419206619,-6.286431641910895e-8],[3,-0.16267573380270822,-3.17957320940543e-7,-3.854813889504832e-7,0.9866795861025506],[1,-18.724479288654795,-0.00004313575392249689,-0.00003765738486563157]],[26,"Armature",1,[4],[0,"93BMIaeD1HQZHgJIe8Ep6c",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[7,"Spine",4,[-33],[0,"2bD1qs/SlC+7zeY1wQZHZQ",1,0],[1,1.1727840920627841e-12,0.09847308695316315,1.1175900205273592e-8],[3,-0.06869362998013995,0.000026273531897969778,0.0000018180818304790231,0.9976378022642024],[1,-7.877914197539602,0.003017924468180414,0.0000010270707621257369]],[7,"Spine1",8,[5],[0,"ebvkuttC5IrIRpWbQ+f5Qd",1,0],[1,1.7751772274365862e-13,0.13049721717834473,-5.471521458133566e-9],[3,-0.032173764487629965,5.248111720127566e-8,9.947095399325266e-8,0.9994822904277403],[1,-3.6874782019319436,0.0000063775132638249574,0.00001119914098863051]],[7,"Neck",5,[6],[0,"2bv7rEo6RGvIWOUkX5KSuR",1,0],[1,7.767120280277595e-13,0.1555749773979187,1.8471335572201042e-14],[3,0.20306864835005192,6.868846623011464e-8,1.1322870361427157e-7,0.9791645030623125],[1,23.432925742235824,0.000005072293156648373,0.000014303089363662654]],[7,"LeftShoulder",5,[-34],[0,"d2RpZXSGBPnpOqt3ydlQ7N",1,0],[1,0.04713555797934532,0.14114795625209808,-0.006255079060792923],[3,-0.5049362734086694,-0.4894796268642924,0.514703507647851,-0.4904379205322087],[1,92.27884679404256,90.51684437034933,-0.6043784673092507]],[29,"LeftArm",11,[-35],[0,"77syV+WkxM9o7WGVvck4iu",1,0],[1,-4.773028194904327e-9,0.11889555305242538,1.4295801520347595e-7],[3,0.4766819949386807,0.04260025062840524,-0.05861913260641121,0.8760840665370812],[1,1.000000238418579,0.9999989867210388,0.9999997019767761],[1,57.33557388281964,7.514700377890196,-3.5601883535489756]],[7,"LeftForeArm",12,[2],[0,"3bhCKTXQ9MJ5+Ov6C5R1fo",1,0],[1,-5.587935447692871e-9,0.28512895107269287,1.4528632164001465e-7],[3,-0.04964989865389723,0.02328785355021475,0.2204811603717856,0.9738483564507323],[1,-6.79436038887391,4.265429003936555,25.284796700217175]],[7,"LeftHandThumb1",2,[-36],[0,"c0rUuVxwdBGoBs5MGldcIF",1,0],[1,-0.03235587477684021,0.02635164000093937,0.005173046141862869],[3,0.16801550586907602,-0.009932544778751105,0.4148870310384995,0.8941705015363881],[1,27.2546679283364,-13.483174294800232,47.61414996588721]],[7,"LeftHandThumb2",14,[-37],[0,"39b6SwZ+BHM4uTeuSduJyF",1,0],[1,2.0489096641540527e-7,0.04138261079788208,-1.862645149230957e-8],[3,0.05050686770813828,-0.07432705199242433,-0.24984426915049798,0.9641070411676713],[1,3.9611759029276494,-7.7813117192358146,-29.292039955736662]],[9,"LeftHandThumb3",15,[[10,"LeftHandThumb4",-38,[0,"6b+C1SsGxEc7Uhb7CvuUJo",1,0],[1,-8.940696716308594e-8,0.035284921526908875,-6.705522537231445e-8],[3,0.012975557557078342,0.0523858623104236,-0.006929105998848398,0.9985185746024623],[1,1.5265813742167316,6.015902559542886,-0.7149673551415852]]],[0,"5dUp/j4GVGhLRAfpTZLzEd",1,0],[1,1.4901161193847656e-8,0.03048698790371418,-7.078051567077637e-8],[3,0.009753978843979591,-0.024801047602185444,-0.08479567645670866,0.996041897305929],[1,0.8851389218284139,-2.777174616620407,-9.753162984243321]],[7,"LeftHandIndex1",2,[-39],[0,"6cOJHRtMVNLYv25BEUZUwn",1,0],[1,-0.03534645587205887,0.09745340794324875,-0.006952026858925819],[3,0.09073006174878233,-0.05149075282871041,0.07105830910499526,0.992001751498118],[1,10.892731104636196,-6.6648861263890815,7.5641647676560915]],[7,"LeftHandIndex2",17,[-40],[0,"2fanuoSZJGqrYG+rlNN9cB",1,0],[1,-8.195638656616211e-8,0.04467838257551193,3.632158041000366e-8],[3,0.09493002064485795,-0.005799516894355465,0.025652534635479826,0.9951364751886721],[1,10.921899489928686,-0.9416143081191736,2.863370852916143]],[9,"LeftHandIndex3",18,[[10,"LeftHandIndex4",-41,[0,"48ke/nVBBOqbeNlphx4Su5",1,0],[1,7.078051567077637e-8,0.033838603645563126,1.7601996660232544e-7],[3,0.044783997040769206,0.05674668616886612,-0.007132835488710462,0.9973581753190754],[1,5.171929928494599,6.5365597564702815,-0.5239942090696968]]],[0,"7a9S5I/DxDz4XbqUBQZqRS",1,0],[1,-3.725290298461914e-8,0.02834528312087059,1.043081283569336e-7],[3,0.08442326513517324,-0.07587174961952273,-0.021271103686664933,0.9933094835254217],[1,9.48207769434338,-8.47398353314705,-3.156775733138609]],[7,"LeftHandMiddle1",2,[-42],[0,"214cRjZrdJW4M9WaWTyUmK",1,0],[1,-0.009198933839797974,0.10019732266664505,-0.0034842737950384617],[3,0.038724201881220895,-0.06741337342115258,0.015206184862644976,0.99685738459148],[1,4.547191828157759,-7.7946723574757675,1.4380307954661444]],[7,"LeftHandMiddle2",20,[-43],[0,"63TIZPnoFOlY/REQgiYhvJ",1,0],[1,-4.470348358154297e-8,0.0456978976726532,4.221510607749224e-8],[3,0.12757802171115476,-0.009710128542046064,0.04308576191380521,0.9908446795034386],[1,14.74591414084833,-1.7386493889871621,4.755564817138886]],[9,"LeftHandMiddle3",21,[[10,"LeftHandMiddle4",-44,[0,"58sSN3lkZEJrvJ7DzTt1pC",1,0],[1,-1.1175870895385742e-8,0.03456218168139458,-5.21540641784668e-8],[3,0.023813796694672415,0.022458286516184943,-0.0016469061052174828,0.9994627637656253],[1,2.732675055917267,2.577517300099389,-0.12733473318378935]]],[0,"cebiBRvqpMaJsIBRf+fKFf",1,0],[1,-8.195638656616211e-8,0.03540719673037529,5.681067705154419e-8],[3,0.2018241997571298,-0.022598409647174942,-0.043592441097771426,0.9781901672747229],[1,23.243346736127073,-1.5319545462020552,-5.417086791446478]],[7,"LeftHandRing1",2,[-45],[0,"53uSwwJv1JbabtGh+alWUf",1,0],[1,0.0154217928647995,0.0956038385629654,0.002230184618383646],[3,0.06409981735444614,-0.054930153279833714,-0.05797330189358337,0.9947426742345662],[1,7.0118292971761305,-5.890173770560517,-7.029424877760441]],[7,"LeftHandRing2",23,[-46],[0,"4dY3mmYGdN2aR0WGSaVoKa",1,0],[1,1.4901161193847656e-8,0.04189956933259964,3.841705620288849e-8],[3,0.18622797829795387,-0.016195749952871985,0.045856472356469405,0.9813022071337358],[1,21.609440076214995,-2.81082871270137,4.816563382506105]],[9,"LeftHandRing3",24,[[10,"LeftHandRing4",-47,[0,"d6BQeyF5JKNpqgA/VJ8dEC",1,0],[1,6.705522537231445e-8,0.029813077300786972,7.962808012962341e-8],[3,0.006650631239894568,-0.0068984864421469,0.022116612389894996,0.9997094755204202],[1,0.780152219911219,-0.8079476675102355,2.5292047376311144]]],[0,"8dm0MtNxBIeJU/01LhqXrj",1,0],[1,-4.0978193283081055e-8,0.03616305813193321,-4.1443854570388794e-8],[3,0.039056615203583306,-0.00578854809045731,0.0018959479039353565,0.9992184340280102],[1,4.477900161141372,-0.6713048444183151,0.191183193004706]],[7,"LeftHandPinky1",2,[-48],[0,"c95WZYBApLwqimEPb1lOeY",1,0],[1,0.03913147747516632,0.08981309831142426,0.010544423013925552],[3,0.09903808559336903,-0.07101607233906677,-0.15525273784609048,0.9803289052470228],[1,10.461981668076447,-6.571610665046511,-18.570064645952925]],[7,"LeftHandPinky2",26,[-49],[0,"eey/Ggmp1CbrA3nd9qagwf",1,0],[1,1.2689270079135895e-8,0.028152232989668846,-5.005131242796779e-8],[3,0.12148245162022722,-0.2108284785576242,0.05947557708495978,0.9681198388153337],[1,15.1193810848196,-25.057745120696648,3.6657088821902843]],[9,"LeftHandPinky3",27,[[10,"LeftHandPinky4",-50,[0,"09MiNJyqdFO5g20pfBCvdQ",1,0],[1,1.3783574104309082e-7,0.026324335485696793,-6.51925802230835e-9],[3,0.13740269780670178,0.10453168257817969,-0.012381470708943595,0.9849062519630477],[1,15.857671315270188,12.082053069652618,0.24847507448983328]]],[0,"ddsPwMbphMJI6L2nrhFTBL",1,0],[1,4.0978193283081055e-8,0.02237614244222641,6.612390279769897e-8],[3,0.122705243173585,-0.011933543684893879,0.012157879734696923,0.992296931262608],[1,14.114771776886649,-1.5284260516608594,1.214752174978579]],[7,"RightShoulder",5,[-51],[0,"fajF6JxjNF7ZdeVnw5mfFS",1,0],[1,-0.04713545739650726,0.14114800095558167,-0.0062551312148571014],[3,0.504932122442174,-0.48948277681321095,0.5147007876060316,0.4904419049867178],[1,92.2780449524505,-90.5168768910196,0.6045111824177802]],[7,"RightArm",29,[-52],[0,"97xf37kKlBBa52xvPQeB6p",1,0],[1,-7.2177499532699585e-9,0.11889566481113434,-1.3457611203193665e-7],[3,0.4766805518458281,-0.042601876393999406,0.058619414120903705,0.8760847538382284],[1,57.33539270354833,-7.5148740567203,3.5601393771175602]],[7,"RightForeArm",30,[3],[0,"9aJ28Qt55FtbW+vDBtppRs",1,0],[1,-1.862645149230957e-9,0.285128116607666,-7.136259227991104e-8],[3,-0.04964862735232156,-0.023285763203838704,-0.220480962315485,0.9738485160898911],[1,-6.794143804281178,-4.265133791930557,-25.284793621782022]],[7,"RightHandThumb1",3,[-53],[0,"8d1zVB9xRCOIOuNKbcegxa",1,0],[1,0.03235580772161484,0.02635190263390541,0.005173700861632824],[3,0.16801641832709707,0.00992877219716397,-0.4148867118240062,0.8941705200950515],[1,27.254557938925526,13.482656951309309,-47.61420896159904]],[7,"RightHandThumb2",32,[-54],[0,"73iqObYDBPeIiKWvs7axvx",1,0],[1,-2.60770320892334e-8,0.041382454335689545,-1.1175870895385742e-8],[3,0.050501633067006245,0.07431122606416254,0.24984524961802415,0.9641082812535703],[1,3.961030975728304,7.779468096494993,29.292048731983787]],[9,"RightHandThumb3",33,[[10,"RightHandThumb4",-55,[0,"efOJba4b5Cq7Gw6HzpU24c",1,0],[1,-3.725290298461914e-8,0.03528479486703873,2.9802322387695312e-8],[3,0.01298117948055561,-0.052377363056045394,0.006926186548303687,0.9985189676508338],[1,1.5272011086834096,-6.014926626551101,0.7146124853408734]]],[0,"486l/6cbdNwIpg9svXfOt6",1,0],[1,-1.1175870895385742e-7,0.03048655390739441,-2.9802322387695312e-8],[3,0.009762840269425274,0.024816036030987053,0.08479530298198505,0.9960414689649101],[1,0.8860180868723911,2.77882417194652,9.753158075758698]],[7,"RightHandIndex1",3,[-56],[0,"fa4ftyD9BCU5WOHE3P1aZf",1,0],[1,0.03534628450870514,0.0974540263414383,-0.006951638497412205],[3,0.09072732109947476,0.05148661841728746,-0.07105880175519581,0.9920021814608985],[1,10.892387113244697,6.664395766224436,-7.564284467091993]],[7,"RightHandIndex2",35,[-57],[0,"73n/pSC9ZCjK8ACvfkfvJv",1,0],[1,5.960464477539063e-8,0.04467817768454552,1.0244548320770264e-8],[3,0.09493152194732056,0.005800872662609062,-0.02565440201544051,0.9951362759312656],[1,10.922079085589363,0.9417939169728827,-2.863567711942252]],[9,"RightHandIndex3",36,[[10,"RightHandIndex4",-58,[0,"52RqEfHvFGEaYaJTq0Z0gz",1,0],[1,-2.60770320892334e-8,0.03383859246969223,-7.264316082000732e-8],[3,0.0447936093430264,-0.056736033173348625,0.007137271545880368,0.9973583179863983],[1,5.1730544109631635,-6.535366507521548,0.5244935140971395]]],[0,"a2WeQrodpG1r6m9MDiI+xC",1,0],[1,-1.4901161193847656e-8,0.02834554761648178,2.0489096641540527e-8],[3,0.08441646997480176,0.07586347181703496,0.02127205544012176,0.9933106729005844],[1,9.48131584237525,8.473047155614694,3.1567477696276103]],[7,"RightHandMiddle1",3,[-59],[0,"5cFEWKOERM6Ih7VEb0h7tZ",1,0],[1,0.009198755025863647,0.10019804537296295,-0.0034836963750422],[3,0.038721968124265545,0.06741119286825234,-0.015207425940863283,0.9968575998892297],[1,4.546942880401544,7.794424758269008,-1.438199925433909]],[7,"RightHandMiddle2",38,[-60],[0,"98OZWnOLBB6aCGI+eBOHUZ",1,0],[1,5.21540641784668e-8,0.04569770395755768,6.00994098931551e-8],[3,0.12757746704281794,0.009707049336556672,-0.04308457987374615,0.9908448324905464],[1,14.745832044484796,1.738278249998673,-4.7554766903830545]],[9,"RightHandMiddle3",39,[[10,"RightHandMiddle4",-61,[0,"27RbIE6/tJOYvFHODuW2OF",1,0],[1,-6.332993507385254e-8,0.03456255793571472,-7.450580596923828e-9],[3,0.023804018202117753,-0.022468253902345157,0.001642266050613291,0.9994627803206242],[1,2.731543759706006,-2.5786454966110215,0.1268012863618828]]],[0,"44CsHUyUhJBZdjoO+/ebft",1,0],[1,5.21540641784668e-8,0.03540736809372902,-4.563480615615845e-8],[3,0.20182811810326254,0.022603712523999554,0.043594359479858444,0.9781891508008913],[1,23.24378082670376,1.5324858149150447,5.417431078032449]],[7,"RightHandRing1",3,[-62],[0,"aeh2snOE5AYLxYJSuP49dN",1,0],[1,-0.015421956777572632,0.09560418128967285,0.002229932229965925],[3,0.06409547664410525,0.05492553274666168,0.057972481298020295,0.9947432568951704],[1,7.0113654420237115,5.889677369140028,7.029272806844258]],[7,"RightHandRing2",41,[-63],[0,"3dJoVg1WNK3Kb5yPA6bwr5",1,0],[1,-1.4901161193847656e-8,0.04190020263195038,-1.0652001947164536e-7],[3,0.18622609756915473,0.01619233917286887,-0.045855469469734574,0.9813026672010958],[1,21.60919989766106,2.810412634524477,-4.816529181938967]],[9,"RightHandRing3",42,[[10,"RightHandRing4",-64,[0,"e68oDwADBGkJCYHRHpSgvY",1,0],[1,6.705522537231445e-8,0.029812829568982124,-9.313225746154785e-9],[3,0.00665797652985165,0.0069062824903190064,-0.022115010345336077,0.9997094082422738],[1,0.7810129231047892,0.808858965974567,-2.5290090946255934]]],[0,"6dxw7KJXlAhKSzNzoZ9Lpg",1,0],[1,2.2351741790771484e-8,0.03616270422935486,1.0663643479347229e-7],[3,0.03906060048192105,0.00579548772474252,-0.0018974343732175935,0.9992182351993099],[1,4.47835952886973,0.6721068985888181,-0.1913196488188744]],[7,"RightHandPinky1",3,[-65],[0,"fczKMMSUxD+IrFlx9cNNR9",1,0],[1,-0.039131730794906616,0.08981353044509888,0.010543964803218842],[3,0.0990352270368501,0.07101260958764577,0.1552529801311201,0.9803294064985085],[1,10.46170552586249,6.57125192543878,18.570036770004634]],[7,"RightHandPinky2",44,[-66],[0,"c3d8nQd91B64fPmqVG84Er",1,0],[1,-8.149072527885437e-9,0.028152037411928177,2.949673216789961e-8],[3,0.12148028226389913,0.21082732704992702,-0.05947455194671014,0.9681204247720447],[1,15.11910517702514,25.057586092234903,-3.6656675033654924]],[9,"RightHandPinky3",45,[[10,"RightHandPinky4",-67,[0,"572C20FGBGsKiS2BO6n+WO",1,0],[1,9.499490261077881e-8,0.02632424794137478,-4.6566128730773926e-9],[3,0.137399759461553,-0.10453521946119575,0.012381082093645494,0.9849062913791836],[1,15.857327666829457,-12.082451317626626,-0.24853936993579825]]],[0,"86azynKiZIlq3J4KwErVbl",1,0],[1,1.0244548320770264e-7,0.022376010194420815,-1.3504177331924438e-7],[3,0.1227064975530106,0.01193245336695938,-0.012159114002855877,0.9922967741364395],[1,14.114917599642627,1.528320986778345,-1.214905953588376]],[7,"LeftUpLeg",4,[-68],[0,"cdEwO+Ma1MI7LBJHt+eGv6",1,0],[1,0.0953437089920044,0.005192943848669529,-0.0033023017458617687],[3,-0.0014227865060874726,0.009743763154350282,0.999408902837024,-0.03293751187090501],[1,-178.88699047860823,179.8735588723044,-3.7764522029680916]],[7,"LeftLeg",47,[-69],[0,"2fat7DqDtP2oYBGMfJYrj1",1,0],[1,2.1868345356779173e-8,0.4581737220287323,-5.238689482212067e-10],[3,-0.04165493042780283,-0.0003079960073508154,-0.002911400346295711,0.9991277674339444],[1,-4.774847730557957,-0.04916078619265082,-0.33186260591807903]],[7,"LeftFoot",48,[-70],[0,"55/QDixgZKorp6nMdQHhGH",1,0],[1,3.6688288673758507e-7,0.4438585638999939,-4.645844455808401e-7],[3,0.5074415340054524,0.016669311066746524,0.0015582301829948101,0.8615235316307094],[1,60.98133400528189,1.5555309665580959,1.1232013133349512]],[9,"LeftToeBase",49,[[10,"LeftToe_End",-71,[0,"38jdCoT2tKaKdjsJBABOlg",1,0],[1,-5.425681592896581e-7,0.09907494485378265,5.651963874697685e-8],[3,0.006907097567616491,0.6984360256469684,0.017670666896157153,0.7154209653155994],[1,-0.8485663058627317,88.638281444044,2.0018784979141278]]],[0,"5cYRlqRPZKnY1OerqBtyIG",1,0],[1,4.046596586704254e-7,0.14884443581104279,-6.51925802230835e-9],[3,0.2682283514533604,-0.04375206669049811,0.01854703198580828,0.9621825792132388],[1,31.186864839444684,-5.402494807796607,0.7001817482356]],[29,"RightUpLeg",4,[-72],[0,"06zgNBQQZMoL7hBGMkcRpB",1,0],[1,-0.09534400701522827,0.005193301476538181,-0.0032923389226198196],[3,0.001490530316978299,0.009722796215784073,0.9994089548968778,0.032939132123522404],[1,0.9999504089355469,1.000000238418579,0.9999960660934448],[1,-178.88965355385125,-179.8657061401014,3.776710576418266]],[7,"RightLeg",51,[-73],[0,"06BtZBFIhD05F/1Eno26Vt",1,0],[1,3.922059477190487e-8,0.45817381143569946,-4.3655745685100555e-10],[3,-0.041655443541386346,0.0003088241496250654,0.002912008897348054,0.9991277440123444],[1,-4.774906901803386,0.049258678730739816,0.33192830206081925]],[7,"RightFoot",52,[-74],[0,"82+RsWSs5AR7el/j/KtckR",1,0],[1,-1.2601958587765694e-8,0.4438589811325073,-5.762558430433273e-9],[3,0.507443553145601,-0.016667390435902804,-0.0015543302468900278,0.8615223865486656],[1,60.9816063592206,-1.5555653412317891,-1.1227081746176202]],[9,"RightToeBase",53,[[10,"RightToe_End",-75,[0,"3eYOQ/HyJMzKzhKdmD3y8h",1,0],[1,5.4050178732723e-7,0.09907548129558563,3.969762474298477e-8],[3,0.006906584826178644,-0.6984079469690954,-0.017670780393786722,0.7154483784430059],[1,-0.8485388529471983,-88.6337834269777,-2.0018800533065555]]],[0,"54sTvGFmVOook1bHmUg7Qn",1,0],[1,-6.356276571750641e-8,0.14884474873542786,1.0803341865539551e-7],[3,0.2682274572133823,0.04373482974455773,-0.018560446744357428,0.9621833534626898],[1,31.186828093374007,5.401004191133117,-0.7021969188737557]],[15,"EyeLeft",1,[[14,-76,[1,"2fGOPkDnpHy58E8pXsyZLH"],[0],[2],1,1,2]],[0,"feuPO12D5HqJfEPyCwozUB",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"EyeRight",1,[[14,-77,[1,"30v380uxNKMbT2wFxzfCzS"],[3],[2],1,4,5]],[0,"5fpCS5b4FFzK7QrH0N0X3o",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Body",1,[[14,-78,[1,"beD4I8eD5DsLjg7gTouWWv"],[6,7],[2],1,8,9]],[0,"50nJnsWGBLcZopUIs7HRrI",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Glasses",1,[[14,-79,[1,"cbFVOUfBBDiq3e0iEXYDDe"],[10],[2],1,11,12]],[0,"d4n+sfwcJOHLtKk+P+nE3h",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Head",1,[[14,-80,[1,"61pNz+d5xKOJnQPMlR9uPJ"],[13],[2],1,14,15]],[0,"a2TkWE7kNExoEBZWAuywk2",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Headwear",1,[[14,-81,[1,"c8QWGbtwlLjqMmgfrev5BF"],[16],[2],1,17,18]],[0,"21h/p7IgFELKCDaBqF+JLG",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Outfit_Bottom",1,[[14,-82,[1,"bcnEzuJKFFHph4LWUiFIid"],[19],[2],1,20,21]],[0,"bfLSwq5WBAkIyYxF/2B0La",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Outfit_Footwear",1,[[14,-83,[1,"09PJ0OqndPiYOVkvzGApr+"],[22],[2],1,23,24]],[0,"35fUFdLSlHF6mDf1fxkDXC",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Outfit_Top",1,[[14,-84,[1,"bcOCMaCSxGZphhifk7RXcG"],[25],[2],1,26,27]],[0,"99r4gcMwdNiLdLNJDmnYOc",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[15,"Wolf3D_Teeth",1,[[14,-85,[1,"cefzEcBUpHxqCA9bBoA2IE"],[28],[2],1,29,30]],[0,"50gN92+epOHb26dwefGg/Q",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]]],0,[0,6,1,0,0,1,0,-1,7,0,-2,55,0,-3,56,0,-4,57,0,-5,58,0,-6,59,0,-7,60,0,-8,61,0,-9,62,0,-10,63,0,-11,64,0,-1,14,0,-2,17,0,-3,20,0,-4,23,0,-5,26,0,-1,32,0,-2,35,0,-3,38,0,-4,41,0,-5,44,0,-1,8,0,-2,47,0,-3,51,0,-1,10,0,-2,11,0,-3,29,0,2,6,0,2,6,0,2,6,0,-1,9,0,-1,12,0,-1,13,0,-1,15,0,-1,16,0,2,16,0,-1,18,0,-1,19,0,2,19,0,-1,21,0,-1,22,0,2,22,0,-1,24,0,-1,25,0,2,25,0,-1,27,0,-1,28,0,2,28,0,-1,30,0,-1,31,0,-1,33,0,-1,34,0,2,34,0,-1,36,0,-1,37,0,2,37,0,-1,39,0,-1,40,0,2,40,0,-1,42,0,-1,43,0,2,43,0,-1,45,0,-1,46,0,2,46,0,-1,48,0,-1,49,0,-1,50,0,2,50,0,-1,52,0,-1,53,0,-1,54,0,2,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,9,1,2,2,13,3,2,31,4,2,7,5,2,9,6,2,10,85],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,5,-1,1,5,-1,-2,1,5,-1,1,5,-1,1,5,-1,1,5,-1,1,5,-1,1,5,-1,1,5,-1,1,5,-1,-2,-3,-4,11],[29,71,72,29,73,74,30,30,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,31,98,99,100,31]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[32,"Land"],[42,"Land",[-2],[0,"fe9pvs6idRNK5XTT7/ZOO+",-1,0]],[46,"Demo",1,[[-3,-4,-5,[10,"Reflection Probe",-6,[0,"d3Z/tENCteMbCyL8q83IQ5",1,0],[1,32,1.5,-3],[3,0,1,0,0],[1,0,180,0]],-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-202,-203,-204,-205,-206,-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-250,-251,-252,-253,-254,-255,-256,-257,-258,-259,-260,-261,-262,-263,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-300,-301,-302,-303,-304,-305,-306,-307,-308,-309,-310,-311,-312,-313,-314,-315,-316,-317,-318,-319,-320,-321,-322,-323,-324,-325,-326,-327,-328,-329,-330,-331,-332,-333,-334,-335,-336,-337,-338,-339,-340,-341,-342,-343,-344,-345,-346,-347,-348,-349,-350,-351,-352,-353,-354,-355,-356,-357,-358,-359,-360,-361,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-378,-379,-380,-381,-382,-383,-384,-385,-386,-387,-388,-389,-390,-391,-392,-393,-394,-395,-396,-397,-398,-399,-400,-401,-402,-403,-404,-405,-406,-407,-408,-409,-410,-411,-412,-413,-414,-415,-416,-417,-418,-419,-420,-421,-422,-423,-424,-425,-426,-427,-428,-429,-430,-431,-432,-433,-434,-435,-436,-437,-438,-439,-440,-441,-442,-443,-444,-445,-446,-447,-448,-449,-450,-451,-452,-453,-454,-455,-456,-457,-458,-459,-460,-461,-462,-463,-464,-465,-466,-467,-468,-469,-470,-471,-472,-473,-474,-475,-476,-477,-478,-479,-480,-481,-482,-483,-484,-485,-486,-487,-488,-489,-490,-491,-492,-493,-494,-495,-496,-497,-498,-499,-500,-501,-502,-503,-504,-505,-506,-507,-508,-509,-510,-511,-512,-513,-514,-515,-516,-517,-518,-519,-520,-521,-522,-523,-524,-525,-526,[10,"GameObject",-527,[0,"fcwm3Cp29UZo8sCBb1dhZV",1,0],[1,14.0058832,15.7015381,-22.4526367],[3,0,1,0,0],[1,0,180,0]],-528,-529,-530,-531,-532,-533,-534,-535,-536,-537,-538,-539,-540,-541,-542,-543,-544,-545,-546,-547,-548,-549,-550,-551,-552,-553,-554,-555,-556,-557,-558,-559,-560,-561,-562,-563,-564,-565,-566,-567,-568,-569,-570,-571,-572,-573,-574,-575,-576,-577,-578,-579,-580,-581,-582,-583,-584,-585,-586,-587,-588,-589,-590,-591,-592,-593,-594,-595,-596,-597,-598,-599,-600,-601,-602,-603,-604,-605,-606,-607,-608,-609,-610,-611,-612,-613,-614,-615,-616,-617,-618,-619,-620,-621,-622,-623,-624,-625,-626,-627,-628,-629,-630,-631,-632,-633,-634,-635,-636,-637,-638,-639,-640,-641,-642,-643,-644,-645,-646,-647,-648,-649,-650,-651,-652,-653,-654,-655,-656,-657,-658,-659,-660,-661,-662,-663,-664,-665,-666,-667,-668,-669,-670,-671,-672,-673,-674,-675,-676,-677,-678,-679,-680,-681,-682,-683,-684,-685,-686,-687,-688,-689,-690,-691,-692,-693,-694,-695,-696,-697,-698,-699,-700,-701,-702,-703,-704,-705,-706,-707,-708,-709,-710,-711,-712,-713,-714,-715,-716,-717,-718,-719,-720,-721,-722,-723,-724,-725,-726,-727,-728,-729,-730,-731,-732,-733,-734,-735,-736,-737,-738,-739,-740,-741,-742,-743,-744,-745,-746,-747,-748,-749,-750,-751,-752,-753,-754,-755,-756,-757,-758,-759,-760,-761,-762,-763,-764,-765,-766,-767,-768,-769,-770,-771,-772,-773,-774,-775,-776,-777,-778,-779,-780,-781,-782,-783,-784,-785,-786,-787,-788,-789,-790,-791,-792,-793,-794,-795,-796,-797,-798,-799,-800,-801,-802,-803,-804,-805,-806,-807,-808,-809,-810,-811,-812,-813,-814,-815,-816,-817,-818,-819,-820,-821,-822,-823,-824,-825,-826,-827,-828,-829,-830,-831,-832,-833,-834,-835,-836,-837,-838,-839,-840,-841,-842,-843,-844,-845,-846,-847,-848,-849,-850,-851,-852,-853,-854,-855,-856,-857,-858,-859,-860,-861,-862,-863,-864,-865,-866,-867,-868,-869,-870,-871,-872,-873,-874,-875,-876,-877,-878,-879,-880,-881,-882,-883,-884,-885,-886,-887,-888,-889,-890,-891,-892,-893,-894,-895,-896,-897,-898,-899,-900,-901,-902,-903,-904,-905,-906,-907,-908,-909,-910,-911,-912,-913,-914,-915,-916,-917,-918,-919,-920,-921,-922,-923,-924,-925,-926,-927,-928,-929,-930,-931,-932,-933,-934,-935,-936,-937,-938,-939,-940,-941,-942,-943,-944,-945,-946,-947,-948,-949,-950,-951,-952,-953,-954,-955,-956,-957,-958,-959,-960,-961,-962,-963,-964,-965,-966,-967,-968,-969,-970,-971,-972,-973,-974,-975,-976,-977,-978,-979,-980,-981,-982,-983,-984,-985,-986,-987,-988,-989,-990,-991,-992,-993,-994,-995,-996,-997,-998,-999,-1000,-1001,-1002,-1003,-1004,-1005,-1006,-1007,-1008,-1009,-1010,-1011,-1012,-1013,-1014,-1015,-1016,-1017,-1018,-1019,-1020,-1021,-1022,-1023,-1024,-1025,-1026,-1027,-1028,-1029,-1030,-1031,-1032,-1033,-1034,-1035,-1036,-1037,-1038,-1039,-1040,-1041,-1042,-1043,-1044,-1045,-1046,-1047,-1048,-1049,-1050,-1051,-1052,-1053,-1054,-1055,-1056,-1057,-1058,-1059,-1060,-1061,-1062,-1063,-1064,-1065,-1066,-1067,-1068,-1069,-1070,-1071,-1072,-1073,-1074,-1075,-1076,-1077,-1078,-1079,-1080,-1081,-1082,-1083,-1084,-1085,-1086,-1087,-1088,-1089,-1090,-1091,-1092,-1093,-1094,-1095,-1096,-1097,-1098,-1099,-1100,-1101,-1102,-1103,-1104,-1105,-1106,-1107,-1108,-1109,-1110,-1111,-1112,-1113,-1114,-1115,-1116,-1117,-1118,-1119,-1120,-1121,-1122,-1123,-1124,-1125,-1126,-1127,-1128,-1129,-1130,-1131,-1132,-1133,-1134,-1135,-1136,-1137,-1138,-1139,-1140,-1141,-1142,-1143,-1144,-1145,-1146,-1147,-1148,-1149,-1150,-1151,-1152,-1153,-1154,-1155,-1156,-1157,-1158,-1159,-1160,-1161,-1162,-1163,-1164,-1165,-1166,-1167,-1168,-1169,-1170,-1171,-1172,-1173,-1174,-1175,-1176,-1177,-1178,-1179,-1180,-1181,-1182,-1183,-1184,-1185,-1186,-1187,-1188,-1189,-1190,-1191,-1192,-1193,-1194,-1195,-1196,-1197,-1198,-1199,-1200,-1201,-1202,-1203,-1204,-1205,-1206,-1207,-1208,-1209,-1210,-1211,-1212,-1213,-1214,-1215,-1216,-1217,-1218,-1219,-1220,-1221,-1222,-1223,-1224,-1225,-1226,-1227,-1228,-1229,-1230,-1231,-1232,-1233,-1234,-1235,-1236,-1237,-1238,-1239,-1240,-1241,-1242,-1243,-1244,-1245,-1246,-1247,-1248],1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,"3faYM2Sd1V87sjlpABLYBU",1,0],[1,25.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Item_Drink_01",2,[[3,-1249,[1,"abDj6ZI9lZk5axdyjQjKJt"],[0],[2],1]],[0,"f3gxoxjopQYIWU/Sg+kPFv",1,0],[1,39.939,-0.17,7.26],[3,0,0.7071067811865476,-0.7071067811865476,0],[1,90.00000000000003,180,0]],[4,"SM_Item_Drink_02",2,[[3,-1250,[1,"b4OBYZppZdAqC2lW/MOKjW"],[2],[2],3]],[0,"c88PsgZZpYj5PLOGntwQrb",1,0],[1,39.902,-0.179,-0.885849],[3,0,0.7071067811865476,-0.7071067811865476,0],[1,90.00000000000003,180,0]],[6,"Plane",2,[[3,-1251,[1,"889oX+eEpQUbI7sPjB5/Oa"],[4],[2],5]],[0,"a2mks5RzxXHYKEN8oBwTcr",1,0],[1,25.5,-1.733,-18.5],[3,0,1,0,0],[1,21.1790047,21.17899,21.17899],[1,0,180,0]],[4,"SM_Env_Road_Parking_01 (1)",2,[[3,-1252,[1,"9aaP8ywAddw4KGYcdOn6sm"],[6],[2],7]],[0,"d6IrhirRpbX5ykXqIuLzOf",1,0],[1,0.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_Parking_01",2,[[3,-1253,[1,"03VmsgwutafrJH8FRQLz9/"],[8],[2],9]],[0,"cej7jTTURTxavHYFddnHxY",1,0],[1,10.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_01 (1)",2,[[3,-1254,[1,"68O8X/qvVcS6o//T+H+KN2"],[10],[2],11]],[0,"79z0IzJmZXLIXH5WLNcfBE",1,0],[1,-9.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_01",2,[[3,-1255,[1,"c6vdbiarVZr4S9svquG1gE"],[12],[2],13]],[0,"f9n3qz3uxdS7bj+llg8M1Y",1,0],[1,10.5,0,31.5],[3,0,0.7071064811864919,0,-0.7071070811864759],[1,0,-89.99995138292023,0]],[4,"SM_Env_Sidewalk_Corner_End_01 (1)",2,[[3,-1256,[1,"f2VqgImE9ZiLhEVX5VPlqK"],[14],[2],15]],[0,"9c/2wdwTVTjp4acInYnYGg",1,0],[1,-9.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (37)",2,[[3,-1257,[1,"7bqdvX2odU9oPdQH9qEov/"],[16],[2],17]],[0,"69nySGC45YIYkgb9c4NW6N",1,0],[1,-4.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (35)",2,[[3,-1258,[1,"82RtrRXVxWlp4/wgA9Tdgu"],[18],[2],19]],[0,"c6sSbFmnRbypWO8F11BhMp",1,0],[1,0.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_02 (4)",2,[[3,-1259,[1,"1d3OXMfm5UAL6b4k853kBS"],[20],[2],21]],[0,"78yxVhzWxWRK4eDGbcAwPU",1,0],[1,5.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01",2,[[3,-1260,[1,"99UAAj+shbyaClSeYEU5fM"],[22],[2],23]],[0,"2dPnubN4NTP6eotiddUz0f",1,0],[1,10.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_End_01",2,[[3,-1261,[1,"9b32HPAK5Wg5AR8BjYMkwX"],[24],[2],25]],[0,"77rO9RNJdf3Is3DIrMYw2k",1,0],[1,10.5,0,36.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (129)",2,[[3,-1262,[1,"b7DMJVKSddCIV7buFEz9xa"],[26],[2],27]],[0,"c46k7Z2HhQyqfGSw/dkyRr",1,0],[1,-34.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Corner_End_02 (3)",2,[[3,-1263,[1,"f4Iw5rQqhf4rJAjWE6GU71"],[28],[2],29]],[0,"17Sy0BI0VTGLm14IaschMp",1,0],[1,-69.5,0,-23.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_Corner_End_02 (2)",2,[[3,-1264,[1,"ecFojlQxhbtaYCCEcclHAG"],[30],[2],31]],[0,"2a1+SCJVFXwYDOy26C/E4R",1,0],[1,-69.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (3)",2,[[3,-1265,[1,"67gU2cM3haTI5c1/IenHqU"],[32],[2],33]],[0,"e0y0y24XVfvr6fo3eyCpX7",1,0],[1,-69.5,0,-23.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (2)",2,[[3,-1266,[1,"82Vz+PXzRcH7SZYpILjK3C"],[34],[2],35]],[0,"97qSxVAKNUFrzMHEX0001X",1,0],[1,-69.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (73)",2,[[3,-1267,[1,"38ILrkQrJTroJQVq7PLYGl"],[36],[2],37]],[0,"b7towWE4xaP42MfK+ALxxN",1,0],[1,70.5,0,-3.5]],[5,"SM_Env_Road_01 (68)",2,[[3,-1268,[1,"8288ouDdtYIaZ2Cb6NXG+x"],[38],[2],39]],[0,"81NnKBP9lfMIpEyZbX/2Ko",1,0],[1,65.5,0,-3.5]],[5,"SM_Env_Road_01 (43)",2,[[3,-1269,[1,"cbp6olBh9etbNC55nFl08L"],[40],[2],41]],[0,"5bxDe+R3Za0qpFn+8yUhJn",1,0],[1,60.5,0,-3.5]],[5,"SM_Env_Road_01 (110)",2,[[3,-1270,[1,"50NKtWTStTw4Vcfe61KqtL"],[42],[2],43]],[0,"3cRfRIEMxUYK/36Pu8n5xh",1,0],[1,75.5,0,-3.5]],[5,"SM_Env_Road_01 (125)",2,[[3,-1271,[1,"5eHgdLd7xcCrI8rhSwkVRM"],[44],[2],45]],[0,"f3gX6ugM1ajaQ2GW96Cbs0",1,0],[1,70.5,0,-8.5]],[5,"SM_Env_Road_01 (117)",2,[[3,-1272,[1,"58xCeSsOlVWKaHc070cMLb"],[46],[2],47]],[0,"17upirkHJUw5AoAlbMjdGv",1,0],[1,60.5,0,-8.5]],[5,"SM_Env_Road_01 (124)",2,[[3,-1273,[1,"2aSbM6egRbJ7yB9Fj2176w"],[48],[2],49]],[0,"39xvfV2XtWObsaOKGFtvXP",1,0],[1,65.5,0,-8.5]],[5,"SM_Env_Road_01 (164)",2,[[3,-1274,[1,"c9zWcS9Fhf1qSP6GICVTau"],[50],[2],51]],[0,"0cvN+df0RfHJmXAt6/WzFJ",1,0],[1,75.5,0,-8.5]],[4,"SM_Env_Sidewalk_Straight_03 (7)",2,[[3,-1275,[1,"f4GaqdEjhSiZlJLVdcW6SV"],[52],[2],53]],[0,"b4lQt0wPlfppevInr2cx3P",1,0],[1,60.5,0,-3.5],[3,0,0.7071064811864919,0,0.7071070811864759],[1,0,89.99995138292023,0]],[4,"SM_Env_Sidewalk_Corner_End_03 (1)",2,[[3,-1276,[1,"7dt9U6txpbBYUvrtIG0Ooe"],[54],[2],55]],[0,"40Sn85PixZGL4h8iOcHR/t",1,0],[1,60.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_03 (6)",2,[[3,-1277,[1,"a0x/amXptX9q3thEDzKMN3"],[56],[2],57]],[0,"56iYo9I35UOZU5mfVx7IPC",1,0],[1,65.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_03 (5)",2,[[3,-1278,[1,"8arxKAgllQ3adr782IGwU9"],[58],[2],59]],[0,"210WufP+1eRLHi9UuIJC5x",1,0],[1,70.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_03 (4)",2,[[3,-1279,[1,"08r8yE5e1R/7QczB9togvP"],[60],[2],61]],[0,"dd563obAxRVrfKatu8mRns",1,0],[1,75.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_03 (3)",2,[[3,-1280,[1,"21+Lal4Q9aIJq65gWrTd6x"],[62],[2],63]],[0,"b0VnfBvNdSXJ30IdFO/p3x",1,0],[1,80.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_03 (2)",2,[[3,-1281,[1,"9bcXZGQ9BW+IWrT2OpY5U3"],[64],[2],65]],[0,"08lHnxoZ9dG762o4QlqeXK",1,0],[1,80.5,0,-8.5],[3,0,0.7071070811864759,0,-0.7071064811864919],[1,0,-90.0000486170798,0]],[17,"SM_Env_Road_Corner_End_02 (1)",2,[[3,-1282,[1,"64fSrHVmVff4ijEOZ39nHb"],[66],[2],67]],[0,"ceIXMM7xNQ+6nCHF2WwxXo",1,0],[1,90.5,0,-23.5],[3,0,0,0,-1]],[4,"SM_Env_Road_Corner_End_02",2,[[3,-1283,[1,"aewL6upgdfqJva9/FYxgmC"],[68],[2],69]],[0,"aavri0fP9cW79LTS6svk7a",1,0],[1,90.5,0,-23.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (1)",2,[[3,-1284,[1,"ae4TDRnhdama23sgpYPz3G"],[70],[2],71]],[0,"cfwcys+qZbc4oi8iB5+rtJ",1,0],[1,90.5,0,-23.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[17,"SM_Env_Sidewalk_Corner_End_02",2,[[3,-1285,[1,"b8nigdyGtVSIlSf2hRJfzN"],[72],[2],73]],[0,"56W4IEPcxaRKOuPHt/iAbj",1,0],[1,90.5,0,-23.5],[3,0,0,0,-1]],[4,"SM_Env_Sidewalk_Straight_01 (86)",2,[[3,-1286,[1,"9aXVkRvA1TkKStp2GhtV1s"],[74],[2],75]],[0,"81KmvxMIFbDbx4wY4YF7y6",1,0],[1,90.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (42)",2,[[3,-1287,[1,"5cVhIeVv5cy4sPXtPOxuVj"],[76],[2],77]],[0,"8a4Af880ZZzLNwiGa5EyYq",1,0],[1,85.5,0,-18.5]],[5,"SM_Env_Road_01 (51)",2,[[3,-1288,[1,"d6Kkvu0hlRjaJjv+nyCNf3"],[78],[2],79]],[0,"e7VgPC7lVei7q/RKyUYGOI",1,0],[1,85.5,0,-23.5]],[4,"SM_Env_Sidewalk_Straight_03 (1)",2,[[3,-1289,[1,"8bEa4clrtdJ7UCJGXN7yZo"],[80],[2],81]],[0,"50ngzcNJVT5qccoGMjazQx",1,0],[1,80.5,0,-13.5],[3,0,0.7071070811864759,0,-0.7071064811864919],[1,0,-90.0000486170798,0]],[4,"SM_Env_Sidewalk_Straight_03",2,[[3,-1290,[1,"3c0MpvIk9fdqGmSNPyPtFI"],[82],[2],83]],[0,"cdcN4pSNFb4JMxt86/bnGP",1,0],[1,60.5,0,-8.5],[3,0,0.7071064811864919,0,0.7071070811864759],[1,0,89.99995138292023,0]],[4,"SM_Env_Road_Crossing_02 (11)",2,[[3,-1291,[1,"dfzhtBXXJUSatXk6eOEnmB"],[84],[2],85]],[0,"47XtFg1DNT6I7lX/RZiZZJ",1,0],[1,60.5,0,-18.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[4,"SM_Env_Road_Crossing_02 (10)",2,[[3,-1292,[1,"38YHEW1exbf6jDbyz5ELP7"],[86],[2],87]],[0,"3aNiWA/2dQPri5vriTAaUB",1,0],[1,75.5,0,-18.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[6,"SM_Env_Sidewalk_Corner_04 (1)",2,[[3,-1293,[1,"edpwtVmLpch5XrMoA94zAr"],[88],[2],89]],[0,"c6Y5WqdONfsanxytNSbqp+",1,0],[1,60.5,0,-18.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,1,1,-1],[1,0,-90.0000081028472,0]],[4,"SM_Env_Sidewalk_Corner_End_03",2,[[3,-1294,[1,"63NLGGFJRQ4bBnsHOnQhae"],[90],[2],91]],[0,"cc6/X6UJZd5IPzD0GnOVJ2",1,0],[1,80.5,0,-3.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[6,"SM_Env_Sidewalk_Straight_Path_01",2,[[3,-1295,[1,"29fXeWPhRWr6brgLeJXrmG"],[92],[2],93]],[0,"bfsNhViBBco5elojCMr/OA",1,0],[1,20.5,0,-18.5],[3,0,1,0,0],[1,-1,1,1],[1,0,180,0]],[5,"SM_Env_Path_01 (2)",2,[[3,-1296,[1,"73T8WF3utTp7GzKqMBWRkD"],[94],[2],95]],[0,"e5UXKZHN9ZmLS2am5m5XpS",1,0],[1,-4.5,0,16.5]],[5,"SM_Env_Sidewalk_Driveway_Wide_01 (6)",2,[[3,-1297,[1,"7fDUlWn11VnJcGJYu7nNGa"],[96],[2],97]],[0,"74P6SNbZlXBJWAWl7K9fxr",1,0],[1,-14.5,0,21.5]],[4,"SM_Env_Grass_01 (52)",2,[[3,-1298,[1,"487jb2gSVab6wj9frL9N3j"],[98],[2],99]],[0,"a1EDCadl9TbbVrDjl1rY4N",1,0],[1,-4.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (51)",2,[[3,-1299,[1,"15tqXgw9tTYr8A6YO9eR9J"],[100],[2],101]],[0,"48O9A+OBpSnqebTaNcS5dt",1,0],[1,-4.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (49)",2,[[3,-1300,[1,"519NkcjKlcubnDyM50TrxF"],[102],[2],103]],[0,"2bX/3Yps1bCpMesFKoGsup",1,0],[1,5.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Driveway_Wide_01 (1)",2,[[3,-1301,[1,"1bs1fjQ51ZFJChgol2B/cU"],[104],[2],105]],[0,"f1s4/Go1JcfJMiQRBGdEWP",1,0],[1,10.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Driveway_Wide_01",2,[[3,-1302,[1,"f29k8+hRZetrXtoChEPPEM"],[106],[2],107]],[0,"d1TvFQ74VZO4gsCCGV+r/N",1,0],[1,10.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Driveway_Wide_PathRight_01 (5)",2,[[3,-1303,[1,"99beA8IVZSxZYuSVFTxD8U"],[108],[2],109]],[0,"e56+4+VGZc5ZMA3iUQqmyA",1,0],[1,10.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Sidewalk_Driveway_Wide_01 (5)",2,[[3,-1304,[1,"43CvNp5MxXla8JwC+q6FVn"],[110],[2],111]],[0,"32dH/+IX1Y3JYas5+nveT0",1,0],[1,5.5,0,21.5]],[4,"SM_Bld_House_Interior_Floor_01 (58)",2,[[3,-1305,[1,"881Iv0l4Jdu5x4gMXMDVmZ"],[112],[2],113]],[0,"5fvVnRn79boabE/5GcZGNc",1,0],[1,0.06800079,-0.213000059,-7.55999947],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Bld_House_Interior_Floor_01 (60)",2,[[3,-1306,[1,"cflN/gduReFbfkg/L0l2cS"],[114],[2],115]],[0,"1cjqaAlHNf1rakTZZmFa0S",1,0],[1,0.06800079,-0.213000059,-5.05999947],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Bld_House_Interior_Floor_01 (59)",2,[[3,-1307,[1,"b3eDqPy65TA45KpcBLURhG"],[116],[2],117]],[0,"97nvBYukNYrbMSZh3xyAgH",1,0],[1,0.06800079,-0.213000059,-2.55999947],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Driveway_Wide_PathRight_01 (4)",2,[[3,-1308,[1,"163iCTeOFXTIlcnlISfwG7"],[118],[2],119]],[0,"d5LO+UAmpaMKuTc4NG87MP",1,0],[1,10.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Driveway_Wide_PathRight_01 (3)",2,[[3,-1309,[1,"beSGOp3WZbG77vAJn7/jaZ"],[120],[2],121]],[0,"08QZdBKoJYjIQlzIjxCw15",1,0],[1,10.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (46)",2,[[3,-1310,[1,"44SRW+bfZSgqQyri1yFM6I"],[122],[2],123]],[0,"b59rHE2o9dCb8xH9odvfPk",1,0],[1,20.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_02",2,[[3,-1311,[1,"667icqRaVeW4aeg/5+v3y+"],[124],[2],125]],[0,"71rpdL/jZUJrF5mtIM5rqQ",1,0],[1,40.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (87)",2,[[3,-1312,[1,"f3XoUAn8FTlrhaZaiGyHOu"],[126],[2],127]],[0,"d7Tqq/PQFZW5AQYna4f+/d",1,0],[1,-34.5,0,31.5]],[5,"SM_Env_Road_01 (86)",2,[[3,-1313,[1,"41ZabvlwhW3Kw/Yt2hB4G/"],[128],[2],129]],[0,"40kN0eAbRRO7dmBlTMqtL4",1,0],[1,-34.5,0,26.5]],[4,"SM_Env_Sidewalk_Corner_01 (5)",2,[[3,-1314,[1,"b3yh/244xUI7kH7UTXeqMi"],[130],[2],131]],[0,"039rjYdj5dMolCFcVaoxIS",1,0],[1,-29.5,0,21.5],[3,0,0.7071064811864919,0,0.7071070811864759],[1,0,89.99995138292023,0]],[4,"SM_Env_Road_Crossing_02 (15)",2,[[3,-1315,[1,"3d7fUxiSlQGaku9QaM6B50"],[132],[2],133]],[0,"fdSoWH/PNeo46dY0h+fcsP",1,0],[1,40.5,0,21.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Crossing_02 (14)",2,[[3,-1316,[1,"90QHP46ixUnYZFSvzLEdI/"],[134],[2],135]],[0,"81JygPF65XbqfW4xEbTAGb",1,0],[1,40.5,0,26.5],[3,0,-1,0,0],[1,0,-180,0]],[17,"SM_Env_Road_Crossing_02 (12)",2,[[3,-1317,[1,"02dmQwRaJcL5N4i4K3c0H9"],[136],[2],137]],[0,"aeRcaLefldxZL8OTcP4d6X",1,0],[1,-19.5,0,-23.5],[3,0,0,0,-1]],[17,"SM_Env_Road_Crossing_02 (13)",2,[[3,-1318,[1,"0fCX6EEglRY6bKZ4IEDEH4"],[138],[2],139]],[0,"ebQY8Zdt9SNJLDBhf3clV/",1,0],[1,-19.5,0,-18.5],[3,0,0,0,-1]],[4,"SM_Env_Road_Crossing_02 (9)",2,[[3,-1319,[1,"73+ykDNvVZA6hR28h4q2LF"],[140],[2],141]],[0,"9akfzrGpNRaKqackA+2wPJ",1,0],[1,40.5,0,-23.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Crossing_02 (8)",2,[[3,-1320,[1,"f25j5DykBe64LZZgNxG5Tb"],[142],[2],143]],[0,"cbSBFuzt9f9qAxPhXut1La",1,0],[1,40.5,0,-28.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Crossing_02 (7)",2,[[3,-1321,[1,"b8jf5lrsBcnJr6wQRfdQoy"],[144],[2],145]],[0,"a06PpcSkFbMpFPoxV85+m+",1,0],[1,45.5,0,-28.5],[3,0,-0.7071036311793923,0,-0.70710993117967],[1,0,89.99948952062623,0]],[4,"SM_Env_Road_Crossing_02 (6)",2,[[3,-1322,[1,"7ca+N47NdXSJd+m0Ul2rtm"],[146],[2],147]],[0,"45GJ9/U6NfioWb2iKwxxv3",1,0],[1,50.5,0,-28.5],[3,0,-0.7071036311793923,0,-0.70710993117967],[1,0,89.99948952062623,0]],[17,"SM_Env_Road_Crossing_02 (4)",2,[[3,-1323,[1,"71XSo1ajtYFoyflV+TVH8t"],[148],[2],149]],[0,"90ScNFztRRALxybHlbSHI6",1,0],[1,50.5,0,-18.5],[3,0,0,0,-1]],[17,"SM_Env_Road_Crossing_02 (5)",2,[[3,-1324,[1,"1cS2h2xEZeRajqp/MD3f+7"],[150],[2],151]],[0,"3cMVIqbLVYpqMcOCVfEmRe",1,0],[1,50.5,0,-23.5],[3,0,0,0,-1]],[4,"SM_Env_Road_Crossing_02 (1)",2,[[3,-1325,[1,"e7ZTJBgvdc0rBbnn2fhp2x"],[152],[2],153]],[0,"f36hRBWkNaUrn8KXsA9zxZ",1,0],[1,45.5,0,-18.5],[3,0,0.7071078241857519,0,-0.7071057381858046],[1,0,-90.00016902538094,0]],[4,"SM_Env_Road_Crossing_02 (3)",2,[[3,-1326,[1,"b978DzCIVSpoIlYgC7BjO8"],[154],[2],155]],[0,"f2GYiAJK1UJIgOucoIGhpz",1,0],[1,40.5,0,-18.5],[3,0,0.7071078241857519,0,-0.7071057381858046],[1,0,-90.00016902538094,0]],[4,"SM_Env_Road_01 (160)",2,[[3,-1327,[1,"57yu/xMy1b3Z6WB3ysGo61"],[156],[2],157]],[0,"f638bK7ONRa4eXOdsZ/tuT",1,0],[1,50.5,0,-58.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (159)",2,[[3,-1328,[1,"a6HehzgrFbyZWb93weHaxm"],[158],[2],159]],[0,"c5T1B64+Rdlo2NO6AdSni/",1,0],[1,50.5,0,-63.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (125)",2,[[3,-1329,[1,"a385EO95BU5r8iKgzJj+0i"],[160],[2],161]],[0,"46LVEMH2Facap5wmn+ryzQ",1,0],[1,50.5,0,-63.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (161)",2,[[3,-1330,[1,"b4GIb24VJTPKCw7BqdVMri"],[162],[2],163]],[0,"e57BcPlB5fo6yHaO2iHg8Q",1,0],[1,45.5,0,-58.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (162)",2,[[3,-1331,[1,"e25u4Wu+hXV5VFiXkQ8CRE"],[164],[2],165]],[0,"d7jF/cDPJXqq5x+kNqzln5",1,0],[1,45.5,0,-63.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (126)",2,[[3,-1332,[1,"2fvbRHNMxX8b6PT+eW0ZS0"],[166],[2],167]],[0,"49EmJ+5eRe/ZTrQ7aofpJm",1,0],[1,50.5,0,-68.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (156)",2,[[3,-1333,[1,"59AMXCRPhTx4r169tkXJWP"],[168],[2],169]],[0,"d8hKM+UtVegqCcGiIg235J",1,0],[1,45.5,0,-48.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (79)",2,[[3,-1334,[1,"3bVvf1fgBa3423DoFwejBt"],[170],[2],171]],[0,"a5G7FNJcNYBKJ2yn4vgDZm",1,0],[1,40.5,0,-48.5],[3,0,0.7071067311865435,0,0.7071068311865479],[1,0,89.9999918971528,0]],[4,"SM_Env_Sidewalk_Straight_01 (123)",2,[[3,-1335,[1,"f8RLog75Vd+6oHckQGYI0D"],[172],[2],173]],[0,"a1akfcQzFQc5FG7D8NDPiR",1,0],[1,50.5,0,-58.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (157)",2,[[3,-1336,[1,"7bHlAAaLNQZZ8dXDiT2ZOU"],[174],[2],175]],[0,"f69sVvERpUhq8+F58XewE7",1,0],[1,50.5,0,-48.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (124)",2,[[3,-1337,[1,"aeSaZWmzhVs6Esa3GDhwPt"],[176],[2],177]],[0,"6bNsDjWtVTBq149cGREL3D",1,0],[1,50.5,0,-53.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (75)",2,[[3,-1338,[1,"98M+RMsd5XrJAGk6mIyo+E"],[178],[2],179]],[0,"b1JUY6NqZTNpRad/Yd3SJk",1,0],[1,50.5,0,-43.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_02 (3)",2,[[3,-1339,[1,"94qTdBeUdQKqHprDizu1AR"],[180],[2],181]],[0,"b3JBDNOTdbjpswkQtgQ+4I",1,0],[1,50.5,0,-38.5],[3,0,0.7071067311865435,0,-0.7071068311865479],[1,0,-89.9999918971528,0]],[4,"SM_Env_Road_01 (80)",2,[[3,-1340,[1,"ec0FdsnVZYFIeM9Wp2vO8/"],[182],[2],183]],[0,"82AGKjjKpU8pnFhAU4XYyn",1,0],[1,50.5,0,-38.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (23)",2,[[3,-1341,[1,"4fcJGEJZZYj5A14OSeHHHL"],[184],[2],185]],[0,"a3rg7CMQFZM5ymC4Airptg",1,0],[1,40.5,0,-38.5],[3,0,0.7071067311865435,0,0.7071068311865479],[1,0,89.9999918971528,0]],[4,"SM_Env_Sidewalk_Straight_01 (77)",2,[[3,-1342,[1,"79sbLO8ZRaMZ8Z8P+zthCO"],[186],[2],187]],[0,"d0KMCTLaZdOrZvYK6uRwgR",1,0],[1,40.5,0,-43.5],[3,0,0.7071067311865435,0,0.7071068311865479],[1,0,89.9999918971528,0]],[4,"SM_Env_Road_01 (62)",2,[[3,-1343,[1,"41YDBehhZRMYLfrujLIQ+P"],[188],[2],189]],[0,"c8Ah66pgpSSYLXk5BsVQ8E",1,0],[1,50.5,0,-43.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (152)",2,[[3,-1344,[1,"90unIk8TFV7Je0zMnEDtAc"],[190],[2],191]],[0,"dbnxx3caxZXYsc0DfYU1zt",1,0],[1,45.5,0,-33.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (154)",2,[[3,-1345,[1,"d2Z2fKHl5ar4YZpCu5L34E"],[192],[2],193]],[0,"c5b1doLWNaB5INxbUpDWow",1,0],[1,45.5,0,-43.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (81)",2,[[3,-1346,[1,"c0v9Iqsk5WP67cMlHssN3r"],[194],[2],195]],[0,"a0EOC1A/tUD7UmwryVQO7x",1,0],[1,50.5,0,-33.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (76)",2,[[3,-1347,[1,"06CRT+EdZfKLEQpn+YBAzi"],[196],[2],197]],[0,"50g4I0fClZypOaAFcctuiR",1,0],[1,50.5,0,-48.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (153)",2,[[3,-1348,[1,"9dYWfPKqteb4CPudRK+kTt"],[198],[2],199]],[0,"c3B2bKBbRYRJ7cTJL9Ib31",1,0],[1,45.5,0,-38.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (18)",2,[[3,-1349,[1,"75EA4BpaVY+Z7fU+/Dvmtj"],[200],[2],201]],[0,"65ZVAaz9FVcLlpBIwJuifY",1,0],[1,40.5,0,-33.5],[3,0,0.7071067311865435,0,0.7071068311865479],[1,0,89.9999918971528,0]],[17,"SM_Env_Sidewalk_Corner_03 (4)",2,[[3,-1350,[1,"8baVguxKZY7aut1tl4Uevn"],[202],[2],203]],[0,"d6AsvrdlxWBp9z1tieE/Wv",1,0],[1,50.5,0,-28.5],[3,0,0,0,-1]],[4,"SM_Env_Sidewalk_Corner_03 (5)",2,[[3,-1351,[1,"2dxPMqwL9VHaufcQ56fRTk"],[204],[2],205]],[0,"d8a+xFwUFWtplkpQIhtzE+",1,0],[1,40.5,0,-28.5],[3,0,0.7071078241857519,0,0.7071057381858046],[1,0,90.00016902538094,0]],[4,"SM_Env_Sidewalk_Straight_01 (122)",2,[[3,-1352,[1,"98IDXKJ7tQB5v58w2bFxyz"],[206],[2],207]],[0,"bazKd1UeZdho60Q8UnXntK",1,0],[1,50.5,0,66.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (151)",2,[[3,-1353,[1,"9cMxMbIURau7TZLZFUXzhu"],[208],[2],209]],[0,"872xugqY1bRrNMymiZMANk",1,0],[1,45.5,0,71.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (150)",2,[[3,-1354,[1,"9cwMVGP3NQJaIaqNxv+XLo"],[210],[2],211]],[0,"12J2Yk8XZf3LFhQAoAiNCQ",1,0],[1,50.5,0,71.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (119)",2,[[3,-1355,[1,"c5KeOd039TXr+p00RoGa2k"],[212],[2],213]],[0,"e8K8cbrxJSl7XTeX3sGrOy",1,0],[1,50.5,0,61.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (149)",2,[[3,-1356,[1,"ccrBT4yw1eDLedJe5Xvz3y"],[214],[2],215]],[0,"fb2c2Pzj5ZfqLRi5t31Cwl",1,0],[1,50.5,0,66.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (148)",2,[[3,-1357,[1,"7ftE+POgVcqpMVuarzC71v"],[216],[2],217]],[0,"24rV5zgaRbgJwJd1qcto7G",1,0],[1,45.5,0,66.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (145)",2,[[3,-1358,[1,"2dsQRA5flT5aBrDkXFDpgM"],[218],[2],219]],[0,"2a8ehQzopVOqRJYfFayQdS",1,0],[1,50.5,0,61.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (147)",2,[[3,-1359,[1,"03czlOybRRM5Kq1p7RLCKu"],[220],[2],221]],[0,"69a++C1pBaeK+Z7qM+IlO8",1,0],[1,45.5,0,56.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (118)",2,[[3,-1360,[1,"d6TmMveG5d3ZRicNel+Lmu"],[222],[2],223]],[0,"e90XjG4H9SGZcNgQvSuDzr",1,0],[1,50.5,0,51.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (115)",2,[[3,-1361,[1,"48iBeXNOZV74SoUoab1004"],[224],[2],225]],[0,"03pOUNX+BfoKhBwSOpCtYi",1,0],[1,50.5,0,56.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (117)",2,[[3,-1362,[1,"43yPWetopR+Yw5SS84qwr9"],[226],[2],227]],[0,"6dpofUkIlakpMBHAZWQOCf",1,0],[1,40.5,0,56.5],[3,0,-0.7071066561865353,0,-0.7071069061865376],[1,0,89.99997974288272,0]],[4,"SM_Env_Road_01 (146)",2,[[3,-1363,[1,"8bVbZ6zDVTQ5gn/W6MqdiF"],[228],[2],229]],[0,"dfYxqkcstY/42PVOSNjegF",1,0],[1,50.5,0,56.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (144)",2,[[3,-1364,[1,"d7OLHMN9hfO7/mW0W2rLTj"],[230],[2],231]],[0,"39pVLSFa1cgYFEWqC+X8dF",1,0],[1,45.5,0,61.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (101)",2,[[3,-1365,[1,"e47Mejlo9Y3rBddi7KiUX3"],[232],[2],233]],[0,"b7BAH6hDVUQLxrZtS8GFc0",1,0],[1,40.5,0,51.5],[3,0,-0.7071066561865353,0,-0.7071069061865376],[1,0,89.99997974288272,0]],[4,"SM_Env_Road_01 (142)",2,[[3,-1366,[1,"e6H0Icb2xfVLf4E4nvSGuR"],[234],[2],235]],[0,"f6IyCvEtJdgoc5zv2wAGPT",1,0],[1,50.5,0,51.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (143)",2,[[3,-1367,[1,"c7Qeb33vZQYZKw5UR0iQXl"],[236],[2],237]],[0,"f53ev0BfxXvpGGMebaqmR0",1,0],[1,45.5,0,51.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (102)",2,[[3,-1368,[1,"abR/c1jBRY1pv/lxSrLY4M"],[238],[2],239]],[0,"d335VviF1bGYiXeSqbKsVl",1,0],[1,50.5,0,46.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (100)",2,[[3,-1369,[1,"92DqSPA/pQD6zQHnlnontP"],[240],[2],241]],[0,"70woJP/l5aHZbPky0picDR",1,0],[1,40.5,0,46.5],[3,0,-0.7071066561865353,0,-0.7071069061865376],[1,0,89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (99)",2,[[3,-1370,[1,"7cww51tNZZ1bGnFcP6Ct6e"],[242],[2],243]],[0,"91IFbZpLFZiLjb2N2bTzwI",1,0],[1,40.5,0,41.5],[3,0,-0.7071066561865353,0,-0.7071069061865376],[1,0,89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (98)",2,[[3,-1371,[1,"d5K2o+fdxXq6n+KhtSQ1w1"],[244],[2],245]],[0,"e5+Ftgd/RXirTOE+HweD9r",1,0],[1,50.5,0,41.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (129)",2,[[3,-1372,[1,"c9xTOvx6BWgIbpvLB3m93T"],[246],[2],247]],[0,"a5CmPkJEFV274mXr7XJJnw",1,0],[1,50.5,0,46.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (128)",2,[[3,-1373,[1,"a0+7M7XNpTbZ8DUamtZP0Z"],[248],[2],249]],[0,"06WdXiczNcc6HERshmj1/O",1,0],[1,45.5,0,46.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (123)",2,[[3,-1374,[1,"e56hJClSFRqoNYtkjfbixU"],[250],[2],251]],[0,"f0VAtCl9BdgIJELJWNu0zS",1,0],[1,50.5,0,36.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (126)",2,[[3,-1375,[1,"49leBUkMdd4p87N+GaNfVE"],[252],[2],253]],[0,"8fwDVoWQFf8bkAFVp/zc1Z",1,0],[1,50.5,0,41.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (97)",2,[[3,-1376,[1,"27cX8ZcmFSka1Py6uG98/2"],[254],[2],255]],[0,"204a6dCq9VB4YDyhoP6sly",1,0],[1,50.5,0,36.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_01 (127)",2,[[3,-1377,[1,"9c2sYjuK9Z+bb9k46dEtIi"],[256],[2],257]],[0,"76NIQECnFaB4BbtPUHF/WO",1,0],[1,45.5,0,41.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[5,"SM_Env_Sidewalk_Straight_01 (96)",2,[[3,-1378,[1,"bf7waqcmBX2aGDWFnm0qqW"],[258],[2],259]],[0,"75DUU86flWM5/wOiUDXIVt",1,0],[1,-39.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (88)",2,[[3,-1379,[1,"c7gacdmfVSlY2JUEWbovgc"],[260],[2],261]],[0,"97NAkIamJRWZTOAUEmtFwu",1,0],[1,-14.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (94)",2,[[3,-1380,[1,"30WthkhFddLZtu6ye+IvDM"],[262],[2],263]],[0,"9c5iM3CM5YAr8QpuoDIqW0",1,0],[1,-29.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (64)",2,[[3,-1381,[1,"7dWYZNqqNWd5cPf184UhmK"],[264],[2],265]],[0,"14pGYPDbpXxZwVcd6eaIBZ",1,0],[1,30.5,0,-28.5]],[4,"SM_Env_Sidewalk_Corner_03 (3)",2,[[3,-1382,[1,"4azRhV2WhVgI0+kt+95TEl"],[266],[2],267]],[0,"7fhTwC8GpeSqJPLW3lx0OQ",1,0],[1,50.5,0,-18.5],[3,0,0.707106308186384,0,-0.7071072541863949],[1,0,-89.99992334706798,0]],[4,"SM_Env_Sidewalk_Straight_02",2,[[3,-1383,[1,"2aoyrFcQJbEq4VDsBcuukO"],[268],[2],269]],[0,"97vf+/uR9Yg4JK3mDqKA+J",1,0],[1,50.5,0,1.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (72)",2,[[3,-1384,[1,"97zg3dil9Z6YGVWz/E1Exv"],[270],[2],271]],[0,"02yr/kkR1edLDkivtnRGQ3",1,0],[1,50.5,0,31.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (70)",2,[[3,-1385,[1,"9640o5G2tULaCJOTLHjZoP"],[272],[2],273]],[0,"bdqkK/1aJUyqf8J4YUNBuC",1,0],[1,50.5,0,21.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (71)",2,[[3,-1386,[1,"ddtDw9Y6JZ4pQOnlv+JrLm"],[274],[2],275]],[0,"b1ZlR7kQddVZEf9rNxgT3h",1,0],[1,50.5,0,16.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (67)",2,[[3,-1387,[1,"0bfpG+Vg9ccq7HxGh+GxkL"],[276],[2],277]],[0,"96JozQo+VY8obfFpzABbCR",1,0],[1,50.5,0,-13.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (66)",2,[[3,-1388,[1,"c6FXRlv0FbB7vPRJpy3Pb7"],[278],[2],279]],[0,"584SUxyVtdirwVZ/DwXOnK",1,0],[1,50.5,0,11.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (65)",2,[[3,-1389,[1,"afFKdrmoBdnJYQUIQafjrO"],[280],[2],281]],[0,"efP/SDggxVs4dT6BaKUCQs",1,0],[1,50.5,0,6.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (63)",2,[[3,-1390,[1,"b1McSZlS1Scqu0Vv5NdZgb"],[282],[2],283]],[0,"4623WbMZVfaYIg/cioX/gn",1,0],[1,50.5,0,-3.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (62)",2,[[3,-1391,[1,"71v2vjf11WQaH+pWny+o4M"],[284],[2],285]],[0,"4049bb2TVXpZGlbqYXxsqQ",1,0],[1,50.5,0,-8.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_Crossing_02 (2)",2,[[3,-1392,[1,"06eWVaOmZYtZjUNbLquiFT"],[286],[2],287]],[0,"69A1pFDQdbjLsu22fNXcZH",1,0],[1,-29.5,0,-18.5],[3,0,0.7071078241857519,0,-0.7071057381858046],[1,0,-90.00016902538094,0]],[4,"SM_Env_Sidewalk_Straight_01 (59)",2,[[3,-1393,[1,"a1Wgy3dNxY2KN0CQAoBCEh"],[288],[2],289]],[0,"beB6wAA89ZAaarKrJkkHBD",1,0],[1,-34.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (57)",2,[[3,-1394,[1,"11gjLse/FRUodzkdPyU4BU"],[290],[2],291]],[0,"17pjp+fDBfopl+miNiq3Kf",1,0],[1,-24.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (58)",2,[[3,-1395,[1,"91+YxqSkleR4GfZ/e/g5tj"],[292],[2],293]],[0,"7dPQgGsepQn7xyMkcPY5Cb",1,0],[1,-29.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (60)",2,[[3,-1396,[1,"0cC8QXlZld6afvRUloh5MH"],[294],[2],295]],[0,"81FWM2z0BeUY+YPDK2FWid",1,0],[1,-19.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (61)",2,[[3,-1397,[1,"acHkIFivNfcKBGsQVIBssa"],[296],[2],297]],[0,"94ifTS+51UuKUB0n/hthZf",1,0],[1,-14.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Crossing_02",2,[[3,-1398,[1,"b5mqIoFOxQu5LModxbWoSb"],[298],[2],299]],[0,"f2Np/wfIBZgJ7Nx1JPn2yL",1,0],[1,-24.5,0,-18.5],[3,0,0.7071078241857519,0,-0.7071057381858046],[1,0,-90.00016902538094,0]],[4,"SM_Env_Road_01 (122)",2,[[3,-1399,[1,"b8S/2sG1lezo3U9aWYCHN+"],[300],[2],301]],[0,"cc0KzCuvZc1IBRBn7mA7Ys",1,0],[1,45.5,0,36.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Corner_04",2,[[3,-1400,[1,"01qqo3R1hQFKcMEkTG3NO2"],[302],[2],303]],[0,"6czTKNCaFaSoeJ3MjA8n+g",1,0],[1,80.5,0,-18.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[4,"SM_Env_Road_01 (120)",2,[[3,-1401,[1,"029DvY//9SeKQT2jYjCgJS"],[304],[2],305]],[0,"198HDsio1cjat18C9Pb4Yf",1,0],[1,50.5,0,31.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (121)",2,[[3,-1402,[1,"d1+y+kw+Rf4ZVqWj7cigYC"],[306],[2],307]],[0,"1akP/yifFapZP4s0w+olN6",1,0],[1,45.5,0,31.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (118)",2,[[3,-1403,[1,"f6hza8xBlVRoEFwtzbAlrq"],[308],[2],309]],[0,"44tN2scE9Qh59A21QiDDJP",1,0],[1,45.5,0,26.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (119)",2,[[3,-1404,[1,"a1gAL28ZBS3rQ612By+P2g"],[310],[2],311]],[0,"f91tcQVURbLY+X0eh8Pdnw",1,0],[1,50.5,0,26.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (34)",2,[[3,-1405,[1,"51COpjiI1Ue7Hj3pNWxYVt"],[312],[2],313]],[0,"b4Atf6sHRdeYHrfTjpeNlu",1,0],[1,50.5,0,21.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (35)",2,[[3,-1406,[1,"22e/q7viFRtKcU7ZwZPjwJ"],[314],[2],315]],[0,"b39ICl/HJSWbiRbCgWrqWr",1,0],[1,45.5,0,21.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[5,"SM_Env_Road_01 (112)",2,[[3,-1407,[1,"13FooCEFVeWpyzWxNl3m3E"],[316],[2],317]],[0,"58LM3TzmRZJ6Rrpe/oL/2a",1,0],[1,25.5,0,31.5]],[5,"SM_Env_Road_01 (116)",2,[[3,-1408,[1,"252EyfXAlcrZ7x2Kvc2Bf9"],[318],[2],319]],[0,"c9PeNH3BtWkZkynqI8p1W2",1,0],[1,30.5,0,26.5]],[5,"SM_Env_Road_01 (115)",2,[[3,-1409,[1,"5emOIMt15fS7apTSACOy5C"],[320],[2],321]],[0,"d8jUOuPXJacKhIpFcO82AR",1,0],[1,25.5,0,26.5]],[5,"SM_Env_Road_01 (113)",2,[[3,-1410,[1,"58ISq29ZBfmYnszBQHYt9H"],[322],[2],323]],[0,"85RcRW/EdawIGNKGFDQMLC",1,0],[1,20.5,0,31.5]],[5,"SM_Env_Road_01 (111)",2,[[3,-1411,[1,"7bs+jpotFS37e97BhJZyed"],[324],[2],325]],[0,"7aA6k8DVtdH7ICsA4nikKY",1,0],[1,30.5,0,31.5]],[5,"SM_Env_Road_01 (114)",2,[[3,-1412,[1,"308RlBiHJazLco98Ra0AsA"],[326],[2],327]],[0,"eef2MkClRZo7hP1PXBrHPW",1,0],[1,20.5,0,26.5]],[5,"SM_Env_Road_01 (107)",2,[[3,-1413,[1,"50mG26YqNYYJCOa8ASasuN"],[328],[2],329]],[0,"670MzMYXhaM7sLZhfVQCY1",1,0],[1,5.5,0,31.5]],[5,"SM_Env_Road_01 (102)",2,[[3,-1414,[1,"1bcQ9VMZNVAr2NtC3DxRwp"],[330],[2],331]],[0,"64JsfOcA5Sy67IImOYCUd3",1,0],[1,15.5,0,26.5]],[5,"SM_Env_Road_01 (103)",2,[[3,-1415,[1,"24gVfTY2dW8r0ClzCboTCB"],[332],[2],333]],[0,"d8DseMu4pe2IrWQzP1DZai",1,0],[1,10.5,0,26.5]],[5,"SM_Env_Road_01 (108)",2,[[3,-1416,[1,"9cOQJi4AJZR6/C13wokrhp"],[334],[2],335]],[0,"a3ERaBKmxT4KeLS3ujy0Ex",1,0],[1,10.5,0,31.5]],[5,"SM_Env_Road_01 (106)",2,[[3,-1417,[1,"0ddVSisI1ZmqxV3fvwvooD"],[336],[2],337]],[0,"39ey688FBWGKoryCA7AhSo",1,0],[1,0.5,0,31.5]],[4,"SM_Env_Sidewalk_Corner_03",2,[[3,-1418,[1,"42jG7XI7NevZINq7EERrsq"],[338],[2],339]],[0,"8exw5VVlpdTKe2BSykhkiO",1,0],[1,40.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (105)",2,[[3,-1419,[1,"f4N32Aph9aDraVlPsohDP9"],[340],[2],341]],[0,"97iwwC4ZteqbiFvidOdh3W",1,0],[1,0.5,0,26.5]],[5,"SM_Env_Road_01 (104)",2,[[3,-1420,[1,"34jrkuxnVUepz5d2kAuQUk"],[342],[2],343]],[0,"d9+f1FyUpQgKkT96NFxG/9",1,0],[1,5.5,0,26.5]],[4,"SM_Env_Sidewalk_Corner_03 (1)",2,[[3,-1421,[1,"eabTyc1UFRk5XR8aQPl2FF"],[344],[2],345]],[0,"b5AQOoP1JcuqQPYc4gKhd8",1,0],[1,-19.5,0,-18.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[17,"SM_Env_Sidewalk_Straight_01 (54)",2,[[3,-1422,[1,"c5/eT1Z8RZoZGk+OyhAENt"],[346],[2],347]],[0,"faWCvfLPlSEa/VcfTCyqVJ",1,0],[1,-39.5,0,21.5],[3,0,0,0,-1]],[4,"SM_Env_Sidewalk_Straight_01 (44)",2,[[3,-1423,[1,"615DsRviZUEr5U4hXQFLer"],[348],[2],349]],[0,"eb4f5hiIhTXIcatfBfz08p",1,0],[1,35.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (47)",2,[[3,-1424,[1,"e9cAHulnRafLUqZv9aSLSB"],[350],[2],351]],[0,"c298N4idhXSIBIqAJsh7EM",1,0],[1,30.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (45)",2,[[3,-1425,[1,"46I2pD/6lV64nhaVfuxm5z"],[352],[2],353]],[0,"14iqR+ogpUcraxI7nFBOkr",1,0],[1,20.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (46)",2,[[3,-1426,[1,"34NjY9m6BZm4eBPLJplr75"],[354],[2],355]],[0,"65Or2ymVJROLXxXcAqlA/6",1,0],[1,25.5,0,31.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_01 (101)",2,[[3,-1427,[1,"d02qkFGSJYSpPgYYDyla+W"],[356],[2],357]],[0,"e69M+b5/ta4LJ7cEz5tQWb",1,0],[1,-19.5,0,21.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (100)",2,[[3,-1428,[1,"4bXbQtwwVcX4ZBAypEE/zp"],[358],[2],359]],[0,"caOwKd9ZRT1aVVuk5MBXB4",1,0],[1,-24.5,0,21.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[5,"SM_Env_Road_01 (96)",2,[[3,-1429,[1,"031BSJZBhTr657hrvq0Sq8"],[360],[2],361]],[0,"a9hBGXw/pa9Lfrcsrk1oKl",1,0],[1,-19.5,0,26.5]],[5,"SM_Env_Road_01 (95)",2,[[3,-1430,[1,"70z6wSyLNTPLVylzv49bkq"],[362],[2],363]],[0,"26Zpy78PVb0ZAqjc7Zt5cG",1,0],[1,-24.5,0,26.5]],[5,"SM_Env_Road_01 (97)",2,[[3,-1431,[1,"22/08kZ3pQO7+4pp+nNWtt"],[364],[2],365]],[0,"5bkuuXiZlYZZuUONNkb/+S",1,0],[1,-14.5,0,26.5]],[5,"SM_Env_Road_01 (91)",2,[[3,-1432,[1,"37oVKTu41UBbQSaBEZdP6G"],[366],[2],367]],[0,"d70FkpYTxa/ILETkMeql6n",1,0],[1,-19.5,0,31.5]],[5,"SM_Env_Road_01 (88)",2,[[3,-1433,[1,"b1sbqs8pxZYJUvWrC2JhM0"],[368],[2],369]],[0,"1bXgWS3TddyJxEExJ/AbFu",1,0],[1,-4.5,0,31.5]],[5,"SM_Env_Road_01 (94)",2,[[3,-1434,[1,"1eTOwBjdlQxairIoC5cQVs"],[370],[2],371]],[0,"5fLayYdihUu6i2s6UUpwKv",1,0],[1,-29.5,0,26.5]],[5,"SM_Env_Road_01 (85)",2,[[3,-1435,[1,"c4ohm1oaVfj75QIUVzaE65"],[372],[2],373]],[0,"c2ZzfWunVQBap7MRce3rZ1",1,0],[1,-39.5,0,26.5]],[5,"SM_Env_Road_01 (92)",2,[[3,-1436,[1,"5chI17ckRWOaWu3/L1VwS4"],[374],[2],375]],[0,"475sATuyRfF65/2zu174jF",1,0],[1,-24.5,0,31.5]],[5,"SM_Env_Road_01 (98)",2,[[3,-1437,[1,"c91swtGPNRnoWBJnYG6qpC"],[376],[2],377]],[0,"60o+PnLJpStYmyFXHThrlm",1,0],[1,-9.5,0,26.5]],[5,"SM_Env_Road_01 (84)",2,[[3,-1438,[1,"3dK2VXucNVYpBxg6/CcibM"],[378],[2],379]],[0,"49WwVNHvhRxKEdDKapBOpc",1,0],[1,-39.5,0,31.5]],[4,"SM_Env_Sidewalk_Straight_01 (40)",2,[[3,-1439,[1,"a9KEYx0h5YpIAp3bttbTJE"],[380],[2],381]],[0,"43eB7So5pb4LkTYsA7Q4TI",1,0],[1,-39.5,0,26.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[4,"SM_Env_Sidewalk_Straight_01 (41)",2,[[3,-1440,[1,"f4wZyhtqhVxb7EQ3NBcBRd"],[382],[2],383]],[0,"fdz9zdN1teLaLPYshdE0ju",1,0],[1,-39.5,0,31.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[5,"SM_Env_Road_01 (90)",2,[[3,-1441,[1,"a7fTnZotFZKoO+rKZqaScT"],[384],[2],385]],[0,"99m11XPYdbVZrZxwm5L6vu",1,0],[1,-14.5,0,31.5]],[5,"SM_Env_Road_01 (93)",2,[[3,-1442,[1,"cfbpeJhpJZ55CRbRnyZVRl"],[386],[2],387]],[0,"61aZuwMAJXW5OVAAx8rvrg",1,0],[1,-29.5,0,31.5]],[5,"SM_Env_Road_01 (89)",2,[[3,-1443,[1,"f1W4PmIONUFZcdRxRn9E64"],[388],[2],389]],[0,"53Uvn3G8pbk6iSdE6Eviyd",1,0],[1,-9.5,0,31.5]],[5,"SM_Env_Road_01 (99)",2,[[3,-1444,[1,"6c4xwbLwpXy4YOnx6S6iPc"],[390],[2],391]],[0,"6csId+V71Zbr9MMcx5IAvN",1,0],[1,-4.5,0,26.5]],[5,"SM_Env_Sidewalk_Corner_01 (4)",2,[[3,-1445,[1,"a4nVrI3hdTdLPCwwnuKfQP"],[392],[2],393]],[0,"d7BM9/9g9buohmJ06QuSKr",1,0],[1,-19.5,0,21.5]],[5,"SM_Env_Sidewalk_Straight_01 (36)",2,[[3,-1446,[1,"320cvjz41YeZ/FehkuH4b+"],[394],[2],395]],[0,"d3EHip7HtVy6So5MnudJdv",1,0],[1,-9.5,0,21.5]],[5,"SM_Env_Sidewalk_Straight_01 (38)",2,[[3,-1447,[1,"5bPxScC75Z1aivQvQmJd4R"],[396],[2],397]],[0,"36VCmd3/pb3pmq+VDCHgFb",1,0],[1,0.5,0,21.5]],[5,"SM_Env_Sidewalk_Straight_01 (34)",2,[[3,-1448,[1,"e8zTvt9bNbq7pPvvHaFKQE"],[398],[2],399]],[0,"19ZgOuOYZSfrkk4ChHJ5VH",1,0],[1,10.5,0,21.5]],[5,"SM_Env_Sidewalk_Straight_01 (33)",2,[[3,-1449,[1,"8d1QUzFU1YDZXFSvUh0Yg6"],[400],[2],401]],[0,"d6W5P4pQ9YybBCKvgJUp4E",1,0],[1,15.5,0,21.5]],[5,"SM_Env_Sidewalk_Straight_01 (30)",2,[[3,-1450,[1,"122P7tK2hVxpocCGZlZKq5"],[402],[2],403]],[0,"d0wm5YdQhRf6WsuW38JepU",1,0],[1,20.5,0,21.5]],[5,"SM_Env_Sidewalk_Straight_01 (31)",2,[[3,-1451,[1,"1bu3Uku9Vc8bMGDf4QFHiT"],[404],[2],405]],[0,"f6jmflrrta3oMprnFg+iNp",1,0],[1,25.5,0,21.5]],[5,"SM_Env_Sidewalk_Straight_01 (32)",2,[[3,-1452,[1,"74pb22XyRWWq2x56nln84I"],[406],[2],407]],[0,"d2XP1JvwJe5KEHoNyrAoN0",1,0],[1,30.5,0,21.5]],[4,"SM_Env_Sidewalk_Corner_01 (3)",2,[[3,-1453,[1,"d3FUwXGr9R2IWJKvi1QBqh"],[408],[2],409]],[0,"4alIp+J0pWUpg2cb/N1tAm",1,0],[1,40.5,0,21.5000038],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (29)",2,[[3,-1454,[1,"13cJ/Ip9ZfF75psn5PR6wb"],[410],[2],411]],[0,"f2Azt9KPBVc5sq8WnO2ve9",1,0],[1,-29.5,0,16.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[4,"SM_Env_Sidewalk_Straight_01 (28)",2,[[3,-1455,[1,"8bKWiBqBZRSLXRcPGlXiIe"],[412],[2],413]],[0,"c6/bP3X/Ja57ktwav9dTSI",1,0],[1,-29.5,0,6.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[4,"SM_Env_Sidewalk_Straight_01 (26)",2,[[3,-1456,[1,"4eqAnynK9XgIrmBS2hsi3m"],[414],[2],415]],[0,"c9bzgMVGZUv66fRgK5u4Q8",1,0],[1,-29.5,0,1.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[4,"SM_Env_Sidewalk_Straight_01 (25)",2,[[3,-1457,[1,"69kn5OhBxZRYtS7WoLxaxH"],[416],[2],417]],[0,"2dQcCgGl1fk4oa/AbhC9cd",1,0],[1,-29.5,0,-3.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[4,"SM_Env_Sidewalk_Straight_01 (27)",2,[[3,-1458,[1,"01ZL6nYF5RsaHmWI3j9pRn"],[418],[2],419]],[0,"d2YSiTtJRcgYuJ5UDUSOyT",1,0],[1,-29.5,0,11.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[4,"SM_Env_Sidewalk_Straight_01 (24)",2,[[3,-1459,[1,"80upIdKyJUKb95SCo9XzWi"],[420],[2],421]],[0,"caBpDxIm9QfK5BSKVMBY/S",1,0],[1,-29.5,0,-8.5],[3,0,-0.7071070646864899,0,-0.7071064976864916],[1,0,90.0000459431415,0]],[5,"SM_Env_Road_01 (83)",2,[[3,-1460,[1,"c0RYGZxsJWr4Uvp6J+GFxl"],[422],[2],423]],[0,"70r3KU5mBXL62jwzAB8gEh",1,0],[1,-39.5,0,-18.5]],[5,"SM_Env_Road_01 (82)",2,[[3,-1461,[1,"36U7S3irJZyIwzk/sfnlC3"],[424],[2],425]],[0,"59n7aL1HhTTakUrPO88WS6",1,0],[1,-39.5,0,-23.5]],[5,"SM_Env_Road_01 (78)",2,[[3,-1462,[1,"07qaETbrVeQowKAO+M1fPk"],[426],[2],427]],[0,"0033kVn0NfKZqVFFsvQS+H",1,0],[1,5.5,0,-18.5]],[5,"SM_Env_Road_01 (79)",2,[[3,-1463,[1,"14Tedv21hcfaQ6H4VoE3Z4"],[428],[2],429]],[0,"efsm27l0BVLIYmLgkziOEs",1,0],[1,5.5,0,-23.5]],[5,"SM_Env_Road_01 (77)",2,[[3,-1464,[1,"fecc6nNHFfNrYfwqiZI0VA"],[430],[2],431]],[0,"54LD2WZJ5b1LzeQq3Cb6HG",1,0],[1,-4.500002,0,-18.5]],[5,"SM_Env_Road_01 (66)",2,[[3,-1465,[1,"63+JX8HYteUbFiyTN5ig0B"],[432],[2],433]],[0,"3eWknU4cdbh4C5aYbn4x/S",1,0],[1,-9.5,0,-23.5]],[5,"SM_Env_Road_01 (65)",2,[[3,-1466,[1,"47iZkQXVpU07fFCFlpizGI"],[434],[2],435]],[0,"19j72x+tRemZNrXyFa64ve",1,0],[1,0.4999981,0,-23.5]],[5,"SM_Env_Road_01 (64)",2,[[3,-1467,[1,"62EdwqLmhcXYQhJfsSwGW4"],[436],[2],437]],[0,"f3NCpfuMZYuoKOK0OPjBOz",1,0],[1,-4.500002,0,-23.5]],[5,"SM_Env_Road_01 (72)",2,[[3,-1468,[1,"e2T27Snn9RQ4wfn3mPl+xq"],[438],[2],439]],[0,"57QjJidcZTf4O1iY1Xlt5u",1,0],[1,-24.5,0,-18.5]],[5,"SM_Env_Road_01 (69)",2,[[3,-1469,[1,"1dYBPlbV9R1JNTbupcEdyK"],[440],[2],441]],[0,"8dY/7RaENcQ7x8IY1mirjL",1,0],[1,-24.5,0,-23.5]],[5,"SM_Env_Road_01 (70)",2,[[3,-1470,[1,"678b+SLNhUO7K+E/SIM2rj"],[442],[2],443]],[0,"43/yLd1pBRmLKzULD3Ql8O",1,0],[1,-29.5,0,-23.5]],[5,"SM_Env_Road_01 (67)",2,[[3,-1471,[1,"12d/x0QzFf6r34NTbt0j7G"],[444],[2],445]],[0,"53M4PbzjRRMq4xvGiUSvmO",1,0],[1,-14.5,0,-23.5]],[4,"SM_Env_Sidewalk_Driveway_Wide_01 (2)",2,[[3,-1472,[1,"87QM9gVDRbt4VomFFELXFx"],[446],[2],447]],[0,"e8wLWZdTFVyIUCAsDXeyLr",1,0],[1,10.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (75)",2,[[3,-1473,[1,"e8Fr6faBlW5oP26dVPkiIA"],[448],[2],449]],[0,"aeOmRpimpU3pU1e0PlefR1",1,0],[1,-9.5,0,-18.5]],[5,"SM_Env_Road_01 (74)",2,[[3,-1474,[1,"68tFtKnqtVqqtiE3V1EIxF"],[450],[2],451]],[0,"c7n5D/zSlRT5aSBipM7bPN",1,0],[1,-14.5,0,-18.5]],[5,"SM_Env_Road_01 (71)",2,[[3,-1475,[1,"45t74B2thcp4Cw+61wYGeY"],[452],[2],453]],[0,"b4EfQn5uZRKoOVbBZHeS3I",1,0],[1,-29.5,0,-18.5]],[4,"SM_Env_Sidewalk_Straight_01 (20)",2,[[3,-1476,[1,"86wkLujchaDb/kGp7D3FHV"],[454],[2],455]],[0,"52TcQBhhtcGZMNGCtxmTmd",1,0],[1,5.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (22)",2,[[3,-1477,[1,"c3q8NloLpd/6WEZIkJTesj"],[456],[2],457]],[0,"710modFuVamoioz43wxnaR",1,0],[1,-9.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (21)",2,[[3,-1478,[1,"90498zsBlUSIgHYLKAdNiO"],[458],[2],459]],[0,"30vN4b6PFTC7WAHQKQ5TwO",1,0],[1,-4.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (19)",2,[[3,-1479,[1,"3fdgRes/FTIIVWqe1w8N4Q"],[460],[2],461]],[0,"9fTfUS4v9RO5MfwfUY7qCy",1,0],[1,0.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (16)",2,[[3,-1480,[1,"19E4StR+NZMoB4Rnumo0kg"],[462],[2],463]],[0,"c0XWrILodXyoOrm2KjcOSW",1,0],[1,-19.5,0,11.5],[3,0,-0.7071067311865435,0,0.7071068311865479],[1,0,-89.9999918971528,0]],[4,"SM_Env_Sidewalk_Straight_01 (15)",2,[[3,-1481,[1,"ec1Jj+gGBeDYt5+vYCJfkD"],[464],[2],465]],[0,"eey/r1wyNRya+slbwXV5V9",1,0],[1,-19.5,0,6.5],[3,0,-0.7071067311865435,0,0.7071068311865479],[1,0,-89.9999918971528,0]],[4,"SM_Env_Road_01 (50)",2,[[3,-1482,[1,"60RRET3xVRUb03pLieW7J6"],[466],[2],467]],[0,"2dAIbAMC9VcoF2UeM01u80",1,0],[1,-19.5,0,-8.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (13)",2,[[3,-1483,[1,"dfMEvS2E9TarLYVqFGWhWC"],[468],[2],469]],[0,"f7AG9g9c1Ue5rqTRST7Wjs",1,0],[1,-19.5,0,-13.5],[3,0,-0.7071067311865435,0,0.7071068311865479],[1,0,-89.9999918971528,0]],[4,"SM_Env_Sidewalk_Straight_01 (12)",2,[[3,-1484,[1,"aet8/De3NbLq+BWe3I4VKR"],[470],[2],471]],[0,"2aEts525lfU7+jYUFw31MJ",1,0],[1,-19.5,0,-8.5],[3,0,-0.7071067311865435,0,0.7071068311865479],[1,0,-89.9999918971528,0]],[4,"SM_Env_Sidewalk_Straight_01 (11)",2,[[3,-1485,[1,"78+AAUrcBWl4AZBOVWeIw1"],[472],[2],473]],[0,"33UKMOpVpZjbWQmJ2LKn0g",1,0],[1,-19.5,0,-3.5],[3,0,-0.7071067311865435,0,0.7071068311865479],[1,0,-89.9999918971528,0]],[4,"SM_Env_Road_01 (61)",2,[[3,-1486,[1,"04N64U8KVSg7gnXXX1lWw9"],[474],[2],475]],[0,"c8O4rDbQlQhaMqhfBZh+Y8",1,0],[1,-24.5,0,-3.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (54)",2,[[3,-1487,[1,"76nR87wARWn6f5qiTXXfss"],[476],[2],477]],[0,"813Cl/IDZXYZcgXkpHXFOS",1,0],[1,-19.5,0,6.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (55)",2,[[3,-1488,[1,"45JOtRs3dS57Q0vKgOdf/3"],[478],[2],479]],[0,"d5ft58aRNf2pnCKFcMIZf4",1,0],[1,-19.5,0,11.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (53)",2,[[3,-1489,[1,"cfAebRRCtZ07xeKvRBUs3J"],[480],[2],481]],[0,"3dZlriRVRRVp/SCLJ5g2H6",1,0],[1,-19.5,0,1.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (52)",2,[[3,-1490,[1,"6dnE0KKAZbLZhBOf/8FulU"],[482],[2],483]],[0,"f2e0zqL/Rb95xs+IzHJxwu",1,0],[1,-19.5,0,-3.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (58)",2,[[3,-1491,[1,"0dLtu7YeJWh4YytD2xhqv+"],[484],[2],485]],[0,"ffyyQxpFRU865y3pwdNUzI",1,0],[1,-24.5,0,11.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (59)",2,[[3,-1492,[1,"c7Hr/rVG5YobO27MY8A9P0"],[486],[2],487]],[0,"1bKtYowtVYepdVfkNNNB89",1,0],[1,-24.5,0,6.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (56)",2,[[3,-1493,[1,"b2+AFSZ4VYBqU+24NdivNQ"],[488],[2],489]],[0,"e8KCARSOdQ9pqsHMx3EpnF",1,0],[1,-19.5,0,16.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (57)",2,[[3,-1494,[1,"460I/dvmFbxp+Nw7hwfDm8"],[490],[2],491]],[0,"78WrD/rfNaJ6YkJrVBhbVI",1,0],[1,-24.5,0,16.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (60)",2,[[3,-1495,[1,"7bY4Gls1NcToP5UgPlDB8/"],[492],[2],493]],[0,"ecmXeauvZbtrItfImXZpyx",1,0],[1,-24.5,0,1.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (63)",2,[[3,-1496,[1,"18AVCq+pReZKDLPW5nejJP"],[494],[2],495]],[0,"93jed3SCFS7aHtcWlAbOdQ",1,0],[1,-24.5,0,-8.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[5,"SM_Env_Road_01 (49)",2,[[3,-1497,[1,"afGsbs5TFUHaRV/y6EJvuY"],[496],[2],497]],[0,"b8ELkrrDde9YVtnRJqGP/H",1,0],[1,75.5,0,-23.5]],[5,"SM_Env_Road_01 (47)",2,[[3,-1498,[1,"fbB2A5zMdbzqsLWzsFins/"],[498],[2],499]],[0,"73l4Lf4VdZv5rVS3IY3Y0R",1,0],[1,70.5,0,-23.5]],[5,"SM_Env_Road_01 (44)",2,[[3,-1499,[1,"e6kLOFBIlZrK4loPwpN/C+"],[500],[2],501]],[0,"6aK+4amW9Rg4JU48mIOaHo",1,0],[1,55.5,0,-23.5]],[5,"SM_Env_Road_01 (46)",2,[[3,-1500,[1,"c0mwzFA35XYpOh3TKhZX+Y"],[502],[2],503]],[0,"c4eZkxgR5WKahf660nb3Q4",1,0],[1,65.5,0,-23.5]],[5,"SM_Env_Road_01 (45)",2,[[3,-1501,[1,"35zAcvkUVVl6GfX7OhMJpC"],[504],[2],505]],[0,"52xok7lGFZYKAWdbnBWIWg",1,0],[1,60.5,0,-23.5]],[5,"SM_Env_Road_01 (48)",2,[[3,-1502,[1,"07LxBPYI9dmYjrVXXQW7/J"],[506],[2],507]],[0,"dbDN61hKJeipzfgpEJbMC8",1,0],[1,80.5,0,-23.5]],[5,"SM_Env_Road_01 (36)",2,[[3,-1503,[1,"56t5IYqVBU6ZTP2+Njd7vQ"],[508],[2],509]],[0,"b8aC3VmZpb1btrHYe3ACG/",1,0],[1,75.5,0,-18.5]],[5,"SM_Env_Road_01 (41)",2,[[3,-1504,[1,"e0OtbAootY+bNu6QmkrDT/"],[510],[2],511]],[0,"aezHp35HlYpJBYHkl8z1ON",1,0],[1,55.5,0,-18.5]],[5,"SM_Env_Road_01 (38)",2,[[3,-1505,[1,"43/2hNy6hfMYqN1c6q4nWB"],[512],[2],513]],[0,"3czuccYFxQWbsw5WPK3bRU",1,0],[1,70.5,0,-18.5]],[5,"SM_Env_Road_01 (37)",2,[[3,-1506,[1,"04rCZ1frNQdq0XHb5UNUwq"],[514],[2],515]],[0,"c5UpsytFpeiIQOtaV5V20B",1,0],[1,80.5,0,-18.5]],[5,"SM_Env_Road_01 (39)",2,[[3,-1507,[1,"ab3oDht/FY+4NG4CyX/SgS"],[516],[2],517]],[0,"21p8k/ca9e7LzZQZhvMx7x",1,0],[1,65.5,0,-18.5]],[5,"SM_Env_Road_01 (40)",2,[[3,-1508,[1,"c7zPZGgAhUqKJ31bRb8beu"],[518],[2],519]],[0,"a9RehwrbldMqQBK/h85Td5",1,0],[1,60.5,0,-18.5]],[4,"SM_Env_Road_01 (28)",2,[[3,-1509,[1,"7fs1FPrFtfxIOI53heCYI3"],[520],[2],521]],[0,"43Itc2aulSL5/an3Jb0mDX",1,0],[1,50.5,0,11.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (27)",2,[[3,-1510,[1,"dcFXOq+BBTIadfPokE/HdN"],[522],[2],523]],[0,"e661iVlh9bm6DqcPEdcxwO",1,0],[1,50.5,0,16.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (31)",2,[[3,-1511,[1,"d0FM7wN5VaMabjM+OOV2IV"],[524],[2],525]],[0,"d5XMTS5yhdMp+8z+6RiNDd",1,0],[1,50.5,0,-3.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (33)",2,[[3,-1512,[1,"04ZzhacXlaCIXKow5HkXsf"],[526],[2],527]],[0,"42TsnsP1NTiLkknYHBul7J",1,0],[1,50.5,0,-8.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (29)",2,[[3,-1513,[1,"22mBKyOilaW6Kku7/88Fvm"],[528],[2],529]],[0,"a0+NIOw8xYrYVuLF971+yy",1,0],[1,50.5,0,6.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (26)",2,[[3,-1514,[1,"d0RObrXwZbMpfATOWtvg+P"],[530],[2],531]],[0,"a3osNwRmNdyLgM+stZR8p7",1,0],[1,50.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (25)",2,[[3,-1515,[1,"9dSj+R1N9XwIDztao/Dg+N"],[532],[2],533]],[0,"15gUryG19TWaFDSa/oisUY",1,0],[1,45.5,0,-23.5]],[6,"SM_Env_Grass_01 (16)",2,[[3,-1516,[1,"8fe8DDEZldTY8194PwnKqa"],[534],[2],535]],[0,"13DXLVV4dVQaJwtDv7kOXq",1,0],[1,35.5,0,4],[3,0,1,0,0],[1,0.5,0.5,0.5],[1,0,180,0]],[4,"SM_Env_Grass_01 (15)",2,[[3,-1517,[1,"54B8kncDZQH5C31StlrYpZ"],[536],[2],537]],[0,"14rJBwfy9SrqoHl7HWJZs5",1,0],[1,35.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (14)",2,[[3,-1518,[1,"8653Hd1KFYW64B72004mr2"],[538],[2],539]],[0,"10YiWxZFJZYo4UM61dhgBP",1,0],[1,30.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (13)",2,[[3,-1519,[1,"6dMgcpZydbKL0SFxM1HvGp"],[540],[2],541]],[0,"09kf9RT3BeSKuZpMipFKak",1,0],[1,25.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (10)",2,[[3,-1520,[1,"57TcHnbvRePKqYF0MAmoEB"],[542],[2],543]],[0,"dfuynt15BfDL8n/Hr/QlMa",1,0],[1,25.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (9)",2,[[3,-1521,[1,"5dN0tKoMZds6lRK0/Bkxsp"],[544],[2],545]],[0,"00AO/IfCFXH4AIBM9JaEbk",1,0],[1,30.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (8)",2,[[3,-1522,[1,"02hFe0e7dfe77J3MhW5Ydi"],[546],[2],547]],[0,"20faXVdQdalaoKfHmXtD8Y",1,0],[1,35.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Env_Grass_01 (7)",2,[[3,-1523,[1,"2eNL1NeZ9VT5Gt1VYjWoKv"],[548],[2],549]],[0,"07C5UwqxpZybPRJ+4GMZLo",1,0],[1,35.5,0,1.5],[3,0,1,0,0],[1,0.5,0.5,0.5],[1,0,180,0]],[6,"SM_Env_Grass_01 (6)",2,[[3,-1524,[1,"d3DWRrX+9Y/JfgEqOIa+Is"],[550],[2],551]],[0,"c7brE5cu1VtpJhhREvkWFq",1,0],[1,35.5,0,-3.5],[3,0,1,0,0],[1,0.5,1,1],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (4)",2,[[3,-1525,[1,"d1iS/KPcNfMp/nbs6Z37Ni"],[552],[2],553]],[0,"5d7WOayRpffq5PLnW0ea/4",1,0],[1,35.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Env_Grass_01 (5)",2,[[3,-1526,[1,"dbNoGwpUtVrKwHTdN7G42h"],[554],[2],555]],[0,"a0zCggFfNUqqYlEymKLP/Z",1,0],[1,35.5,0,-8.5],[3,0,1,0,0],[1,0.5,1,1],[1,0,180,0]],[4,"SM_Env_Grass_01 (4)",2,[[3,-1527,[1,"9ed0p4YMFdHYY+W4XmEB3S"],[556],[2],557]],[0,"80tnmefW9SWpDs8Iic8F2+",1,0],[1,35.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (16)",2,[[3,-1528,[1,"c01dT5+0pRHKip1v1f1fF1"],[558],[2],559]],[0,"99NAUJ8qZeUrfw2KSOkrSl",1,0],[1,30.5,0,-23.5]],[4,"SM_Env_Road_01 (17)",2,[[3,-1529,[1,"38+DVIJvFTbZY3ksxxA30U"],[560],[2],561]],[0,"6dO06nmE9TdYC0rizjr+YR",1,0],[1,35.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (2)",2,[[3,-1530,[1,"36CmoUIRBb37TpjjJsKT36"],[562],[2],563]],[0,"11O8dIQgBW3KzMReyt66D6",1,0],[1,30.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_01 (15)",2,[[3,-1531,[1,"579/bNyqRYZ4+19lFwb5jg"],[564],[2],565]],[0,"3b2hHYqFRTkaqvQN6zD3oG",1,0],[1,45.5,0,-8.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (13)",2,[[3,-1532,[1,"bcZQWf+71TF622aCVjB3xH"],[566],[2],567]],[0,"8aEsvFJn5VG7RvI5VnXt9C",1,0],[1,45.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (12)",2,[[3,-1533,[1,"4eaJkYkYpUNZgmMM5RUChL"],[568],[2],569]],[0,"2fn0UbicFT/LjgK8z78QRY",1,0],[1,40.5,0,-23.5]],[4,"SM_Env_Road_01 (9)",2,[[3,-1534,[1,"f3GkjWPmhc4bTxLjybtOAy"],[570],[2],571]],[0,"54XK8rPXhVcZps1BaS7+f2",1,0],[1,15.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (8)",2,[[3,-1535,[1,"9c23Gh+jxRzpicxCDUqqij"],[572],[2],573]],[0,"7fB7qWScJUnLSSMRUHVNbC",1,0],[1,10.5,0,-23.5]],[4,"SM_Env_Road_01 (6)",2,[[3,-1536,[1,"79zQa3Z0RaRbJvtS6atTnI"],[574],[2],575]],[0,"59VvJV6G1fvJIkTb3pHQ7k",1,0],[1,20.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (7)",2,[[3,-1537,[1,"66sg/jHdFR1LUIxoNbTMSJ"],[576],[2],577]],[0,"b0J/pVwIlWWb2ZnAq/Xjm1",1,0],[1,15.5,0,-23.5]],[4,"SM_Env_Road_01 (3)",2,[[3,-1538,[1,"4c+9RRo/xZj7D7yFGDhorL"],[578],[2],579]],[0,"efKmqYJpleOI+1Yd/aAPio",1,0],[1,30.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (5)",2,[[3,-1539,[1,"c4mJPl9W9RPojabMoturSR"],[580],[2],581]],[0,"f0I/iehblerayJ38XHxHVN",1,0],[1,25.5,0,-23.5]],[4,"SM_Env_Sidewalk_Straight_01 (14)",2,[[3,-1540,[1,"f4EXfxQFdbYYh4nGyGqowG"],[582],[2],583]],[0,"14/lfmcJNepY1txVQBkDPl",1,0],[1,-19.5,0,1.5],[3,0,-0.7071067311865435,0,0.7071068311865479],[1,0,-89.9999918971528,0]],[4,"SM_Env_Sidewalk_Driveway_Wide_01",2,[[3,-1541,[1,"5a4yC+U9Ra/Icf2FTGUa+V"],[584],[2],585]],[0,"cfFt14Fn5YrLoM9hSrbCfc",1,0],[1,20.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_01 (2)",2,[[3,-1542,[1,"6cOIFe9LxWq63Ot/s+8REF"],[586],[2],587]],[0,"06w1C7pupQy7CxAncmbuq5",1,0],[1,25.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (4)",2,[[3,-1543,[1,"74E2CbrHFZXIknKAnhSgMA"],[588],[2],589]],[0,"3bg7/cDslcsL836thBnFd3",1,0],[1,20.5,0,-23.5]],[4,"SM_Env_Sidewalk_Straight_01 (2)",2,[[3,-1544,[1,"7ewQ1vTi9WibSxUUP2pYq7"],[590],[2],591]],[0,"9eM9iVpuZWLKStuEs1bVRA",1,0],[1,40.5,0,-8.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (3)",2,[[3,-1545,[1,"51PyJRayRdyrsFW9CztngU"],[592],[2],593]],[0,"dcHr43VT5bu7pPynSUCFbK",1,0],[1,40.5,0,-3.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[5,"SM_Env_Road_01 (109)",2,[[3,-1546,[1,"d7afCT0aRQsIxeqiTOeHdk"],[594],[2],595]],[0,"b98xBAy/hdeLlz8e0OLac3",1,0],[1,15.5,0,31.5]],[4,"SM_Env_Sidewalk_Straight_01 (5)",2,[[3,-1547,[1,"c9/wglTgxc3LgRaOtExmhA"],[596],[2],597]],[0,"20C0DowC1S2qNO7wJkQPIK",1,0],[1,40.5,0,1.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (6)",2,[[3,-1548,[1,"71ed/qk35Zaax8jLHLGMmG"],[598],[2],599]],[0,"8ePCY8HX1Z0KwGlpxY/2Po",1,0],[1,40.5,0,6.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (7)",2,[[3,-1549,[1,"9ctBSbJB9YcaTdkzs36fI9"],[600],[2],601]],[0,"9ehz/d4iZRPqF1TjwclrAq",1,0],[1,40.5,0,11.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (8)",2,[[3,-1550,[1,"81LmOYcVdcBrqRnbmJEgup"],[602],[2],603]],[0,"22QIWOBJhb+YqkEGbG/Yfk",1,0],[1,40.5,0,16.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (21)",2,[[3,-1551,[1,"f9N0S+tk5RXYaclXKByQ+Z"],[604],[2],605]],[0,"6dqqEAPg9SlYLHtoQmlWDq",1,0],[1,45.5,0,1.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (22)",2,[[3,-1552,[1,"f2a+2kCYRVwphVJw0fyjjj"],[606],[2],607]],[0,"b3n8ezZTBU+a1p5A2Ki/7v",1,0],[1,45.5,0,6.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (23)",2,[[3,-1553,[1,"1d8pYGBvpWYYgwn0pWRfbk"],[608],[2],609]],[0,"5decoxaMddV4fjFpyjErjJ",1,0],[1,45.5,0,11.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (24)",2,[[3,-1554,[1,"2dpanBhjtVjZWgKbj+5LQF"],[610],[2],611]],[0,"efo6j56DVbMIPmqlis2vT6",1,0],[1,45.5,0,16.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[5,"SM_Env_Road_01 (76)",2,[[3,-1555,[1,"3cANQUa4tR/7WLmoNi7yog"],[612],[2],613]],[0,"5aV+7RYYBcYqk6pzZXsFre",1,0],[1,0.4999981,0,-18.5]],[9,"House_01",2,[[43,"GroundFloor_Ceiling",-1556,[0,"82eB3NihJRQJj7zyvTv4Bg",1,0]]],[0,"bewe61wuRUEL3OXAPTPhzb",1,0],[1,25.5,0.5,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (9)",2,[[3,-1557,[1,"0dr6i+goFbA4czPBYx279H"],[614],[2],615]],[0,"75jnL7aoNX1anqvtF0I7lu",1,0],[1,15.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Sidewalk_Straight_01 (10)",2,[[3,-1558,[1,"feufDmS2NRUKCQQr3KQ552"],[616],[2],617]],[0,"5cyMr/k69VtahxpXBZ39dQ",1,0],[1,25.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (17)",2,[[3,-1559,[1,"71nkmv4DpUbK7s9afX9vJ5"],[618],[2],619]],[0,"89f9OJcGlWWIQ/YpSlYp5l",1,0],[1,20.5,0,-28.5]],[5,"SM_Env_Sidewalk_Driveway_Wide_01 (3)",2,[[3,-1560,[1,"edPNBIoI5ZJK+l4vWqiVrf"],[620],[2],621]],[0,"78MzXJH0ldMqlPcrNDHbL/",1,0],[1,15.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (42)",2,[[3,-1561,[1,"04FIO3apFaTZ/cAP5Fs6+h"],[622],[2],623]],[0,"afKKUFpq5Wd41x9e6tmMUB",1,0],[1,10.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (43)",2,[[3,-1562,[1,"38DNnEa8Ve2ZH5Nxdbsvo3"],[624],[2],625]],[0,"cc25l8ujRZGJPODMPU8ZmC",1,0],[1,5.5,0,-28.5]],[5,"SM_Env_Sidewalk_Driveway_Wide_01 (4)",2,[[3,-1563,[1,"1dsbFvXq5UKpi1V0d8JmmH"],[626],[2],627]],[0,"f17VOGRPBV3pQbPeLr2IAB",1,0],[1,0.5,0,-28.5]],[4,"SM_Env_Sidewalk_Corner_03 (2)",2,[[3,-1564,[1,"baDwB57wRdh5ANg8HHKC0O"],[628],[2],629]],[0,"f1NV2YNipXb7jXbs8Wn+98",1,0],[1,-29.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Sidewalk_Straight_01 (73)",2,[[3,-1565,[1,"b1kXm9Sn9V65e/yK+C+gYc"],[630],[2],631]],[0,"e4Ma4ZtydYr5yZY60hkc4M",1,0],[1,-4.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (74)",2,[[3,-1566,[1,"02+kiQglxbYLbDkTvY+aNe"],[632],[2],633]],[0,"56ARIOtgBagq2gvZej1TK2",1,0],[1,-9.5,0,-28.5]],[4,"SM_Env_Sidewalk_Straight_02 (1)",2,[[3,-1567,[1,"c7ZEnN4kxVT6pZTSBUetjA"],[634],[2],635]],[0,"87/HpDUGlYMJ3BQ66MoaLK",1,0],[1,50.5,0,26.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[4,"SM_Env_Driveway_Wide_PathRight_01 (1)",2,[[3,-1568,[1,"cen7z8Zj5V8Zre6qEuMSEE"],[636],[2],637]],[0,"a1JUwyZ7hWnaJqrV0cFpLR",1,0],[1,10.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (3)",2,[[3,-1569,[1,"02eSOtqtdZnaoZ9E+IecE7"],[638],[2],639]],[0,"94lnj2pD5b6anPclygfq2/",1,0],[1,15.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (110)",2,[[3,-1570,[1,"36SoRQ1D1bwpXFpax4zOiO"],[640],[2],641]],[0,"579ecqFCxWL4/5R6xpp7zj",1,0],[1,-49.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (104)",2,[[3,-1571,[1,"baECSGE7lZv6L6bd3G8dZJ"],[642],[2],643]],[0,"5duk9xP7pcKIAH0orUxgai",1,0],[1,-44.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (105)",2,[[3,-1572,[1,"e70MDiKyxdLaRracsoHKTN"],[644],[2],645]],[0,"92nqolGd9WnrVCx1S58JkC",1,0],[1,-49.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (108)",2,[[3,-1573,[1,"7dZu/LppJU2JMJ84sow8VH"],[646],[2],647]],[0,"46+x1c5xBZx7BqE7VDsJ8e",1,0],[1,-59.5,0,-28.5]],[5,"SM_Env_Sidewalk_Straight_01 (109)",2,[[3,-1574,[1,"07H0rgxaNcLa4HzlTIrxJU"],[648],[2],649]],[0,"18GlY6cIxbU5/AefxW31ya",1,0],[1,-54.5,0,-28.5]],[4,"SM_Env_Sidewalk_Straight_01 (111)",2,[[3,-1575,[1,"0foE5vlldSEZTcmYZKL5Kf"],[650],[2],651]],[0,"edzaHR5PVZurs6BSjcqVYx",1,0],[1,-59.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (112)",2,[[3,-1576,[1,"6b86041idWuJ4s1U3/Bgjr"],[652],[2],653]],[0,"68oFZwGhNc+Ikl1/b5yIM6",1,0],[1,-64.5,0,-28.5]],[4,"SM_Env_Sidewalk_Straight_01 (114)",2,[[3,-1577,[1,"2dok12HlhdJYRBEgDz7fGv"],[654],[2],655]],[0,"3a23foyxRX+5aKrnUfGSyX",1,0],[1,-64.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (130)",2,[[3,-1578,[1,"e8KasOCbtQ9bYJq6L4dmFe"],[656],[2],657]],[0,"a7UK6hkiVRPKHoMnvXvwDS",1,0],[1,-44.5,0,-18.5]],[5,"SM_Env_Road_01 (132)",2,[[3,-1579,[1,"35obfCU5tXXqAiq9zDCa6s"],[658],[2],659]],[0,"802N77XYdUTbBPTzZ5KEYt",1,0],[1,-49.5,0,-23.5]],[5,"SM_Env_Road_01 (133)",2,[[3,-1580,[1,"92YR1aQGNXB5Ns+fTqMemU"],[660],[2],661]],[0,"a0FyEjI2JVRK1vmSdjfN0y",1,0],[1,-49.5,0,-18.5]],[5,"SM_Env_Road_01 (134)",2,[[3,-1581,[1,"54JAyHi6pY56layNiEhCiH"],[662],[2],663]],[0,"f5FZdJq3pYfpjwcszaCRD/",1,0],[1,-54.5,0,-18.5]],[5,"SM_Env_Road_01 (135)",2,[[3,-1582,[1,"5b1HMtC9tbHo3luRLRXx9m"],[664],[2],665]],[0,"2aXDy0mtxRj4GLf2f9t36R",1,0],[1,-54.5,0,-23.5]],[5,"SM_Env_Road_01 (136)",2,[[3,-1583,[1,"5cW964JCVXJa+G0FBmFBAw"],[666],[2],667]],[0,"93dQ24q4RWZZbHEYfoZmoS",1,0],[1,-59.5,0,-23.5]],[5,"SM_Env_Road_01 (137)",2,[[3,-1584,[1,"a6EdIKGuBcMZ7v/0FVP7v6"],[668],[2],669]],[0,"68pFcX6vZdWolSfJu1M7pN",1,0],[1,-59.5,0,-18.5]],[5,"SM_Env_Road_01 (138)",2,[[3,-1585,[1,"d6iZtDCPtW1LnH679hNLq/"],[670],[2],671]],[0,"f2TBZMnK1fFqL2GnhUtIUT",1,0],[1,-64.5,0,-18.5]],[5,"SM_Env_Road_01 (139)",2,[[3,-1586,[1,"92EQ6n15RYwoc1VNYyCA1o"],[672],[2],673]],[0,"c3A4onpxpUo7UC5e4TcKZO",1,0],[1,-64.5,0,-23.5]],[5,"SM_Env_Road_01 (140)",2,[[3,-1587,[1,"c7bIAH+5JdvKcG3TIaoVLt"],[674],[2],675]],[0,"675cCcP4pboa9d/HoiizdO",1,0],[1,-69.5,0,-23.5]],[5,"SM_Env_Road_01 (141)",2,[[3,-1588,[1,"b2a9LixwtRzLNDPOBMcNoW"],[676],[2],677]],[0,"84Ho+BYKBQ8r2riNiBtO7A",1,0],[1,-69.5,0,-18.5]],[5,"SM_Env_Sidewalk_Straight_02 (2)",2,[[3,-1589,[1,"9cEOyZ0jhYZIlBzSr7M+VK"],[678],[2],679]],[0,"2b/6LFteRUbbRt1hBce+rN",1,0],[1,55.5,0,-28.5]],[4,"SM_Env_Road_Crossing_02 (16)",2,[[3,-1590,[1,"9ek/kGeZBU54I+UqR466Fj"],[680],[2],681]],[0,"69kMhGkyhdQpJB2oOAX8aV",1,0],[1,-29.5,0,-28.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_Crossing_02 (17)",2,[[3,-1591,[1,"8eW75q6QVWZ6Lwa8J1j4Q3"],[682],[2],683]],[0,"89mRkpZ6tW4KGrPaEkBFtj",1,0],[1,-29.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_01 (30)",2,[[3,-1592,[1,"92q8Lwdq9UJb3GOuYe+J9H"],[684],[2],685]],[0,"afLmJTYEFQ24P2bWmQOQWD",1,0],[1,50.5,0,1.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Grass_01 (17)",2,[[3,-1593,[1,"13US+feZ1QeqhbDeKEMF9d"],[686],[2],687]],[0,"5dA1GGt51T9a5uystlo/v8",1,0],[1,15.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (25)",2,[[3,-1594,[1,"01GTNeCZlUULjNj7LMUj5b"],[688],[2],689]],[0,"05WwqFq6Bep6g7CWBhLBjq",1,0],[1,15.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (26)",2,[[3,-1595,[1,"62qe73g1xaS6XQiTTkFFqe"],[690],[2],691]],[0,"d4X81LzddWMIUP1ul55uYj",1,0],[1,15.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (27)",2,[[3,-1596,[1,"90VXZAAStddozRVKi41+FL"],[692],[2],693]],[0,"e52egyHtRRWpX5gQJ2M+wI",1,0],[1,15.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (29)",2,[[3,-1597,[1,"2c/613f5Rf/4bORqrYbtSB"],[694],[2],695]],[0,"1dr69/v1hYlri0f5An8Ia/",1,0],[1,15.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (36)",2,[[3,-1598,[1,"50/5OqjNdfC4Qd+TJu8nI3"],[696],[2],697]],[0,"a89izrJhNasJ8COhcFfZlC",1,0],[1,20.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (37)",2,[[3,-1599,[1,"ddKIcCGrtRKY/lLGWsblAz"],[698],[2],699]],[0,"deTbJDCuBVh6czwSyUyHpG",1,0],[1,5.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (39)",2,[[3,-1600,[1,"e595CTISZW/Kg8Kve20VdH"],[700],[2],701]],[0,"29mFkMSK9WkabeU3bP2A/E",1,0],[1,-4.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (41)",2,[[3,-1601,[1,"33CJG02LJYxqpUkjJbLMQW"],[702],[2],703]],[0,"e9FHhXx6dYnb7cIn8z+Ccg",1,0],[1,-9.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (42)",2,[[3,-1602,[1,"f4JIdCPOBY6L8XIEwNiolQ"],[704],[2],705]],[0,"40Xdqm8TZYC6rSpIbMsC6v",1,0],[1,-9.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (43)",2,[[3,-1603,[1,"55Ys3VOp5dp6VIqLG8q/Od"],[706],[2],707]],[0,"a49CvM6hxeopHtIraApnut",1,0],[1,-9.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (44)",2,[[3,-1604,[1,"baweIj75ZSY5YJizhdIXrd"],[708],[2],709]],[0,"d3oETOg5RTEpAuICcVUvj7",1,0],[1,-9.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (45)",2,[[3,-1605,[1,"60RSjEEoFd17mjzpdHSHzw"],[710],[2],711]],[0,"539IMUiWFS/pJquhSDXKu1",1,0],[1,-9.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_01 (20)",2,[[3,-1606,[1,"13ERCEOutQiq2Ap/qjrb1N"],[712],[2],713]],[0,"d97TS82WxQO6G+DbwRMGEi",1,0],[1,45.5,0,-3.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (1)",2,[[3,-1607,[1,"9cBuuGBjJX46FH3P0l5djh"],[714],[2],715]],[0,"28A2PSM9Ndsrw4Ph275TBH",1,0],[1,30.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[30,"SM_Env_Sidewalk_Straight_Path_01 (1)",2,[[3,-1608,[1,"b5Fn/CbJBYQbHXDvMr/wrd"],[716],[2],717]],[0,"b1++HSuvxUYKIsS+BENfHb",1,0],[1,0.5,0,21.5],[1,-1,1,1]],[4,"SM_Env_Path_01",2,[[3,-1609,[1,"f9NsiL72tSDJcnPqY02yHv"],[718],[2],719]],[0,"b5FecY8QVW3romvzvk/+YR",1,0],[1,25.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (53)",2,[[3,-1610,[1,"5bGujxws1Vo7guWeJ7EAkV"],[720],[2],721]],[0,"30/Xkf7+JbQIrVzchCvJvM",1,0],[1,-4.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (54)",2,[[3,-1611,[1,"10NUUXdv9Ys7WAKulBrSDH"],[722],[2],723]],[0,"1bnKm7LXxbUbA5/RrpaTN8",1,0],[1,-4.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (55)",2,[[3,-1612,[1,"6fK+ee6eBYpqa0J584EIBG"],[724],[2],725]],[0,"a8lVuE8K5Y+YEWLcJKiMi1",1,0],[1,0.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (56)",2,[[3,-1613,[1,"79kSt2SLhSl5vvYTGC+pd6"],[726],[2],727]],[0,"cct8bJPfleGIpeE9wjfkiV",1,0],[1,0.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (57)",2,[[3,-1614,[1,"2dNY2tGMRecbt10+znlPRv"],[728],[2],729]],[0,"afK4d+CxRS5I/AQGx8U1jT",1,0],[1,0.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (106)",2,[[3,-1615,[1,"68ixVVYGhacbN1NlCr92nq"],[730],[2],731]],[0,"d7VApm9ORfqJmqAX8Z/wwM",1,0],[1,-44.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (131)",2,[[3,-1616,[1,"74CXxTactRJY8WzCYxbSqo"],[732],[2],733]],[0,"37Lr1q+wJV+alkdeBEklcX",1,0],[1,-44.5,0,-23.5]],[5,"SM_Env_Sidewalk_Driveway_Wide_01 (1)",2,[[3,-1617,[1,"c895qLZ3ZbwrDB9VKEeRno"],[734],[2],735]],[0,"85dB7ImohTN5ahNwbNwnEa",1,0],[1,-24.5,0,-28.5]],[5,"SM_Env_Driveway_Wide_01 (3)",2,[[3,-1618,[1,"f3RdJw301bDp4iENHaojz9"],[736],[2],737]],[0,"18PCifVM9cOqqLZ03XOpvU",1,0],[1,0.5,0,-33.5]],[5,"SM_Env_Driveway_Wide_01 (4)",2,[[3,-1619,[1,"9fJ1NGXupQMp83/jruC0+H"],[738],[2],739]],[0,"721/tIjjhTGJIhCkCmqcuw",1,0],[1,15.5,0,-33.5]],[4,"SM_Env_Sidewalk_Corner_End_01 (2)",2,[[3,-1620,[1,"c8Gj5QeI5Rd7SwPyalg5bc"],[740],[2],741]],[0,"41NxIGlZZVx4YP1Fe7QoQR",1,0],[1,65.5,0,-33.5],[3,0,0.7071085391843178,0,0.7071050231844065],[1,0,90.00028489608792,0]],[4,"SM_Env_Sidewalk_Straight_01 (39)",2,[[3,-1621,[1,"b3DrjamshdE48P+q9b4WI2"],[742],[2],743]],[0,"9dpE7FZb5eKppTSit9p6zz",1,0],[1,65.5,0,-33.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Sidewalk_Straight_02 (5)",2,[[3,-1622,[1,"b62kyeZkRVXKGyNRpkTgnh"],[744],[2],745]],[0,"2aWHnQ2SJR4JER80axGFxm",1,0],[1,70.5,0,-33.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Sidewalk_Straight_01 (48)",2,[[3,-1623,[1,"76ITJYqfxVvp//V3grrWBp"],[746],[2],747]],[0,"32VavUOZNWSKK4NNPHvNGj",1,0],[1,75.5,0,-33.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Sidewalk_Straight_01 (49)",2,[[3,-1624,[1,"e3q1s7X4JUeZf/IHV497aj"],[748],[2],749]],[0,"eahWpCwYdV+oBpneZvze+/",1,0],[1,80.5,0,-33.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Sidewalk_Corner_End_01 (3)",2,[[3,-1625,[1,"f7IAqO5cBc85NlGtIZQrdF"],[750],[2],751]],[0,"e8SQHwWMVaZqStn7OKtlm9",1,0],[1,85.5,0,-33.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Sidewalk_Corner_01 (2)",2,[[3,-1626,[1,"e9e+XvfPdaLbUtyvisOjCc"],[752],[2],753]],[0,"9dt5RRMB1WUK0x7GkBVjLp",1,0],[1,65.5,0,-28.5],[3,0,0.7071089991830664,0,0.7071045631830715],[1,0,90.00035944228567,0]],[4,"SM_Env_Sidewalk_Corner_01 (6)",2,[[3,-1627,[1,"3f6Jc/Ep9eupC9BMJH8Jj5"],[754],[2],755]],[0,"a4A3Q0MGRfuqFvI0EeUSo8",1,0],[1,85.5,0,-28.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Road_Parking_01 (2)",2,[[3,-1628,[1,"74irgAvNtf8qcXJFz6zt4B"],[756],[2],757]],[0,"7ahuMMsa1f8ZwLNFuCYDVm",1,0],[1,65.5,0,-28.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Road_Parking_01 (3)",2,[[3,-1629,[1,"dadVNhoHpZWK+koKcpeoHa"],[758],[2],759]],[0,"16ExP15UFZ4oi0cjHJHHDI",1,0],[1,75.5,0,-28.5],[3,0,0.0000025779006599914346,0,0.9999999999966773],[1,0,0.00029540565564332446,0]],[4,"SM_Env_Grass_01 (19)",2,[[3,-1630,[1,"95aCHHcD9bwqgMGFWopk8n"],[760],[2],761]],[0,"3ebAtxUHlR9Z1zTvKYU4mi",1,0],[1,60.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (20)",2,[[3,-1631,[1,"e8hIWCW/Vev7li+uU23Xhf"],[762],[2],763]],[0,"e3gOyOtQBdKZxspyxkFkcH",1,0],[1,60.5,0,-38.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Grass_01 (21)",2,[[3,-1632,[1,"65zROnBmpQSpWwLTb9Tnha"],[764],[2],765]],[0,"35MSujOY1T6IJPKHvyh9FL",1,0],[1,55.5,0,-48.5],[3,0,0.7071068311865479,0,-0.7071067311865435],[1,0,-90.0000081028472,0]],[4,"SM_Env_Grass_01 (22)",2,[[3,-1633,[1,"3eAona9olVR4bRZ3/aQXr8"],[766],[2],767]],[0,"0fEI3hdKNWhIHc6jtIYjNV",1,0],[1,60.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (23)",2,[[3,-1634,[1,"ccfohk7j1dd6zWYrMavXLk"],[768],[2],769]],[0,"f1wzyny/dQtICEDSWjgrBP",1,0],[1,60.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_End_01 (4)",2,[[3,-1635,[1,"91GwGfaLlfD4UBX5gS1Tap"],[770],[2],771]],[0,"3d4VfjCcNfQ5XaNj7LNGTI",1,0],[1,-39.5,0,21.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Corner_End_01 (5)",2,[[3,-1636,[1,"7dvoFV7lFXmavso0KVlKaf"],[772],[2],773]],[0,"d8+jB24UVe0J2ZrX5Ec0Xi",1,0],[1,-39.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Driveway_Wide_01(__autogen 389)",2,[[3,-1637,[1,"68A6nPi4NZw7qMLlA+vYBz"],[774],[2],775]],[0,"739JAED7tVdpSPOu6oVGdQ",1,0],[1,20.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (155)",2,[[3,-1638,[1,"a3boN13EVbSL+i4Gl/AJVw"],[776],[2],777]],[0,"e1sbsC4YNWCo6uqLXINXYD",1,0],[1,-64.5,0,-58.5]],[5,"SM_Env_Road_01 (163)",2,[[3,-1639,[1,"7aXkjSYs5WhK12k8bp0Wy0"],[778],[2],779]],[0,"8b6+jxjERUgqb8JJudO27h",1,0],[1,-64.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (130)",2,[[3,-1640,[1,"f8d7l9DXdZdJulpbQ4UVNd"],[780],[2],781]],[0,"a6qfqerFRVhasuluVXlm91",1,0],[1,-59.4999924,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (131)",2,[[3,-1641,[1,"20+ejSGkJdj6k6U9itBJbk"],[782],[2],783]],[0,"41p4EGcmpc8JzBq/vEFqX/",1,0],[1,-64.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (132)",2,[[3,-1642,[1,"79NrcSS2Vel5GJyy0+78sy"],[784],[2],785]],[0,"30QIZ/hkJVSIhOnwYzXhma",1,0],[1,-59.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (133)",2,[[3,-1643,[1,"6flCNWgiBaM6pPT4tL+3ie"],[786],[2],787]],[0,"5f+lxJZWNUe6l6Td5s/ryE",1,0],[1,-54.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (166)",2,[[3,-1644,[1,"a5GoEClu5YP5g3GbPK2wmD"],[788],[2],789]],[0,"314MPx29ZTRqf613MqyMhm",1,0],[1,-59.5,0,-63.5]],[5,"SM_Env_Road_01 (167)",2,[[3,-1645,[1,"77CHhCIlRVAZ2qxHxYrWE8"],[790],[2],791]],[0,"0bospwg4FYyJCRDEzwaubQ",1,0],[1,-59.5,0,-58.5]],[5,"SM_Env_Road_01 (168)",2,[[3,-1646,[1,"f0WFe+wthY5a6xArjI5+Hm"],[792],[2],793]],[0,"88IVE4gHNbN7HCM83ftBel",1,0],[1,-49.5,0,-58.5]],[5,"SM_Env_Road_01 (169)",2,[[3,-1647,[1,"0dbKzRbdFWeKg9kgwo1OI2"],[794],[2],795]],[0,"38oxKiAO9VfLR+KqmpatMh",1,0],[1,-49.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (134)",2,[[3,-1648,[1,"15w4q638peW58ca9iy8OB8"],[796],[2],797]],[0,"1adW/YkY9WyYXbDOvmleTS",1,0],[1,-44.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Straight_01 (137)",2,[[3,-1649,[1,"181qh4rlpZAKHbOrGrfJXo"],[798],[2],799]],[0,"d8f5NdNQtfiLIU1PdBEygF",1,0],[1,-49.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (170)",2,[[3,-1650,[1,"89BDfsG1ZbpLaPCch5s9Z1"],[800],[2],801]],[0,"5ej0OMNYhQSrkB9i1aWFwk",1,0],[1,-54.5,0,-63.5]],[5,"SM_Env_Road_01 (171)",2,[[3,-1651,[1,"2ddTulaOZbaqP2qROqhOo8"],[802],[2],803]],[0,"529ngNe09e2IyDhB0QZ2Qv",1,0],[1,-54.5,0,-58.5]],[5,"SM_Env_Road_01 (172)",2,[[3,-1652,[1,"08RvJO149U1JbBlw7fwozK"],[804],[2],805]],[0,"6bPVtxYJtfBJyzsh2purXr",1,0],[1,-34.5,0,-58.5]],[5,"SM_Env_Road_01 (173)",2,[[3,-1653,[1,"d7clf57KxbZ5yhKrvfpHiJ"],[806],[2],807]],[0,"d3bES3x/RfFokyax1dmuxV",1,0],[1,-34.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (138)",2,[[3,-1654,[1,"12RcIv3gpcBI1WsgahBfEM"],[808],[2],809]],[0,"a9s1OeOf5fxYxqI0KNGmEa",1,0],[1,-29.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (139)",2,[[3,-1655,[1,"87xcyUrshRGJmaSAaeCgdt"],[810],[2],811]],[0,"dax5MRtWRe36ka/X9F8Mlj",1,0],[1,-34.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (140)",2,[[3,-1656,[1,"03E0LeG89R47jVsdYtaROz"],[812],[2],813]],[0,"46W9XqoA9RJZ4FIDQIQvzX",1,0],[1,-29.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (141)",2,[[3,-1657,[1,"7f5LVsc/5RP4BS8FqyJT3l"],[814],[2],815]],[0,"1bSrsTNs1duYHhsFgkzMqW",1,0],[1,-24.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (174)",2,[[3,-1658,[1,"85n5agZCFcmY+8NJICZh2s"],[816],[2],817]],[0,"52/Xsb2WtbIbxS+n5ZAmpl",1,0],[1,-29.5,0,-63.5]],[5,"SM_Env_Road_01 (175)",2,[[3,-1659,[1,"9aMsOliHZS+Zcv+S/QED58"],[818],[2],819]],[0,"564OyULblbnbHKuO8UnEDF",1,0],[1,-29.5,0,-58.5]],[4,"SM_Env_Sidewalk_Straight_01 (145)",2,[[3,-1660,[1,"a8+d2ZMolTSrn8zElwCYPN"],[820],[2],821]],[0,"97qM/eGH5euaq+eaLvbji8",1,0],[1,-39.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (178)",2,[[3,-1661,[1,"cc/Eh3W7RUwbWrKfGOORvG"],[822],[2],823]],[0,"50Hptsm+lZQb0Q0/yrhUhZ",1,0],[1,-44.5,0,-63.5]],[5,"SM_Env_Road_01 (179)",2,[[3,-1662,[1,"f5bOicE/Nbk5cOgDzEw6CZ"],[824],[2],825]],[0,"9cuAyRk3xVDZFpdSWnbBxD",1,0],[1,-44.5,0,-58.5]],[5,"SM_Env_Road_01 (180)",2,[[3,-1663,[1,"70K3YIw1lSOqq7lrUsJ2m+"],[826],[2],827]],[0,"bdKF3/ybJdxYW/8SUT1pA9",1,0],[1,-24.5,0,-58.5]],[5,"SM_Env_Road_01 (181)",2,[[3,-1664,[1,"2dinid/XxVE73JoE9bOcRI"],[828],[2],829]],[0,"69XAz2mG1bo7i12/+x3unS",1,0],[1,-24.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (146)",2,[[3,-1665,[1,"e3oMN62ohTub1ZW6deur5u"],[830],[2],831]],[0,"c9BLmxjhNZY7jAPW4lR/LD",1,0],[1,-19.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (147)",2,[[3,-1666,[1,"f1rSRwMeZXULTyWH9FbYVU"],[832],[2],833]],[0,"03wHAy6JdXVpqWY+LkiYUt",1,0],[1,-24.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (148)",2,[[3,-1667,[1,"8eWbW+ZwVZobp4suZ73Xua"],[834],[2],835]],[0,"b0pxPxuHBQ5r8tkQE/oWzr",1,0],[1,-19.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (149)",2,[[3,-1668,[1,"f0Vk8yemNWAJf5JtJ3cEy2"],[836],[2],837]],[0,"79ewfPc5lTqqHSdK5u3a5+",1,0],[1,-14.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (182)",2,[[3,-1669,[1,"f24f2qOTxZIKL9gvGzkxMs"],[838],[2],839]],[0,"166zsi0/BZXplLCx+zD09R",1,0],[1,-19.5,0,-63.5]],[5,"SM_Env_Road_01 (183)",2,[[3,-1670,[1,"8eHwRkf51ZEoRbtzttDiIz"],[840],[2],841]],[0,"eeIHMaOnNSa76d3jfjANvx",1,0],[1,-19.5,0,-58.5]],[5,"SM_Env_Road_01 (184)",2,[[3,-1671,[1,"eet9BQpPBYuIMegG8nWiOs"],[842],[2],843]],[0,"cb+dBpmmJcV67s/O3NEHSb",1,0],[1,-9.5,0,-58.5]],[5,"SM_Env_Road_01 (185)",2,[[3,-1672,[1,"7c/V5J94Ra3pN2fZihLmvT"],[844],[2],845]],[0,"70x+KtevVYWYIqZlvRNmyL",1,0],[1,-9.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (150)",2,[[3,-1673,[1,"2aZpSEIwBfDrPtQEuyNXLQ"],[846],[2],847]],[0,"57Yf5y9IhV1YWeDlymwxHx",1,0],[1,-4.500002,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (151)",2,[[3,-1674,[1,"39kn5vlD9bm5mqEzmVXnCn"],[848],[2],849]],[0,"e7DwBKuSJVb4NRH2BI9+md",1,0],[1,-9.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (152)",2,[[3,-1675,[1,"13N+tFU7lZE5X+JkcD8w2w"],[850],[2],851]],[0,"77H8gKAupZsajowUzKxoM0",1,0],[1,-14.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (153)",2,[[3,-1676,[1,"54F2mc5f9c35q3Cfxsd7fO"],[852],[2],853]],[0,"b53h3uE0tWLadZbZHVouxT",1,0],[1,-9.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (186)",2,[[3,-1677,[1,"d0Q0vGiVBdqKCDghugOHpA"],[854],[2],855]],[0,"4c9eDDw0FXgpW/teH59Ymn",1,0],[1,-14.5,0,-63.5]],[5,"SM_Env_Road_01 (187)",2,[[3,-1678,[1,"7bU5aw5cNQn4iZsk+jBvqX"],[856],[2],857]],[0,"93KoRpe4ZexbYk9aLWTWiV",1,0],[1,-14.5,0,-58.5]],[5,"SM_Env_Road_01 (188)",2,[[3,-1679,[1,"3cumoYbzZU1LtwQEP3zKPM"],[858],[2],859]],[0,"d47oDuUytZhq6E88yShWyB",1,0],[1,5.5,0,-58.5]],[5,"SM_Env_Road_01 (189)",2,[[3,-1680,[1,"7eS6tn0KBULIYoSR4vCbbQ"],[860],[2],861]],[0,"deBlKfh1lX2LwtFTFkQ4J9",1,0],[1,5.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (154)",2,[[3,-1681,[1,"c3IGCfCNNe0ZOxiifbs7n0"],[862],[2],863]],[0,"e3qor7pb5b5pmZnSy6Qx/C",1,0],[1,10.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (155)",2,[[3,-1682,[1,"b2+FYtagRYtJL3RZvYKUvU"],[864],[2],865]],[0,"29B+PD2Etc8Y0EkkgLAkX9",1,0],[1,5.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (156)",2,[[3,-1683,[1,"e3vyTck7JS2KQzmA9pTFku"],[866],[2],867]],[0,"02QSw/dFpTUpgAtRcJ6e8u",1,0],[1,10.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (157)",2,[[3,-1684,[1,"308C5CzBxVwrKic5lPi1gl"],[868],[2],869]],[0,"c55TBUleFVebaa4qYZwxan",1,0],[1,15.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (190)",2,[[3,-1685,[1,"9e7f3Dy/hb6ZFfIIeBCPI6"],[870],[2],871]],[0,"58pV9vrS1bebqeO5Dl5F3T",1,0],[1,10.5,0,-63.5]],[5,"SM_Env_Road_01 (191)",2,[[3,-1686,[1,"b1DRwXtuZco5ejeusuMT4N"],[872],[2],873]],[0,"d55mbK2gtQiK/cYIH0brTy",1,0],[1,10.5,0,-58.5]],[5,"SM_Env_Road_01 (192)",2,[[3,-1687,[1,"b5YLaGKFZbZp6FPf6v7Twc"],[874],[2],875]],[0,"4dqOj5y+JT3rZfNB2Jxb4f",1,0],[1,0.5,0,-58.5]],[5,"SM_Env_Road_01 (193)",2,[[3,-1688,[1,"d6zI9iUkBZNK4UdpneCNjM"],[876],[2],877]],[0,"d8MJeK789al7qQWV8guUL4",1,0],[1,0.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (158)",2,[[3,-1689,[1,"4dw5k1+vBS66wr9Hy4wBCK"],[878],[2],879]],[0,"78cwSKTONV4b/BvFa59s3L",1,0],[1,5.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (159)",2,[[3,-1690,[1,"4d6iG2UO9TLp49G1FQbXyu"],[880],[2],881]],[0,"698c0FvZhZK6amFQnr/XpD",1,0],[1,0.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (160)",2,[[3,-1691,[1,"78giqWeqdaw6XS+btDklYU"],[882],[2],883]],[0,"d7lg6iI4FSlJi/OriunNAh",1,0],[1,-4.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (161)",2,[[3,-1692,[1,"25umGD9nBfR7+EJhUL0k9z"],[884],[2],885]],[0,"deb0wMp8RYTrkc2qoBiRmS",1,0],[1,0.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (194)",2,[[3,-1693,[1,"36f0cp0aNQs51CKdYZc1vD"],[886],[2],887]],[0,"c6Htf2PGJVy4scSkENejtv",1,0],[1,-4.5,0,-63.5]],[5,"SM_Env_Road_01 (195)",2,[[3,-1694,[1,"0bYwZENTZR4YiqpZmwI11n"],[888],[2],889]],[0,"70rDgN5XpR2Yxx8rBqCZYo",1,0],[1,-4.5,0,-58.5]],[5,"SM_Env_Road_01 (196)",2,[[3,-1695,[1,"a3IV9laphT2YwE3IES7xcm"],[890],[2],891]],[0,"4eB1u7+nJerK2MR6RxVfcm",1,0],[1,15.5,0,-58.5]],[5,"SM_Env_Road_01 (197)",2,[[3,-1696,[1,"24Wm/OaDhfwZC8vjm05oJA"],[892],[2],893]],[0,"1ajwyd81RQ1I6nJNp9K4UU",1,0],[1,15.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (162)",2,[[3,-1697,[1,"64vcrBtNZWWpdK1e0NDDfr"],[894],[2],895]],[0,"52716KWUZZe6tFNpiQn4Af",1,0],[1,20.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (163)",2,[[3,-1698,[1,"a8ltjRn/dSToV3LW/dfFe8"],[896],[2],897]],[0,"a2N+0DLhRZA4cC9EcVCgNi",1,0],[1,15.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (164)",2,[[3,-1699,[1,"3cVQEY9B1YdbHnGni3KnN8"],[898],[2],899]],[0,"5df7Q/5pZXiZBVGbtY6k9D",1,0],[1,20.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (165)",2,[[3,-1700,[1,"4enod1cSdUhrfWEqZKQgdL"],[900],[2],901]],[0,"c8pi3kfNdUhYW20wt7Q7CS",1,0],[1,25.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (198)",2,[[3,-1701,[1,"851WXh0cpbKIVNNKacuopG"],[902],[2],903]],[0,"4d3OtAeCZTjLEJBMrobKnm",1,0],[1,20.5,0,-63.5]],[5,"SM_Env_Road_01 (199)",2,[[3,-1702,[1,"21OQJ6VWdZtITs3yHkENwh"],[904],[2],905]],[0,"4cLtrJiXJe5ZHpJYrDf4TR",1,0],[1,20.5,0,-58.5]],[5,"SM_Env_Sidewalk_Straight_01 (166)",2,[[3,-1703,[1,"dbUfKwMqNU37t2APNlCzsE"],[906],[2],907]],[0,"c22mTrl3hZZppIr+4hf6zn",1,0],[1,-69.5,0,-68.5]],[5,"SM_Env_Road_01 (200)",2,[[3,-1704,[1,"c5yx3svQRfjbclk43Lu767"],[908],[2],909]],[0,"0dIsI7zM1QY4i2qqpNTT/g",1,0],[1,-69.5,0,-58.5]],[5,"SM_Env_Road_01 (201)",2,[[3,-1705,[1,"90ybte/6pd7Ln9GcuB8oXI"],[910],[2],911]],[0,"cdU0IZhllcpI7CjExvtF5w",1,0],[1,-69.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (167)",2,[[3,-1706,[1,"7aX6777d9Zp4JCZ1M5rjPJ"],[912],[2],913]],[0,"48qUjF4WZfV4knx33x1X61",1,0],[1,-64.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (4)",2,[[3,-1707,[1,"acSc2HqMdRGK95mnfUk/4b"],[914],[2],915]],[0,"00vSHFAd9TT5gp4SfOUDSY",1,0],[1,-69.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (5)",2,[[3,-1708,[1,"fakhApsEBRwbJiR/bKmsdU"],[916],[2],917]],[0,"35ETfpdzlaZqn4J7jildqW",1,0],[1,-69.5,0,-63.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_Corner_End_02 (4)",2,[[3,-1709,[1,"37j5ZE0dNaB4B0/bLYCbbi"],[918],[2],919]],[0,"7dnJdsvfxX1py7nF6GUu1q",1,0],[1,-69.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_Corner_End_02 (5)",2,[[3,-1710,[1,"61izE1GZJVdKMOulOQ6X9W"],[920],[2],921]],[0,"3eVa20iI9ZlIh1ZwisI17A",1,0],[1,-69.5,0,-63.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_Corner_End_02 (6)",2,[[3,-1711,[1,"69iPBCvgxVT77c1/vNsM9I"],[922],[2],923]],[0,"53uRwFBc5Ti7ZeI5Rc11DE",1,0],[1,-59.5,0,66.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_Corner_End_02 (7)",2,[[3,-1712,[1,"a8tRWaoolQMbQ53eEvSsHm"],[924],[2],925]],[0,"77H8ovtQle7pmdxmWyRD+F",1,0],[1,-59.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (6)",2,[[3,-1713,[1,"0feM+DqctVrYhUr9BBK1Wz"],[926],[2],927]],[0,"c9BWmaLSRfc6Z8gxDsCrQd",1,0],[1,-59.5,0,66.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (7)",2,[[3,-1714,[1,"192SyjRDBYsYNTNXS+JXBp"],[928],[2],929]],[0,"8duowP8O9d6LcgqMUuWc0x",1,0],[1,-59.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (168)",2,[[3,-1715,[1,"4eSK48SjpcDqCYy1z5TDQq"],[930],[2],931]],[0,"996YCkoU1UcpWLchx/TbaL",1,0],[1,-54.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (202)",2,[[3,-1716,[1,"b8y2Zl6yxSR501YVpUgcHZ"],[932],[2],933]],[0,"aeLWK94exQo7mrGiZwNpcU",1,0],[1,-59.5,0,66.5]],[5,"SM_Env_Road_01 (203)",2,[[3,-1717,[1,"70HqjC5PdcRbBgbOdOhrix"],[934],[2],935]],[0,"35Axmn5QNTYJeHbCOfpqRg",1,0],[1,-59.5,0,71.5]],[5,"SM_Env_Sidewalk_Straight_01 (169)",2,[[3,-1718,[1,"d9C79UN2xfTKF2ow81HKeR"],[936],[2],937]],[0,"acTQvxeD9W1LnhBle1DVTh",1,0],[1,-59.5,0,61.5]],[5,"SM_Env_Road_01 (204)",2,[[3,-1719,[1,"d3Sd8vAApTZKhO2DJ2fcC/"],[938],[2],939]],[0,"fc6BZ7/eRaNqp4aLuE3qDa",1,0],[1,30.5,0,71.5]],[5,"SM_Env_Road_01 (205)",2,[[3,-1720,[1,"e842YU+9pRdY0yBB5Z6Aj3"],[940],[2],941]],[0,"e36BMjzVpRFZN17GDULAWp",1,0],[1,30.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (170)",2,[[3,-1721,[1,"bcG1XrB/NXEr9cujaTTiB5"],[942],[2],943]],[0,"b9MfsxTapa6JImGq3h64k0",1,0],[1,35.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (171)",2,[[3,-1722,[1,"2237vMe31eOY3D2HZgU7te"],[944],[2],945]],[0,"34jFqs8VlT86zVfANccZQF",1,0],[1,30.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (172)",2,[[3,-1723,[1,"ceupOPXsdcDrgI96SeWLZZ"],[946],[2],947]],[0,"b23UWIAb9VPJhcOfETnN+v",1,0],[1,25.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (173)",2,[[3,-1724,[1,"e35VN2W/FdPaIYQflU+/QE"],[948],[2],949]],[0,"bc+y1YT2ZREpFWrANKYqRL",1,0],[1,30.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (206)",2,[[3,-1725,[1,"5duf9xiU9Uca/SKwWlbxPy"],[950],[2],951]],[0,"ecVDJ9BdZVsa74RGgt+QG6",1,0],[1,25.5,0,66.5]],[5,"SM_Env_Road_01 (207)",2,[[3,-1726,[1,"afhpSObahR+aopbQ2tNedH"],[952],[2],953]],[0,"85NNF8suZaLrqPPz6W0Y2j",1,0],[1,25.5,0,71.5]],[5,"SM_Env_Road_01 (208)",2,[[3,-1727,[1,"88jU5e9H5f94pHCrTMOcxH"],[954],[2],955]],[0,"f4gGYHFg9Y9KnLAxnAb1Uu",1,0],[1,5.5,0,71.5]],[5,"SM_Env_Road_01 (209)",2,[[3,-1728,[1,"8c6sBsBYpWq5c4164ZqHry"],[956],[2],957]],[0,"aeaDSTYXtTbr9pIIfkhPQ7",1,0],[1,5.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (174)",2,[[3,-1729,[1,"5c5lsf+5dYwpvOCdYL5O/g"],[958],[2],959]],[0,"de8przn/tfYKE1HNYzIIUm",1,0],[1,10.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (175)",2,[[3,-1730,[1,"87kDzA4Z5Y/q7RSzL1QFsX"],[960],[2],961]],[0,"09gZoK0MVSAqJDnUcyw4lP",1,0],[1,5.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (176)",2,[[3,-1731,[1,"0bFMncTSBT679eBlbpvEWd"],[962],[2],963]],[0,"63sgEvs8FbgItJ491x31Uz",1,0],[1,10.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (177)",2,[[3,-1732,[1,"f9ZQJdnTpfnYydiW9rPoaq"],[964],[2],965]],[0,"2c/lXBLi1UE75zAuXUb9J1",1,0],[1,15.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (210)",2,[[3,-1733,[1,"1fk1bYgZBQJZunuk7Y7nmO"],[966],[2],967]],[0,"69yCLUYMZZ2a2iStWbkUIx",1,0],[1,10.5,0,66.5]],[5,"SM_Env_Road_01 (211)",2,[[3,-1734,[1,"01tL1VaKNbcpDeCxwmDbbW"],[968],[2],969]],[0,"c1cSMuohhT3ZKHnmX4fqiC",1,0],[1,10.5,0,71.5]],[5,"SM_Env_Road_01 (212)",2,[[3,-1735,[1,"30DfaKn71R6aCKTEwtIrM0"],[970],[2],971]],[0,"acuMJ2OK1S97oRWtczXZwk",1,0],[1,20.5,0,71.5]],[5,"SM_Env_Road_01 (213)",2,[[3,-1736,[1,"edI2Z5L9BQqJU9ONa8jpI9"],[972],[2],973]],[0,"12b3knoXlcQZbcd5Q/NfR6",1,0],[1,20.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (178)",2,[[3,-1737,[1,"48lnOLbpRS8Yg2xeDh7hyC"],[974],[2],975]],[0,"8e0XFUHNVU9pscLVpdFCXj",1,0],[1,25.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (179)",2,[[3,-1738,[1,"d5lWtegxlfGYqvjdyggKal"],[976],[2],977]],[0,"6coxKS7cRVyL7cv3vUk7ae",1,0],[1,20.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (180)",2,[[3,-1739,[1,"7fKnGcJL1bjLzDCLA6rNW3"],[978],[2],979]],[0,"76bueWwbVRHoMHfD0PAykK",1,0],[1,15.5,0,61.5]],[5,"SM_Env_Driveway_Wide_01 (2)",2,[[3,-1740,[1,"c8JxDdlphWhqBcXR7PIcfU"],[980],[2],981]],[0,"b5I0wYuVtblKhqU88ZuVSR",1,0],[1,-24.5,0,-33.5]],[4,"SM_Env_Sidewalk_Straight_01 (181)",2,[[3,-1741,[1,"d2C7YBZfpVp7nWgQprSbgK"],[982],[2],983]],[0,"aa7d3TCABeMahOyfPnRXMl",1,0],[1,20.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (214)",2,[[3,-1742,[1,"61iEQAah1Zla1PFyPWU+h7"],[984],[2],985]],[0,"32rLzWmWZfy4EPX9yxRntU",1,0],[1,15.5,0,66.5]],[5,"SM_Env_Road_01 (215)",2,[[3,-1743,[1,"045zHdJKJaw4qwzFAi2U3h"],[986],[2],987]],[0,"ach9ogU/9bX4JFngEov8fE",1,0],[1,15.5,0,71.5]],[5,"SM_Env_Road_01 (216)",2,[[3,-1744,[1,"99Kf5K9lZXn5OrK8vhqOuW"],[988],[2],989]],[0,"853sXr4X9Vn687G40g2KRv",1,0],[1,-4.5,0,71.5]],[5,"SM_Env_Road_01 (217)",2,[[3,-1745,[1,"0eBGBfY11TM4d90ggVgUhZ"],[990],[2],991]],[0,"327e0XVFBRG5a9Xwlc7EdF",1,0],[1,-4.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (182)",2,[[3,-1746,[1,"51hEHmZDpf57pjE6DGzna7"],[992],[2],993]],[0,"cdqG5ycR9fZr9DkTwxXnCu",1,0],[1,0.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (183)",2,[[3,-1747,[1,"11gcntaxdf+pGpOQ+QZnCE"],[994],[2],995]],[0,"182mgGMR1abpXyYmY/nVfH",1,0],[1,-4.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (184)",2,[[3,-1748,[1,"e1oUEQkdlS2Z/vd5C07U7d"],[996],[2],997]],[0,"dcJMW/FGZfTa8Vl7Qa4DmA",1,0],[1,0.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (185)",2,[[3,-1749,[1,"1cRDB/T/FToqRYbeOtl+KK"],[998],[2],999]],[0,"b8RO4QfYdeuJUKd1NK2pG1",1,0],[1,5.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (218)",2,[[3,-1750,[1,"79+QEBHIZesI3ihBvquHmW"],[1000],[2],1001]],[0,"9cZqNqNRZXbqYtEJxhxGUu",1,0],[1,0.5,0,66.5]],[5,"SM_Env_Road_01 (219)",2,[[3,-1751,[1,"c7FHNZ2iddkKYm37jg0PCZ"],[1002],[2],1003]],[0,"4fBAhJzoNUuYBQ+y0ZkV0U",1,0],[1,0.5,0,71.5]],[5,"SM_Env_Road_01 (220)",2,[[3,-1752,[1,"65l4HxIbdY1oy56WU10VZr"],[1004],[2],1005]],[0,"55+AmbWLBWD6CRcxXJ6Cgl",1,0],[1,-9.5,0,71.5]],[5,"SM_Env_Road_01 (221)",2,[[3,-1753,[1,"3d4U/mHItcIIWf1XiYAhGO"],[1006],[2],1007]],[0,"3eQ08u8VdVJIf08JiR3ibL",1,0],[1,-9.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (186)",2,[[3,-1754,[1,"d2D8vxsE9YpKb8CisfBzK3"],[1008],[2],1009]],[0,"81mPV3dZJU34KlpwehxIOV",1,0],[1,-4.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (187)",2,[[3,-1755,[1,"35EODUwqBWv6E4IQA231rc"],[1010],[2],1011]],[0,"45YGBSYQNbnZV6ZnV83IXO",1,0],[1,-9.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (188)",2,[[3,-1756,[1,"a0oFtKYfFfrq4+DaB+a1hJ"],[1012],[2],1013]],[0,"56vWT11tFSd5pqdbsI7nMP",1,0],[1,-14.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (189)",2,[[3,-1757,[1,"cdv7YiXQVeWpau2gdIbqzH"],[1014],[2],1015]],[0,"19gZzsDlNSCqtDVxmCE8BL",1,0],[1,-9.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (222)",2,[[3,-1758,[1,"fbDyRmwS9dCbDIwH0h+csF"],[1016],[2],1017]],[0,"f6PAad1Y5TwLrRd+nWmZ0K",1,0],[1,-14.5,0,66.5]],[5,"SM_Env_Road_01 (223)",2,[[3,-1759,[1,"11T4qwZVpYIZhkdJ9AUJ8/"],[1018],[2],1019]],[0,"c1bay3Sztcbr4KmSZkd0Mz",1,0],[1,-14.5,0,71.5]],[5,"SM_Env_Road_01 (224)",2,[[3,-1760,[1,"e82mxSIeJQiotz6wgzbJSL"],[1020],[2],1021]],[0,"ffF1yzVq5StYuAe3BEi4iX",1,0],[1,-34.5,0,71.5]],[5,"SM_Env_Road_01 (225)",2,[[3,-1761,[1,"96PEqFBwxbkaCvTS1YG6rJ"],[1022],[2],1023]],[0,"47/Lw1q1VX6ZvblVnH8Jlh",1,0],[1,-34.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (190)",2,[[3,-1762,[1,"e8hjQOSOBeqKOHbUlZCOAa"],[1024],[2],1025]],[0,"2bXe3QX3FZnoJzyovZQYjJ",1,0],[1,-29.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (191)",2,[[3,-1763,[1,"26aolu7H9Vb6rvmrtVwRkW"],[1026],[2],1027]],[0,"1dpVWzG09W9rihk3FoHIyP",1,0],[1,-34.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (192)",2,[[3,-1764,[1,"92pIKPvl5cuZxcmeSJhoq4"],[1028],[2],1029]],[0,"7abR3KhzpYt5KWM9MPkoPS",1,0],[1,-29.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (193)",2,[[3,-1765,[1,"81ZBtvi8RdOqLQw7fFOJGr"],[1030],[2],1031]],[0,"adEb6wwHxUGJdcAyHZ0i8B",1,0],[1,-24.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (226)",2,[[3,-1766,[1,"a5U7i2rYZVI68kPcFLGHNp"],[1032],[2],1033]],[0,"a6KKD+/ghbB6W7jragVXEV",1,0],[1,-29.5,0,66.5]],[5,"SM_Env_Road_01 (227)",2,[[3,-1767,[1,"abiriLps5XvpL/eNzWTW+3"],[1034],[2],1035]],[0,"dffstltTVb8YBOjMSZ8MCV",1,0],[1,-29.5,0,71.5]],[5,"SM_Env_Road_01 (228)",2,[[3,-1768,[1,"5eCH0D4g1fj4BY3Ezcvi3h"],[1036],[2],1037]],[0,"9fgQRsmqVcM5BMqx3dkpAb",1,0],[1,-19.5,0,71.5]],[5,"SM_Env_Road_01 (229)",2,[[3,-1769,[1,"4ef9+k5QlQK6CK/x9VbUAW"],[1038],[2],1039]],[0,"53OJCsSvhZ3KOlNX4PYwjo",1,0],[1,-19.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (194)",2,[[3,-1770,[1,"b98j05MZBZ+ZzdSbY3MoXF"],[1040],[2],1041]],[0,"60GDqN3YVaw7Mb8jAJPL2+",1,0],[1,-14.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (195)",2,[[3,-1771,[1,"c7f8jdCghYA5aqIX+YFU/F"],[1042],[2],1043]],[0,"caMk3xE/ZRkoWWFnrgUZn+",1,0],[1,-19.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (196)",2,[[3,-1772,[1,"45Pmguc/9fb6kw5daqGTO0"],[1044],[2],1045]],[0,"feHLpFZNFdGa+ngAmWVm1F",1,0],[1,-24.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (197)",2,[[3,-1773,[1,"a8Jzks3RFSBKlmLRof+dOG"],[1046],[2],1047]],[0,"dbDBuHZzJb964i2GCHw5iY",1,0],[1,-19.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (230)",2,[[3,-1774,[1,"53oJkhRgFZj5d092vzOJe/"],[1048],[2],1049]],[0,"38JMBM5UFYPpYBzMquJ06R",1,0],[1,-24.5,0,66.5]],[5,"SM_Env_Road_01 (231)",2,[[3,-1775,[1,"08+fCRR09cVJ2dUpTV0br2"],[1050],[2],1051]],[0,"2b0qR1WJxXiYwHfLbIQnLH",1,0],[1,-24.5,0,71.5]],[5,"SM_Env_Road_01 (232)",2,[[3,-1776,[1,"64BHFAAJRUvLfLe01LIoAj"],[1052],[2],1053]],[0,"e0nnlnbEBZY6kTX+m+wywl",1,0],[1,-44.5,0,71.5]],[5,"SM_Env_Road_01 (233)",2,[[3,-1777,[1,"16u61A3lNRQarnqob+fOah"],[1054],[2],1055]],[0,"0a6gTWQeJTVIXst1Moc4/5",1,0],[1,-44.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (198)",2,[[3,-1778,[1,"748YOWqeJScp18g2RX1PHa"],[1056],[2],1057]],[0,"54ubUM4SFaaqNjzREMlDdb",1,0],[1,-39.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (199)",2,[[3,-1779,[1,"f6EkGuHmlQHLpmWmDAX+rY"],[1058],[2],1059]],[0,"b6pVtLBdtR55LnBgr5BSlS",1,0],[1,-44.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (200)",2,[[3,-1780,[1,"0dLP1apBle35bJBio1m5BT"],[1060],[2],1061]],[0,"c0I5mQ5uxTsI9yB41wf7pT",1,0],[1,-39.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (201)",2,[[3,-1781,[1,"31DtYioQ5bV7D1ZdnXDMu6"],[1062],[2],1063]],[0,"ca4ya6IEFZqL1676gFadd8",1,0],[1,-34.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (234)",2,[[3,-1782,[1,"c96z/7nqZZaIKJnd3/4liv"],[1064],[2],1065]],[0,"c2cpq0SzNVR7AZDvMlK1Wn",1,0],[1,-39.5,0,66.5]],[5,"SM_Env_Road_01 (235)",2,[[3,-1783,[1,"8dDprUOWFXl5MxvIi21lXd"],[1066],[2],1067]],[0,"ddHjxgq5hbc4NkYmokD4a6",1,0],[1,-39.5,0,71.5]],[5,"SM_Env_Road_01 (236)",2,[[3,-1784,[1,"b0NFXJybReeJyaqv7ws9yZ"],[1068],[2],1069]],[0,"feKr30e7JdhLO0F6V3wvEO",1,0],[1,-49.5,0,71.5]],[5,"SM_Env_Road_01 (237)",2,[[3,-1785,[1,"e8abLLUCVau7V3pWcvi4ix"],[1070],[2],1071]],[0,"bfzBNzSpNWhIBfyHIP3jnM",1,0],[1,-49.5,0,66.5]],[4,"SM_Env_Sidewalk_Straight_01 (202)",2,[[3,-1786,[1,"22jJ+LrxVc8LzCsPdlNgoe"],[1072],[2],1073]],[0,"144NeX2ctZ5oGh3j+NDp/4",1,0],[1,-44.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (203)",2,[[3,-1787,[1,"54VgmzlvxdFob76TRXjQ0E"],[1074],[2],1075]],[0,"2exku5x+pYwIq91Uvjzbtu",1,0],[1,-49.5,0,61.5]],[5,"SM_Env_Sidewalk_Straight_01 (204)",2,[[3,-1788,[1,"5ekH02qjxS8qx/Ab90rKEH"],[1076],[2],1077]],[0,"78wlKj7BBW15nhLPypQNOw",1,0],[1,-54.5,0,61.5]],[4,"SM_Env_Sidewalk_Straight_01 (205)",2,[[3,-1789,[1,"08xzGioO9ZbZT1sHsdmojp"],[1078],[2],1079]],[0,"a9LyOH1o9fK7VxmpYgn16Y",1,0],[1,-49.5,0,71.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (238)",2,[[3,-1790,[1,"62aaMdWXJcDaUMHQRkEyPs"],[1080],[2],1081]],[0,"8bSrjQN4ZbfJfCTKdg4wZI",1,0],[1,-54.5,0,66.5]],[5,"SM_Env_Road_01 (239)",2,[[3,-1791,[1,"371OwSUmhZpZEBFW5AUntA"],[1082],[2],1083]],[0,"3aatW1VSVU2I/WPT34kU+h",1,0],[1,-54.5,0,71.5]],[4,"SM_Env_Sidewalk_Corner_03 (6)",2,[[3,-1792,[1,"f6TjkXu/hR7rTAQffAB2mj"],[1084],[2],1085]],[0,"dbz0RO0YZfVaWcjmmFFVXE",1,0],[1,40.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_03 (7)",2,[[3,-1793,[1,"31uXt1WO1aQpS2quMROqw+"],[1086],[2],1087]],[0,"f32ZceS9xVr61Yh92kBYRG",1,0],[1,40.5,0,-68.5],[3,0,0.7071078241857519,0,0.7071057381858046],[1,0,90.00016902538094,0]],[4,"SM_Env_Road_Crossing_02 (18)",2,[[3,-1794,[1,"edF95oZjFZiaOhEGbQv7w/"],[1088],[2],1089]],[0,"79klceYqlfHLhBLj4N+RkW",1,0],[1,40.5,0,-68.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Crossing_02 (19)",2,[[3,-1795,[1,"3c2MqyZRNTB7FRgqJXyucM"],[1090],[2],1091]],[0,"9eyVISP3xd8bKd9l5V2Zs3",1,0],[1,40.5,0,-63.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (240)",2,[[3,-1796,[1,"bdv113lv1dzoOPcS3gEAKA"],[1092],[2],1093]],[0,"98rXE9S5JZ16As6qdfyS77",1,0],[1,25.5,0,-58.5]],[5,"SM_Env_Road_01 (241)",2,[[3,-1797,[1,"74BL3J6Hdef53re3v0Gd1h"],[1094],[2],1095]],[0,"1ameWQdqZY15t9R23CsBe7",1,0],[1,25.5,0,-63.5]],[4,"SM_Env_Sidewalk_Straight_01 (206)",2,[[3,-1798,[1,"2bi/efo9BVB5XjxdfeXrIh"],[1096],[2],1097]],[0,"27t4jMwZVQypPebPcqznyW",1,0],[1,30.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (207)",2,[[3,-1799,[1,"b8+5yTC+VYT4MK192A1Izy"],[1098],[2],1099]],[0,"7erUueVIZW7qXmz2YsxJHC",1,0],[1,25.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (208)",2,[[3,-1800,[1,"36vHbossdedINS2O2kqXxz"],[1100],[2],1101]],[0,"fcZS5yoSpdQ6uXSQBRp+rU",1,0],[1,30.5,0,-68.5]],[4,"SM_Env_Sidewalk_Straight_01 (209)",2,[[3,-1801,[1,"42dnVGAWVSwqt3id6Hk6HJ"],[1102],[2],1103]],[0,"f7WkfMGsFTv5AVrl8NNqSb",1,0],[1,35.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Road_01 (242)",2,[[3,-1802,[1,"44yWytpw9Qi6GXZ0nGKo0K"],[1104],[2],1105]],[0,"89gUuzeERcLqY6TKCmtLZJ",1,0],[1,30.5,0,-63.5]],[5,"SM_Env_Road_01 (243)",2,[[3,-1803,[1,"5dCemDF/RZmpCVwmO7X7wa"],[1106],[2],1107]],[0,"c7b824L3BTTZ5AYTyfwbPM",1,0],[1,30.5,0,-58.5]],[4,"SM_Env_Sidewalk_Straight_01 (127)",2,[[3,-1804,[1,"a7iG41lkhSBLu9rY/rfPeQ"],[1108],[2],1109]],[0,"daHwJSb05VZ49MisSXTtpZ",1,0],[1,50.5,0,-73.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Road_Crossing_02 (20)",2,[[3,-1805,[1,"fcL02/LhxS6KByJq461yGc"],[1110],[2],1111]],[0,"c3gJxeo05UWJ/tSWl2UsuN",1,0],[1,50.5,0,-68.5],[3,0,-0.7071036311793923,0,-0.70710993117967],[1,0,89.99948952062623,0]],[4,"SM_Env_Road_Crossing_02 (21)",2,[[3,-1806,[1,"404PXhrGJTz60mSPy6UHuq"],[1112],[2],1113]],[0,"f3RJShuPZa/7zqDICPsgoe",1,0],[1,45.5,0,-68.5],[3,0,-0.7071036311793923,0,-0.70710993117967],[1,0,89.99948952062623,0]],[4,"SM_Env_Road_Crossing_02 (22)",2,[[3,-1807,[1,"ebo37SFidbZ6xHnBn8++Yz"],[1114],[2],1115]],[0,"d6jMVB1JJRK51JbaNOdnnU",1,0],[1,40.5,0,-58.5],[3,0,-0.7071100296790059,0,0.7071035326791651],[1,0,-90.00052644194665,0]],[4,"SM_Env_Road_Crossing_02 (23)",2,[[3,-1808,[1,"258pjmyOJRv5BIcTmfAC8g"],[1116],[2],1117]],[0,"bbaUdlaERbZ7LgbAA0JUap",1,0],[1,45.5,0,-58.5],[3,0,-0.7071100296790059,0,0.7071035326791651],[1,0,-90.00052644194665,0]],[4,"SM_Env_Road_01 (158)",2,[[3,-1809,[1,"0a4aGQgIJVopbTSPIeRTta"],[1118],[2],1119]],[0,"23TB1DlFRT7YQ8u994fxK3",1,0],[1,45.5,0,-73.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (50)",2,[[3,-1810,[1,"2bZ/8S111RT4oYrQgt/MX1"],[1120],[2],1121]],[0,"42Aymamy9YbrmZ9kyEQPeP",1,0],[1,40.5,0,-73.5],[3,0,0.7071067311865435,0,0.7071068311865479],[1,0,89.9999918971528,0]],[4,"SM_Env_Road_01 (165)",2,[[3,-1811,[1,"0dPC/UuAVf57RUJk5LrTyx"],[1122],[2],1123]],[0,"deVemfKYxa0oOO7Tz49ONS",1,0],[1,50.5,0,-73.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (78)",2,[[3,-1812,[1,"f7iUATYJVZpZ0TBOrGD8tv"],[1124],[2],1125]],[0,"b6LF22IF1UJJ+zcAhhf7Nh",1,0],[1,50.5,0,-78.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Crossing_01 (1)",2,[[3,-1813,[1,"98/aiG8ZRYv4kOIlhjL53z"],[1126],[2],1127]],[0,"22GRv598xUBraju6/1nBpF",1,0],[1,-34.5,0,-58.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Crossing_02 (28)",2,[[3,-1814,[1,"d89a68yzdU04jVLKwlFeF/"],[1128],[2],1129]],[0,"63oUD5SedcSocnmQKRxdGH",1,0],[1,40.5,0,66.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Road_Crossing_02 (29)",2,[[3,-1815,[1,"37631WCtJeC5vs8xEc+ic3"],[1130],[2],1131]],[0,"24pt76CIZezLkc21su2Zw/",1,0],[1,40.5,0,61.5],[3,0,-1,0,0],[1,0,-180,0]],[4,"SM_Env_Sidewalk_Corner_03 (8)",2,[[3,-1816,[1,"27Z4+yHwJcGJ+lR5GIiwXX"],[1132],[2],1133]],[0,"8dbpHz2n1aO4z2+YgCPD7o",1,0],[1,40.5,0,61.5],[3,0,0.7071078241857519,0,0.7071057381858046],[1,0,90.00016902538094,0]],[4,"SM_Env_Sidewalk_Corner_03 (10)",2,[[3,-1817,[1,"c9ztxbdYBa8I6SfVOH9ORz"],[1134],[2],1135]],[0,"74geI6TKNb34g+mnE2NLHm",1,0],[1,40.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_01 (176)",2,[[3,-1818,[1,"b7+/EnllxSXK3xG7jEahk3"],[1136],[2],1137]],[0,"8a6rcL4sVdoI+SArb3LcoU",1,0],[1,50.5,0,76.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[6,"SM_Env_Sidewalk_Straight_Path_01 (2)",2,[[3,-1819,[1,"3307dqXjhdvJc4b4d/9T1C"],[1138],[2],1139]],[0,"bbCtH/TulXkJDmbw1EVdnv",1,0],[1,-44.5,0,-18.5],[3,0,1,0,0],[1,-1,1,1],[1,0,180,0]],[4,"SM_Env_Road_01 (177)",2,[[3,-1820,[1,"faOB+oExxTEq+9C1XtuJtx"],[1140],[2],1141]],[0,"196+J47jNW36BE9JFxTvvr",1,0],[1,45.5,0,76.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (128)",2,[[3,-1821,[1,"a9yX792P1elZTA6O3hK8TV"],[1142],[2],1143]],[0,"ffQ+tF/SNcboAGrJJC45ck",1,0],[1,50.5,0,71.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Sidewalk_Straight_01 (116)",2,[[3,-1822,[1,"3fJyAFDYdcDa9Sfru8Z5q0"],[1144],[2],1145]],[0,"20F7Rm/AtdD6aB+GC4CSzq",1,0],[1,50.5,0,76.5],[3,0,-0.7071066561865353,0,0.7071069061865376],[1,0,-89.99997974288272,0]],[4,"SM_Env_Path_01 (1)",2,[[3,-1823,[1,"e5x+pdiYJWh7DQ++JH9e5G"],[1146],[2],1147]],[0,"718l/VNzFQGZBjAXlwrPR+",1,0],[1,-39.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_01 (246)",2,[[3,-1824,[1,"bclFImkZVasKiYdiNc+Ypj"],[1148],[2],1149]],[0,"1bWMRfFZpUapN3pD5dBW34",1,0],[1,45.5,0,81.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Road_01 (247)",2,[[3,-1825,[1,"9dqoiwFwlTXJQqZvzeagKS"],[1150],[2],1151]],[0,"bbtNR+STpTZa4ON+WVhORh",1,0],[1,50.5,0,81.5],[3,0,0.7071068311865479,0,0.7071067311865435],[1,0,90.0000081028472,0]],[4,"SM_Env_Sidewalk_Straight_01 (120)",2,[[3,-1826,[1,"40aEWCd/FSkKqsWINs0fN4"],[1152],[2],1153]],[0,"1bmCifwRRTXIGNigqB30+4",1,0],[1,40.5,0,81.5],[3,0,-0.7071066561865353,0,-0.7071069061865376],[1,0,89.99997974288272,0]],[4,"SM_Env_Sidewalk_Driveway_Wide_01 (7)",2,[[3,-1827,[1,"3eTZ2X78dY/oPVEzuaAF76"],[1154],[2],1155]],[0,"fbywbQSiBZ2KDROb9EzvsM",1,0],[1,-54.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Driveway_Wide_01 (5)",2,[[3,-1828,[1,"ffdRucc4dQ3JW3y44Wt1r3"],[1156],[2],1157]],[0,"373kNopRlTMrq8pKH50IzR",1,0],[1,-54.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (8)",2,[[3,-1829,[1,"47OKG/nf5dPrH9/e/FhgGq"],[1158],[2],1159]],[0,"1f6jPxgRtfE6HptF+U4KUa",1,0],[1,45.5,0,81.5],[3,0,0.7071066071865243,0,-0.7071069551865278],[1,0,-89.99997180209269,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (9)",2,[[3,-1830,[1,"efwk7AIkxQcKoi6kFShYly"],[1160],[2],1161]],[0,"d6ATUKAgFYCIpcPVdv6U0+",1,0],[1,45.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_Corner_End_02 (8)",2,[[3,-1831,[1,"d3Vknx9GZW1K32g4jZoFd1"],[1162],[2],1163]],[0,"4ctRo46WpQeYLOUJNZ6YsR",1,0],[1,45.5,0,81.5],[3,0,0.7071066071865243,0,-0.7071069551865278],[1,0,-89.99997180209269,0]],[4,"SM_Env_Road_Corner_End_02 (9)",2,[[3,-1832,[1,"8dW4T3Ks1RpZQrG792r7HN"],[1164],[2],1165]],[0,"b0WnpvlbRRUYU13WV7z6Cy",1,0],[1,45.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[22,"SM_Env_Road_Corner_End_02 (10)",2,[[3,-1833,[1,"3d2oUfbApS35TH7EuJr2vy"],[1166],[2],1167]],[0,"34vVfY561ccpZ/sTYFEngv",1,0],[1,45.5,0,-78.5],[1,0,0.00001536792566179197,0]],[4,"SM_Env_Road_Corner_End_02 (11)",2,[[3,-1834,[1,"7fEP3qh7lfr5Gy5Z1Xa/rI"],[1168],[2],1169]],[0,"72AJNqXp9TTqP87R8QqHOf",1,0],[1,45.5,0,-78.5],[3,0,0.7071067656865474,0,0.7071067966865473],[1,0,89.99999748811749,0]],[22,"SM_Env_Sidewalk_Corner_End_02 (10)",2,[[3,-1835,[1,"72j8/s041Zk6Ij8QnKp0c+"],[1170],[2],1171]],[0,"c2fP8kK0RUdbQezs/XUhhb",1,0],[1,45.5,0,-78.5],[1,0,0.00001536792566179197,0]],[4,"SM_Env_Sidewalk_Corner_End_02 (11)",2,[[3,-1836,[1,"43P5A7nF9ZhoJKqzeiJ+y+"],[1172],[2],1173]],[0,"aaZObLYXZToqu8+G6ztoam",1,0],[1,45.5,0,-78.5],[3,0,0.7071067656865474,0,0.7071067966865473],[1,0,89.99999748811749,0]],[4,"SM_Env_Grass_01 (24)",2,[[3,-1837,[1,"79mTBT34tcMrv28FYYBK5c"],[1174],[2],1175]],[0,"27dXw/stxTWbmVlQBYU6ax",1,0],[1,60.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (31)",2,[[3,-1838,[1,"8e1j22PDVdtI0+G6HwXuLT"],[1176],[2],1177]],[0,"b69Sw/l8VTgqVhHITvv3V+",1,0],[1,60.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (32)",2,[[3,-1839,[1,"e8NJncX1FcNbo2hmIG1g9h"],[1178],[2],1179]],[0,"40jKTvB6xXHphf+TuLeg8n",1,0],[1,60.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (33)",2,[[3,-1840,[1,"6aGN+xR6VVZr5cyyTzFs+K"],[1180],[2],1181]],[0,"8b++cWnnpR3I5/xjHmRQlX",1,0],[1,65.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (34)",2,[[3,-1841,[1,"bftiTcqIZdRIz9jxDyfar4"],[1182],[2],1183]],[0,"f6ClUgUgVUWLarCLv/ofsj",1,0],[1,65.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (35)",2,[[3,-1842,[1,"85hi3M2yJSC4x1d/mad4o7"],[1184],[2],1185]],[0,"839j91KjRWP5EYQn5M0/4f",1,0],[1,65.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (38)",2,[[3,-1843,[1,"19oT1q6dVdMbwL9IWzGWYW"],[1186],[2],1187]],[0,"d48ibDGqxWe6ueVdLy2GuF",1,0],[1,65.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (47)",2,[[3,-1844,[1,"155S7hdWNQabLKyBbpKhSN"],[1188],[2],1189]],[0,"70oHEd6OdTHpiMBp0M8xh0",1,0],[1,75.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (48)",2,[[3,-1845,[1,"b2kuur5A9VaYEvizGr/WXl"],[1190],[2],1191]],[0,"caZK2XyFtQOrR//z7hhF7A",1,0],[1,75.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (58)",2,[[3,-1846,[1,"dctXb1spJWz4oK/SBRhzc4"],[1192],[2],1193]],[0,"b0c/iV2xBecILCaXLE56Vi",1,0],[1,75.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (59)",2,[[3,-1847,[1,"9c0nIYu0pWLbbnaN4BJVfx"],[1194],[2],1195]],[0,"66b1oJD7RZroIXp4wXjJpZ",1,0],[1,75.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (60)",2,[[3,-1848,[1,"857MsH9jZT4byDu99sf3XM"],[1196],[2],1197]],[0,"939BDSbQZVrYpxjBDGvJf/",1,0],[1,70.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (61)",2,[[3,-1849,[1,"4am2YP3spRFIrlUw/QQYCK"],[1198],[2],1199]],[0,"5aDAAV/8xd+Ji4CK+9E2lF",1,0],[1,70.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (62)",2,[[3,-1850,[1,"0ayjTEcIVcR6ow+ZiyQ9KK"],[1200],[2],1201]],[0,"f25Xfq4u1atYl5Ycthc9bA",1,0],[1,70.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (63)",2,[[3,-1851,[1,"4fjeWdLP9VjIkWitDYhJjd"],[1202],[2],1203]],[0,"fdmzX366xearnGrYWQa+CB",1,0],[1,70.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (64)",2,[[3,-1852,[1,"0eYhEOU6pX9aBCe0mbmser"],[1204],[2],1205]],[0,"57jI+SQMNZUr5Lk4fEk27B",1,0],[1,80.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (65)",2,[[3,-1853,[1,"67Iiht1ddadoMXofOk/Sh1"],[1206],[2],1207]],[0,"87a3ZbJ21ba7iU0HGG3mh/",1,0],[1,80.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (66)",2,[[3,-1854,[1,"21MMttzGhZcLd3CHEr031V"],[1208],[2],1209]],[0,"1bew4GTVtTr4U3Qa+EcGIc",1,0],[1,80.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (67)",2,[[3,-1855,[1,"d7KI56aB9Z/pTLO9h+XTe2"],[1210],[2],1211]],[0,"0blunqbpleSL7olWJPXDsl",1,0],[1,80.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (68)",2,[[3,-1856,[1,"4fxcKZV0JfIIJmnudxw/TF"],[1212],[2],1213]],[0,"32qVTSo+hTPr1bXRtSEnH5",1,0],[1,85.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (69)",2,[[3,-1857,[1,"8eLq5cllhRt6kxzjdC8Pnq"],[1214],[2],1215]],[0,"250TbW6WJS46+80v3UeLFM",1,0],[1,85.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (70)",2,[[3,-1858,[1,"0aippWrE5Vx6l2q/2l6982"],[1216],[2],1217]],[0,"e0ntte1XtcNoB1h1HL0lZr",1,0],[1,85.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (71)",2,[[3,-1859,[1,"adMQVnCuNc/72/VoqZhlrG"],[1218],[2],1219]],[0,"f1pMyoI3pahIxQrUTs6OQh",1,0],[1,85.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (72)",2,[[3,-1860,[1,"32qWIg6T5U9p09Dh7TzUNC"],[1220],[2],1221]],[0,"40ZcKbdORWb680kRjvRcne",1,0],[1,80.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (73)",2,[[3,-1861,[1,"32YbiAMoxVZbj8+AxTRH6c"],[1222],[2],1223]],[0,"919BKjWWdbqrv/YpGVoD5h",1,0],[1,70.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (74)",2,[[3,-1862,[1,"fdG3MIZIxRlYCoMQdoln8O"],[1224],[2],1225]],[0,"d79loGejxXjZ7pECC5ja2y",1,0],[1,75.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (75)",2,[[3,-1863,[1,"04ytMYhGJbsZjzNNLEAnU4"],[1226],[2],1227]],[0,"ebsc0StUZbGYDFMg8UzGCn",1,0],[1,65.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (76)",2,[[3,-1864,[1,"79ZIUeagZYLYPr95aQNFP/"],[1228],[2],1229]],[0,"12s7nd6rtcwJl8d0s292si",1,0],[1,60.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (77)",2,[[3,-1865,[1,"518i08pCtZio5botiE+9em"],[1230],[2],1231]],[0,"ceOXf7DyNT2rSNcSUDRGMx",1,0],[1,60.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (78)",2,[[3,-1866,[1,"b2IgnoAhRRs4mk0JDWEeSh"],[1232],[2],1233]],[0,"5djQsk/rxSOoB46jPSXaJv",1,0],[1,65.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (79)",2,[[3,-1867,[1,"e2ody6Bm5eDoXR/sUgKwEl"],[1234],[2],1235]],[0,"c1pB8tN79YEa0ziDyZwHUt",1,0],[1,75.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (80)",2,[[3,-1868,[1,"9cw+80Kh1TPa5F36v3rbJW"],[1236],[2],1237]],[0,"83HnmsuTlbeZzdDMpmbRhg",1,0],[1,70.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (81)",2,[[3,-1869,[1,"5fk5QaZdda5LCAk2LuP86f"],[1238],[2],1239]],[0,"4dewOr58Nc0ZAj3Iwtb4tY",1,0],[1,80.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (82)",2,[[3,-1870,[1,"73+76MGwpaq7Nu1SIp715h"],[1240],[2],1241]],[0,"31oYiBrllWgJ+tU3xXUzd2",1,0],[1,80.5,0,-88.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (83)",2,[[3,-1871,[1,"3c7yFYVEVYNaq0JT/t54G3"],[1242],[2],1243]],[0,"cemg3MBXFdf7wAevEqNEdf",1,0],[1,70.5,0,-88.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (84)",2,[[3,-1872,[1,"50JRwzgd9Z5pVD6a5tdLNx"],[1244],[2],1245]],[0,"e8dW53mCpeQ77WpDB1dnx/",1,0],[1,75.5,0,-88.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (85)",2,[[3,-1873,[1,"bfzjv57iZREIesKlgLmJwh"],[1246],[2],1247]],[0,"dbobELiXZTpb0qmaYDzWY4",1,0],[1,65.5,0,-88.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (86)",2,[[3,-1874,[1,"6cN3lQF1xXMZLomD9JLWuz"],[1248],[2],1249]],[0,"b0uQS8+ZlfuKhsr+0VvNTF",1,0],[1,60.5,0,-88.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (87)",2,[[3,-1875,[1,"43VeizLBtVerSCc6cdQTrG"],[1250],[2],1251]],[0,"093V+7mmRR3a6J4ibPEPTr",1,0],[1,85.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (88)",2,[[3,-1876,[1,"abiNnIwHhWyIGMkdWA2Bww"],[1252],[2],1253]],[0,"32pwdAJ4datbra3mL2pmTg",1,0],[1,85.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (89)",2,[[3,-1877,[1,"bcH1wP30ZRCLXfKYOvOV2z"],[1254],[2],1255]],[0,"14u0YHwNtUvIkzXnrV2plu",1,0],[1,85.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (90)",2,[[3,-1878,[1,"6eC2lsm8xa977yx6Jj1XXL"],[1256],[2],1257]],[0,"3eIit6M6FRIZlgpe6dcaof",1,0],[1,90.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (91)",2,[[3,-1879,[1,"2eZmMLdYZbL6oVsDRSEOli"],[1258],[2],1259]],[0,"5bzH7mI9NWyKMB/NDwnZz3",1,0],[1,90.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (92)",2,[[3,-1880,[1,"e2c3N40YlQNryWbjWzrgaa"],[1260],[2],1261]],[0,"a2Yfr5tFNS7Kz/VMJCuDO3",1,0],[1,90.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (93)",2,[[3,-1881,[1,"c24E4Ai6tceq2VuYbna8gO"],[1262],[2],1263]],[0,"497bS8myJeGKqIomgnDycx",1,0],[1,95.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (94)",2,[[3,-1882,[1,"17hr175W5TC6XbpiFj2mJZ"],[1264],[2],1265]],[0,"a9foJ8yIBQTJwte3p3DnnI",1,0],[1,95.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (95)",2,[[3,-1883,[1,"d3I/ltJ2pVQonbCqLN77Y6"],[1266],[2],1267]],[0,"9ebiw6hGhUBaVVtn6HUB7A",1,0],[1,95.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (96)",2,[[3,-1884,[1,"96WoX4xe5ViYThTiSjQkOW"],[1268],[2],1269]],[0,"a0XbwUMENQYqNyL7bdyHHL",1,0],[1,100.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (97)",2,[[3,-1885,[1,"5b0sXQEg5db4pd3rHIEZkY"],[1270],[2],1271]],[0,"a9Y/TJ+yZXLLlQBWqn5Fru",1,0],[1,100.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (98)",2,[[3,-1886,[1,"458+A7+f9Y3JgORo5ye/lo"],[1272],[2],1273]],[0,"9ajaIyZJhVZ6/44MG2VcK1",1,0],[1,100.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (99)",2,[[3,-1887,[1,"edIkp41JlUlbNbQW1GCSCg"],[1274],[2],1275]],[0,"9eWqSTLuBf5IIEtj7+vL45",1,0],[1,95.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (100)",2,[[3,-1888,[1,"8cBNwkRgxcUI+2MnRAC2h7"],[1276],[2],1277]],[0,"d50L1A+BBeB6k0E4OCltcN",1,0],[1,100.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (101)",2,[[3,-1889,[1,"8a5C1H5ZdYLbpUyc1WO14m"],[1278],[2],1279]],[0,"50q3w629JY2oVHP0raSXcP",1,0],[1,100.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (102)",2,[[3,-1890,[1,"dbl2Huu7FXYrLtZIpB4mh2"],[1280],[2],1281]],[0,"a1LoFpkY5b7JjJ9OcS3PHt",1,0],[1,95.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (103)",2,[[3,-1891,[1,"71GwtPZzxe06ArLYF/ZpRv"],[1282],[2],1283]],[0,"e9PsopBaZZrY9avjmb0wFa",1,0],[1,90.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (104)",2,[[3,-1892,[1,"2bLwV0y2RZ3LW4H74b1kg1"],[1284],[2],1285]],[0,"82107EmnRQYZq5dKdXs48o",1,0],[1,105.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (105)",2,[[3,-1893,[1,"b4f/559p9TEbSQg3H1WSq+"],[1286],[2],1287]],[0,"eebqbwuLdTKb7+OzE7NVl/",1,0],[1,105.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (106)",2,[[3,-1894,[1,"cbDOxRKRpVdqpgJIaVCZfD"],[1288],[2],1289]],[0,"1enNe3+e9ceZXzqKyajauw",1,0],[1,105.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (107)",2,[[3,-1895,[1,"aaDHJrWWVZALsJLfF8QGB5"],[1290],[2],1291]],[0,"114pOninZZca+k5NERsJ2H",1,0],[1,105.5,0,-28.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (108)",2,[[3,-1896,[1,"4fw9LFrOpZ0IUS1C2q/4zq"],[1292],[2],1293]],[0,"e8Fsx0titaP7/28V8R7CN7",1,0],[1,105.5,0,-33.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (109)",2,[[3,-1897,[1,"edFdl6L/xVbIul6/yE5+iZ"],[1294],[2],1295]],[0,"ccPyHy1sRR4IfoHnEBO/Up",1,0],[1,105.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (110)",2,[[3,-1898,[1,"b31gsNxPlaXKlvPwabdBSf"],[1296],[2],1297]],[0,"f7MINbwddWOoUF665JIoAA",1,0],[1,105.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (111)",2,[[3,-1899,[1,"d2FOZzkGdcN5PByZw9En0I"],[1298],[2],1299]],[0,"4esHBl1eVWN6+0aE8kuuMf",1,0],[1,105.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (112)",2,[[3,-1900,[1,"a64DWL2rRVKJ1/0gOgXaKz"],[1300],[2],1301]],[0,"65qMbaWN5R/YWStW9kTKs0",1,0],[1,105.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (113)",2,[[3,-1901,[1,"afxnV3ZIZcwIRIXi5KxyoY"],[1302],[2],1303]],[0,"34JZgWsJNR1a5ybUXsPU/A",1,0],[1,90.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (114)",2,[[3,-1902,[1,"62kjGKcm9YT5FYTPN4GX9t"],[1304],[2],1305]],[0,"1fwp8pm1BaZa/fBagphoeX",1,0],[1,95.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (115)",2,[[3,-1903,[1,"48953PlIBQObvjn5Ox/id7"],[1306],[2],1307]],[0,"9cKARBNYdRNLD9yfs6UiY7",1,0],[1,100.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (116)",2,[[3,-1904,[1,"81shPliEhXlq7fBQH1w7fI"],[1308],[2],1309]],[0,"982WB2RgJb+Iy78/C/II4F",1,0],[1,100.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (117)",2,[[3,-1905,[1,"bcr4kSo/5a2qOLZ15lY43h"],[1310],[2],1311]],[0,"d27KRKX9lRMpaKQy5X9IwW",1,0],[1,95.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (118)",2,[[3,-1906,[1,"f360NqJPxSIaQeXxhnRExq"],[1312],[2],1313]],[0,"f7JMxxByNXPZ+LwjgzPDXK",1,0],[1,90.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (119)",2,[[3,-1907,[1,"c9LaCQQZpU7Kx5YwZbzzxj"],[1314],[2],1315]],[0,"3dgVNI6iVfap2OCquG6FKi",1,0],[1,105.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (120)",2,[[3,-1908,[1,"77yIkfN61U3KvaiM+m4LbE"],[1316],[2],1317]],[0,"33IbDdnFlU0bXNIw4su+Fa",1,0],[1,105.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (121)",2,[[3,-1909,[1,"0cLpxf67ZYFp0643E7Wbwg"],[1318],[2],1319]],[0,"10mCCcBI9RyIKLs54Ql4mY",1,0],[1,90.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (122)",2,[[3,-1910,[1,"86Eqfvpt5e4bs64doIWNho"],[1320],[2],1321]],[0,"00y4V5zptVy5AZ4tDKzN1l",1,0],[1,95.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (123)",2,[[3,-1911,[1,"968VABLmhSh4G6f6yAkjtC"],[1322],[2],1323]],[0,"fdlmyjqWtTp5LzbZDfOXNm",1,0],[1,100.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (124)",2,[[3,-1912,[1,"13vp2nwW1UNrES+SUVtJ//"],[1324],[2],1325]],[0,"30+j38Rt1ck66aDaLuYpjS",1,0],[1,85.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (125)",2,[[3,-1913,[1,"2b4aLHqV9SMZ0LOanbqcrr"],[1326],[2],1327]],[0,"04oJ6ryk1WU6nYDv2ny2tb",1,0],[1,80.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (126)",2,[[3,-1914,[1,"28YJ9Jgs1ezJDgLiNo9FgS"],[1328],[2],1329]],[0,"8et2aT4fBal7Gr2nGCyiP0",1,0],[1,80.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (127)",2,[[3,-1915,[1,"e1f7MGmyhXabHiA0Oa/cL4"],[1330],[2],1331]],[0,"0a+/LMu81aDqoCL3zdoe8v",1,0],[1,85.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (128)",2,[[3,-1916,[1,"3aDTsZBgdUI5B0IeWYCM7I"],[1332],[2],1333]],[0,"4c/HTVi21YlZYQJ85xFowx",1,0],[1,100.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (129)",2,[[3,-1917,[1,"66a1hB6dhVVbRUmhDbtEf9"],[1334],[2],1335]],[0,"83Eihjm2dWjIUwQ/n12Evp",1,0],[1,95.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (130)",2,[[3,-1918,[1,"bab0BJMHtaqo0O4pM7Bsoy"],[1336],[2],1337]],[0,"37wFxyMRZZXJ1vGHehukaa",1,0],[1,90.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (131)",2,[[3,-1919,[1,"16F2IDyMlfFpmiU1XZaRJR"],[1338],[2],1339]],[0,"aeuyRt1TlQRKxYVbgDFKvt",1,0],[1,105.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (132)",2,[[3,-1920,[1,"f2byu1bIFdC6L/Q4+dfzD4"],[1340],[2],1341]],[0,"adx3kouWNZpK3ZhKLo8vIr",1,0],[1,105.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (133)",2,[[3,-1921,[1,"05vtvFvaJaf5PxIEghqDCc"],[1342],[2],1343]],[0,"37Zq3L23lTgrOazyqYOEDq",1,0],[1,90.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (134)",2,[[3,-1922,[1,"ab8C2qZoldhrvxqFpJcMND"],[1344],[2],1345]],[0,"ba2K7gzvdbMaUNT7K5q/jM",1,0],[1,95.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (135)",2,[[3,-1923,[1,"4fMIm3jplfKY3ZBMhO5vhN"],[1346],[2],1347]],[0,"2ejgem/s1co7bmXtrJ5Suq",1,0],[1,100.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (136)",2,[[3,-1924,[1,"06OdEHFjdUS61SKPHvQpOr"],[1348],[2],1349]],[0,"eeSMqd/yBeGbLLT3pne9zw",1,0],[1,85.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (137)",2,[[3,-1925,[1,"13rUD6UKpZiYdosV6M1LMn"],[1350],[2],1351]],[0,"513nK8oBNWzaohPGlmWJR0",1,0],[1,80.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (138)",2,[[3,-1926,[1,"f186VcvWtVLLOFaYrWN+6t"],[1352],[2],1353]],[0,"e1QD+O/D5WY6/BwMUkMCPc",1,0],[1,80.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (139)",2,[[3,-1927,[1,"ddM3n40hJQjaTtc0WEAf83"],[1354],[2],1355]],[0,"4c+ZU95chdC67FGzQ3Qe6a",1,0],[1,85.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (140)",2,[[3,-1928,[1,"0483KdqllU14Vk3GkmlEX/"],[1356],[2],1357]],[0,"192+0ne8xXvK9KtMA/iWn4",1,0],[1,95.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (141)",2,[[3,-1929,[1,"30mIRAMvdTGLZIRyzsxy9H"],[1358],[2],1359]],[0,"d7JsqJ/Dxarr9xu80uWX1J",1,0],[1,90.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (142)",2,[[3,-1930,[1,"6c8Q6AQ6JZ1rgJhDEOub0J"],[1360],[2],1361]],[0,"efZC75ApNTPbpd+UqMSn+e",1,0],[1,90.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (143)",2,[[3,-1931,[1,"074W18LRlVHZBu28AZ/j0I"],[1362],[2],1363]],[0,"40XM61GGxQPa8OGq1oj44Y",1,0],[1,95.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (144)",2,[[3,-1932,[1,"e8sFGH7+5ac59+4kETiWiX"],[1364],[2],1365]],[0,"01QIBchd5V4J9GSSC0z7KY",1,0],[1,85.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (145)",2,[[3,-1933,[1,"03UDN0Az1R7pgK5rf8Lalq"],[1366],[2],1367]],[0,"56CJjqwTRVNJlTdT1tiI0T",1,0],[1,80.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (146)",2,[[3,-1934,[1,"feuibsY0lV6bZZIAiNSVcj"],[1368],[2],1369]],[0,"31pWLH7utdMKP7dDIzwBeN",1,0],[1,80.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (147)",2,[[3,-1935,[1,"6faA9rCutYO6VqsnRW8JH7"],[1370],[2],1371]],[0,"5fAVzWJ8FU/Ie8ayJ3llN7",1,0],[1,85.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (148)",2,[[3,-1936,[1,"98Aeow5fdccaNKL/pFTBrc"],[1372],[2],1373]],[0,"18Wab94YBQl5lfUsylJyZa",1,0],[1,95.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (149)",2,[[3,-1937,[1,"18hvBCaFpec7eYrFDGWdqJ"],[1374],[2],1375]],[0,"b513fMH5BUd726h1uu3nYc",1,0],[1,90.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (150)",2,[[3,-1938,[1,"29YklEHQpZUKm6eA+aJjID"],[1376],[2],1377]],[0,"93N0Du8c9fKY8whsTO1QZs",1,0],[1,90.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (151)",2,[[3,-1939,[1,"62EeG2+uFZ7J0olznOFsPT"],[1378],[2],1379]],[0,"f1t6+d1eRZhogjtWZ54rHP",1,0],[1,95.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (152)",2,[[3,-1940,[1,"47sSt1hwVeyaA4mTAIVjbs"],[1380],[2],1381]],[0,"ce4jBjdXtexaf2k3wMP0+P",1,0],[1,85.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (153)",2,[[3,-1941,[1,"ecoOYcL7hV1pu6T9YawZjS"],[1382],[2],1383]],[0,"9a3a/7SBVe07T8Sr8PcFVq",1,0],[1,80.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (154)",2,[[3,-1942,[1,"f5hxEpp5td/aK/uH/wT53Z"],[1384],[2],1385]],[0,"21nYllwhdbOpD2zW5YXYMI",1,0],[1,80.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (155)",2,[[3,-1943,[1,"83GJyZDkJb5b+hlHq4TMrG"],[1386],[2],1387]],[0,"290M5yT5RTD7Isjo4crpDW",1,0],[1,85.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (156)",2,[[3,-1944,[1,"14yTzLwv1SsKXkotkHJ3dB"],[1388],[2],1389]],[0,"d5y2fuvlNRF41gWHBntxBE",1,0],[1,95.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (157)",2,[[3,-1945,[1,"fftBnUXEBepo+oUrj0Et+d"],[1390],[2],1391]],[0,"6bD5/ByTFe1JLIu8dOQnuH",1,0],[1,90.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (158)",2,[[3,-1946,[1,"1eDiFpSZpcEafaC4TDs0VG"],[1392],[2],1393]],[0,"98K6VY1wZUa7zxQ1tpaK0/",1,0],[1,90.5,0,41.5000038],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (159)",2,[[3,-1947,[1,"ddZxmvcF9d6IbRpt1X3UEk"],[1394],[2],1395]],[0,"d8Vf15m+ZTf4XGwkp+mC3R",1,0],[1,85.5,0,41.5000038],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (160)",2,[[3,-1948,[1,"7amU0sKhpVqqpuPqilotsq"],[1396],[2],1397]],[0,"d5oHZbIG9Z0a5ffcefJZut",1,0],[1,80.5,0,41.5000038],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (161)",2,[[3,-1949,[1,"2agbu/5qdVd5tl8rwn4uQe"],[1398],[2],1399]],[0,"dewtf8eDZeNLT0XOWxVHVE",1,0],[1,80.5,0,36.5000038],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (162)",2,[[3,-1950,[1,"eb8Vj/6I5R1ImaMh8zIvyG"],[1400],[2],1401]],[0,"16r6TeaaxcaIgNNsY5lOnX",1,0],[1,85.5,0,36.5000038],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (163)",2,[[3,-1951,[1,"2b/75qt6habLhoDbXnMnsN"],[1402],[2],1403]],[0,"363eMB6dxakqGcGLENsL9X",1,0],[1,90.5,0,36.5000038],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (164)",2,[[3,-1952,[1,"34CeluVn1dbov5od1IJ9z+"],[1404],[2],1405]],[0,"28gwh50INVbogntM4sNj/P",1,0],[1,90.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (165)",2,[[3,-1953,[1,"78/yowd1xWRooLzE6/Qtqm"],[1406],[2],1407]],[0,"17qy/Atmlf65urO/y3oUKB",1,0],[1,85.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (166)",2,[[3,-1954,[1,"d4VBGfe15aCoFpButzsMdH"],[1408],[2],1409]],[0,"7fSYPG7C9ZILwpoU5EakiV",1,0],[1,80.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (167)",2,[[3,-1955,[1,"3b/feX7PNbJbOhfmL9Dgqz"],[1410],[2],1411]],[0,"ebgLl7yYNc6a0w3NRkuDsw",1,0],[1,80.5,0,56.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (168)",2,[[3,-1956,[1,"d8dBgX80NWJKfmRAeYD4mr"],[1412],[2],1413]],[0,"aaibpTgXZYFKhyfkLmv32v",1,0],[1,85.5,0,56.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (169)",2,[[3,-1957,[1,"23rzX0TStd07dm41YdfLMg"],[1414],[2],1415]],[0,"d4NkeZNwdbGa1bGYdfbsSp",1,0],[1,90.5,0,56.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (170)",2,[[3,-1958,[1,"b12dUCAN5SY4u65DKBeju+"],[1416],[2],1417]],[0,"ban7rpGL5ScpeN33ggj8eW",1,0],[1,90.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (171)",2,[[3,-1959,[1,"8e77uqOfpfR6lcVi2ZtoQ0"],[1418],[2],1419]],[0,"465qWJ2VxZ5oGLRwS6jaDj",1,0],[1,95.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (172)",2,[[3,-1960,[1,"7amWx4SxRSvLNisLfw7P/E"],[1420],[2],1421]],[0,"4eSh7Mg7pdcrvEplT1Vq3u",1,0],[1,85.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (173)",2,[[3,-1961,[1,"13gadLtYJTJbRFUG86R8aw"],[1422],[2],1423]],[0,"73vUZSTT5RwZNFiiFi7DJ6",1,0],[1,80.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (174)",2,[[3,-1962,[1,"6drt0TDb1Vx7XZ7fhjbjyv"],[1424],[2],1425]],[0,"33Z/dxCb1ceIqrEjMplT5L",1,0],[1,80.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (175)",2,[[3,-1963,[1,"d50pY4/SpTeoKbdq/NKxQ9"],[1426],[2],1427]],[0,"5bTBVUCk1TG6JuieUM1w4h",1,0],[1,85.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (176)",2,[[3,-1964,[1,"5716lp0Cdej7ftmb9KHEUa"],[1428],[2],1429]],[0,"52CDTggYJYzZxcRkrCJX2w",1,0],[1,95.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (177)",2,[[3,-1965,[1,"2644kWjkJc4bWni9bbPb3E"],[1430],[2],1431]],[0,"33D1+O8oxatop9Cpyee7kJ",1,0],[1,90.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (178)",2,[[3,-1966,[1,"ef7ZtU0rBQ4JrmgmV3/QWe"],[1432],[2],1433]],[0,"bd+2EgBsNcLaAQ7HSUJtNg",1,0],[1,90.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (179)",2,[[3,-1967,[1,"aeafsM8F1fIqvCkuYKnu7D"],[1434],[2],1435]],[0,"e09cMIwFtcx6xYDBpO/OAJ",1,0],[1,85.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (180)",2,[[3,-1968,[1,"978WHWZ8BU84KtgnFBfLUd"],[1436],[2],1437]],[0,"89lUydGlZWRLByOcWV+Cbo",1,0],[1,80.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (181)",2,[[3,-1969,[1,"03eUXe701VDZPJdSr+/w7E"],[1438],[2],1439]],[0,"0f3sPyGTlTU6wsphoP5hZH",1,0],[1,80.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (182)",2,[[3,-1970,[1,"12Vic40QhZ3YiEvdyREJMb"],[1440],[2],1441]],[0,"a4jOtjvTpS448+8quC60wF",1,0],[1,85.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (183)",2,[[3,-1971,[1,"cd1W8LzHVX+aXyw0TVh0oa"],[1442],[2],1443]],[0,"80ldc6BMpZr5kigKIfy5CX",1,0],[1,90.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (184)",2,[[3,-1972,[1,"c15mdM54tZWLAVh2seW3cN"],[1444],[2],1445]],[0,"0ddw2WnClVBZVt/2WYUCwl",1,0],[1,90.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (185)",2,[[3,-1973,[1,"bd2W8omuNZXbQAgUMfrM5K"],[1446],[2],1447]],[0,"2aPwslFU1Sz6HT0afpsy4U",1,0],[1,85.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (186)",2,[[3,-1974,[1,"80CDWhtkpcK4b/Yz+2D9Gn"],[1448],[2],1449]],[0,"124FVr8WlaN4eC0d1/Y3wA",1,0],[1,80.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (187)",2,[[3,-1975,[1,"44sfdHwhdXsLrmGL6jOdQl"],[1450],[2],1451]],[0,"0a4JhAwxhVV40L4oxTiWu1",1,0],[1,80.5,0,86.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Sidewalk_Straight_01 (135)",2,[[3,-1976,[1,"7eyzM6dnRRap5nXvb6LhsI"],[1452],[2],1453]],[0,"4exPnwjD1WdJwmaytAGZOW",1,0],[1,-54.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (136)",2,[[3,-1977,[1,"41O9BFJo1aZZKKSNZ35g76"],[1454],[2],1455]],[0,"a4VeWL4l9SVZIa6/F+/0ZB",1,0],[1,-49.5,0,-68.5]],[5,"SM_Env_Sidewalk_Straight_01 (142)",2,[[3,-1978,[1,"b8uZwABJFVUqwnbGUfKCs4"],[1456],[2],1457]],[0,"7bNwLh13JRxpbqIz3gm0T0",1,0],[1,-44.5,0,-68.5]],[4,"SM_Env_Grass_01 (188)",2,[[3,-1979,[1,"d260SA6jtd6o7amVqoaXvV"],[1458],[2],1459]],[0,"65wFDGFNVf878SWdMfa/Qu",1,0],[1,5.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Sidewalk_Driveway_Wide_01 (8)",2,[[3,-1980,[1,"5almvCmdFWj5SieYF0kwu5"],[1460],[2],1461]],[0,"e2rHm9ad5QY6yS0qBXuqjn",1,0],[1,-69.5,0,-28.5]],[4,"SM_Env_Concrete_Base_01 (18)",2,[[3,-1981,[1,"b0AtEb60dZNZWvA0n1zEgf"],[1462],[2],1463]],[0,"6f1SMvjV5VTqg+lqS1VKJE",1,0],[1,35.46,0,36.538],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Generic_Mountains_Snow_01 (2)",2,[[3,-1982,[1,"7aZgIoZ09bwaE87xXQlLjw"],[1464],[2],1465]],[0,"8f78e0DIBbd73gtNtluTP6",1,0],[1,-245,0.5,31.5],[3,0,0.9413113026560809,0,0.3375396739524295],[1,8.073128,8.073125,8.073126],[1,0,140.54590316718208,0]],[6,"SM_Generic_Mountains_Snow_01 (1)",2,[[3,-1983,[1,"fdWZWURepfNIidZJRjzqwU"],[1466],[2],1467]],[0,"92guchmy9THJyTuJoWa667",1,0],[1,122,0.5,163],[3,0,1,0,0],[1,5.60072756,5.60072565,5.60072565],[1,0,180,0]],[6,"SM_Generic_Mountains_Snow_01",2,[[3,-1984,[1,"b1SMghndJUxp9iXZc3YADE"],[1468],[2],1469]],[0,"b7U9ce6qtfWYa/bbUnwk32",1,0],[1,146.5,0,-78.5],[3,0,1,0,0],[1,4.141445,4.14144325,4.14144325],[1,0,180,0]],[4,"SM_Env_Grass_01 (415)",2,[[3,-1985,[1,"40b5GNo5pSfrUdqV90lQh6"],[1470],[2],1471]],[0,"84WCI0FnFQlYRoO52txdZN",1,0],[1,-94.5,0,-33.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (416)",2,[[3,-1986,[1,"c8Baf1js1XDp7MJTK1LdL6"],[1472],[2],1473]],[0,"5dPzL2IItdPKT8ZDet2bmv",1,0],[1,-94.5,0,-28.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (417)",2,[[3,-1987,[1,"2fhp/v1yBW1K8cPGAtM5lC"],[1474],[2],1475]],[0,"7cOM1gWjpXX51ARCGlsLOE",1,0],[1,-94.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (418)",2,[[3,-1988,[1,"04pmilAHpSOrj5n6S7Debt"],[1476],[2],1477]],[0,"42LxjFQGRZOILRypuV9+Lk",1,0],[1,-94.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (414)",2,[[3,-1989,[1,"43dn05sMFZzrZlsWmr64/g"],[1478],[2],1479]],[0,"fdWRWhnCtUG7RH9odUp1Qn",1,0],[1,-94.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (409)",2,[[3,-1990,[1,"832fwp0kBTnp/py2UJS5f9"],[1480],[2],1481]],[0,"31p4d4Fs5YO5RwaCmp5WWQ",1,0],[1,-89.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (411)",2,[[3,-1991,[1,"22g9C7XLJXAIIzZM7K2Vg6"],[1482],[2],1483]],[0,"21Omx1fc5fyobwTVq91fat",1,0],[1,-89.5,0,-28.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (412)",2,[[3,-1992,[1,"2d/fPZ4rNV5p22VFYAGQ9e"],[1484],[2],1485]],[0,"96d9rQ/VZSE5iYaglPbtdB",1,0],[1,-89.5,0,-33.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (413)",2,[[3,-1993,[1,"0cokiMAPtRt6+moiV8XM9t"],[1486],[2],1487]],[0,"2d2kfG52ZQ6ItxkY6sWF9q",1,0],[1,-89.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (410)",2,[[3,-1994,[1,"58zI8l4whZHoC3AJR3GNo1"],[1488],[2],1489]],[0,"e0/WVMUn5QprT676Srf2XM",1,0],[1,-89.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (404)",2,[[3,-1995,[1,"54TrWa0vtexLjEhLmzD+HQ"],[1490],[2],1491]],[0,"a1M7zWjShQLqNYvSk3dhGY",1,0],[1,-84.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (405)",2,[[3,-1996,[1,"930lh5xidU9rf40RuzV89q"],[1492],[2],1493]],[0,"a0izI0Yl9WrIVwqqCkZQoX",1,0],[1,-84.5,0,-33.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (407)",2,[[3,-1997,[1,"4fKgG8y+ha7Yb3SORcCoaj"],[1494],[2],1495]],[0,"0aikWsDHBWibGURU0+wQHp",1,0],[1,-84.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (408)",2,[[3,-1998,[1,"b6cxCzeItTzKtkdOeEJXu+"],[1496],[2],1497]],[0,"962GbdtqhVAq1A+6jMFgYv",1,0],[1,-84.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (406)",2,[[3,-1999,[1,"2627BXtPtTFo4ne2ndSif/"],[1498],[2],1499]],[0,"e3V+a4cCBSQJDd+452CiY4",1,0],[1,-84.5,0,-28.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (403)",2,[[3,-2000,[1,"5baST/etRfGr3KDRG0NI6I"],[1500],[2],1501]],[0,"63J+AVoblde5eaxoyRY/Go",1,0],[1,-79.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (402)",2,[[3,-2001,[1,"cbY2+TTURao7vfnSFXfVE+"],[1502],[2],1503]],[0,"d6F+0xoUteRbsG+9Jpu8u5",1,0],[1,-79.5,0,-33.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (401)",2,[[3,-2002,[1,"69cYTrnQVb3IGyLCOGrFrY"],[1504],[2],1505]],[0,"bc/pz2CHpUjp+P6VN5E8x3",1,0],[1,-79.5,0,-28.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (400)",2,[[3,-2003,[1,"dantJFa/1Y6oDh+osmHa/a"],[1506],[2],1507]],[0,"38BOQDes1XUJqB7FUsiKuK",1,0],[1,-79.5,0,-23.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (392)",2,[[3,-2004,[1,"bbZdgjJ1lawYjuoRGb+al3"],[1508],[2],1509]],[0,"a2hQP7DctSkIxT21LBUDjW",1,0],[1,-79.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (399)",2,[[3,-2005,[1,"13zqmA92pWy4asja291TfF"],[1510],[2],1511]],[0,"bckBThOsNbLIkZlhmcmq25",1,0],[1,-34.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (398)",2,[[3,-2006,[1,"11daYJ7vFUro0ie2KEhFlc"],[1512],[2],1513]],[0,"97E3uQdJBZM5uvZ6ldjwm4",1,0],[1,-39.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (397)",2,[[3,-2007,[1,"258QXWW01USZd76ats+HWA"],[1514],[2],1515]],[0,"0acQao6Mpd/IU+//SvEcZI",1,0],[1,-44.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (396)",2,[[3,-2008,[1,"dalXoN8SpSA7MzFixzmeo5"],[1516],[2],1517]],[0,"46B3w094lQz6TCM6DqFMdn",1,0],[1,-49.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (395)",2,[[3,-2009,[1,"3dtv0JYtVWlq/0vzhoLG0I"],[1518],[2],1519]],[0,"3c5LJ4xwJSaIIl304qodp1",1,0],[1,-54.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (394)",2,[[3,-2010,[1,"d9TU0np6BW5Ki2f9jnd/6a"],[1520],[2],1521]],[0,"61iAAU/J9RHq54LWK8rlCW",1,0],[1,-64.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (393)",2,[[3,-2011,[1,"14uDYYGepQDZXTPY0HJTCb"],[1522],[2],1523]],[0,"7evKnoeRBcy54LRt5d6eCB",1,0],[1,-59.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (391)",2,[[3,-2012,[1,"dfB445u+JRDKNfrxHXsJKL"],[1524],[2],1525]],[0,"f5f1/3DMBZQqmTiu+j2MT3",1,0],[1,-69.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (390)",2,[[3,-2013,[1,"db6f4EFqZQVpEExbDUDP8H"],[1526],[2],1527]],[0,"efGqyLG8NdkKDO0bfIc4VN",1,0],[1,-74.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (389)",2,[[3,-2014,[1,"e9u1u+AR1aMbE2WuClapdE"],[1528],[2],1529]],[0,"e3HonlCixbOYkdVodTouL3",1,0],[1,-79.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (388)",2,[[3,-2015,[1,"181ReAEAtS2YM6zmbSNH6Q"],[1530],[2],1531]],[0,"374Mjee09Y/5U6V/TPFEG2",1,0],[1,-84.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (382)",2,[[3,-2016,[1,"5dXi9T0nJf9bRg1V7AKfHJ"],[1532],[2],1533]],[0,"degyGv+cJdRqmgWoweJGI1",1,0],[1,-89.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (381)",2,[[3,-2017,[1,"7e+vxNolNUgJ9LgTsTCBpn"],[1534],[2],1535]],[0,"3exev+BA9Yt6o9bp2RIG0N",1,0],[1,-89.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (385)",2,[[3,-2018,[1,"6fY0wIU1Be3qH8bYIAFfKA"],[1536],[2],1537]],[0,"20ZqrRxrRYQ7miNqxdsct+",1,0],[1,-89.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (387)",2,[[3,-2019,[1,"4e3qWFppVV8rn0WN3DJ0iC"],[1538],[2],1539]],[0,"07idq3DNdQ8J7kUi04Pf1h",1,0],[1,-89.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (384)",2,[[3,-2020,[1,"299SjkFvhUUq2EgR5TS44p"],[1540],[2],1541]],[0,"546bIp4ipTCaKHU1MN7GQr",1,0],[1,-89.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (383)",2,[[3,-2021,[1,"75tcHAJHdfZ5IBUx6r9M1z"],[1542],[2],1543]],[0,"daNdorpEtanJHFdD+chfJJ",1,0],[1,-89.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (386)",2,[[3,-2022,[1,"6fQhyyCW9ZxLXNkcpi4Y3j"],[1544],[2],1545]],[0,"a9kqdoU6BR4qbRpuU2DFpg",1,0],[1,-89.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (380)",2,[[3,-2023,[1,"72tuigetlWL5DYXkk6LnGs"],[1546],[2],1547]],[0,"30RoJsh11Te4yMG+rA/nMg",1,0],[1,-89.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (375)",2,[[3,-2024,[1,"350TJJ4XdYTIypTZKJfMv2"],[1548],[2],1549]],[0,"eeA6gbTw1eYpeCygwp6WBj",1,0],[1,-84.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (377)",2,[[3,-2025,[1,"15itzePf1SSI8nEQmwl7vF"],[1550],[2],1551]],[0,"a0ooL3xZJTMINEnvK+7ZLv",1,0],[1,-84.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (353)",2,[[3,-2026,[1,"04rYiKrsdeD5znuXIvGBmt"],[1552],[2],1553]],[0,"a4Ok+T8WRZZ7JqMMISGyDZ",1,0],[1,-84.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (376)",2,[[3,-2027,[1,"ec+rj7b2NZh4QmqrBjACcy"],[1554],[2],1555]],[0,"c7NwL6+fNdZpmaR5ugBbFt",1,0],[1,-84.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (324)",2,[[3,-2028,[1,"dau0IukFZQzLP7f3+J8a/C"],[1556],[2],1557]],[0,"a70ZvO+ylWLKGOqv/HEQTk",1,0],[1,-84.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (379)",2,[[3,-2029,[1,"d7QXuUDoJQSr3wyus/Izs2"],[1558],[2],1559]],[0,"2bGOVY2bZe4IqJbDRMeIxp",1,0],[1,-84.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (374)",2,[[3,-2030,[1,"7a8op4opFZaoGZXg5hl5MO"],[1560],[2],1561]],[0,"75oraaayRZ/5ijl3gdbUQa",1,0],[1,-84.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (378)",2,[[3,-2031,[1,"fcNDM7XQhZjJsLDmjXEeFn"],[1562],[2],1563]],[0,"6fsOAzVAZRR7OarAuo9fhc",1,0],[1,-84.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (105)(__autogen 785)",2,[[3,-2032,[1,"acRsmVxF1cCJB9ny5tOdhZ"],[1564],[2],1565]],[0,"3btfjIXhhXRJg34yodGRaV",1,0],[1,-79.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (117)(__autogen 786)",2,[[3,-2033,[1,"90uurxhbBZC6wiiTBmSqRx"],[1566],[2],1567]],[0,"88wHtbj5FVBaw1NvsQtXrg",1,0],[1,-79.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (112)(__autogen 787)",2,[[3,-2034,[1,"9clTsa19xQPKtGMGWL7+Ni"],[1568],[2],1569]],[0,"aeXgpYNIRSkKtlnBuiMxQG",1,0],[1,-79.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (115)(__autogen 788)",2,[[3,-2035,[1,"1139RB0yRVZ7DhwGOIoJ35"],[1570],[2],1571]],[0,"e3o5E8/29VObSTY6WZ5QUK",1,0],[1,-79.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (95)(__autogen 789)",2,[[3,-2036,[1,"22jzMn07Rf6oRJl+iIgAve"],[1572],[2],1573]],[0,"fbb7kT5LBcYaUymLgjMdTL",1,0],[1,-79.5,0,-73.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (103)(__autogen 790)",2,[[3,-2037,[1,"05slE5WuZQqYGSvhyc+tbm"],[1574],[2],1575]],[0,"46tE3Ey/pZNaT14VO6fuo0",1,0],[1,-79.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (94)(__autogen 791)",2,[[3,-2038,[1,"a8KzAx2vtR3pa9IE7oZ5U0"],[1576],[2],1577]],[0,"6b2PVg2nBSgLd1Oy2U1Lpr",1,0],[1,-79.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (92)(__autogen 792)",2,[[3,-2039,[1,"02cKhWbe5TTIt1XBmnUOcQ"],[1578],[2],1579]],[0,"67uR4bEwVe/Kw9YmVxINdD",1,0],[1,-79.5,0,-58.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (344)",2,[[3,-2040,[1,"41WojCnEFb9qIEnpUy5E16"],[1580],[2],1581]],[0,"feM/mNx5Nb5ZDG7PF22H0J",1,0],[1,10.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (342)",2,[[3,-2041,[1,"b30Xv+MQhSI5lGzOLkgGLI"],[1582],[2],1583]],[0,"9eEd0HG+JR0okqxFBgJlwE",1,0],[1,25.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (346)",2,[[3,-2042,[1,"87jkzRRCdSwZVMFt0QgsIv"],[1584],[2],1585]],[0,"310D7HGNRVlJgXSYDBg0Yj",1,0],[1,0.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (352)",2,[[3,-2043,[1,"5cfFVeBcVRiq6+x29s9BVw"],[1586],[2],1587]],[0,"88PeGv8fBcRLfP2936+RCl",1,0],[1,-29.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (341)",2,[[3,-2044,[1,"90DSHLR/VXZJjkwba8rPyC"],[1588],[2],1589]],[0,"c4feu5S7lXEJ1YJYTZjzDa",1,0],[1,20.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (345)",2,[[3,-2045,[1,"c7HdlNwMVSsLlYQ9PGdhjE"],[1590],[2],1591]],[0,"b6+PkfRxFQIJNrx7BAhI2t",1,0],[1,-4.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (340)",2,[[3,-2046,[1,"3fSrAL3slWrbGpaM+Ygr5B"],[1592],[2],1593]],[0,"b8E05GKX9SEKmFOVSlKKDb",1,0],[1,30.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (350)",2,[[3,-2047,[1,"61adnGQolYKKZnrQVhAtFi"],[1594],[2],1595]],[0,"99+fIWAv1WSajfxRd5RcWg",1,0],[1,-14.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (343)",2,[[3,-2048,[1,"4bw3W4I/Fe/q/u1S9XHkz4"],[1596],[2],1597]],[0,"3aI/7yATRVzJo39Ybc17X/",1,0],[1,15.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (347)",2,[[3,-2049,[1,"23V9wCkWFbPbHnRi1zY3Ty"],[1598],[2],1599]],[0,"fezk5Y4kxSy7eDT+MBebkZ",1,0],[1,5.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (348)",2,[[3,-2050,[1,"c4pNEEHGpfnoDbI+hi/3u2"],[1600],[2],1601]],[0,"1cF8dk5zxVvKIUrHmPYUGA",1,0],[1,-9.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (339)",2,[[3,-2051,[1,"68G7X2HlBcvKPM2pCyTnu6"],[1602],[2],1603]],[0,"75xqDhXUNeOq6rvcVTa0+T",1,0],[1,35.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (349)",2,[[3,-2052,[1,"98YXw3NSpSCKgvIKkv+Jpp"],[1604],[2],1605]],[0,"564SML2BZcFKV/o/DBGOSl",1,0],[1,-19.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (351)",2,[[3,-2053,[1,"2cfdhdTj9f6qEV8UwjWeKB"],[1606],[2],1607]],[0,"94zY4iR6dfYpfFjyck7D04",1,0],[1,-24.5,0,-83.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (336)",2,[[3,-2054,[1,"998WlQ/AFXt6rAiOM44NQi"],[1608],[2],1609]],[0,"33SmQWnspYDbmlG+d3CFWO",1,0],[1,20.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (338)",2,[[3,-2055,[1,"a8pYuSgkhVtZVpiJfMgkH3"],[1610],[2],1611]],[0,"4cN0vk9NFVTI1lTYw2KJWQ",1,0],[1,35.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (329)",2,[[3,-2056,[1,"97XiPsprVUZbK+vw/NT5EM"],[1612],[2],1613]],[0,"5cGN1J44VUSKjOtvmJnN5v",1,0],[1,-9.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (330)",2,[[3,-2057,[1,"c0/ESHoE9bh5IOJFH0yNDv"],[1614],[2],1615]],[0,"13W+rIlCtegLdU+dUbAtch",1,0],[1,5.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (327)",2,[[3,-2058,[1,"5d1melGu5VRYr3PvJU37P+"],[1616],[2],1617]],[0,"f9ABUXzthff6G3zCrYoQG8",1,0],[1,-14.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (326)",2,[[3,-2059,[1,"0czRMcSjFUt4JyBbQew8cN"],[1618],[2],1619]],[0,"cc/17HnNtVBIOn51+Z1GJk",1,0],[1,-24.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (337)",2,[[3,-2060,[1,"c20OFvPspR17bpsiwWW09/"],[1620],[2],1621]],[0,"74xu2Xl+Nan4xmtboMmZT5",1,0],[1,30.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (331)",2,[[3,-2061,[1,"45M6ErohFYn55Uoq4OF321"],[1622],[2],1623]],[0,"87dMANsopcRpz1HJ10JlEt",1,0],[1,0.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (335)",2,[[3,-2062,[1,"17jeHUANJVRYT0kQM6prn0"],[1624],[2],1625]],[0,"76PSasXaRVqK7d20bCespa",1,0],[1,25.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (332)",2,[[3,-2063,[1,"05pLUyKrdaR7qo9IrJk8mV"],[1626],[2],1627]],[0,"49x7HdxCVbKpdmTPi/ygf5",1,0],[1,-4.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (325)",2,[[3,-2064,[1,"47eIvTGnteKrWi1oAAY0Ms"],[1628],[2],1629]],[0,"d8cuaEE6lQjaEbpNE2jLgW",1,0],[1,-29.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (328)",2,[[3,-2065,[1,"6d3aqPGF5c6KX/NK9BY7EX"],[1630],[2],1631]],[0,"0dmUhscERSwL2km6x/oqGY",1,0],[1,-19.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (334)",2,[[3,-2066,[1,"5dc/B9hHddl4pXJ75VQc2b"],[1632],[2],1633]],[0,"0aMSatTUNYlZYE7QUV9A9/",1,0],[1,15.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (333)",2,[[3,-2067,[1,"aaKg8x4hRS/bk0+EYXQ+BA"],[1634],[2],1635]],[0,"0cy3XzF4JRRYSfJh34PiSi",1,0],[1,10.5,0,-78.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (323)",2,[[3,-2068,[1,"26MPNjtXdQOKuIC1bdjb48"],[1636],[2],1637]],[0,"80PvFp8qhe1rowSnkoBisi",1,0],[1,75.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (322)",2,[[3,-2069,[1,"2cscwcis5emaHdr9lMDA9/"],[1638],[2],1639]],[0,"66+y/eejhRe4+Adj+RcBdm",1,0],[1,75.5,0,86.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (321)",2,[[3,-2070,[1,"30gNJBSqRXIKul+blWYY8b"],[1640],[2],1641]],[0,"6cIGwldYlRE4cPqslYWX6R",1,0],[1,70.5,0,86.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (319)",2,[[3,-2071,[1,"90aENjee9bfo1/w59lJK/+"],[1642],[2],1643]],[0,"a5WhPVuEZanaEf7z7WcTuB",1,0],[1,75.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (320)",2,[[3,-2072,[1,"f6thGHsgha5pkgdfPAlEyu"],[1644],[2],1645]],[0,"874xDu4qBT5a3V2F/ZiqQO",1,0],[1,70.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (316)",2,[[3,-2073,[1,"c9NrkxZf9XAJMbGuSjhb3j"],[1646],[2],1647]],[0,"cbDkMstkhWG5k4dV/oVE+X",1,0],[1,70.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (318)",2,[[3,-2074,[1,"63z7SA4Z1Q/YYQmttIfDUx"],[1648],[2],1649]],[0,"bc7CPo8AZeJZg/hcGANcaU",1,0],[1,75.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (315)",2,[[3,-2075,[1,"25SX3SYlZZ7IYCXV3MIVfF"],[1650],[2],1651]],[0,"c6e0oEnddRj7tWyvbNNHFR",1,0],[1,75.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (317)",2,[[3,-2076,[1,"f8urfIsIJSspkBzvxIk72P"],[1652],[2],1653]],[0,"621ifR0S5WraDSeay64Ckc",1,0],[1,70.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (311)",2,[[3,-2077,[1,"5dt7SBKLFZkaZxi7uJqg+F"],[1654],[2],1655]],[0,"88V8OfjY5WxrRNprKmqb61",1,0],[1,75.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (314)",2,[[3,-2078,[1,"6cbede/jJdxocuTpWEsxMB"],[1656],[2],1657]],[0,"d6isIBUyJYDox2v+HesJL3",1,0],[1,75.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (313)",2,[[3,-2079,[1,"c3LjBYp1NXXrLCeC2u0FFY"],[1658],[2],1659]],[0,"8awLXldItbQLeAb6bi27pO",1,0],[1,70.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (312)",2,[[3,-2080,[1,"34hWwLSwdbi7Asdey/g7C6"],[1660],[2],1661]],[0,"04/+4kZfpWCIiNQSktpp6t",1,0],[1,70.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (310)",2,[[3,-2081,[1,"383k0Gr6lVVoaLbm9f8RC+"],[1662],[2],1663]],[0,"e7cdlpff5ep5ExZ3ygqjYV",1,0],[1,75.5,0,56.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (309)",2,[[3,-2082,[1,"c9RGojB4pfNZEBYOtUDZUf"],[1664],[2],1665]],[0,"6cR4eDjWlTXa2VN5bOYsmr",1,0],[1,70.5,0,56.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (307)",2,[[3,-2083,[1,"4czhgx6PpbELbR4AvgJ6gU"],[1666],[2],1667]],[0,"69aEZF5lpVSL68GJdt75GJ",1,0],[1,75.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (308)",2,[[3,-2084,[1,"14xrkLDXBasZAsLqFeLHpv"],[1668],[2],1669]],[0,"c6Q14w8TdaTovWGvGIrvet",1,0],[1,70.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (306)",2,[[3,-2085,[1,"45sBfNbZ5fwKqZdVqwNMag"],[1670],[2],1671]],[0,"25TvWU4IlcyLDwsTeqDvJ4",1,0],[1,75.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (305)",2,[[3,-2086,[1,"d9spjLqVtRWoc4dKOe0Dm5"],[1672],[2],1673]],[0,"12sCDETddVGK7R9RomW9hu",1,0],[1,70.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (304)",2,[[3,-2087,[1,"dbe+MLCZtc65H4O7BvmSQ2"],[1674],[2],1675]],[0,"70yTi1AMxWlqjVD3iooI9d",1,0],[1,75.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (298)",2,[[3,-2088,[1,"daY7wPP6VfAoiVv6Uxf6/7"],[1676],[2],1677]],[0,"c8evhfVQZTIb8cYZTVisi9",1,0],[1,75.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (302)",2,[[3,-2089,[1,"dan3yJFhRXI4Axm2i6BHvk"],[1678],[2],1679]],[0,"3fZg+uvKtRAb40wQgl+0Wf",1,0],[1,70.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (299)",2,[[3,-2090,[1,"05yPvO03BRq4QjNJWLlUG+"],[1680],[2],1681]],[0,"1cdaTXsTJblJBeNtz40iVR",1,0],[1,75.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (297)",2,[[3,-2091,[1,"c8r73YeDJTe5r5Z6iNDLoy"],[1682],[2],1683]],[0,"fbzE7KcshQW7UsSgV+t3rl",1,0],[1,70.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (300)",2,[[3,-2092,[1,"6cmlhL1Jldf4uRwufNgZVj"],[1684],[2],1685]],[0,"bcI/RbDGxUu4IRrCI5ov63",1,0],[1,75.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (303)",2,[[3,-2093,[1,"19LpWgTa5T8oAfgIP3iFil"],[1686],[2],1687]],[0,"e4+HCirQJRjrOSX8T/yKfQ",1,0],[1,70.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (301)",2,[[3,-2094,[1,"17E8KRuVdfrbj6wT2b1fNb"],[1688],[2],1689]],[0,"3bRLGISe1ehqRMhzh/pRyZ",1,0],[1,70.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (296)",2,[[3,-2095,[1,"00bjMRDQJcrrwJLRcDPDti"],[1690],[2],1691]],[0,"c3GAJy195UXpj5yvTXxa4b",1,0],[1,70.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (295)",2,[[3,-2096,[1,"e39yZ/5cRY9LZQNmoR3uyE"],[1692],[2],1693]],[0,"e8ZalbUnJeBaM8ZLm8pkPn",1,0],[1,75.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (293)",2,[[3,-2097,[1,"72wrCv/TVYfJpT3WYjcUhM"],[1694],[2],1695]],[0,"e9UDlT4YBXbYUEAnsSR+3/",1,0],[1,75.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (292)",2,[[3,-2098,[1,"06V+btfoBWI7ToT10aoU/m"],[1696],[2],1697]],[0,"e8UiVgBbFZRqgXtoxQZ5rx",1,0],[1,75.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (294)",2,[[3,-2099,[1,"934fxroLNcCJEEiz/RYW1+"],[1698],[2],1699]],[0,"21M8Qvij9QDoCBFu/BNmvR",1,0],[1,75.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (291)",2,[[3,-2100,[1,"76tbEz43RambfyMQ6Vp5p6"],[1700],[2],1701]],[0,"0cZzPGkVVdSa3zqSGUBw4o",1,0],[1,70.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (290)",2,[[3,-2101,[1,"a2ZS9JRBdRdrpjufUQwXki"],[1702],[2],1703]],[0,"d0a8680d1az4HLdpqDp6YU",1,0],[1,70.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (289)",2,[[3,-2102,[1,"8cHVNg4Qtd5ZdwuWCoUiuu"],[1704],[2],1705]],[0,"4ao95auPdS9LZENbmLS7lJ",1,0],[1,70.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (288)",2,[[3,-2103,[1,"ebazKwRcxWSYdHuA3Xu6fT"],[1706],[2],1707]],[0,"4cx/lyWG9Ui4dpHhl5b1np",1,0],[1,-24.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (287)",2,[[3,-2104,[1,"2fX6abcw9e95n0rPSZL2F7"],[1708],[2],1709]],[0,"d0rZeUiypZ/JcZ8EZkWthE",1,0],[1,-29.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (285)",2,[[3,-2105,[1,"de1D8LbNBf+45DYQSn+HNA"],[1710],[2],1711]],[0,"c1fdwBeX5fuKTztrmg00qm",1,0],[1,-34.5000038,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (286)",2,[[3,-2106,[1,"a91eRKT81XwoQmUeRMJ5G/"],[1712],[2],1713]],[0,"dflTHrjWZamKEJEXF6yDJC",1,0],[1,-39.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (281)",2,[[3,-2107,[1,"6dcThyy0ZUPZu6k8S282+E"],[1714],[2],1715]],[0,"11XMK5iFBR853xRJgDBnjh",1,0],[1,-39.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (283)",2,[[3,-2108,[1,"0475KHMfVa1o2QT3Yi4uyP"],[1716],[2],1717]],[0,"abzduTsRBSbalv7UF2/E0A",1,0],[1,-34.4999962,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (284)",2,[[3,-2109,[1,"c7pI6oNMBd5rh6Wf1/p+vp"],[1718],[2],1719]],[0,"dbyYoOWpNU85qJ2ssRLEio",1,0],[1,-34.4999962,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (282)",2,[[3,-2110,[1,"28rXFXAoNdhJp/pRBOwt1+"],[1720],[2],1721]],[0,"08VGVbIiVc/ZU6mrSMBkop",1,0],[1,-39.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (278)",2,[[3,-2111,[1,"f7lvu1HN9RAL9zKmMa390+"],[1722],[2],1723]],[0,"30dgFkVuJUJqQn2Eo5mHYG",1,0],[1,-24.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (277)",2,[[3,-2112,[1,"75PsXHzaZYXaWMNORJfwex"],[1724],[2],1725]],[0,"223GUiTFJZT5vCTnbiFnIh",1,0],[1,-24.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (280)",2,[[3,-2113,[1,"e1PUVb4yRW276p6rVQXcjz"],[1726],[2],1727]],[0,"1eygIvF9BcJruDsn/O4Yih",1,0],[1,-29.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (279)",2,[[3,-2114,[1,"92oiGej+tfNrghD/LECu1e"],[1728],[2],1729]],[0,"c2+PPKO4VaaYqLFb5U/gEn",1,0],[1,-29.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (276)",2,[[3,-2115,[1,"64TAN3Q7ZS/rxR7D/qKlV0"],[1730],[2],1731]],[0,"9d2qjolztRnrIhhrFXsZ89",1,0],[1,-14.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (273)",2,[[3,-2116,[1,"03nEqz2vBejqDEEn/BJ7HM"],[1732],[2],1733]],[0,"51NsddCZpTKYtou++5xwQp",1,0],[1,-19.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (275)",2,[[3,-2117,[1,"5bRvDdqOVe3avrX6nm1+ku"],[1734],[2],1735]],[0,"dbwDLZzqFbXa4AHcLirN4l",1,0],[1,-14.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (274)",2,[[3,-2118,[1,"3bz7hQcTFZEoxj1v7IM/5C"],[1736],[2],1737]],[0,"6fOw44W9ldCYAgi8McDe1r",1,0],[1,-19.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (271)",2,[[3,-2119,[1,"841MJ0/HlTq4pJ+KFOxEwm"],[1738],[2],1739]],[0,"c6AQPxIudft7zmUDIvT5J5",1,0],[1,-9.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (272)",2,[[3,-2120,[1,"87ICdUzMxW0Y7QROYUuDw+"],[1740],[2],1741]],[0,"7fM9yGPItWNpXnOqNkgGmO",1,0],[1,-9.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (270)",2,[[3,-2121,[1,"76vyntZPBR6J53PNNKpVGQ"],[1742],[2],1743]],[0,"42sKUgbGdUVJZEPJhmnTmK",1,0],[1,5.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (269)",2,[[3,-2122,[1,"37GeTpJt5fKJoZg23YYdSH"],[1744],[2],1745]],[0,"6dKMOmICZeE4easCWv6XV7",1,0],[1,-4.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (268)",2,[[3,-2123,[1,"83Q2KtZbJUBJB1TdmO8+M/"],[1746],[2],1747]],[0,"c7o8KgDB9QaJ72eSwuLZME",1,0],[1,0.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (267)",2,[[3,-2124,[1,"f2NKZVkLxUe7G/9gSU2xcg"],[1748],[2],1749]],[0,"6axXwTg0VQ1Y3J/6o77U4q",1,0],[1,0.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (266)",2,[[3,-2125,[1,"4cQAJaQdBZQI9J20Wm9IVW"],[1750],[2],1751]],[0,"373gHNzVpRPKO5V4NYPZJO",1,0],[1,-4.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (265)",2,[[3,-2126,[1,"74BKxq2OpQ5JypCOq9oYbp"],[1752],[2],1753]],[0,"capZG4xZVZEph5EVsAdiIf",1,0],[1,0.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (264)",2,[[3,-2127,[1,"55CzUaYU1eXKfRFuoDHkYa"],[1754],[2],1755]],[0,"5ff20cSQNWUp3+QBWo+QtB",1,0],[1,-4.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (262)",2,[[3,-2128,[1,"a6r44Fd5Nf0JUZ6bOYO6xN"],[1756],[2],1757]],[0,"60U7KdgkRXjJ2V6L6p8gyP",1,0],[1,15.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (260)",2,[[3,-2129,[1,"a0KGskgz9awYfTXzG+dnkL"],[1758],[2],1759]],[0,"bfP/CNiNJTYZoWAWoLzO2r",1,0],[1,15.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (263)",2,[[3,-2130,[1,"61qRWVfbteEaMQQCLxhJIf"],[1760],[2],1761]],[0,"ee/uUa8TNamL11rB1T6pP5",1,0],[1,10.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (259)",2,[[3,-2131,[1,"c4LhryQ9pUX617kYaseBoI"],[1762],[2],1763]],[0,"77OC5L7VBSeZEJZfPR6IGA",1,0],[1,15.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (258)",2,[[3,-2132,[1,"4aMT/pCrJe/57ciHwosqmH"],[1764],[2],1765]],[0,"41LvN9IM9YLpqSpnKwvNHl",1,0],[1,10.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (261)",2,[[3,-2133,[1,"29FEELmG9QHoWBH9T+tnWt"],[1766],[2],1767]],[0,"f4zXAVZptaKKeINOGO1z3c",1,0],[1,10.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (251)",2,[[3,-2134,[1,"8dtKO+q9FWqZjH81w4ipIq"],[1768],[2],1769]],[0,"0d+cMhd0hRW7PeS2dVWQN4",1,0],[1,25.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (252)",2,[[3,-2135,[1,"03aBwt9/pT4548YIMwB3GE"],[1770],[2],1771]],[0,"6bYnpKZuBRbbaFdDnoy7/y",1,0],[1,20.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (257)",2,[[3,-2136,[1,"9c7E+2Iw9S1Yh9e7OUYudM"],[1772],[2],1773]],[0,"e1eSknoTZRFr3WsvEexrDb",1,0],[1,20.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (256)",2,[[3,-2137,[1,"2cptAD20BetJRFLI2BXiRq"],[1774],[2],1775]],[0,"5axP835q5QPbm/W56W5T8i",1,0],[1,25.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (254)",2,[[3,-2138,[1,"80s5YHybRam6NsP/A1CZlu"],[1776],[2],1777]],[0,"e6B5WuJX5fNbhqgBkuPUov",1,0],[1,25.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (255)",2,[[3,-2139,[1,"9cJtfcuexVULT83QAZhkBQ"],[1778],[2],1779]],[0,"f5N9U+RdVQZYgB301iDnCJ",1,0],[1,20.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (250)",2,[[3,-2140,[1,"50ybqRyPlQSZRsHsBrqelI"],[1780],[2],1781]],[0,"fbfBM3r/hYVajJQNZqTabr",1,0],[1,20.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (253)",2,[[3,-2141,[1,"22lJHKF1RWgoiK4Jjq0ISx"],[1782],[2],1783]],[0,"e0xjr4vGtWprFyezweJ34E",1,0],[1,25.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (249)",2,[[3,-2142,[1,"dcbkm3nX5TQawh/TfIYjYZ"],[1784],[2],1785]],[0,"ba4q2l8TlQ469gsTscbF5p",1,0],[1,30.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (248)",2,[[3,-2143,[1,"22pq9te1Vd4IOmvC87h2+X"],[1786],[2],1787]],[0,"38k89yrqxcPKSfqmK5qKed",1,0],[1,35.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (243)",2,[[3,-2144,[1,"3cG+libp1RgJDlfTZHcyif"],[1788],[2],1789]],[0,"62F3oUSTZURJ5PfWZAu3ek",1,0],[1,35.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (247)",2,[[3,-2145,[1,"db+NLwVahYSpJUYJeA7crQ"],[1790],[2],1791]],[0,"e8x1XPXfZYDa1INkytbiXt",1,0],[1,30.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (244)",2,[[3,-2146,[1,"7aKuTdr2BfTL1HO/2V9RGm"],[1792],[2],1793]],[0,"e2v1T9JwlcHrvarXwQ0LYS",1,0],[1,30.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (242)",2,[[3,-2147,[1,"e8Na1ZcOlcnqGmK7TyNGAb"],[1794],[2],1795]],[0,"b4943Wy/Zb2LiVpRxGZzb+",1,0],[1,30.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (246)",2,[[3,-2148,[1,"05z5vFSMlaz7put0Pn7ZC2"],[1796],[2],1797]],[0,"85N7RWzHtW678KN1BW/lob",1,0],[1,35.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (241)",2,[[3,-2149,[1,"fcK794+zVfSohKrNK2JYQi"],[1798],[2],1799]],[0,"fa0udO1g1Q5LvOJij6Tmuy",1,0],[1,50.5,0,91.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (240)",2,[[3,-2150,[1,"29470nbnVU84OblAp8Wdk3"],[1800],[2],1801]],[0,"44MvXqxZhWWZQ/gkdWkEQC",1,0],[1,55.5,0,91.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (239)",2,[[3,-2151,[1,"abo8wukzJd1p+u9xSZo7Ry"],[1802],[2],1803]],[0,"44KVdfoVJWEp3M+6fo89MP",1,0],[1,45.5,0,91.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (238)",2,[[3,-2152,[1,"41uMnIjFlZaZBSreXJSVFD"],[1804],[2],1805]],[0,"3aeH0XW1NRtJg3ojUUQlUx",1,0],[1,40.5,0,91.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (236)",2,[[3,-2153,[1,"3fgKMg1pdbBaz7SDWUZZpJ"],[1806],[2],1807]],[0,"8d+0FSuOhXfpwi2NOsUWv/",1,0],[1,35.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Env_Grass_01 (234)",2,[[3,-2154,[1,"f1l2pdI/NW4YrhNYDOf/V0"],[1808],[2],1809]],[0,"0aqGGJ6QxSBIvct6kHZ68f",1,0],[1,30.5,0,76.5],[3,0,1,0,0],[1,20,1,1],[1,0,180,0]],[4,"SM_Env_Grass_01 (231)",2,[[3,-2155,[1,"66dHnZJH1eWqf05GR+nDeA"],[1810],[2],1811]],[0,"14p9QfPnhaE4FtvKuQufnj",1,0],[1,30.5,0,91.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Env_Grass_01 (237)",2,[[3,-2156,[1,"54CtdeA5RTqbUYHrSNnCXR"],[1812],[2],1813]],[0,"31PBH1j8dTqJFJbZqsyZXt",1,0],[1,30.5,0,81.5],[3,0,1,0,0],[1,20,1,1],[1,0,180,0]],[6,"SM_Env_Grass_01 (232)",2,[[3,-2157,[1,"92Rw1/g9Be3KSbTcJxPzSS"],[1814],[2],1815]],[0,"e3O1uTT+1SfoZxMAgD6LQL",1,0],[1,30.5,0,86.5],[3,0,1,0,0],[1,20,1,1],[1,0,180,0]],[4,"SM_Env_Grass_01 (233)",2,[[3,-2158,[1,"e94CJfiilcv6iOfQ/LWzEU"],[1816],[2],1817]],[0,"f650S0t9BaTIr4T1LU+c7/",1,0],[1,35.5,0,86.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (235)",2,[[3,-2159,[1,"150VDMJZpcRYw/qRUGCO6w"],[1818],[2],1819]],[0,"afoM7gVb5QWawnIONK5u/R",1,0],[1,35.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (230)",2,[[3,-2160,[1,"b8G1eNU9pVupMY1p42QVa+"],[1820],[2],1821]],[0,"f7UJ81B7BQG7Z+7Qa1jO4l",1,0],[1,35.5,0,91.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (229)",2,[[3,-2161,[1,"10vVm7v1BQPr39bzVQElcX"],[1822],[2],1823]],[0,"43UEzJak1RXJIICyjSkQku",1,0],[1,65.5,0,86.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (228)",2,[[3,-2162,[1,"d1N+bQezZSP5zQJIzmg0HD"],[1824],[2],1825]],[0,"5aa6yBM0RRb5Bjr5g5W70n",1,0],[1,60.5,0,86.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (226)",2,[[3,-2163,[1,"970zm5N1hcBoxhMJRWd6fr"],[1826],[2],1827]],[0,"26lk/YU91akrkYIk0d3F4i",1,0],[1,65.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (227)",2,[[3,-2164,[1,"32o4mgECtaN6E+sOFhxLTw"],[1828],[2],1829]],[0,"4fYOUoOlJf37Hk6z46z36f",1,0],[1,60.5,0,81.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (222)",2,[[3,-2165,[1,"0aEcazYoxQGb95WAMSchBG"],[1830],[2],1831]],[0,"c3VEOxfR1TlLmK/obM8rJh",1,0],[1,60.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (225)",2,[[3,-2166,[1,"0bC5q5CcVUErNEFzPCImbJ"],[1832],[2],1833]],[0,"86/L2g191Zx6Ccv/kYmdxW",1,0],[1,60.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (220)",2,[[3,-2167,[1,"684XuMddRQAKcSCUpKvtHm"],[1834],[2],1835]],[0,"27bNU5spBeEb5b7yhZht/a",1,0],[1,60.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (223)",2,[[3,-2168,[1,"c213dOKLdXY4TYOAUJjzMr"],[1836],[2],1837]],[0,"84HHqSG25YNKuTVehAtIXv",1,0],[1,65.5,0,66.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (221)",2,[[3,-2169,[1,"84rSx+TktdJJ4hjZFwh0DR"],[1838],[2],1839]],[0,"010xnjhupSBrlckyb2HMzR",1,0],[1,65.5,0,76.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (224)",2,[[3,-2170,[1,"6dyDEEEpxXOqyZO4KubVgi"],[1840],[2],1841]],[0,"b0B8h+G7heQYGfnOkw4YRd",1,0],[1,65.5,0,71.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (219)",2,[[3,-2171,[1,"97AfQGCudRG5xLxvT07snl"],[1842],[2],1843]],[0,"13vPdRR15W2rHGOPqQwq/u",1,0],[1,60.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (218)",2,[[3,-2172,[1,"82z5C8SFZW/ZtP+IE39iM6"],[1844],[2],1845]],[0,"19Br9x5SVV7Ib5P7tOkY4/",1,0],[1,65.5,0,61.5],[3,0,1,0,0],[1,0,180,0]],[30,"SM_Env_Sidewalk_Crossing_02",2,[[3,-2173,[1,"aaEkV8QeRVW6wYG02qqQn7"],[1846],[2],1847]],[0,"13ehyEpv5YSpxGMTCpixOG",1,0],[1,-29.5,0,-28.5],[1,-1,1,1]],[4,"SM_Env_Grass_01 (199)",2,[[3,-2174,[1,"7dww6AcXxbNo4S7ijNjPwO"],[1848],[2],1849]],[0,"3dRakHIBlZVrBQaS5/8BX2",1,0],[1,-69.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (202)",2,[[3,-2175,[1,"434C8dhh9WfYOt9N/keaYO"],[1850],[2],1851]],[0,"dc7AJK7rVTqJXlh10vgCV6",1,0],[1,-69.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (201)",2,[[3,-2176,[1,"63CqpvNZpadbAMHft7U6F+"],[1852],[2],1853]],[0,"e1++XQAgZdV5rA8B0Pg2nD",1,0],[1,-74.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (200)",2,[[3,-2177,[1,"fdrwIxtQJWkZLmgNOYU/F3"],[1854],[2],1855]],[0,"84/ivcLI1Ua7G0KtHXJYZX",1,0],[1,-74.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (198)",2,[[3,-2178,[1,"e1CcpQKSVeKqUlFm8I2/Mc"],[1856],[2],1857]],[0,"24YIk8bLheuJ1gUnu0AEXC",1,0],[1,-69.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (197)",2,[[3,-2179,[1,"64wsX15ChVlI9eRmxOpKyy"],[1858],[2],1859]],[0,"b0HUONWvdbvqY6S7OnNFGe",1,0],[1,-74.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (196)",2,[[3,-2180,[1,"c1dK+0dB1b8KUNF76ZgdYy"],[1860],[2],1861]],[0,"baeWDOs/JRyaEs4P4Bacb+",1,0],[1,-74.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (195)",2,[[3,-2181,[1,"2c5cLP47NXSbDhIeqyy2xq"],[1862],[2],1863]],[0,"54QQXJ3IpQKIekOndQGfOh",1,0],[1,-69.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (191)",2,[[3,-2182,[1,"beuYihMhpdNbBwB2u+Z4+H"],[1864],[2],1865]],[0,"5f2tz8l21UQpRaaq++xOLg",1,0],[1,-74.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (190)",2,[[3,-2183,[1,"ab2LUkzFFarr7HnmtoWHCu"],[1866],[2],1867]],[0,"10AbUQqalYDqBSXxJ51VO+",1,0],[1,-74.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (189)",2,[[3,-2184,[1,"834niGXINd4rorbRWaSb/q"],[1868],[2],1869]],[0,"e1ZsSJ/pVU3q1toAbnd3Hz",1,0],[1,-74.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (188)(__autogen 938)",2,[[3,-2185,[1,"48YyPmZwZRl54gBCfkyyoO"],[1870],[2],1871]],[0,"53+R51IlleHpA+t/8ZdQud",1,0],[1,-74.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (184)(__autogen 939)",2,[[3,-2186,[1,"ce0gaFqYhYK6wlc6+tLpfv"],[1872],[2],1873]],[0,"8dO5C8vDFQm7VhJWefFZ7M",1,0],[1,-64.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (186)(__autogen 940)",2,[[3,-2187,[1,"5a8+7p4KlZpL4kN48sr2pN"],[1874],[2],1875]],[0,"e3I5UGj6dVh7IapuN2dnU2",1,0],[1,-64.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (183)(__autogen 941)",2,[[3,-2188,[1,"ccdMLdfFRfLZHI5h9biWXp"],[1876],[2],1877]],[0,"846K6FUKheqYTt3AropoFe",1,0],[1,-69.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (182)(__autogen 942)",2,[[3,-2189,[1,"afYcCuwPhfp6DwjgM5YnBB"],[1878],[2],1879]],[0,"ffwV0DKpFZq54nDr1XZ/05",1,0],[1,-69.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (181)(__autogen 943)",2,[[3,-2190,[1,"4eeqGKNHpVsKjthpVJywgd"],[1880],[2],1881]],[0,"caSrPAPVdcea0oW5B8Uhr0",1,0],[1,-69.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (180)(__autogen 944)",2,[[3,-2191,[1,"63rBPbTcRZAaTCeK3lAM07"],[1882],[2],1883]],[0,"28cB/7c51UsaUAvT7KeBSh",1,0],[1,-69.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (187)(__autogen 945)",2,[[3,-2192,[1,"1a+q+nXVtUVJ1Acf5qviG6"],[1884],[2],1885]],[0,"193h/6Yede+axFcycbCYHf",1,0],[1,-64.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (185)(__autogen 946)",2,[[3,-2193,[1,"5eAjtv/gFc3J4TqruAjNX+"],[1886],[2],1887]],[0,"55ytvlKXlTrrOYjr27Iyb3",1,0],[1,-64.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (179)(__autogen 947)",2,[[3,-2194,[1,"cevkAuMyJboq6lI9qMoYgY"],[1888],[2],1889]],[0,"5cSo/+A4ldJrI5fY2dVYaS",1,0],[1,60.5,0,56.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (178)(__autogen 948)",2,[[3,-2195,[1,"98pnIdA1tX5pMFCT4SNF4u"],[1890],[2],1891]],[0,"29eh6XrAtc5IixTdMtTGyK",1,0],[1,65.5,0,56.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (177)(__autogen 949)",2,[[3,-2196,[1,"94HEiSbSJalafsUZ9llOf6"],[1892],[2],1893]],[0,"80PE5Mmq5X7aotliTaXKj+",1,0],[1,65.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (176)(__autogen 950)",2,[[3,-2197,[1,"1b9PHcuNReXYqZfOhdnE9n"],[1894],[2],1895]],[0,"a9EuuaVmZYA69bNRZInlW8",1,0],[1,60.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (175)(__autogen 951)",2,[[3,-2198,[1,"cbr38KPJpfR4B3D/W+GvKP"],[1896],[2],1897]],[0,"6aMlq1MjlfdYRKzSw4e6y5",1,0],[1,60.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (174)(__autogen 952)",2,[[3,-2199,[1,"66Sb2gGL9RDps9x6/1UiJP"],[1898],[2],1899]],[0,"42wQSFVAZUs6Cq9yN3qUby",1,0],[1,65.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (173)(__autogen 953)",2,[[3,-2200,[1,"c9LrWvnylfVZS/LVzAzi0i"],[1900],[2],1901]],[0,"e5ztRn/YBVtLVD7h2n+y+0",1,0],[1,65.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (172)(__autogen 954)",2,[[3,-2201,[1,"00wLRnyltVDqtPN7VGATFe"],[1902],[2],1903]],[0,"e0ES9jzlFUdKNT/0s/veX1",1,0],[1,60.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (170)(__autogen 955)",2,[[3,-2202,[1,"66+ZDmfYVbvbkMQBDJopGt"],[1904],[2],1905]],[0,"e3v/3KtX9VSq8joYEfLFg2",1,0],[1,65.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (171)(__autogen 956)",2,[[3,-2203,[1,"9bHlz/HOFSU630gHTkXTy4"],[1906],[2],1907]],[0,"5a5Vyxl+BRfZqx84/4yQM6",1,0],[1,60.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (169)(__autogen 957)",2,[[3,-2204,[1,"32tcXQgXlVYIvjgdpw4rXZ"],[1908],[2],1909]],[0,"06+6p7wUJdsKdll9GOmzBH",1,0],[1,65.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (168)(__autogen 958)",2,[[3,-2205,[1,"0cTD5MpUBfrpFeOUKDsEiw"],[1910],[2],1911]],[0,"afzdT283FXCq9iqxE5LeCy",1,0],[1,60.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (167)(__autogen 959)",2,[[3,-2206,[1,"a7kPuC0sdXTaIgY0rAGS9R"],[1912],[2],1913]],[0,"f7jlXXsC1Q/bfXsQLt3Pqr",1,0],[1,60.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (166)(__autogen 960)",2,[[3,-2207,[1,"79uUsEpbRaA6ByuZEyxZIR"],[1914],[2],1915]],[0,"ce/Zr8qvJT0LnfkwdmFkBC",1,0],[1,65.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (164)(__autogen 961)",2,[[3,-2208,[1,"8aut21v05Ye7rtKkG25Cko"],[1916],[2],1917]],[0,"959ZKddKFeLbDUDR/PGDeI",1,0],[1,60.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (165)(__autogen 962)",2,[[3,-2209,[1,"e5Cc1oHlVVgalNNUosAY85"],[1918],[2],1919]],[0,"c6jdMXoW1WupFd2jfDksEv",1,0],[1,65.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (163)(__autogen 963)",2,[[3,-2210,[1,"36jl4V2h9TJa97wQRfXNNB"],[1920],[2],1921]],[0,"69L0VztJlf9bqfjr/s47GY",1,0],[1,60.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (162)(__autogen 964)",2,[[3,-2211,[1,"b0F+758x1eaLQ9vIFPtKm6"],[1922],[2],1923]],[0,"aak86y00Banbl53T9NEeD3",1,0],[1,65.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (161)(__autogen 965)",2,[[3,-2212,[1,"89zOOUuJpU/ZGJ1J+v398o"],[1924],[2],1925]],[0,"000e6gRsdYt5cPXKhbUxcZ",1,0],[1,65.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (159)(__autogen 966)",2,[[3,-2213,[1,"73HZV3+YBZ0IHHwTrkc7RG"],[1926],[2],1927]],[0,"90yErW/1NSKrzOg9iOJrwN",1,0],[1,65.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (160)(__autogen 967)",2,[[3,-2214,[1,"84F2r1L6pWV7swm9/NJ2X0"],[1928],[2],1929]],[0,"995Pht2mZUkqhhH7I03mPx",1,0],[1,65.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (157)(__autogen 968)",2,[[3,-2215,[1,"43gbMFM+tRXLMs51J371cE"],[1930],[2],1931]],[0,"8dnb+XIlJfrZ9dm8YleiRq",1,0],[1,60.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (34)(__autogen 969)",2,[[3,-2216,[1,"0c6yb9cxNX2JC+ymROlLvG"],[1932],[2],1933]],[0,"a1rSp0gEpcmqA+1+AztIFc",1,0],[1,60.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (158)(__autogen 970)",2,[[3,-2217,[1,"12T8PgvT1Xvot5VGZpDH2O"],[1934],[2],1935]],[0,"63lCEq1gpbkZBfknbFDp0s",1,0],[1,60.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (156)(__autogen 971)",2,[[3,-2218,[1,"e9ySjj3eVeQ6Z3BzFKdWOT"],[1936],[2],1937]],[0,"d8y20X9TFadImY2hcbI7TU",1,0],[1,-14.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (155)(__autogen 972)",2,[[3,-2219,[1,"a93p3MWYdVKJStbNZx0q1i"],[1938],[2],1939]],[0,"5dsd+PDLFau6QH6Gn8Nevy",1,0],[1,-44.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (152)(__autogen 973)",2,[[3,-2220,[1,"fatbvDB/hdF649OT5OA5lr"],[1940],[2],1941]],[0,"0cPYugsVday5/3Oa4+i06x",1,0],[1,-59.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (151)(__autogen 974)",2,[[3,-2221,[1,"c40Qy2onhe6YVYKCg2qVhW"],[1942],[2],1943]],[0,"67doaKs6leBLt6fXuSVdvT",1,0],[1,-74.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (154)(__autogen 975)",2,[[3,-2222,[1,"64qDfmqjZbGIQtltdunsOR"],[1944],[2],1945]],[0,"f31uxCtGZXFZozXfotQXQG",1,0],[1,-49.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (153)(__autogen 976)",2,[[3,-2223,[1,"dfHlMP329SHq+cAKBb/kqR"],[1946],[2],1947]],[0,"29+6fQzYJf1rRg4skWZJQC",1,0],[1,-54.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (150)(__autogen 977)",2,[[3,-2224,[1,"767zbPiRtSC5tJoE9+c31e"],[1948],[2],1949]],[0,"3a3SM42V5eerAk9Ldnnxar",1,0],[1,-39.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (149)(__autogen 978)",2,[[3,-2225,[1,"61FYUgTWJaApRZmK8gerXr"],[1950],[2],1951]],[0,"07D7u3NQ5WbqZTOHwOaheF",1,0],[1,-34.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (148)(__autogen 979)",2,[[3,-2226,[1,"9b6SGXfkhWm46LMGjRlzVH"],[1952],[2],1953]],[0,"f7+DtlXF9f8pyx+yvN+SHy",1,0],[1,-29.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (147)(__autogen 980)",2,[[3,-2227,[1,"d5UynCSfBYKbtz9W68rHGD"],[1954],[2],1955]],[0,"5eKqJ7mnpdHbFthrSf1fdb",1,0],[1,-24.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (146)(__autogen 981)",2,[[3,-2228,[1,"84uvQHEV5bdpNNaC+0lAio"],[1956],[2],1957]],[0,"f0E9YsCoJdNboKJ/D28fWO",1,0],[1,-19.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (145)(__autogen 982)",2,[[3,-2229,[1,"1fJcTjreddL5WBUD5PVSL/"],[1958],[2],1959]],[0,"femlPA/tFQEJxXFbuWSVro",1,0],[1,-74.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (144)(__autogen 983)",2,[[3,-2230,[1,"1eCXqyeH1bzbLDDtJPEcK5"],[1960],[2],1961]],[0,"e1Ciz5iptcKoHNnqjCGie3",1,0],[1,-59.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (143)(__autogen 984)",2,[[3,-2231,[1,"2euYU5ldNYkrrWjnAUCD8n"],[1962],[2],1963]],[0,"74LuqyMzZTDro4nWOVMaUP",1,0],[1,-54.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (142)(__autogen 985)",2,[[3,-2232,[1,"f9qKMyvIVa0JwMyG31vvcx"],[1964],[2],1965]],[0,"7bRtTCDYxfNaZ1ExhaD6kH",1,0],[1,-49.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (141)(__autogen 986)",2,[[3,-2233,[1,"89pwZa6VVQaZGQcQOYOWRP"],[1966],[2],1967]],[0,"a2F8ZjH9JUXqUMkdD1ntjn",1,0],[1,-44.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (140)(__autogen 987)",2,[[3,-2234,[1,"d2vmW4ifVcwYX6rdGRapTK"],[1968],[2],1969]],[0,"35Bxc/KENdlpgsHigFor+U",1,0],[1,-44.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (139)(__autogen 988)",2,[[3,-2235,[1,"92qyxkyNtfroJFASX7XDqV"],[1970],[2],1971]],[0,"b6EfL6cN1QSrX+dpQJmAcf",1,0],[1,-49.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (138)(__autogen 989)",2,[[3,-2236,[1,"8egGPdjO9fE6LhcwxM1BxI"],[1972],[2],1973]],[0,"0afwZkni5UD7ziEhaS/Fzr",1,0],[1,-54.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (137)(__autogen 990)",2,[[3,-2237,[1,"36ulLIW1VWcrG3RaKT1MBV"],[1974],[2],1975]],[0,"60/+pXa25Wn4rAVvh/EVAy",1,0],[1,-59.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (136)(__autogen 991)",2,[[3,-2238,[1,"36cf4DbKBSkpCLmaYu6qoR"],[1976],[2],1977]],[0,"5dK7JAceBaUrVMGWWw/GY9",1,0],[1,-74.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (135)(__autogen 992)",2,[[3,-2239,[1,"16Xt3N1oVZC4gPryh806S8"],[1978],[2],1979]],[0,"8cF4bFZp1a5Z/Bycjv2MM/",1,0],[1,-74.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (133)(__autogen 993)",2,[[3,-2240,[1,"16wARxL8Bctb+GL08qsWHv"],[1980],[2],1981]],[0,"0bgpXrAJFUcLUAscoOYN4E",1,0],[1,-54.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (132)(__autogen 994)",2,[[3,-2241,[1,"e0uVY5jOde6aoYVWVI0Q5G"],[1982],[2],1983]],[0,"988qM/OENUSZN0+jEV4Owa",1,0],[1,-49.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (131)(__autogen 995)",2,[[3,-2242,[1,"9eFzE4AhFYuLwLZL3pZ4C/"],[1984],[2],1985]],[0,"4epqMhKMZQbqrjj+iuK9T0",1,0],[1,-44.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (134)(__autogen 996)",2,[[3,-2243,[1,"5eB9woYDlfxbtZ0IuO6zLT"],[1986],[2],1987]],[0,"4fTk2mA9dQPYS+RqK3Kpz+",1,0],[1,-59.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (127)(__autogen 997)",2,[[3,-2244,[1,"28YZkfqPlUVZ4WMfhxtwJl"],[1988],[2],1989]],[0,"85XXG3zXBUHJYxk5NoxLx7",1,0],[1,-59.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (130)(__autogen 998)",2,[[3,-2245,[1,"3ar7vhtfZeEp3jXyPxBfLA"],[1990],[2],1991]],[0,"37L0OGV+FQV6C3jVOKCO5k",1,0],[1,-44.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (126)(__autogen 999)",2,[[3,-2246,[1,"bfS1Z6Fr1f9bsyyD+S/VkD"],[1992],[2],1993]],[0,"77LKpONLNUaKyoBziMFr43",1,0],[1,-74.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (128)(__autogen 1000)",2,[[3,-2247,[1,"804Qz1UWdQXqW6bozhgOJH"],[1994],[2],1995]],[0,"e1KtOazcdTGYby/oG3r+83",1,0],[1,-54.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (129)(__autogen 1001)",2,[[3,-2248,[1,"5fenk5Nc5cmL/986HoRRk8"],[1996],[2],1997]],[0,"26Lyw9ekNTPaFe3f1SCaRw",1,0],[1,-49.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (122)(__autogen 1002)",2,[[3,-2249,[1,"eeI93nschV7qyAl8T9Qalk"],[1998],[2],1999]],[0,"13fO4lvXRQP6Av4dZ2Ajt4",1,0],[1,-64.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (123)(__autogen 1003)",2,[[3,-2250,[1,"f0zZdO8/dbm5O0y7XBnR8h"],[2000],[2],2001]],[0,"628GD+j6xQA5UR8uH2tcLY",1,0],[1,-64.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (125)(__autogen 1004)",2,[[3,-2251,[1,"e623/ElTRQeo8rvxxXl188"],[2002],[2],2003]],[0,"edDjEcadtfQ7Ns443rFTPB",1,0],[1,-74.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (124)(__autogen 1005)",2,[[3,-2252,[1,"6fPcdEouJbhYp0SVrztEq0"],[2004],[2],2005]],[0,"46sTgsQbBdWIpdCqdLAMP3",1,0],[1,-74.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (121)(__autogen 1006)",2,[[3,-2253,[1,"d4m853mM9bxbBVdU0QtCkM"],[2006],[2],2007]],[0,"f13j7KMqFWO4mM7XFnZPDA",1,0],[1,-64.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (120)(__autogen 1007)",2,[[3,-2254,[1,"baNxHZ1oxcbpPxS59CbZnp"],[2008],[2],2009]],[0,"00Mt1K8zhfD48ERVoX1JHM",1,0],[1,-64.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (119)(__autogen 1008)",2,[[3,-2255,[1,"f4aHggxNBcYbGrnuaHafTV"],[2010],[2],2011]],[0,"fbkZZvoutXJLVK4ebDdy3L",1,0],[1,-59.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (118)(__autogen 1009)",2,[[3,-2256,[1,"5eZu28r+Zb/anu9FiCT3f7"],[2012],[2],2013]],[0,"c4Uj2sZFxa5L5cIScLe5yE",1,0],[1,-59.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (116)(__autogen 1010)",2,[[3,-2257,[1,"59/9tPHS5fP6lOk5dWTjMx"],[2014],[2],2015]],[0,"e4H4kMVc5R2aCt0Xqwe+70",1,0],[1,-59.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (114)(__autogen 1011)",2,[[3,-2258,[1,"ea0Oeicz5THonnX038v5rv"],[2016],[2],2017]],[0,"80aEdhdh5U/qjlZ0sKCXA2",1,0],[1,-59.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (109)(__autogen 1012)",2,[[3,-2259,[1,"36Kt0Q6OpYnbemtVf2cuJJ"],[2018],[2],2019]],[0,"cb3qbnfMBYUapbqT0GVd5K",1,0],[1,-54.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (111)(__autogen 1013)",2,[[3,-2260,[1,"84qC9u1Y1cjrOqei3KdLcG"],[2020],[2],2021]],[0,"594Z16EsxQOb0mUE95VJ8G",1,0],[1,-54.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (113)(__autogen 1014)",2,[[3,-2261,[1,"93xLCAkxdcDqqnqrh54kWM"],[2022],[2],2023]],[0,"c60mEgHCFWTY80kLBV6UQa",1,0],[1,-54.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (102)(__autogen 1015)",2,[[3,-2262,[1,"a3r3/pxuJQNr67/1Rmj/kZ"],[2024],[2],2025]],[0,"fej66nQrdZ3apSbJyyoL9/",1,0],[1,-49.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (106)(__autogen 1016)",2,[[3,-2263,[1,"07BFy0csFQx5pWh1OxNHu3"],[2026],[2],2027]],[0,"08AtgPPjRXDL/3yxYIVN9z",1,0],[1,-49.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (107)(__autogen 1017)",2,[[3,-2264,[1,"0czbXKCs5UTbfnUfdHDd6O"],[2028],[2],2029]],[0,"42MJpFIRVSq5mY0Fjqv5bB",1,0],[1,-49.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (104)(__autogen 1018)",2,[[3,-2265,[1,"2aqRlCs/xbkoLTrkrLBbMq"],[2030],[2],2031]],[0,"c3gBqIXhNRq5ZDu9jkWx6P",1,0],[1,-49.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (97)(__autogen 1019)",2,[[3,-2266,[1,"4bYj+e4adVDavDAGWMJ9RU"],[2032],[2],2033]],[0,"51V6ErwkdXcqEpztvapBJ7",1,0],[1,-44.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (99)(__autogen 1020)",2,[[3,-2267,[1,"04hef01SNd46C3g2DlvuIS"],[2034],[2],2035]],[0,"ecMskBE4VTsq5IRkgRtwj8",1,0],[1,-44.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (98)(__autogen 1021)",2,[[3,-2268,[1,"c6B/imBF5V5LwNp+Uy3Z1U"],[2036],[2],2037]],[0,"fef73UQwpQur5esnNwNK7a",1,0],[1,-44.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (101)(__autogen 1022)",2,[[3,-2269,[1,"06mvlZXEpWPbmwHUgCzmlP"],[2038],[2],2039]],[0,"e5JUzCwCdcAKxZpl5A5jgJ",1,0],[1,-44.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (96)(__autogen 1023)",2,[[3,-2270,[1,"480+egLbRQlbR3G9wLfZBR"],[2040],[2],2041]],[0,"c5BtCFxshZebFIXGUqsPdU",1,0],[1,-44.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (100)(__autogen 1024)",2,[[3,-2271,[1,"91TXtBJSNczIOKYtlrCv6P"],[2042],[2],2043]],[0,"f5xYIp0+NWp7/TU0rgQdS9",1,0],[1,-44.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (93)(__autogen 1025)",2,[[3,-2272,[1,"92duhEFERXc7sD8kZD9a+I"],[2044],[2],2045]],[0,"d4rh+3LBNcxJuyVRAh6kVZ",1,0],[1,-39.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (91)(__autogen 1026)",2,[[3,-2273,[1,"67wxRccG1dXZYA0up6IIBP"],[2046],[2],2047]],[0,"66AeDp3adU2ZYKVCtRbREh",1,0],[1,-39.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (90)(__autogen 1027)",2,[[3,-2274,[1,"99yGJtOsJVMq/qBkSPoC5a"],[2048],[2],2049]],[0,"74WthpCFlbm5aMcEs0C2eP",1,0],[1,-39.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (89)(__autogen 1028)",2,[[3,-2275,[1,"efBlSElX1bsKhUuDgiy9D/"],[2050],[2],2051]],[0,"39Dw7dll9f1LHr28ccoZKV",1,0],[1,-34.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (88)(__autogen 1029)",2,[[3,-2276,[1,"d8ts9AgahbX4M6DTjoWxDM"],[2052],[2],2053]],[0,"909fYd4RVZobGaHv223GN4",1,0],[1,-34.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (87)(__autogen 1030)",2,[[3,-2277,[1,"18HA84PrVXGIuO4Wefk/T5"],[2054],[2],2055]],[0,"f6CqBVNTlYI6aj1XlVZTHs",1,0],[1,-34.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (86)(__autogen 1031)",2,[[3,-2278,[1,"57IaYdD+xWd56YeyW0mxbU"],[2056],[2],2057]],[0,"28FSQKNLlV3rSJUHypLq4r",1,0],[1,-34.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (85)(__autogen 1032)",2,[[3,-2279,[1,"d7JhWPLrpYMYtNpe8e3aqP"],[2058],[2],2059]],[0,"46SqPasLxcUqhcEIHN1rK9",1,0],[1,-34.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (84)(__autogen 1033)",2,[[3,-2280,[1,"b5wh90g1hTEpNNWHLG7iea"],[2060],[2],2061]],[0,"e1ZxfZZ3NbrpSiOSiDjQ3b",1,0],[1,-34.5,0,-13.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (11)",2,[[3,-2281,[1,"a5FXk1PQRQuo7C1Au3wWVI"],[2062],[2],2063]],[0,"a4U7k8LQZRdLift8jkKEO4",1,0],[1,70.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (10)",2,[[3,-2282,[1,"bc5n0/zApQ27CNScrz1VQ5"],[2064],[2],2065]],[0,"be+xTA2tNYo7e5GK0xcR0p",1,0],[1,80.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (9)",2,[[3,-2283,[1,"e8u083zZFVn4jVuToA3TFL"],[2066],[2],2067]],[0,"f3B9jUpClfPqFjrBpt8fx+",1,0],[1,75.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (8)",2,[[3,-2284,[1,"e1H4zhQ9taEqvTqm55S6t6"],[2068],[2],2069]],[0,"abdU7qAYdeVICfSZjSGNDA",1,0],[1,75.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (7)",2,[[3,-2285,[1,"0cpTcFXL1UD47k0NwJKgeB"],[2070],[2],2071]],[0,"e5w/1oZ2JczLcCqcvC7Ea1",1,0],[1,80.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (6)",2,[[3,-2286,[1,"c6OIRLlpVZVpaeO6f6JJPp"],[2072],[2],2073]],[0,"7cIlg23ANezr2kOIaasEdQ",1,0],[1,65.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (35)(__autogen 1040)",2,[[3,-2287,[1,"d1BPTOqF1WKpdwkHxAUy7Z"],[2074],[2],2075]],[0,"f2Z/9vjApUk5BLJRPISYoT",1,0],[1,0.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (83)(__autogen 1041)",2,[[3,-2288,[1,"774AI0HlJZ/qPVFpliBtrw"],[2076],[2],2077]],[0,"34nfAxs6Fbs7I8IIqn0gEp",1,0],[1,-59.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (81)(__autogen 1042)",2,[[3,-2289,[1,"55Lv17Jl5fybiNqkqG8KmZ"],[2078],[2],2079]],[0,"3fNnGiePtcJLsWK4OD28f+",1,0],[1,-59.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (82)(__autogen 1043)",2,[[3,-2290,[1,"ddTz0NOGdXC4dOr43vaGVZ"],[2080],[2],2081]],[0,"223cVQQpZeRIGWahtWjKUY",1,0],[1,-59.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (80)(__autogen 1044)",2,[[3,-2291,[1,"b5kUJVMbdXq66Kr0S2cmaL"],[2082],[2],2083]],[0,"27sWMpiA9RvrL8QVgyQQMg",1,0],[1,-59.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (79)(__autogen 1045)",2,[[3,-2292,[1,"a3TIOTZbRRY7+Smy80NR09"],[2084],[2],2085]],[0,"bbP1P28xZa2oLsCvVDEEwk",1,0],[1,-54.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (77)(__autogen 1046)",2,[[3,-2293,[1,"b6tB2jxZBdgbAFnP8WJCPp"],[2086],[2],2087]],[0,"f37XPSgShUAr+qJB0q3Mew",1,0],[1,-54.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (78)(__autogen 1047)",2,[[3,-2294,[1,"f6I0JWIYBbzrMCSYU50T9a"],[2088],[2],2089]],[0,"3c41d9j0lQJ7F/x35LiR0O",1,0],[1,-54.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (76)(__autogen 1048)",2,[[3,-2295,[1,"bc6wBDk3hZs7bYpKiZ11AI"],[2090],[2],2091]],[0,"a9Nz3RQWRfsK37SD313HC8",1,0],[1,-54.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (73)(__autogen 1049)",2,[[3,-2296,[1,"bbLIRZtklccIX2BlZsRmR3"],[2092],[2],2093]],[0,"a6bzaZvOpX2bGygC7vbC1j",1,0],[1,-49.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (72)(__autogen 1050)",2,[[3,-2297,[1,"54cXFqDexQUZnvq4+dZuM2"],[2094],[2],2095]],[0,"c4zHEaQuNQYoxVGfIJHBQj",1,0],[1,-49.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (75)(__autogen 1051)",2,[[3,-2298,[1,"bczjOxOWFYDZVLtdI4lEj2"],[2096],[2],2097]],[0,"16emHy0qtXQ7f+pOsMQ4KS",1,0],[1,-49.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (74)(__autogen 1052)",2,[[3,-2299,[1,"2ftPmt9qxeQbbDVFg8zU/s"],[2098],[2],2099]],[0,"44TSurPFxUKr9ivI6jlkJa",1,0],[1,-49.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (5)",2,[[3,-2300,[1,"83uh9fIHhT5ZscjO74zvYH"],[2100],[2],2101]],[0,"a1r/pY9tdR4ZD7l8GlE8lD",1,0],[1,80.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (70)(__autogen 1054)",2,[[3,-2301,[1,"51qTmDIqBbm4jfi/KKr6Sn"],[2102],[2],2103]],[0,"13qIE38LRdO7bmDTlJfQtj",1,0],[1,-44.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (69)(__autogen 1055)",2,[[3,-2302,[1,"617gf/5IVZZpSSY2xIQnHL"],[2104],[2],2105]],[0,"54yaYLr3NTlqgX28msvC10",1,0],[1,-44.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (68)(__autogen 1056)",2,[[3,-2303,[1,"bfllbAsEVZALQPF+asy/QD"],[2106],[2],2107]],[0,"d2Zc8NsXBVmYfdLz4ljK/j",1,0],[1,-44.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (71)(__autogen 1057)",2,[[3,-2304,[1,"a8NVPebOtVRrKm2bSqVoFc"],[2108],[2],2109]],[0,"3fgj5arF5ZEotD0xFQJksO",1,0],[1,-44.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (66)(__autogen 1058)",2,[[3,-2305,[1,"58HPTRvwJZXLOdLCw8pqAb"],[2110],[2],2111]],[0,"5fXpGvjrZcr68sa+iadnzg",1,0],[1,-39.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (64)(__autogen 1059)",2,[[3,-2306,[1,"benpU7HHBYNqZcc61XD0un"],[2112],[2],2113]],[0,"edyqO7DUdSlafLj9K1EEmu",1,0],[1,-39.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (65)(__autogen 1060)",2,[[3,-2307,[1,"0fnQjBE/hSZ4nIyFjtWtJp"],[2114],[2],2115]],[0,"b3LFdWw9dfhbZV9lJc9W7S",1,0],[1,-39.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (67)(__autogen 1061)",2,[[3,-2308,[1,"c4C8oj9C1dLYOl9DKhBbG5"],[2116],[2],2117]],[0,"1bL6qN+KFd7p+2D73+dRj7",1,0],[1,-39.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (62)(__autogen 1062)",2,[[3,-2309,[1,"bfyv1viXFSVKGbeXepuZNJ"],[2118],[2],2119]],[0,"1cD96F6R5bl5u7ryov65gf",1,0],[1,-34.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (61)(__autogen 1063)",2,[[3,-2310,[1,"1eH1g0NYtRLZ6gcwIAQnd1"],[2120],[2],2121]],[0,"90h1sg4YtQ+JvNGT9Mnz+9",1,0],[1,-34.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (60)(__autogen 1064)",2,[[3,-2311,[1,"04sx2gy5RanJpLodbipRDO"],[2122],[2],2123]],[0,"b9tO8oEGRUt5tNH6UiZSIW",1,0],[1,-34.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (63)(__autogen 1065)",2,[[3,-2312,[1,"23zFLKx2ZdVoXP0SCByKc5"],[2124],[2],2125]],[0,"d8gV0ElgdXAJS9+C/TDiEA",1,0],[1,-34.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (4)",2,[[3,-2313,[1,"770p3fNCpXkYqxOo/rb+Ou"],[2126],[2],2127]],[0,"d10Hg/25VexoYm+twnFZE3",1,0],[1,75.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (59)(__autogen 1067)",2,[[3,-2314,[1,"10crmPH8Vap5g/YKxO9POB"],[2128],[2],2129]],[0,"c4HfXanydWQIjXGnqt+pFS",1,0],[1,-29.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (57)(__autogen 1068)",2,[[3,-2315,[1,"b4E9UjOxdWsp21Ed5hcxpl"],[2130],[2],2131]],[0,"82Gcsq4yVX+K+9/O9Bl5A6",1,0],[1,-29.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (58)(__autogen 1069)",2,[[3,-2316,[1,"bcikxJpllbyLKZPS5AUWuE"],[2132],[2],2133]],[0,"1bPz0cAhdc56Nx+BoeMZ+c",1,0],[1,-29.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (56)(__autogen 1070)",2,[[3,-2317,[1,"edVhwhf/9TdImzhpFKJq2u"],[2134],[2],2135]],[0,"12Yw/+nyRa27v47yKZwbf8",1,0],[1,-29.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (55)(__autogen 1071)",2,[[3,-2318,[1,"77gKZgRylde7shQTMNB7iK"],[2136],[2],2137]],[0,"41yIpdoeFcLJgGYeN4w+6P",1,0],[1,-24.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (52)(__autogen 1072)",2,[[3,-2319,[1,"3eLjRJeURWK7qrIdywUPOr"],[2138],[2],2139]],[0,"52BAJjBKdX14vHxR8OHpgd",1,0],[1,-24.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (54)(__autogen 1073)",2,[[3,-2320,[1,"21J8KFyP9d74jAL5f8KwDx"],[2140],[2],2141]],[0,"a9p67sBAlXS7u40lpd0MNV",1,0],[1,-24.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (53)(__autogen 1074)",2,[[3,-2321,[1,"17amHq3INeTo4k46HfXGm4"],[2142],[2],2143]],[0,"53d8MzSIRTCIoKZUO5TeuB",1,0],[1,-24.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (3)",2,[[3,-2322,[1,"6czLWVcv5eLp2tqAldSFuY"],[2144],[2],2145]],[0,"c9nnhgq1FX4o3+gO+DXr7V",1,0],[1,65.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (2)",2,[[3,-2323,[1,"a0RZFxgIJRMq4P0SdIA00Y"],[2146],[2],2147]],[0,"b85WkVpoxbIZzJPVcQ52U6",1,0],[1,70.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (44)(__autogen 1077)",2,[[3,-2324,[1,"0aFFVGdAVd9qTIwNOVvW5E"],[2148],[2],2149]],[0,"f3ACG/DT1fsJYv3YFINFzu",1,0],[1,-19.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (50)",2,[[3,-2325,[1,"4cbTyoLzxR04PCHtuKxuIl"],[2150],[2],2151]],[0,"205yVRyvtZQaBSz1EnH12p",1,0],[1,-14.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (46)(__autogen 1079)",2,[[3,-2326,[1,"46d6B+dWRaIKP4lSTrWebz"],[2152],[2],2153]],[0,"6fWlFcO+dc3ad70M9oNjgU",1,0],[1,-14.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (49)(__autogen 1080)",2,[[3,-2327,[1,"58ZkybUzVUa41kHtA4HxZd"],[2154],[2],2155]],[0,"76czjEy3ZWppkISZdsmvWK",1,0],[1,-14.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (45)(__autogen 1081)",2,[[3,-2328,[1,"e4dSbzdadc5rDUkpmH1OdF"],[2156],[2],2157]],[0,"3dqKMEcH9fiqHVdB5wEXaX",1,0],[1,-14.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (47)(__autogen 1082)",2,[[3,-2329,[1,"5aDChTroBQerY1LTW3Y0YM"],[2158],[2],2159]],[0,"93S53ejdRdUZWjJ6sdw/DL",1,0],[1,-19.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (48)(__autogen 1083)",2,[[3,-2330,[1,"6fyQB7hEtQp60sVOqn01ny"],[2160],[2],2161]],[0,"bdjonfvWlcO6Dtc8ZZ2+ec",1,0],[1,-19.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (40)",2,[[3,-2331,[1,"c8FIsUJttXYp8aPkl325Nx"],[2162],[2],2163]],[0,"8b8Cd+gahWc5touztCNySs",1,0],[1,-9.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (43)(__autogen 1085)",2,[[3,-2332,[1,"41JfGiIHpc84dNXGbXPOcZ"],[2164],[2],2165]],[0,"cdzjae6eBQhqy3p3LAKKER",1,0],[1,-9.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (38)(__autogen 1086)",2,[[3,-2333,[1,"11wlHYY3ZSM7dBijTE00qO"],[2166],[2],2167]],[0,"33XoSWK1JaxqFngnjCJDzb",1,0],[1,-4.500002,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (36)(__autogen 1087)",2,[[3,-2334,[1,"eeMRehLXJRCY1CkMDY6M3x"],[2168],[2],2169]],[0,"c7iLT2JelSqLcEknL2J3BC",1,0],[1,-9.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (37)(__autogen 1088)",2,[[3,-2335,[1,"8dk0l+yaxXzbbYiWAr7dxj"],[2170],[2],2171]],[0,"c9Llf5ybBRMLpUEeREBNn7",1,0],[1,-4.500002,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (41)(__autogen 1089)",2,[[3,-2336,[1,"b76665+TRbk65QQ5R8vIfR"],[2172],[2],2173]],[0,"cfdzwKWtxWjIolV7D15hLD",1,0],[1,-4.500002,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (42)(__autogen 1090)",2,[[3,-2337,[1,"88HWfvTS5eYrUGj5RPVubz"],[2174],[2],2175]],[0,"643SaHhVBcVbH2LaN/9HV7",1,0],[1,-4.500002,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (39)(__autogen 1091)",2,[[3,-2338,[1,"89b4p94cZdAbYi0Y7+ifsD"],[2176],[2],2177]],[0,"3dWYCbrrNZpadymaOi+Ks3",1,0],[1,-9.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (30)",2,[[3,-2339,[1,"68rqiKgcpTpKbHVLqTcyGN"],[2178],[2],2179]],[0,"046Fm+GNdV2oKQtwqdo9ux",1,0],[1,5.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (28)",2,[[3,-2340,[1,"08OqRYmV5eD6qSdkLnP++G"],[2180],[2],2181]],[0,"3dBMdV0N9QQInQOuIvXhw0",1,0],[1,0.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (33)(__autogen 1094)",2,[[3,-2341,[1,"85apHkOD5V24wDryznNJQZ"],[2182],[2],2183]],[0,"4fPnTSt+hV2K9Xhv4BA0/d",1,0],[1,5.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (31)(__autogen 1095)",2,[[3,-2342,[1,"f6hEAjBGNeJoMl24zz9tj3"],[2184],[2],2185]],[0,"bfGesSub1b96Tu0V46LSN6",1,0],[1,0.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (32)(__autogen 1096)",2,[[3,-2343,[1,"00ahygfWZd5rRvFVFj6gtK"],[2186],[2],2187]],[0,"44TLNx5S1St4HnhAGitl3x",1,0],[1,0.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (29)(__autogen 1097)",2,[[3,-2344,[1,"e5KnpZaMtWdZjTVyBp2TSf"],[2188],[2],2189]],[0,"b6Qm32OQ5TQadV707dr1DA",1,0],[1,5.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01 (1)",2,[[3,-2345,[1,"b9Q/Ar+9NSsJxAg/Bv6qtZ"],[2190],[2],2191]],[0,"d7zlJlxoBTr61Ql5TrVzZT",1,0],[1,70.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Concrete_Base_01",2,[[3,-2346,[1,"c0AjKZ3j1QXaAYO5c0rEri"],[2192],[2],2193]],[0,"81BkOioj5cIINBtIIsoz1K",1,0],[1,65.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (27)(__autogen 1100)",2,[[3,-2347,[1,"a0m1LgFrNRbLmlzj9mNqnW"],[2194],[2],2195]],[0,"a9CAxLG0VdvZSrd+cq5+aM",1,0],[1,10.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (24)(__autogen 1101)",2,[[3,-2348,[1,"cdE3U9bCxcyYuSMpyyTWmK"],[2196],[2],2197]],[0,"e2rJelgi5axaMVEEbQJ+PD",1,0],[1,25.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (22)(__autogen 1102)",2,[[3,-2349,[1,"9bUPIDWnRQGalyWPyhckp+"],[2198],[2],2199]],[0,"35jebqwn5XFbIXz9Ld1kd5",1,0],[1,25.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (21)(__autogen 1103)",2,[[3,-2350,[1,"2bfnnShadX6pcIjYrEAqk4"],[2200],[2],2201]],[0,"24m43LHzpaHp6tJtgrsL3C",1,0],[1,25.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (19)(__autogen 1104)",2,[[3,-2351,[1,"53d3Le+AFbx4l4y3APDrYd"],[2202],[2],2203]],[0,"93Y6q8IfBT/559papQn3C3",1,0],[1,10.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (18)",2,[[3,-2352,[1,"cdiZyikzReJYBGIDMPTYPH"],[2204],[2],2205]],[0,"33pUr3dvpTF5mBNS4WfmUH",1,0],[1,10.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (14)(__autogen 1106)",2,[[3,-2353,[1,"b8U02k1mJaAaWTmHg/w3/h"],[2206],[2],2207]],[0,"54Mt1o9IFZ8IwBEsOCRPMx",1,0],[1,30.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (13)(__autogen 1107)",2,[[3,-2354,[1,"91LHf2H/ZTi4s+CTBROO7S"],[2208],[2],2209]],[0,"42lAuXkiReprpLRfy2v6iW",1,0],[1,35.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (7)(__autogen 1108)",2,[[3,-2355,[1,"05swpMoTdfnryhg31LITmw"],[2210],[2],2211]],[0,"e3Av8MSmZTsYGoKiZEbl8g",1,0],[1,30.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (8)(__autogen 1109)",2,[[3,-2356,[1,"00qrbDOWtfebmo/qL2Q115"],[2212],[2],2213]],[0,"83ddg4KuRSjr5BS0DYJDFW",1,0],[1,35.5,0,-48.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (5)(__autogen 1110)",2,[[3,-2357,[1,"46PMFkwwZXDaangzVWfBcE"],[2214],[2],2215]],[0,"48N8GDVnhfEIyjRPgINamS",1,0],[1,35.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (6)(__autogen 1111)",2,[[3,-2358,[1,"4cphjCQa9e66wO7BMveQe5"],[2216],[2],2217]],[0,"2ezmDVD0xeMIiIxW8xgcvv",1,0],[1,30.5,0,-43.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (4)(__autogen 1112)",2,[[3,-2359,[1,"b7T4AT8iRUr7sFjWyzRDKS"],[2218],[2],2219]],[0,"a6Uq4WfOlYdY+/6b71nlOS",1,0],[1,35.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (3)(__autogen 1113)",2,[[3,-2360,[1,"530t5ym6ZYoK2K/qGfMht0"],[2220],[2],2221]],[0,"3f88FNLt1bA4mMhpjNEjU/",1,0],[1,30.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (2)(__autogen 1114)",2,[[3,-2361,[1,"b5sYARUnhcvJiDyifzNRZd"],[2222],[2],2223]],[0,"793wIbTa9f1Jw7jG2GFyQx",1,0],[1,25.49,0,-38.51],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01",2,[[3,-2362,[1,"9bgU7qtilVXIzut/s9uOKF"],[2224],[2],2225]],[0,"bbgrVaR2VcvpeSVUY2dfSJ",1,0],[1,10.5,0,-38.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Sidewalk_Crossing_02 (1)",2,[[3,-2363,[1,"56wLc9X/JWLKYJak9h1b2a"],[2226],[2],2227]],[0,"d398vLS09bBJwFJoCgpWwl",1,0],[1,-19.5,0,-28.5]],[4,"SM_Env_Grass_01 (192)",2,[[3,-2364,[1,"daE/JhO5pU54WDg5pfoJV6"],[2228],[2],2229]],[0,"6dDk4nZedU0bE+38hRnRqU",1,0],[1,-14.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (193)",2,[[3,-2365,[1,"59ncuH2x5U0raokZkaO5Gv"],[2230],[2],2231]],[0,"bfTMKhYDJdlZ80OvsaRpJu",1,0],[1,-9.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (194)",2,[[3,-2366,[1,"57ENNOHCxW9YoEkuI6oS4E"],[2232],[2],2233]],[0,"71dnJyKr5cNZdRpZcLFbkx",1,0],[1,-19.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Generic_Ground_03",2,[[3,-2367,[1,"f8D8xPnhJVl65ApPTWzb5Q"],[2234],[2],2235]],[0,"c2mHsxyAdQVbiehSD1PC9x",1,0],[1,21,0,-91],[3,0,1,0,0],[1,1.78202009,1.34832931,1.78202009],[1,0,180,0]],[6,"SM_Generic_Ground_04",2,[[3,-2368,[1,"3aM/nnJ25ftbtvGLaKbweL"],[2236],[2],2237]],[0,"46y07C3olZ6L/VismMzKKp",1,0],[1,-18.75,-1.25,-96.75],[3,0,1,0,0],[1,2.41657114,0.779034853,2.41657114],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_01",2,[[3,-2369,[1,"d6WAMnp95RF5IbxnnlQjTp"],[2238],[2],2239]],[0,"73w6U3X7Rfa4KhSchFZRGN",1,0],[1,-0.200000763,0,-149.8],[3,0,1,0,0],[1,5.74683952,3.22392917,3.22392917],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_01 (2)",2,[[3,-2370,[1,"99gx+E56xYc7BwDVOvks5H"],[2240],[2],2241]],[0,"39c6bAQa9XnKsjIAONDRDw",1,0],[1,143.900009,0,-10.0999994],[3,0,0.7278657057484722,0,-0.6857197054156154],[1,6.1634016,3.95682335,3.9568224],[1,0,-93.41553156561,0]],[6,"SM_Generic_Mountains_Grass_02 (1)",2,[[3,-2371,[1,"c2NKfEPWlbrqkqJU4SWqux"],[2242],[2],2243]],[0,"e0hmyUgiZQTYWKI5ykD8EG",1,0],[1,146.2,0,59.6],[3,0,1,0,0],[1,8.332479,8.332474,8.332474],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_02",2,[[3,-2372,[1,"ba6AcTw4NV9o/GhQMGsLGd"],[2244],[2],2245]],[0,"bf0G+uJ+5adrR2tKFwc+BH",1,0],[1,-140.5,0,-65],[3,0,1,0,0],[1,7.07655859,7.07655525,7.07655525],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_01 (1)",2,[[3,-2373,[1,"49oPcIBfRTnIB/TdNkRKrF"],[2246],[2],2247]],[0,"231N6wxkBfsLcoFjnshJtt",1,0],[1,-82,0,-120.5],[3,0,1,0,0],[1,3.22392821,3.22392917,3.22392917],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_02 (2)",2,[[3,-2374,[1,"34jh/rDKtS7ptMW7TIf0+L"],[2248],[2],2249]],[0,"35hYbiLoNZ5I/rGd5Lm/77",1,0],[1,107.9,0,-84.4],[3,0,1,0,0],[1,4.57856369,4.578562,4.578562],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_01 (3)",2,[[3,-2375,[1,"86w35QS7FSG6YuhYiajJDQ"],[2250],[2],2251]],[0,"eb675q6WlafaTZqkRsESN7",1,0],[1,47,0,132.75],[3,0,0.999202380377437,0,-0.03993248111579687],[1,6.163404,3.95682335,3.95682359],[1,0,-175.42285772893845,0]],[6,"SM_Generic_Mountains_Grass_01 (4)",2,[[3,-2376,[1,"beQOUjAr9em7AlTRmqUweH"],[2252],[2],2253]],[0,"5cYo4sWahY3ZHZeej9RxWJ",1,0],[1,132,0,94.3],[3,0,0.9306731192524395,0,-0.3658518075682209],[1,6.16340446,3.95682335,3.956824],[1,0,-137.07997240655305,0]],[6,"SM_Generic_Mountains_Grass_02 (3)",2,[[3,-2377,[1,"0dwdewz9VbWqcM2SITlhEU"],[2254],[2],2255]],[0,"96j2nQn6RTar4tXdv0VQ3T",1,0],[1,-130.5,-1,95.5],[3,0,1,0,0],[1,8.332479,8.332474,8.332474],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_01 (5)",2,[[3,-2378,[1,"88wNL6H4BSE404BTX/M2O4"],[2256],[2],2257]],[0,"f247o3CD1Z/4SHP6tDAI4e",1,0],[1,-141.5,-2,16],[3,0,1,0,0],[1,4.46097755,5.11533928,8.15362],[1,0,180,0]],[6,"SM_Generic_Mountains_Grass_01 (6)",2,[[3,-2379,[1,"0aoMw7/3Ra766/ZJFHnsFp"],[2258],[2],2259]],[0,"90JDdAEoNQ8rvn9ZOovd5E",1,0],[1,-45.4,0,128.7],[3,0,0.6415463765806306,0,0.7670842500640094],[1,4.46097946,5.11533928,8.153624],[1,0,79.81445157699184,0]],[6,"SM_Generic_Ground_03 (1)",2,[[3,-2380,[1,"04eecF1bBXtIbZTbWC1ndm"],[2260],[2],2261]],[0,"7d39MrorJZDakEkGBroc46",1,0],[1,35.1558838,0,-108.172638],[3,0,1,0,0],[1,2.297432,3.73120356,2.24705076],[1,0,180,0]],[6,"SM_Generic_Ground_03 (2)",2,[[3,-2381,[1,"f5V96GBxFWM7YOb3w4nleJ"],[2262],[2],2263]],[0,"fbhfByhxlav5tZkJd2Qbih",1,0],[1,50,0,-104.75],[3,0,1,0,0],[1,1.78202009,1.34832931,1.78202009],[1,0,180,0]],[6,"SM_Generic_Ground_03 (3)",2,[[3,-2382,[1,"a5iQ2FtgVWl7Zuc2UKsZqz"],[2264],[2],2265]],[0,"c4/5KlQtBQEYPHplqMveDD",1,0],[1,70.25,0,-94.25],[3,0,1,0,0],[1,1.78202009,1.34832931,1.78202009],[1,0,180,0]],[6,"SM_Generic_Ground_04 (1)",2,[[3,-2383,[1,"52Lh7P8Ata+pxJHPtmXo9/"],[2266],[2],2267]],[0,"05Yx8Sy6dVHbi32Kd7FI/i",1,0],[1,-42,-1,-114],[3,0,1,0,0],[1,2.41657114,0.779034853,2.41657114],[1,0,180,0]],[6,"SM_Generic_Ground_04 (2)",2,[[3,-2384,[1,"35rZRZmbRVtLCojy/opGSO"],[2268],[2],2269]],[0,"86CFIkWP5Q0pi0wa8+LDPM",1,0],[1,-86.668,-1,-95],[3,0,1,0,0],[1,2.41657114,0.779034853,2.41657114],[1,0,180,0]],[6,"SM_Generic_Ground_04 (3)",2,[[3,-2385,[1,"adxBp9QQ1VRrTNJiYZY1+e"],[2270],[2],2271]],[0,"8cmfMGzlRaVY8klVYiYW6E",1,0],[1,-87.194,-1.25,33.201],[3,0,1,0,0],[1,2.41657,0.779029965,2.41657],[1,0,180,0]],[6,"SM_Generic_Ground_04 (4)",2,[[3,-2386,[1,"2bu+TUTUlU758vc9vTMPvd"],[2272],[2],2273]],[0,"2cZLvWFYFXB4gSL3OnzFal",1,0],[1,-91.59412,-1.25,5.14736366],[3,0,1,0,0],[1,2.41657,0.779029965,2.41657],[1,0,180,0]],[6,"SM_Generic_Ground_04 (5)",2,[[3,-2387,[1,"58gIhiHrBYjqxQHQs/GiMd"],[2274],[2],2275]],[0,"35jWQt+A9Ra7JIrSft98pW",1,0],[1,-104.894119,-1.25,-16.8526363],[3,0,1,0,0],[1,2.41657,0.779029965,2.41657],[1,0,180,0]],[6,"SM_Generic_Ground_04 (6)",2,[[3,-2388,[1,"1a4qsL/0tVibdZrfymcIjY"],[2276],[2],2277]],[0,"35e3FM17hVMrGEEY1oCV6d",1,0],[1,-83.294,-1.25,67.603],[3,0,1,0,0],[1,2.204774,0.779029965,2.41657],[1,0,180,0]],[6,"SM_Generic_Ground_04 (7)",2,[[3,-2389,[1,"7e7+0GSkdS3aqKvnwGLwBs"],[2278],[2],2279]],[0,"ccRafCkCRe7qoF6vwYqOqS",1,0],[1,-46.5,-1,-96],[3,0,1,0,0],[1,2.41657,0.779029965,2.41657],[1,0,180,0]],[6,"SM_Generic_Ground_04 (8)",2,[[3,-2390,[1,"d4RzUtFcpRJ6QVuzCKkeWk"],[2280],[2],2281]],[0,"5d5+Sa7bpQw5XBGAsOsW0P",1,0],[1,-66,-1,-95],[3,0,1,0,0],[1,2.41657,0.779029965,2.41657],[1,0,180,0]],[6,"SM_Generic_Ground_04 (9)",2,[[3,-2391,[1,"9f7cmoIx5X6pFZuSGDDvCk"],[2282],[2],2283]],[0,"1aqW9OzPha3LI1Kg5Sv6V5",1,0],[1,-101.5,-1,-28.5],[3,0,1,0,0],[1,2.41657,1.15368509,2.41657],[1,0,180,0]],[6,"SM_Generic_Ground_04 (10)",2,[[3,-2392,[1,"836vXTdIpXu7W4+pPJD7XD"],[2284],[2],2285]],[0,"c0mPkmuvZW+5lBCspU1HOK",1,0],[1,-101.5,-1,-52],[3,0,0.9068237608459423,0,0.4215099841821321],[1,2.41657,1.38859248,2.41657],[1,0,130.1400882772146,0]],[6,"SM_Generic_Ground_03 (4)",2,[[3,-2393,[1,"5bR7JhfX1QAZaJdKGZEwWg"],[2286],[2],2287]],[0,"27/5FIs5hUtZpMbTUQ5vQC",1,0],[1,-0.5,0,-94],[3,0,1,0,0],[1,1.78202,1.34833,1.78202],[1,0,180,0]],[6,"SM_Generic_Ground_03 (5)",2,[[3,-2394,[1,"e8IkO63kdcQrbsrNcBmlSb"],[2288],[2],2289]],[0,"0bYcJA7R5c2KxcRNrIL0mG",1,0],[1,76.5,0,77],[3,0,1,0,0],[1,2,2,2],[1,0,180,0]],[6,"SM_Generic_Ground_03 (6)",2,[[3,-2395,[1,"996QrP9gtYAoL90L75mbBT"],[2290],[2],2291]],[0,"b5bDpO1DJUKLKuAGAcsEqd",1,0],[1,115.5,0,-38.5],[3,0,1,0,0],[1,1.78202,1.34833,1.78202],[1,0,180,0]],[6,"SM_Generic_Ground_03 (7)",2,[[3,-2396,[1,"00bQLY1wxfGIjbtSbswTo2"],[2292],[2],2293]],[0,"2dKlkNLphdmJBp+O9MQ6uw",1,0],[1,114.5,0,-16.5],[3,0,1,0,0],[1,1.4482044,1.34833,1.78202],[1,0,180,0]],[6,"SM_Generic_Ground_03 (8)",2,[[3,-2397,[1,"41pOokae5YLaqlNSuWfZ8N"],[2294],[2],2295]],[0,"22DEGFDb9QVbj0/xBk6g6p",1,0],[1,106.5,0,2.5],[3,0,1,0,0],[1,1.4482,3.362265,1.78202],[1,0,180,0]],[6,"SM_Generic_Ground_03 (9)",2,[[3,-2398,[1,"a6Q8WKcv5TMbNVqyla8HGu"],[2296],[2],2297]],[0,"345+2pnc9Rc7IjPtN8KGAu",1,0],[1,115,-0.5,-26],[3,0,1,0,0],[1,1.4482,6.19870949,1.78202],[1,0,180,0]],[6,"SM_Generic_Ground_03 (10)",2,[[3,-2399,[1,"a5y23pBMpQD5UtEQxsyZ2+"],[2298],[2],2299]],[0,"91YsHEhnhVirV/6YF9NjfU",1,0],[1,81,0,51],[3,0,0.803687937462771,0,-0.5950510055254398],[1,1.5,1.5,1.5],[1,0,-106.96746349466773,0]],[6,"SM_Generic_Mountains_Grass_01 (7)",2,[[3,-2400,[1,"053onmxCxXAaGd1eVI7NUw"],[2300],[2],2301]],[0,"55NwMDGtVQS7cD8L0lOuwe",1,0],[1,85,0,-137.5],[3,0,0.4278984334831343,0,-0.9038268255715138],[1,6.1633997,3.95682,3.95682049],[1,0,-50.66852640852414,0]],[6,"SM_Generic_Ground_03 (11)",2,[[3,-2401,[1,"83iUY/ftJb4KLcQLWZgEDZ"],[2302],[2],2303]],[0,"32PsSnw/ZbfY+DZVmdn0Ge",1,0],[1,4.142,-0.298,-117.153],[3,0,1,0,0],[1,2.71848726,4.03506041,2.05400753],[1,0,180,0]],[4,"SM_Env_Grass_01 (203)",2,[[3,-2402,[1,"32OSEWROpfPrTuYyVTva69"],[2304],[2],2305]],[0,"07FoxFW6paDKYUBZaAP20t",1,0],[1,-74.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (204)",2,[[3,-2403,[1,"b9iiI+nHFXTal6cMH5jmus"],[2306],[2],2307]],[0,"37MQX52bRaKInpwj9OwBDV",1,0],[1,-49.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (205)",2,[[3,-2404,[1,"a9dkFi22lUqYxTfVJMGMF8"],[2308],[2],2309]],[0,"43j0qmaoNaM50Be/m4L0sh",1,0],[1,-54.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (206)",2,[[3,-2405,[1,"77aZpG+79QZbtqGaxDXwXL"],[2310],[2],2311]],[0,"0eCWlS/glYwq4Y+CIWIJiQ",1,0],[1,-44.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (207)",2,[[3,-2406,[1,"dfHfE0gHNYMJj3OCooPFIV"],[2312],[2],2313]],[0,"95u/s64w1e/L5JQ8ZCw2Z6",1,0],[1,-59.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (208)",2,[[3,-2407,[1,"f0pofNiRBaCJR0EXJnscFy"],[2314],[2],2315]],[0,"48KUBlX6he+p52nxqII25I",1,0],[1,-59.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (209)",2,[[3,-2408,[1,"c6ejlDHGhcD7hHH81cSjVk"],[2316],[2],2317]],[0,"aeh4QkAIpZ7b1OT83Wj/pn",1,0],[1,-44.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (210)",2,[[3,-2409,[1,"a5kjQ6d7dXcJilVTuwBfbz"],[2318],[2],2319]],[0,"935lJdIU5b3pyRD9gui1oY",1,0],[1,-54.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (211)",2,[[3,-2410,[1,"d8FxhfAYxY/JTBMQ+YA7va"],[2320],[2],2321]],[0,"44CvxVMeFRJ7Bp7Gl9u/KW",1,0],[1,-49.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (212)",2,[[3,-2411,[1,"16iGSsNoNYcapKIru5y27x"],[2322],[2],2323]],[0,"afBq7P1ehZ56f0+wl1VsuX",1,0],[1,-74.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (213)",2,[[3,-2412,[1,"2bIHqCKMxfqJl8wjFWk7wp"],[2324],[2],2325]],[0,"02qbSb59Fdco3uEW/egfAo",1,0],[1,-74.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (214)",2,[[3,-2413,[1,"c45tHOYmVdpJYoraDzntO/"],[2326],[2],2327]],[0,"79r906BstSC4PgbBychVIE",1,0],[1,-49.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (215)",2,[[3,-2414,[1,"c7hW2dKeNRkLUnxRBlaJnf"],[2328],[2],2329]],[0,"72gZf+7LpdV5xjikwm7mld",1,0],[1,-54.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (216)",2,[[3,-2415,[1,"2bYc7B2YNY3K7RXcwPeA8d"],[2330],[2],2331]],[0,"f0iebg4tRaprUp13rTHcMx",1,0],[1,-44.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (217)",2,[[3,-2416,[1,"897ulYPkdZcIuLRW1FWNDY"],[2332],[2],2333]],[0,"eeEU8ZAE1RUrSYs+6OROaV",1,0],[1,-59.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Env_Grass_01 (108)(__autogen 1170)",2,[[3,-2417,[1,"39Aub/HGxTuJdW2tdV4Tqu"],[2334],[2],2335]],[0,"f6jm9DOWtfiLpM5RooR2xO",1,0],[1,-49.5,0,6.5],[3,0,1,0,0],[1,0.68734163,1,1],[1,0,180,0]],[6,"SM_Env_Grass_01 (110)(__autogen 1171)",2,[[3,-2418,[1,"66Lcw+wZFav4VHQHlzvEI9"],[2336],[2],2337]],[0,"a8cA8NVw1fUKhuckqabN28",1,0],[1,-49.5,0,1.5],[3,0,1,0,0],[1,0.68734163,1,1],[1,0,180,0]],[4,"SM_Env_Grass_01 (354)",2,[[3,-2419,[1,"33QGs3nkJRj4gu+XIFFE5B"],[2338],[2],2339]],[0,"82QrpHxvVXOK8hxGl5fXfw",1,0],[1,-69.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (355)",2,[[3,-2420,[1,"8fFyHPNARQy5Mhhww1lP9v"],[2340],[2],2341]],[0,"b26GKz6S5dy74TPecohyyb",1,0],[1,-69.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (356)",2,[[3,-2421,[1,"06I5Reo0Ndpbf30DH5rHCJ"],[2342],[2],2343]],[0,"10m8MsQERVRo7dEFkUqJfE",1,0],[1,-69.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (357)",2,[[3,-2422,[1,"6aeNtWmtZUzIXZ6X/VZVrV"],[2344],[2],2345]],[0,"25Aaq3wlRS5INIS/COGVLN",1,0],[1,-69.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (358)",2,[[3,-2423,[1,"a0Pz4SWjJUMI8UniSGN0pd"],[2346],[2],2347]],[0,"01oE0ppHJb0YA1wNN6ENJI",1,0],[1,-69.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (359)",2,[[3,-2424,[1,"64sSj2Bq5VY4dFLYBzTdlt"],[2348],[2],2349]],[0,"81TONmjNRRgLt90c3IUJF2",1,0],[1,-69.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (360)",2,[[3,-2425,[1,"55V9qRoWdVPp5xrV9nSAbJ"],[2350],[2],2351]],[0,"99Bh4tAWZb7Ym00rDyuw2b",1,0],[1,-69.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (361)",2,[[3,-2426,[1,"4aPXTy0FhbQ52z0YcB4UMG"],[2352],[2],2353]],[0,"b38dHfL5Rftbfxe+cNKdPO",1,0],[1,-69.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (362)",2,[[3,-2427,[1,"0bY+lqjdRdYrcdimCo8m94"],[2354],[2],2355]],[0,"62NJb69EdbqY8HOTkx8c0O",1,0],[1,-69.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (363)",2,[[3,-2428,[1,"1fqYNiR7del7s3BCwyAXf8"],[2356],[2],2357]],[0,"e8c7Dit5RVl67A476XL7a5",1,0],[1,-69.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (364)",2,[[3,-2429,[1,"ffuOGhTW9ZYYto/elJAJec"],[2358],[2],2359]],[0,"68zWDDpxdQ4Ltv6n0L5/I4",1,0],[1,-64.5,0,26.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (365)",2,[[3,-2430,[1,"76UZVKM/dd2a5X7FK/bGwK"],[2360],[2],2361]],[0,"9fqpYr9QVXNK35m/W/3jK9",1,0],[1,-64.5,0,31.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (366)",2,[[3,-2431,[1,"e77g+PDjxZFKtOuxCSL/En"],[2362],[2],2363]],[0,"722cv6kFFUar57sfIC3MLa",1,0],[1,-64.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (367)",2,[[3,-2432,[1,"055rbIxSxfv5yGRFAAPeR7"],[2364],[2],2365]],[0,"19Xj1zmJZQq4TxaN3kNQ7K",1,0],[1,-64.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (368)",2,[[3,-2433,[1,"ccgDjbEE9Wd4ourLrZWLnC"],[2366],[2],2367]],[0,"81H2foWTRS1L6tUZszKWzc",1,0],[1,-64.5,0,16.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (369)",2,[[3,-2434,[1,"d91ZgBuCNbLatAh66o4TUG"],[2368],[2],2369]],[0,"f6w6ImRmNU6oKOV4Zpg5+g",1,0],[1,-64.5,0,21.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (370)",2,[[3,-2435,[1,"c6gSh2HM5UZLGwQLPHHbzl"],[2370],[2],2371]],[0,"97ojxpVCVZUbcxaiRyLnnM",1,0],[1,-64.5,0,36.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (371)",2,[[3,-2436,[1,"154gza+1NT+q1mcW9RnRyu"],[2372],[2],2373]],[0,"616WxyxUVXr5FjQa+ixdBE",1,0],[1,-64.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (372)",2,[[3,-2437,[1,"294we04XlQsYWhDWZdJuqh"],[2374],[2],2375]],[0,"9c4VKAsU1VOottQNCRbXbW",1,0],[1,-64.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (373)",2,[[3,-2438,[1,"62MtMBnbxR8bGQKaO1Cq1n"],[2376],[2],2377]],[0,"5a6bhoOW1cAbx7tAztAxqN",1,0],[1,-64.5,0,51.5],[3,0,1,0,0],[1,0,180,0]],[22,"SM_Env_Sidewalk_Crossing_01 (2)",2,[[3,-2439,[1,"8a3o2/eVBfhJFZ58PiFAXh"],[2378],[2],2379]],[0,"12kiUVfiRRGL++WbafWmBr",1,0],[1,-39.5,0,-68.5],[1,0,-0.00006659433792631155,0]],[4,"SM_Env_Road_Crossing_01 (1)",2,[[3,-2440,[1,"36+PAyvWRWfqmcKiDQ8EbE"],[2380],[2],2381]],[0,"203T3G/ctdqoYBF2oVBh3+",1,0],[1,-34.5,0,-63.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Road_Crossing_01",2,[[3,-2441,[1,"993ad2pF5fNrjzJxbIU3XT"],[2382],[2],2383]],[0,"3dliFjRFJfUKdsjYedAmd9",1,0],[1,-34.5,0,-68.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Road_01 (244)",2,[[3,-2442,[1,"e2dVEqSsFbYIKhWTp1nFbp"],[2384],[2],2385]],[0,"22yAHUvVVZ+qUpWPk5xPmC",1,0],[1,70.5,0,-13.5]],[5,"SM_Env_Road_01 (245)",2,[[3,-2443,[1,"1dgOJcEq9Yh7NwvcLWYDnJ"],[2386],[2],2387]],[0,"b1PMbs6bBW2ZRpPDKC4RSp",1,0],[1,65.5,0,-13.5]],[4,"SM_Env_Grass_01 (419)",2,[[3,-2444,[1,"e71oh+9DJYealeS9PiHT3x"],[2388],[2],2389]],[0,"daUiBKPLxdHL6IdyBHw6HV",1,0],[1,70.51,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (420)",2,[[3,-2445,[1,"d3ficouxdVHK3nK0IQsc9V"],[2390],[2],2391]],[0,"3bJs93BdNWGYPrMpOGMM6a",1,0],[1,5.5,0,46.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (421)",2,[[3,-2446,[1,"a2xO9GyBFZuLeNtuyyj2FY"],[2392],[2],2393]],[0,"6dfxgTTEZTUo+uXNRi5w2K",1,0],[1,5.5,0,41.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (422)",2,[[3,-2447,[1,"cbGDFJ1q1S85Lnqd89iMc/"],[2394],[2],2395]],[0,"37266TzbZRH4sqG+Yd7Tis",1,0],[1,-9.5,0,11.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (423)",2,[[3,-2448,[1,"11/7KXSzBcJrdglp9HW4BY"],[2396],[2],2397]],[0,"cbNHhFTVNR0aGzHEgvBcI3",1,0],[1,-39.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (424)",2,[[3,-2449,[1,"e8wp/kuG1UGaXCcssCY8Yk"],[2398],[2],2399]],[0,"cfK++0giVZFIeBnhaAf6rc",1,0],[1,-39.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (425)",2,[[3,-2450,[1,"c0VXQUAitd1rgNxN8dLHO/"],[2400],[2],2401]],[0,"bddWUpyv9czK8wrhkuuMCY",1,0],[1,-52.75,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (426)",2,[[3,-2451,[1,"fb38cmKidbeoumJBMiIpCe"],[2402],[2],2403]],[0,"f3nscD8n9a4KvMEhwebf7h",1,0],[1,-52.75,0,6.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Env_Grass_01 (428)",2,[[3,-2452,[1,"05wR3dM+JR7L/ZQY/QxJc7"],[2404],[2],2405]],[0,"f7MdYehgZR46wepYTk4kiv",1,0],[1,-57.75,0,1.5],[3,0,1,0,0],[1,0.68734163,1,1],[1,0,180,0]],[4,"SM_Env_Grass_01 (427)",2,[[3,-2453,[1,"372NBVWklUB79CgTNewLTy"],[2406],[2],2407]],[0,"de9FUUGL5U3I7myZUaNelX",1,0],[1,-61.14,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (429)",2,[[3,-2454,[1,"84y7wwjdpWVaZwc5O9YUhx"],[2408],[2],2409]],[0,"c2NTgNLVVVyoyvvpwbLTfv",1,0],[1,-57.22,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (430)",2,[[3,-2455,[1,"41dB6iAJVawqoHexuTayqc"],[2410],[2],2411]],[0,"2fn6Z4mN5cVp1cxBBFoh0/",1,0],[1,-60.7,0,6.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (432)",2,[[3,-2456,[1,"1fBv0pC8daSLHBVSXybxCX"],[2412],[2],2413]],[0,"aeJxySDVNWHKYnnCdgryJg",1,0],[1,0.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (433)",2,[[3,-2457,[1,"f56uJGzA1f5ao5fHAMFChK"],[2414],[2],2415]],[0,"ccBUu7UStY6JqhBXRISHah",1,0],[1,5.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (434)",2,[[3,-2458,[1,"24BJcP0D9QlLUAJmHNSa9L"],[2416],[2],2417]],[0,"05ODra7ypYwZ7y1SCB3OQ8",1,0],[1,5.5,0,-13.49],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (435)",2,[[3,-2459,[1,"4dD0N1mbFaEJBHDEuiJl/U"],[2418],[2],2419]],[0,"5dFeLxNpBcxaQotrT90Bsp",1,0],[1,5.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (436)",2,[[3,-2460,[1,"cfkUB/+llUhLOZGv681ClF"],[2420],[2],2421]],[0,"07jhZsz0ZSKYG4WBg/ft9L",1,0],[1,0.5,0,6.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Driveway_Wide_01 (6)",2,[[3,-2461,[1,"43UkGkIpBV7K05+O5aq0m/"],[2422],[2],2423]],[0,"4dXed13J9T54aNfzKJWcXT",1,0],[1,15.5,0,-38.35]],[5,"SM_Env_Driveway_Wide_01 (7)",2,[[3,-2462,[1,"637nN+aV1dFoJioztOztdr"],[2424],[2],2425]],[0,"8fXr8p8dpaXJYrAm6dLVAg",1,0],[1,15.5,0,-43.13]],[5,"SM_Env_Driveway_Wide_01 (8)",2,[[3,-2463,[1,"565OkK4YNd97zDKzSCSe/m"],[2426],[2],2427]],[0,"a7VmGH6MdSnrTgdVitzDIj",1,0],[1,15.5,0,-47.92]],[5,"SM_Env_Driveway_Wide_01 (9)",2,[[3,-2464,[1,"4f9TMOEkZS6o78tn9l9fyR"],[2428],[2],2429]],[0,"65YsWCSZZZlIndr0lnbcLS",1,0],[1,15.5,0,-48.84]],[5,"SM_Env_Driveway_Wide_01 (10)",2,[[3,-2465,[1,"94YJOQvmFQRoiX5NwMgVRC"],[2430],[2],2431]],[0,"c6Ru7aQNNYS5UtTLjNfvnl",1,0],[1,10.52,0,-33.5]],[5,"SM_Env_Driveway_Wide_01 (11)",2,[[3,-2466,[1,"89Zolrq5hU/o3xAEksALmD"],[2432],[2],2433]],[0,"fb6i0vXz9feYWZ0q2J9rgW",1,0],[1,10.52,0,-38.35]],[5,"SM_Env_Driveway_Wide_01 (12)",2,[[3,-2467,[1,"2fuTdMJ41fopJLYeKfWnbc"],[2434],[2],2435]],[0,"2b2oMdS1daW6TY1x4yfU5x",1,0],[1,10.52,0,-43.13]],[5,"SM_Env_Driveway_Wide_01 (13)",2,[[3,-2468,[1,"6f81HCVRhRVYCkmLq6GKSg"],[2436],[2],2437]],[0,"eaVFXOZ3NXZLYEJpfB7LCF",1,0],[1,10.52,0,-47.92]],[5,"SM_Env_Driveway_Wide_01 (14)",2,[[3,-2469,[1,"37iUNIDxZS7rTkWE3aYh3I"],[2438],[2],2439]],[0,"49vZSojFdYEZYRLAwY0t77",1,0],[1,10.52,0,-48.84]],[4,"SM_Env_Grass_01 (437)",2,[[3,-2470,[1,"47jfM/Be1c56GuwzQiVRGU"],[2440],[2],2441]],[0,"5erAx0+P5dZrgVE67cR2nK",1,0],[1,-4.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (245)",2,[[3,-2471,[1,"1aFAd8eHha3JZWlfNQ/ioG"],[2442],[2],2443]],[0,"48rfiAIu1VOryqcoTJpsjn",1,0],[1,104.5,0,-53.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (431)",2,[[3,-2472,[1,"b6mpB01kFZHYAYX84xHGjx"],[2444],[2],2445]],[0,"38nw4RgZlSLpXfmv2HhpZa",1,0],[1,90.5,0,-55.86],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (438)",2,[[3,-2473,[1,"b7BRLtHgFcBJos9hGdffwB"],[2446],[2],2447]],[0,"f7o0r3FBZVe59oVnv+pVRq",1,0],[1,20.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (439)",2,[[3,-2474,[1,"851Za+4ldQyqPrt62343co"],[2448],[2],2449]],[0,"30kjm8kgFX66C+YZ+cZzVG",1,0],[1,20.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (440)",2,[[3,-2475,[1,"b3kx9yUuVW4J8v9D2ccC9Q"],[2450],[2],2451]],[0,"f2GsIx2p9V04e/PAgDJBfZ",1,0],[1,20.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (441)",2,[[3,-2476,[1,"13jQN6JIFVo58BS1aq/RXp"],[2452],[2],2453]],[0,"e9lT2Dz0lZTK80KT2E1wAB",1,0],[1,25.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (442)",2,[[3,-2477,[1,"03DstqVZRdE7sDIOgZPnBV"],[2454],[2],2455]],[0,"4cYHR+ERtQvoc4xSGUTVPO",1,0],[1,25.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (443)",2,[[3,-2478,[1,"a1EMUe2/VRkIT/lNV6MiR0"],[2456],[2],2457]],[0,"58rj+bDkJQ5rlPRbWD5lhB",1,0],[1,25.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (444)",2,[[3,-2479,[1,"8439A2OF9e87yDyMIn1g6z"],[2458],[2],2459]],[0,"79y8RK8C9Xc6sOJYzpM3o3",1,0],[1,30.5,0,-8.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (445)",2,[[3,-2480,[1,"a01MtepyZanK/2KFF6F+xU"],[2460],[2],2461]],[0,"96a3xHU5deO5qaYdnsNI1N",1,0],[1,30.5,0,-3.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (446)",2,[[3,-2481,[1,"67xr6zOUJUEbcpwh1K4Qx/"],[2462],[2],2463]],[0,"02biv9d0deuKagb5CevX+W",1,0],[1,30.5,0,1.5],[3,0,1,0,0],[1,0,180,0]],[6,"SM_Env_Grass_01 (447)",2,[[3,-2482,[1,"3ap52eoyteo7x3821dlyqh"],[2464],[2],2465]],[0,"65ylc1v+Rajo0paBdD3fbe",1,0],[1,33,0,4],[3,0,1,0,0],[1,0.5,0.5,0.5],[1,0,180,0]],[6,"SM_Env_Grass_01 (11)",2,[[3,-2483,[1,"98NHiioF5aKYRMqfv6Z7vx"],[2466],[2],2467]],[0,"0d8m2ro0dZMptJ62vBuRrR",1,0],[1,33,0,1.5],[3,0,1,0,0],[1,0.5,0.5,0.5],[1,0,180,0]],[6,"SM_Env_Grass_01 (12)",2,[[3,-2484,[1,"21U/iRx51UB7puUWEsBT2w"],[2468],[2],2469]],[0,"20i9bspctXF7xFXGMVV45K",1,0],[1,33,0,-3.5],[3,0,1,0,0],[1,0.5,1,1],[1,0,180,0]],[6,"SM_Env_Grass_01 (448)",2,[[3,-2485,[1,"afsEWdZDRTxJbLOZC/+l6l"],[2470],[2],2471]],[0,"41qE9hnZ1V8J2VBTVSU10o",1,0],[1,33,0,-8.5],[3,0,1,0,0],[1,0.5,1,1],[1,0,180,0]],[4,"SM_Env_Sidewalk_Straight_01 (1)-001",2,[[3,-2486,[1,"07WWgxWppGeJ0HYKGcTGgw"],[2472],[2],2473]],[0,"16IwaHhYFDk5bPQ6U1ok7Q",1,0],[1,25.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[5,"SM_Env_Sidewalk_Straight_01 (38)-001",2,[[3,-2487,[1,"6d6aq737dBoLOhwVsTSF5a"],[2474],[2],2475]],[0,"31NQNARpRHlK2bsJk1d31V",1,0],[1,-4.5,0,21.5]],[4,"SM_Env_Sidewalk_Straight_01 (129)-001",2,[[3,-2488,[1,"83t1B6w2VAB7Lvx6w07cbs"],[2476],[2],2477]],[0,"5cwiLPNk9Mr47+vJIuvn1w",1,0],[1,-39.5,0,-18.5],[3,0,-1,0,0],[1,0,-180,0]],[5,"SM_Env_Sidewalk_Straight_01 (94)-001",2,[[3,-2489,[1,"420Ngo3LRInIRl68R1j5xQ"],[2478],[2],2479]],[0,"25IBnP6zNKwZMDDxzsH8Xw",1,0],[1,-34.5,0,-28.5]],[4,"SM_Env_Sidewalk_Corner_05",2,[[3,-2490,[1,"87LDxxxrBDX78mk5/0fA7T"],[2480],[2],2481]],[0,"4e1vmOZ8pF4IooIwoWV9WM",1,0],[1,60.5,0,-18.5],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (388)-001",2,[[3,-2491,[1,"435UgEY/9BBIsy2RnWEGc9"],[2482],[2],2483]],[0,"eb32x5y4lLnIRhGlgsQsdn",1,0],[1,-85.714,0,-82.726],[3,0,1,0,0],[1,0,180,0]],[4,"SM_Env_Grass_01 (388)-002",2,[[3,-2492,[1,"9egVALR9hBz5f9y0dREnHC"],[2484],[2],2485]],[0,"12UbrqOPZM9aoS43KBkb89",1,0],[1,-82.632,0,-81.524],[3,0,1,0,6.123233995736766e{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"USE_1ST_SHADE_MAP":true,"USE_2ND_SHADE_MAP":true},{},{}],[[[{"lineWidth":1},"baseColor",8,[4,4284692602]],[{},"mainColor",8,[4,4293059298],"shadeColor1",8,[4,4289638062],"shadeColor2",8,[4,4289638062],"specular",8,[4,16777215],"mainTexture",6,0,"shadeMap1",6,1,"shadeMap2",6,2],{},{}],11,11,0,0]]],0,0,[0,0,0,0],[4,18,19,3],[28,28,28,106]]]]
